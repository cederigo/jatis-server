[{ "className" : "org::jruby::javasupport::JavaClass::Initializer" , "selectors" : { "initialize()" : 3}},{ "className" : "org::jruby::compiler::ir::operands::TemporaryVariable" , "selectors" : { "TemporaryVariable(int)" : 2 , "getPrefix()" : 4}},{ "className" : "org::jruby::test::Ruby1_9TestSuite::Ruby1_9ScriptTest" , "selectors" : { "Ruby1_9ScriptTest(String,File,Interpreter)" : 1}},{ "className" : "org::jruby::util::IOChannel::IOReadableWritableByteChannel" , "selectors" : { "IOReadableWritableByteChannel(IRubyObject)" : 1}},{ "className" : "edu::umd::cs::findbugs::ml::SplitCamelCaseIdentifier" , "selectors" : { "SplitCamelCaseIdentifier(String)" : 8 , "split()" : 8}},{ "className" : "edu::umd::cs::findbugs::util::Multiset<T>" , "selectors" : { "Multiset()" : 19}},{ "className" : "edu::umd::cs::findbugs::ba::bcp::Invoke::StringMatcher" , "selectors" : { "match(String)" : 3}},{ "className" : "edu::umd::cs::findbugs::gui2::SaveType" , "selectors" : { "forFile(File)" : 2 , "getFileExtension()" : 2 , "getFilter()" : 1 , "isValid(File)" : 2}},{ "className" : "edu::umd::cs::findbugs::filter::ClassMatcher" , "selectors" : { "ClassMatcher(String)" : 12}},{ "className" : "edu::umd::cs::findbugs::bcel::OpcodeStackDetector" , "selectors" : { "visit(???)" : 33 , "visitMethod(???)" : 1}},{ "className" : "edu::umd::cs::findbugs::cloud::Cloud::UserDesignation" , "selectors" : { "score()" : 7 , "valueOf(String)" : 8}},{ "className" : "edu::umd::cs::findbugs::detect::InfiniteLoop::Jump" , "selectors" : { "Jump(int,int)" : 4 , "equals(Object)" : 2 , "hashCode()" : 2}},{ "className" : "edu::umd::cs::findbugs::util::TypeMatcher" , "selectors" : { "matches(???)" : 1}},{ "className" : "edu::umd::cs::findbugs::ba::heap::StoreAnalysis" , "selectors" : { "StoreAnalysis(???)" : 1}},{ "className" : "edu::umd::cs::findbugs::ba::type::ThrownException" , "selectors" : { "ThrownException(???)" : 1}},{ "className" : "edu::umd::cs::findbugs::gui2::FindBugsFileFilter" , "selectors" : { "getSaveType()" : 1}},{ "className" : "edu::umd::cs::findbugs::log::Profiler::TotalTimeComparator" , "selectors" : { "TotalTimeComparator(Profiler)" : 2}},{ "className" : "edu::umd::cs::findbugs::asm::FBClassReader::MyClassAdapter" , "selectors" : { "MyClassAdapter(???)" : 1}},{ "className" : "edu::umd::cs::findbugs::filter::OrMatcher" , "selectors" : { "OrMatcher()" : 3}},{ "className" : "edu::umd::cs::findbugs::ml::ConvertToARFF::XPathAttribute" , "selectors" : { "XPathAttribute(String,String)" : 3 , "getInstanceValue(???)" : 2}},{ "className" : "edu::umd::cs::findbugs::gui2::FindBugsAnalysisFileFilter" , "selectors" : { "FindBugsAnalysisFileFilter()" : 2}},{ "className" : "edu::umd::cs::findbugs::ba::OpcodeStackScanner" , "selectors" : { "getStackAt(???)" : 3}},{ "className" : "edu::umd::cs::findbugs::ba::ResourceValueAnalysis<T>" , "selectors" : { "ResourceValueAnalysis(???)" : 1}},{ "className" : "edu::umd::cs::findbugs::ba::ReturnPathAnalysis" , "selectors" : { "ReturnPathAnalysis(DepthFirstSearch)" : 1}},{ "className" : "edu::umd::cs::findbugs::Footprint::OperatingSystemBeanWrapper" , "selectors" : { "OperatingSystemBeanWrapper()" : 1 , "getProcessCpuTime()" : 1}},{ "className" : "edu::umd::cs::findbugs::gui2::MainFrame::InitializeGUI" , "selectors" : { "InitializeGUI()" : 1}},{ "className" : "edu::umd::cs::findbugs::detect::FindUnsyncGet" , "selectors" : { "report()" : 1}},{ "className" : "edu::umd::cs::findbugs::cloud::Cloud::Mode" , "selectors" : { "valueOf(String)" : 1}},{ "className" : "org::acm::seguin::tools::install::CStyleGroup" , "selectors" : { "CStyleGroup()" : 1}},{ "className" : "org::acm::seguin::pmd::cpd::JavaLanguage" , "selectors" : { "JavaLanguage()" : 9}},{ "className" : "jdk1_5::Enums::Coin" , "selectors" : { "value()" : 1}},{ "className" : "org::jruby::RubySymbol::SymbolTable::SymbolEntry" , "selectors" : { "SymbolEntry(int,String,RubySymbol,SymbolEntry)" : 3}},{ "className" : "org::jruby::ext::ffi::jffi::FastIntMethod" , "selectors" : { "FastIntMethod(RubyModule,Function,IntResultConverter,IntParameterConverter[])" : 7}},{ "className" : "java::lang::ClassCastException" , "selectors" : { "ClassCastException()" : 17 , "ClassCastException(String)" : 218}},{ "className" : "org::jruby::ast::CallSpecialArgBlockNode" , "selectors" : { "CallSpecialArgBlockNode(ISourcePosition,Node,String,Node,IterNode)" : 2}},{ "className" : "org::jruby::compiler::ir::operands::Variable" , "selectors" : { "getName()" : 6 , "getValue(Map<Operand,Operand>)" : 3 , "isSelf()" : 1}},{ "className" : "org::jruby::JRubyClient" , "selectors" : { "JRubyClient(String[])" : 1}},{ "className" : "java::util::ListIterator" , "selectors" : { "add(E)" : 99 , "hasNext()" : 445 , "hasPrevious()" : 204 , "next()" : 534 , "nextIndex()" : 110 , "previous()" : 239 , "previousIndex()" : 111 , "remove()" : 124 , "set(E)" : 74}},{ "className" : "org::jruby::runtime::load::LoadService::LoadTimer" , "selectors" : { "LoadTimer()" : 1 , "endLoad(String,long)" : 1 , "startLoad(String)" : 1}},{ "className" : "org::jruby::lexer::yacc::ByteArrayLexerSource::PushbackCursor" , "selectors" : { "PushbackCursor(???)" : 1}},{ "className" : "org::jruby::compiler::ir::operands::StringLiteral" , "selectors" : { "StringLiteral(???)" : 3 , "StringLiteral(String)" : 3}},{ "className" : "org::jruby::util::io::BadDescriptorException" , "selectors" : { "BadDescriptorException()" : 5}},{ "className" : "org::jruby::RubyGlobal::LineNumberGlobalVariable" , "selectors" : { "LineNumberGlobalVariable(Ruby,String)" : 1}},{ "className" : "org::jruby::ext::ffi::MemoryOp::BooleanOp" , "selectors" : { "BooleanOp()" : 1}},{ "className" : "org::jruby::ast::Match3Node" , "selectors" : { "Match3Node(ISourcePosition,Node,Node)" : 1 , "getReceiverNode()" : 3 , "getValueNode()" : 3}},{ "className" : "org::jruby::test::Runner" , "selectors" : { "Runner()" : 1}},{ "className" : "org::jruby::Ruby::WeakDescriptorReference" , "selectors" : { "WeakDescriptorReference(ChannelDescriptor,ReferenceQueue)" : 1 , "getFileno()" : 1}},{ "className" : "org::jruby::ext::ffi::jffi::FastIntMethodFactory::BooleanResultConverter" , "selectors" : { "BooleanResultConverter()" : 1}},{ "className" : "org::jruby::ext::ffi::jffi::FastIntMethodFactory::VoidResultConverter" , "selectors" : { "VoidResultConverter()" : 1}},{ "className" : "org::jruby::runtime::RubyEvent" , "selectors" : { "getLineNumberOffset()" : 1 , "getName()" : 1}},{ "className" : "org::jruby::RubyMarshal" , "selectors" : { "createMarshalModule(Ruby)" : 1 , "dump(IRubyObject,IRubyObject[],Block)::ByteList" : 1 , "dumpToStream(IRubyObject,OutputStream,int)" : 2 , "inputStream(IRubyObject)" : 1 , "outputStream(IRubyObject)" : 1 , "setBinmodeIfPossible(IRubyObject)" : 2}},{ "className" : "org::jruby::runtime::callsite::AsetCallSite" , "selectors" : { "AsetCallSite()" : 1}},{ "className" : "org::jruby::ext::ffi::ArrayMemoryIO::BE32ArrayIO" , "selectors" : { "BE32ArrayIO()" : 1}},{ "className" : "java::util::concurrent::SynchronousQueue<T>" , "selectors" : { "SynchronousQueue()" : 10}},{ "className" : "com::ivata::groupware::business::library::faq::FAQDO" , "selectors" : { "FAQDO()" : 1 , "getAnswer()" : 3 , "getQuestion()" : 3 , "setAnswer(String)" : 1}},{ "className" : "com::ivata::groupware::business::calendar::struts::FindEventAction" , "selectors" : { "execute(ActionMapping,ActionErrors,ActionForm,HttpServletRequest,HttpServletResponse,HttpSession)::SystemException" : 1}},{ "className" : "org::argouml::kernel::Owned" , "selectors" : { "getOwner()" : 323}},{ "className" : "org::argouml::language::cpp::ui::SettingsTabCpp" , "selectors" : { "buildPanel()" : 1}},{ "className" : "org::apache::jasper::compiler::AntCompiler" , "selectors" : { "getProject()::Project" : 1 , "quotePathList(String)" : 2}},{ "className" : "org::apache::jasper::compiler::TagFileProcessor::TagFileLoaderVisitor" , "selectors" : { "TagFileLoaderVisitor(Compiler)" : 1}},{ "className" : "megamek::common::weapons::ISSRT4OS" , "selectors" : { "ISSRT4OS()" : 1}},{ "className" : "megamek::common::weapons::MediumNGaussWeapon" , "selectors" : { "MediumNGaussWeapon()" : 1}},{ "className" : "megamek::common::weapons::CLSRM6OS" , "selectors" : { "CLSRM6OS()" : 1}},{ "className" : "megamek::common::weapons::CLAdvancedSRM5OS" , "selectors" : { "CLAdvancedSRM5OS()" : 1}},{ "className" : "megamek::common::weapons::CLAdvancedSRM6IOS" , "selectors" : { "CLAdvancedSRM6IOS()" : 1}},{ "className" : "megamek::common::actions::UnjamAction" , "selectors" : { "UnjamAction(int)" : 1}},{ "className" : "edu::umd::cs::findbugs::ba::type::TopType" , "selectors" : { "TopType()" : 1 , "instance(???)" : 5}},{ "className" : "edu::umd::cs::findbugs::CheckBcel" , "selectors" : { "check()" : 2 , "error(String)" : 5 , "isFinal(Class)" : 5}},{ "className" : "edu::umd::cs::findbugs::ba::FileSourceFileDataSource" , "selectors" : { "FileSourceFileDataSource(String)" : 1}},{ "className" : "edu::umd::cs::findbugs::gui2::Debug" , "selectors" : { "printf(String,Object[])" : 3 , "println(Exception)" : 13 , "println(Object)" : 29}},{ "className" : "edu::umd::cs::findbugs::classfile::FieldOrMethodName" , "selectors" : { "getClassDescriptor()" : 1 , "getName()" : 1 , "getSignature()" : 1 , "isStatic()" : 1}},{ "className" : "edu::umd::cs::findbugs::ba::ObjectTypeFactory" , "selectors" : { "clearInstance()" : 1 , "getInstance(???)" : 43 , "getInstance(String)::ObjectType" : 1}},{ "className" : "edu::umd::cs::findbugs::CallGraph" , "selectors" : { "CallGraph()" : 1 , "addNode(???)" : 1 , "createEdge(CallGraphNode,CallGraphNode,CallSite)" : 1 , "getNodeForMethod(???)" : 2}},{ "className" : "edu::umd::cs::findbugs::detect::WaitInLoop" , "selectors" : { "isConditionAwait()" : 1 , "isMonitorWait()" : 1}},{ "className" : "edu::umd::cs::findbugs::detect::WrongMapIterator" , "selectors" : { "getLoadStoreRegister(int,boolean)" : 9 , "implementsMap(ClassDescriptor)" : 1}},{ "className" : "edu::umd::cs::findbugs::IClassScreener" , "selectors" : { "matches(String)" : 14 , "vacuous()" : 1}},{ "className" : "edu::umd::cs::findbugs::StatelessDetector" , "selectors" : { "visit(???)" : 23 , "visitAfter(???)" : 1 , "visitCode(???)" : 3 , "visitJavaClass(???)" : 1 , "visitMethod(???)" : 2}},{ "className" : "edu::umd::cs::findbugs::anttask::DataFile" , "selectors" : { "DataFile()" : 5 , "getName()" : 3}},{ "className" : "edu::umd::cs::findbugs::workflow::MineBugHistory::Version" , "selectors" : { "Version(long)" : 1 , "get(int)" : 7 , "getSequence()" : 3 , "increment(int)" : 1}},{ "className" : "edu::umd::cs::findbugs::ba::type::ExceptionSet::ThrownExceptionIterator" , "selectors" : { "ThrownExceptionIterator()" : 1 , "findNext()" : 2 , "hasNext()" : 6 , "isExplicit()" : 2 , "next(???)" : 8}},{ "className" : "edu::umd::cs::findbugs::ba::generic::TestGenericObjectType" , "selectors" : { "processTest()" : 7}},{ "className" : "edu::umd::cs::findbugs::detect::BuildCheckReturnAnnotationDatabase" , "selectors" : { "lastPortion(String)" : 3}},{ "className" : "edu::umd::cs::findbugs::io::SlowInputStream" , "selectors" : { "delay()" : 3 , "read(byte[],int,int)" : 1}},{ "className" : "edu::umd::cs::findbugs::detect::InitializationChain" , "selectors" : { "compute()" : 8}},{ "className" : "edu::umd::cs::findbugs::plan::ConstraintGraph" , "selectors" : { "ConstraintGraph()" : 1}},{ "className" : "edu::umd::cs::findbugs::ba::SourceFileDataSource" , "selectors" : { "getFullFileName()" : 1 , "open()" : 1}},{ "className" : "edu::umd::cs::findbugs::gui2::RecentMenu::LimitedArrayList" , "selectors" : { "LimitedArrayList()" : 1 , "add(T)" : 2}},{ "className" : "edu::umd::cs::findbugs::gui2::CompoundMatcher" , "selectors" : { "CompoundMatcher()" : 1}},{ "className" : "edu::umd::cs::findbugs::model::IdentityClassNameRewriter" , "selectors" : { "IdentityClassNameRewriter()" : 1 , "instance()" : 6}},{ "className" : "edu::umd::cs::findbugs::graph::SearchTree<T>" , "selectors" : { "SearchTree(VertexType)" : 2}},{ "className" : "edu::umd::cs::findbugs::PackageWarningSuppressor" , "selectors" : { "PackageWarningSuppressor(String,String)" : 1 , "getPackageName()" : 1}},{ "className" : "edu::umd::cs::findbugs::CallGraphEdge" , "selectors" : { "CallGraphEdge(CallGraphNode,CallGraphNode)" : 1 , "getCallSite()" : 3 , "setCallSite(CallSite)" : 1}},{ "className" : "edu::umd::cs::findbugs::gui2::RecentMenu" , "selectors" : { "RecentMenu(JMenu)" : 1 , "addRecentFile(File)" : 2 , "makeRecentMenu()" : 2}},{ "className" : "edu::umd::cs::findbugs::graph::GraphVertex" , "selectors" : { "getLabel()" : 9 , "setLabel(int)" : 1}},{ "className" : "edu::umd::cs::findbugs::detect::FindRefComparison::ParameterStringType" , "selectors" : { "FindRefComparison" : 2}},{ "className" : "edu::umd::cs::findbugs::FindBugsDisplayFeatures" , "selectors" : { "isAbridgedMessages()" : 2 , "setAbridgedMessages(boolean)" : 2}},{ "className" : "edu::umd::cs::findbugs::ml::ConvertToARFF::RandomIdAttribute" , "selectors" : { "RandomIdAttribute()" : 1 , "generateId()" : 1}},{ "className" : "edu::umd::cs::findbugs::ProgramPoint" , "selectors" : { "ProgramPoint(BytecodeScanningDetector)" : 3 , "getSourceLineAnnotation()" : 3}},{ "className" : "edu::umd::cs::findbugs::ba::StackDepth" , "selectors" : { "StackDepth(int)" : 1 , "getDepth()" : 10 , "setDepth(int)" : 6}},{ "className" : "edu::umd::cs::findbugs::classfile::engine::ClassParserUsingBCEL" , "selectors" : { "parse(Builder)" : 1}},{ "className" : "edu::umd::cs::findbugs::ba::deref::UnconditionalValueDerefDataflow" , "selectors" : { "UnconditionalValueDerefDataflow(CFG,UnconditionalValueDerefAnalysis)" : 1}},{ "className" : "edu::umd::cs::findbugs::detect::StringConcatenation" , "selectors" : { "reset()" : 7 , "storeIntoRegister(int,int)" : 3}},{ "className" : "edu::umd::cs::findbugs::detect::FindSelfComparison" , "selectors" : { "checkForSelfOperation(int,String)" : 3 , "resetDoubleAssignmentState()" : 6}},{ "className" : "edu::umd::cs::findbugs::gui2::SorterTableColumnModel::FBTableCellRenderer" , "selectors" : { "FBTableCellRenderer()" : 3}},{ "className" : "edu::umd::cs::findbugs::ba::ClassNotFoundExceptionParser" , "selectors" : { "getMissingClassName(ClassNotFoundException)" : 4}},{ "className" : "edu::umd::cs::findbugs::RunnableWithExceptions" , "selectors" : { "run()" : 1}},{ "className" : "edu::umd::cs::findbugs::filter::MemberMatcher" , "selectors" : { "MemberMatcher(String)" : 2 , "MemberMatcher(String,String)" : 2 , "toString()" : 2}},{ "className" : "edu::umd::cs::findbugs::TestDesktopIntegration::ConsoleWriter" , "selectors" : { "ConsoleWriter()" : 1}},{ "className" : "edu::umd::cs::findbugs::workflow::CountClassVersions" , "selectors" : { "readFrom(Reader)" : 2 , "readFromStandardInput()" : 1}},{ "className" : "edu::umd::cs::findbugs::gui2::MainFrame::CopyAction" , "selectors" : { "CopyAction()" : 1}},{ "className" : "edu::umd::cs::findbugs::cloud::db::DBStats::Rank" , "selectors" : { "getRank(int)" : 1}},{ "className" : "java::util::zip::ZipException" , "selectors" : { "ZipException(String)" : 23}},{ "className" : "edu::umd::cs::findbugs::util::Bag<T>" , "selectors" : { "Bag()" : 2}},{ "className" : "edu::umd::cs::findbugs::gui2::SpringUtilities" , "selectors" : { "getConstraintsForCell(int,int,Container,int)" : 4}},{ "className" : "edu::umd::cs::findbugs::ba::vna::ValueNumberCache::Entry" , "selectors" : { "ValueNumberCache" : 2}},{ "className" : "edu::umd::cs::findbugs::ba::PutfieldScanner::Scanner" , "selectors" : { "Scanner(???)" : 1 , "execute()" : 1}},{ "className" : "edu::umd::cs::findbugs::gui2::PreferencesFrame::MatchBox" , "selectors" : { "MatchBox(String,Matcher)" : 1 , "getMatcher()" : 2}},{ "className" : "edu::umd::cs::findbugs::XMLWriteableWithMessages" , "selectors" : { "writeXML(XMLOutput,boolean,boolean)" : 1}},{ "className" : "edu::umd::cs::findbugs::detect::EqualsOperandShouldHaveClassCompatibleWithThis" , "selectors" : { "check(ClassDescriptor)" : 3}},{ "className" : "edu::umd::cs::findbugs::ba::generic::GenericSignatureParser::ParameterSignatureIterator" , "selectors" : { "ParameterSignatureIterator()" : 1 , "hasNext()" : 1}},{ "className" : "edu::umd::cs::findbugs::plan::DetectorFactorySelector" , "selectors" : { "selectFactory(DetectorFactory)" : 1}},{ "className" : "edu::umd::cs::findbugs::ba::ca::CallListAnalysis" , "selectors" : { "CallListAnalysis(???)" : 1}},{ "className" : "edu::umd::cs::findbugs::classfile::engine::bcel::ValueNumberDataflowFactory" , "selectors" : { "ValueNumberDataflowFactory()" : 1}},{ "className" : "edu::umd::cs::findbugs::ba::jsr305::TypeQualifierValue::Data" , "selectors" : { "Data()" : 1}},{ "className" : "edu::umd::cs::findbugs::ResourceTrackingDetector<T>" , "selectors" : { "analyzeMethod(???)" : 1}},{ "className" : "edu::umd::cs::findbugs::sourceViewer::DocumentCharacterIterator" , "selectors" : { "DocumentCharacterIterator(Document)" : 1}},{ "className" : "edu::umd::cs::findbugs::detect::InfiniteLoop::BackwardsBranch" , "selectors" : { "BackwardsBranch(OpcodeStack,int,int)" : 1}},{ "className" : "edu::umd::cs::findbugs::ba::heap::StoreDataflow" , "selectors" : { "StoreDataflow(CFG,StoreAnalysis)" : 1}},{ "className" : "edu::umd::cs::findbugs::NoOpFindBugsProgress" , "selectors" : { "NoOpFindBugsProgress()" : 1}},{ "className" : "edu::umd::cs::findbugs::util::MergeMap::MaxMap<T>" , "selectors" : { "MaxMap()" : 1}},{ "className" : "edu::umd::cs::findbugs::ba::DataflowValueChooser" , "selectors" : { "choose(Value)" : 1}},{ "className" : "edu::umd::cs::findbugs::workflow::Filter" , "selectors" : { "parsePriority(String)" : 1}},{ "className" : "javax::swing::text::LabelView" , "selectors" : { "LabelView(Element)" : 4}},{ "className" : "edu::umd::cs::findbugs::classfile::engine::bcel::DominatorsAnalysisFactory" , "selectors" : { "DominatorsAnalysisFactory()" : 1}},{ "className" : "edu::umd::cs::findbugs::gui::FindBugsFrame::ArchiveAndDirectoryFilter" , "selectors" : { "ArchiveAndDirectoryFilter()" : 1}},{ "className" : "edu::umd::cs::findbugs::plan::SingleDetectorFactorySelector" , "selectors" : { "SingleDetectorFactorySelector(Plugin,String)" : 1}},{ "className" : "edu::umd::cs::findbugs::ba::Dataflow::ForwardProgramOrder" , "selectors" : { "compare(BasicBlock,BasicBlock)" : 1}},{ "className" : "edu::umd::cs::findbugs::gui::FindBugsFrame::BugInstanceClassComparator" , "selectors" : { "BugInstanceClassComparator()" : 1}},{ "className" : "edu::umd::cs::findbugs::IFindBugsEngine2" , "selectors" : { "setRankThreshold(int)" : 1}},{ "className" : "edu::umd::cs::findbugs::gui::ConsoleLogger" , "selectors" : { "ConsoleLogger(LogSync)" : 2}},{ "className" : "edu::umd::cs::findbugs::ba::CFGBuilder" , "selectors" : { "build()" : 2 , "getCFG()" : 2}},{ "className" : "edu::umd::cs::findbugs::classfile::IClassObserver" , "selectors" : { "observeClass(ClassDescriptor)" : 2}},{ "className" : "edu::umd::cs::findbugs::ba::bcp::Load" , "selectors" : { "Load(String,String)" : 1}},{ "className" : "edu::umd::cs::findbugs::detect::ReflectiveClasses" , "selectors" : { "process(String)" : 2}},{ "className" : "javax::swing::text::ComponentView" , "selectors" : { "ComponentView(Element)" : 5}},{ "className" : "edu::umd::cs::findbugs::graph::ReverseDepthFirstSearch" , "selectors" : { "ReverseDepthFirstSearch<CFG,Edge,BasicBlock>(CFG)" : 1}},{ "className" : "edu::umd::cs::findbugs::ba::ReversePostOrder::ReversePostfixComparator" , "selectors" : { "ReversePostfixComparator(DepthFirstSearch)" : 1}},{ "className" : "edu::umd::cs::findbugs::ml::ConvertToARFF::IdStringAttribute" , "selectors" : { "IdStringAttribute()" : 1}},{ "className" : "edu::umd::cs::findbugs::ba::BlockTypeDataflow" , "selectors" : { "BlockTypeDataflow(CFG,BlockTypeAnalysis)" : 1}},{ "className" : "edu::umd::cs::findbugs::classfile::engine::bcel::IsNullValueDataflowFactory" , "selectors" : { "IsNullValueDataflowFactory()" : 1}},{ "className" : "edu::umd::cs::findbugs::classfile::engine::bcel::StoreDataflowFactory" , "selectors" : { "StoreDataflowFactory()" : 1}},{ "className" : "edu::umd::cs::findbugs::ba::CFGBuilderFactory" , "selectors" : { "create(???)" : 1}},{ "className" : "edu::umd::cs::findbugs::classfile::engine::bcel::UnpackedCodeFactory" , "selectors" : { "UnpackedCodeFactory()" : 1}},{ "className" : "java::util::concurrent::CopyOnWriteArraySet<T>" , "selectors" : { "CopyOnWriteArraySet()" : 10}},{ "className" : "org::apache::log4j::LoggerTestCase::CountingAppender" , "selectors" : { "CountingAppender()" : 11}},{ "className" : "examples::Sort" , "selectors" : { "usage(String)" : 3}},{ "className" : "org::apache::log4j::lf5::LogRecordFilter" , "selectors" : { "passes(LogRecord)" : 2}},{ "className" : "org::apache::log4j::chainsaw::ControlPanel" , "selectors" : { "ControlPanel(MyTableModel)" : 1}},{ "className" : "org::apache::log4j::spi::LoggingEventTest::BadMessage" , "selectors" : { "BadMessage()" : 1}},{ "className" : "org::apache::log4j::LevelTest::CustomLevel" , "selectors" : { "CustomLevel()" : 1}},{ "className" : "org::acm::seguin::pmd::cpd::PHPLanguage" , "selectors" : { "PHPLanguage()" : 2}},{ "className" : "org::acm::seguin::ide::jbuilder::AboutAction" , "selectors" : { "AboutAction()" : 2}},{ "className" : "org::acm::seguin::pmd::JLS1_4" , "selectors" : { "JLS1_4()" : 1}},{ "className" : "org::acm::seguin::pmd::cpd::PHPTokenizer" , "selectors" : { "PHPTokenizer()" : 1}},{ "className" : "org::acm::seguin::tools::install::MethodMinimumPanel" , "selectors" : { "MethodMinimumPanel()" : 1}},{ "className" : "org::compiere::plaf::CompiereViewportUI" , "selectors" : { "CompiereViewportUI()" : 1}},{ "className" : "org::apache::lucene::analysis::icu::ICUFoldingFilter" , "selectors" : { "ICUFoldingFilter(TokenStream)" : 1}},{ "className" : "net::suberic::pooka::gui::MessageNotificationManager::StartPookaAction" , "selectors" : { "StartPookaAction()" : 1}},{ "className" : "org::jruby::compiler::ir::instructions::NoOperandInstr" , "selectors" : { "NoOperandInstr(Operation)" : 9 , "NoOperandInstr(Operation,Variable)" : 6}},{ "className" : "org::jruby::compiler::ir::operands::Fixnum" , "selectors" : { "Fixnum(BigInteger)" : 1 , "Fixnum(Long)" : 5 , "computeValue(String,Constant)" : 1}},{ "className" : "org::jruby::ast::CallNoArgBlockNode" , "selectors" : { "CallNoArgBlockNode(ISourcePosition,Node,String,IterNode)" : 1 , "CallNoArgBlockNode(ISourcePosition,Node,String,Node,IterNode)" : 2}},{ "className" : "org::jruby::compiler::ir::operands::Reference" , "selectors" : { "Reference(String)" : 3}},{ "className" : "org::jruby::runtime::builtin::InstanceVariableTable::VariableTableEntry" , "selectors" : { "VariableTableEntry(int,String,Object,VariableTableEntry)" : 7}},{ "className" : "org::jruby::java::dispatch::CallableSelector::Matcher" , "selectors" : { "match(Class,IRubyObject)" : 10}},{ "className" : "org::jruby::compiler::ir::operands::MethAddr" , "selectors" : { "MethAddr(String)" : 23 , "getName()" : 3}},{ "className" : "org::jruby::internal::runtime::methods::JavaMethod::JavaMethodZeroOrOneOrTwoOrNBlock" , "selectors" : { "JavaMethodZeroOrOneOrTwoOrNBlock(RubyModule,Visibility)" : 2 , "JavaMethodZeroOrOneOrTwoOrNBlock(RubyModule,Visibility,CallConfiguration)" : 2 , "call(ThreadContext,IRubyObject,RubyModule,String,IRubyObject,IRubyObject,Block)" : 3}},{ "className" : "org::jruby::ast::AndNode" , "selectors" : { "AndNode(ISourcePosition,Node,Node)" : 3 , "getFirstNode()" : 12 , "getSecondNode()" : 6}},{ "className" : "org::jruby::ast::BinaryOperatorNode" , "selectors" : { "getFirstNode()" : 2 , "getSecondNode()" : 3}},{ "className" : "org::jruby::ext::ffi::jffi::IntParameterConverter" , "selectors" : { "intValue(ThreadContext,IRubyObject)" : 12 , "isConvertible(ThreadContext,IRubyObject)" : 6}},{ "className" : "org::jruby::runtime::assigner::Pre2Rest0Post0BlockAssigner" , "selectors" : { "Pre2Rest0Post0BlockAssigner(Node,Node,Node)" : 1 , "assign(Ruby,ThreadContext,IRubyObject,Block)" : 2 , "assign(Ruby,ThreadContext,IRubyObject,IRubyObject,Block)" : 2 , "assign(Ruby,ThreadContext,IRubyObject,IRubyObject,IRubyObject,Block)" : 2}},{ "className" : "javax::script::Bindings" , "selectors" : { "get(Object)" : 5 , "put(String,Object)" : 29 , "remove(Object)" : 2}},{ "className" : "org::jruby::runtime::builtin::Variable" , "selectors" : { "getName()" : 8 , "getValue()" : 9}},{ "className" : "org::jruby::runtime::builtin::InternalVariables" , "selectors" : { "getInternalVariable(String)" : 3 , "setInternalVariable(String,Object)" : 3}},{ "className" : "org::jruby::ast::CallOneArgBlockNode" , "selectors" : { "CallOneArgBlockNode(ISourcePosition,Node,String,ArrayNode,IterNode)" : 3}},{ "className" : "org::jruby::ast::CallNode" , "selectors" : { "CallNode(ISourcePosition,Node,String,Node,Node)" : 22 , "getArgsNode()" : 22 , "getIterNode()" : 3 , "getName()" : 20 , "getReceiverNode()" : 36 , "setArgsNode(Node)" : 1}},{ "className" : "org::jruby::javasupport::JavaProxyMethods" , "selectors" : { "createJavaProxyMethods(ThreadContext)" : 1 , "op_equal(IRubyObject,IRubyObject)" : 1}},{ "className" : "org::jruby::ast::FCallNode" , "selectors" : { "FCallNode(ISourcePosition,String,Node,Node)" : 21 , "getArgsNode()" : 18 , "getIterNode()" : 3 , "getName()" : 12 , "setArgsNode(Node)" : 1}},{ "className" : "org::jruby::internal::runtime::methods::JavaMethod::JavaMethodZeroOrOneOrN" , "selectors" : { "JavaMethodZeroOrOneOrN(RubyModule,Visibility)" : 2 , "JavaMethodZeroOrOneOrN(RubyModule,Visibility,CallConfiguration)" : 2 , "call(ThreadContext,IRubyObject,RubyModule,String,IRubyObject)" : 4}},{ "className" : "org::jruby::ext::Readline::ProcCompletor" , "selectors" : { "ProcCompletor(IRubyObject)" : 1 , "getDelimiter()" : 1 , "setDelimiter(String)" : 1 , "wordIndexOf(String)" : 1}},{ "className" : "org::jruby::ext::ffi::jffi::DefaultMethodFactory::VoidInvoker" , "selectors" : { "VoidInvoker()" : 1}},{ "className" : "org::jruby::ast::java_signature::ReferenceTypeNode" , "selectors" : { "ReferenceTypeNode(String)" : 3 , "getFullyTypedName()" : 11 , "setGenericsTyping(String)" : 4}},{ "className" : "org::jruby::ast::ArgsCatNode" , "selectors" : { "ArgsCatNode(ISourcePosition,Node,Node)" : 2 , "getFirstNode()" : 5 , "getSecondNode()" : 5}},{ "className" : "org::jruby::embed::internal::AbstractLocalContextProvider" , "selectors" : { "getInstance()" : 7}},{ "className" : "org::jruby::test::TestJavaReentrantExceptions::ExceptionThrower" , "selectors" : { "ExceptionThrower()" : 1}},{ "className" : "org::jruby::RubyZlib::RubyGzipReader::CountingIOInputStream" , "selectors" : { "CountingIOInputStream(IRubyObject)" : 1 , "getRuntime()" : 13 , "pos()" : 1}},{ "className" : "org::jruby::lexer::yacc::ISourcePositionHolder" , "selectors" : { "getPosition()" : 13 , "setPosition(ISourcePosition)" : 15}},{ "className" : "java::util::Stack" , "selectors" : { "Stack()" : 295 , "empty()" : 136 , "java" : 11 , "peek()" : 813 , "pop()" : 756 , "push(E)" : 931 , "search(Object)" : 9}},{ "className" : "org::jruby::RubyEnumerable::AppendBlockCallback" , "selectors" : { "AppendBlockCallback(Ruby,RubyArray)" : 6}},{ "className" : "org::jruby::util::ClassCache::ClassGenerator" , "selectors" : { "bytecode()" : 1 , "generate()" : 1 , "name()" : 2}},{ "className" : "org::jruby::ext::ffi::jffi::DefaultMethodThreeArg" , "selectors" : { "DefaultMethodThreeArg(RubyModule,Function,FunctionInvoker,ParameterMarshaller[])" : 1 , "call(ThreadContext,IRubyObject,RubyModule,String,IRubyObject,IRubyObject,IRubyObject)::HeapInvocationBuffer" : 1}},{ "className" : "org::jruby::RubyJRuby::JRubyCompiledScript" , "selectors" : { "compiled_script_inspect_bytecode(IRubyObject)::ClassReader" : 1 , "compiled_script_inspect_bytecode(IRubyObject)::TraceClassVisitor" : 1}},{ "className" : "org::jruby::RubyClass::SpecificArityNew" , "selectors" : { "SpecificArityNew(RubyModule,Visibility)" : 1}},{ "className" : "org::jruby::RubyUnboundMethod" , "selectors" : { "RubyUnboundMethod(Ruby)" : 1 , "bind(ThreadContext,IRubyObject,Block)" : 1 , "defineUnboundMethodClass(Ruby)" : 1 , "newUnboundMethod(RubyModule,String,RubyModule,String,DynamicMethod)" : 4}},{ "className" : "org::jruby::embed::InvokeFailedException" , "selectors" : { "InvokeFailedException(String,Throwable)" : 1 , "InvokeFailedException(Throwable)" : 26}},{ "className" : "org::jruby::internal::runtime::methods::SimpleCallbackMethod" , "selectors" : { "SimpleCallbackMethod(RubyModule,Callback,Visibility)" : 5 , "getCallback()" : 1}},{ "className" : "org::jruby::ast::java_signature::SignatureNode" , "selectors" : { "SignatureNode(String,List<ParameterNode>)" : 2 , "setExtraTypeInfo(String)" : 3 , "setModifiers(List<Modifier>)" : 6 , "setThrows(List<TypeNode>)" : 6}},{ "className" : "org::jruby::test::TestHelper::SomeImplementation" , "selectors" : { "SomeImplementation()" : 2}},{ "className" : "org::jruby::runtime::scope::ThreeVarDynamicScope" , "selectors" : { "ThreeVarDynamicScope(StaticScope)" : 1 , "ThreeVarDynamicScope(StaticScope,DynamicScope)" : 4 , "getValue(int,int)" : 1 , "getValueDepthZeroOrNil(int,IRubyObject)" : 1}},{ "className" : "org::jruby::javasupport::test::TestBSF" , "selectors" : { "loadScript(String)" : 1 , "setUp()::BSFManager" : 1 , "testMapEntrySetIterator()::TestMapValue" : 1}},{ "className" : "org::jruby::test::MockRubyObject::TestMeta" , "selectors" : { "TestMeta(Ruby)" : 1}},{ "className" : "org::jruby::ast::FCallSpecialArgNode" , "selectors" : { "FCallSpecialArgNode(ISourcePosition,String,Node)" : 1}},{ "className" : "org::jruby::compiler::ir::compiler_pass::IR_Printer" , "selectors" : { "IR_Printer()" : 6}},{ "className" : "org::jruby::ext::socket::RubyUNIXSocket::LibCSocket::DefaultSockAddrUnix" , "selectors" : { "<Initializer>()::Signed16" : 1 , "<Initializer>()::UTF8String" : 1 , "DefaultSockAddrUnix()" : 1}},{ "className" : "org::jruby::runtime::callsite::RespondToCallSite::RespondToTuple" , "selectors" : { "RespondToTuple(String,CacheEntry,CacheEntry,IRubyObject)" : 2 , "cacheOk(RubyClass)" : 2}},{ "className" : "org::jruby::ext::ffi::jffi::FastIntMethodOneArg" , "selectors" : { "FastIntMethodOneArg(RubyModule,Function,IntResultConverter,IntParameterConverter[])" : 1 , "invoke(ThreadContext,IRubyObject)" : 2}},{ "className" : "org::jruby::ext::ffi::StructLayout::ArrayFieldIO" , "selectors" : { "ArrayFieldIO(Array)" : 2 , "isCharArray()" : 2}},{ "className" : "org::jruby::embed::internal::EmbedEvalUnitImpl" , "selectors" : { "EmbedEvalUnitImpl(ScriptingContainer,Node,ManyVarsDynamicScope)" : 2 , "EmbedEvalUnitImpl(ScriptingContainer,Node,ManyVarsDynamicScope,Script)" : 2}},{ "className" : "org::jruby::runtime::BlockCallback" , "selectors" : { "call(ThreadContext,IRubyObject[],Block)" : 9}},{ "className" : "java::util::logging::ConsoleHandler" , "selectors" : { "ConsoleHandler()" : 20}},{ "className" : "org::jruby::ext::ffi::jffi::LongParameterConverter" , "selectors" : { "longValue(ThreadContext,IRubyObject)" : 6}},{ "className" : "org::jruby::test::bench::BenchLongFibRecursive::BoxedLong" , "selectors" : { "BoxedLong(long)" : 6 , "lt(BoxedLong)" : 1 , "minus(BoxedLong)" : 2 , "plus(BoxedLong)" : 1}},{ "className" : "org::jruby::embed::PositionFunction" , "selectors" : { "getPosition(double)" : 2 , "getUnits()" : 1 , "getVelocity(double)" : 2}},{ "className" : "org::jruby::compiler::ir::instructions::BRANCH_Instr" , "selectors" : { "BRANCH_Instr(Operation,Operand,Operand,Label)" : 1 , "getJumpTarget()" : 3}},{ "className" : "org::jruby::embed::jsr223::JRubyContext::Scope" , "selectors" : { "getPriority()" : 11 , "values()" : 3}},{ "className" : "java::util::logging::StreamHandler" , "selectors" : { "StreamHandler(OutputStream,Formatter)" : 10}},{ "className" : "org::jruby::lexer::yacc::ByteArrayLexerSource::Cursor" , "selectors" : { "at(int)" : 15 , "read()" : 5 , "unread(int)" : 2}},{ "className" : "org::jruby::ast::ListNode" , "selectors" : { "ListNode(ISourcePosition)" : 11 , "ListNode(ISourcePosition,Node)" : 1 , "add(Node)" : 59 , "addAll(ListNode)" : 9 , "addAll(Node)" : 4 , "childNodes()" : 30 , "get(int)" : 173 , "getLast()" : 5 , "prepend(Node)" : 1 , "size()" : 106}},{ "className" : "org::jruby::util::io::ChannelStream::InputStreamAdapter" , "selectors" : { "InputStreamAdapter(ChannelStream)" : 1 , "read(byte[],int,int)" : 1}},{ "className" : "org::jruby::internal::runtime::methods::JavaMethod::JavaMethodOneOrTwoOrN" , "selectors" : { "JavaMethodOneOrTwoOrN(RubyModule,Visibility)" : 2 , "JavaMethodOneOrTwoOrN(RubyModule,Visibility,CallConfiguration)" : 2 , "call(ThreadContext,IRubyObject,RubyModule,String,IRubyObject,IRubyObject)" : 3}},{ "className" : "org::jruby::compiler::ir::instructions::TwoOperandInstr" , "selectors" : { "TwoOperandInstr(Operation,Variable,Operand,Operand)" : 5 , "getOperands()" : 1}},{ "className" : "org::jruby::RubyGlobal::StringOnlyRubyHash" , "selectors" : { "StringOnlyRubyHash(Ruby,Map,IRubyObject)" : 2 , "getCorrectKey(IRubyObject,ThreadContext)" : 2}},{ "className" : "org::jruby::ext::ffi::jffi::JFFIDynamicMethod" , "selectors" : { "JFFIDynamicMethod(RubyModule,Arity,Function,FunctionInvoker)" : 2}},{ "className" : "org::jruby::compiler::ir::instructions::EQQ_Instr" , "selectors" : { "EQQ_Instr(Variable,Operand,Operand)" : 3}},{ "className" : "org::jruby::runtime::assigner::PreManyRest0Post0BlockAssigner" , "selectors" : { "PreManyRest0Post0BlockAssigner(ListNode,int,Node)" : 1 , "assign(Ruby,ThreadContext,IRubyObject,Block)" : 2 , "assign(Ruby,ThreadContext,IRubyObject,IRubyObject,Block)" : 2 , "assign(Ruby,ThreadContext,IRubyObject,IRubyObject,IRubyObject,Block)" : 2 , "assign(Ruby,ThreadContext,IRubyObject,IRubyObject,IRubyObject,IRubyObject,Block)" : 1 , "assignNilTo(Ruby,ThreadContext,IRubyObject,Block,int)" : 5}},{ "className" : "org::jruby::ast::EvStrNode" , "selectors" : { "EvStrNode(ISourcePosition,Node)" : 3 , "getBody()" : 3}},{ "className" : "org::jruby::ext::ffi::AbstractInvoker" , "selectors" : { "AbstractInvoker(Ruby,RubyClass,int,DirectMemoryIO)" : 3 , "createAbstractInvokerClass(Ruby,RubyModule)" : 1 , "createDynamicMethod(RubyModule)" : 1}},{ "className" : "org::jruby::libraries::ThreadLibrary::Mutex" , "selectors" : { "Mutex(Ruby,RubyClass)" : 2 , "isLocked()" : 6 , "lock(ThreadContext)" : 3 , "setup(Ruby)" : 1 , "unlock(ThreadContext)" : 2}},{ "className" : "org::jruby::ast::util::ArgsUtil" , "selectors" : { "arrayLength(IRubyObject)" : 5 , "convertToJavaArray(IRubyObject)" : 1 , "convertToRubyArray(Ruby,IRubyObject,boolean)" : 10 , "convertToRubyArrayWithCoerce(Ruby,IRubyObject)" : 1 , "popArray(IRubyObject[])" : 1}},{ "className" : "org::jruby::internal::runtime::methods::JavaMethod::JavaMethodZeroOrOneOrNBlock" , "selectors" : { "JavaMethodZeroOrOneOrNBlock(RubyModule,Visibility)" : 2 , "JavaMethodZeroOrOneOrNBlock(RubyModule,Visibility,CallConfiguration)" : 2 , "call(ThreadContext,IRubyObject,RubyModule,String,IRubyObject,Block)" : 4}},{ "className" : "org::jruby::compiler::ir::instructions::PUT_CVAR_Instr" , "selectors" : { "PUT_CVAR_Instr(Operand,String,Operand)" : 6 , "getParentmostScope(Operand)" : 1}},{ "className" : "org::jruby::internal::runtime::methods::DefaultMethod::DynamicMethodBox" , "selectors" : { "DynamicMethodBox()" : 2}},{ "className" : "org::jruby::internal::runtime::methods::InterpretedMethod" , "selectors" : { "InterpretedMethod(RubyModule,StaticScope,Node,ArgsNode,Visibility,ISourcePosition)" : 4 , "call(ThreadContext,IRubyObject,RubyModule,String,IRubyObject[],Block)" : 1 , "post(Ruby,ThreadContext,String)" : 23 , "pre(ThreadContext,String,IRubyObject,Block,Ruby)" : 23}},{ "className" : "org::jruby::ast::FCallThreeArgBlockNode" , "selectors" : { "FCallThreeArgBlockNode(ISourcePosition,String,ArrayNode,IterNode)" : 2}},{ "className" : "org::jruby::ast::java_signature::TypeNode" , "selectors" : { "TypeNode(String)" : 2 , "equals(Object)" : 2 , "getFullyTypedName()" : 2 , "getName()" : 2 , "hashCode()" : 1}},{ "className" : "java::util::zip::CRC32" , "selectors" : { "CRC32()" : 49 , "getValue()" : 44 , "reset()" : 27 , "update(byte[])" : 14 , "update(byte[],int,int)" : 30 , "update(int)" : 5}},{ "className" : "org::jruby::runtime::builtin::InstanceVariableTable::Visitor" , "selectors" : { "visit(String,Object)" : 9}},{ "className" : "org::jruby::embed::AttributeName" , "selectors" : { "toString()" : 5 , "values()" : 1}},{ "className" : "org::jruby::ext::ffi::jffi::FastIntMethodThreeArg" , "selectors" : { "FastIntMethodThreeArg(RubyModule,Function,IntResultConverter,IntParameterConverter[])" : 1 , "invoke(ThreadContext,IRubyObject,IRubyObject,IRubyObject)" : 2}},{ "className" : "org::jruby::ext::ffi::jffi::DefaultMethodFactory::Unsigned8Invoker" , "selectors" : { "Unsigned8Invoker()" : 1}},{ "className" : "org::jruby::ext::ffi::NativeType" , "selectors" : { "valueOf(IRubyObject)" : 2 , "values()" : 3}},{ "className" : "org::jruby::ast::DRegexpNode" , "selectors" : { "DRegexpNode(ISourcePosition,DStrNode,int,boolean)" : 2 , "DRegexpNode(ISourcePosition,int,boolean)" : 4 , "getOnce()" : 1 , "getOptions()" : 3 , "setOnceRegexp(RubyRegexp)" : 1}},{ "className" : "java::lang::reflect::ReflectPermission" , "selectors" : { "ReflectPermission(String)" : 7}},{ "className" : "org::jruby::ext::Readline" , "selectors" : { "createReadline(Ruby)" : 1 , "getCompletor(???)" : 2 , "getHistory(???)" : 9 , "getHolder(Ruby)" : 27 , "initReadline(Ruby,ConsoleHolder)" : 3 , "initReadline(Ruby,ConsoleHolder)::CandidateListCompletionHandler" : 1 , "initReadline(Ruby,ConsoleHolder)::ConsoleReader" : 1 , "s_readline(IRubyObject,IRubyObject,IRubyObject)" : 2 , "s_readline(ThreadContext,IRubyObject,IRubyObject,IRubyObject)" : 1}},{ "className" : "org::jruby::javasupport::JavaUtil::NumericConverter" , "selectors" : { "coerce(RubyNumeric,Class)" : 2}},{ "className" : "java_integration::fixtures::SuperWithInterface::SubClassWithoutInterfaces" , "selectors" : { "SubClassWithoutInterfaces()" : 1}},{ "className" : "org::jruby::ext::ffi::jffi::ParameterMarshaller" , "selectors" : { "marshal(???)" : 25 , "needsInvocationSession()" : 2}},{ "className" : "org::jruby::ext::ffi::jffi::FastLongMethodFactory::Signed32ResultConverter" , "selectors" : { "Signed32ResultConverter()" : 1}},{ "className" : "org::jruby::ext::ffi::FreedMemoryIO" , "selectors" : { "FreedMemoryIO(Ruby)" : 3}},{ "className" : "org::jruby::common::RubyWarnings" , "selectors" : { "RubyWarnings(Ruby)" : 1 , "isVerbose()" : 1 , "warn(ID,ISourcePosition,String,Object[])" : 2 , "warn(ID,String,Object[])" : 72 , "warn(ID,String,int,String,Object[])" : 4 , "warn(String)" : 20 , "warning(ID,ISourcePosition,String,Object[])" : 1 , "warning(ID,String,Object[])" : 13 , "warning(ID,String,int,String,Object[])" : 2}},{ "className" : "org::jruby::compiler::ir::instructions::IR_Instr" , "selectors" : { "IR_Instr(Operation)" : 7 , "IR_Instr(Operation,Variable)" : 5 , "getOperands()" : 2 , "getResult()" : 11 , "getUsedVariables()" : 7 , "hasSideEffects()" : 1 , "isDead()" : 5 , "markDead()" : 3 , "simplifyAndGetResult(Map<Operand,Operand>)" : 1 , "simplifyOperands(Map<Operand,Operand>)" : 1 , "toString()" : 17}},{ "className" : "org::jruby::compiler::ir::operands::Backref" , "selectors" : { "Backref(char)" : 1}},{ "className" : "org::jruby::RubyGlobal::StringGlobalVariable" , "selectors" : { "StringGlobalVariable(Ruby,String,IRubyObject)" : 3}},{ "className" : "javax::script::SimpleScriptContext" , "selectors" : { "SimpleScriptContext()" : 5}},{ "className" : "org::jruby::ext::ffi::jffi::CallbackMethodWithBlock" , "selectors" : { "CallbackMethodWithBlock(RubyModule,Function,FunctionInvoker,ParameterMarshaller[],int)" : 1 , "call(ThreadContext,IRubyObject,RubyModule,String,IRubyObject[],Block)::HeapInvocationBuffer" : 1}},{ "className" : "org::jruby::Ruby::CallTraceFuncHook" , "selectors" : { "CallTraceFuncHook()" : 1 , "setTraceFunc(RubyProc)" : 1}},{ "className" : "org::jruby::test::ScriptTestSuite::ScriptTest" , "selectors" : { "ScriptTest(Ruby,File,String)" : 1 , "scriptName()" : 3}},{ "className" : "org::jruby::compiler::DAGBuilder::B" , "selectors" : { "B(N,N)" : 2}},{ "className" : "org::jruby::ext::ffi::StructLayout::PointerFieldAllocator" , "selectors" : { "PointerFieldAllocator()" : 1}},{ "className" : "org::jruby::ext::ffi::StructLayout::ArrayProxy" , "selectors" : { "ArrayProxy(Ruby,IRubyObject,long,Array,MemoryOp)" : 1 , "ArrayProxy(Ruby,RubyClass,IRubyObject,long,Array,MemoryOp)" : 2 , "get(Ruby,int)" : 2 , "getOffset(IRubyObject)" : 2 , "getOffset(int)" : 2}},{ "className" : "java::io::Closeable" , "selectors" : { "close()" : 135}},{ "className" : "org::jruby::compiler::ir::dataflow::analyses::FrameStorePlacementNode" , "selectors" : { "FrameStorePlacementNode(DataFlowProblem,BasicBlock)" : 1 , "addStoreAndFrameAllocInstructions()" : 1}},{ "className" : "java::util::logging::SimpleFormatter" , "selectors" : { "SimpleFormatter()" : 14 , "format(LogRecord)" : 1 , "java" : 1}},{ "className" : "org::jruby::util::TypeCoercer" , "selectors" : { "coerce(IRubyObject)" : 1}},{ "className" : "org::jruby::internal::runtime::methods::ReflectedJavaMultiMethod" , "selectors" : { "ReflectedJavaMultiMethod(RubyModule,List<Method>,List<JRubyMethod>)" : 1}},{ "className" : "org::jruby::RubyHash::EntryView" , "selectors" : { "contains(RubyHash,Object)" : 2 , "convertEntry(Ruby,RubyHashEntry)" : 1 , "remove(RubyHash,Object)" : 2}},{ "className" : "org::jruby::javasupport::util::RuntimeHelpers::MethodMissingMethod" , "selectors" : { "MethodMissingMethod(DynamicMethod)" : 3}},{ "className" : "org::jruby::compiler::DAGBuilder::N" , "selectors" : { "N(String,Object[])" : 2}},{ "className" : "org::jruby::TopSelfFactory" , "selectors" : { "createTopSelf(Ruby)" : 3}},{ "className" : "org::jruby::runtime::callsite::GeCallSite" , "selectors" : { "GeCallSite()" : 1}},{ "className" : "org::jruby::ext::ffi::MemoryOp::Signed8" , "selectors" : { "Signed8()" : 1}},{ "className" : "java::lang::reflect::Member" , "selectors" : { "getDeclaringClass()" : 28 , "getModifiers()" : 16 , "getName()" : 17 , "isSynthetic()" : 3}},{ "className" : "org::jruby::compiler::ir::instructions::GET_CONST_Instr" , "selectors" : { "GET_CONST_Instr(Variable,IR_Scope,String)" : 1 , "GET_CONST_Instr(Variable,Operand,String)" : 2}},{ "className" : "org::jruby::ast::OptArgNode" , "selectors" : { "OptArgNode(ISourcePosition,Node)" : 2 , "getValue()" : 3}},{ "className" : "org::jruby::ast::DefinedNode" , "selectors" : { "DefinedNode(ISourcePosition,Node)" : 4 , "getExpressionNode()" : 4}},{ "className" : "org::jruby::RubyJRuby::JRubyExtensions" , "selectors" : { "steal_method(IRubyObject,IRubyObject,IRubyObject)" : 1}},{ "className" : "java::util::concurrent::ScheduledExecutorService" , "selectors" : { "schedule(Runnable,long,TimeUnit)" : 7 , "scheduleAtFixedRate(Runnable,long,long,TimeUnit)" : 6 , "scheduleWithFixedDelay(Runnable,long,long,TimeUnit)" : 9}},{ "className" : "org::jruby::ext::ffi::jffi::FastLongMethodFactory::Unsigned32ResultConverter" , "selectors" : { "Unsigned32ResultConverter()" : 1}},{ "className" : "org::jruby::RubyJRuby::JRubyFiberLocal" , "selectors" : { "JRubyFiberLocal(Ruby,RubyClass)" : 1}},{ "className" : "org::jruby::util::GenericMap::KeyIterator" , "selectors" : { "KeyIterator()" : 1}},{ "className" : "org::jruby::javasupport::proxy::InternalJavaProxy" , "selectors" : { "___getInvocationHandler()" : 1 , "___getProxyClass()" : 7}},{ "className" : "org::jruby::runtime::EventHook" , "selectors" : { "event(ThreadContext,RubyEvent,String,int,String,IRubyObject)" : 1 , "eventHandler(ThreadContext,String,String,int,String,IRubyObject)" : 1 , "isInterestedInEvent(RubyEvent)" : 1}},{ "className" : "org::jruby::ext::ffi::jffi::DefaultMethodFactory::Signed8Marshaller" , "selectors" : { "Signed8Marshaller()" : 1}},{ "className" : "javax::script::CompiledScript" , "selectors" : { "eval()" : 5}},{ "className" : "org::jruby::ext::ffi::jffi::FastLongMethodFactory::Unsigned16ResultConverter" , "selectors" : { "Unsigned16ResultConverter()" : 1}},{ "className" : "org::jruby::ast::CallManyArgsBlockNode" , "selectors" : { "CallManyArgsBlockNode(ISourcePosition,Node,String,Node,IterNode)" : 2}},{ "className" : "org::jruby::ast::VAliasNode" , "selectors" : { "VAliasNode(ISourcePosition,String,String)" : 4 , "getNewName()" : 2 , "getOldName()" : 2}},{ "className" : "org::jruby::RubyFileStat::ZipFileStat" , "selectors" : { "ZipFileStat(ZipEntry)" : 1}},{ "className" : "org::jruby::compiler::ir::operands::ArgIndex" , "selectors" : { "ArgIndex(int)" : 1}},{ "className" : "org::jruby::ast::FCallNoArgBlockPassNode" , "selectors" : { "FCallNoArgBlockPassNode(ISourcePosition,String,Node,BlockPassNode)" : 2}},{ "className" : "org::jruby::RubyObject::Data" , "selectors" : { "Data(Ruby,RubyClass,Object)" : 1}},{ "className" : "org::jruby::compiler::ir::operands::Label" , "selectors" : { "Label(String)" : 1}},{ "className" : "org::jruby::javasupport::JavaClass::InstanceMethodInvokerInstaller" , "selectors" : { "InstanceMethodInvokerInstaller(String)" : 1}},{ "className" : "org::jruby::ext::ffi::jffi::DynamicLibrary::Symbol" , "selectors" : { "Symbol(Ruby,DynamicLibrary,String,DirectMemoryIO)" : 2}},{ "className" : "org::jruby::ext::ffi::jffi::DefaultMethodFactory::Signed32Marshaller" , "selectors" : { "Signed32Marshaller()" : 1}},{ "className" : "java::lang::ref::WeakReference<T>" , "selectors" : { "WeakReference(T)" : 96 , "WeakReference(T,ReferenceQueue<? super T>)" : 2}},{ "className" : "org::jruby::RubyHash::FoundPair" , "selectors" : { "FoundPair(IRubyObject,IRubyObject)" : 2}},{ "className" : "org::jruby::ext::ffi::StructLayout::InnerStructFieldIO" , "selectors" : { "InnerStructFieldIO(StructByValue)" : 2}},{ "className" : "org::jruby::ext::ffi::AllocatedDirectMemoryIO" , "selectors" : { "free()" : 3 , "setAutoRelease(boolean)" : 2}},{ "className" : "org::jruby::ast::YieldThreeNode" , "selectors" : { "YieldThreeNode(ISourcePosition,ArrayNode)" : 1}},{ "className" : "org::jruby::ast::ArgsPreTwoArgNode" , "selectors" : { "ArgsPreTwoArgNode(ISourcePosition,ListNode)" : 1}},{ "className" : "org::jruby::javasupport::JavaClass::StaticFieldGetterInstaller" , "selectors" : { "StaticFieldGetterInstaller(String,Field)" : 1}},{ "className" : "org::jruby::ast::RestArgNode" , "selectors" : { "RestArgNode(ISourcePosition,String,int)" : 3 , "getIndex()" : 2}},{ "className" : "org::jruby::ext::LateLoadingLibrary" , "selectors" : { "LateLoadingLibrary(String,String,ClassLoader)" : 1}},{ "className" : "org::jruby::ext::ffi::Factory" , "selectors" : { "alignmentOf(NativeType)" : 1 , "allocateDirectMemory(Ruby,int,boolean)" : 1 , "allocateDirectMemory(Ruby,int,int,boolean)" : 1 , "getCallbackManager()" : 3 , "getInstance()" : 12 , "init(Ruby,RubyModule)" : 2 , "newFunction(Ruby,Pointer,CallbackInfo)" : 1 , "sizeOf(NativeType)" : 1 , "wrapDirectMemory(Ruby,long)" : 3}},{ "className" : "org::jruby::ast::CallOneArgNode" , "selectors" : { "CallOneArgNode(ISourcePosition,Node,String,ArrayNode)" : 2}},{ "className" : "org::jruby::ext::ffi::jffi::FastIntMethodFactory::Signed8ResultConverter" , "selectors" : { "Signed8ResultConverter()" : 1}},{ "className" : "org::jruby::embed::EmbedEvalUnit" , "selectors" : { "getScope()" : 1}},{ "className" : "org::jruby::compiler::ir::CodeVersion::ClassCodeVersion" , "selectors" : { "ClassCodeVersion()" : 1}},{ "className" : "org::jruby::compiler::ir::instructions::RECV_EXCEPTION_Instr" , "selectors" : { "RECV_EXCEPTION_Instr(Variable)" : 1}},{ "className" : "org::jruby::embed::internal::EmbedRubyRuntimeAdapterImpl" , "selectors" : { "EmbedRubyRuntimeAdapterImpl(ScriptingContainer)" : 1 , "getManyVarsDynamicScope(Ruby,int)" : 1 , "parse(InputStream,String,int[])" : 1 , "runParser(Object,String,int[])" : 4}},{ "className" : "org::jruby::util::io::PermissionDeniedException" , "selectors" : { "PermissionDeniedException(String)" : 1}},{ "className" : "org::jruby::RubyInstanceConfig::CompileMode" , "selectors" : { "shouldJIT()" : 1 , "shouldPrecompileAll()" : 2 , "shouldPrecompileCLI()" : 2}},{ "className" : "org::jruby::test::TestRuby" , "selectors" : { "testPrintErrorWithBacktrace(String)" : 2}},{ "className" : "org::jruby::util::collections::IntHashMap::KeyIterator" , "selectors" : { "KeyIterator()" : 1}},{ "className" : "org::jruby::ast::CallTwoArgBlockNode" , "selectors" : { "CallTwoArgBlockNode(ISourcePosition,Node,String,ArrayNode,IterNode)" : 2}},{ "className" : "org::jruby::compiler::ir::instructions::ATTR_ASSIGN_Instr" , "selectors" : { "ATTR_ASSIGN_Instr(Operand,Operand,Operand)" : 2}},{ "className" : "org::jruby::test::TestMethodFactories" , "selectors" : { "confirmMethods(RubyModule)" : 1}},{ "className" : "org::jruby::maven::RakeMojo" , "selectors" : { "execute()::MojoExecutionException" : 1}},{ "className" : "org::jruby::java::invokers::FieldMethodOne" , "selectors" : { "FieldMethodOne(String,RubyModule,Field)" : 2}},{ "className" : "org::jruby::embed::util::SystemPropertyCatcher" , "selectors" : { "findFromJar(Object)" : 1 , "findJRubyHome(Object)" : 2 , "findLoadPaths()" : 1 , "getBaseDir()" : 1 , "getBehavior(LocalVariableBehavior)" : 1 , "getScope(LocalContextScope)" : 2 , "isRuby19(String)" : 2 , "setConfiguration(ScriptingContainer)" : 2}},{ "className" : "org::jruby::ext::ffi::jffi::FastLongMethodFactory::Unsigned16ParameterConverter" , "selectors" : { "Unsigned16ParameterConverter()" : 1}},{ "className" : "org::jruby::util::collections::IntHashMap::EntrySet" , "selectors" : { "EntrySet()" : 1}},{ "className" : "org::jruby::compiler::ir::operands::BacktickString" , "selectors" : { "BacktickString(List<Operand>)" : 1 , "BacktickString(Operand)" : 1}},{ "className" : "org::jruby::util::io::BlockingIO::Condition" , "selectors" : { "Condition(IOChannel)" : 1 , "await()" : 2 , "cancel()" : 1}},{ "className" : "org::jruby::ext::ffi::Platform::Windows" , "selectors" : { "Windows()" : 1}},{ "className" : "org::jruby::ext::ffi::jffi::DefaultMethodFactory::Unsigned16Invoker" , "selectors" : { "Unsigned16Invoker()" : 1}},{ "className" : "sun::misc::Signal" , "selectors" : { "Signal(String)" : 4 , "handle(Signal,SignalHandler)" : 3}},{ "className" : "org::jruby::util::NoFunctionalitySignalFacade" , "selectors" : { "NoFunctionalitySignalFacade()" : 1}},{ "className" : "org::jruby::ext::NetProtocolBufferedIO::NativeImpl" , "selectors" : { "NativeImpl(SelectableChannel)" : 1}},{ "className" : "org::jruby::Ruby::RecursiveFunction" , "selectors" : { "call(IRubyObject,boolean)" : 3}},{ "className" : "org::jruby::util::Random" , "selectors" : { "MIXBITS(int,int)" : 1 , "TWIST(int,int)" : 3 , "init(int)" : 2 , "nextInt32()" : 2 , "nextState()" : 1}},{ "className" : "org::jruby::util::GenericMap" , "selectors" : { "entryIterator()" : 4 , "entrySet()::anonymous(AbstractSet)" : 2 , "keyEquals(Object,Object)" : 1 , "keyHash(Object)" : 1 , "keyIterator()" : 1 , "keySet()::anonymous(AbstractSet)" : 2 , "size()" : 5 , "toArray(Object[],int,Iterator)" : 3 , "valueEquals(Object,Object)" : 4 , "valueHash(Object)" : 2 , "valueIterator()" : 2 , "values()::anonymous(AbstractCollection)" : 2}},{ "className" : "org::jruby::exceptions::JumpException" , "selectors" : { "JumpException()" : 1 , "JumpException(String)" : 1 , "JumpException(String,Throwable)" : 1 , "originalFillInStackTrace()" : 1}},{ "className" : "java::lang::InternalError" , "selectors" : { "InternalError()" : 106 , "InternalError(String)" : 163}},{ "className" : "org::jruby::ast::FCallOneArgBlockNode" , "selectors" : { "FCallOneArgBlockNode(ISourcePosition,String,ArrayNode,IterNode)" : 2}},{ "className" : "org::jruby::ast::types::IEqlNode" , "selectors" : { "eql(IRubyObject,ThreadContext,Ruby,IRubyObject,Block)" : 1}},{ "className" : "org::jruby::ast::StrNode" , "selectors" : { "StrNode(???)" : 8 , "StrNode(ISourcePosition,StrNode,StrNode)" : 1 , "getValue(???)" : 17}},{ "className" : "org::jruby::compiler::ir::operands::Range" , "selectors" : { "Range(Operand,Operand)" : 1 , "fetchCompileTimeArrayElement(int,boolean)" : 1 , "isConstant()" : 1}},{ "className" : "org::jruby::ext::ffi::jffi::CallbackManager::CallbackMemoryIO" , "selectors" : { "CallbackMemoryIO(???)" : 2 , "free()" : 1}},{ "className" : "org::jruby::javasupport::JavaClass::StaticMethodInvokerInstaller" , "selectors" : { "StaticMethodInvokerInstaller(String)" : 1}},{ "className" : "org::jruby::internal::runtime::FutureThread" , "selectors" : { "FutureThread(RubyThread,RubyRunnable)" : 1 , "getFuture()" : 1 , "join()" : 1}},{ "className" : "org::jruby::ast::NilImplicitNode" , "selectors" : { "NilImplicitNode()" : 1}},{ "className" : "java::lang::AbstractMethodError" , "selectors" : { "AbstractMethodError(String)" : 1}},{ "className" : "org::jruby::compiler::ir::compiler_pass::opts::DeadCodeElimination" , "selectors" : { "DeadCodeElimination()" : 2}},{ "className" : "org::jruby::ast::FCallOneArgBlockPassNode" , "selectors" : { "FCallOneArgBlockPassNode(ISourcePosition,String,ArrayNode,BlockPassNode)" : 1}},{ "className" : "org::jruby::ext::ffi::jffi::DefaultMethodFactory::StrptrInvoker" , "selectors" : { "StrptrInvoker()" : 1}},{ "className" : "org::jruby::javasupport::JavaClass::InterfaceInitializer" , "selectors" : { "InterfaceInitializer(Class<?>)" : 1}},{ "className" : "org::jruby::RubyEnumerator::EachWithIndex" , "selectors" : { "EachWithIndex(ThreadContext,Block,int)" : 1}},{ "className" : "org::jruby::util::collections::IntHashMap::KeySet" , "selectors" : { "KeySet()" : 1}},{ "className" : "org::jruby::ext::ffi::jffi::FastLongMethodFactory::Signed64ResultConverter" , "selectors" : { "Signed64ResultConverter()" : 1}},{ "className" : "org::jruby::ast::DVarNode" , "selectors" : { "DVarNode(ISourcePosition,int,String)" : 1 , "getDepth()" : 3 , "getIndex()" : 3 , "getName()" : 2}},{ "className" : "org::jruby::RubyGlobal::BacktraceGlobalVariable" , "selectors" : { "BacktraceGlobalVariable(Ruby,String)" : 1}},{ "className" : "org::jruby::ast::LocalAsgnNode" , "selectors" : { "LocalAsgnNode(ISourcePosition,String,int,Node)" : 2 , "getDepth()" : 6 , "getIndex()" : 6 , "getName()" : 8}},{ "className" : "org::jruby::ast::UndefNode" , "selectors" : { "UndefNode(ISourcePosition,Node)" : 1 , "getName()" : 2}},{ "className" : "org::jruby::ext::ffi::StructLayout::FieldIO" , "selectors" : { "get(ThreadContext,Storage,Member,IRubyObject)" : 1 , "isCacheable()" : 1 , "isValueReferenceNeeded()" : 1 , "put(ThreadContext,Storage,Member,IRubyObject,IRubyObject)" : 1}},{ "className" : "org::jruby::ext::ffi::jffi::FastIntMethodFactory::StringResultConverter" , "selectors" : { "StringResultConverter()" : 1}},{ "className" : "org::jruby::ext::ffi::jffi::FastLongMethodFactory::Unsigned8ParameterConverter" , "selectors" : { "Unsigned8ParameterConverter()" : 1}},{ "className" : "org::jruby::ast::DefnNode" , "selectors" : { "DefnNode(ISourcePosition,ArgumentNode,ArgsNode,StaticScope,Node)" : 2 , "getName()" : 2}},{ "className" : "org::jruby::ext::ffi::jffi::DefaultMethodFactory::Float32Invoker" , "selectors" : { "Float32Invoker()" : 1}},{ "className" : "org::jruby::ext::ffi::Enum::Allocator" , "selectors" : { "Allocator()" : 1}},{ "className" : "org::jruby::RubySignal" , "selectors" : { "createSignal(Ruby)" : 1 , "getSignalFacade()" : 1}},{ "className" : "org::jruby::compiler::ir::operands::Regexp" , "selectors" : { "Regexp(Operand,int)" : 2}},{ "className" : "org::jruby::exceptions::JumpException::SpecialJump" , "selectors" : { "SpecialJump()" : 1}},{ "className" : "org::jruby::demo::TextAreaReadline::Output" , "selectors" : { "Output()" : 1}},{ "className" : "org::jruby::compiler::FastSwitchType" , "selectors" : { "getAssociatedClass()" : 1}},{ "className" : "org::jruby::test::TestHelper::Loader" , "selectors" : { "Loader()" : 1 , "loadClass(String,byte[])" : 1}},{ "className" : "org::jruby::CompatVersion" , "selectors" : { "getVersionFromString(String)" : 1}},{ "className" : "org::jruby::ast::FCallOneArgNode" , "selectors" : { "FCallOneArgNode(ISourcePosition,String,ArrayNode)" : 1}},{ "className" : "org::jruby::JRubyServer::Handler" , "selectors" : { "Handler(Socket)" : 1}},{ "className" : "org::jruby::util::BuiltinScript" , "selectors" : { "BuiltinScript(String)" : 1}},{ "className" : "org::jruby::ext::ffi::jffi::FastLongMethodFactory::Unsigned64ParameterConverter" , "selectors" : { "Unsigned64ParameterConverter()" : 1}},{ "className" : "org::jruby::RubyHash::ConvertingEntry" , "selectors" : { "ConvertingEntry(Ruby,RubyHashEntry)" : 1}},{ "className" : "org::jruby::internal::runtime::methods::JavaMethod::JavaMethodOne" , "selectors" : { "JavaMethodOne(RubyModule,Visibility)" : 2}},{ "className" : "org::jruby::compiler::ir::IR_ExecutionScope" , "selectors" : { "IR_ExecutionScope(IR_Scope,Operand)" : 2 , "addClosure(IR_Closure)" : 2 , "addInstr(IR_Instr)" : 18 , "buildCFG()" : 2 , "canCaptureCallersFrame()" : 1 , "computeExecutionScopeFlags()" : 1 , "endLoop(IR_Loop)" : 1 , "getCFG()" : 18 , "getClosures()" : 7 , "getCurrentLoop()" : 4 , "getInstrs()" : 3 , "init()" : 1 , "modifiesCode()" : 1 , "requiresFrame()" : 1 , "setCodeModificationFlag(boolean)" : 1 , "startLoop(IR_Loop)" : 1 , "toStringInstrs()" : 2 , "toStringVariables()" : 1}},{ "className" : "org::jruby::javasupport::util::ObjectProxyCache::Segment<T>" , "selectors" : { "Segment(int,ObjectProxyCache<T,A>)" : 1}},{ "className" : "org::jruby::javasupport::JavaClass::InstanceFieldSetterInstaller" , "selectors" : { "InstanceFieldSetterInstaller(String,Field)" : 1}},{ "className" : "org::jruby::management::BeanManagerFactory::DummyBeanManager" , "selectors" : { "DummyBeanManager()" : 1}},{ "className" : "org::jruby::ext::ffi::jffi::DefaultMethodFactory::Signed8Invoker" , "selectors" : { "Signed8Invoker()" : 1}},{ "className" : "org::jruby::runtime::ObjectMarshal" , "selectors" : { "marshalTo(Ruby,Object,RubyClass,MarshalStream)" : 1 , "unmarshalFrom(Ruby,RubyClass,UnmarshalStream)" : 1}},{ "className" : "org::jruby::ast::ArgsPreOneArgNode" , "selectors" : { "ArgsPreOneArgNode(ISourcePosition,ListNode)" : 1}},{ "className" : "org::jruby::ext::ffi::StructLayout::InnerStructField" , "selectors" : { "InnerStructField(Ruby,RubyClass)" : 1 , "StructLayout" : 2}},{ "className" : "org::jruby::RubyGlobal::PidAccessor" , "selectors" : { "PidAccessor(Ruby)" : 1}},{ "className" : "org::jruby::runtime::load::LoadService::ScriptClassSearcher" , "selectors" : { "ScriptClassSearcher()" : 1}},{ "className" : "cern::jet::random::Uniform" , "selectors" : { "Uniform(double,double,RandomEngine)" : 2 , "cern" : 26 , "makeDefaultGenerator()" : 27 , "nextBoolean()" : 1 , "nextDouble()" : 2 , "nextDoubleFromTo(double,double)" : 8 , "nextFloatFromTo(float,float)" : 1 , "nextIntFromTo(int,int)" : 32 , "nextLongFromTo(long,long)" : 1 , "setState(double,double)" : 2}},{ "className" : "javax::jcr::ItemExistsException" , "selectors" : { "ItemExistsException(String)" : 8}},{ "className" : "org::quartz::examples::example4::JobStateExample" , "selectors" : { "JobStateExample()" : 1 , "run()" : 1}},{ "className" : "org::argouml::language::java::reveng::classfile::ParserUtils::MethodDescriptorLexer" , "selectors" : { "MethodDescriptorLexer(String)" : 1 , "parse()" : 1}},{ "className" : "org::argouml::ui::TabTarget" , "selectors" : { "refresh()" : 3 , "setTarget(Object)" : 2 , "shouldBeEnabled(Object)" : 4}},{ "className" : "org::argouml::uml::diagram::use_case::ui::UseCaseDiagramPropPanelFactory" , "selectors" : { "UseCaseDiagramPropPanelFactory()" : 1}},{ "className" : "org::argouml::ui::HelpBox" , "selectors" : { "HelpBox(String)" : 1}},{ "className" : "com::jgraph::example::GraphEdX::MyGraphModel" , "selectors" : { "MyGraphModel()" : 2}},{ "className" : "org::apache::catalina::tribes::demos::MapDemo::SystemExit" , "selectors" : { "SystemExit(long)" : 1}},{ "className" : "org::apache::tomcat::util::net::jsse::NioX509KeyManager" , "selectors" : { "NioX509KeyManager(X509KeyManager,String)" : 1}},{ "className" : "megamek::common::weapons::ISMekMortar1" , "selectors" : { "ISMekMortar1()" : 1}},{ "className" : "megamek::common::weapons::infantry::InfantryRifleShredderHeavyNeedlerWeapon" , "selectors" : { "InfantryRifleShredderHeavyNeedlerWeapon()" : 1}},{ "className" : "megamek::common::weapons::CLLB20XACPrototype" , "selectors" : { "CLLB20XACPrototype()" : 1}},{ "className" : "megamek::common::weapons::MiscBayWeapon" , "selectors" : { "MiscBayWeapon()" : 1}},{ "className" : "megamek::common::weapons::infantry::InfantryArchaicHatchetWeapon" , "selectors" : { "InfantryArchaicHatchetWeapon()" : 1}},{ "className" : "megamek::common::weapons::CLLB2XACPrototype" , "selectors" : { "CLLB2XACPrototype()" : 1}},{ "className" : "megamek::client::bot::AttackOption::Sorter" , "selectors" : { "AttackOption" : 1}},{ "className" : "megamek::common::weapons::infantry::InfantryRifleThunderstrokeWeapon" , "selectors" : { "InfantryRifleThunderstrokeWeapon()" : 1}},{ "className" : "megamek::common::weapons::CLLRT15OS" , "selectors" : { "CLLRT15OS()" : 1}},{ "className" : "megamek::common::weapons::CLLRT2" , "selectors" : { "CLLRT2()" : 1}},{ "className" : "megamek::client::ui::AWT::BoardView1::MovingUnit" , "selectors" : { "MovingUnit(Entity,Vector<UnitLocation>)" : 1}},{ "className" : "megamek::common::InfernoTracker::Inferno" , "selectors" : { "Inferno(int,int)" : 4 , "getBurnRoundsPerHit()" : 2 , "getHeatPerRound()" : 1}},{ "className" : "megamek::common::weapons::ISGAC2" , "selectors" : { "ISGAC2()" : 1}},{ "className" : "megamek::common::weapons::infantry::InfantrySMGKA23SubgunWeapon" , "selectors" : { "InfantrySMGKA23SubgunWeapon()" : 1}},{ "className" : "megamek::common::event::GameEvent" , "selectors" : { "GameEvent(Object,int)" : 13 , "getType()" : 2}},{ "className" : "megamek::client::ui::AWT::HostDialog" , "selectors" : { "HostDialog(Frame)" : 3}},{ "className" : "megamek::common::weapons::infantry::InfantryShotgunAvengerCCWWeapon" , "selectors" : { "InfantryShotgunAvengerCCWWeapon()" : 1}},{ "className" : "megamek::common::weapons::KillerWhaleTHandler" , "selectors" : { "KillerWhaleTHandler(ToHitData,WeaponAttackAction,IGame,Server)" : 1}},{ "className" : "megamek::common::weapons::StopSwarmAttackHandler" , "selectors" : { "StopSwarmAttackHandler(ToHitData,WeaponAttackAction,IGame,Server)" : 1}},{ "className" : "megamek::client::CloseClientListener" , "selectors" : { "clientClosed()" : 1}},{ "className" : "megamek::common::weapons::SwarmAttack" , "selectors" : { "SwarmAttack()" : 1}},{ "className" : "megamek::common::weapons::infantry::InfantrySupportHeavyRecoillessRifleInfernoWeapon" , "selectors" : { "InfantrySupportHeavyRecoillessRifleInfernoWeapon()" : 1}},{ "className" : "megamek::common::weapons::CLLRT7" , "selectors" : { "CLLRT7()" : 1}},{ "className" : "megamek::common::weapons::infantry::InfantryRifleBoltActionWeapon" , "selectors" : { "InfantryRifleBoltActionWeapon()" : 1}},{ "className" : "megamek::common::weapons::ISRL4" , "selectors" : { "ISRL4()" : 1}},{ "className" : "megamek::common::weapons::CLStreakSRM4OS" , "selectors" : { "CLStreakSRM4OS()" : 1}},{ "className" : "megamek::common::weapons::LegAttack" , "selectors" : { "LegAttack()" : 1}},{ "className" : "megamek::server::commands::SeeAllCommand" , "selectors" : { "SeeAllCommand(Server)" : 1}},{ "className" : "megamek::client::ui::AWT::ScenarioDialog" , "selectors" : { "ScenarioDialog(Frame,Player[])" : 1}},{ "className" : "megamek::common::weapons::ISHeavyPPC" , "selectors" : { "ISHeavyPPC()" : 1}},{ "className" : "megamek::common::weapons::ScreenLauncherHandler" , "selectors" : { "ScreenLauncherHandler(ToHitData,WeaponAttackAction,IGame,Server)" : 1}},{ "className" : "javax::swing::filechooser::FileNameExtensionFilter" , "selectors" : { "FileNameExtensionFilter(String,String[])" : 2}},{ "className" : "megamek::common::net::marshall::NativeSerializationMarshaller" , "selectors" : { "NativeSerializationMarshaller()" : 1}},{ "className" : "megamek::server::commands::VictoryCommand" , "selectors" : { "VictoryCommand(Server)" : 1 , "reset(int)" : 1}},{ "className" : "megamek::common::weapons::CapitalLaserBayWeapon" , "selectors" : { "CapitalLaserBayWeapon()" : 1}},{ "className" : "megamek::common::weapons::NAC25Weapon" , "selectors" : { "NAC25Weapon()" : 1}},{ "className" : "megamek::common::weapons::infantry::InfantryRifleBoltActionSniperWeapon" , "selectors" : { "InfantryRifleBoltActionSniperWeapon()" : 1}},{ "className" : "megamek::common::preference::IPreferenceChangeListener" , "selectors" : { "preferenceChange(PreferenceChangeEvent)" : 1}},{ "className" : "megamek::common::weapons::infantry::InfantrySupportPortablePlasmaWeapon" , "selectors" : { "InfantrySupportPortablePlasmaWeapon()" : 1}},{ "className" : "megamek::common::weapons::infantry::InfantryArchaicBasicCrossbowWeapon" , "selectors" : { "InfantryArchaicBasicCrossbowWeapon()" : 1}},{ "className" : "megamek::common::weapons::NAC30Weapon" , "selectors" : { "NAC30Weapon()" : 1}},{ "className" : "megamek::common::weapons::ISPPC" , "selectors" : { "ISPPC()" : 1}},{ "className" : "megamek::common::weapons::ISSRT6" , "selectors" : { "ISSRT6()" : 1}},{ "className" : "megamek::common::weapons::CLMicroBomb" , "selectors" : { "CLMicroBomb()" : 1}},{ "className" : "megamek::common::weapons::infantry::InfantryArchaicSingleStunStaffWeapon" , "selectors" : { "InfantryArchaicSingleStunStaffWeapon()" : 1}},{ "className" : "megamek::common::weapons::NL35Weapon" , "selectors" : { "NL35Weapon()" : 1}},{ "className" : "megamek::common::weapons::CLLRT5IOS" , "selectors" : { "CLLRT5IOS()" : 1}},{ "className" : "megamek::client::commands::AddBotCommand" , "selectors" : { "AddBotCommand(Client)" : 1}},{ "className" : "megamek::common::weapons::infantry::InfantryGrenadeInfernoWeapon" , "selectors" : { "InfantryGrenadeInfernoWeapon()" : 1}},{ "className" : "megamek::common::weapons::AutoGrenadeLauncherHandler" , "selectors" : { "AutoGrenadeLauncherHandler(ToHitData,WeaponAttackAction,IGame,Server)" : 2}},{ "className" : "megamek::common::weapons::CLStreakSRM5" , "selectors" : { "CLStreakSRM5()" : 1}},{ "className" : "megamek::common::ConvFighter" , "selectors" : { "ConvFighter()" : 1}},{ "className" : "megamek::common::weapons::BombAttackHandler" , "selectors" : { "BombAttackHandler(ToHitData,WeaponAttackAction,IGame,Server)" : 2}},{ "className" : "megamek::common::weapons::infantry::InfantryRifleFederatedBarrettM42BWeapon" , "selectors" : { "InfantryRifleFederatedBarrettM42BWeapon()" : 1}},{ "className" : "megamek::common::weapons::infantry::InfantryArchaicWhipWeapon" , "selectors" : { "InfantryArchaicWhipWeapon()" : 1}},{ "className" : "megamek::common::ClampMountTank" , "selectors" : { "ClampMountTank()" : 1}},{ "className" : "megamek::common::weapons::ISRL10" , "selectors" : { "ISRL10()" : 1}},{ "className" : "megamek::common::weapons::infantry::InfantryRifleFederatedLongWeapon" , "selectors" : { "InfantryRifleFederatedLongWeapon()" : 1}},{ "className" : "megamek::common::weapons::ISMRM30OS" , "selectors" : { "ISMRM30OS()" : 1}},{ "className" : "megamek::common::weapons::CLLRM1" , "selectors" : { "CLLRM1()" : 1}},{ "className" : "megamek::common::weapons::infantry::InfantryPistolNakjimaLaserPistolWeapon" , "selectors" : { "InfantryPistolNakjimaLaserPistolWeapon()" : 2}},{ "className" : "megamek::common::weapons::CLERMediumLaser" , "selectors" : { "CLERMediumLaser()" : 1}},{ "className" : "megamek::client::ui::AWT::CustomMechDialog::ProtomechMunitionChoicePanel" , "selectors" : { "ProtomechMunitionChoicePanel(Mounted,Vector<AmmoType>)" : 1}},{ "className" : "megamek::common::weapons::ISMRM2" , "selectors" : { "ISMRM2()" : 1}},{ "className" : "megamek::common::weapons::infantry::InfantryArchaicCompoundBowWeapon" , "selectors" : { "InfantryArchaicCompoundBowWeapon()" : 1}},{ "className" : "megamek::common::weapons::infantry::InfantryArchaicHankyuBowWeapon" , "selectors" : { "InfantryArchaicHankyuBowWeapon()" : 1}},{ "className" : "megamek::common::weapons::ISHeavyMG" , "selectors" : { "ISHeavyMG()" : 1}},{ "className" : "megamek::common::weapons::ISMediumLaser" , "selectors" : { "ISMediumLaser()" : 1}},{ "className" : "megamek::common::weapons::ISTHBLB20XAC" , "selectors" : { "ISTHBLB20XAC()" : 1}},{ "className" : "megamek::client::ui::AWT::CustomMechDialog::BombChoicePanel" , "selectors" : { "BombChoicePanel(int[],int)" : 1 , "applyChoice()" : 1 , "setEnabled(boolean)" : 1}},{ "className" : "megamek::common::weapons::CLAdvancedSRM5" , "selectors" : { "CLAdvancedSRM5()" : 1}},{ "className" : "megamek::common::weapons::CLLRT11" , "selectors" : { "CLLRT11()" : 1}},{ "className" : "megamek::common::weapons::NailRivetGunHandler" , "selectors" : { "NailRivetGunHandler(ToHitData,WeaponAttackAction,IGame,Server)" : 1}},{ "className" : "megamek::common::weapons::ISMRM4" , "selectors" : { "ISMRM4()" : 1}},{ "className" : "megamek::common::weapons::infantry::InfantrySupportMk1LightAAWeapon" , "selectors" : { "InfantrySupportMk1LightAAWeapon()" : 1}},{ "className" : "megamek::server::commands::ResetCommand" , "selectors" : { "ResetCommand(Server)" : 1 , "reset(int)" : 1}},{ "className" : "megamek::common::xml::BattleArmorEncoder" , "selectors" : { "decode(???)" : 1 , "encode(Entity,Writer)" : 1}},{ "className" : "megamek::common::weapons::CLBAAPGaussRifle" , "selectors" : { "CLBAAPGaussRifle()" : 1}},{ "className" : "megamek::common::weapons::SwarmAttackHandler" , "selectors" : { "SwarmAttackHandler(ToHitData,WeaponAttackAction,IGame,Server)" : 1}},{ "className" : "megamek::common::Flare" , "selectors" : { "Flare(Coords,int,int,int)" : 1 , "illuminates(Coords)" : 1}},{ "className" : "megamek::server::GeyserProcessor" , "selectors" : { "GeyserProcessor(Server)" : 1 , "findGeysers()" : 1}},{ "className" : "megamek::common::weapons::CLStreakSRM4IOS" , "selectors" : { "CLStreakSRM4IOS()" : 1}},{ "className" : "megamek::common::weapons::BombastLaserWeaponHandler" , "selectors" : { "BombastLaserWeaponHandler(ToHitData,WeaponAttackAction,IGame,Server)" : 1}},{ "className" : "megamek::common::weapons::ISLightRecoillessRifle" , "selectors" : { "ISLightRecoillessRifle()" : 1}},{ "className" : "megamek::common::weapons::CLMediumRecoillessRifle" , "selectors" : { "CLMediumRecoillessRifle()" : 1}},{ "className" : "megamek::common::weapons::ISLRM1OS" , "selectors" : { "ISLRM1OS()" : 1}},{ "className" : "megamek::common::weapons::HeavySCCWeapon" , "selectors" : { "HeavySCCWeapon()" : 1}},{ "className" : "megamek::common::weapons::infantry::InfantryRifleMarxXXLaserWeapon" , "selectors" : { "InfantryRifleMarxXXLaserWeapon()" : 1}},{ "className" : "megamek::common::weapons::BAMGHandler" , "selectors" : { "BAMGHandler(ToHitData,WeaponAttackAction,IGame,Server)" : 1}},{ "className" : "megamek::common::weapons::infantry::InfantrySupportClanERLaserWeapon" , "selectors" : { "InfantrySupportClanERLaserWeapon()" : 1}},{ "className" : "megamek::common::weapons::ISMediumVariableSpeedPulseLaser" , "selectors" : { "ISMediumVariableSpeedPulseLaser()" : 1}},{ "className" : "megamek::common::weapons::RACHandler" , "selectors" : { "RACHandler(ToHitData,WeaponAttackAction,IGame,Server)" : 1}},{ "className" : "megamek::client::commands::ShowTileCommand" , "selectors" : { "ShowTileCommand(Client)" : 1}},{ "className" : "megamek::common::weapons::ISSRT4" , "selectors" : { "ISSRT4()" : 1}},{ "className" : "megamek::common::weapons::infantry::InfantrySupportPortableAutocannonWeapon" , "selectors" : { "InfantrySupportPortableAutocannonWeapon()" : 1}},{ "className" : "megamek::common::weapons::CLHeavyMediumLaser" , "selectors" : { "CLHeavyMediumLaser()" : 1}},{ "className" : "megamek::common::weapons::CLLaserAMS" , "selectors" : { "CLLaserAMS()" : 1}},{ "className" : "megamek::common::weapons::ISRAC5" , "selectors" : { "ISRAC5()" : 1}},{ "className" : "megamek::common::weapons::NavalLaserWeapon" , "selectors" : { "NavalLaserWeapon()" : 3}},{ "className" : "megamek::client::ui::swing::IMapSettingsObserver" , "selectors" : { "updateMapSettings(MapSettings)" : 1}},{ "className" : "megamek::common::weapons::ISMML7" , "selectors" : { "ISMML7()" : 1}},{ "className" : "megamek::client::ui::swing::CamoChoiceDialog::CamoTableModel::Renderer" , "selectors" : { "CamoTableModel" : 1}},{ "className" : "megamek::common::weapons::CLLRT16" , "selectors" : { "CLLRT16()" : 1}},{ "className" : "megamek::common::weapons::CLATM3" , "selectors" : { "CLATM3()" : 1}},{ "className" : "megamek::common::weapons::CLSRT2OS" , "selectors" : { "CLSRT2OS()" : 1}},{ "className" : "megamek::common::weapons::CLSRT6OS" , "selectors" : { "CLSRT6OS()" : 1}},{ "className" : "megamek::common::weapons::ISLightMortar" , "selectors" : { "ISLightMortar()" : 1}},{ "className" : "megamek::common::weapons::CLLRT12" , "selectors" : { "CLLRT12()" : 1}},{ "className" : "megamek::common::options::AbstractOptionsInfo::OptionInfo" , "selectors" : { "OptionInfo(String)" : 1}},{ "className" : "megamek::common::weapons::CLStreakLRM20" , "selectors" : { "CLStreakLRM20()" : 1}},{ "className" : "megamek::common::weapons::ISAC5" , "selectors" : { "ISAC5()" : 1}},{ "className" : "megamek::common::weapons::CLLRT1" , "selectors" : { "CLLRT1()" : 1}},{ "className" : "megamek::common::loaders::BLKMechFile" , "selectors" : { "BLKMechFile(BuildingBlock)" : 2}},{ "className" : "megamek::common::weapons::CLLB2XAC" , "selectors" : { "CLLB2XAC()" : 1}},{ "className" : "megamek::common::weapons::ACBayWeapon" , "selectors" : { "ACBayWeapon()" : 1}},{ "className" : "megamek::common::weapons::CLAdvancedSRM1OS" , "selectors" : { "CLAdvancedSRM1OS()" : 1}},{ "className" : "megamek::common::weapons::CLLRM4OS" , "selectors" : { "CLLRM4OS()" : 1}},{ "className" : "megamek::common::weapons::CapitalPPCBayWeapon" , "selectors" : { "CapitalPPCBayWeapon()" : 1}},{ "className" : "megamek::client::ui::swing::UnitFailureDialog" , "selectors" : { "UnitFailureDialog(JFrame,Map<String,String>)" : 2}},{ "className" : "javax::swing::RowSorter::SortKey" , "selectors" : { "SortKey(int,SortOrder)" : 1}},{ "className" : "megamek::common::weapons::ISRL1" , "selectors" : { "ISRL1()" : 1}},{ "className" : "megamek::common::weapons::ISEnhancedLRM10" , "selectors" : { "ISEnhancedLRM10()" : 1}},{ "className" : "megamek::common::weapons::ASEWMissileWeapon" , "selectors" : { "ASEWMissileWeapon()" : 1}},{ "className" : "megamek::common::weapons::infantry::InfantryArchaicVibroSwordWeapon" , "selectors" : { "InfantryArchaicVibroSwordWeapon()" : 1}},{ "className" : "megamek::common::weapons::CLERMicroLaser" , "selectors" : { "CLERMicroLaser()" : 1}},{ "className" : "megamek::common::weapons::infantry::InfantrySupportPortablePPCWeapon" , "selectors" : { "InfantrySupportPortablePPCWeapon()" : 1}},{ "className" : "megamek::common::weapons::infantry::InfantryArchaicMonowireWeapon" , "selectors" : { "InfantryArchaicMonowireWeapon()" : 1}},{ "className" : "megamek::common::weapons::CLSRT2IOS" , "selectors" : { "CLSRT2IOS()" : 1}},{ "className" : "megamek::common::weapons::CLRAC5" , "selectors" : { "CLRAC5()" : 1}},{ "className" : "megamek::common::weapons::infantry::InfantryRifleMauserG150Weapon" , "selectors" : { "InfantryRifleMauserG150Weapon()" : 1}},{ "className" : "megamek::common::weapons::CLLRM3" , "selectors" : { "CLLRM3()" : 1}},{ "className" : "megamek::common::weapons::infantry::InfantryPistolGyrojetPistolWeapon" , "selectors" : { "InfantryPistolGyrojetPistolWeapon()" : 2}},{ "className" : "megamek::common::weapons::ISBALightMG" , "selectors" : { "ISBALightMG()" : 1}},{ "className" : "megamek::common::weapons::infantry::InfantrySupportClanSemiPortablePulseLaserWeapon" , "selectors" : { "InfantrySupportClanSemiPortablePulseLaserWeapon()" : 1}},{ "className" : "megamek::common::weapons::infantry::InfantryShotgunCombatWeapon" , "selectors" : { "InfantryShotgunCombatWeapon()" : 1}},{ "className" : "megamek::common::weapons::ISUAC10" , "selectors" : { "ISUAC10()" : 1}},{ "className" : "megamek::common::LargeSupportTank" , "selectors" : { "LargeSupportTank()" : 1 , "locations()" : 5}},{ "className" : "megamek::common::weapons::ISSniperCannon" , "selectors" : { "ISSniperCannon()" : 1}},{ "className" : "megamek::common::weapons::infantry::InfantrySupportHeavyPulseLaserWeapon" , "selectors" : { "InfantrySupportHeavyPulseLaserWeapon()" : 1}},{ "className" : "megamek::common::weapons::ISMRM1OS" , "selectors" : { "ISMRM1OS()" : 1}},{ "className" : "megamek::common::weapons::ISBAFlamer" , "selectors" : { "ISBAFlamer()" : 1}},{ "className" : "megamek::common::weapons::infantry::InfantrySupportHeavyGrenadeLauncherInfernoWeapon" , "selectors" : { "InfantrySupportHeavyGrenadeLauncherInfernoWeapon()" : 1}},{ "className" : "megamek::common::weapons::CLLRT17" , "selectors" : { "CLLRT17()" : 1}},{ "className" : "megamek::common::weapons::MMLBayWeapon" , "selectors" : { "MMLBayWeapon()" : 1}},{ "className" : "megamek::common::weapons::SwordfishWeapon" , "selectors" : { "SwordfishWeapon()" : 1}},{ "className" : "megamek::common::util::ItemFile" , "selectors" : { "getItem()" : 2}},{ "className" : "megamek::client::ui::AWT::BoardView1::MovingEntitySprite" , "selectors" : { "MovingEntitySprite(Entity,Coords,int)" : 1}},{ "className" : "megamek::common::weapons::CLAdvancedSRM6" , "selectors" : { "CLAdvancedSRM6()" : 1}},{ "className" : "megamek::common::weapons::ISExtendedLRM15" , "selectors" : { "ISExtendedLRM15()" : 1}},{ "className" : "megamek::common::weapons::PrototypeStreakHandler" , "selectors" : { "PrototypeStreakHandler(ToHitData,WeaponAttackAction,IGame,Server)" : 1}},{ "className" : "megamek::common::weapons::infantry::InfantryRifleMinolta9000Weapon" , "selectors" : { "InfantryRifleMinolta9000Weapon()" : 1}},{ "className" : "megamek::common::weapons::CLSmallLaser" , "selectors" : { "CLSmallLaser()" : 1}},{ "className" : "megamek::common::weapons::infantry::InfantryGrenadeRAGWeapon" , "selectors" : { "InfantryGrenadeRAGWeapon()" : 1}},{ "className" : "megamek::common::xml::MinefieldEncoder" , "selectors" : { "encode(Minefield,Writer)" : 2}},{ "className" : "megamek::common::weapons::StingrayWeapon" , "selectors" : { "StingrayWeapon()" : 1}},{ "className" : "megamek::common::weapons::infantry::InfantrySupportFiredrakeNeedlerWeapon" , "selectors" : { "InfantrySupportFiredrakeNeedlerWeapon()" : 1}},{ "className" : "megamek::common::weapons::infantry::InfantryArchaicNeuralWhipWeapon" , "selectors" : { "InfantryArchaicNeuralWhipWeapon()" : 1}},{ "className" : "megamek::server::ElevatorProcessor" , "selectors" : { "ElevatorProcessor(Server)" : 1 , "findElevators()" : 1}},{ "className" : "megamek::common::weapons::infantry::InfantryShotgunPumpActionWeapon" , "selectors" : { "InfantryShotgunPumpActionWeapon()" : 1}},{ "className" : "megamek::common::weapons::ISTHBLB5XAC" , "selectors" : { "ISTHBLB5XAC()" : 1}},{ "className" : "megamek::client::ui::swing::BoardEditor::HexCanvas" , "selectors" : { "HexCanvas()" : 1}},{ "className" : "megamek::common::xml::PlayerEncoder" , "selectors" : { "encode(Player,Writer)" : 1}},{ "className" : "megamek::common::net::DataStreamConnection::NetworkPacket" , "selectors" : { "NetworkPacket(boolean,int,byte[])" : 1}},{ "className" : "megamek::common::weapons::LightNGaussWeapon" , "selectors" : { "LightNGaussWeapon()" : 1}},{ "className" : "megamek::server::commands::LocalSaveGameCommand" , "selectors" : { "LocalSaveGameCommand(Server)" : 1}},{ "className" : "megamek::common::weapons::ISLRT20OS" , "selectors" : { "ISLRT20OS()" : 1}},{ "className" : "megamek::common::weapons::infantry::InfantryPistolHoldOutLaserPistolWeapon" , "selectors" : { "InfantryPistolHoldOutLaserPistolWeapon()" : 2}},{ "className" : "megamek::common::weapons::infantry::InfantryArchaicShortBowWeapon" , "selectors" : { "InfantryArchaicShortBowWeapon()" : 1}},{ "className" : "megamek::common::weapons::ISMRM10OS" , "selectors" : { "ISMRM10OS()" : 1}},{ "className" : "megamek::common::weapons::CLLRT20" , "selectors" : { "CLLRT20()" : 1}},{ "className" : "megamek::common::weapons::PlasmaMFUKWeaponHandler" , "selectors" : { "PlasmaMFUKWeaponHandler(ToHitData,WeaponAttackAction,IGame,Server)" : 1}},{ "className" : "megamek::common::weapons::infantry::InfantryShotgunCeresCrowdbusterWeapon" , "selectors" : { "InfantryShotgunCeresCrowdbusterWeapon()" : 1}},{ "className" : "megamek::common::weapons::ISMML5" , "selectors" : { "ISMML5()" : 1}},{ "className" : "megamek::common::weapons::infantry::InfantrySupportClanERHeavyLaserWeapon" , "selectors" : { "InfantrySupportClanERHeavyLaserWeapon()" : 1}},{ "className" : "megamek::common::weapons::ISDavidLightGaussRifle" , "selectors" : { "ISDavidLightGaussRifle()" : 1}},{ "className" : "megamek::common::weapons::ISStreakSRM4" , "selectors" : { "ISStreakSRM4()" : 1}},{ "className" : "megamek::common::weapons::infantry::InfantrySupportTsunamiHeavyGaussRifleWeapon" , "selectors" : { "InfantrySupportTsunamiHeavyGaussRifleWeapon()" : 1}},{ "className" : "megamek::common::weapons::PiranhaWeapon" , "selectors" : { "PiranhaWeapon()" : 1}},{ "className" : "megamek::common::weapons::ACFlakHandler" , "selectors" : { "ACFlakHandler(ToHitData,WeaponAttackAction,IGame,Server)" : 1}},{ "className" : "megamek::common::TerrainFactory" , "selectors" : { "TerrainFactory()" : 1}},{ "className" : "megamek::common::weapons::DiveBombAttack" , "selectors" : { "DiveBombAttack()" : 1}},{ "className" : "megamek::common::weapons::infantry::InfantryRifleFederatedBarrettM61ALaserInfernoWeapon" , "selectors" : { "InfantryRifleFederatedBarrettM61ALaserInfernoWeapon()" : 1}},{ "className" : "megamek::common::weapons::ISEnhancedLRM15" , "selectors" : { "ISEnhancedLRM15()" : 1}},{ "className" : "megamek::common::weapons::CLLRT15" , "selectors" : { "CLLRT15()" : 1}},{ "className" : "megamek::common::weapons::infantry::InfantryLRMWeapon" , "selectors" : { "InfantryLRMWeapon()" : 2}},{ "className" : "megamek::common::options::AbstractOptions::GroupsEnumeration::GroupProxy::OptionsEnumeration" , "selectors" : { "OptionsEnumeration()" : 1}},{ "className" : "megamek::common::weapons::infantry::InfantrySupportHeavyGrenadeLauncherWeapon" , "selectors" : { "InfantrySupportHeavyGrenadeLauncherWeapon()" : 1}},{ "className" : "megamek::common::weapons::ISLAC2" , "selectors" : { "ISLAC2()" : 1}},{ "className" : "megamek::common::weapons::CLRAC2" , "selectors" : { "CLRAC2()" : 1}},{ "className" : "megamek::common::weapons::ISCruiseMissile50" , "selectors" : { "ISCruiseMissile50()" : 1}},{ "className" : "megamek::common::weapons::ISCruiseMissile70" , "selectors" : { "ISCruiseMissile70()" : 1}},{ "className" : "megamek::client::ui::swing::HeatEffects" , "selectors" : { "getHeatEffects(int,boolean,boolean)" : 1}},{ "className" : "megamek::common::weapons::ISSRT6OS" , "selectors" : { "ISSRT6OS()" : 1}},{ "className" : "megamek::common::weapons::ISLRM20OS" , "selectors" : { "ISLRM20OS()" : 1}},{ "className" : "megamek::common::weapons::ISMRM5OS" , "selectors" : { "ISMRM5OS()" : 1}},{ "className" : "megamek::client::ui::AWT::DialogOptionComponent::BasicOption" , "selectors" : { "BasicOption(String,Object)" : 1}},{ "className" : "megamek::common::weapons::infantry::InfantryRifleElephantGunWeapon" , "selectors" : { "InfantryRifleElephantGunWeapon()" : 1}},{ "className" : "megamek::common::weapons::BombTAG" , "selectors" : { "BombTAG()" : 1}},{ "className" : "megamek::common::weapons::CLLRT10OS" , "selectors" : { "CLLRT10OS()" : 1}},{ "className" : "megamek::common::weapons::AlamoMissileWeapon" , "selectors" : { "AlamoMissileWeapon()" : 1}},{ "className" : "megamek::common::weapons::StreakLRMHandler" , "selectors" : { "StreakLRMHandler(ToHitData,WeaponAttackAction,IGame,Server)" : 1}},{ "className" : "megamek::common::weapons::infantry::InfantryArchaicMedusaWhipWeapon" , "selectors" : { "InfantryArchaicMedusaWhipWeapon()" : 1}},{ "className" : "megamek::common::containers::PlayerIDandList" , "selectors" : { "getPlayerID()" : 1 , "setPlayerID(int)" : 3}},{ "className" : "megamek::client::ui::AWT::BoardView1::GhostEntitySprite" , "selectors" : { "GhostEntitySprite(Entity)" : 1}},{ "className" : "megamek::common::options::Quirks" , "selectors" : { "Quirks()" : 1 , "initialize()" : 1 , "isQuirkLegalFor(IOption,Entity)" : 1}},{ "className" : "megamek::common::weapons::ISMRM30IOS" , "selectors" : { "ISMRM30IOS()" : 1}},{ "className" : "megamek::common::weapons::CLLargeChemicalLaser" , "selectors" : { "CLLargeChemicalLaser()" : 1}},{ "className" : "megamek::common::weapons::ERFlamerHeatHandler" , "selectors" : { "ERFlamerHeatHandler(ToHitData,WeaponAttackAction,IGame,Server)" : 1}},{ "className" : "megamek::common::weapons::CLStreakLRM20OS" , "selectors" : { "CLStreakLRM20OS()" : 1}},{ "className" : "megamek::common::loaders::BLKGunEmplacementFile" , "selectors" : { "BLKGunEmplacementFile(BuildingBlock)" : 1}},{ "className" : "megamek::common::weapons::CLLRT8" , "selectors" : { "CLLRT8()" : 1}},{ "className" : "megamek::common::weapons::NAC35Weapon" , "selectors" : { "NAC35Weapon()" : 1}},{ "className" : "megamek::common::weapons::ISHeavyFlamer" , "selectors" : { "ISHeavyFlamer()" : 1}},{ "className" : "megamek::common::weapons::ISHeavyRifle" , "selectors" : { "ISHeavyRifle()" : 1}},{ "className" : "megamek::common::weapons::infantry::InfantryArchaicImprovisedClubWeapon" , "selectors" : { "InfantryArchaicImprovisedClubWeapon()" : 1}},{ "className" : "megamek::common::weapons::CLBPod" , "selectors" : { "CLBPod()" : 1}},{ "className" : "megamek::common::weapons::MicroBombHandler" , "selectors" : { "MicroBombHandler(ToHitData,WeaponAttackAction,IGame,Server)" : 1}},{ "className" : "megamek::common::weapons::ISBAMagshotGaussRifle" , "selectors" : { "ISBAMagshotGaussRifle()" : 1}},{ "className" : "megamek::common::weapons::CLAdvancedSRM4OS" , "selectors" : { "CLAdvancedSRM4OS()" : 1}},{ "className" : "megamek::client::ui::swing::BoardView1::MovingEntitySprite" , "selectors" : { "MovingEntitySprite(Entity,Coords,int)" : 1}},{ "className" : "megamek::common::weapons::ISLongTom" , "selectors" : { "ISLongTom()" : 1}},{ "className" : "megamek::common::weapons::ISHVAC10" , "selectors" : { "ISHVAC10()" : 1}},{ "className" : "megamek::common::weapons::infantry::InfantrySupportPortableFlamerWeapon" , "selectors" : { "InfantrySupportPortableFlamerWeapon()" : 1}},{ "className" : "megamek::common::weapons::SCL3Weapon" , "selectors" : { "SCL3Weapon()" : 1}},{ "className" : "megamek::common::weapons::CLERPPC" , "selectors" : { "CLERPPC()" : 1}},{ "className" : "megamek::server::ScenarioLoader::CritHit" , "selectors" : { "CritHit(int,int)" : 1}},{ "className" : "megamek::common::weapons::NarcHandler" , "selectors" : { "NarcHandler(ToHitData,WeaponAttackAction,IGame,Server)" : 1}},{ "className" : "megamek::common::weapons::RifleWeaponHandler" , "selectors" : { "RifleWeaponHandler(ToHitData,WeaponAttackAction,IGame,Server)" : 1}},{ "className" : "megamek::common::weapons::infantry::InfantryShotgunBuccaneerGelGunWeapon" , "selectors" : { "InfantryShotgunBuccaneerGelGunWeapon()" : 1}},{ "className" : "megamek::common::weapons::CLERSmallPulseLaser" , "selectors" : { "CLERSmallPulseLaser()" : 1}},{ "className" : "megamek::common::xml::BuildingEncoder" , "selectors" : { "decode(???)" : 1 , "encode(Building,Writer)" : 1}},{ "className" : "megamek::common::weapons::ISMRM40IOS" , "selectors" : { "ISMRM40IOS()" : 1}},{ "className" : "megamek::common::weapons::ISSilverBulletGauss" , "selectors" : { "ISSilverBulletGauss()" : 1}},{ "className" : "megamek::common::weapons::ISLongTomCannon" , "selectors" : { "ISLongTomCannon()" : 1}},{ "className" : "megamek::common::weapons::ISRL2" , "selectors" : { "ISRL2()" : 1}},{ "className" : "megamek::common::weapons::CLStreakSRM2" , "selectors" : { "CLStreakSRM2()" : 1}},{ "className" : "megamek::common::weapons::CLMicroPulseLaser" , "selectors" : { "CLMicroPulseLaser()" : 1}},{ "className" : "megamek::common::weapons::CLSRT4" , "selectors" : { "CLSRT4()" : 1}},{ "className" : "megamek::common::weapons::infantry::InfantrySupportMk2PortableAAWeapon" , "selectors" : { "InfantrySupportMk2PortableAAWeapon()" : 1}},{ "className" : "megamek::common::weapons::ISMRM30" , "selectors" : { "ISMRM30()" : 1}},{ "className" : "megamek::common::weapons::VehicleFlamerHandler" , "selectors" : { "VehicleFlamerHandler(ToHitData,WeaponAttackAction,IGame,Server)" : 1}},{ "className" : "megamek::common::weapons::ISRL3" , "selectors" : { "ISRL3()" : 1}},{ "className" : "megamek::common::weapons::ISERPPC" , "selectors" : { "ISERPPC()" : 1}},{ "className" : "megamek::common::weapons::infantry::InfantryRifleEbonyAssaultLaserWeapon" , "selectors" : { "InfantryRifleEbonyAssaultLaserWeapon()" : 1}},{ "className" : "megamek::client::bot::ui::swing::BotGUI" , "selectors" : { "BotGUI(BotClient)" : 3 , "notifyOfBot()" : 1}},{ "className" : "megamek::server::commands::SkipCommand" , "selectors" : { "SkipCommand(Server)" : 1}},{ "className" : "megamek::common::weapons::NAC20Weapon" , "selectors" : { "NAC20Weapon()" : 1}},{ "className" : "megamek::common::weapons::SwordfishHandler" , "selectors" : { "SwordfishHandler(ToHitData,WeaponAttackAction,IGame,Server)" : 1}},{ "className" : "megamek::common::weapons::CLSniperCannon" , "selectors" : { "CLSniperCannon()" : 1}},{ "className" : "megamek::common::weapons::CLUAC20Prototype" , "selectors" : { "CLUAC20Prototype()" : 1}},{ "className" : "megamek::client::ui::swing::DialogOptionListener" , "selectors" : { "optionClicked(DialogOptionComponent,IOption,boolean)" : 1}},{ "className" : "megamek::common::weapons::CLLRM20" , "selectors" : { "CLLRM20()" : 1}},{ "className" : "megamek::common::xml::BipedMechEncoder" , "selectors" : { "decode(???)" : 1 , "encode(Entity,Writer)" : 1}},{ "className" : "megamek::common::weapons::WhiteSharkTHandler" , "selectors" : { "WhiteSharkTHandler(ToHitData,WeaponAttackAction,IGame,Server)" : 1}},{ "className" : "edu::umd::cs::findbugs::plan::AnalysisPass" , "selectors" : { "AnalysisPass()" : 2 , "addToPass(DetectorFactory)" : 1 , "append(DetectorFactory)" : 1 , "contains(DetectorFactory)" : 1 , "getMembers()" : 1 , "getUnpositionedMembers()" : 1 , "instantiateDetector2sInPass(BugReporter)" : 1 , "iterator()" : 3}},{ "className" : "edu::umd::cs::findbugs::ba::ResourceTracker" , "selectors" : { "ignoreImplicitExceptions(Resource)" : 1 , "isParamInstance(Resource,int)" : 1}},{ "className" : "edu::umd::cs::findbugs::cloud::db::DBCloud::DatabaseSyncShutdownException" , "selectors" : { "DatabaseSyncShutdownException()" : 1}},{ "className" : "org::apache::log4j::TestLogMF" , "selectors" : { "getTraceLevel()" : 1}},{ "className" : "org::jhotdraw::draw::handle::ResizeHandleKit::SouthWestHandle" , "selectors" : { "SouthWestHandle(Figure)" : 1}},{ "className" : "proguard::util::StringMatcher" , "selectors" : { "matches(String)" : 54}},{ "className" : "org::apache::jmeter::gui::action::SSLManagerCommand" , "selectors" : { "sslManager()" : 1}},{ "className" : "org::jgroups::protocols::FD_ALL::HeartbeatSender" , "selectors" : { "HeartbeatSender()" : 1}},{ "className" : "net::suberic::util::gui::propedit::MultiEditorPane::DeleteAction" , "selectors" : { "DeleteAction()" : 2}},{ "className" : "org::apache::batik::dom::svg12::SVG12DOMImplementation::SubImageRefElementFactory" , "selectors" : { "SubImageRefElementFactory()" : 1}},{ "className" : "edu::rice::cs::util::docnavigation::LeafNode<T>" , "selectors" : { "LeafNode(ItemT)" : 2}},{ "className" : "com::jaspersoft::ireport::designer::JrxmlVisualView::JasperDesignerTypeLookupHint" , "selectors" : { "JasperDesignerTypeLookupHint()" : 1}},{ "className" : "marauroa::common::net::message::MessageS2CLogoutACK" , "selectors" : { "MessageS2CLogoutACK(SocketChannel)" : 1}},{ "className" : "marauroa::common::game::RPAction" , "selectors" : { "RPAction()" : 13}},{ "className" : "marauroa::functional::SimpleClient" , "selectors" : { "SimpleClient(String)" : 16 , "getCharacters()" : 10 , "getObjects()" : 1 , "getPerceptions()" : 3}},{ "className" : "marauroa::common::net::MessageFactory" , "selectors" : { "MessageFactory()" : 1 , "getFactory()" : 1 , "getMessage(byte[],SocketChannel,int)" : 3 , "register()" : 1 , "register(MessageType,Class<?>)" : 32}},{ "className" : "marauroa::common::net::message::MessageC2SAction" , "selectors" : { "MessageC2SAction(SocketChannel,RPAction)" : 8 , "getRPAction()" : 6}},{ "className" : "marauroa::common::game::IRPZone::ID" , "selectors" : { "ID(String)" : 11 , "equals(Object)" : 1 , "getID()" : 12 , "hashCode()" : 1}},{ "className" : "java::util::LinkedList<T>" , "selectors" : { "LinkedList()" : 1282 , "LinkedList(Collection<? extends E>)" : 93 , "addClassAndMethod(???)" : 1}},{ "className" : "marauroa::server::game::dbcommand::LoadAllActiveCharactersCommand" , "selectors" : { "LoadAllActiveCharactersCommand(String,DelayedEventHandler,int,SocketChannel,int)" : 2 , "getCharacters()" : 1}},{ "className" : "marauroa::common::Log4J" , "selectors" : { "getLogger(Class<?>)" : 78 , "init()" : 2 , "init(String)" : 11}},{ "className" : "marauroa::server::db::DatabaseConnectionException" , "selectors" : { "DatabaseConnectionException(String,Throwable)" : 2 , "DatabaseConnectionException(Throwable)" : 1}},{ "className" : "marauroa::server::game::messagehandler::MessageDispatcher" , "selectors" : { "MessageDispatcher()" : 1 , "dispatchMessage(Message)" : 1 , "init(INetworkServerManager,RPServerManager,PlayerEntryContainer,Statistics,RSAKey)" : 1 , "initMap()" : 1}},{ "className" : "marauroa::functional::basic::TestHelper" , "selectors" : { "assertEquals(Object,Object)" : 4 , "assertNotNull(Object)" : 4 , "fail()" : 9}},{ "className" : "marauroa::server::db::JDBCSQLHelper" , "selectors" : { "JDBCSQLHelper(DBTransaction)" : 3 , "runDBScript(String)" : 5}},{ "className" : "marauroa::common::game::CharacterResult" , "selectors" : { "CharacterResult(Result,String,RPObject)" : 13 , "getCharacter()" : 5 , "getResult()" : 4 , "getTemplate()" : 4}},{ "className" : "marauroa::common::net::message::MessageS2CLoginNACK" , "selectors" : { "MessageS2CLoginNACK(SocketChannel,Reasons)" : 4 , "getResolution()" : 3 , "getResolutionCode()" : 1}},{ "className" : "marauroa::common::net::message::Message" , "selectors" : { "Message(MessageType,SocketChannel)" : 60 , "getAddress()" : 42 , "getClientID()" : 17 , "getMessageTimestamp()" : 4 , "getProtocolVersion()" : 19 , "getSocketChannel()" : 17 , "getType()" : 19 , "internalToString(StringBuilder)" : 1 , "readObject(InputSerializer)" : 32 , "setClientID(int)" : 17 , "setProtocolVersion(int)" : 24 , "setSocketChannel(SocketChannel)" : 3 , "writeObject(OutputSerializer)" : 31}},{ "className" : "marauroa::common::net::message::MessageS2CCreateAccountACK" , "selectors" : { "MessageS2CCreateAccountACK(SocketChannel,String)" : 1 , "getUsername()" : 1}},{ "className" : "java::util::Map::Entry" , "selectors" : { "equals(Object)" : 18 , "getKey()" : 2530 , "getValue()" : 2560 , "hashCode()" : 8 , "setValue(V)" : 106}},{ "className" : "java::util::Iterator" , "selectors" : { "hasNext()" : 18417 , "next()" : 20630 , "remove()" : 1242}},{ "className" : "marauroa::server::game::messagehandler::DelayedEventHandlerThread" , "selectors" : { "DelayedEventHandlerThread(RPServerManager)" : 1 , "addDelayedEvent(DelayedEventHandler,Object)" : 6 , "get()" : 5 , "setKeepRunning(boolean)" : 1}},{ "className" : "marauroa::common::game::SlotAlreadyAddedException" , "selectors" : { "SlotAlreadyAddedException(String)" : 5}},{ "className" : "marauroa::common::net::message::MessageC2SCreateAccount" , "selectors" : { "MessageC2SCreateAccount(SocketChannel,String,String,String)" : 1 , "getEmail()" : 1 , "getPassword()" : 1 , "getUsername()" : 2}},{ "className" : "marauroa::common::net::message::MessageC2STransferACK" , "selectors" : { "MessageC2STransferACK(SocketChannel,List<TransferContent>)" : 1 , "getContents()" : 1}},{ "className" : "marauroa::common::io::FileSystemPersistence" , "selectors" : { "FileSystemPersistence()" : 1 , "concatFilename(boolean,String,String)" : 2}},{ "className" : "marauroa::common::net::Encoder" , "selectors" : { "Encoder()" : 1 , "encode(Message)" : 10 , "get()" : 6}},{ "className" : "marauroa::server::game::db::GameEventDAO" , "selectors" : { "GameEventDAO()" : 1 , "addGameEvent(DBTransaction,String,String,String[])" : 2}},{ "className" : "marauroa::server::db::DBTransaction" , "selectors" : { "DBTransaction(DatabaseAdapter)" : 2 , "close()" : 2 , "commit()" : 1 , "doesColumnExist(String,String)" : 10 , "ensureCorrectThread()" : 11 , "execute(String,Map<String,Object>)" : 30 , "execute(String,Map<String,Object>,InputStream[])" : 2 , "getLastInsertId(String,String)" : 1 , "query(String,Map<String,Object>)" : 17 , "querySingleCellInt(String,Map<String,Object>)" : 11 , "rollback()" : 2 , "setThread(Thread)" : 2 , "subst(String,Map<String,?>)" : 17}},{ "className" : "marauroa::server::net::nio::NIONetworkServerManager" , "selectors" : { "NIONetworkServerManager()" : 2 , "finish()" : 1 , "getMessage()" : 2 , "sendMessage(Message)" : 3}},{ "className" : "marauroa::server::game::container::PlayerEntry::SecuredLoginInfo" , "selectors" : { "PlayerEntry" : 2 , "addLoginEvent(InetAddress,boolean)" : 2 , "countConnectionsFromSameIPAddress(PlayerEntryContainer)" : 1 , "getStatus()" : 1 , "isBlocked()" : 1 , "verify()" : 3}},{ "className" : "marauroa::client::net::TCPNetworkClientManager::NetworkClientManagerRead" , "selectors" : { "NetworkClientManagerRead()" : 1 , "readByteStream()" : 1 , "storeMessage(InetSocketAddress,byte[])" : 1}},{ "className" : "marauroa::server::game::messagehandler::ActionHandler" , "selectors" : { "ActionHandler()" : 1}},{ "className" : "marauroa::server::game::python::GameScript" , "selectors" : { "GameScript()" : 1 , "GameScript()::PythonInterpreter" : 1 , "getGameRules()" : 1 , "getGameScript()" : 2 , "getWorld()" : 1 , "setRPWorld(RPWorld)" : 1}},{ "className" : "marauroa::common::Pair" , "selectors" : { "Pair(T1,T2)" : 3 , "first()" : 2 , "second()" : 2}},{ "className" : "marauroa::functional::MarauroadLauncher" , "selectors" : { "MarauroadLauncher(int)" : 3}},{ "className" : "marauroa::server::game::container::CharacternameValidationTest" , "selectors" : { "checkImpersonation(String)" : 7}},{ "className" : "marauroa::common::game::LinkedRPObjectList" , "selectors" : { "LinkedRPObjectList()" : 6 , "add(RPObject)" : 9 , "checkObjectNotAllreadyInList(RPObject)" : 1 , "getByIDIgnoringZone(ID)" : 2 , "hasByIDIgnoringZone(ID)" : 1 , "removeByIDIgnoringZone(ID)" : 2}},{ "className" : "marauroa::client::LoginFailedException" , "selectors" : { "LoginFailedException(String)" : 8 , "LoginFailedException(String,Reasons)" : 1}},{ "className" : "marauroa::server::net::NetworkManagerTest" , "selectors" : { "sendMessageC2S()" : 3}},{ "className" : "marauroa::server::RWLock" , "selectors" : { "RWLock()" : 1 , "releaseLock()" : 5 , "requestWriteLock()" : 5}},{ "className" : "marauroa::functional::basic::BareRPWorld" , "selectors" : { "BareRPWorld()" : 1 , "get()" : 2 , "populate()" : 1}},{ "className" : "marauroa::functional::basic::BareRPRuleProcessor" , "selectors" : { "BareRPRuleProcessor()" : 1 , "get()" : 1 , "getValidator()" : 1 , "onExit(RPObject)" : 1}},{ "className" : "marauroa::server::db::AdapterFactory" , "selectors" : { "AdapterFactory(Properties)" : 1 , "create()" : 1}},{ "className" : "marauroa::server::game::rp::RPObjectFactory" , "selectors" : { "RPObjectFactory()" : 1 , "get()" : 1 , "get(String)" : 1 , "transform(RPObject)" : 3}},{ "className" : "marauroa::common::game::RPClassTestHelper" , "selectors" : { "generateRPClasses()" : 4}},{ "className" : "marauroa::server::net::flood::FloodValidator" , "selectors" : { "FloodValidator(IFloodCheck)" : 1 , "add(SocketChannel)" : 1 , "isFlooding(SocketChannel,int)" : 1 , "onFlood(SocketChannel)" : 1}},{ "className" : "marauroa::server::net::nio::IWorker" , "selectors" : { "onConnect(SocketChannel)" : 1 , "onData(NioServer,SocketChannel,byte[],int)" : 1 , "setServer(NioServer)" : 1}},{ "className" : "marauroa::common::net::message::MessageC2SLogout" , "selectors" : { "MessageC2SLogout(SocketChannel)" : 1}},{ "className" : "marauroa::common::net::message::TransferContent" , "selectors" : { "TransferContent()" : 10 , "TransferContent(String,int,byte[])" : 3 , "readACK(InputSerializer)" : 2 , "readFULL(InputSerializer)" : 2 , "readREQ(InputSerializer)" : 2 , "writeACK(OutputSerializer)" : 2 , "writeFULL(OutputSerializer)" : 2 , "writeREQ(OutputSerializer)" : 2}},{ "className" : "marauroa::server::db::command::DBCommandQueueBackgroundThread" , "selectors" : { "DBCommandQueueBackgroundThread()" : 1 , "processCommand(DBCommandMetaData)" : 1}},{ "className" : "marauroa::common::io::UnicodeSupportingInputStream" , "selectors" : { "init()" : 1}},{ "className" : "marauroa::functional::basic::FailedException" , "selectors" : { "FailedException(String)" : 3}},{ "className" : "marauroa::common::net::message::MessageTest::MockMessage" , "selectors" : { "MockMessage(MessageType,SocketChannel)" : 6}},{ "className" : "marauroa::server::game::container::PlayerEntry" , "selectors" : { "PlayerEntry(SocketChannel)" : 1 , "clearContent()" : 1 , "getAddress()" : 4 , "getContent(String)" : 1 , "getPerceptionTimestamp()" : 1 , "getProtocolVersion()" : 4 , "getThisPerceptionTimestamp()" : 1 , "isRemovable()" : 1 , "isTimeout()" : 1 , "requestSync()" : 2 , "setObject(RPObject)" : 1 , "setProtocolVersion(int)" : 1 , "storeRPObject(RPObject)" : 3 , "update()" : 2}},{ "className" : "marauroa::server::game::messagehandler::ChooseCharacterHandler" , "selectors" : { "ChooseCharacterHandler()" : 1 , "completeLoadingCharacterIntoWorld(RPServerManager,int,SocketChannel,PlayerEntry,RPObject)" : 2 , "loadAndPlaceInWorld(MessageC2SChooseCharacter,int,PlayerEntry)" : 1 , "rejectClient(SocketChannel,int,PlayerEntry)" : 2 , "reownOldEntry(PlayerEntry,PlayerEntry)" : 1}},{ "className" : "marauroa::server::game::db::CharacterDAO" , "selectors" : { "CharacterDAO()" : 1 , "addCharacter(DBTransaction,String,String,RPObject)" : 10 , "getAccountName(DBTransaction,String)" : 1 , "getCharacters(DBTransaction,String)" : 3 , "getCharacters(String)" : 1 , "hasActiveCharacter(DBTransaction,String,String)" : 1 , "hasActiveCharacter(String,String)" : 1 , "hasCharacter(DBTransaction,String)" : 3 , "hasCharacter(DBTransaction,String,String)" : 8 , "hasCharacter(String,String)" : 1 , "isCharacterCreationLimitReached(DBTransaction,String,String)" : 1 , "isCharacterCreationLimitReached(String,String)" : 1 , "loadAllActiveCharacters(DBTransaction,String)" : 2 , "loadAllCharacters(DBTransaction,String)" : 2 , "loadAllCharacters(DBTransaction,String,String)" : 2 , "loadCharacter(DBTransaction,String,String)" : 3 , "removeCharacter(DBTransaction,String,String)" : 3 , "storeCharacter(DBTransaction,String,String,RPObject)" : 2}},{ "className" : "marauroa::common::crypto::Hash" , "selectors" : { "bigIntToBytes(BigInteger)" : 1 , "bytesToBigInt(byte[])" : 1 , "compare(byte[],byte[])" : 1 , "hash(String)" : 20 , "hash(byte[])" : 5 , "hashLength()" : 4 , "random(int)" : 4 , "toHexString(byte[])" : 11 , "xor(byte[],byte[])" : 9}},{ "className" : "marauroa::server::db::StringChecker" , "selectors" : { "escapeSQLString(String)" : 2 , "trimAndEscapeSQLString(String,int)" : 10 , "validString(String)" : 10}},{ "className" : "marauroa::common::game::AccountResult" , "selectors" : { "AccountResult(Result,String)" : 12 , "failed()" : 5 , "getResult()" : 2 , "getUsername()" : 5}},{ "className" : "marauroa::common::Logger" , "selectors" : { "debug(Object)" : 114 , "debug(Object,Throwable)" : 7 , "error(Object)" : 21 , "error(Object,Throwable)" : 120 , "info(Object)" : 23 , "info(Object,Throwable)" : 2 , "isDebugEnabled()" : 6 , "marauroa" : 2 , "warn(Object)" : 38 , "warn(Object,Throwable)" : 24}},{ "className" : "marauroa::common::net::message::MessageSendByteArray" , "selectors" : { "MessageSendByteArray(MessageType)" : 4 , "MessageSendByteArray(MessageType,SocketChannel,byte[])" : 4 , "getHash()" : 4 , "readObject(InputSerializer)" : 4 , "writeObject(OutputSerializer)" : 2}},{ "className" : "marauroa::common::net::message::MessageS2CPerception::CachedCompressedPerception::CacheKey" , "selectors" : { "CacheKey(byte,ID,int)" : 1}},{ "className" : "marauroa::server::game::db::LoginEventDAO" , "selectors" : { "LoginEventDAO()" : 1 , "addLoginEvent(DBTransaction,String,InetAddress,String,String,boolean)" : 6 , "addLoginEvent(String,InetAddress,String,String,boolean)" : 1 , "getLoginEvents(DBTransaction,String,int)" : 1 , "getLoginEvents(String,int)" : 2 , "isAccountBlocked(DBTransaction,String)" : 4 , "isAddressBlocked(DBTransaction,String)" : 2}},{ "className" : "marauroa::common::Configuration" , "selectors" : { "Configuration(ConfigurationParams)" : 1 , "get(String)" : 23 , "get(String,String)" : 3 , "getAsProperties()" : 2 , "getConfiguration()" : 24 , "getInt(String,int)" : 6 , "has(String)" : 1 , "propertyNames()" : 1 , "set(String,String)" : 2 , "setConfigurationFile(String)" : 4}},{ "className" : "java::util::Map" , "selectors" : { "clear()" : 1029 , "containsKey(Object)" : 2522 , "containsValue(Object)" : 221 , "entrySet()" : 1764 , "equals(Object)" : 166 , "get(Object)" : 17373 , "hashCode()" : 76 , "isEmpty()" : 757 , "keySet()" : 2178 , "put(K,V)" : 21994 , "putAll(Map<? extends K,? extends V>)" : 514 , "remove(Object)" : 1927 , "size()" : 2718 , "values()" : 1739}},{ "className" : "marauroa::server::net::nio::ChangeRequest" , "selectors" : { "ChangeRequest(SocketChannel,int,int)" : 2}},{ "className" : "marauroa::common::game::RPLink" , "selectors" : { "RPLink(String,RPObject)" : 2 , "clone()" : 1 , "getName()" : 16 , "getObject()" : 10 , "setOwner(RPObject)" : 4 , "toString()" : 1 , "writeObject(OutputSerializer,DetailLevel)" : 2}},{ "className" : "marauroa::common::game::RPEvent" , "selectors" : { "RPEvent()" : 3 , "RPEvent(String)" : 15 , "clone()" : 2 , "fill(RPEvent)" : 1 , "getName()" : 6 , "setOwner(RPObject)" : 6 , "toString()" : 1 , "writeObject(OutputSerializer,DetailLevel)" : 2}},{ "className" : "java::util::concurrent::LinkedBlockingQueue<T>" , "selectors" : { "LinkedBlockingQueue()" : 44 , "LinkedBlockingQueue(int)" : 5}},{ "className" : "marauroa::server::db::TransactionPool" , "selectors" : { "TransactionPool(Properties)" : 5 , "addThreadTransaction(DBTransaction)" : 1 , "beginWork()" : 70 , "close()" : 4 , "commit(DBTransaction)" : 56 , "createMinimumDBTransactions()" : 2 , "dumpOpenTransactions()" : 1 , "freeDBTransaction(DBTransaction)" : 2 , "get()" : 111 , "kickHangingTransactionsOfThisThread()" : 1 , "killTransaction(DBTransaction)" : 3 , "registerGlobal(TransactionPool)" : 1 , "registerGlobally()" : 1 , "rollback(DBTransaction)" : 32}},{ "className" : "marauroa::server::game::db::LoginSeedDAO" , "selectors" : { "LoginSeedDAO()" : 1 , "useSeed(DBTransaction,String)" : 1 , "useSeed(String)" : 1 , "verifySeed(DBTransaction,String,String)" : 2}},{ "className" : "marauroa::common::net::message::MessageC2SChooseCharacter" , "selectors" : { "MessageC2SChooseCharacter(SocketChannel,String)" : 1 , "getCharacter()" : 1}},{ "className" : "marauroa::server::net::flood::FloodMeasure" , "selectors" : { "FloodMeasure(SocketChannel)" : 1 , "addMessage(int)" : 1 , "getBytesPerSecond()" : 3 , "getMessagesPerSecond()" : 2 , "getWarnings()" : 1 , "resetPerSecondData()" : 2 , "resetWarnings()" : 1 , "sinceLastReset()" : 2 , "warning()" : 2}},{ "className" : "marauroa::common::game::DefaultRPClass" , "selectors" : { "DefaultRPClass()" : 1}},{ "className" : "marauroa::common::game::RPSlot" , "selectors" : { "RPSlot()" : 6 , "RPSlot(String)" : 8 , "add(RPObject)" : 25 , "add(RPObject,boolean)" : 7 , "clearVisible(boolean)" : 1 , "clone()" : 1 , "get(ID)" : 2 , "getCapacity()" : 3 , "getFirst()" : 37 , "getName()" : 31 , "getOwner()" : 4 , "has(ID)" : 1 , "hasAsAncestor(RPObject)" : 2 , "hasAsAncestor(SlotOwner)" : 1 , "hashCode()" : 2 , "isFull()" : 1 , "prepareRemove(RPObject)" : 2 , "remove(ID)" : 10 , "resetAddedAndDeletedRPObjects()" : 1 , "setAddedRPObject(RPSlot)" : 1 , "setDeletedRPObject(RPSlot)" : 1 , "setOwner(SlotOwner)" : 7 , "size()" : 9 , "toString()" : 2 , "writeObject(OutputSerializer,DetailLevel)" : 2}},{ "className" : "marauroa::functional::basic::SystemTest" , "selectors" : { "t0_createAccount()" : 1 , "t1_1_login()" : 1 , "t1_1_loginTimeout()" : 1 , "t1_login()" : 1 , "t3_loginDouble()" : 1 , "t4_1_createCharacterFailure()" : 1 , "t4_createCharacter()" : 1 , "t5_1_chooseWrongCharacter()" : 1 , "t5_chooseCharacter()" : 1 , "t6_receivePerceptions()" : 1 , "t7_1_testKeepAliveWorks()" : 1 , "t7_testKeepAlive()" : 1 , "t8_testBannedIP()" : 1}},{ "className" : "marauroa::common::net::message::MessageS2CLoginACK" , "selectors" : { "MessageS2CLoginACK(SocketChannel,List<String>)" : 1 , "getPreviousLogins()" : 1}},{ "className" : "marauroa::common::net::message::MessageS2CLogoutNACK" , "selectors" : { "MessageS2CLogoutNACK(SocketChannel)" : 1}},{ "className" : "marauroa::server::game::rp::NoFactoryConfException" , "selectors" : { "NoFactoryConfException(Throwable)" : 2}},{ "className" : "marauroa::ping::server::PingRPRuleProcessor" , "selectors" : { "PingRPRuleProcessor()" : 1 , "onExit(RPObject)" : 1}},{ "className" : "marauroa::server::game::dbcommand::DBCommandWithCallback" , "selectors" : { "DBCommandWithCallback()" : 3 , "DBCommandWithCallback(DelayedEventHandler,int,SocketChannel,int)" : 4 , "getChannel()" : 11 , "getClientid()" : 4 , "getProtocolVersion()" : 5}},{ "className" : "marauroa::server::game::db::LoginEventDAO::LoginEvent" , "selectors" : { "LoginEvent(String,String,boolean)" : 2 , "LoginEvent(long,long,String,String,String,boolean)" : 1 , "toString()" : 1}},{ "className" : "marauroa::server::net::validator::InetAddressMask" , "selectors" : { "InetAddressMask(String,String)" : 3 , "InetAddressMask(byte[],byte[])" : 1 , "matches(InetAddress)" : 2 , "string2bytes(String)" : 2}},{ "className" : "java::io::ByteArrayOutputStream" , "selectors" : { "ByteArrayOutputStream()" : 1748 , "ByteArrayOutputStream(int)" : 216 , "close()" : 250 , "java" : 5 , "reset()" : 145 , "size()" : 131 , "toByteArray()" : 1718 , "toString()" : 356 , "toString(String)" : 40 , "write(byte[],int,int)" : 240 , "write(int)" : 199 , "writeTo(OutputStream)" : 29}},{ "className" : "marauroa::common::game::RPObjectNotFoundException" , "selectors" : { "RPObjectNotFoundException(ID)" : 4}},{ "className" : "marauroa::common::game::RPClass" , "selectors" : { "RPClass()" : 3 , "RPClass(String)" : 28 , "add(DefinitionClass,String,String,byte)" : 5 , "add(DefinitionClass,String,Type,byte)" : 43 , "add(DefinitionClass,String,byte)" : 3 , "add(DefinitionClass,String,int,byte)" : 3 , "addAttribute(String,Type)" : 9 , "addRPSlot(String,int)" : 3 , "bake()" : 1 , "equals(Object)" : 1 , "getBaseRPObjectDefault()" : 12 , "getCode(DefinitionClass,String)" : 2 , "getDefinition(DefinitionClass,String)" : 33 , "getName()" : 10 , "getName(DefinitionClass,short)" : 7 , "getRPClass(String)" : 7 , "getValidCode(DefinitionClass,String)" : 4 , "hasAnyDefinition(DefinitionClass)" : 3 , "hasRPClass(String)" : 7 , "hashCode()" : 1 , "isA(RPClass)" : 2 , "isA(String)" : 2 , "iterator()" : 2 , "size()" : 1 , "subclassOf(String)" : 4}},{ "className" : "marauroa::server::game::container::SecureLoginTest" , "selectors" : { "loadRSAKey()" : 2 , "simulateSecureLogin(String,String)" : 4}},{ "className" : "marauroa::functional::SimpleClient::MockPerceptionListener" , "selectors" : { "MockPerceptionListener()" : 1 , "getContainer()" : 2}},{ "className" : "marauroa::server::game::messagehandler::LoginRequestKeyHandler" , "selectors" : { "LoginRequestKeyHandler()" : 1}},{ "className" : "marauroa::common::game::RPObject" , "selectors" : { "RPObject()" : 167 , "RPObject(ID)" : 3 , "RPObject(RPObject)" : 2 , "addEvent(RPEvent)" : 11 , "addLink(String,RPObject)" : 5 , "addMap(String)" : 3 , "addSlot(RPSlot)" : 3 , "addSlot(String)" : 28 , "applyDifferences(RPObject,RPObject)" : 33 , "clear()" : 2 , "clearEvents()" : 1 , "clearVisible(boolean)" : 9 , "clone()" : 16 , "equals(Object)" : 3 , "events()" : 4 , "eventsIterator()" : 1 , "fill(RPObject)" : 2 , "get(String,String)" : 2 , "getBaseContainer()" : 10 , "getContainer()" : 1 , "getContainerBaseOwner()" : 1 , "getContainerSlot()" : 1 , "getDifferences(RPObject,RPObject)" : 32 , "getFromSlots(int)" : 3 , "getID()" : 39 , "getLink(String)" : 4 , "getLinkedObject(String)" : 4 , "getMap(String)" : 2 , "getSlot(String)" : 65 , "hasLink(String)" : 5 , "hasMap(String)" : 1 , "hasSlot(String)" : 23 , "hide()" : 3 , "isContained()" : 4 , "isEmpty()" : 19 , "isHidden()" : 5 , "isStorable()" : 2 , "put(String,String,String)" : 7 , "remove(String,String)" : 1 , "removeLink(String)" : 1 , "removeMap(String)" : 1 , "removeSlot(String)" : 3 , "resetAddedAndDeleted()" : 16 , "resetAddedAndDeletedMaps()" : 1 , "resetAddedAndDeletedRPLink()" : 1 , "resetAddedAndDeletedRPSlot()" : 1 , "setAddedMaps(RPObject)" : 1 , "setAddedRPSlot(RPObject)" : 1 , "setContainer(SlotOwner,RPSlot)" : 9 , "setDeletedMaps(RPObject)" : 1 , "setDeletedRPSlot(RPObject)" : 1 , "setID(ID)" : 5 , "size()" : 8 , "store()" : 1 , "unhide()" : 1 , "writeObject(OutputSerializer,DetailLevel)" : 7}},{ "className" : "marauroa::common::net::message::MessageS2CLoginMessageNACK" , "selectors" : { "MessageS2CLoginMessageNACK(SocketChannel,String)" : 2 , "getReason()" : 2}},{ "className" : "marauroa::common::net::OutputSerializer" , "selectors" : { "OutputSerializer(OutputStream)" : 20 , "getProtocolVersion()" : 6 , "setProtocolVersion(int)" : 5 , "write(Serializable)" : 20 , "write(Serializable[])" : 1 , "write(String)" : 24 , "write(String[])" : 2 , "write(byte)" : 27 , "write(byte[])" : 12 , "write(float)" : 1 , "write(int)" : 27 , "write(short)" : 8 , "write255LongArray(byte[])" : 1 , "write255LongString(String)" : 7 , "write65536LongArray(byte[])" : 1 , "write65536LongString(String)" : 1}},{ "className" : "marauroa::server::db::adapter::H2DatabaseAdapter" , "selectors" : { "H2DatabaseAdapter()" : 1 , "rewriteSql(String)" : 3}},{ "className" : "marauroa::common::game::Validator" , "selectors" : { "Validator()" : 1 , "validate255LongString(String)" : 1 , "validate65536LongString(String)" : 1 , "validateByte(String)" : 1 , "validateFloat(String)" : 1 , "validateInteger(String)" : 1 , "validateMap(String)" : 1 , "validateShort(String)" : 1 , "validateVeryLongString(String)" : 1}},{ "className" : "marauroa::server::marauroad" , "selectors" : { "createBeanForStatistics()" : 1 , "finish()" : 5 , "getMarauroa()" : 1 , "init()" : 1 , "marauroad()" : 2 , "setArguments(String[])" : 1}},{ "className" : "marauroa::common::net::message::MessageS2CLoginSendNonce" , "selectors" : { "MessageS2CLoginSendNonce(SocketChannel,byte[])" : 1}},{ "className" : "marauroa::server::db::adapter::MySQLDatabaseAdapter" , "selectors" : { "MySQLDatabaseAdapter()" : 1 , "MySQLDatabaseAdapter(Properties)" : 1 , "rewriteSql(String)" : 3}},{ "className" : "marauroa::common::net::message::MessageS2CInvalidMessage" , "selectors" : { "MessageS2CInvalidMessage(SocketChannel,String)" : 1 , "getReason()" : 1}},{ "className" : "marauroa::server::game::messagehandler::KeepAliveHandler" , "selectors" : { "KeepAliveHandler()" : 1}},{ "className" : "marauroa::server::MarauroaUncaughtExceptionHandler" , "selectors" : { "MarauroaUncaughtExceptionHandler()" : 1 , "setup()" : 1}},{ "className" : "marauroa::common::game::RPObjectInvalidException" , "selectors" : { "RPObjectInvalidException(String)" : 3}},{ "className" : "marauroa::server::game::python::PythonRPWorld" , "selectors" : { "PythonRPWorld()" : 1}},{ "className" : "marauroa::common::net::message::MessageC2SCreateCharacter" , "selectors" : { "MessageC2SCreateCharacter(SocketChannel,String,RPObject)" : 1 , "getCharacter()" : 2 , "getTemplate()" : 1}},{ "className" : "marauroa::tools::protocolanalyser::FakeSocketChannel" , "selectors" : { "FakeSocketChannel(InetAddress,int)" : 1}},{ "className" : "marauroa::common::net::message::MessageS2CCreateCharacterNACK" , "selectors" : { "MessageS2CCreateCharacterNACK(SocketChannel,Result)" : 1 , "getResolution()" : 1 , "getResolutionCode()" : 1}},{ "className" : "marauroa::common::game::Perception" , "selectors" : { "Perception(byte,ID)" : 2 , "added(RPObject)" : 2 , "addedHas(RPObject)" : 3 , "clear()" : 1 , "modified(RPObject)" : 1 , "removed(RPObject)" : 2 , "removedHas(RPObject)" : 2}},{ "className" : "marauroa::server::game::db::RPZoneDAO" , "selectors" : { "RPZoneDAO(RPObjectFactory)" : 1 , "hasRPZone(DBTransaction,ID)" : 2 , "loadRPZone(DBTransaction,IRPZone)" : 4 , "loadRPZone(IRPZone)" : 1 , "storeRPZone(DBTransaction,IRPZone)" : 4 , "storeRPZone(IRPZone)" : 1}},{ "className" : "marauroa::common::net::InvalidVersionException" , "selectors" : { "InvalidVersionException(int)" : 1 , "getProtocolVersion()" : 1}},{ "className" : "marauroa::common::game::SlotIsFullException" , "selectors" : { "SlotIsFullException(String)" : 1}},{ "className" : "java::nio::channels::ServerSocketChannel" , "selectors" : { "accept()" : 13 , "open()" : 17 , "socket()" : 43}},{ "className" : "marauroa::server::db::adapter::AbstractDatabaseAdapter" , "selectors" : { "AbstractDatabaseAdapter()" : 2 , "AbstractDatabaseAdapter(Properties)" : 2 , "addToGarbageLists(Statement,ResultSet)" : 1 , "closeStatements()" : 3 , "createConnection(Properties)" : 3 , "querySingleCellInt(String)" : 1 , "rewriteSql(String)" : 1}},{ "className" : "marauroa::client::TimeoutException" , "selectors" : { "TimeoutException()" : 1}},{ "className" : "marauroa::server::game::messagehandler::LogoutHandler" , "selectors" : { "LogoutHandler()" : 1}},{ "className" : "marauroa::common::io::UnicodeSupportingInputStreamReader" , "selectors" : { "UnicodeSupportingInputStreamReader(InputStream)" : 1 , "init()" : 2}},{ "className" : "marauroa::server::game::rp::RPScheduler" , "selectors" : { "RPScheduler()" : 1 , "addRPAction(RPObject,RPAction,IRPRuleProcessor)" : 1 , "clearRPActions(RPObject)" : 2 , "nextTurn()" : 1 , "visit(IRPRuleProcessor)" : 1}},{ "className" : "marauroa::common::net::message::MessageS2CCharacterList" , "selectors" : { "MessageS2CCharacterList(SocketChannel,Map<String,RPObject>)" : 1 , "getCharacterDetails()" : 2 , "getCharacters()" : 4}},{ "className" : "marauroa::server::game::dbcommand::LoginCommand" , "selectors" : { "LoginCommand(SecuredLoginInfo,DelayedEventHandler,int,SocketChannel,int)" : 1 , "callback()" : 4 , "getFailMessage()" : 3 , "getFailReason()" : 2 , "getInfo()" : 1 , "getPreviousLogins()" : 1}},{ "className" : "marauroa::common::net::Decoder" , "selectors" : { "Decoder()" : 1 , "clear(SocketChannel)" : 1 , "decode(SocketChannel,byte[])" : 9 , "get()" : 7 , "getSizeOfMessage(byte[])" : 2}},{ "className" : "marauroa::common::game::Definition::DefinitionClass" , "selectors" : { "values()" : 1}},{ "className" : "marauroa::server::game::python::PythonRP" , "selectors" : { "beginTurn()" : 1 , "checkGameVersion(String,String)" : 1 , "createAccount(String,String,String)" : 1 , "createCharacter(String,String,RPObject)" : 1 , "endTurn()" : 1 , "execute(RPObject,RPAction)" : 1 , "onActionAdd(RPObject,RPAction,List<RPAction>)" : 1 , "onExit(RPObject)" : 1 , "onInit(RPObject)" : 1 , "onTimeout(RPObject)" : 1 , "setRPManager(RPServerManager)" : 1}},{ "className" : "marauroa::common::net::message::MessageC2SLoginSendNonceNamePasswordAndSeed" , "selectors" : { "MessageC2SLoginSendNonceNamePasswordAndSeed(SocketChannel,byte[],String,byte[],byte[])" : 1 , "getPassword()" : 1 , "getSeed()" : 1 , "getUsername()" : 1}},{ "className" : "marauroa::common::net::message::MessageS2CPerception" , "selectors" : { "MessageS2CPerception(SocketChannel,Perception)" : 3 , "clearPrecomputedPerception()" : 1 , "computeStaticPartPerception(OutputSerializer)" : 1 , "getAddedRPObjects()" : 3 , "getDeletedRPObjects()" : 3 , "getDynamicPartPerception(int)" : 1 , "getModifiedAddedRPObjects()" : 3 , "getModifiedDeletedRPObjects()" : 4 , "getMyRPObjectAdded()" : 1 , "getMyRPObjectDeleted()" : 1 , "getPerceptionTimestamp()" : 7 , "getPerceptionType()" : 5 , "getPrecomputedStaticPartPerception()" : 1 , "setMyRPObject(RPObject,RPObject)" : 2 , "setPerceptionTimestamp(int)" : 1 , "setZoneid(RPObject,String)" : 6}},{ "className" : "java::lang::ThreadLocal<T>" , "selectors" : { "ThreadLocal()" : 108}},{ "className" : "marauroa::client::BannedAddressException" , "selectors" : { "BannedAddressException()" : 1}},{ "className" : "marauroa::common::net::message::MessageC2SKeepAlive" , "selectors" : { "MessageC2SKeepAlive()" : 2}},{ "className" : "marauroa::client::net::IPerceptionListener" , "selectors" : { "onAdded(RPObject)" : 1 , "onClear()" : 1 , "onDeleted(RPObject)" : 1 , "onException(Exception,MessageS2CPerception)" : 3 , "onModifiedAdded(RPObject,RPObject)" : 1 , "onModifiedDeleted(RPObject,RPObject)" : 1 , "onMyRPObject(RPObject,RPObject)" : 1 , "onPerceptionBegin(byte,int)" : 1 , "onPerceptionEnd(byte,int)" : 1 , "onSynced()" : 2 , "onUnsynced()" : 1}},{ "className" : "marauroa::common::net::message::MessageC2SOutOfSync" , "selectors" : { "MessageC2SOutOfSync()" : 1}},{ "className" : "marauroa::server::game::dbcommand::LoadActiveCharacterCommand" , "selectors" : { "LoadActiveCharacterCommand(String,String,DelayedEventHandler,int,SocketChannel,int)" : 1}},{ "className" : "java::lang::ThreadLocal" , "selectors" : { "ThreadLocal()" : 49 , "get()" : 699 , "remove()" : 59 , "set(T)" : 404}},{ "className" : "marauroa::server::game::Statistics" , "selectors" : { "Statistics()" : 1 , "add(String,int)" : 23 , "addStatisticsEventRow()" : 1 , "getStatistics()" : 6 , "init()" : 2 , "print()" : 1 , "set(String,int)" : 4}},{ "className" : "marauroa::common::game::Attributes" , "selectors" : { "Attributes(RPClass)" : 18 , "add(String,int)" : 1 , "clearVisible(boolean)" : 1 , "clone()" : 2 , "equals(Object)" : 2 , "fill(Attributes)" : 1 , "get(String)" : 115 , "getBool(String)" : 1 , "getDouble(String)" : 3 , "getInt(String)" : 16 , "getRPClass()" : 27 , "has(String)" : 55 , "hashCode()" : 1 , "isEmpty()" : 1 , "listToString(List<String>)" : 1 , "put(String,String)" : 109 , "put(String,double)" : 10 , "put(String,int)" : 64 , "readObject(InputSerializer)" : 2 , "remove(String)" : 12 , "resetAddedAndDeletedAttributes()" : 1 , "setAddedAttributes(Attributes)" : 1 , "setDeletedAttributes(Attributes)" : 1 , "setRPClass(RPClass)" : 11 , "setRPClass(String)" : 2 , "shouldSerialize(Definition,DetailLevel)" : 8 , "shouldSerialize(DefinitionClass,String,DetailLevel)" : 4 , "size()" : 1 , "stringToList(String)" : 1 , "toAttributeString()" : 2 , "toString()" : 5 , "validateValue(String,String)" : 1 , "writeObject(OutputSerializer)" : 1 , "writeObject(OutputSerializer,DetailLevel)" : 3}},{ "className" : "marauroa::common::io::UnicodeSupportingInputStreamReaderTest" , "selectors" : { "getReader(String)" : 1 , "readFirstLine(String)" : 2}},{ "className" : "marauroa::client::net::TCPNetworkClientManager::NetworkClientManagerWrite" , "selectors" : { "NetworkClientManagerWrite()" : 1 , "write(Message)" : 1}},{ "className" : "java::nio::channels::spi::SelectorProvider" , "selectors" : { "openSelector()" : 8 , "provider()" : 5}},{ "className" : "marauroa::server::game::db::DAORegister" , "selectors" : { "DAORegister()" : 1 , "get()" : 55 , "get(Class<T>)" : 53 , "getRPObjectFactory()" : 1 , "register(Class<T>,T)" : 9 , "registerDAOs()" : 1}},{ "className" : "marauroa::client::net::PerceptionHandler" , "selectors" : { "PerceptionHandler()" : 1 , "PerceptionHandler(IPerceptionListener)" : 2 , "apply(MessageS2CPerception,Map<ID,RPObject>)" : 2 , "applyPerceptionAddedRPObjects(MessageS2CPerception,Map<ID,RPObject>)" : 3 , "applyPerceptionDeletedRPObjects(MessageS2CPerception,Map<ID,RPObject>)" : 2 , "applyPerceptionModifiedRPObjects(MessageS2CPerception,Map<ID,RPObject>)" : 2 , "applyPerceptionMyRPObject(MessageS2CPerception,Map<ID,RPObject>)" : 3}},{ "className" : "marauroa::server::game::db::RPObjectDAO" , "selectors" : { "RPObjectDAO(RPObjectFactory)" : 1 , "hasRPObject(DBTransaction,int)" : 2 , "loadRPObject(DBTransaction,int)" : 1 , "loadRPObject(DBTransaction,int,boolean)" : 3 , "readRPObject(int,Blob,int,boolean)" : 2 , "removeRPObject(DBTransaction,int)" : 2 , "storeRPObject(DBTransaction,RPObject)" : 3}},{ "className" : "marauroa::common::ConfigurationParams" , "selectors" : { "ConfigurationParams()" : 1 , "getBasedir()" : 3 , "getConfigurationFile()" : 5 , "isPersistence()" : 2 , "isRelativeToHome()" : 3 , "setBasedir(String)" : 2 , "setConfigurationFile(String)" : 2 , "setPersistence(boolean)" : 1 , "setRelativeToHome(boolean)" : 2}},{ "className" : "marauroa::server::game::rp::RPWorld" , "selectors" : { "RPWorld()" : 3 , "add(RPObject)" : 3 , "addRPZone(IRPZone)" : 1 , "changeZone(ID,RPObject)" : 1 , "getRPZone(ID)" : 1 , "initialize()" : 2 , "modify(RPObject)" : 2 , "nextTurn()" : 1 , "onFinish()" : 1 , "onInit()" : 1 , "remove(ID)" : 3 , "requestSync(RPObject)" : 1 , "set(RPWorld)" : 1 , "size()" : 1}},{ "className" : "marauroa::common::net::message::MessageS2CCreateAccountNACK" , "selectors" : { "MessageS2CCreateAccountNACK(SocketChannel,Result)" : 1 , "getResolution()" : 1 , "getResolutionCode()" : 1}},{ "className" : "marauroa::server::game::messagehandler::DelayedEventHandler" , "selectors" : { "handleDelayedEvent(RPServerManager,Object)" : 1}},{ "className" : "marauroa::common::game::RPObject::ID" , "selectors" : { "ID(RPAction)" : 2 , "ID(RPObject)" : 1 , "ID(int,ID)" : 3 , "ID(int,String)" : 22 , "equals(Object)" : 11 , "getObjectID()" : 14 , "getZoneID()" : 10 , "hashCode()" : 1 , "toString()" : 2}},{ "className" : "marauroa::ping::PingClient" , "selectors" : { "PingClient(String)" : 1}},{ "className" : "marauroa::common::net::InputSerializer" , "selectors" : { "InputSerializer(InputStream)" : 19 , "byteToPositiveInt(byte)" : 1 , "close()" : 1 , "getProtocolVersion()" : 1 , "read255LongByteArray()" : 1 , "read255LongString()" : 7 , "read65536LongByteArray()" : 1 , "read65536LongString()" : 1 , "readByte()" : 22 , "readByteArray()" : 12 , "readFloat()" : 1 , "readInt()" : 26 , "readObject(Serializable)" : 28 , "readObjectArray(Class<? extends Serializable>)" : 1 , "readShort()" : 7 , "readString()" : 24 , "readStringArray()" : 2 , "setProtocolVersion(int)" : 7}},{ "className" : "marauroa::server::game::messagehandler::SendCharacterListHandler" , "selectors" : { "SendCharacterListHandler(INetworkServerManager,int)" : 2}},{ "className" : "marauroa::server::game::messagehandler::SecuredLoginHandler::ServerInfo" , "selectors" : { "get()" : 1}},{ "className" : "marauroa::server::game::dbcommand::LogStatisticsCommand" , "selectors" : { "LogStatisticsCommand(Variables)" : 1}},{ "className" : "marauroa::common::game::SyntaxException" , "selectors" : { "SyntaxException(String)" : 10 , "SyntaxException(short)" : 2}},{ "className" : "marauroa::server::net::nio::FloodCheck" , "selectors" : { "FloodCheck(INetworkServerManager)" : 1}},{ "className" : "marauroa::common::net::message::MessageS2CChooseCharacterACK" , "selectors" : { "MessageS2CChooseCharacterACK(SocketChannel)" : 1}},{ "className" : "marauroa::common::Utility" , "selectors" : { "addLeadingZeros(String,int)" : 3 , "copy(String[])" : 2 , "copy(byte[])" : 12 , "dumpByteArray(byte[])" : 2 , "dumpInputStream(InputStream)" : 2}},{ "className" : "marauroa::server::game::Statistics::Variables" , "selectors" : { "Variables()" : 2 , "add(String,long)" : 3 , "clear()" : 1 , "clone()" : 1 , "escapeXML(String)" : 1 , "get(String)" : 3 , "print(PrintWriter,double)" : 1 , "put(String,long)" : 3}},{ "className" : "marauroa::server::game::messagehandler::CreateAccountHandler" , "selectors" : { "CreateAccountHandler()" : 1}},{ "className" : "marauroa::server::net::IDisconnectedListener" , "selectors" : { "onDisconnect(SocketChannel)" : 1}},{ "className" : "marauroa::server::game::messagehandler::TransferACKHandler" , "selectors" : { "TransferACKHandler()" : 1}},{ "className" : "marauroa::server::game::rp::RPServerManager" , "selectors" : { "RPServerManager(INetworkServerManager)" : 1 , "addRPAction(RPObject,RPAction)" : 1 , "buildPerceptions()" : 1 , "checkGameVersion(String,String)" : 1 , "createAccount(String,String,String,String)" : 1 , "createCharacter(String,String,RPObject,String)" : 1 , "deliverTransferContent()" : 1 , "finish()" : 1 , "getPlayerPerception(PlayerEntry)" : 1 , "getValidator()" : 2 , "initializeExtensions(Configuration)" : 1 , "onExit(RPObject)" : 1 , "onInit(RPObject)" : 1 , "onTimeout(RPObject)" : 2 , "savePlayersPeriodicly()" : 1 , "sendPlayerPerception(PlayerEntry,Perception,RPObject)" : 1 , "transferContent(RPObject,List<TransferContent>)" : 2 , "transferContent(RPObject,TransferContent)" : 2}},{ "className" : "marauroa::server::db::adapter::DatabaseAdapter" , "selectors" : { "close()" : 1 , "commit()" : 1 , "doesColumnExist(String,String)" : 1 , "doesTableExist(String)" : 1 , "execute(String)" : 1 , "execute(String,InputStream[])" : 1 , "getLastInsertId(String,String)" : 1 , "prepareStatement(String)" : 1 , "query(String)" : 1 , "querySingleCellInt(String)" : 1 , "rollback()" : 1}},{ "className" : "marauroa::server::game::dbcommand::LoadCharacterCommand" , "selectors" : { "LoadCharacterCommand(String,String)" : 1 , "LoadCharacterCommand(String,String,DelayedEventHandler,int,SocketChannel,int)" : 1 , "execute(DBTransaction)" : 1 , "getCharacterName()" : 1 , "getObject()" : 1 , "getUsername()" : 2}},{ "className" : "marauroa::common::net::message::MessageS2CLoginSendKey" , "selectors" : { "MessageS2CLoginSendKey(SocketChannel,RSAPublicKey)" : 1 , "getKey()" : 1}},{ "className" : "marauroa::server::net::nio::NioServer" , "selectors" : { "NioServer(InetAddress,int,IWorker)" : 1 , "accept(SelectionKey)" : 1 , "close(SocketChannel)" : 5 , "finish()" : 1 , "initSelector()" : 1 , "read(SelectionKey)" : 1 , "registerDisconnectedListener(IDisconnectedListener)" : 3 , "send(SocketChannel,byte[])" : 1 , "write(SelectionKey)" : 2}},{ "className" : "marauroa::common::net::Serializable" , "selectors" : { "readObject(InputSerializer)" : 1 , "writeObject(OutputSerializer)" : 1}},{ "className" : "marauroa::server::game::db::DatabaseFactory" , "selectors" : { "DatabaseFactory()" : 4 , "configureGameDatabaseAccess()" : 1 , "initializeDatabase()" : 4 , "initializeDatabaseSchema()" : 1}},{ "className" : "marauroa::common::game::Result" , "selectors" : { "failed()" : 2 , "getText()" : 2 , "values()" : 2}},{ "className" : "marauroa::common::net::message::MessageS2CLoginNACK::Reasons" , "selectors" : { "values()" : 1}},{ "className" : "marauroa::common::game::SlotOwner" , "selectors" : { "SlotOwner(RPClass)" : 3 , "addSlot(RPSlot)" : 1 , "addSlot(String)" : 1 , "assignSlotID(RPObject)" : 3 , "deserializeRPSlots(InputSerializer)" : 2 , "fill(Attributes)" : 2 , "getContainerBaseOwner()" : 2 , "getContainerOwner()" : 5 , "getSlot(String)" : 1 , "hasSlot(String)" : 3 , "serializeRPSlots(OutputSerializer,DetailLevel)" : 2 , "slots()" : 1 , "slotsIterator()" : 1 , "toString()" : 2 , "usedSlotID(int)" : 2}},{ "className" : "marauroa::server::game::messagehandler::CreateCharacterHandler" , "selectors" : { "CreateCharacterHandler()" : 1}},{ "className" : "marauroa::server::game::rp::MarauroaRPZone" , "selectors" : { "MarauroaRPZone(String)" : 5 , "add(RPObject)" : 21 , "assignRPObjectID(RPObject)" : 20 , "get(ID)" : 6 , "getID()" : 1 , "getPerception(RPObject,byte)" : 15 , "has(ID)" : 2 , "modify(RPObject)" : 13 , "nextTurn()" : 18 , "remove(ID)" : 1 , "reset()" : 1 , "storeToDatabase()" : 1}},{ "className" : "marauroa::common::net::message::MessageS2CCreateCharacterACK" , "selectors" : { "MessageS2CCreateCharacterACK(SocketChannel,String,RPObject)" : 1 , "getCharacter()" : 1 , "getTemplate()" : 1}},{ "className" : "marauroa::server::db::UpdateScript" , "selectors" : { "UpdateScript()" : 1 , "update(DBTransaction)" : 1}},{ "className" : "marauroa::common::net::message::MessageS2CTransferREQ" , "selectors" : { "MessageS2CTransferREQ(SocketChannel,List<TransferContent>)" : 1 , "getContents()" : 1}},{ "className" : "java::nio::channels::spi::AbstractInterruptibleChannel" , "selectors" : { "close()" : 123 , "isOpen()" : 47}},{ "className" : "marauroa::server::net::validator::ConnectionValidator::RemoveBan" , "selectors" : { "RemoveBan(InetAddressMask)" : 1}},{ "className" : "marauroa::server::net::validator::ConnectionValidator" , "selectors" : { "ConnectionValidator()" : 1 , "addBan(SocketChannel,int)" : 1 , "addBan(String,String,long)" : 2 , "checkBanned(InetAddress)" : 1 , "checkBanned(Socket)" : 1 , "checkReload()" : 1 , "finish()" : 1 , "loadBannedIPNetworkListFromDB()" : 2}},{ "className" : "marauroa::common::net::message::MessageS2CPerception::CachedCompressedPerception" , "selectors" : { "CachedCompressedPerception()" : 1 , "clear()" : 1 , "get()" : 1 , "get(MessageS2CPerception)" : 1}},{ "className" : "marauroa::common::net::message::MessageS2CTransfer" , "selectors" : { "MessageS2CTransfer(SocketChannel,TransferContent)" : 1 , "getContents()" : 1}},{ "className" : "marauroa::ping::client::Speaker" , "selectors" : { "Speaker()" : 1 , "onAddedChanges(RPObject)" : 1 , "onDeletedChanges(RPObject)" : 1}},{ "className" : "marauroa::common::crypto::RSAKey" , "selectors" : { "RSAKey(BigInteger,BigInteger,BigInteger)" : 3 , "decode(BigInteger)" : 2 , "decodeByteArray(byte[])" : 2 , "generateKey(int)" : 1 , "print(PrintWriter)" : 1}},{ "className" : "marauroa::server::game::messagehandler::LoginSendPromiseHandler" , "selectors" : { "LoginSendPromiseHandler()" : 1}},{ "className" : "marauroa::server::net::nio::DataEvent" , "selectors" : { "DataEvent(SocketChannel,byte[])" : 1}},{ "className" : "marauroa::ping::PingClient::PingPerceptionListener" , "selectors" : { "PingPerceptionListener()" : 1}},{ "className" : "marauroa::common::game::Definition::Type" , "selectors" : { "values()" : 1}},{ "className" : "marauroa::server::game::messagehandler::MessageHandler" , "selectors" : { "init(INetworkServerManager,RPServerManager,PlayerEntryContainer,Statistics,RSAKey)" : 1 , "isValidEvent(Message,PlayerEntry,ClientState[])" : 8 , "process(Message)" : 1}},{ "className" : "java::lang::Thread::UncaughtExceptionHandler" , "selectors" : { "uncaughtException(Thread,Throwable)" : 2}},{ "className" : "marauroa::server::game::container::PlayerEntryContainer" , "selectors" : { "PlayerEntryContainer()" : 2 , "add(SocketChannel)" : 4 , "dumpStatistics()" : 1 , "generateClientID()" : 1 , "get(RPObject)" : 3 , "get(SocketChannel)" : 1 , "get(String)" : 3 , "get(int)" : 12 , "getContainer()" : 6 , "getIdleEntry()" : 1 , "getLock()" : 10 , "getOldEntry(PlayerEntry)" : 1 , "has(int)" : 3 , "remove(int)" : 7 , "size()" : 2}},{ "className" : "marauroa::server::game::dbcommand::StoreCharacterCommand" , "selectors" : { "StoreCharacterCommand(String,String,RPObject)" : 1}},{ "className" : "marauroa::common::net::message::Message::MessageType" , "selectors" : { "values()" : 1}},{ "className" : "marauroa::server::net::INetworkServerManager" , "selectors" : { "disconnectClient(SocketChannel)" : 8 , "finish()" : 1 , "getMessage()" : 1 , "getValidator()" : 2 , "registerDisconnectedListener(IDisconnectedListener)" : 1 , "sendMessage(Message)" : 22 , "start()" : 1}},{ "className" : "java::io::InputStreamReader" , "selectors" : { "InputStreamReader(InputStream)" : 970 , "InputStreamReader(InputStream,Charset)" : 13 , "InputStreamReader(InputStream,CharsetDecoder)" : 6 , "InputStreamReader(InputStream,String)" : 373 , "close()" : 136 , "getEncoding()" : 10 , "java" : 67 , "read()" : 40 , "read(char[],int,int)" : 21 , "ready()" : 6}},{ "className" : "marauroa::common::net::message::MessageS2CChooseCharacterNACK" , "selectors" : { "MessageS2CChooseCharacterNACK(SocketChannel)" : 1}},{ "className" : "marauroa::common::io::Persistence" , "selectors" : { "get()" : 2 , "getInputStream(boolean,String,String)" : 1 , "getOutputStream(boolean,String,String)" : 1}},{ "className" : "marauroa::common::net::Decoder::MessageParts" , "selectors" : { "MessageParts()" : 1 , "add(byte[])" : 1 , "build(SocketChannel)" : 1 , "isEmpty()" : 1 , "readSizeOfMessage()" : 1}},{ "className" : "marauroa::common::net::message::MessageS2CConnectNACK" , "selectors" : { "MessageS2CConnectNACK()" : 1}},{ "className" : "marauroa::client::net::INetworkClientManagerInterface" , "selectors" : { "addMessage(Message)" : 13 , "finish()" : 1 , "getConnectionState()" : 1 , "getMessage(int)" : 2}},{ "className" : "marauroa::functional::GenerateINI" , "selectors" : { "getDatabaseHost()" : 1 , "getDatabaseImplementation()" : 1 , "getDatabaseName()" : 1 , "getDatabasePassword()" : 1 , "getDatabaseUsername()" : 1 , "getFactoryImplementation()" : 1 , "getRSAKeyBits()" : 1 , "getRuleProcessorImplementation()" : 1 , "getStatisticsFilename()" : 1 , "getStringWithDefault(BufferedReader,String)" : 3 , "getStringWithoutDefault(BufferedReader,String)" : 2 , "getTCPPort()" : 1 , "getTurnLength()" : 1 , "getWorldImplementation()" : 1 , "write(PrintWriter)" : 1}},{ "className" : "marauroa::server::game::db::AccountDAO" , "selectors" : { "AccountDAO()" : 1 , "addBan(DBTransaction,String,String,Timestamp)" : 1 , "addPlayer(DBTransaction,String,byte[],String)" : 17 , "addPlayer(String,byte[],String)" : 1 , "changeEmail(DBTransaction,String,String)" : 1 , "changePassword(DBTransaction,String,String)" : 2 , "getAccountBanMessage(DBTransaction,String)" : 2 , "getAccountStatus(DBTransaction,String)" : 4 , "getDatabasePlayerId(DBTransaction,String)" : 11 , "getDatabasePlayerId(String)" : 1 , "getEmail(DBTransaction,String)" : 1 , "hasPlayer(DBTransaction,String)" : 16 , "hasPlayer(String)" : 1 , "isAccountCreationLimitReached(DBTransaction,String)" : 1 , "isAccountCreationLimitReached(String)" : 1 , "removePlayer(DBTransaction,String)" : 3 , "setAccountStatus(DBTransaction,String,String)" : 3 , "setAccountStatus(String,String)" : 1 , "verify(DBTransaction,SecuredLoginInfo)" : 3 , "verify(SecuredLoginInfo)" : 1 , "verifyUsingDB(DBTransaction,String,String)" : 2}},{ "className" : "marauroa::server::game::GameServerManager" , "selectors" : { "GameServerManager(RSAKey,INetworkServerManager,RPServerManager)" : 1 , "finish()" : 1 , "onDisconnect(SocketChannel)" : 1 , "start()" : 1 , "storeConnectedPlayers()" : 1}},{ "className" : "marauroa::server::db::command::DBCommandQueue" , "selectors" : { "DBCommandQueue()" : 1 , "addResult(DBCommandMetaData)" : 1 , "enqueue(DBCommand)" : 6 , "finish()" : 1 , "get()" : 9 , "getNextCommand()" : 1 , "isFinished()" : 1}},{ "className" : "marauroa::client::net::TCPNetworkClientManager" , "selectors" : { "TCPNetworkClientManager(Proxy,InetSocketAddress)" : 2 , "TCPNetworkClientManager(String,int)" : 3 , "addMessage(Message)" : 2 , "getMessage(int)" : 1 , "getMessages()" : 1}},{ "className" : "marauroa::ping::client::SpeakerView" , "selectors" : { "SpeakerView(Speaker)" : 1}},{ "className" : "marauroa::server::game::db::BanListDAO" , "selectors" : { "BanListDAO()" : 1 , "getBannedAddresses()" : 1 , "getBannedAddresses(DBTransaction)" : 1}},{ "className" : "marauroa::common::game::RPObjectTest::SubRPObject" , "selectors" : { "SubRPObject()" : 1}},{ "className" : "marauroa::common::net::message::MessageC2SLoginSendNonceNameAndPassword" , "selectors" : { "MessageC2SLoginSendNonceNameAndPassword(SocketChannel,byte[],String,byte[])" : 1 , "getPassword()" : 1 , "getUsername()" : 1}},{ "className" : "marauroa::server::game::db::StatisticsDAO" , "selectors" : { "StatisticsDAO()" : 1 , "addStatisticsEvent(DBTransaction,Variables)" : 2}},{ "className" : "marauroa::server::game::messagehandler::UnkownMessageHandler" , "selectors" : { "UnkownMessageHandler()" : 1}},{ "className" : "marauroa::server::net::flood::IFloodCheck" , "selectors" : { "isFlooding(FloodMeasure)" : 1 , "onFlood(FloodMeasure)" : 1}},{ "className" : "marauroa::common::net::message::MessageC2SLoginRequestKey" , "selectors" : { "MessageC2SLoginRequestKey(SocketChannel,String,String)" : 1 , "getGame()" : 1 , "getVersion()" : 1}},{ "className" : "marauroa::client::ClientFramework" , "selectors" : { "ClientFramework(String)" : 2 , "chooseCharacter(String)" : 8 , "close()" : 17 , "connect(String,int)" : 17 , "createAccount(String,String,String)" : 5 , "createCharacter(String,RPObject)" : 5 , "getConnectionState()" : 4 , "getGameName()" : 1 , "getMessage()" : 5 , "getVersionNumber()" : 1 , "login(String,String)" : 15 , "login(String,String,String)" : 1 , "logout()" : 9 , "loop(int)" : 6 , "onAvailableCharacterDetails(Map<String,RPObject>)" : 2 , "onAvailableCharacters(String[])" : 2 , "onPerception(MessageS2CPerception)" : 1 , "onPreviousLogins(List<String>)" : 1 , "onServerInfo(String[])" : 1 , "onTransfer(List<TransferContent>)" : 1 , "onTransferREQ(List<TransferContent>)" : 1 , "resync()" : 1 , "send(RPAction)" : 4}},{ "className" : "marauroa::common::net::message::MessageC2SLoginSendPromise" , "selectors" : { "MessageC2SLoginSendPromise(SocketChannel,byte[])" : 1}},{ "className" : "marauroa::common::crypto::RSAPublicKey" , "selectors" : { "RSAPublicKey(BigInteger,BigInteger)" : 3 , "encode(BigInteger)" : 2 , "encodeByteArray(byte[])" : 3 , "getE()" : 2 , "getN()" : 2 , "print(PrintStream)" : 1 , "print(PrintWriter)" : 1}},{ "className" : "marauroa::server::db::command::DBCommand" , "selectors" : { "execute(DBTransaction)" : 1 , "setEnqueueTime(Timestamp)" : 1 , "setException(Exception)" : 3}},{ "className" : "marauroa::tools::protocolanalyser::ProtocolAnalyser" , "selectors" : { "ProtocolAnalyser()" : 1 , "dump(InputStream,boolean)" : 1}},{ "className" : "marauroa::server::game::messagehandler::OutOfSyncHandler" , "selectors" : { "OutOfSyncHandler()" : 1}},{ "className" : "marauroa::server::game::messagehandler::DisconnectHandler" , "selectors" : { "DisconnectHandler()" : 1}},{ "className" : "marauroa::server::game::python::PythonWorld" , "selectors" : { "onFinish()" : 1 , "onInit()" : 1}},{ "className" : "marauroa::common::game::Definition" , "selectors" : { "Definition()" : 1 , "Definition(DefinitionClass)" : 6 , "defineAttribute(String,Type,byte)" : 1 , "defineEvent(String,byte)" : 2 , "defineSlot(String,int,byte)" : 1 , "defineStaticAttribute(String,String,byte)" : 1 , "deserialize(InputSerializer)" : 1 , "getCapacity()" : 3 , "getCode()" : 8 , "getName()" : 3 , "getType()" : 7 , "getValue()" : 3 , "isHidden()" : 5 , "isPrivate()" : 3 , "isStorable()" : 4 , "isVisible()" : 7 , "serialize(String,OutputSerializer)" : 1 , "setCapacity(byte)" : 1 , "setCode(short)" : 5 , "setFlags(byte)" : 3 , "setName(String)" : 1 , "setType(Type)" : 1 , "validate(String)" : 1}},{ "className" : "marauroa::server::game::rp::IRPRuleProcessor" , "selectors" : { "beginTurn()" : 1 , "checkGameVersion(String,String)" : 1 , "createAccount(String,String,String)" : 1 , "createCharacter(String,String,RPObject)" : 1 , "endTurn()" : 1 , "execute(RPObject,RPAction)" : 1 , "onActionAdd(RPObject,RPAction,List<RPAction>)" : 1 , "onExit(RPObject)" : 1 , "onInit(RPObject)" : 1 , "onTimeout(RPObject)" : 1 , "setContext(RPServerManager)" : 1}},{ "className" : "marauroa::common::game::IRPZone" , "selectors" : { "add(RPObject)" : 3 , "assignRPObjectID(RPObject)" : 3 , "get(ID)" : 1 , "getID()" : 4 , "getPerception(RPObject,byte)" : 2 , "has(ID)" : 1 , "modify(RPObject)" : 1 , "nextTurn()" : 1 , "onFinish()" : 3 , "remove(ID)" : 1 , "size()" : 1}},{ "className" : "marauroa::server::db::command::DBCommandMetaData" , "selectors" : { "DBCommandMetaData(DBCommand,ResultHandle,Thread,boolean)" : 2 , "getCommand()" : 6 , "getResultHandle()" : 2 , "isResultAwaited()" : 1 , "setProcessedTimestamp(long)" : 1}},{ "className" : "marauroa::client::net::HTTPConnectSocket" , "selectors" : { "HTTPConnectSocket(SocketAddress)" : 1 , "sendConnect(SocketAddress)" : 1 , "setupHttpConnect(SocketAddress)" : 1 , "verifyConnection()" : 1}},{ "className" : "marauroa::server::game::messagehandler::SecuredLoginHandler" , "selectors" : { "SecuredLoginHandler()" : 2 , "completeLogin(SocketChannel,int,int,SecuredLoginInfo,List<String>)" : 1 , "decode(SecuredLoginInfo,byte[])" : 1 , "fillLoginInfo(Message,PlayerEntry)" : 1}},{ "className" : "java::lang::Exception" , "selectors" : { "Exception()" : 337 , "Exception(String)" : 3043 , "Exception(String,Throwable)" : 292 , "Exception(Throwable)" : 99}},{ "className" : "marauroa::common::net::message::MessageS2CServerInfo" , "selectors" : { "MessageS2CServerInfo(SocketChannel,String[])" : 1 , "getContents()" : 1}},{ "className" : "<T>::MyObjectTest" , "selectors" : { "main(String)::MyObject2" : 1 , "main(String[])::MyObject" : 1}},{ "className" : "org::jruby::runtime::load::LoadService::ClassLoaderSearcher" , "selectors" : { "ClassLoaderSearcher()" : 1}},{ "className" : "org::jruby::ast::BlockNode" , "selectors" : { "BlockNode(ISourcePosition)" : 5}},{ "className" : "org::jruby::runtime::invokedynamic::InvokeDynamicSupport::JRubyCallSite" , "selectors" : { "JRubyCallSite(???)" : 2 , "callType()" : 20 , "setTarget(???)" : 11}},{ "className" : "org::jruby::ast::CallOneArgFixnumNode" , "selectors" : { "CallOneArgFixnumNode(ISourcePosition,Node,String,ArrayNode)" : 2}},{ "className" : "org::jruby::compiler::BranchCallback" , "selectors" : { "branch(BodyCompiler)" : 44}},{ "className" : "org::jruby::compiler::DAGBuilder" , "selectors" : { "getExtents(Node)" : 14 , "node(String,Object[])" : 11 , "pair(N)" : 7}},{ "className" : "org::jruby::lexer::yacc::SyntaxException" , "selectors" : { "SyntaxException(PID,ISourcePosition,String,String,Object[])" : 76 , "getPosition()" : 2 , "prepareMessage(String,String)" : 1}},{ "className" : "java::lang::NullPointerException" , "selectors" : { "NullPointerException()" : 291 , "NullPointerException(String)" : 3531 , "addClassAndMethod(???)" : 1 , "java" : 6}},{ "className" : "org::jruby::util::ShellLauncher::StreamPumper" , "selectors" : { "StreamPumper(Ruby,InputStream,OutputStream,boolean,Slave,Object)" : 5 , "quit()" : 1}},{ "className" : "java::lang::ref::Reference" , "selectors" : { "clear()" : 32 , "enqueue()" : 2 , "get()" : 346 , "isEnqueued()" : 1}},{ "className" : "org::jruby::RubyMath::NemesLogGamma" , "selectors" : { "NemesLogGamma(double)" : 3}},{ "className" : "org::jruby::compiler::ir::IR_Class" , "selectors" : { "IR_Class(IR_Scope,Operand,Operand,String)" : 4 , "getCoreClass(String)" : 13}},{ "className" : "org::jruby::RubyNKF::NKFCharset" , "selectors" : { "NKFCharset(int,String)" : 15 , "getCharset()" : 6 , "getValue()" : 21}},{ "className" : "org::jruby::embed::internal::LocalContextProvider" , "selectors" : { "getAttributeMap()" : 4 , "getRubyInstanceConfig()" : 78 , "getRuntime()" : 18 , "getVarMap()" : 7}},{ "className" : "java::nio::channels::SelectableChannel" , "selectors" : { "blockingLock()" : 12 , "configureBlocking(boolean)" : 25 , "isBlocking()" : 12 , "keyFor(Selector)" : 4 , "provider()" : 3 , "register(Selector,int)" : 17 , "register(Selector,int,Object)" : 6 , "validOps()" : 3}},{ "className" : "org::jruby::ast::AliasNode" , "selectors" : { "AliasNode(ISourcePosition,Node,Node)" : 1 , "getNewName()" : 2 , "getOldName()" : 2}},{ "className" : "org::jruby::ast::ArgumentNode" , "selectors" : { "ArgumentNode(ISourcePosition,String)" : 10 , "getName()" : 6}},{ "className" : "org::jruby::ext::ffi::jffi::FastLongMethodFactory::Signed8ResultConverter" , "selectors" : { "Signed8ResultConverter()" : 2}},{ "className" : "org::jruby::RubyGlobal::LoadedFeatures" , "selectors" : { "LoadedFeatures(Ruby,String)" : 2}},{ "className" : "org::jruby::util::Dir::GlobPattern" , "selectors" : { "GlobPattern(???)" : 1 , "GlobPattern(byte[],int,int,int)" : 2 , "findClosingIndexOf(int)" : 2 , "hasNext()" : 2 , "index()" : 2 , "indexOf(byte)" : 1 , "next()" : 2 , "reset()" : 1}},{ "className" : "org::jruby::util::ShellLauncher::ScriptThreadProcess" , "selectors" : { "ScriptThreadProcess(Ruby,String[],String[],File)" : 1 , "ScriptThreadProcess(Ruby,String[],String[],File,boolean)" : 2 , "closeStreams()" : 1 , "environmentMap(String[])" : 1 , "start()" : 2 , "waitFor()" : 1}},{ "className" : "org::jruby::ast::types::INameNode" , "selectors" : { "getName()" : 15}},{ "className" : "org::jruby::ast::LocalVarNode" , "selectors" : { "LocalVarNode(ISourcePosition,int,String)" : 1 , "getDepth()" : 4 , "getIndex()" : 4 , "getName()" : 2}},{ "className" : "org::jruby::ext::ffi::Type::Array" , "selectors" : { "Array(Ruby,RubyClass,Type,int)" : 2 , "Type" : 1 , "getComponentType()" : 9 , "length()" : 9}},{ "className" : "org::jruby::common::IRubyWarnings" , "selectors" : { "isVerbose()" : 9 , "warn(ID,ISourcePosition,String,Object[])" : 7 , "warning(ID,ISourcePosition,String,Object[])" : 8}},{ "className" : "org::jruby::lexer::yacc::ISourcePosition" , "selectors" : { "getFile()" : 28 , "getStartLine()" : 26}},{ "className" : "org::jruby::RubyEtc" , "selectors" : { "createEtcModule(Ruby)" : 1 , "defineGroupStruct(Ruby)" : 1 , "definePasswdStruct(Ruby)" : 1 , "intoStringArray(Ruby,String[])" : 1}},{ "className" : "org::jruby::test::TestRubyBase" , "selectors" : { "TestRubyBase(String)" : 8 , "eval(String)" : 97 , "setUp(???)" : 11}},{ "className" : "org::jruby::RubyClass::VariableAccessor" , "selectors" : { "VariableAccessor(int,int)" : 2 , "get(Object)" : 13 , "getClassId()" : 6 , "getIndex()" : 1 , "set(Object,Object)" : 8}},{ "className" : "org::jruby::ast::FixnumNode" , "selectors" : { "FixnumNode(ISourcePosition,long)" : 4 , "getFixnum(Ruby)" : 2 , "getValue()" : 13 , "setValue(long)" : 1}},{ "className" : "org::jruby::compiler::ir::IR_MetaClass" , "selectors" : { "IR_MetaClass(IR_Scope,Operand)" : 2}},{ "className" : "org::jruby::ast::Node" , "selectors" : { "Node(ISourcePosition)" : 88 , "assign(Ruby,ThreadContext,IRubyObject,IRubyObject,Block,boolean)" : 305 , "childNodes()" : 9 , "createList(Node[])" : 67 , "definition(Ruby,ThreadContext,IRubyObject,Block)" : 8 , "getNodeName()" : 1 , "getNodeType()" : 63 , "getPosition()" : 232 , "interpret(Ruby,ThreadContext,IRubyObject,Block)" : 242 , "setPosition(ISourcePosition)" : 26}},{ "className" : "org::jruby::ext::ffi::jffi::FastIntMethodFactory::Unsigned8ResultConverter" , "selectors" : { "Unsigned8ResultConverter()" : 1}},{ "className" : "org::jruby::javasupport::test::TestIntWrapperImpl" , "selectors" : { "getInteger()" : 1}},{ "className" : "org::jruby::maven::AbstractJRubyMojo" , "selectors" : { "getProject()::Project" : 1 , "jruby(String)::Java" : 1 , "jruby(String)::Variable" : 2}},{ "className" : "org::jruby::runtime::load::CompiledScriptLoader" , "selectors" : { "loadScriptFromFile(Ruby,InputStream,String)" : 2 , "loadScriptFromFile(Ruby,InputStream,String)::ClassReader" : 1}},{ "className" : "org::jruby::internal::runtime::ThreadLike" , "selectors" : { "isAlive()" : 7 , "isCurrent()" : 1 , "join(long)" : 1 , "setPriority(int)" : 1 , "start()" : 2}},{ "className" : "org::jruby::ast::NthRefNode" , "selectors" : { "NthRefNode(ISourcePosition,int)" : 1 , "getMatchNumber()" : 7}},{ "className" : "java::lang::ArithmeticException" , "selectors" : { "ArithmeticException()" : 7 , "ArithmeticException(String)" : 36}},{ "className" : "org::jruby::internal::runtime::NativeThread" , "selectors" : { "NativeThread(RubyThread,Thread)" : 3}},{ "className" : "org::jruby::ext::ffi::NullMemoryIO" , "selectors" : { "NullMemoryIO(Ruby)" : 6}},{ "className" : "org::jruby::ast::UnnamedRestArgNode" , "selectors" : { "UnnamedRestArgNode(ISourcePosition,int)" : 3}},{ "className" : "org::jruby::RubyString::TR" , "selectors" : { "TR(???)" : 6}},{ "className" : "org::jruby::ast::AttrAssignOneArgNode" , "selectors" : { "AttrAssignOneArgNode(ISourcePosition,Node,String,ArrayNode)" : 3}},{ "className" : "org::jruby::ast::FCallNoArgBlockNode" , "selectors" : { "FCallNoArgBlockNode(ISourcePosition,String,IterNode)" : 3 , "FCallNoArgBlockNode(ISourcePosition,String,Node,IterNode)" : 2}},{ "className" : "org::jruby::javasupport::util::ObjectProxyCache::SoftEntryRef" , "selectors" : { "SoftEntryRef(int,T,ReferenceQueue<Object>)" : 2}},{ "className" : "org::jruby::ext::ffi::InvalidMemoryIO" , "selectors" : { "InvalidMemoryIO(Ruby)" : 1 , "InvalidMemoryIO(Ruby,String)" : 6 , "ex()" : 41 , "getErrorClass(Ruby)" : 1}},{ "className" : "javax::script::SimpleBindings" , "selectors" : { "SimpleBindings()" : 10 , "get(Object)" : 1 , "put(String,Object)" : 2}},{ "className" : "org::jruby::compiler::ArrayCallback" , "selectors" : { "nextValue(BodyCompiler,Object,int)" : 21}},{ "className" : "org::jruby::ext::socket::RubyUNIXSocket::LibCSocket::sockaddr_un" , "selectors" : { "newInstance()" : 7 , "path(???)" : 6 , "setFamily(int)" : 1}},{ "className" : "org::jruby::compiler::NotCompilableException" , "selectors" : { "org" : 34}},{ "className" : "org::jruby::RubyGlobal::DebugGlobalVariable" , "selectors" : { "DebugGlobalVariable(Ruby,String,IRubyObject)" : 2 , "set(IRubyObject)" : 1}},{ "className" : "org::jruby::ext::ffi::jffi::FastIntMethodFactory::Float32ParameterConverter" , "selectors" : { "Float32ParameterConverter()" : 1}},{ "className" : "org::jruby::RubyGlobal::OutputGlobalVariable" , "selectors" : { "OutputGlobalVariable(Ruby,String,IRubyObject)" : 4}},{ "className" : "org::jruby::ext::ffi::StructLayout::EnumField" , "selectors" : { "EnumField(Ruby,RubyClass)" : 1 , "StructLayout" : 1}},{ "className" : "org::jruby::ast::ArgsNoArgNode" , "selectors" : { "ArgsNoArgNode(ISourcePosition)" : 1}},{ "className" : "org::jruby::compiler::impl::InheritedCacheCompiler" , "selectors" : { "InheritedCacheCompiler(StandardASMCompiler)" : 1 , "cacheDRegexp(BaseBodyCompiler,CompilerCallback,int)::Label" : 1 , "ensureRuntimeCacheInited(SkinnyMethodAdapter)" : 1}},{ "className" : "org::jruby::runtime::callsite::CacheEntry" , "selectors" : { "CacheEntry(DynamicMethod,Object)" : 3 , "typeOk(CacheEntry,RubyClass)" : 21 , "typeOk(RubyClass)" : 4}},{ "className" : "java::lang::Throwable" , "selectors" : { "Throwable()" : 167 , "Throwable(String)" : 91 , "Throwable(String,Throwable)" : 3 , "fillInStackTrace()" : 87 , "getCause()" : 742 , "getLocalizedMessage()" : 856 , "getMessage()" : 9104 , "getStackTrace()" : 151 , "initCause(Throwable)" : 647 , "printStackTrace()" : 7353 , "printStackTrace(PrintStream)" : 721 , "printStackTrace(PrintWriter)" : 473 , "setStackTrace(StackTraceElement[])" : 34 , "toString()" : 2647}},{ "className" : "org::jruby::ast::FCallManyArgsBlockNode" , "selectors" : { "FCallManyArgsBlockNode(ISourcePosition,String,Node,IterNode)" : 2}},{ "className" : "org::jruby::internal::runtime::methods::MethodMethod" , "selectors" : { "MethodMethod(RubyModule,RubyUnboundMethod,Visibility)" : 2}},{ "className" : "java::lang::ref::ReferenceQueue" , "selectors" : { "ReferenceQueue()" : 37 , "poll()" : 47 , "remove()" : 8}},{ "className" : "org::jruby::demo::ext::MethodMissing" , "selectors" : { "MethodMissing(Ruby,RubyClass)" : 1}},{ "className" : "org::jruby::ext::ffi::jffi::DefaultMethodFactory::Signed32Invoker" , "selectors" : { "Signed32Invoker()" : 1}},{ "className" : "org::jruby::runtime::callsite::RespondToCallSite" , "selectors" : { "RespondToCallSite()" : 1 , "checkVisibilityAndCache(CacheEntry,boolean,Ruby)" : 1 , "recacheRespondsTo(CacheEntry,String,RubyClass,boolean,ThreadContext)" : 2}},{ "className" : "org::jruby::javasupport::JavaClass::AssignedName" , "selectors" : { "AssignedName(String,Priority)" : 14}},{ "className" : "org::jruby::compiler::DAGBuilder::Pair" , "selectors" : { "Pair()" : 1 , "Pair(N)" : 1 , "Pair(N,N)" : 1 , "append(N)" : 7 , "append(N,N)" : 2 , "append(Pair)" : 4}},{ "className" : "org::jruby::lexer::yacc::StringTerm" , "selectors" : { "StringTerm(int,int,int)" : 16 , "parseRegexpFlags(LexerSource)" : 1 , "parseString(RubyYaccLexer,LexerSource)::ByteList" : 2}},{ "className" : "org::jruby::exceptions::JumpException::FlowControlException" , "selectors" : { "FlowControlException(int,Object)" : 2 , "getTarget()" : 10 , "getValue()" : 38}},{ "className" : "java_integration::fixtures::SingleMethodInterface" , "selectors" : { "callIt()" : 16}},{ "className" : "org::jruby::compiler::CompilerCallback" , "selectors" : { "call(BodyCompiler)" : 126}},{ "className" : "org::jruby::compiler::ir::instructions::ASSERT_METHOD_VERSION_Instr" , "selectors" : { "ASSERT_METHOD_VERSION_Instr(IR_Module,String,CodeVersion,Label)" : 1}},{ "className" : "org::jruby::ast::BreakNode" , "selectors" : { "BreakNode(ISourcePosition,Node)" : 4 , "getValueNode()" : 4}},{ "className" : "org::jruby::ext::ffi::jffi::FunctionInvoker" , "selectors" : { "invoke(???)" : 12}},{ "className" : "org::jruby::ast::NewlineNode" , "selectors" : { "NewlineNode(ISourcePosition,Node)" : 3 , "getNextNode()" : 15}},{ "className" : "org::jruby::Main::Status" , "selectors" : { "Status()" : 3 , "Status(int)" : 8 , "getStatus()" : 3 , "isExit()" : 1}},{ "className" : "java::lang::CharSequence" , "selectors" : { "charAt(int)" : 120 , "length()" : 239 , "subSequence(int,int)" : 58 , "toString()" : 250}},{ "className" : "org::jruby::javasupport::JavaClass::NamedInstaller" , "selectors" : { "NamedInstaller(String,int)" : 2 , "hasLocalMethod()" : 3 , "install(RubyModule)" : 3 , "isPublic()" : 2}},{ "className" : "org::jruby::internal::runtime::ValueAccessor" , "selectors" : { "ValueAccessor(IRubyObject)" : 12}},{ "className" : "java::nio::channels::FileLock" , "selectors" : { "channel()" : 5 , "isValid()" : 2 , "release()" : 17}},{ "className" : "org::jruby::ast::XStrNode" , "selectors" : { "XStrNode(???)" : 4 , "getValue(???)" : 3}},{ "className" : "org::jruby::ast::GlobalAsgnNode" , "selectors" : { "GlobalAsgnNode(ISourcePosition,String,Node)" : 2 , "getName()" : 14}},{ "className" : "org::jruby::ast::BlockPassNode" , "selectors" : { "BlockPassNode(ISourcePosition,Node)" : 2 , "getArgsNode()" : 5 , "getBodyNode()" : 5 , "setArgsNode(Node)" : 1}},{ "className" : "org::jruby::lexer::yacc::Token" , "selectors" : { "Token(Object,ISourcePosition)" : 103 , "Token(Object,int,ISourcePosition)" : 18 , "getPosition()" : 287 , "getType()" : 3 , "getValue()" : 148 , "parseStringIntoBuffer(???)" : 1}},{ "className" : "org::jruby::javasupport::JavaClass::InitializerState" , "selectors" : { "InitializerState(Ruby,Class)" : 1}},{ "className" : "org::jruby::javasupport::JavaEmbedUtils::EvalUnit" , "selectors" : { "run()" : 24}},{ "className" : "org::jruby::RubyThreadGroup" , "selectors" : { "RubyThreadGroup(Ruby,RubyClass)" : 2 , "addDirectly(RubyThread)" : 5 , "createThreadGroupClass(Ruby)" : 1 , "list(Block)" : 2 , "remove(RubyThread)" : 2}},{ "className" : "java::lang::NumberFormatException" , "selectors" : { "NumberFormatException()" : 60 , "NumberFormatException(String)" : 107}},{ "className" : "org::jruby::javasupport::test::TestIntWrapper" , "selectors" : { "getInteger()" : 1}},{ "className" : "org::jruby::util::io::PipeException" , "selectors" : { "PipeException()" : 3}},{ "className" : "org::jruby::ast::ZYieldNode" , "selectors" : { "ZYieldNode(ISourcePosition)" : 6}},{ "className" : "org::jruby::runtime::callsite::NormalCachingCallSite" , "selectors" : { "NormalCachingCallSite(String)" : 13 , "methodMissing(DynamicMethod,IRubyObject)" : 2}},{ "className" : "org::jruby::ast::MatchNode" , "selectors" : { "MatchNode(ISourcePosition,Node)" : 1 , "getRegexpNode()" : 3}},{ "className" : "org::jruby::java::proxies::RubyObjectHolderProxy" , "selectors" : { "__ruby_object()" : 1}},{ "className" : "org::jruby::embed::PropertyName" , "selectors" : { "toString()" : 6 , "values()" : 1}},{ "className" : "org::jruby::ast::DAsgnNode" , "selectors" : { "DAsgnNode(ISourcePosition,String,int,Node)" : 2 , "getDepth()" : 5 , "getIndex()" : 5 , "getName()" : 3}},{ "className" : "org::jruby::ast::SymbolNode" , "selectors" : { "SymbolNode(ISourcePosition,String)" : 3 , "getName()" : 9 , "getSymbol(Ruby)" : 1}},{ "className" : "org::jruby::management::BeanManagerImpl" , "selectors" : { "register(String,Object)" : 5 , "unregister(String)" : 5}},{ "className" : "java::nio::channels::Selector" , "selectors" : { "close()" : 26 , "isOpen()" : 7 , "keys()" : 17 , "open()" : 25 , "select()" : 13 , "select(long)" : 15 , "selectNow()" : 16 , "selectedKeys()" : 29 , "wakeup()" : 26}},{ "className" : "org::jruby::runtime::CallBlock" , "selectors" : { "CallBlock(RubyModule,Arity,BlockCallback,ThreadContext)" : 1 , "newCallClosure(IRubyObject,RubyModule,Arity,BlockCallback,ThreadContext)" : 9}},{ "className" : "org::jruby::compiler::ir::instructions::COPY_Instr" , "selectors" : { "COPY_Instr(Variable,Operand)" : 20}},{ "className" : "java_integration::fixtures::ReturnsInterface" , "selectors" : { "getRunnable()" : 1}},{ "className" : "org::jruby::management::ClassCache" , "selectors" : { "ClassCache(Ruby)" : 1}},{ "className" : "org::jruby::util::Join::Spec" , "selectors" : { "addReaction(Reaction)" : 12 , "createJoin()" : 1 , "createJoin(Executor)" : 1}},{ "className" : "org::jruby::runtime::component::VariableEntry<T>" , "selectors" : { "VariableEntry(String,BaseObjectType)" : 10}},{ "className" : "org::jruby::ext::ffi::jffi::FastLongMethodTwoArg" , "selectors" : { "FastLongMethodTwoArg(RubyModule,Function,LongResultConverter,LongParameterConverter[])" : 1 , "invoke(ThreadContext,IRubyObject,IRubyObject)" : 2}},{ "className" : "org::jruby::ast::NodeType" , "selectors" : { "alwaysFalse()" : 7 , "alwaysTrue()" : 7 , "isImmediate()" : 1}},{ "className" : "org::jruby::ast::LambdaNode" , "selectors" : { "LambdaNode(ISourcePosition,ArgsNode,Node,StaticScope)" : 1 , "getArgs()" : 3 , "getBody()" : 3}},{ "className" : "org::jruby::ast::ClassNode" , "selectors" : { "ClassNode(ISourcePosition,Colon3Node,StaticScope,Node,Node)" : 2 , "getBodyNode()" : 5 , "getCPath()" : 4 , "getScope()" : 1 , "getSuperNode()" : 3}},{ "className" : "org::jruby::RubyBoolean" , "selectors" : { "RubyBoolean(Ruby,boolean)" : 3 , "createFalseClass(Ruby)" : 1 , "createTrueClass(Ruby)" : 1 , "newBoolean(Ruby,boolean)" : 47}},{ "className" : "java::io::FileReader" , "selectors" : { "FileReader(File)" : 398 , "FileReader(FileDescriptor)" : 2 , "FileReader(String)" : 218 , "java" : 13}},{ "className" : "org::jruby::test::bench::BenchIntFibRecursive::BoxedInt" , "selectors" : { "BoxedInt(int)" : 6 , "lt(BoxedInt)" : 1 , "minus(BoxedInt)" : 2 , "plus(BoxedInt)" : 1}},{ "className" : "org::jruby::test::TestUnitTestSuite" , "selectors" : { "TestUnitTestSuite(String)" : 6}},{ "className" : "org::jruby::compiler::ir::instructions::ReceiveArgumentInstruction" , "selectors" : { "ReceiveArgumentInstruction(Variable,int)" : 4 , "ReceiveArgumentInstruction(Variable,int,boolean)" : 2}},{ "className" : "org::jruby::ast::MultipleAsgn19Node" , "selectors" : { "MultipleAsgn19Node(ISourcePosition,ListNode,Node,ListNode)" : 20 , "getPost()" : 4 , "getPostCount()" : 9 , "getPre()" : 10 , "getPreCount()" : 11 , "getRest()" : 9}},{ "className" : "org::jruby::ext::ffi::StructLayout::FunctionFieldIO" , "selectors" : { "FunctionFieldIO()" : 2}},{ "className" : "org::jruby::compiler::ir::instructions::OneOperandInstr" , "selectors" : { "OneOperandInstr(Operation,Variable,Operand)" : 10 , "getOperands()" : 2 , "simplifyOperands(Map<Operand,Operand>)" : 4}},{ "className" : "java::util::WeakHashMap<T>" , "selectors" : { "WeakHashMap()" : 57 , "WeakHashMap(int)" : 9}},{ "className" : "org::jruby::util::RubyDateFormat::Token" , "selectors" : { "Token(int)" : 61 , "Token(int,Object)" : 30 , "getData()" : 2 , "getFormat()" : 6}},{ "className" : "org::jruby::anno::JavaMethodDescriptor" , "selectors" : { "JavaMethodDescriptor(Method)" : 2 , "getDeclaringClass()" : 8 , "getParameterClasses()" : 2 , "getReturnClass()" : 1}},{ "className" : "org::jruby::RubyRange::StepBlockCallBack" , "selectors" : { "StepBlockCallBack(Block,IRubyObject,IRubyObject)" : 4 , "call(ThreadContext,IRubyObject)" : 1}},{ "className" : "org::jruby::runtime::load::LoadServiceResource" , "selectors" : { "LoadServiceResource(File,String)" : 1 , "LoadServiceResource(URL,String)" : 9 , "getAbsolutePath()" : 1 , "getInputStream()" : 2 , "getName()" : 7 , "getPath()" : 1 , "getURL()" : 4 , "isAbsolute()" : 1}},{ "className" : "org::jruby::ext::ffi::jffi::DefaultMethodFactory::Unsigned64Marshaller" , "selectors" : { "Unsigned64Marshaller()" : 1}},{ "className" : "org::jruby::util::collections::WeakHashSet" , "selectors" : { "WeakHashSet(int)" : 2 , "add(T)" : 1 , "contains(Object)" : 1}},{ "className" : "org::jruby::RubyProcess::GroupID" , "selectors" : { "eid(Ruby)" : 2 , "eid(Ruby,IRubyObject)" : 2 , "rid(Ruby)" : 2 , "switch_rb(ThreadContext,IRubyObject,Block)" : 1}},{ "className" : "org::jruby::ast::ArrayNode" , "selectors" : { "ArrayNode(ISourcePosition)" : 8 , "ArrayNode(ISourcePosition,Node)" : 11 , "interpretPrimitive(Ruby,ThreadContext,IRubyObject,Block)" : 7 , "isLightweight()" : 5 , "setLightweight(boolean)" : 8}},{ "className" : "org::jruby::RubySystemExit" , "selectors" : { "RubySystemExit(Ruby,RubyClass)" : 1 , "createSystemExitClass(Ruby,RubyClass)" : 1 , "newInstance(Ruby,int)" : 2}},{ "className" : "org::jruby::RubyGlobal::PostMatchGlobalVariable" , "selectors" : { "PostMatchGlobalVariable(Ruby,String)" : 1}},{ "className" : "org::jruby::RubyHash::BaseSet" , "selectors" : { "BaseSet(EntryView)" : 4}},{ "className" : "java::io::FileDescriptor" , "selectors" : { "FileDescriptor()" : 22 , "sync()" : 27 , "valid()" : 7}},{ "className" : "java::math::MathContext" , "selectors" : { "MathContext(int,RoundingMode)" : 9 , "getPrecision()" : 1}},{ "className" : "org::jruby::ext::JRubyPOSIXHandler" , "selectors" : { "JRubyPOSIXHandler(Ruby)" : 1}},{ "className" : "org::jruby::util::SafePropertyAccessor" , "selectors" : { "getBoolean(String)" : 17 , "getBoolean(String,boolean)" : 23 , "getInt(String,int)" : 5 , "getProperty(String)" : 22 , "getProperty(String,String)" : 11 , "isSecurityProtected(String)" : 1}},{ "className" : "org::jruby::runtime::assigner::Pre0Rest1Post0Assigner" , "selectors" : { "Pre0Rest1Post0Assigner(Node)" : 1}},{ "className" : "org::jruby::ast::FCallThreeArgNode" , "selectors" : { "FCallThreeArgNode(ISourcePosition,String,ArrayNode)" : 1}},{ "className" : "org::jruby::RubySystemCallError" , "selectors" : { "RubySystemCallError(Ruby,RubyClass)" : 1 , "createSystemCallErrorClass(Ruby,RubyClass)" : 1}},{ "className" : "org::jruby::RubyClassPathVariable" , "selectors" : { "RubyClassPathVariable(Ruby)" : 1 , "createClassPathVariable(Ruby)" : 1 , "getURL(String)" : 1}},{ "className" : "org::jruby::javasupport::test::JavaSupportTestSuite" , "selectors" : { "suite()::TestSuite" : 3 , "suite(???)" : 1}},{ "className" : "org::jruby::compiler::ir::instructions::BUILD_CLOSURE_Instr" , "selectors" : { "BUILD_CLOSURE_Instr(Variable,IR_Closure)" : 2 , "getClosure()" : 1}},{ "className" : "org::jruby::runtime::load::LoadService::AlreadyLoaded" , "selectors" : { "AlreadyLoaded(RubyString)" : 1}},{ "className" : "org::jruby::embed::ScriptingContainerTest" , "selectors" : { "getNextYear()" : 3}},{ "className" : "org::jruby::runtime::CompiledBlockCallback19" , "selectors" : { "call(ThreadContext,IRubyObject,IRubyObject[],Block)" : 3}},{ "className" : "java::io::FileNotFoundException" , "selectors" : { "FileNotFoundException()" : 16 , "FileNotFoundException(String)" : 253 , "java" : 7}},{ "className" : "org::jruby::javasupport::JavaArrayUtilities" , "selectors" : { "bytes_to_ruby_string(IRubyObject,IRubyObject)" : 1 , "bytes_to_ruby_string(IRubyObject,IRubyObject)::ByteList" : 1 , "createJavaArrayUtilitiesModule(Ruby)" : 1 , "ruby_string_to_bytes(IRubyObject,IRubyObject)" : 1}},{ "className" : "org::jruby::runtime::Binding" , "selectors" : { "Binding(Frame,RubyModule,DynamicScope,String,int)" : 2 , "Binding(IRubyObject,Frame,Visibility,RubyModule,DynamicScope,String,int)" : 7 , "clone()" : 7 , "clone(Visibility)" : 1 , "equals(Object)" : 1 , "getDummyScope(StaticScope)" : 2 , "getDynamicScope()" : 4 , "getFile()" : 3 , "getFrame()" : 35 , "getKlass()" : 2 , "getLine()" : 3 , "getSelf()" : 6 , "getVisibility()" : 4 , "setFile(String)" : 2 , "setLine(int)" : 2 , "setSelf(IRubyObject)" : 3 , "setVisibility(Visibility)" : 6}},{ "className" : "org::jruby::java::proxies::ArrayJavaProxy" , "selectors" : { "ArrayJavaProxy(Ruby,RubyClass)" : 6 , "createArrayJavaProxy(ThreadContext)" : 1 , "getJavaArray()" : 23 , "getRange(ThreadContext,IRubyObject)" : 2 , "getRange(ThreadContext,IRubyObject,IRubyObject)" : 1 , "getRange(ThreadContext,IRubyObject[])" : 1}},{ "className" : "org::jruby::ext::ffi::jffi::FastIntMethodTwoArg" , "selectors" : { "FastIntMethodTwoArg(RubyModule,Function,IntResultConverter,IntParameterConverter[])" : 1 , "invoke(ThreadContext,IRubyObject,IRubyObject)" : 2}},{ "className" : "org::jruby::runtime::load::LoadService::BailoutSearcher" , "selectors" : { "BailoutSearcher()" : 1}},{ "className" : "org::jruby::ext::socket::RubyUNIXSocket::UnixDomainSocketChannel" , "selectors" : { "UnixDomainSocketChannel(Ruby,int)" : 1}},{ "className" : "org::jruby::compiler::ir::instructions::LINE_NUM_Instr" , "selectors" : { "LINE_NUM_Instr(int)" : 1}},{ "className" : "org::jruby::ast::ToAryNode" , "selectors" : { "ToAryNode(ISourcePosition,Node)" : 2 , "getValue()" : 3}},{ "className" : "org::jruby::util::IOInputStream" , "selectors" : { "IOInputStream(IRubyObject)" : 4 , "read()" : 1 , "read(byte[])" : 1 , "read(byte[],int,int)" : 1}},{ "className" : "org::jruby::ext::ffi::jffi::FastIntMethodFactory::StrptrResultConverter" , "selectors" : { "StrptrResultConverter()" : 1}},{ "className" : "org::jruby::javasupport::test::RubyTestCase" , "selectors" : { "RubyTestCase(String)" : 1 , "initRuby(Ruby)" : 1 , "setUp(???)" : 1 , "tearDown(???)" : 1}},{ "className" : "org::jruby::ext::ffi::jffi::IntResultConverter" , "selectors" : { "fromNative(ThreadContext,int)" : 11}},{ "className" : "org::jruby::compiler::ir::operands::NthRef" , "selectors" : { "NthRef(int)" : 1}},{ "className" : "org::jruby::ast::VCallNode" , "selectors" : { "VCallNode(ISourcePosition,String)" : 1 , "getName()" : 6}},{ "className" : "org::jruby::ast::Match2Node" , "selectors" : { "Match2Node(ISourcePosition,Node,Node)" : 2 , "getReceiverNode()" : 3 , "getValueNode()" : 3}},{ "className" : "org::jruby::ast::DSymbolNode" , "selectors" : { "DSymbolNode(ISourcePosition)" : 2 , "DSymbolNode(ISourcePosition,DStrNode)" : 2}},{ "className" : "org::jruby::ast::YieldOneNode" , "selectors" : { "YieldOneNode(ISourcePosition,ArrayNode)" : 1 , "YieldOneNode(ISourcePosition,FixnumNode)" : 1}},{ "className" : "org::jruby::runtime::encoding::EncodingCapable" , "selectors" : { "getEncoding(???)" : 4}},{ "className" : "org::jruby::compiler::ir::operands::SelfVariable" , "selectors" : { "SelfVariable()" : 1 , "equals(Object)" : 1 , "isSelf()" : 1}},{ "className" : "org::jruby::javasupport::util::ObjectProxyCache::WeakEntryRef" , "selectors" : { "WeakEntryRef(int,T,ReferenceQueue<Object>)" : 2}},{ "className" : "org::jruby::ext::ffi::Platform::Supported" , "selectors" : { "Supported(OS)" : 4}},{ "className" : "org::jruby::RubyGlobal::PreMatchGlobalVariable" , "selectors" : { "PreMatchGlobalVariable(Ruby,String)" : 1}},{ "className" : "org::jruby::RubyDigest::Metadata" , "selectors" : { "Metadata(String,int)" : 6 , "getBlockLength()" : 1 , "getName()" : 1}},{ "className" : "javax::script::ScriptException" , "selectors" : { "ScriptException(Exception)" : 7 , "ScriptException(String)" : 1}},{ "className" : "org::jruby::ast::NextNode" , "selectors" : { "NextNode(ISourcePosition,Node)" : 4 , "getValueNode()" : 5}},{ "className" : "org::jruby::ext::ffi::jffi::CodeMemoryIO" , "selectors" : { "CodeMemoryIO(Ruby,Pointer)" : 2 , "CodeMemoryIO(Ruby,long)" : 2}},{ "className" : "org::jruby::RubyContinuation::Continuation" , "selectors" : { "Continuation()" : 1 , "Continuation(String)" : 1}},{ "className" : "org::jruby::compiler::ir::operands::MetaObject" , "selectors" : { "MetaObject(IR_Scope)" : 25}},{ "className" : "org::jruby::embed::FooArU" , "selectors" : { "askPolitely()" : 1}},{ "className" : "org::jruby::runtime::ObjectSpace::IdReference" , "selectors" : { "IdReference(IRubyObject,long,ReferenceQueue)" : 1 , "id()" : 1}},{ "className" : "java::math::BigInteger" , "selectors" : { "BigInteger(String)" : 199 , "BigInteger(String,int)" : 55 , "BigInteger(byte[])" : 39 , "BigInteger(int,Random)" : 14 , "BigInteger(int,byte[])" : 52 , "BigInteger(int,int,Random)" : 4 , "abs()" : 15 , "add(BigInteger)" : 101 , "and(BigInteger)" : 7 , "bitCount()" : 2 , "bitLength()" : 52 , "clearBit(int)" : 1 , "compareTo(BigInteger)" : 128 , "divide(BigInteger)" : 22 , "divideAndRemainder(BigInteger)" : 10 , "doubleValue()" : 4 , "equals(Object)" : 125 , "floatValue()" : 1 , "gcd(BigInteger)" : 3 , "getLowestSetBit()" : 1 , "hashCode()" : 7 , "intValue()" : 67 , "isProbablePrime(int)" : 11 , "java" : 58 , "longValue()" : 39 , "max(BigInteger)" : 1 , "mod(BigInteger)" : 51 , "modInverse(BigInteger)" : 8 , "modPow(BigInteger,BigInteger)" : 25 , "multiply(BigInteger)" : 105 , "negate()" : 24 , "not()" : 1 , "or(BigInteger)" : 1936 , "pow(int)" : 9 , "remainder(BigInteger)" : 8 , "setBit(int)" : 3 , "shiftLeft(int)" : 201 , "shiftRight(int)" : 31 , "signum()" : 51 , "subtract(BigInteger)" : 82 , "testBit(int)" : 17 , "toByteArray()" : 91 , "toString()" : 62 , "toString(int)" : 31 , "valueOf(long)" : 492 , "xor(BigInteger)" : 2}},{ "className" : "org::jruby::ast::LiteralNode" , "selectors" : { "LiteralNode(Token)" : 4 , "getName()" : 2}},{ "className" : "org::jruby::ext::ffi::Platform::Linux" , "selectors" : { "Linux()" : 1}},{ "className" : "org::jruby::javasupport::proxy::JavaProxyMethod" , "selectors" : { "getName()" : 2 , "getReturnType()" : 5 , "getSuperMethod()" : 7 , "hasSuperImplementation()" : 7}},{ "className" : "org::jruby::util::SignalFacade" , "selectors" : { "trap(IRubyObject,IRubyObject,IRubyObject)" : 1 , "trap(Ruby,BlockCallback,String)" : 1}},{ "className" : "org::jruby::exceptions::ThreadKill" , "selectors" : { "ThreadKill()" : 2}},{ "className" : "org::jruby::compiler::ir::compiler_pass::CFG_Builder" , "selectors" : { "CFG_Builder()" : 2}},{ "className" : "java::lang::StackTraceElement" , "selectors" : { "StackTraceElement(String,String,String,int)" : 54 , "equals(Object)" : 3 , "getClassName()" : 82 , "getFileName()" : 17 , "getLineNumber()" : 33 , "getMethodName()" : 64 , "isNativeMethod()" : 1 , "toString()" : 39}},{ "className" : "org::jruby::compiler::ir::instructions::BEQ_Instr" , "selectors" : { "BEQ_Instr(Operand,Operand,Label)" : 12}},{ "className" : "org::jruby::parser::ParserSyntaxException" , "selectors" : { "ParserSyntaxException(String,String[])" : 4}},{ "className" : "org::jruby::internal::runtime::methods::JittedMethod" , "selectors" : { "JittedMethod(RubyModule,StaticScope,Script,CallConfiguration,Visibility,Arity,ISourcePosition,DefaultMethod)" : 2 , "getArity()" : 1 , "post(Ruby,ThreadContext,String)" : 10 , "pre(ThreadContext,IRubyObject,String,Block,int)" : 10}},{ "className" : "org::jruby::runtime::GlobalVariable" , "selectors" : { "GlobalVariable(Ruby,String,IRubyObject)" : 22 , "get()" : 8 , "name()" : 5 , "set(IRubyObject)" : 5 , "variableName(String)" : 3}},{ "className" : "org::jruby::ext::ffi::jffi::FastLongMethodFactory::Signed64ParameterConverter" , "selectors" : { "Signed64ParameterConverter()" : 1}},{ "className" : "org::jruby::compiler::ir::dataflow::DataFlowConstants::LatticeBottom" , "selectors" : { "LatticeBottom()" : 1}},{ "className" : "org::jruby::util::collections::IntHashMap::EntryIterator" , "selectors" : { "EntryIterator()" : 1}},{ "className" : "org::jruby::compiler::ArgumentsCallback" , "selectors" : { "getArity()" : 24}},{ "className" : "org::jruby::compiler::ir::compiler_pass::DominatorTreeBuilder" , "selectors" : { "DominatorTreeBuilder()" : 2}},{ "className" : "org::jruby::compiler::ir::instructions::RUBY_INTERNALS_CALL_Instr" , "selectors" : { "RUBY_INTERNALS_CALL_Instr(Variable,Operand,Operand[])" : 1 , "RUBY_INTERNALS_CALL_Instr(Variable,Operand,Operand[],Operand)" : 3}},{ "className" : "org::jruby::ast::BackRefNode" , "selectors" : { "BackRefNode(ISourcePosition,int)" : 1 , "getType()" : 7}},{ "className" : "org::jruby::util::KCode" , "selectors" : { "KCode(String,String,int)" : 5 , "create(Ruby,String)" : 3 , "getEncoding(???)" : 20 , "kcode(Ruby)" : 1 , "name()" : 4}},{ "className" : "org::jruby::ast::GlobalVarNode" , "selectors" : { "GlobalVarNode(ISourcePosition,String)" : 8 , "getName()" : 9}},{ "className" : "org::jruby::ext::ffi::jffi::FastLongMethodFactory::Unsigned64ResultConverter" , "selectors" : { "Unsigned64ResultConverter()" : 1}},{ "className" : "org::jruby::ext::ffi::DirectMemoryIO" , "selectors" : { "getAddress()" : 14}},{ "className" : "org::jruby::ext::Readline::RubyFileNameCompletor" , "selectors" : { "RubyFileNameCompletor()" : 1}},{ "className" : "org::jruby::compiler::ir::instructions::RECV_CLOSURE_ARG_Instr" , "selectors" : { "RECV_CLOSURE_ARG_Instr(Variable,int,boolean)" : 8}},{ "className" : "org::jruby::ast::IfNode" , "selectors" : { "IfNode(ISourcePosition,Node,Node,Node)" : 12 , "getCondition()" : 4 , "getElseBody()" : 9 , "getThenBody()" : 9}},{ "className" : "org::jruby::runtime::callsite::SuperCallSite::SuperTuple" , "selectors" : { "SuperTuple(String,CacheEntry)" : 11 , "cacheOk(String,RubyClass)" : 10}},{ "className" : "org::jruby::embed::variable::BiVariable" , "selectors" : { "getJavaObject()" : 8 , "getName()" : 4 , "getOrigin()" : 1 , "getRubyObject()" : 2 , "getType()" : 4 , "inject(Ruby,IRubyObject)" : 1 , "remove(Ruby)" : 2 , "setJavaObject(Ruby,Object)" : 2 , "setRubyObject(IRubyObject)" : 8}},{ "className" : "org::jruby::util::unsafe::Unsafe" , "selectors" : { "throwException(Throwable)" : 7}},{ "className" : "org::jruby::util::unsafe::UnsafeFactory" , "selectors" : { "getUnsafe()" : 7 , "loadUnsafe()" : 1}},{ "className" : "org::jruby::internal::runtime::methods::JavaMethod::JavaMethodNBlock" , "selectors" : { "JavaMethodNBlock(RubyModule,Visibility)" : 5 , "JavaMethodNBlock(RubyModule,Visibility,CallConfiguration)" : 6}},{ "className" : "org::jruby::runtime::assigner::Pre2Rest1Post0BlockAssigner" , "selectors" : { "Pre2Rest1Post0BlockAssigner(Node,Node,Node,Node)" : 1 , "assign(Ruby,ThreadContext,IRubyObject,Block)" : 2 , "assign(Ruby,ThreadContext,IRubyObject,IRubyObject,Block)" : 2 , "assign(Ruby,ThreadContext,IRubyObject,IRubyObject,IRubyObject,Block)" : 2 , "assign(Ruby,ThreadContext,IRubyObject,IRubyObject,IRubyObject,IRubyObject,Block)" : 2}},{ "className" : "org::jruby::compiler::ir::instructions::LABEL_Instr" , "selectors" : { "LABEL_Instr(Label)" : 23}},{ "className" : "org::jruby::RubyRuntimeAdapter" , "selectors" : { "eval(Ruby,String)" : 7 , "parse(Ruby,InputStream,String,int)" : 1 , "parse(Ruby,String,String,int)" : 4}},{ "className" : "java::lang::ref::SoftReference<T>" , "selectors" : { "SoftReference(T)" : 29}},{ "className" : "java::nio::Buffer" , "selectors" : { "capacity()" : 80 , "clear()" : 91 , "flip()" : 139 , "hasRemaining()" : 116 , "isReadOnly()" : 3 , "limit()" : 145 , "limit(int)" : 151 , "mark()" : 9 , "position()" : 252 , "position(int)" : 201 , "remaining()" : 279 , "reset()" : 11 , "rewind()" : 32}},{ "className" : "org::jruby::runtime::scope::TwoVarDynamicScope" , "selectors" : { "TwoVarDynamicScope(StaticScope)" : 1 , "TwoVarDynamicScope(StaticScope,DynamicScope)" : 3 , "getValue(int,int)" : 1}},{ "className" : "org::jruby::ast::NotNode" , "selectors" : { "NotNode(ISourcePosition,Node)" : 6 , "getConditionNode()" : 3}},{ "className" : "org::jruby::internal::runtime::methods::JavaMethod::JavaMethodZeroOrN" , "selectors" : { "JavaMethodZeroOrN(RubyModule,Visibility)" : 2 , "JavaMethodZeroOrN(RubyModule,Visibility,CallConfiguration)" : 2 , "call(ThreadContext,IRubyObject,RubyModule,String)" : 5}},{ "className" : "org::jruby::ast::ModuleNode" , "selectors" : { "ModuleNode(ISourcePosition,Colon3Node,StaticScope,Node)" : 2 , "getBodyNode()" : 5 , "getCPath()" : 5 , "getScope()" : 1}},{ "className" : "org::jruby::compiler::ir::IR_Script" , "selectors" : { "IR_Script(String,String)" : 1 , "getFileName()" : 2 , "getRootClass()" : 2}},{ "className" : "org::jruby::ast::SClassNode" , "selectors" : { "SClassNode(ISourcePosition,Node,StaticScope,Node)" : 2 , "getBodyNode()" : 5 , "getReceiverNode()" : 3 , "getScope()" : 1}},{ "className" : "org::jruby::ast::InstVarNode" , "selectors" : { "InstVarNode(ISourcePosition,String)" : 4 , "getName()" : 5 , "warnAboutUninitializedIvar(Ruby)" : 1}},{ "className" : "org::jruby::compiler::ir::instructions::JUMP_Instr" , "selectors" : { "JUMP_Instr(Label)" : 11 , "getJumpTarget()" : 2}},{ "className" : "org::jruby::runtime::ObjectAllocator" , "selectors" : { "allocate(Ruby,RubyClass)" : 1}},{ "className" : "org::jruby::test::AlphaSingleton" , "selectors" : { "AlphaSingleton()" : 1}},{ "className" : "org::jruby::ast::AssignableNode" , "selectors" : { "AssignableNode(ISourcePosition)" : 2 , "AssignableNode(ISourcePosition,Node)" : 7 , "getValueNode()" : 58 , "setValueNode(Node)" : 24}},{ "className" : "org::jruby::internal::runtime::methods::WrapperMethod" , "selectors" : { "WrapperMethod(RubyModule,DynamicMethod,Visibility)" : 5}},{ "className" : "org::jruby::compiler::impl::ChildScopedBodyCompiler" , "selectors" : { "ChildScopedBodyCompiler(StandardASMCompiler,String,ASTInspector,StaticScope)" : 6 , "beginMethod(CompilerCallback,StaticScope)" : 5 , "beginMethod(CompilerCallback,StaticScope)::Label" : 1 , "endBody()" : 5 , "getSignature()" : 1}},{ "className" : "org::jruby::compiler::ir::instructions::CASE_Instr" , "selectors" : { "CASE_Instr(Variable,Operand,Label)" : 1 , "setElse(Label)" : 1 , "setLabels(List<Label>)" : 1 , "setVariables(List<Operand>)" : 1}},{ "className" : "org::jruby::javasupport::JavaClass::ConstantField" , "selectors" : { "ConstantField(Field)" : 2 , "install(RubyModule)" : 2 , "isConstant(Field)" : 2}},{ "className" : "org::jruby::ast::java_signature::ArrayTypeNode" , "selectors" : { "ArrayTypeNode()" : 2 , "ArrayTypeNode(TypeNode)" : 2 , "setTypeForArray(TypeNode)" : 5}},{ "className" : "org::jruby::ast::ZSuperNode" , "selectors" : { "ZSuperNode(ISourcePosition)" : 2 , "getIterNode()" : 3}},{ "className" : "org::jruby::internal::runtime::RubyRunnable" , "selectors" : { "RubyRunnable(RubyThread,IRubyObject[],Frame[],Block)" : 1 , "getJavaThread()" : 2 , "run()" : 1}},{ "className" : "org::jruby::javasupport::JavaEmbedUtils" , "selectors" : { "createClassCache(ClassLoader)" : 1 , "initialize(List)" : 3 , "initialize(List,ClassCache)" : 2 , "initialize(List,RubyInstanceConfig)" : 3 , "invokeMethod(Ruby,Object,String,Object[],Class)" : 2 , "javaToRuby(Ruby,Object)" : 16 , "newObjectAdapter()" : 1 , "newRuntimeAdapter()" : 5 , "rubyToJava(IRubyObject)" : 18 , "rubyToJava(Ruby,IRubyObject,Class)" : 6 , "terminate(Ruby)" : 3}},{ "className" : "org::jruby::ext::ffi::StructLayout::ScalarFieldIO" , "selectors" : { "ScalarFieldIO(Type)" : 2}},{ "className" : "org::jruby::exceptions::JumpException::NextJump" , "selectors" : { "JumpException" : 3}},{ "className" : "org::jruby::demo::TextAreaReadline::Input" , "selectors" : { "Input()" : 1 , "read(byte[],int,int)" : 1}},{ "className" : "org::jruby::compiler::ir::CodeVersion::MethodCodeVersion" , "selectors" : { "MethodCodeVersion()" : 1}},{ "className" : "org::jruby::javasupport::util::ObjectProxyCache::EntryRef" , "selectors" : { "get()" : 8 , "hash()" : 1}},{ "className" : "org::jruby::compiler::ir::instructions::IS_TRUE_Instr" , "selectors" : { "IS_TRUE_Instr(Variable,Operand)" : 4}},{ "className" : "org::jruby::runtime::assigner::Pre0Rest0Post0Assigner" , "selectors" : { "Pre0Rest0Post0Assigner()" : 2}},{ "className" : "org::jruby::parser::BlockStaticScope" , "selectors" : { "BlockStaticScope(StaticScope)" : 2 , "BlockStaticScope(StaticScope,String[])" : 6 , "addAssign(ISourcePosition,String,Node)" : 1}},{ "className" : "org::jruby::util::JRubyNonExistentFile" , "selectors" : { "JRubyNonExistentFile()" : 1 , "createTempFile(String,String)" : 1}},{ "className" : "org::jruby::runtime::Frame" , "selectors" : { "Frame()" : 3 , "Frame(Frame)" : 1 , "clear()" : 1 , "duplicate()" : 2 , "duplicateForBacktrace()" : 1 , "getBlock()" : 11 , "getFile()" : 13 , "getJumpTarget()" : 3 , "getKlazz()" : 5 , "getLine()" : 13 , "getName()" : 11 , "getSelf()" : 3 , "getVisibility()" : 20 , "isBindingFrame()" : 2 , "setFileAndLine(String,int)" : 1 , "setIsBindingFrame(boolean)" : 2 , "setKlazz(RubyModule)" : 1 , "setName(String)" : 1 , "setSelf(IRubyObject)" : 12 , "setVisibility(Visibility)" : 13 , "updateFrame(Frame)" : 1 , "updateFrame(RubyModule,IRubyObject,String,Block,String,int,int)" : 2 , "updateFrame(String,String,int)" : 1 , "updateFrame(String,int)" : 1 , "updateFrameForEval(IRubyObject,String,int,int)" : 1}},{ "className" : "org::jruby::RubyLocalJumpError::Reason" , "selectors" : { "toString()" : 1}},{ "className" : "org::jruby::ext::socket::RubyIPSocket" , "selectors" : { "RubyIPSocket(Ruby,RubyClass)" : 3 , "addr(ThreadContext)" : 1 , "addrFor(ThreadContext,InetSocketAddress)" : 2 , "createIPSocket(Ruby)" : 1 , "getaddress(ThreadContext,IRubyObject,IRubyObject)" : 1 , "peeraddr(ThreadContext)" : 1 , "sockerr(Ruby,String)" : 23}},{ "className" : "java::util::concurrent::Future" , "selectors" : { "cancel(boolean)" : 64 , "get()" : 46 , "get(long,TimeUnit)" : 22 , "isCancelled()" : 37 , "isDone()" : 62}},{ "className" : "org::jruby::util::ClassCache::OneShotClassLoader" , "selectors" : { "OneShotClassLoader(ClassLoader)" : 2 , "defineClass(String,byte[])" : 2}},{ "className" : "org::jruby::internal::runtime::methods::SynchronizedDynamicMethod" , "selectors" : { "SynchronizedDynamicMethod(DynamicMethod)" : 2}},{ "className" : "org::jruby::compiler::ir::operands::Array" , "selectors" : { "Array()" : 2 , "Array(List<Operand>)" : 1 , "Array(Operand[])" : 4 , "fetchCompileTimeArrayElement(int,boolean)" : 2 , "isBlank()" : 1}},{ "className" : "org::jruby::ast::BeginNode" , "selectors" : { "BeginNode(ISourcePosition,Node)" : 2 , "getBodyNode()" : 8}},{ "className" : "org::jruby::runtime::callback::InvocationCallback" , "selectors" : { "call(Object,Object[],Block)" : 1 , "getTarget()" : 2 , "setArgumentTypes(Class[])" : 16 , "setArity(Arity)" : 20 , "setJavaName(String)" : 20 , "setSingleton(boolean)" : 10}},{ "className" : "org::jruby::java::proxies::ConcreteJavaProxy" , "selectors" : { "ConcreteJavaProxy(Ruby,RubyClass)" : 1 , "createConcreteJavaProxy(ThreadContext)" : 1 , "createConcreteJavaProxy(ThreadContext)::anonymous(org" : 10}},{ "className" : "org::jruby::RubyGlobal::LoadPath" , "selectors" : { "LoadPath(Ruby,String)" : 3}},{ "className" : "org::jruby::ast::ZArrayNode" , "selectors" : { "ZArrayNode(ISourcePosition)" : 6}},{ "className" : "org::jruby::javasupport::bsf::JRubyEngine" , "selectors" : { "printException(Ruby,Exception)" : 1}},{ "className" : "org::jruby::libraries::FiberLibrary::Fiber" , "selectors" : { "Fiber(Ruby,RubyClass)" : 1}},{ "className" : "org::jruby::runtime::load::LoadService::SearchState" , "selectors" : { "SearchState(String)" : 2 , "prepareLoadSearch(String)" : 1 , "prepareRequireSearch(String)" : 1}},{ "className" : "org::jruby::embed::jsr223::Utils" , "selectors" : { "getLineNumber(ScriptEngine)" : 7}},{ "className" : "org::jruby::compiler::ir::instructions::PUT_Instr" , "selectors" : { "PUT_Instr(Operation,Operand,String,Operand)" : 6 , "getOperands()" : 3}},{ "className" : "java::util::Set" , "selectors" : { "add(E)" : 6382 , "addAll(Collection<? extends E>)" : 722 , "clear()" : 414 , "contains(Object)" : 2916 , "containsAll(Collection<?>)" : 102 , "equals(Object)" : 266 , "hashCode()" : 60 , "isEmpty()" : 695 , "iterator()" : 4555 , "remove(Object)" : 948 , "removeAll(Collection<?>)" : 145 , "retainAll(Collection<?>)" : 68 , "size()" : 2605 , "toArray()" : 190 , "toArray(T[])" : 357}},{ "className" : "org::jruby::ext::ffi::jffi::Function" , "selectors" : { "Function(???)" : 3 , "createDynamicMethod(RubyModule)" : 1 , "createFunctionClass(Ruby,RubyModule)" : 1}},{ "className" : "org::jruby::javasupport::JavaField" , "selectors" : { "JavaField(Ruby,Field)" : 5 , "createJavaFieldClass(Ruby,RubyModule)" : 1}},{ "className" : "org::jruby::java::proxies::InterfaceJavaProxy" , "selectors" : { "InterfaceJavaProxy(Ruby,RubyClass)" : 1 , "createInterfaceJavaProxy(ThreadContext)" : 1}},{ "className" : "org::jruby::java::invokers::MethodInvoker" , "selectors" : { "MethodInvoker(RubyModule,List<Method>)" : 2 , "MethodInvoker(RubyModule,Method)" : 2}},{ "className" : "org::jruby::ast::SuperNode" , "selectors" : { "SuperNode(ISourcePosition,Node)" : 1 , "SuperNode(ISourcePosition,Node,Node)" : 2 , "getArgsNode()" : 4 , "getIterNode()" : 4}},{ "className" : "org::jruby::RubyGlobal::LastlineGlobalVariable" , "selectors" : { "LastlineGlobalVariable(Ruby,String)" : 1}},{ "className" : "org::jruby::ast::AttrAssignTwoArgNode" , "selectors" : { "AttrAssignTwoArgNode(ISourcePosition,Node,String,ArrayNode)" : 3}},{ "className" : "org::jruby::compiler::ir::instructions::THREAD_POLL_Instr" , "selectors" : { "THREAD_POLL_Instr()" : 7}},{ "className" : "org::jruby::JRubyApplet" , "selectors" : { "blockToProc(Ruby,Block)" : 4 , "getBooleanParameter(String,boolean)" : 2 , "getCodeResourceAsStream(String)" : 1 , "invokeCallback(RubyProc,IRubyObject[])" : 3 , "paint(Graphics)" : 1 , "paintBuffered(Graphics)" : 1 , "paintUnbuffered(Graphics)" : 2 , "safeInvokeAndWait(Runnable)" : 2}},{ "className" : "org::jruby::ast::UntilNode" , "selectors" : { "UntilNode(ISourcePosition,Node,Node)" : 2 , "UntilNode(ISourcePosition,Node,Node,boolean)" : 5 , "evaluateAtStart()" : 4 , "getBodyNode()" : 4 , "getConditionNode()" : 5}},{ "className" : "org::jruby::ext::ffi::TypeSizeMapper" , "selectors" : { "callTypeSize(ThreadContext,RubyModule,IRubyObject)" : 1 , "getTypeSize(IRubyObject)" : 2 , "getTypeSize(ThreadContext,IRubyObject)" : 1}},{ "className" : "org::jruby::RubyYielder" , "selectors" : { "RubyYielder(Ruby,RubyClass)" : 1 , "checkInit()" : 1 , "createYielderClass(Ruby)" : 1}},{ "className" : "org::jruby::runtime::load::LoadService::SuffixType" , "selectors" : { "getSuffixes()" : 9}},{ "className" : "org::jruby::ast::CallSpecialArgNode" , "selectors" : { "CallSpecialArgNode(ISourcePosition,Node,String,Node)" : 1}},{ "className" : "org::jruby::ast::OpAsgnNode" , "selectors" : { "OpAsgnNode(ISourcePosition,Node,Node,String,String)" : 12 , "getOperatorName()" : 9 , "getReceiverNode()" : 5 , "getValueNode()" : 5 , "getVariableName()" : 4 , "getVariableNameAsgn()" : 4}},{ "className" : "org::jruby::ast::StarNode" , "selectors" : { "StarNode(ISourcePosition)" : 13}},{ "className" : "org::jruby::util::collections::IntHashMap::ValueIterator" , "selectors" : { "ValueIterator()" : 1}},{ "className" : "org::jruby::parser::LocalStaticScope" , "selectors" : { "LocalStaticScope(StaticScope)" : 5 , "LocalStaticScope(StaticScope,String[])" : 4}},{ "className" : "java::lang::UnsatisfiedLinkError" , "selectors" : { "UnsatisfiedLinkError(String)" : 5}},{ "className" : "java::lang::reflect::AccessibleObject" , "selectors" : { "getAnnotation(Class<T>)" : 8 , "getAnnotations()" : 36 , "getDeclaredAnnotations()" : 3 , "isAccessible()" : 47 , "isAnnotationPresent(Class<? extends Annotation>)" : 123 , "setAccessible(AccessibleObject[],boolean)" : 5 , "setAccessible(boolean)" : 257}},{ "className" : "javax::script::ScriptContext" , "selectors" : { "getAttribute(String)" : 3 , "getAttribute(String,int)" : 1 , "getBindings(int)" : 3 , "getErrorWriter()" : 1 , "getWriter()" : 4 , "setAttribute(String,Object,int)" : 11 , "setBindings(Bindings,int)" : 6 , "setErrorWriter(Writer)" : 3 , "setWriter(Writer)" : 10}},{ "className" : "org::jruby::javasupport::ParameterTypes" , "selectors" : { "getParameterTypes()" : 6 , "isVarArgs()" : 2}},{ "className" : "org::jruby::ast::ClassVarAsgnNode" , "selectors" : { "ClassVarAsgnNode(ISourcePosition,String,Node)" : 2 , "getName()" : 6}},{ "className" : "java::io::EOFException" , "selectors" : { "EOFException()" : 145 , "EOFException(String)" : 79}},{ "className" : "org::jruby::compiler::ir::instructions::GET_Instr" , "selectors" : { "GET_Instr(Operation,Variable,Operand,String)" : 6 , "getOperands()" : 2 , "simplifyOperands(Map<Operand,Operand>)" : 1}},{ "className" : "org::jruby::RubyJRuby::JRubyClassExtensions" , "selectors" : { "getAnnoClass(ThreadContext,Object)" : 4 , "getRubyClass(IRubyObject,ThreadContext)" : 4}},{ "className" : "org::jruby::util::IOOutputStream" , "selectors" : { "IOOutputStream(IRubyObject)" : 4 , "IOOutputStream(IRubyObject,boolean,boolean)" : 2 , "write(byte[],int,int)" : 1 , "write(byte[],int,int)::ByteList" : 1 , "write(int)::ByteList" : 1}},{ "className" : "org::jruby::ext::ffi::jffi::DefaultMethodFactory::Unsigned32Invoker" , "selectors" : { "Unsigned32Invoker()" : 1}},{ "className" : "org::jruby::compiler::ir::dataflow::DataFlowConstants::LatticeTop" , "selectors" : { "LatticeTop()" : 1}},{ "className" : "org::jruby::internal::runtime::GlobalVariable" , "selectors" : { "GlobalVariable(IAccessor)" : 3 , "addTrace(RubyProc)" : 1 , "getAccessor()" : 3 , "isTracing()" : 1 , "newUndefined(Ruby,String)" : 1 , "removeTrace(IRubyObject)" : 1 , "removeTraces()" : 1 , "setAccessor(IAccessor)" : 2 , "trace(IRubyObject)" : 1}},{ "className" : "org::jruby::ast::ReturnNode" , "selectors" : { "ReturnNode(ISourcePosition,Node)" : 4 , "getValueNode()" : 6}},{ "className" : "org::jruby::compiler::ASTCompiler::SpecificArityArguments" , "selectors" : { "SpecificArityArguments(Node)" : 2}},{ "className" : "org::jruby::ast::Splat19Node" , "selectors" : { "Splat19Node(ISourcePosition,Node)" : 1}},{ "className" : "org::jruby::embed::ParseFailedException" , "selectors" : { "ParseFailedException(String,Throwable)" : 1 , "ParseFailedException(Throwable)" : 5}},{ "className" : "org::jruby::ext::Timeout" , "selectors" : { "killTimeoutThread(ThreadContext,Future)" : 2 , "prepareRunnable(RubyThread,Ruby)" : 1 , "prepareRunnableWithException(RubyThread,IRubyObject,Ruby)" : 1 , "raiseBecauseCritical(ThreadContext)" : 2 , "raiseInThread(Ruby,RubyThread,IRubyObject)" : 2 , "raiseTimeoutError(ThreadContext,RaiseException)" : 2 , "timeout(ThreadContext,IRubyObject,IRubyObject,Block)" : 1 , "timeout(ThreadContext,IRubyObject,IRubyObject,IRubyObject,Block)" : 1}},{ "className" : "org::jruby::test::TestRubyInstanceConfig::NullLoadService" , "selectors" : { "NullLoadService(Ruby)" : 1}},{ "className" : "org::jruby::anno::TypePopulator::DefaultTypePopulator" , "selectors" : { "DefaultTypePopulator()" : 1}},{ "className" : "org::jruby::ext::ffi::jffi::FastIntMethodFactory::Unsigned16ParameterConverter" , "selectors" : { "Unsigned16ParameterConverter()" : 1}},{ "className" : "org::jruby::internal::runtime::UndefinedAccessor" , "selectors" : { "UndefinedAccessor(Ruby,GlobalVariable,String)" : 1}},{ "className" : "org::jruby::RubyArgsFile::ArgsFileData" , "selectors" : { "ArgsFileData(Ruby)" : 1 , "createNewFile(File)" : 2 , "getDataFrom(IRubyObject)" : 20 , "inplaceEdit(ThreadContext,String,String)" : 1 , "inplaceEditWindows(ThreadContext,String,String)" : 1 , "next_argv(ThreadContext)" : 14}},{ "className" : "org::jruby::embed::MultipleScriptsRunner" , "selectors" : { "getRuby19Names(String)" : 1 , "getScriptNames(String)" : 1 , "is19Testable(String)" : 1 , "isTestable(String)" : 1}},{ "className" : "org::jruby::javasupport::JavaUtil::JavaConverter" , "selectors" : { "convert(Ruby,Object)" : 4 , "get(Ruby,Object,int)" : 1}},{ "className" : "org::jruby::test::TestHelper::AlternateLoader" , "selectors" : { "AlternateLoader()" : 1 , "findModClass(String)" : 1 , "loadClass(String)" : 1 , "loadClassBytes(String)" : 1 , "replace(byte[],String,String)" : 1}},{ "className" : "org::jruby::ext::ffi::jffi::DefaultMethodFactory::StringInvoker" , "selectors" : { "StringInvoker()" : 1}},{ "className" : "org::jruby::compiler::ir::operands::LocalVariable" , "selectors" : { "LocalVariable(String)" : 12}},{ "className" : "org::jruby::ext::ffi::StructLayout::ScalarField" , "selectors" : { "ScalarField(Ruby,RubyClass)" : 1 , "StructLayout" : 1}},{ "className" : "org::jruby::util::JRubyThreadContextTest::VersionedClassLoader" , "selectors" : { "VersionedClassLoader(String)" : 2 , "createClass(String)" : 1}},{ "className" : "org::jruby::ext::WeakRef" , "selectors" : { "WeakRef(Ruby,RubyClass)" : 1 , "newRefError(String)" : 1}},{ "className" : "org::jruby::compiler::ASTCompiler::VariableArityArguments" , "selectors" : { "VariableArityArguments(Node)" : 2}},{ "className" : "org::jruby::util::func::Function1" , "selectors" : { "apply(A0)" : 1}},{ "className" : "org::jruby::Ruby::RecursiveError" , "selectors" : { "RecursiveError(Object)" : 1}},{ "className" : "org::jruby::ext::ffi::jffi::BoundedNativeMemoryIO" , "selectors" : { "BoundedNativeMemoryIO(BoundedNativeMemoryIO,long)" : 1 , "BoundedNativeMemoryIO(Ruby,DirectMemoryIO,long,long)" : 2 , "BoundedNativeMemoryIO(Ruby,long,int)" : 2 , "checkBounds(long,long)" : 34 , "getAddress()" : 1 , "getInt(long)" : 1 , "getLong(long)" : 1 , "getRuntime()" : 1 , "putInt(long,int)" : 1 , "putLong(long,long)" : 1}},{ "className" : "org::jruby::RubyZlib" , "selectors" : { "createZlibModule(Ruby)" : 1 , "newDataError(Ruby,String)" : 1 , "newStreamError(Ruby,String)" : 7 , "newZlibError(Ruby,String)" : 1 , "newZlibError(Ruby,String,String)" : 3}},{ "className" : "org::jruby::ext::ffi::jffi::FastLongMethodFactory::Unsigned32ParameterConverter" , "selectors" : { "Unsigned32ParameterConverter()" : 1}},{ "className" : "org::jruby::compiler::impl::RootScopedBodyCompiler" , "selectors" : { "RootScopedBodyCompiler(StandardASMCompiler,String,ASTInspector,StaticScope)" : 3 , "beginMethod(CompilerCallback,StaticScope)" : 4 , "endBody()" : 2 , "getSignature()" : 2}},{ "className" : "org::jruby::runtime::PositionAware" , "selectors" : { "getFile()" : 1 , "getLine()" : 5}},{ "className" : "org::jruby::ast::OpElementAsgnNode" , "selectors" : { "OpElementAsgnNode(ISourcePosition,Node,String,Node,Node)" : 4 , "getArgsNode()" : 6 , "getOperatorName()" : 8 , "getReceiverNode()" : 9 , "getValueNode()" : 9}},{ "className" : "org::jruby::ext::ffi::jffi::CallbackManager::ClosureInfo" , "selectors" : { "ClosureInfo(???)" : 2}},{ "className" : "org::jruby::util::io::ModeFlags" , "selectors" : { "ModeFlags()" : 2 , "ModeFlags(long)" : 30 , "getOpenFileFlags()" : 12 , "isAppendable()" : 7 , "isBinary()" : 1 , "isCreate()" : 3 , "isExclusive()" : 2 , "isReadOnly()" : 3 , "isReadable()" : 7 , "isSubsetOf(ModeFlags)" : 2 , "isTruncate()" : 4 , "isWritable()" : 11 , "toJavaModeString()" : 2}},{ "className" : "org::jruby::BasicObjectStub::DummyInstanceVariables" , "selectors" : { "DummyInstanceVariables(IRubyObject)" : 1}},{ "className" : "org::jruby::ext::ffi::jffi::DefaultMethodFactory::PointerInvoker" , "selectors" : { "PointerInvoker()" : 1}},{ "className" : "org::jruby::ext::ffi::jffi::DefaultMethodFactory::Float64Invoker" , "selectors" : { "Float64Invoker()" : 1}},{ "className" : "java::lang::SecurityException" , "selectors" : { "SecurityException(String)" : 178 , "SecurityException(String,Throwable)" : 2 , "java" : 1}},{ "className" : "org::jruby::compiler::impl::StandardASMCompiler::InvokerDescriptor" , "selectors" : { "InvokerDescriptor(String,String,String,Arity,StaticScope,CallConfiguration,String,int)" : 1 , "getArity()" : 1 , "getCallConfig()" : 1 , "getClassname()" : 1 , "getFile()" : 1 , "getInvokerName()" : 2 , "getLine()" : 1 , "getName()" : 1 , "getScope()" : 1}},{ "className" : "org::jruby::compiler::ir::instructions::SET_RETADDR_Instr" , "selectors" : { "SET_RETADDR_Instr(Variable,Label)" : 3 , "getReturnAddr()" : 1}},{ "className" : "org::jruby::util::GenericMap::KeyOrValueIterator" , "selectors" : { "nextEntry()" : 2}},{ "className" : "org::jruby::ast::AttrAssignThreeArgNode" , "selectors" : { "AttrAssignThreeArgNode(ISourcePosition,Node,String,ArrayNode)" : 3}},{ "className" : "org::jruby::ext::ffi::jffi::DefaultMethodFactory" , "selectors" : { "DefaultMethodFactory()" : 1 , "createMethod(???)" : 3 , "getEnumMarshaller(Type,IRubyObject)" : 2 , "getFactory()" : 3 , "getFunctionInvoker(NativeType)" : 1 , "getFunctionInvoker(Type)" : 2 , "getMarshaller(???)" : 1 , "getMarshaller(NativeType)" : 6}},{ "className" : "org::jruby::RubyJRuby::JRubyExecutionContextLocal" , "selectors" : { "JRubyExecutionContextLocal(Ruby,RubyClass)" : 2 , "getContextVariables(ThreadContext)" : 3 , "getExecutionContext(ThreadContext)" : 1}},{ "className" : "org::jruby::lexer::yacc::SimpleSourcePosition" , "selectors" : { "SimpleSourcePosition(String,int)" : 4 , "getFile()" : 1 , "getStartLine()" : 1}},{ "className" : "org::jruby::ext::ffi::jffi::FastIntMethodFactory" , "selectors" : { "FastIntMethodFactory()" : 1 , "createMethod(RubyModule,Function,Type,Type[])" : 1 , "getAddress(Pointer)" : 2 , "getFactory()" : 3 , "getIntParameterConverter(NativeParam)" : 1 , "getIntParameterConverter(Type)" : 2 , "getIntResultConverter(NativeType)" : 1 , "getIntResultConverter(Type)" : 2 , "isFastIntMethod(Type,Type[])" : 1 , "isFastIntParam(Type)" : 2 , "isFastIntResult(Type)" : 2}},{ "className" : "org::jruby::java::proxies::JavaInterfaceTemplate" , "selectors" : { "addRealImplClassNew(RubyClass)" : 2 , "appendFeaturesToClass(ThreadContext,IRubyObject,RubyClass)" : 1 , "appendFeaturesToModule(ThreadContext,IRubyObject,RubyModule)" : 1 , "checkAlreadyReified(RubyClass,Ruby)" : 1 , "createJavaInterfaceTemplateModule(ThreadContext)" : 1 , "initInterfaceImplMethods(ThreadContext,RubyClass)" : 1 , "jcreateProxy(IRubyObject,IRubyObject[])" : 2}},{ "className" : "java::util::Stack<T>" , "selectors" : { "Stack()" : 112}},{ "className" : "org::jruby::runtime::callsite::PlusCallSite" , "selectors" : { "PlusCallSite()" : 1}},{ "className" : "org::jruby::ext::ffi::StructLayout::EnumFieldAllocator" , "selectors" : { "EnumFieldAllocator()" : 1}},{ "className" : "org::jruby::ext::ffi::MemoryOp::Signed32" , "selectors" : { "Signed32()" : 1}},{ "className" : "org::jruby::util::ConvertBytes::ERange" , "selectors" : { "ERange(Kind)" : 1}},{ "className" : "org::jruby::ext::ffi::jffi::MethodFactory" , "selectors" : { "createDynamicMethod(???)" : 2}},{ "className" : "org::jruby::util::io::JRubyObjectInputStream" , "selectors" : { "JRubyObjectInputStream(Ruby,RubyClass)" : 1 , "createJRubyObjectInputStream(Ruby)" : 1}},{ "className" : "org::jruby::RubyEnumerator" , "selectors" : { "RubyEnumerator(Ruby,IRubyObject,IRubyObject,IRubyObject[])" : 3 , "RubyEnumerator(Ruby,RubyClass)" : 1 , "defineEnumerator(Ruby)" : 1 , "enumeratorize(Ruby,IRubyObject,String)" : 86 , "enumeratorize(Ruby,IRubyObject,String,IRubyObject)" : 27 , "enumeratorize(Ruby,IRubyObject,String,IRubyObject[])" : 14 , "initialize(IRubyObject,IRubyObject,IRubyObject[])" : 9 , "initialize19(ThreadContext,IRubyObject,Block)" : 1 , "inspect(ThreadContext,boolean)" : 2 , "inspect(ThreadContext,boolean)::ByteList" : 1 , "newEnumerator(ThreadContext,IRubyObject)" : 1 , "newEnumerator(ThreadContext,IRubyObject,IRubyObject)" : 1 , "newEnumerator(ThreadContext,IRubyObject,IRubyObject,IRubyObject)" : 1 , "with_index_common(ThreadContext,IRubyObject,Block,String,IRubyObject)" : 4}},{ "className" : "org::jruby::ext::ffi::ArrayMemoryIO::BigEndianArrayIO" , "selectors" : { "getInt32(byte[],int)" : 1 , "getInt64(byte[],int)" : 1 , "putInt32(byte[],int,int)" : 1 , "putInt64(byte[],int,long)" : 1}},{ "className" : "org::jruby::compiler::ir::operands::Splat" , "selectors" : { "Splat(Operand)" : 1}},{ "className" : "org::jruby::ast::WhileNode" , "selectors" : { "WhileNode(ISourcePosition,Node,Node)" : 2 , "WhileNode(ISourcePosition,Node,Node,boolean)" : 5 , "evaluateAtStart()" : 5 , "getBodyNode()" : 6 , "getConditionNode()" : 5}},{ "className" : "org::jruby::compiler::ir::compiler_pass::AddFrameInstructions" , "selectors" : { "AddFrameInstructions()" : 2}},{ "className" : "org::jruby::compiler::impl::ChainedChildBodyCompiler19" , "selectors" : { "ChainedChildBodyCompiler19(StandardASMCompiler,String,ASTInspector,StaticScope,ChildScopedBodyCompiler)" : 2 , "getSignature()" : 1}},{ "className" : "org::jruby::internal::runtime::methods::JavaMethod" , "selectors" : { "JavaMethod(RubyModule,Visibility)" : 5 , "JavaMethod(RubyModule,Visibility,CallConfiguration)" : 2 , "dup()" : 1 , "init(RubyModule,Arity,Visibility,StaticScope,CallConfiguration)" : 1 , "postBacktraceOnly(ThreadContext)" : 6 , "postFrameOnly(ThreadContext)" : 1 , "preBacktraceOnly(ThreadContext,String)" : 6 , "preFrameOnly(ThreadContext,IRubyObject,String,Block)" : 1 , "raiseArgumentError(JavaMethod,ThreadContext,String,int,int,int)" : 21 , "setArity(Arity)" : 6 , "setJavaName(String)" : 6 , "setSingleton(boolean)" : 6}},{ "className" : "org::jruby::util::io::NullChannel" , "selectors" : { "NullChannel()" : 2}},{ "className" : "org::jruby::ext::socket::RubyUNIXSocket::LibCSocket::BSDSockAddrUnix" , "selectors" : { "<Initializer>()::Signed8" : 2 , "<Initializer>()::UTF8String" : 1 , "LibCSocket" : 1}},{ "className" : "org::jruby::ast::ConstDeclNode" , "selectors" : { "ConstDeclNode(ISourcePosition,String,INameNode,Node)" : 10 , "getConstNode()" : 3 , "getName()" : 11}},{ "className" : "org::jruby::test::TestKernel" , "selectors" : { "verifyExit(RubyObject,String)" : 5}},{ "className" : "org::jruby::compiler::ir::operands::Float" , "selectors" : { "Float(Double)" : 9 , "computeValue(String,Constant)" : 1}},{ "className" : "org::jruby::ast::SelfNode" , "selectors" : { "SelfNode(ISourcePosition)" : 1}},{ "className" : "org::jruby::RubyJRuby" , "selectors" : { "createJRuby(Ruby)" : 1 , "createJRubyCoreExt(Ruby)" : 1 , "createJRubyExt(Ruby)" : 1 , "getNameFrom(Ruby,INameNode)" : 5}},{ "className" : "org::jruby::runtime::load::BasicLibraryService" , "selectors" : { "basicLoad(Ruby)" : 1}},{ "className" : "org::jruby::RubyZlib::RubyGzipWriter" , "selectors" : { "RubyGzipWriter(Ruby,RubyClass)" : 1 , "ensureNonNull(RubyString)" : 2 , "ensureNonNull(RubyString)::ByteList" : 1 , "newGzipWriter(IRubyObject,IRubyObject[],Block)" : 2 , "set_mtime(IRubyObject)::DateTime" : 1 , "write(IRubyObject)" : 5}},{ "className" : "java::util::concurrent::atomic::AtomicBoolean" , "selectors" : { "AtomicBoolean()" : 17 , "AtomicBoolean(boolean)" : 85 , "compareAndSet(boolean,boolean)" : 39 , "get()" : 138 , "getAndSet(boolean)" : 12 , "set(boolean)" : 136}},{ "className" : "org::jruby::compiler::ir::instructions::BREAK_Instr" , "selectors" : { "BREAK_Instr(Operand)" : 1}},{ "className" : "org::jruby::runtime::assigner::Pre1Rest0Post0Assigner" , "selectors" : { "Pre1Rest0Post0Assigner(Node)" : 1 , "assign(Ruby,ThreadContext,IRubyObject,Block)" : 2 , "assign(Ruby,ThreadContext,IRubyObject,IRubyObject,Block)" : 2}},{ "className" : "org::jruby::runtime::assigner::PreManyRest0Post0Assigner" , "selectors" : { "PreManyRest0Post0Assigner(ListNode,int)" : 1 , "assign(Ruby,ThreadContext,IRubyObject,Block)" : 2 , "assign(Ruby,ThreadContext,IRubyObject,IRubyObject,Block)" : 2 , "assign(Ruby,ThreadContext,IRubyObject,IRubyObject,IRubyObject,Block)" : 2 , "assign(Ruby,ThreadContext,IRubyObject,IRubyObject,IRubyObject,IRubyObject,Block)" : 1 , "assignNilTo(Ruby,ThreadContext,IRubyObject,Block,int)" : 5}},{ "className" : "java::util::concurrent::Callable" , "selectors" : { "call()" : 11}},{ "className" : "org::jruby::javasupport::proxy::JavaProxyReflectionObject" , "selectors" : { "JavaProxyReflectionObject(Ruby,RubyClass)" : 3 , "buildRubyArray(Class[])" : 3 , "buildRubyArray(IRubyObject[])" : 2 , "equals(Object)" : 1 , "hashCode()" : 1 , "registerRubyMethods(Ruby,RubyClass)" : 3 , "toString()" : 1}},{ "className" : "org::jruby::util::ConvertDouble::DoubleConverter" , "selectors" : { "DoubleConverter()" : 2 , "addToResult(byte)" : 14 , "completeCalculation()" : 3 , "eatUnderscores()" : 1 , "isDigit(byte)" : 7 , "isEOS()" : 15 , "isExponent(byte)" : 2 , "isWhitespace(byte)" : 4 , "next()" : 11 , "parse(???)" : 1 , "parseDecimalDigits()" : 2 , "parseDigits()" : 1 , "parseExponent()" : 2 , "parseOptionalSign()" : 1 , "previous()" : 5 , "skipWhitespace()" : 4 , "strictError()" : 13 , "verifyNumberAfterUnderscore()" : 3}},{ "className" : "org::jruby::ext::ffi::jffi::NativeMemoryIO" , "selectors" : { "NativeMemoryIO(NativeMemoryIO,long)" : 1 , "NativeMemoryIO(Ruby,long)" : 2 , "wrap(Ruby,long)" : 10}},{ "className" : "org::jruby::parser::EvalStaticScope" , "selectors" : { "EvalStaticScope(StaticScope)" : 5 , "EvalStaticScope(StaticScope,String[])" : 1}},{ "className" : "org::jruby::runtime::callsite::GtCallSite" , "selectors" : { "GtCallSite()" : 1}},{ "className" : "org::jruby::util::io::InvalidValueException" , "selectors" : { "InvalidValueException()" : 6}},{ "className" : "javax::script::ScriptEngine" , "selectors" : { "eval(Reader)" : 1 , "eval(String)" : 3 , "getContext()" : 10 , "getFactory()" : 2 , "put(String,Object)" : 2}},{ "className" : "org::jruby::internal::runtime::methods::JavaMethod::JavaMethodZeroOrOneOrTwoOrN" , "selectors" : { "JavaMethodZeroOrOneOrTwoOrN(RubyModule,Visibility)" : 2 , "JavaMethodZeroOrOneOrTwoOrN(RubyModule,Visibility,CallConfiguration)" : 2 , "call(ThreadContext,IRubyObject,RubyModule,String,IRubyObject,IRubyObject)" : 3}},{ "className" : "org::jruby::RubyGlobal::VerboseGlobalVariable" , "selectors" : { "VerboseGlobalVariable(Ruby,String,IRubyObject)" : 1 , "set(IRubyObject)" : 1}},{ "className" : "org::jruby::ast::Colon2ConstNode" , "selectors" : { "Colon2ConstNode(ISourcePosition,Node,String)" : 1 , "getValue(ThreadContext,RubyModule)" : 1 , "isCached(ThreadContext,RubyModule,IRubyObject)" : 1 , "reCache(ThreadContext,RubyModule)" : 1}},{ "className" : "org::jruby::NativeException" , "selectors" : { "NativeException(Ruby,RubyClass,Throwable)" : 1 , "createClass(Ruby,RubyClass)" : 1 , "getCause()" : 2 , "trimStackTrace(Member)" : 1}},{ "className" : "org::jruby::ast::PostExeNode" , "selectors" : { "PostExeNode(ISourcePosition,Node)" : 2}},{ "className" : "org::jruby::ast::CallOneArgBlockPassNode" , "selectors" : { "CallOneArgBlockPassNode(ISourcePosition,Node,String,ArrayNode,BlockPassNode)" : 1}},{ "className" : "org::jruby::runtime::load::LoadServiceResourceInputStreamTest" , "selectors" : { "assertValidCopy(byte[])" : 3}},{ "className" : "org::jruby::demo::TextAreaReadline::InputBuffer" , "selectors" : { "InputBuffer(byte[])" : 1}},{ "className" : "java::io::PipedOutputStream" , "selectors" : { "PipedOutputStream()" : 8 , "PipedOutputStream(PipedInputStream)" : 23 , "close()" : 8 , "flush()" : 6 , "java" : 1 , "write(byte[],int,int)" : 3 , "write(int)" : 1}},{ "className" : "org::jruby::ext::ffi::jffi::FastLongMethodFactory::StringResultConverter" , "selectors" : { "StringResultConverter()" : 1}},{ "className" : "org::jruby::ext::ffi::MemoryOp::Float64" , "selectors" : { "Float64()" : 1}},{ "className" : "org::jruby::compiler::ir::operands::BooleanLiteral" , "selectors" : { "BooleanLiteral()" : 2 , "isTrue()" : 1}},{ "className" : "org::jruby::util::JRubyThreadContextTest" , "selectors" : { "getMessage(Ruby)" : 3}},{ "className" : "org::jruby::runtime::Visibility" , "selectors" : { "isPrivate()" : 1}},{ "className" : "org::jruby::runtime::ThreadContext::RubyStackTraceElement" , "selectors" : { "RubyStackTraceElement(String,String,String,int,boolean)" : 1 , "getClassName()" : 5 , "getElement()" : 2 , "getFileName()" : 10 , "getLineNumber()" : 10 , "getMethodName()" : 20 , "isBinding()" : 1}},{ "className" : "org::jruby::runtime::builtin::IRubyObject" , "selectors" : { "addFinalizer(IRubyObject)" : 1 , "anyToString()" : 3 , "asJavaString()" : 130 , "asString()" : 19 , "callMethod(ThreadContext,String)" : 134 , "callMethod(ThreadContext,String,IRubyObject)" : 176 , "callMethod(ThreadContext,String,IRubyObject[])" : 14 , "callMethod(ThreadContext,String,IRubyObject[],Block)" : 7 , "checkArrayType()" : 9 , "checkCallMethod(ThreadContext,String)" : 1 , "checkStringType()" : 24 , "checkStringType19()" : 2 , "convertToArray()" : 29 , "convertToArray(???)" : 2 , "convertToFloat()" : 8 , "convertToHash()" : 4 , "convertToInteger()" : 73 , "convertToInteger(String)" : 6 , "convertToString()" : 272 , "copySpecialInstanceVariables(IRubyObject)" : 1 , "dataGetStruct()" : 30 , "dataWrapStruct(Object)" : 6 , "dup()" : 5 , "eql(IRubyObject)" : 3 , "getInstanceVariables()" : 29 , "getInternalVariables()" : 6 , "getJavaClass()" : 3 , "getMetaClass()" : 266 , "getRuntime()" : 613 , "getSingletonClass()" : 19 , "getType()" : 21 , "getVariable(int)" : 1 , "getVariableList()" : 3 , "hasVariables()" : 2 , "id()" : 2 , "inspect()" : 14 , "isFrozen()" : 7 , "isImmediate()" : 3 , "isModule()" : 6 , "isNil()" : 416 , "isNil(???)" : 1 , "isTaint()" : 21 , "isTrue()" : 296 , "isTrue(???)" : 2 , "isUntrusted()" : 5 , "op_eqq(ThreadContext,IRubyObject)" : 1 , "op_equal(ThreadContext,IRubyObject)" : 3 , "rbClone()" : 3 , "removeFinalizers()" : 1 , "respondsTo(String)" : 91 , "setFrozen(boolean)" : 1 , "setTaint(boolean)" : 11 , "setUntrusted(boolean)" : 3 , "setVariable(int,Object)" : 1 , "syncVariables(List<Variable<Object>>)" : 2 , "toJava(Class)" : 79}},{ "className" : "org::jruby::runtime::assigner::PreManyRest1Post0BlockAssigner" , "selectors" : { "PreManyRest1Post0BlockAssigner(ListNode,int,Node,Node)" : 1 , "assign(Ruby,ThreadContext,IRubyObject,Block)" : 2 , "assign(Ruby,ThreadContext,IRubyObject,IRubyObject,Block)" : 2 , "assign(Ruby,ThreadContext,IRubyObject,IRubyObject,IRubyObject,Block)" : 2 , "assign(Ruby,ThreadContext,IRubyObject,IRubyObject,IRubyObject,IRubyObject,Block)" : 2 , "assignNilTo(Ruby,ThreadContext,IRubyObject,Block,int)" : 6}},{ "className" : "org::jruby::Ruby::ExecRecursiveParams" , "selectors" : { "ExecRecursiveParams()" : 1}},{ "className" : "org::jruby::ext::ffi::CallbackManager" , "selectors" : { "getCallback(Ruby,CallbackInfo,Object)" : 3}},{ "className" : "org::jruby::runtime::scope::FourVarDynamicScope" , "selectors" : { "FourVarDynamicScope(StaticScope,DynamicScope)" : 1 , "getValue(int,int)" : 1 , "getValueDepthZeroOrNil(int,IRubyObject)" : 1}},{ "className" : "org::jruby::ast::ClassVarNode" , "selectors" : { "ClassVarNode(ISourcePosition,String)" : 4 , "getName()" : 6}},{ "className" : "org::jruby::embed::jsr223::JRubyEngine" , "selectors" : { "JRubyEngine(ScriptingContainer,JRubyEngineFactory)" : 1 , "compile(Reader)" : 1 , "compile(String)" : 11 , "createBindings()" : 1 , "eval(Reader)" : 4 , "eval(Reader,Bindings)" : 3 , "eval(Reader,ScriptContext)" : 1 , "eval(String)" : 12 , "eval(String,Bindings)" : 1 , "eval(String,ScriptContext)" : 3 , "get(String)" : 4 , "getBindings(int)" : 30 , "getContext()" : 16 , "getFactory()" : 1 , "getInterface(Class<T>)" : 1 , "getInterface(Object,Class<T>)" : 2 , "invokeFunction(String,Object[])" : 1 , "invokeMethod(Object,String,Object[])" : 2 , "isTerminationOn()" : 6 , "put(String,Object)" : 8 , "setBindings(Bindings,int)" : 8 , "setContext(ScriptContext)" : 8 , "wrapException(Exception)" : 8 , "wrapMethodException(Exception)" : 2}},{ "className" : "org::jruby::ext::ffi::jffi::FastLongMethodFactory::VoidResultConverter" , "selectors" : { "VoidResultConverter()" : 1}},{ "className" : "org::jruby::libraries::RbConfigLibrary" , "selectors" : { "getArchitecture()" : 2 , "getOSName()" : 2 , "jrubyScript()" : 3 , "jrubyShell()" : 2 , "setConfig(RubyHash,String,String)" : 80 , "setupMakefileConfig(RubyModule,RubyHash)" : 1}},{ "className" : "org::jruby::RubyIconv::RubyFailure" , "selectors" : { "RubyFailure(Ruby,RubyClass)" : 1 , "RubyFailure(Ruby,RubyClass,String)" : 2}},{ "className" : "org::jruby::runtime::CompiledBlockLight19" , "selectors" : { "CompiledBlockLight19(Arity,StaticScope,CompiledBlockCallback19,boolean,int)" : 2 , "newCompiledBlockLight(Arity,StaticScope,CompiledBlockCallback19,boolean,int)" : 1}},{ "className" : "org::jruby::ast::OrNode" , "selectors" : { "OrNode(ISourcePosition,Node,Node)" : 3 , "getFirstNode()" : 12 , "getSecondNode()" : 6}},{ "className" : "org::jruby::embed::bsf::JRubyEngine::FunctionsGlobalVariable" , "selectors" : { "FunctionsGlobalVariable(???)" : 1}},{ "className" : "org::jruby::exceptions::RaiseException" , "selectors" : { "RaiseException(Ruby,RubyClass,String,boolean)" : 11 , "RaiseException(RubyException)" : 11 , "RaiseException(RubyException,boolean)" : 9 , "RaiseException(Throwable,NativeException)" : 1 , "buildMessage(Throwable)" : 2 , "createNativeRaiseException(Ruby,Throwable,Member)" : 8 , "getException()" : 63 , "getMessage()" : 6 , "javaTraceFromRubyTrace(RubyStackTraceElement[])" : 1 , "printStackTrace(PrintStream)" : 5 , "setException(RubyException,boolean)" : 3}},{ "className" : "java::util::concurrent::Executor" , "selectors" : { "execute(Runnable)" : 55}},{ "className" : "org::jruby::util::collections::IntHashMap::HashIterator" , "selectors" : { "nextEntry()" : 3}},{ "className" : "org::jruby::ext::ffi::Platform::OS" , "selectors" : { "toString()" : 2 , "values()" : 1}},{ "className" : "org::jruby::common::NullWarnings" , "selectors" : { "NullWarnings(Ruby)" : 1}},{ "className" : "org::jruby::runtime::load::JavaCompiledScript" , "selectors" : { "JavaCompiledScript(LoadServiceResource)" : 1}},{ "className" : "org::jruby::ext::ffi::MemoryIO" , "selectors" : { "asByteBuffer()" : 1 , "get(long,byte[],int,int)" : 4 , "get(long,double[],int,int)" : 1 , "get(long,float[],int,int)" : 1 , "get(long,int[],int,int)" : 2 , "get(long,long[],int,int)" : 2 , "get(long,short[],int,int)" : 2 , "getByte(long)" : 9 , "getDouble(long)" : 4 , "getFloat(long)" : 4 , "getInt(long)" : 9 , "getLong(long)" : 8 , "getMemoryIO(long)" : 6 , "getShort(long)" : 8 , "getZeroTerminatedByteArray(long)" : 2 , "getZeroTerminatedByteArray(long,int)" : 1 , "isDirect()" : 1 , "isNull()" : 6 , "put(long,byte[],int,int)" : 5 , "put(long,double[],int,int)" : 1 , "put(long,float[],int,int)" : 1 , "put(long,int[],int,int)" : 2 , "put(long,long[],int,int)" : 2 , "put(long,short[],int,int)" : 2 , "putAddress(long,long)" : 5 , "putByte(long,byte)" : 10 , "putDouble(long,double)" : 4 , "putFloat(long,float)" : 4 , "putInt(long,int)" : 9 , "putLong(long,long)" : 8 , "putMemoryIO(long,MemoryIO)" : 7 , "putShort(long,short)" : 8 , "putZeroTerminatedByteArray(long,byte[],int,int)" : 2 , "setMemory(long,long,byte)" : 2 , "slice(long)" : 2 , "slice(long,long)" : 2}},{ "className" : "org::jruby::parser::RubyParserPool" , "selectors" : { "RubyParserPool()" : 1 , "borrowParser(CompatVersion)" : 1 , "getInstance()" : 2 , "returnParser(RubyParser)" : 1}},{ "className" : "org::jruby::javasupport::JavaClass::FieldInstaller" , "selectors" : { "FieldInstaller(String,int,Field)" : 4}},{ "className" : "org::jruby::util::Join::SyncReaction" , "selectors" : { "react(Join,Object[])" : 2}},{ "className" : "org::jruby::compiler::ASTCompiler19" , "selectors" : { "ASTCompiler19()" : 1 , "compile(Node,BodyCompiler,boolean)" : 6 , "compileIter(Node,BodyCompiler)" : 1 , "compileLambda(Node,BodyCompiler,boolean)" : 1 , "compileMethodArgs(Node,BodyCompiler,boolean)" : 3 , "compileMultipleAsgn19(Node,BodyCompiler,boolean)" : 1 , "compileMultipleAsgn19Assignment(Node,BodyCompiler,boolean)" : 1 , "compileOptimizedMultipleAsgn19(MultipleAsgn19Node,BodyCompiler,boolean)" : 1 , "compileUnoptimizedMultipleAsgn19(MultipleAsgn19Node,BodyCompiler,boolean)" : 2}},{ "className" : "org::jruby::javasupport::JavaClass::MethodInstaller" , "selectors" : { "MethodInstaller(String,int)" : 3 , "addAlias(String)" : 2 , "addMethod(Method,Class<?>)" : 2 , "hasLocalMethod()" : 2}},{ "className" : "org::jruby::ast::Colon3Node" , "selectors" : { "Colon3Node(ISourcePosition,String)" : 2 , "getEnclosingModule(Ruby,ThreadContext,IRubyObject,Block)" : 2 , "getName()" : 15 , "getValue(ThreadContext)" : 1 , "hasConstant(RubyModule)" : 1 , "hasMethod(IRubyObject)" : 1 , "isCached(ThreadContext,IRubyObject)" : 1 , "reCache(ThreadContext,String)" : 1}},{ "className" : "org::jruby::compiler::ir::instructions::RECV_CLOSURE_Instr" , "selectors" : { "RECV_CLOSURE_Instr(Variable)" : 1}},{ "className" : "org::jruby::ext::ffi::StructLayout::ArrayField" , "selectors" : { "ArrayField(Ruby,RubyClass)" : 1 , "StructLayout" : 2}},{ "className" : "org::jruby::runtime::scope::NoVarsDynamicScope" , "selectors" : { "NoVarsDynamicScope(StaticScope)" : 2 , "NoVarsDynamicScope(StaticScope,DynamicScope)" : 4 , "growIfNeeded(int,String)" : 5}},{ "className" : "org::jruby::internal::runtime::ThreadService::Event" , "selectors" : { "Event(RubyThread,RubyThread,Type)" : 1 , "Event(RubyThread,RubyThread,Type,IRubyObject)" : 3}},{ "className" : "org::jruby::runtime::load::LoadServiceResourceInputStream" , "selectors" : { "LoadServiceResourceInputStream(InputStream)" : 3 , "LoadServiceResourceInputStream(byte[])" : 1 , "bufferEntireStream(InputStream)" : 1 , "getBytes()" : 2}},{ "className" : "org::jruby::embed::internal::SingleThreadLocalContextProvider" , "selectors" : { "SingleThreadLocalContextProvider(LocalVariableBehavior)" : 1}},{ "className" : "org::jruby::lexer::yacc::SimplePositionFactory" , "selectors" : { "SimplePositionFactory(LexerSource,int)" : 1 , "getPosition()" : 1 , "getPosition(ISourcePosition)" : 2}},{ "className" : "org::jruby::embed::internal::SingletonLocalContextProvider" , "selectors" : { "SingletonLocalContextProvider(LocalVariableBehavior)" : 1}},{ "className" : "org::jruby::compiler::impl::AbstractVariableCompiler" , "selectors" : { "AbstractVariableCompiler(BaseBodyCompiler,SkinnyMethodAdapter,StaticScope,boolean,int,int)" : 2 , "assignHeapLocal(CompilerCallback,int,int,boolean)" : 2 , "assignHeapLocal(int,int,boolean)" : 2 , "assignMethodArguments(Object,int,Object,int,ArrayCallback,ArrayCallback,ArrayCallback,CompilerCallback,CompilerCallback)::Label" : 2 , "assignMethodArguments19(Object,int,Object,int,int,Object,int,ArrayCallback,ArrayCallback,ArrayCallback,CompilerCallback,CompilerCallback)::Label" : 2 , "retrieveHeapLocal(int,int)" : 2 , "unwrapParentScopes(int)" : 12}},{ "className" : "org::jruby::RubyBinding" , "selectors" : { "RubyBinding(Ruby,RubyClass)" : 1 , "RubyBinding(Ruby,RubyClass,Binding)" : 1 , "createBindingClass(Ruby)" : 1 , "getBinding()" : 1 , "newBinding(Ruby,Binding)" : 7}},{ "className" : "org::jruby::ast::DStrNode" , "selectors" : { "DStrNode(ISourcePosition)" : 7 , "appendToString(Ruby,ThreadContext,IRubyObject,Block,RubyString,Node)" : 1 , "buildDynamicString(Ruby,ThreadContext,IRubyObject,Block,ListNode)" : 4 , "buildDynamicString(Ruby,ThreadContext,IRubyObject,Block,ListNode)::ByteList" : 1}},{ "className" : "org::jruby::compiler::ir::dataflow::analyses::FrameLoadPlacementNode" , "selectors" : { "FrameLoadPlacementNode(DataFlowProblem,BasicBlock)" : 1 , "addLoads()" : 1}},{ "className" : "org::jruby::ast::Colon2Node" , "selectors" : { "Colon2Node(ISourcePosition,Node,String)" : 3 , "getLeftNode()" : 16}},{ "className" : "org::jruby::compiler::ir::instructions::RETURN_Instr" , "selectors" : { "RETURN_Instr(Operand)" : 3}},{ "className" : "org::jruby::util::Sprintf::Args" , "selectors" : { "Args(IRubyObject)" : 3 , "Args(Locale,IRubyObject)" : 3 , "Args(Ruby,long)" : 1 , "get(int)" : 3 , "getDecimalSeparator()" : 5 , "getNth(int)" : 1 , "getNthInt(int)" : 2 , "intValue(IRubyObject)" : 4 , "next()" : 5 , "nextInt()" : 2 , "raiseArgumentError(String)" : 7 , "warn(ID,String)" : 1 , "warning(ID,String)" : 1}},{ "className" : "org::jruby::ast::MultipleAsgnNode" , "selectors" : { "MultipleAsgnNode(ISourcePosition,ListNode,Node)" : 18 , "getArgsNode()" : 9 , "getHeadNode()" : 24 , "getPre()" : 1 , "getPreCount()" : 1 , "getRest()" : 2}},{ "className" : "org::jruby::RubyStringIO::StringIOData" , "selectors" : { "StringIOData()" : 1}},{ "className" : "org::jruby::RubyGlobal::ErrorInfoGlobalVariable" , "selectors" : { "ErrorInfoGlobalVariable(Ruby,String,IRubyObject)" : 1 , "set(IRubyObject)" : 1}},{ "className" : "org::jruby::ast::NilNode" , "selectors" : { "NilNode(ISourcePosition)" : 8 , "interpret(Ruby,ThreadContext,IRubyObject,Block)" : 1}},{ "className" : "org::jruby::ast::java_signature::PrimitiveTypeNode" , "selectors" : { "PrimitiveTypeNode(String,String)" : 9}},{ "className" : "org::jruby::runtime::load::ExternalScript" , "selectors" : { "ExternalScript(LoadServiceResource,String)" : 1}},{ "className" : "org::jruby::embed::jsr223::JRubyContext" , "selectors" : { "JRubyContext(ScriptingContainer)" : 11 , "checkName(String)" : 2 , "getAttribute(String)" : 5 , "getAttribute(String,int)" : 5 , "getAttributeFromScope(int,String)" : 3 , "getAttributesScope(String)" : 2 , "getBindings(int)" : 11 , "getErrorWriter()" : 3 , "getReader()" : 3 , "getScopes()" : 1 , "getWriter()" : 3 , "removeAttribute(String,int)" : 6 , "setAttribute(String,Object,int)" : 29 , "setBindings(Bindings,int)" : 9 , "setErrorWriter(Writer)" : 4 , "setReader(Reader)" : 3 , "setWriter(Writer)" : 4}},{ "className" : "org::jruby::runtime::DynamicScope" , "selectors" : { "DynamicScope(StaticScope)" : 2 , "DynamicScope(StaticScope,DynamicScope)" : 3 , "getAllNamesInScope()" : 2 , "getArgValues()" : 9 , "getBackRef(Ruby)" : 32 , "getEvalScope()" : 3 , "getFlipScope()" : 2 , "getLastLine(Ruby)" : 6 , "getNextCapturedScope()" : 2 , "getStaticScope()" : 33 , "getValue(int,int)" : 8 , "getValueDepthZeroOrNil(int,IRubyObject)" : 1 , "getValueOrNil(int,int,IRubyObject)" : 5 , "getValues()" : 1 , "growIfNeeded()" : 2 , "newDummyScope(StaticScope,DynamicScope)" : 1 , "newDynamicScope(StaticScope)" : 6 , "newDynamicScope(StaticScope,DynamicScope)" : 6 , "setArgValues()" : 1 , "setArgValues(IRubyObject)" : 3 , "setArgValues(IRubyObject,IRubyObject)" : 2 , "setArgValues(IRubyObject,IRubyObject,IRubyObject)" : 1 , "setArgValues(IRubyObject,IRubyObject,IRubyObject,IRubyObject)" : 1 , "setArgValues(IRubyObject,IRubyObject,IRubyObject,IRubyObject,IRubyObject)" : 1 , "setArgValues(IRubyObject,IRubyObject,IRubyObject,IRubyObject,IRubyObject,IRubyObject)" : 1 , "setArgValues(IRubyObject,IRubyObject,IRubyObject,IRubyObject,IRubyObject,IRubyObject,IRubyObject)" : 1 , "setArgValues(IRubyObject,IRubyObject,IRubyObject,IRubyObject,IRubyObject,IRubyObject,IRubyObject,IRubyObject)" : 1 , "setArgValues(IRubyObject,IRubyObject,IRubyObject,IRubyObject,IRubyObject,IRubyObject,IRubyObject,IRubyObject,IRubyObject)" : 1 , "setArgValues(IRubyObject,IRubyObject,IRubyObject,IRubyObject,IRubyObject,IRubyObject,IRubyObject,IRubyObject,IRubyObject,IRubyObject)" : 1 , "setArgValues(IRubyObject[],int)" : 12 , "setBackRef(IRubyObject)" : 37 , "setEndArgValues(IRubyObject[],int,int)" : 1 , "setLastLine(IRubyObject)" : 21 , "setValue(int,IRubyObject,int)" : 17 , "setValueDepthZero(IRubyObject,int)" : 4 , "toString(StringBuffer,String)" : 2}},{ "className" : "org::jruby::util::Dir::GlobFunc" , "selectors" : { "call(byte[],int,int,Object)" : 6}},{ "className" : "org::jruby::libraries::ThreadLibrary::ConditionVariable" , "selectors" : { "ConditionVariable(Ruby,RubyClass)" : 2 , "setup(Ruby)" : 1}},{ "className" : "org::jruby::compiler::ir::instructions::CallInstruction" , "selectors" : { "CallInstruction(Operation,Variable,Operand,Operand[],Operand)" : 2 , "CallInstruction(Variable,Operand,Operand[],Operand)" : 13 , "buildAllArgs(Operand,Operand,Operand[])" : 2 , "canBeEval()" : 5 , "canCaptureCallersFrame()" : 3 , "computeFlags()" : 2 , "getCallArgs()" : 3 , "getClosureArg()" : 7 , "getEvalFlag()" : 1 , "getMethodAddr()" : 4 , "getNumArgs()" : 1 , "getReceiver()" : 4 , "getRequiresFrameFlag()" : 1 , "getTargetMethod()" : 3 , "getTargetMethodWithReceiver(Operand)" : 3 , "isLVADataflowBarrier()" : 3 , "requiresFrame()" : 5}},{ "className" : "org::jruby::ext::ffi::jffi::Invocation" , "selectors" : { "Invocation(ThreadContext)" : 6 , "addPostInvoke(Runnable)" : 1 , "finish()" : 6 , "getThreadContext()" : 7}},{ "className" : "org::jruby::util::ConvertDouble" , "selectors" : { "byteListToDouble(???)" : 2 , "byteListToDouble19(???)" : 1}},{ "className" : "org::jruby::RubyHash::Mismatch" , "selectors" : { "Mismatch()" : 2}},{ "className" : "org::jruby::RubyHash::BaseCollection" , "selectors" : { "BaseCollection(EntryView)" : 2}},{ "className" : "org::jruby::compiler::ir::dataflow::FlowGraphNode" , "selectors" : { "FlowGraphNode(DataFlowProblem,BasicBlock)" : 3 , "applyTransferFunction()" : 1 , "buildDataFlowVars()" : 1 , "buildDataFlowVars(IR_Instr)" : 1 , "computeDataFlowInfo(List<FlowGraphNode>,BitSet)" : 1 , "compute_MEET(CFG_Edge,FlowGraphNode)" : 2 , "finalizeSolnForNode()" : 1 , "init()" : 1 , "initSolnForNode()" : 1 , "processDestBB(List<FlowGraphNode>,BitSet,BasicBlock)" : 2}},{ "className" : "org::jruby::ext::ffi::jffi::DefaultMethod" , "selectors" : { "DefaultMethod(RubyModule,Function,FunctionInvoker,ParameterMarshaller[])" : 4 , "call(ThreadContext,IRubyObject,RubyModule,String,IRubyObject[],Block)::HeapInvocationBuffer" : 1}},{ "className" : "java::nio::ByteOrder" , "selectors" : { "nativeOrder()" : 5}},{ "className" : "org::jruby::ext::ffi::MemoryPointer::MemoryPointerAllocator" , "selectors" : { "MemoryPointerAllocator()" : 1}},{ "className" : "java::lang::IllegalArgumentException" , "selectors" : { "IllegalArgumentException()" : 957 , "IllegalArgumentException(String)" : 15521 , "IllegalArgumentException(String,Throwable)" : 122 , "IllegalArgumentException(Throwable)" : 78 , "java" : 65 , "make(???)" : 1 , "makePageList(???)" : 1 , "read(???)" : 1 , "setColorModel(???)" : 1}},{ "className" : "org::jruby::ext::ffi::StructLayout::Storage" , "selectors" : { "getCachedValue(Member)" : 3 , "putCachedValue(Member,IRubyObject)" : 4 , "putReference(Member,IRubyObject)" : 3}},{ "className" : "java::util::concurrent::TimeUnit" , "selectors" : { "convert(long,TimeUnit)" : 24 , "sleep(long)" : 13 , "toMillis(long)" : 9 , "toNanos(long)" : 1 , "toSeconds(long)" : 1}},{ "className" : "java_integration::fixtures::ConcreteWithVirtualCall" , "selectors" : { "virtualMethod()" : 1}},{ "className" : "org::jruby::runtime::load::Library" , "selectors" : { "load(Ruby,boolean)" : 3}},{ "className" : "org::jruby::ext::ffi::Platform::Unsupported" , "selectors" : { "Unsupported(OS)" : 1}},{ "className" : "org::jruby::parser::StaticScope" , "selectors" : { "StaticScope(StaticScope,String[])" : 3 , "addVariable(String)" : 10 , "addVariableThisScope(String)" : 1 , "assign(ISourcePosition,String,Node)" : 2 , "assign(ISourcePosition,String,Node,StaticScope,int)" : 2 , "capture(int)" : 4 , "declare(ISourcePosition,String)" : 2 , "declare(ISourcePosition,String,int)" : 2 , "determineModule()" : 12 , "exists(String)" : 7 , "findVariableName(String)" : 1 , "getAllNamesInScope()" : 2 , "getConstant(Ruby,String,RubyModule)" : 1 , "getConstantInner(Ruby,String,RubyModule)" : 4 , "getConstantInnerNoObject(Ruby,String,RubyModule)" : 1 , "getConstantWithConstMissing(Ruby,String,RubyModule)" : 1 , "getDummyScope()" : 4 , "getEnclosingScope()" : 7 , "getLocalScope()" : 14 , "getModule()" : 19 , "getNumberOfVariables()" : 32 , "getOptionalArgs()" : 10 , "getPreviousCRefScope()" : 4 , "getRequiredArgs()" : 38 , "getRestArg()" : 15 , "getUndefConstant(Ruby,String,RubyModule)" : 1 , "getVariables()" : 15 , "growVariableNames(String)" : 2 , "isArgumentScope()" : 6 , "isBackrefLastlineScope()" : 8 , "isDefined(String)" : 9 , "isDefined(String,int)" : 2 , "namesAreInterned(String[])" : 1 , "setArgumentScope(boolean)" : 2 , "setArities(int,int,int)" : 2 , "setBackrefLastlineScope(boolean)" : 2 , "setModule(RubyModule)" : 10 , "setPreviousCRefScope(StaticScope)" : 1 , "setRequiredArgs(int)" : 1 , "setRestArg(int)" : 2 , "setVariables(String[])" : 1 , "toString()" : 2}},{ "className" : "org::jruby::compiler::ir::compiler_pass::CompilerPass" , "selectors" : { "isPreOrder()" : 1 , "run(IR_Scope)" : 2}},{ "className" : "org::jruby::util::CompoundJarURLStreamHandler" , "selectors" : { "CompoundJarURLStreamHandler()" : 1 , "createUrl(URL,String[])" : 4}},{ "className" : "org::jruby::ast::PreExeNode" , "selectors" : { "PreExeNode(ISourcePosition,StaticScope,Node)" : 2}},{ "className" : "org::jruby::util::Pack::Converter" , "selectors" : { "decode(Ruby,ByteBuffer)" : 1 , "encode(???)" : 1}},{ "className" : "org::jruby::ast::FCallTwoArgBlockPassNode" , "selectors" : { "FCallTwoArgBlockPassNode(ISourcePosition,String,ArrayNode,BlockPassNode)" : 1}},{ "className" : "org::jruby::ext::ffi::jffi::FastLongMethodFactory" , "selectors" : { "FastLongMethodFactory()" : 1 , "createMethod(RubyModule,Function,Type,Type[])" : 1 , "getFactory()" : 2 , "getLongParameterConverter(Type)" : 1 , "getLongResultConverter(Type)" : 1 , "isFastLongMethod(Type,Type[])" : 1 , "isFastLongParam(Type)" : 1 , "isFastLongResult(Type)" : 1}},{ "className" : "org::jruby::BasicObjectStub::DummyInternalVariables" , "selectors" : { "DummyInternalVariables()" : 1}},{ "className" : "org::jruby::compiler::impl::SkinnyMethodAdapter" , "selectors" : { "SkinnyMethodAdapter(???)" : 64 , "aaload()" : 2 , "aastore()" : 1 , "aconst_null()" : 7 , "aload(int)" : 276 , "aloadMany(int[])" : 23 , "anewarray(String)" : 6 , "aprintln()" : 1 , "areturn()" : 39 , "arraylength()" : 6 , "arrayload()" : 5 , "arraystore()" : 6 , "astore(int)" : 61 , "athrow()" : 22 , "bipush(int)" : 1 , "checkcast(String)" : 22 , "dload(int)" : 2 , "dreturn()" : 2 , "dup()" : 50 , "dup2()" : 2 , "dup2_x2()" : 2 , "dup_x2()" : 2 , "end()" : 48 , "end()::TraceMethodVisitor" : 1 , "fload(int)" : 2 , "freturn()" : 2 , "getfield(String,String,String)" : 12 , "getstatic(String,String,String)" : 23 , "go_to(???)" : 45 , "iconst_0()" : 11 , "iconst_1()" : 5 , "iconst_2()" : 3 , "iconst_3()" : 3 , "iconst_4()" : 1 , "iconst_5()" : 1 , "iconst_m1()" : 1 , "if_acmpeq(???)" : 1 , "if_acmpne(???)" : 1 , "if_icmpeq(???)" : 2 , "if_icmpgt(???)" : 1 , "if_icmplt(???)" : 2 , "if_icmpne(???)" : 1 , "ifeq(???)" : 20 , "ifne(???)" : 13 , "ifnonnull(???)" : 3 , "ifnull(???)" : 3 , "iload(int)" : 8 , "instance_of(String)" : 4 , "invokedynamic(String,String,String)" : 1 , "invokeinterface(String,String,String)" : 19 , "invokespecial(String,String,String)" : 23 , "invokestatic(String,String,String)" : 84 , "invokevirtual(String,String,String)" : 206 , "ireturn()" : 10 , "istore(int)" : 2 , "l2i()" : 2 , "label(???)" : 127 , "ldc(Object)" : 113 , "line(int)" : 25 , "line(int)::Label" : 1 , "lload(int)" : 2 , "lookupswitch(???)" : 2 , "lreturn()" : 2 , "newobj(String)" : 5 , "pop()" : 43 , "pop2()" : 2 , "pushBoolean(boolean)" : 1 , "pushInt(int)" : 71 , "putfield(String,String,String)" : 11 , "putstatic(String,String,String)" : 4 , "sipush(int)" : 1 , "start()" : 36 , "swap()" : 46 , "trycatch(???)" : 23 , "trycatch(String,Runnable,Runnable)" : 2 , "trycatch(String,Runnable,Runnable)::Label" : 4 , "visitAnnotation(???)" : 1 , "visitAnnotationWithFields(String,boolean,Map<String,Object>)" : 1 , "visitCode()" : 9 , "visitEnd()" : 1 , "visitInsn(int)" : 2 , "visitLabel(???)" : 1 , "visitLineNumber(???)" : 7 , "visitLocalVariable(???)" : 2 , "visitMaxs(int,int)" : 5 , "visitMaxs(int,int)::TraceMethodVisitor" : 1 , "visitMethodInsn(int,String,String,String)" : 2 , "visitParameterAnnotationWithFields(int,String,boolean,Map<String,Object>)" : 1 , "visitTryCatchBlock(???)" : 2 , "visitTypeInsn(int,String)" : 3 , "voidreturn()" : 21}},{ "className" : "org::jruby::ext::ffi::Type::Builtin" , "selectors" : { "Builtin(Ruby,RubyClass,NativeType,String)" : 3 , "equals(Object)" : 3}},{ "className" : "org::jruby::util::Join::AsyncReaction" , "selectors" : { "react(Join,Object[])" : 1}},{ "className" : "org::jruby::runtime::assigner::Pre1Rest1Post0Assigner" , "selectors" : { "Pre1Rest1Post0Assigner(Node,Node)" : 1 , "assign(Ruby,ThreadContext,IRubyObject,Block)" : 2 , "assign(Ruby,ThreadContext,IRubyObject,IRubyObject,Block)" : 2 , "assign(Ruby,ThreadContext,IRubyObject,IRubyObject,IRubyObject,Block)" : 2 , "assign(Ruby,ThreadContext,IRubyObject,IRubyObject,IRubyObject,IRubyObject,Block)" : 2}},{ "className" : "org::jruby::RubyGlobal::MatchMatchGlobalVariable" , "selectors" : { "MatchMatchGlobalVariable(Ruby,String)" : 1}},{ "className" : "org::jruby::RubyMatchData::Pair" , "selectors" : { "Pair()" : 2}},{ "className" : "org::jruby::util::Join::AsyncCall" , "selectors" : { "AsyncCall(Object)" : 1}},{ "className" : "org::jruby::internal::runtime::methods::JavaMethod::JavaMethodOneOrNBlock" , "selectors" : { "JavaMethodOneOrNBlock(RubyModule,Visibility)" : 2 , "JavaMethodOneOrNBlock(RubyModule,Visibility,CallConfiguration)" : 2 , "call(ThreadContext,IRubyObject,RubyModule,String,IRubyObject,Block)" : 4}},{ "className" : "org::jruby::embed::internal::LocalContext" , "selectors" : { "LocalContext(RubyInstanceConfig,LocalVariableBehavior)" : 1 , "getAttributeMap()" : 3 , "getRuntime()" : 4 , "getVarMap()" : 3 , "initialize(RubyInstanceConfig,LocalVariableBehavior)" : 1}},{ "className" : "org::jruby::ast::IScopingNode" , "selectors" : { "getCPath()" : 1}},{ "className" : "org::jruby::ext::ffi::jffi::FastIntPointerMethodTwoArg" , "selectors" : { "FastIntPointerMethodTwoArg(RubyModule,Function,IntResultConverter,IntParameterConverter[],ParameterMarshaller[])" : 1 , "invoke(ThreadContext,IRubyObject,IRubyObject)" : 2 , "invoke(ThreadContext,IRubyObject,IRubyObject)::HeapInvocationBuffer" : 1}},{ "className" : "org::jruby::util::Join::Call" , "selectors" : { "Call(Object)" : 2 , "activate(Join,SyncReaction,Object[])" : 1 , "getMessage()" : 1}},{ "className" : "org::jruby::util::CRC32Ext" , "selectors" : { "CRC32Ext(int)" : 2 , "getValue()" : 1 , "setCRCRef(int)" : 2 , "update(byte[],int,int)" : 1}},{ "className" : "org::jruby::compiler::ir::instructions::JRUBY_IMPL_CALL_Instr" , "selectors" : { "JRUBY_IMPL_CALL_Instr(Variable,Operand,Operand[])" : 4}},{ "className" : "org::jruby::util::Join::SyncCall" , "selectors" : { "SyncCall(Object)" : 1 , "call()" : 1}},{ "className" : "org::jruby::evaluator::AssignmentVisitor" , "selectors" : { "multiAssign(Ruby,ThreadContext,IRubyObject,MultipleAsgn19Node,RubyArray)" : 1 , "multiAssign(Ruby,ThreadContext,IRubyObject,MultipleAsgn19Node,RubyArray,boolean)" : 1 , "multiAssign(Ruby,ThreadContext,IRubyObject,MultipleAsgnNode,RubyArray,boolean)" : 4}},{ "className" : "org::jruby::ast::TrueNode" , "selectors" : { "TrueNode(ISourcePosition)" : 1 , "interpret(Ruby,ThreadContext,IRubyObject,Block)" : 1}},{ "className" : "org::jruby::ext::ffi::jffi::DefaultMethodFactory::Unsigned8Marshaller" , "selectors" : { "Unsigned8Marshaller()" : 1}},{ "className" : "org::jruby::compiler::ir::instructions::MultiOperandInstr" , "selectors" : { "MultiOperandInstr(Operation,Variable,Operand[])" : 4 , "getOperands()" : 3 , "simplifyOperands(Map<Operand,Operand>)" : 1}},{ "className" : "org::jruby::ast::ArgsPushNode" , "selectors" : { "ArgsPushNode(ISourcePosition,Node,Node)" : 2 , "getFirstNode()" : 5 , "getSecondNode()" : 5}},{ "className" : "org::jruby::java::invokers::StaticFieldSetter" , "selectors" : { "StaticFieldSetter(String,RubyModule,Field)" : 1}},{ "className" : "org::jruby::management::ParserStats" , "selectors" : { "ParserStats(Ruby)" : 1 , "addEvalParse()" : 3 , "addJRubyModuleParse()" : 1 , "addLoadParse()" : 1 , "getTotalParseTime()" : 1 , "getTotalParsedBytes()" : 1}},{ "className" : "java::nio::channels::Channel" , "selectors" : { "close()" : 30 , "isOpen()" : 11}},{ "className" : "org::jruby::embed::RadioActiveDecay" , "selectors" : { "amountAfterYears(double,double)" : 2 , "yearsToAmount(double,double)" : 2}},{ "className" : "org::jruby::ext::ffi::jffi::DefaultMethodTwoArg" , "selectors" : { "DefaultMethodTwoArg(RubyModule,Function,FunctionInvoker,ParameterMarshaller[])" : 1 , "call(ThreadContext,IRubyObject,RubyModule,String,IRubyObject,IRubyObject)::HeapInvocationBuffer" : 1}},{ "className" : "org::jruby::ext::ffi::jffi::DynamicLibrary::DataSymbolMemoryIO" , "selectors" : { "DataSymbolMemoryIO(Ruby,DynamicLibrary,long)" : 1}},{ "className" : "org::jruby::java::invokers::InstanceFieldSetter" , "selectors" : { "InstanceFieldSetter(String,RubyModule,Field)" : 2}},{ "className" : "org::jruby::evaluator::ASTInterpreter" , "selectors" : { "aValueSplat(Ruby,IRubyObject)" : 1 , "arrayValue(Ruby,IRubyObject)" : 1 , "aryToAry(Ruby,IRubyObject)" : 1 , "callTraceFunction(Ruby,ThreadContext,RubyEvent)" : 4 , "evalClassDefinitionBody(Ruby,ThreadContext,StaticScope,Node,RubyModule,IRubyObject,Block)" : 3 , "evalSimple(ThreadContext,IRubyObject,RubyString,String,int)" : 2 , "evalWithBinding(ThreadContext,IRubyObject,Binding)" : 1 , "getArgumentDefinition(Ruby,ThreadContext,Node,String,IRubyObject,Block)" : 4 , "getBlock(Ruby,ThreadContext,IRubyObject,Block,Node)" : 2 , "getBlockPassBlock(Node,Ruby,ThreadContext,IRubyObject,Block)" : 1 , "getClassVariableBase(ThreadContext,Ruby)" : 11 , "getIterNodeBlock(Node,ThreadContext,IRubyObject)" : 1 , "multipleAsgnArrayNode(Ruby,ThreadContext,MultipleAsgnNode,ArrayNode,IRubyObject,Block)" : 1 , "pollAndReturn(ThreadContext,IRubyObject)" : 11 , "setupArgs(Ruby,ThreadContext,Node,IRubyObject,Block)" : 4 , "splatValue(Ruby,IRubyObject)" : 1}},{ "className" : "org::jruby::runtime::assigner::PreManyRest1Post0Assigner" , "selectors" : { "PreManyRest1Post0Assigner(ListNode,int,Node)" : 1 , "assign(Ruby,ThreadContext,IRubyObject,Block)" : 2 , "assign(Ruby,ThreadContext,IRubyObject,IRubyObject,Block)" : 2 , "assign(Ruby,ThreadContext,IRubyObject,IRubyObject,IRubyObject,Block)" : 2 , "assign(Ruby,ThreadContext,IRubyObject,IRubyObject,IRubyObject,IRubyObject,Block)" : 2 , "assignNilTo(Ruby,ThreadContext,IRubyObject,Block,int)" : 6}},{ "className" : "org::jruby::internal::runtime::methods::JavaMethod::JavaMethodN" , "selectors" : { "JavaMethodN(RubyModule,Visibility)" : 4 , "JavaMethodN(RubyModule,Visibility,CallConfiguration)" : 4 , "call(ThreadContext,IRubyObject,RubyModule,String,IRubyObject[])" : 5}},{ "className" : "org::jruby::embed::internal::ThreadSafeLocalContextProvider" , "selectors" : { "ThreadSafeLocalContextProvider(LocalVariableBehavior)" : 1}},{ "className" : "org::jruby::ext::ffi::ArrayMemoryIO::LE64ArrayIO" , "selectors" : { "LE64ArrayIO()" : 1}},{ "className" : "org::jruby::internal::runtime::ThreadService" , "selectors" : { "ThreadService(Ruby)" : 1 , "adoptCurrentThread()" : 1 , "associateThread(Object,RubyThread)" : 3 , "deliverEvent(Event)" : 2 , "disposeCurrentThread()" : 1 , "dissociateThread(Object)" : 1 , "getActiveRubyThreads()" : 2 , "getCritical()" : 6 , "getCurrentContext()" : 5 , "getMainThread()" : 7 , "getThreadContextForThread(RubyThread)" : 1 , "registerNewThread(RubyThread)" : 2 , "setCritical(boolean)" : 8 , "setMainThread(Thread,RubyThread)" : 1 , "unregisterThread(RubyThread)" : 1}},{ "className" : "org::jruby::compiler::ir::dataflow::analyses::FrameStorePlacementProblem" , "selectors" : { "FrameStorePlacementProblem()" : 3 , "addStoreAndFrameAllocInstructions()" : 2 , "getName()" : 4 , "recordDefVar(Variable)" : 1 , "recordUsedVar(Variable)" : 1 , "scopeDefinesVariable(Variable)" : 3 , "scopeUsesVariable(Variable)" : 3}},{ "className" : "org::jruby::ext::ffi::Util" , "selectors" : { "checkBounds(Ruby,long,long,long)" : 2 , "checkStringSafety(Ruby,IRubyObject)" : 1 , "doubleValue(IRubyObject)" : 5 , "floatValue(IRubyObject)" : 5 , "int16Value(IRubyObject)" : 9 , "int32Value(IRubyObject)" : 29 , "int64Value(IRubyObject)" : 11 , "int8Value(IRubyObject)" : 9 , "longValue(IRubyObject)" : 9 , "longValue(RubyString)" : 1 , "newSigned16(Ruby,short)" : 9 , "newSigned32(Ruby,int)" : 10 , "newSigned64(Ruby,long)" : 9 , "newSigned8(Ruby,byte)" : 9 , "newUnsigned16(Ruby,short)" : 9 , "newUnsigned32(Ruby,int)" : 10 , "newUnsigned64(Ruby,long)" : 9 , "newUnsigned8(Ruby,byte)" : 9 , "uint16Value(IRubyObject)" : 9 , "uint32Value(IRubyObject)" : 9 , "uint64Value(IRubyObject)" : 10 , "uint8Value(IRubyObject)" : 9}},{ "className" : "org::jruby::compiler::ASTCompiler::OpElementAsgnArgumentsCallback" , "selectors" : { "OpElementAsgnArgumentsCallback(Node)" : 2 , "getArity()" : 1}},{ "className" : "org::jruby::JRubyApplet::Facade" , "selectors" : { "attach(Ruby,Applet)" : 1 , "destroy()" : 1 , "getErrorStream()" : 1 , "getInputStream()" : 1 , "getOutputStream()" : 1}},{ "className" : "org::jruby::RubyHash::FoundKey" , "selectors" : { "FoundKey(IRubyObject)" : 2}},{ "className" : "org::jruby::ast::DotNode" , "selectors" : { "DotNode(ISourcePosition,Node,Node,boolean,boolean)" : 4 , "getBeginNode()" : 4 , "getEndNode()" : 4 , "isExclusive()" : 4 , "isLiteral()" : 2}},{ "className" : "org::jruby::RubyZlib::RubyGzipWriter::HeaderModifyableGZIPOutputStream" , "selectors" : { "HeaderModifyableGZIPOutputStream(IRubyObject)" : 1 , "close()" : 1 , "crc()" : 1 , "finish()" : 2 , "headerIsWritten()" : 3 , "pos()" : 1 , "setModifiedTime(long)" : 1 , "write(byte[],int,int)" : 1 , "writeHeader()" : 1 , "writeHeaderIfNeeded()" : 2 , "writeTrailer()" : 1}},{ "className" : "org::jruby::JRubyApplet::ConsoleFacade" , "selectors" : { "ConsoleFacade(String)" : 1 , "findFont(String,int,int,String[])" : 1}},{ "className" : "org::jruby::RubyJRuby::JRubyThreadLocal" , "selectors" : { "JRubyThreadLocal(Ruby,RubyClass)" : 1}},{ "className" : "org::jruby::internal::runtime::methods::DefaultMethod" , "selectors" : { "DefaultMethod(RubyModule,StaticScope,Node,ArgsNode,Visibility,ISourcePosition)" : 2 , "getArgsNode()" : 2 , "getBodyNode()" : 2 , "getCallCount()" : 1 , "getMethodForCaching()" : 1 , "getPosition()" : 1 , "getStaticScope()" : 1 , "incrementCallCount()" : 1 , "setCallCount(int)" : 4 , "switchToJitted(Script,CallConfiguration)" : 1 , "tryJitReturnMethod(ThreadContext,String)" : 24}},{ "className" : "org::jruby::javasupport::util::ObjectProxyCache::Entry" , "selectors" : { "Entry(EntryRef<Object>,int,EntryRef<T>,Entry<T>)" : 2 , "Entry(Object,int,T,ReferenceType,Entry<T>,ReferenceQueue<Object>)" : 2 , "newArray(int)" : 2}},{ "className" : "org::jruby::ext::ffi::jffi::FastLongMethodFactory::BooleanParameterConverter" , "selectors" : { "BooleanParameterConverter()" : 1}},{ "className" : "org::jruby::util::TypeConverter" , "selectors" : { "checkData(IRubyObject)" : 1 , "convertToType(IRubyObject,RubyClass,String)" : 14 , "convertToType(IRubyObject,RubyClass,String,boolean)" : 20 , "convertToType19(IRubyObject,RubyClass,String)" : 2 , "convertToType19(IRubyObject,RubyClass,String,boolean)" : 3 , "convertToTypeOrRaise(IRubyObject,RubyClass,String)" : 1 , "convertToTypeWithCheck(IRubyObject,RubyClass,String)" : 21 , "convertToTypeWithCheck19(IRubyObject,RubyClass,String)" : 1 , "handleUncoercibleObject(boolean,IRubyObject,RubyClass)" : 4}},{ "className" : "org::jruby::ast::BignumNode" , "selectors" : { "BignumNode(ISourcePosition,BigInteger)" : 1 , "getValue()" : 5 , "setValue(BigInteger)" : 1}},{ "className" : "org::jruby::ext::ffi::jffi::VariadicInvoker" , "selectors" : { "VariadicInvoker(???)" : 1 , "createVariadicInvokerClass(Ruby,RubyModule)" : 1 , "invoke(ThreadContext,IRubyObject,IRubyObject)::HeapInvocationBuffer" : 1}},{ "className" : "org::jruby::RubyInstanceConfig::ArgumentProcessor" , "selectors" : { "ArgumentProcessor(String[])" : 1 , "ArgumentProcessor(String[],boolean)" : 2 , "getArgumentError(String)" : 11 , "grabOptionalValue()" : 6 , "grabValue(String)" : 8 , "isInterpreterArgument(String)" : 1 , "processArgument()" : 1 , "processArguments()" : 2 , "processArgv()" : 1 , "resolveScript(String)" : 1 , "runBinScript()" : 2}},{ "className" : "javax::script::ScriptEngineFactory" , "selectors" : { "getEngineName()" : 2 , "getExtensions()" : 1 , "getLanguageName()" : 1 , "getMimeTypes()" : 1 , "getNames()" : 1 , "getScriptEngine()" : 5}},{ "className" : "org::jruby::embed::io::WriterOutputStream" , "selectors" : { "WriterOutputStream(Writer)" : 4 , "WriterOutputStream(Writer,String)" : 1 , "byte2char(ByteBuffer,CharBuffer)" : 1 , "write(byte[],int,int)" : 2}},{ "className" : "org::jruby::RubyNumeric::ByteListCaller19" , "selectors" : { "ByteListCaller19()" : 1}},{ "className" : "org::jruby::java::dispatch::CallableSelector::CallableAcceptor" , "selectors" : { "accept(ParameterTypes,IRubyObject[])" : 1}},{ "className" : "org::jruby::compiler::ir::instructions::DEFINE_INSTANCE_METHOD_Instr" , "selectors" : { "DEFINE_INSTANCE_METHOD_Instr(IR_Module,IRMethod)" : 2}},{ "className" : "org::jruby::compiler::ASTInspector" , "selectors" : { "ASTInspector()" : 15 , "addFrameAwareMethods(String[])" : 1 , "addScopeAwareMethods(String[])" : 1 , "disable()" : 6 , "getCallConfig()" : 3 , "getFlag(int)" : 17 , "hasClass()" : 2 , "hasClassVar()" : 2 , "hasClosure()" : 10 , "hasConstant()" : 2 , "hasFrameAwareMethods()" : 1 , "hasMethod()" : 2 , "hasScopeAwareMethods()" : 10 , "inspect(Node)" : 123 , "integrate(ASTInspector)" : 2 , "noFrame()" : 3 , "setFlag(int)" : 47 , "subInspect(Node[])" : 2}},{ "className" : "org::jruby::util::RecursiveComparator" , "selectors" : { "compare(ThreadContext,String,IRubyObject,IRubyObject,Set<Pair>)" : 6}},{ "className" : "org::jruby::RubyRange::RangeCallBack" , "selectors" : { "call(ThreadContext,IRubyObject)" : 2}},{ "className" : "org::jruby::compiler::ir::instructions::RESCUED_BODY_START_MARKER_Instr" , "selectors" : { "RESCUED_BODY_START_MARKER_Instr(Label,Label,Label,List<Label>)" : 1 , "setRescuedBodyEndBB(BasicBlock)" : 1 , "setRescuedBodyStartBB(BasicBlock)" : 1}},{ "className" : "org::jruby::ext::ffi::MemoryOp::StructOp" , "selectors" : { "StructOp(RubyClass)" : 1}},{ "className" : "org::jruby::runtime::assigner::Pre1Rest0Post0BlockAssigner" , "selectors" : { "Pre1Rest0Post0BlockAssigner(Node,Node)" : 1 , "assign(Ruby,ThreadContext,IRubyObject,Block)" : 2 , "assign(Ruby,ThreadContext,IRubyObject,IRubyObject,Block)" : 2}},{ "className" : "org::jruby::test::FailingTest" , "selectors" : { "FailingTest(String,String)" : 2}},{ "className" : "org::jruby::exceptions::JumpException::RedoJump" , "selectors" : { "RedoJump()" : 1}},{ "className" : "org::jruby::RubyDigest" , "selectors" : { "createDigest(Ruby)" : 1 , "createDigestMD5(Ruby)" : 1 , "createDigestRMD160(Ruby)" : 1 , "createDigestSHA1(Ruby)" : 1 , "createDigestSHA2(Ruby)" : 1 , "createMessageDigest(Ruby,String)" : 2 , "toHex(byte)::ByteList" : 1 , "toHexString(Ruby,byte[])" : 4}},{ "className" : "java_integration::fixtures::UsesSingleMethodInterface" , "selectors" : { "callIt(SingleMethodInterface)" : 1}},{ "className" : "org::jruby::ast::IterNode" , "selectors" : { "IterNode(ISourcePosition,ArgsNode,Node,StaticScope)" : 5 , "IterNode(ISourcePosition,Node,BlockPassNode,StaticScope,Node)" : 5 , "getBlockBody()" : 5 , "getBlockVarNode()" : 3 , "getBodyNode()" : 26 , "getScope()" : 11 , "getVarNode()" : 39}},{ "className" : "org::jruby::demo::TextAreaReadline" , "selectors" : { "TextAreaReadline(JTextComponent,String)" : 3 , "append(String,AttributeSet)" : 6 , "backAction(KeyEvent)" : 1 , "completeAction(KeyEvent)" : 1 , "downAction(KeyEvent)" : 1 , "enterAction(KeyEvent)" : 1 , "getInputStream()" : 3 , "getLine()" : 2 , "getOutputStream()" : 5 , "hookIntoRuntime(Ruby)" : 3 , "readLine(String)" : 1 , "replaceText(int,int,String)" : 4 , "shutdown()" : 2 , "upAction(KeyEvent)" : 1 , "writeLine(String)" : 3 , "writeLineUnsafe(String)" : 2}},{ "className" : "org::jruby::ext::ffi::jffi::FastIntMethodFactory::Signed16ResultConverter" , "selectors" : { "Signed16ResultConverter()" : 1}},{ "className" : "java_integration::fixtures::ArrayReturningInterface" , "selectors" : { "blah()" : 1}},{ "className" : "org::jruby::util::GenericMap::ValueIterator" , "selectors" : { "ValueIterator()" : 1}},{ "className" : "org::jruby::internal::runtime::methods::AliasMethod" , "selectors" : { "AliasMethod(RubyModule,DynamicMethod,String)" : 3}},{ "className" : "org::jruby::RubyGlobal::LastMatchGlobalVariable" , "selectors" : { "LastMatchGlobalVariable(Ruby,String)" : 1}},{ "className" : "org::jruby::compiler::ir::instructions::GET_CVAR_Instr" , "selectors" : { "GET_CVAR_Instr(Variable,Operand,String)" : 1 , "getParentmostScope(Operand)" : 1}},{ "className" : "java::awt::Insets" , "selectors" : { "Insets(int,int,int,int)" : 3208 , "clone()" : 5 , "java" : 231 , "set(int,int,int,int)" : 2}},{ "className" : "org::jruby::ext::Readline::ConsoleHolder" , "selectors" : { "ConsoleHolder()" : 1}},{ "className" : "org::jruby::MetaClass" , "selectors" : { "MetaClass(Ruby,RubyClass,IRubyObject)" : 3 , "getAttached()" : 12 , "getRealClass()" : 2 , "setAttached(IRubyObject)" : 2}},{ "className" : "org::jruby::runtime::callback::Callback" , "selectors" : { "execute(IRubyObject,IRubyObject[],Block)" : 4 , "getArity()" : 2}},{ "className" : "org::jruby::runtime::assigner::Pre0Rest0Post0BlockAssigner" , "selectors" : { "Pre0Rest0Post0BlockAssigner(Node)" : 2}},{ "className" : "org::jruby::ext::ffi::jffi::CallbackManager::WeakRefCallbackProxy" , "selectors" : { "WeakRefCallbackProxy(Ruby,ClosureInfo,Object)" : 1}},{ "className" : "org::jruby::javasupport::util::ObjectProxyCache::Segment" , "selectors" : { "count()" : 3 , "expunge()" : 3 , "get(Object,int)" : 1 , "getOrCreate(Object,int,A)" : 1 , "newArray(int)" : 1 , "put(Object,int,T)" : 1 , "rehash()" : 2 , "remove(Entry<T>[],int,Entry<T>)" : 3}},{ "className" : "org::jruby::ext::ffi::jffi::LongResultConverter" , "selectors" : { "fromNative(ThreadContext,long)" : 5}},{ "className" : "org::jruby::ext::ffi::StructLayout::FieldAllocator" , "selectors" : { "FieldAllocator()" : 1}},{ "className" : "org::jruby::ast::RescueNode" , "selectors" : { "RescueNode(ISourcePosition,Node,RescueBodyNode,Node)" : 7 , "executeBody(Ruby,ThreadContext,IRubyObject,Block)" : 1 , "getBodyNode()" : 7 , "getElseNode()" : 7 , "getExceptions(RescueBodyNode,Ruby,ThreadContext,IRubyObject,Block)" : 2 , "getRescueNode()" : 6 , "handleException(Ruby,ThreadContext,IRubyObject,Block,RaiseException)" : 1 , "handleJavaException(Ruby,ThreadContext,IRubyObject,Block,Throwable)" : 1 , "interpretWithJavaExceptions(Ruby,ThreadContext,IRubyObject,Block)" : 1}},{ "className" : "org::jruby::ast::WhenNode" , "selectors" : { "WhenNode(ISourcePosition,Node,Node,Node)" : 4 , "getBodyNode()" : 4 , "getExpressionNodes()" : 24 , "getNextCase()" : 2 , "when(IRubyObject,ThreadContext,Ruby,IRubyObject,Block)" : 1}},{ "className" : "org::jruby::util::Adler32Ext" , "selectors" : { "Adler32Ext(int)" : 2 , "getValue()" : 1 , "setAdlerRef(int)" : 2 , "update(byte[],int,int)" : 1}},{ "className" : "org::jruby::util::ReferenceReaper" , "selectors" : { "ReferenceReaper()" : 1 , "getInstance()" : 3}},{ "className" : "org::jruby::java::proxies::ArrayJavaProxy::ArrayNewMethod" , "selectors" : { "ArrayNewMethod(RubyModule,Visibility,DynamicMethod)" : 1}},{ "className" : "org::jruby::RubyGlobal::NonEffectiveGlobalVariable" , "selectors" : { "NonEffectiveGlobalVariable(Ruby,String,IRubyObject)" : 1}},{ "className" : "org::jruby::compiler::InvocationCompiler" , "selectors" : { "getMethodAdapter()" : 3 , "invokeAttrAssign(String,CompilerCallback,ArgumentsCallback)" : 1 , "invokeAttrAssignMasgn(String,CompilerCallback,ArgumentsCallback)" : 1 , "invokeBinaryFixnumRHS(String,CompilerCallback,long)" : 2 , "invokeDynamic(String,CompilerCallback,ArgumentsCallback,CallType,CompilerCallback,boolean)" : 9 , "invokeEqq(ArgumentsCallback,CompilerCallback)" : 1 , "invokeOpAsgnWithAnd(String,String,CompilerCallback,ArgumentsCallback)" : 1 , "invokeOpAsgnWithMethod(String,String,String,CompilerCallback,ArgumentsCallback)" : 1 , "invokeOpAsgnWithOr(String,String,CompilerCallback,ArgumentsCallback)" : 1 , "opElementAsgnWithAnd(CompilerCallback,ArgumentsCallback,CompilerCallback)" : 1 , "opElementAsgnWithMethod(CompilerCallback,ArgumentsCallback,CompilerCallback,String)" : 1 , "opElementAsgnWithOr(CompilerCallback,ArgumentsCallback,CompilerCallback)" : 1 , "setMethodAdapter(SkinnyMethodAdapter)" : 6 , "yield(CompilerCallback,boolean)" : 1 , "yieldSpecific(ArgumentsCallback)" : 2}},{ "className" : "org::jruby::ext::ffi::jffi::FastIntMethodFactory::Signed32ResultConverter" , "selectors" : { "Signed32ResultConverter()" : 1}},{ "className" : "org::jruby::parser::Parser" , "selectors" : { "Parser(Ruby)" : 1 , "getLines(ParserConfiguration,Ruby,String)" : 2 , "getTotalBytes()" : 1 , "getTotalTime()" : 1 , "parse(???)" : 2 , "parse(String,InputStream,DynamicScope,ParserConfiguration)" : 2 , "parse(String,LexerSource,DynamicScope,ParserConfiguration)" : 2 , "parse(String,byte[],DynamicScope,ParserConfiguration)" : 3}},{ "className" : "org::jruby::RubyRegexp::RegexpCache" , "selectors" : { "<Initializer>()::SoftReference" : 1 , "RegexpCache()" : 3 , "get()::SoftReference" : 1 , "get(???)" : 4}},{ "className" : "java_integration::fixtures::StaticMethodSelection" , "selectors" : { "StaticMethodSelection()" : 1}},{ "className" : "org::jruby::compiler::util::HandleFactory" , "selectors" : { "createHandle(JRubyClassLoader,Method)" : 2 , "createHandleBytes(Method,String)" : 2 , "createHandleBytes(Method,String)::ClassWriter" : 1 , "createHandleClass(JRubyClassLoader,Method,String)" : 1 , "createHandleName(Method)" : 2 , "dummy(String)" : 2 , "loadUnboxedArgument(SkinnyMethodAdapter,int,Class)" : 1 , "unboxAndCast(SkinnyMethodAdapter,Class)" : 1}},{ "className" : "org::jruby::ast::BlockAcceptingNode" , "selectors" : { "getIterNode()" : 5 , "setIterNode(Node)" : 4}},{ "className" : "org::jruby::runtime::assigner::Pre1Rest1Post0BlockAssigner" , "selectors" : { "Pre1Rest1Post0BlockAssigner(Node,Node,Node)" : 1 , "assign(Ruby,ThreadContext,IRubyObject,Block)" : 2 , "assign(Ruby,ThreadContext,IRubyObject,IRubyObject,Block)" : 2 , "assign(Ruby,ThreadContext,IRubyObject,IRubyObject,IRubyObject,Block)" : 2 , "assign(Ruby,ThreadContext,IRubyObject,IRubyObject,IRubyObject,IRubyObject,Block)" : 2}},{ "className" : "org::jruby::ext::ffi::StructLayout::PointerField" , "selectors" : { "PointerField(Ruby,RubyClass)" : 1 , "StructLayout" : 1}},{ "className" : "org::jruby::RubyContinuation" , "selectors" : { "RubyContinuation(Ruby)" : 1 , "RubyContinuation(Ruby,String)" : 1 , "createContinuation(Ruby)" : 1 , "enter(ThreadContext,Block)" : 2 , "getContinuation()" : 1}},{ "className" : "org::jruby::util::TimeOutputFormatter" , "selectors" : { "TimeOutputFormatter(String,int)" : 1 , "format(String)" : 10 , "getFormatter()" : 2 , "getFormatter(String)" : 12 , "padding(String,char)" : 1}},{ "className" : "org::jruby::ast::FCallThreeArgBlockPassNode" , "selectors" : { "FCallThreeArgBlockPassNode(ISourcePosition,String,ArrayNode,BlockPassNode)" : 1}},{ "className" : "org::jruby::ast::FalseNode" , "selectors" : { "FalseNode(ISourcePosition)" : 1 , "interpret(Ruby,ThreadContext,IRubyObject,Block)" : 1}},{ "className" : "org::jruby::compiler::ir::dataflow::analyses::LiveVariableNode" , "selectors" : { "LiveVariableNode(DataFlowProblem,BasicBlock)" : 1 , "addDFVar(Variable)" : 2 , "getLiveInBitSet()" : 1 , "markDeadInstructions()" : 1 , "processClosure(IR_Closure,Collection<Variable>)" : 2}},{ "className" : "org::jruby::ext::ffi::jffi::FastLongMethodOneArg" , "selectors" : { "FastLongMethodOneArg(RubyModule,Function,LongResultConverter,LongParameterConverter[])" : 1 , "invoke(ThreadContext,IRubyObject)" : 2}},{ "className" : "org::jruby::RubyGC" , "selectors" : { "createGCModule(Ruby)" : 1 , "emptyImplementationWarning(Ruby,String)" : 3 , "start(ThreadContext,IRubyObject)" : 1}},{ "className" : "org::jruby::ast::DXStrNode" , "selectors" : { "DXStrNode(ISourcePosition)" : 2 , "DXStrNode(ISourcePosition,DStrNode)" : 2}},{ "className" : "org::jruby::test::ExpectedException" , "selectors" : { "ExpectedException()" : 1}},{ "className" : "org::jruby::RubyProcess::UserID" , "selectors" : { "eid(Ruby,IRubyObject)" : 2 , "rid(Ruby)" : 2 , "switch_rb(ThreadContext,IRubyObject,Block)" : 1}},{ "className" : "org::jruby::runtime::load::IAutoloadMethod" , "selectors" : { "file()" : 1 , "load(Ruby,String)" : 1}},{ "className" : "org::jruby::ext::ffi::jffi::DynamicLibrary::TextSymbolMemoryIO" , "selectors" : { "TextSymbolMemoryIO(Ruby,DynamicLibrary,long)" : 1}},{ "className" : "org::jruby::util::io::ChannelStream::OutputStreamAdapter" , "selectors" : { "OutputStreamAdapter(ChannelStream)" : 1 , "write(byte[],int,int)" : 1}},{ "className" : "java_integration::fixtures::SuperClass" , "selectors" : { "SuperClass()" : 1}},{ "className" : "org::jruby::parser::RubyParserResult" , "selectors" : { "RubyParserResult()" : 2 , "addBeginNode(PreExeNode)" : 2 , "getAST()" : 1 , "getBeginNodes()" : 2 , "getEndOffset()" : 1 , "getScope()" : 4 , "setAST(Node)" : 2 , "setEndOffset(int)" : 2 , "setScope(DynamicScope)" : 1}},{ "className" : "org::jruby::ast::java_signature::ParameterNode" , "selectors" : { "ParameterNode(TypeNode,String)" : 3 , "ParameterNode(TypeNode,String,boolean)" : 3 , "ParameterNode(TypeNode,String,boolean,boolean)" : 4 , "isVarArgs()" : 1}},{ "className" : "org::jruby::util::io::DirectoryAsFileException" , "selectors" : { "DirectoryAsFileException()" : 2}},{ "className" : "org::jruby::runtime::builtin::RubyJavaObject" , "selectors" : { "getMetaClass()" : 1}},{ "className" : "org::jruby::ext::ffi::Platform::CPU" , "selectors" : { "toString()" : 1}},{ "className" : "org::jruby::ext::ffi::ArrayMemoryIO::LittleEndianArrayIO" , "selectors" : { "getInt32(byte[],int)" : 1 , "getInt64(byte[],int)" : 1 , "putInt32(byte[],int,int)" : 1 , "putInt64(byte[],int,long)" : 1}},{ "className" : "org::jruby::ext::socket::RubyUNIXSocket" , "selectors" : { "RubyUNIXSocket(Ruby,RubyClass)" : 2 , "addr(ThreadContext)" : 1 , "addr(ThreadContext)::IntByReference" : 1 , "createUNIXSocket(Ruby)" : 1 , "getSocketType(IRubyObject)" : 1 , "init_sock(Ruby)" : 5 , "init_unixsock(Ruby,IRubyObject,boolean)" : 2 , "open(ThreadContext,IRubyObject,IRubyObject)" : 1 , "path(ThreadContext)" : 1 , "path(ThreadContext)::IntByReference" : 1 , "peeraddr(ThreadContext)" : 1 , "peeraddr(ThreadContext)::IntByReference" : 1 , "rb_sys_fail(Ruby,String)" : 13 , "recvfrom(ThreadContext,IRubyObject[])" : 1 , "recvfrom(ThreadContext,IRubyObject[])::ByteList" : 1 , "recvfrom(ThreadContext,IRubyObject[])::IntByReference" : 1 , "socketpair(ThreadContext,IRubyObject,IRubyObject[])" : 1 , "tryUnixDomainSocket()" : 1}},{ "className" : "org::jruby::compiler::ir::instructions::GET_ARRAY_Instr" , "selectors" : { "GET_ARRAY_Instr(Variable,Operand,int,boolean)" : 1}},{ "className" : "org::jruby::RubyModule::MethodClumper" , "selectors" : { "RubyModule" : 2 , "clump(Class)" : 2 , "getAllAnnotatedMethods()" : 1 , "getAnnotatedMethods()" : 2 , "getAnnotatedMethods1_8()" : 2 , "getAnnotatedMethods1_9()" : 2 , "getStaticAnnotatedMethods()" : 2 , "getStaticAnnotatedMethods1_8()" : 2 , "getStaticAnnotatedMethods1_9()" : 2}},{ "className" : "org::jruby::lexer::yacc::StrTerm" , "selectors" : { "parseString(RubyYaccLexer,LexerSource)" : 1}},{ "className" : "org::jruby::ext::ffi::StructLayout::Field" , "selectors" : { "Field(Ruby,RubyClass)" : 2 , "Field(Ruby,RubyClass,FieldIO)" : 7 , "Field(Ruby,RubyClass,Type,int,FieldIO)" : 8 , "checkType(IRubyObject)" : 2 , "init(IRubyObject,IRubyObject)" : 2 , "init(IRubyObject,IRubyObject,FieldIO)" : 4 , "isCacheable()" : 1 , "isValueReferenceNeeded()" : 1 , "offset()" : 1}},{ "className" : "org::jruby::ext::ffi::jffi::FastLongMethodFactory::Float32ResultConverter" , "selectors" : { "Float32ResultConverter()" : 1}},{ "className" : "org::jruby::util::IOChannel::IOWritableByteChannel" , "selectors" : { "IOWritableByteChannel(IRubyObject)" : 1}},{ "className" : "org::jruby::ext::ffi::Buffer::BufferAllocator" , "selectors" : { "BufferAllocator()" : 1}},{ "className" : "org::jruby::ast::ZeroArgNode" , "selectors" : { "ZeroArgNode(ISourcePosition)" : 2}},{ "className" : "org::jruby::compiler::ir::instructions::PUT_CONST_Instr" , "selectors" : { "PUT_CONST_Instr(IR_Scope,String,Operand)" : 1 , "PUT_CONST_Instr(Operand,String,Operand)" : 4}},{ "className" : "org::jruby::ext::ffi::Pointer::PointerAllocator" , "selectors" : { "PointerAllocator()" : 1}},{ "className" : "org::jruby::util::ShellLauncher::Pumper" , "selectors" : { "quit()" : 4 , "start()" : 2}},{ "className" : "org::jruby::ext::ffi::jffi::DefaultMethodFactory::Signed64Invoker" , "selectors" : { "Signed64Invoker()" : 1}},{ "className" : "org::jruby::runtime::CallSite" , "selectors" : { "CallSite(String,CallType)" : 2 , "call(ThreadContext,IRubyObject,IRubyObject)" : 18 , "call(ThreadContext,IRubyObject,IRubyObject,Block)" : 10 , "call(ThreadContext,IRubyObject,IRubyObject,IRubyObject)" : 40 , "call(ThreadContext,IRubyObject,IRubyObject,IRubyObject,Block)" : 12 , "call(ThreadContext,IRubyObject,IRubyObject,IRubyObject,IRubyObject)" : 15 , "call(ThreadContext,IRubyObject,IRubyObject,IRubyObject,IRubyObject,Block)" : 8 , "call(ThreadContext,IRubyObject,IRubyObject,IRubyObject,IRubyObject,IRubyObject)" : 12 , "call(ThreadContext,IRubyObject,IRubyObject,IRubyObject,IRubyObject,IRubyObject,Block)" : 8 , "call(ThreadContext,IRubyObject,IRubyObject,IRubyObject[])" : 17 , "call(ThreadContext,IRubyObject,IRubyObject,IRubyObject[],Block)" : 13 , "call(ThreadContext,IRubyObject,IRubyObject,long)" : 1 , "callIter(ThreadContext,IRubyObject,IRubyObject,Block)" : 2 , "callIter(ThreadContext,IRubyObject,IRubyObject,IRubyObject,Block)" : 3 , "callIter(ThreadContext,IRubyObject,IRubyObject,IRubyObject,IRubyObject,Block)" : 3 , "callIter(ThreadContext,IRubyObject,IRubyObject,IRubyObject,IRubyObject,IRubyObject,Block)" : 3 , "callIter(ThreadContext,IRubyObject,IRubyObject,IRubyObject[],Block)" : 1}},{ "className" : "org::jruby::runtime::load::LoadService19" , "selectors" : { "LoadService19(Ruby)" : 1}},{ "className" : "org::jruby::util::ShellLauncher" , "selectors" : { "execAndWait(Ruby,IRubyObject[])" : 1 , "filenameIsPathSearchable(String,boolean)" : 1 , "findPathExecutable(Ruby,String)" : 2 , "findPathFile(Ruby,String,String[],boolean)" : 1 , "getCurrentEnv(Ruby)" : 6 , "getPidFromProcess(Process)" : 3 , "getShell(Ruby)" : 2 , "handleStreams(Ruby,Process,InputStream,OutputStream,OutputStream)" : 1 , "isValidFile(Ruby,String,String,boolean)" : 2 , "isValidFile(Ruby,String,boolean)" : 1 , "log(Ruby,String)" : 8 , "parseCommandLine(ThreadContext,Ruby,IRubyObject[])" : 2 , "popen(Ruby,IRubyObject,ModeFlags)" : 1 , "popen3(Ruby,IRubyObject[])" : 1 , "popenShared(Ruby,IRubyObject[])" : 3 , "reflectPidFromProcess(Process)" : 2 , "run(Ruby,IRubyObject[],boolean)" : 2 , "runAndWait(Ruby,IRubyObject[])" : 2 , "runAndWait(Ruby,IRubyObject[],OutputStream)" : 3 , "runAndWait(Ruby,IRubyObject[],OutputStream,boolean)" : 2 , "runWithoutWait(Ruby,IRubyObject[])" : 2 , "runWithoutWait(Ruby,IRubyObject[],OutputStream)" : 1 , "tryFile(Ruby,String,String)" : 3 , "unwrapBufferedStream(InputStream)" : 5 , "unwrapBufferedStream(OutputStream)" : 4 , "withExeSuffix(String)" : 1}},{ "className" : "org::jruby::javasupport::JavaSupport" , "selectors" : { "JavaSupport(Ruby)" : 2 , "createRaiseException(Throwable,Member)" : 1 , "getArrayProxyClass()" : 1 , "getConcreteProxyClass()" : 2 , "getJavaArrayClass()" : 2 , "getJavaArrayUtilitiesModule()" : 1 , "getJavaClassClass()" : 7 , "getJavaClassFromCache(Class)" : 2 , "getJavaConstructorClass()" : 1 , "getJavaFieldClass()" : 1 , "getJavaInterfaceTemplate()" : 1 , "getJavaMethodClass()" : 1 , "getJavaModule()" : 13 , "getJavaObjectClass()" : 1 , "getJavaProxyClass()" : 4 , "getJavaUtilitiesModule()" : 2 , "getNameClassMap()" : 2 , "getObjectJavaClass()" : 1 , "getObjectProxyCache()" : 4 , "getPackageModuleTemplate()" : 1 , "handleNativeException(Throwable,Member)" : 10 , "loadJavaClass(String)" : 2 , "loadJavaClassQuiet(String)" : 2 , "loadJavaClassVerbose(String)" : 1 , "putJavaClassIntoCache(JavaClass)" : 1 , "setActive(boolean)" : 1 , "setObjectJavaClass(JavaClass)" : 1}},{ "className" : "org::jruby::util::WeakIdentityHashMap::Entry" , "selectors" : { "Entry(int,Object,Object,Entry,ReferenceQueue)" : 1 , "getKey()" : 1 , "getMaskedKey()" : 2 , "getValue()" : 4 , "sameKey(int,Object)" : 5 , "setValue(Object)" : 1}},{ "className" : "java::math::RoundingMode" , "selectors" : { "valueOf(int)" : 1}},{ "className" : "org::jruby::runtime::scope::DummyDynamicScope" , "selectors" : { "DummyDynamicScope(StaticScope)" : 1 , "DummyDynamicScope(StaticScope,DynamicScope)" : 2 , "growIfNeeded(int,String)" : 1}},{ "className" : "org::jruby::anno::AnnotationBinder::AnnotationBindingProcessor" , "selectors" : { "AnnotationBindingProcessor(???)" : 1 , "getArityValue(JRubyMethod,int)" : 1 , "getCallConfigName(boolean,boolean,boolean)" : 1 , "getCallConfigNameByAnno(JRubyMethod)" : 2}},{ "className" : "org::jruby::runtime::GlobalVariable::Copy" , "selectors" : { "GlobalVariable" : 1}},{ "className" : "org::jruby::runtime::MethodIndex" , "selectors" : { "getCallSite(String)" : 10 , "getFastOpsCallSite(String)" : 2 , "getFunctionalCallSite(String)" : 20 , "getIndex(String)" : 27 , "getSuperCallSite()" : 4 , "getVariableCallSite(String)" : 4}},{ "className" : "org::jruby::runtime::load::LoadService::NormalSearcher" , "selectors" : { "NormalSearcher()" : 1}},{ "className" : "java::util::List" , "selectors" : { "add(E)" : 20900 , "add(int,E)" : 558 , "addAll(Collection<? extends E>)" : 1466 , "addAll(int,Collection<? extends E>)" : 47 , "clear()" : 1272 , "contains(Object)" : 2023 , "containsAll(Collection<?>)" : 116 , "equals(Object)" : 516 , "get(???)" : 12 , "get(int)" : 15888 , "getItems(???)" : 2 , "hashCode()" : 101 , "indexOf(Object)" : 468 , "isEmpty()" : 2047 , "iterator()" : 5359 , "lastIndexOf(Object)" : 28 , "listIterator()" : 244 , "listIterator(int)" : 97 , "remove(Object)" : 1132 , "remove(int)" : 848 , "removeAll(Collection<?>)" : 103 , "retainAll(Collection<?>)" : 30 , "set(int,E)" : 345 , "size()" : 19385 , "size(???)" : 11 , "subList(int,int)" : 177 , "toArray()" : 377 , "toArray(T[])" : 1614}},{ "className" : "org::jruby::test::TestHelper" , "selectors" : { "TestHelper(String)" : 1 , "privateMethod()" : 1 , "staticPrivateMethod()" : 1 , "unrollException(InvocationTargetException)" : 1}},{ "className" : "org::jruby::ast::CallTwoArgBlockPassNode" , "selectors" : { "CallTwoArgBlockPassNode(ISourcePosition,Node,String,ArrayNode,BlockPassNode)" : 1}},{ "className" : "org::jruby::ext::ffi::jffi::FastLongMethod" , "selectors" : { "FastLongMethod(RubyModule,Function,LongResultConverter,LongParameterConverter[])" : 4}},{ "className" : "org::jruby::util::Join::FastReaction" , "selectors" : { "react(Join,Object[])" : 1}},{ "className" : "org::jruby::javasupport::JavaClass::StaticFieldSetterInstaller" , "selectors" : { "StaticFieldSetterInstaller(String,Field)" : 1}},{ "className" : "org::jruby::RubyComparable" , "selectors" : { "callCmpMethod(ThreadContext,IRubyObject,IRubyObject,IRubyObject)" : 2 , "cmperr(IRubyObject,IRubyObject)" : 7 , "cmpint(ThreadContext,IRubyObject,IRubyObject,IRubyObject)" : 23 , "createComparable(Ruby)" : 1 , "op_equal(ThreadContext,IRubyObject,IRubyObject)" : 1 , "op_ge(ThreadContext,IRubyObject,IRubyObject)" : 3 , "op_gt(ThreadContext,IRubyObject,IRubyObject)" : 4 , "op_le(ThreadContext,IRubyObject,IRubyObject)" : 3 , "op_lt(ThreadContext,IRubyObject,IRubyObject)" : 4}},{ "className" : "org::jruby::Finalizable" , "selectors" : { "finalize()" : 2}},{ "className" : "org::jruby::ext::ffi::Buffer" , "selectors" : { "Buffer(Ruby,IRubyObject,MemoryIO,long,int,int)" : 5 , "Buffer(Ruby,RubyClass)" : 1 , "Buffer(Ruby,byte[],int,int)" : 2 , "Buffer(Ruby,int,int)" : 2 , "allocate(ThreadContext,IRubyObject,IRubyObject,int,int)" : 9 , "createBufferClass(Ruby,RubyModule)" : 1 , "getCount(IRubyObject)" : 4 , "getInOutFlags()" : 1 , "init(ThreadContext,IRubyObject,int,int)" : 3}},{ "className" : "org::jruby::ast::ClassVarDeclNode" , "selectors" : { "ClassVarDeclNode(ISourcePosition,String,Node)" : 1 , "getName()" : 6}},{ "className" : "org::jruby::internal::runtime::methods::JavaMethod::JavaMethodTwoOrThreeOrN" , "selectors" : { "JavaMethodTwoOrThreeOrN(RubyModule,Visibility)" : 1 , "JavaMethodTwoOrThreeOrN(RubyModule,Visibility,CallConfiguration)" : 1 , "call(ThreadContext,IRubyObject,RubyModule,String,IRubyObject,IRubyObject,IRubyObject)" : 2}},{ "className" : "org::jruby::ext::ffi::jffi::FastLongMethodFactory::Float64ResultConverter" , "selectors" : { "Float64ResultConverter()" : 1}},{ "className" : "org::jruby::ast::Hash19Node" , "selectors" : { "Hash19Node(ISourcePosition,ListNode)" : 5}},{ "className" : "org::jruby::demo::TextAreaReadline::ReadRequest" , "selectors" : { "ReadRequest(byte[],int,int)" : 1 , "perform(Join,InputBuffer)" : 2}},{ "className" : "org::jruby::environment::OSEnvironment" , "selectors" : { "OSEnvironment()" : 1 , "getAsMapOfRubyStrings(Ruby,Set)" : 3 , "getEnvironmentVariableMap(Ruby)" : 1 , "getSystemPropertiesMap(Ruby)" : 1}},{ "className" : "org::jruby::compiler::util::HandleFactory::Handle" , "selectors" : { "fail()" : 5 , "invoke(Object)" : 1 , "invoke(Object,Object)" : 3 , "invoke(Object,Object,Object)" : 1 , "invoke(Object,Object,Object,Object)" : 1 , "invoke(Object,Object[])" : 3}},{ "className" : "org::jruby::ast::FCallManyArgsBlockPassNode" , "selectors" : { "FCallManyArgsBlockPassNode(ISourcePosition,String,Node,BlockPassNode)" : 1}},{ "className" : "org::jruby::embed::variable::AbstractVariable" , "selectors" : { "AbstractVariable(IRubyObject,String,IRubyObject)" : 5 , "AbstractVariable(Ruby,String,Object[])" : 6 , "getRubyClass(Ruby)" : 3 , "isValidName(String,Object)" : 7 , "updateJavaObject(Ruby,Object)" : 3 , "updateRubyObject(IRubyObject)" : 2}},{ "className" : "org::jruby::runtime::CompiledBlockLight" , "selectors" : { "CompiledBlockLight(Arity,StaticScope,CompiledBlockCallback,boolean,int)" : 3 , "newCompiledBlockLight(Arity,StaticScope,CompiledBlockCallback,boolean,int)" : 1}},{ "className" : "org::jruby::ext::ffi::jffi::AllocatedNativeMemoryIO::MemoryHolder" , "selectors" : { "MemoryHolder(AllocatedNativeMemoryIO,long)" : 1 , "free()" : 2}},{ "className" : "org::jruby::javasupport::proxy::JavaProxyInvocationHandler" , "selectors" : { "getOrig()" : 1}},{ "className" : "org::jruby::runtime::assigner::Pre0Rest1Post0BlockAssigner" , "selectors" : { "Pre0Rest1Post0BlockAssigner(Node,Node)" : 1}},{ "className" : "org::jruby::runtime::assigner::Pre3Rest1Post0BlockAssigner" , "selectors" : { "Pre3Rest1Post0BlockAssigner(Node,Node,Node,Node,Node)" : 1 , "assign(Ruby,ThreadContext,IRubyObject,Block)" : 2 , "assign(Ruby,ThreadContext,IRubyObject,IRubyObject,Block)" : 2 , "assign(Ruby,ThreadContext,IRubyObject,IRubyObject,IRubyObject,Block)" : 2 , "assign(Ruby,ThreadContext,IRubyObject,IRubyObject,IRubyObject,IRubyObject,Block)" : 2}},{ "className" : "org::jruby::embed::variable::InstanceVariable" , "selectors" : { "InstanceVariable(IRubyObject,String,IRubyObject)" : 2 , "InstanceVariable(Ruby,String,Object[])" : 1 , "getInstance(Ruby,String,Object[])" : 2 , "isValidName(Object)" : 2 , "retrieve(Ruby,IRubyObject,BiVariableMap)" : 1}},{ "className" : "java::io::FilterOutputStream" , "selectors" : { "FilterOutputStream(OutputStream)" : 37 , "close()" : 398 , "flush()" : 30 , "write(byte[])" : 361 , "write(byte[],int,int)" : 1 , "write(int)" : 55}},{ "className" : "java::nio::channels::ReadableByteChannel" , "selectors" : { "read(ByteBuffer)" : 20}},{ "className" : "org::jruby::compiler::ir::instructions::PUT_FIELD_Instr" , "selectors" : { "PUT_FIELD_Instr(Operand,String,Operand)" : 3}},{ "className" : "org::jruby::JRubyService::Configuration" , "selectors" : { "Configuration(String)" : 2 , "getCommand()" : 2 , "getKey()" : 6 , "getPort()" : 4 , "isDebug()" : 9 , "noMore()" : 1 , "terminate()" : 1}},{ "className" : "org::jruby::util::SunSignalFacade" , "selectors" : { "trap(Ruby,JRubySignalHandler)" : 2}},{ "className" : "org::jruby::compiler::ir::instructions::THROW_EXCEPTION_Instr" , "selectors" : { "THROW_EXCEPTION_Instr(Operand)" : 1}},{ "className" : "org::jruby::exceptions::JumpException::BreakJump" , "selectors" : { "JumpException" : 2}},{ "className" : "org::jruby::ast::FileNode" , "selectors" : { "FileNode(???)" : 1}},{ "className" : "org::jruby::ast::EnsureNode" , "selectors" : { "EnsureNode(ISourcePosition,Node,Node)" : 2 , "getBodyNode()" : 5 , "getEnsureNode()" : 4}},{ "className" : "org::jruby::ext::ffi::jffi::DefaultMethodFactory::Signed64Marshaller" , "selectors" : { "Signed64Marshaller()" : 1}},{ "className" : "org::jruby::compiler::ir::instructions::CLOSURE_RETURN_Instr" , "selectors" : { "CLOSURE_RETURN_Instr(Operand)" : 3}},{ "className" : "org::jruby::RubyObjectSpace" , "selectors" : { "createObjectSpaceModule(Ruby)" : 1 , "each_object(ThreadContext,IRubyObject,IRubyObject[],Block)" : 1}},{ "className" : "org::jruby::internal::runtime::methods::FullFunctionCallbackMethod" , "selectors" : { "FullFunctionCallbackMethod(RubyModule,Callback,Visibility)" : 3 , "getCallback()" : 1}},{ "className" : "org::jruby::interpreter::LiveScope" , "selectors" : { "allocateVariableStore()" : 1}},{ "className" : "org::jruby::ext::ffi::jffi::FastIntMethodFactory::Signed16ParameterConverter" , "selectors" : { "Signed16ParameterConverter()" : 1}},{ "className" : "org::jruby::util::WeakIdentityHashMap::EntryIterator" , "selectors" : { "EntryIterator()" : 1 , "locateNext()" : 3}},{ "className" : "org::jruby::javasupport::proxy::JavaProxyClass::ProxyMethodImpl" , "selectors" : { "ProxyMethodImpl(Ruby,JavaProxyClass,Method,Method)" : 1 , "argument_types()" : 1 , "createJavaProxyMethodClass(Ruby,RubyModule)" : 1 , "getArity()" : 3 , "getDeclaringClass()" : 1 , "getName()" : 2 , "getParameterTypes()" : 4 , "getReturnType()" : 1 , "hasSuperImplementation()" : 2 , "matches(String,Class[])" : 1 , "nameOnInspection()" : 1}},{ "className" : "org::jruby::RubyModule::KindOf" , "selectors" : { "KindOf()" : 1 , "isKindOf(IRubyObject,RubyModule)" : 1}},{ "className" : "org::jruby::runtime::assigner::Pre3Rest0Post0BlockAssigner" , "selectors" : { "Pre3Rest0Post0BlockAssigner(Node,Node,Node,Node)" : 1 , "assign(Ruby,ThreadContext,IRubyObject,Block)" : 1 , "assign(Ruby,ThreadContext,IRubyObject,IRubyObject,Block)" : 1 , "assign(Ruby,ThreadContext,IRubyObject,IRubyObject,IRubyObject,Block)" : 1 , "assign(Ruby,ThreadContext,IRubyObject,IRubyObject,IRubyObject,IRubyObject,Block)" : 5}},{ "className" : "org::jruby::RubyMethod" , "selectors" : { "RubyMethod(Ruby,RubyClass)" : 2 , "arity()" : 1 , "bmcall(IRubyObject,IRubyObject,IRubyObject,Block)" : 1 , "call(ThreadContext,IRubyObject[],Block)" : 5 , "createMethodClass(Ruby)" : 1 , "mproc(ThreadContext,Block)" : 1 , "newMethod(RubyModule,String,RubyModule,String,DynamicMethod,IRubyObject)" : 7 , "to_proc(ThreadContext,Block)" : 1 , "unbind(Block)" : 1}},{ "className" : "org::jruby::internal::runtime::methods::CompiledMethod::LazyCompiledMethod" , "selectors" : { "LazyCompiledMethod(RubyModule,String,Arity,Visibility,StaticScope,Object,CallConfiguration,ISourcePosition,MethodFactory)" : 1 , "initializeMethod()" : 22}},{ "className" : "org::jruby::lexer::yacc::HeredocTerm" , "selectors" : { "HeredocTerm(???)" : 1 , "parseString(RubyYaccLexer,LexerSource)::ByteList" : 1 , "syntaxError(LexerSource)" : 4}},{ "className" : "org::jruby::util::io::ChannelStream" , "selectors" : { "ChannelStream(Ruby,ChannelDescriptor)" : 2 , "ChannelStream(Ruby,ChannelDescriptor,ModeFlags)" : 1 , "bufferedInputBytesRemaining()" : 7 , "bufferedOutputSpaceRemaining()" : 1 , "bufferedRead()" : 1 , "bufferedRead(ByteBuffer,boolean)" : 3 , "bufferedRead(int)::ByteList" : 1 , "bufferedWrite(ByteBuffer)" : 3 , "bufferedWrite(int)" : 1 , "checkReadable()" : 9 , "checkWritable()" : 5 , "close()" : 2 , "closeForFinalize()" : 1 , "copyBufferedBytes(ByteBuffer)" : 3 , "copyBufferedBytes(byte[],int,int)" : 1 , "ensureRead()" : 7 , "ensureReadNonBuffered()" : 1 , "ensureWrite()" : 4 , "fclose()" : 2 , "fdopen(Ruby,ChannelDescriptor,ModeFlags)" : 7 , "feof()" : 2 , "fgets(ByteList)::ByteList" : 1 , "flushWrite()" : 16 , "flushWrite(boolean)" : 2 , "fopen(Ruby,String,ModeFlags)" : 2 , "fread(int)::ByteList" : 1 , "getDescriptor()" : 9 , "getRuntime()" : 4 , "hasBufferedInputBytes()" : 2 , "hasBufferedOutputSpace()" : 1 , "invalidateBuffer()" : 1 , "isBlocking()" : 1 , "isSync()" : 5 , "lseek(long,int)" : 1 , "maybeWrapWithLineEndingWrapper(Stream,ModeFlags)" : 2 , "newInputStream()" : 1 , "open(Ruby,ChannelDescriptor)" : 13 , "read()" : 5 , "read(ByteBuffer)" : 1 , "read(ByteBuffer,boolean)" : 1 , "read(int)::ByteList" : 1 , "readall()::ByteList" : 3 , "readnonblock(???)" : 1 , "readpartial(???)" : 1 , "ready()" : 1 , "refillBuffer()" : 6 , "resetForWrite()" : 1 , "ungetc(int)" : 1}},{ "className" : "org::jruby::runtime::scope::ManyVarsDynamicScope" , "selectors" : { "ManyVarsDynamicScope(StaticScope,DynamicScope)" : 11 , "allocate()" : 2 , "assertGetValue(int,int)" : 1 , "assertGetValueDepthZeroOrNil(int)" : 1 , "assertGetValueOneDepthZeroOrNil()" : 1 , "assertGetValueThreeDepthZeroOrNil()" : 1 , "assertGetValueTwoDepthZeroOrNil()" : 1 , "assertGetValueZeroDepthZeroOrNil()" : 1 , "assertParent()" : 1 , "assertSetValue(int,IRubyObject)" : 1 , "assertSetValueDepthZero(int,IRubyObject)" : 1 , "assertSetValueOneDepthZero(IRubyObject)" : 1 , "assertSetValueThreeDepthZero(IRubyObject)" : 1 , "assertSetValueTwoDepthZero(IRubyObject)" : 1 , "assertSetValueZeroDepthZero(IRubyObject)" : 1 , "getValue(int,int)" : 1 , "getValueDepthZeroOrNil(int,IRubyObject)" : 1 , "getValues()" : 1 , "setValue(int,IRubyObject,int)" : 1 , "setValueDepthZero(IRubyObject,int)" : 2 , "setValueOneDepthZero(IRubyObject)" : 1 , "setValueThreeDepthZero(IRubyObject)" : 1 , "setValueTwoDepthZero(IRubyObject)" : 1 , "setValueZeroDepthZero(IRubyObject)" : 1}},{ "className" : "org::jruby::util::Sprintf" , "selectors" : { "checkOffset(Args,int,int,String)" : 7 , "extendWidth(Args,int,byte)" : 4 , "getBignumBytes(RubyBignum,int,boolean,boolean)" : 1 , "getFixnumBytes(RubyFixnum,int,boolean,boolean)" : 1 , "getUnsignedNegativeBytes(RubyInteger)" : 2 , "isDigit(byte)" : 4 , "isPrintable(byte)" : 1 , "raiseArgumentError(Args,String)" : 10 , "round(byte[],int,int,boolean)" : 4 , "skipSignBits(byte[],int)" : 1 , "sprintf(???)" : 14 , "sprintf1_9(???)" : 1 , "stringToBytes(CharSequence,boolean)" : 4 , "warning(ID,Args,String)" : 1}},{ "className" : "org::jruby::libraries::ThreadLibrary::Queue" , "selectors" : { "Queue(Ruby,RubyClass)" : 3 , "checkShutdown(ThreadContext)" : 8 , "clear(ThreadContext)" : 1 , "java_length()" : 3 , "pop(ThreadContext,IRubyObject[])" : 1 , "push(ThreadContext,IRubyObject)" : 1 , "setup(Ruby)" : 1}},{ "className" : "org::jruby::ext::ffi::jffi::FastIntMethodZeroArg" , "selectors" : { "FastIntMethodZeroArg(RubyModule,Function,IntResultConverter,IntParameterConverter[])" : 2}},{ "className" : "org::jruby::compiler::ir::operands::GlobalVariable" , "selectors" : { "GlobalVariable(String)" : 2}},{ "className" : "org::jruby::internal::runtime::methods::CallConfiguration" , "selectors" : { "framing()" : 2 , "getCallConfig(boolean,boolean,boolean)" : 2 , "getCallConfigByAnno(JRubyMethod)" : 5 , "isNoop()" : 13 , "post(ThreadContext)" : 5 , "pre(ThreadContext,IRubyObject,RubyModule,String,Block,StaticScope)" : 5 , "scoping()" : 1}},{ "className" : "org::jruby::RubyStruct" , "selectors" : { "RubyStruct(Ruby,RubyClass)" : 2 , "aref(IRubyObject)" : 3 , "aset(IRubyObject,IRubyObject)" : 1 , "classOf()" : 6 , "createStructClass(Ruby)" : 1 , "each(ThreadContext,Block)" : 1 , "each_pair(ThreadContext,Block)" : 1 , "get(int)" : 2 , "getByName(String)" : 1 , "getInternalVariable(RubyClass,String)" : 8 , "inspectStruct(ThreadContext)" : 1 , "inspectStruct(ThreadContext)::ByteList" : 1 , "marshalTo(RubyStruct,MarshalStream)" : 1 , "members(IRubyObject,Block)" : 3 , "modify()" : 4 , "newInstance(IRubyObject,IRubyObject[],Block)" : 3 , "newStruct(IRubyObject,IRubyObject[],Block)" : 6 , "notStructMemberError(String)" : 2 , "pathToClass(Ruby,String)" : 1 , "set(IRubyObject,int)" : 2 , "setByName(String,IRubyObject)" : 1 , "unmarshalFrom(UnmarshalStream)" : 1}},{ "className" : "org::jruby::util::CompoundJarURLStreamHandler::CompoundJarURLConnection" , "selectors" : { "CompoundJarURLConnection(URL)" : 1 , "close(Closeable)" : 2 , "openEntry(String[],JarInputStream,int)" : 2}},{ "className" : "org::jruby::internal::runtime::methods::JavaMethod::JavaMethodOneOrTwoOrNBlock" , "selectors" : { "JavaMethodOneOrTwoOrNBlock(RubyModule,Visibility)" : 2 , "JavaMethodOneOrTwoOrNBlock(RubyModule,Visibility,CallConfiguration)" : 2 , "call(ThreadContext,IRubyObject,RubyModule,String,IRubyObject,IRubyObject,Block)" : 3}},{ "className" : "org::jruby::javasupport::bsf::BSFExample" , "selectors" : { "BSFExample(???)" : 1 , "initUI()" : 1 , "main(String[])::BSFManager" : 1}},{ "className" : "org::jruby::java::invokers::InstanceFieldGetter" , "selectors" : { "InstanceFieldGetter(String,RubyModule,Field)" : 2}},{ "className" : "org::jruby::compiler::ir::operands::KeyValuePair" , "selectors" : { "KeyValuePair(Operand,Operand)" : 1}},{ "className" : "org::jruby::test::TestHelper::TestHelperException" , "selectors" : { "TestHelperException()" : 1}},{ "className" : "org::jruby::ext::ffi::jffi::DefaultMethodFactory::Signed16Marshaller" , "selectors" : { "Signed16Marshaller()" : 1}},{ "className" : "org::jruby::javasupport::test::SimpleInterface" , "selectors" : { "getEmptyList()" : 1 , "getEmptyMap()" : 1 , "getList()" : 2 , "getMap()" : 4 , "getNestedList()" : 1 , "getNilList()" : 1 , "getNilMap()" : 1 , "isNilListNil()" : 1 , "isNilMapNil()" : 1 , "modifyNestedList()" : 1 , "setNilList(List)" : 1 , "setNilMap(Map)" : 1}},{ "className" : "org::jruby::ast::executable::Script" , "selectors" : { "__file__(ThreadContext,IRubyObject,Block)" : 5 , "__file__(ThreadContext,IRubyObject,IRubyObject,Block)" : 4 , "__file__(ThreadContext,IRubyObject,IRubyObject,IRubyObject,Block)" : 4 , "__file__(ThreadContext,IRubyObject,IRubyObject,IRubyObject,IRubyObject,Block)" : 4 , "__file__(ThreadContext,IRubyObject,IRubyObject[],Block)" : 9 , "load(ThreadContext,IRubyObject,IRubyObject[],Block)" : 3 , "setFilename(String)" : 2}},{ "className" : "org::jruby::embed::bsf::JRubyEngineTest" , "selectors" : { "testApply()::BSFManager" : 1 , "testCall()::BSFManager" : 1 , "testDeclareBean()::BSFManager" : 1 , "testEval()::BSFManager" : 1 , "testExec()::BSFManager" : 1 , "testHandleException()::BSFManager" : 1 , "testInitialize()::BSFManager" : 1 , "testLVar()::BSFManager" : 1 , "testPathTyp()::BSFManager" : 1 , "testRubyVersion()::BSFManager" : 1 , "testTerminate()::BSFManager" : 1 , "testUndeclareBean()::BSFManager" : 1}},{ "className" : "org::jruby::test::Parent" , "selectors" : { "run(String)" : 1}},{ "className" : "org::jruby::RubyArray::RubyArrayConversionIterator" , "selectors" : { "RubyArrayConversionIterator()" : 1}},{ "className" : "org::jruby::ast::FCallManyArgsNode" , "selectors" : { "FCallManyArgsNode(ISourcePosition,String,Node)" : 1}},{ "className" : "org::jruby::runtime::NullBlockBody" , "selectors" : { "NullBlockBody()" : 1}},{ "className" : "org::jruby::runtime::component::VariableEntry" , "selectors" : { "getName()" : 1}},{ "className" : "org::jruby::internal::runtime::methods::JavaMethod::JavaMethodOneOrTwoOrThreeOrN" , "selectors" : { "JavaMethodOneOrTwoOrThreeOrN(RubyModule,Visibility)" : 1 , "JavaMethodOneOrTwoOrThreeOrN(RubyModule,Visibility,CallConfiguration)" : 1 , "call(ThreadContext,IRubyObject,RubyModule,String,IRubyObject,IRubyObject,IRubyObject)" : 2}},{ "className" : "org::jruby::ast::FlipNode" , "selectors" : { "FlipNode(ISourcePosition,Node,Node,boolean,int)" : 1 , "falseIfTrue(Ruby,IRubyObject)" : 1 , "getBeginNode()" : 3 , "getDepth()" : 5 , "getEndNode()" : 4 , "getIndex()" : 6 , "isExclusive()" : 2 , "trueIfTrue(Ruby,IRubyObject)" : 1}},{ "className" : "org::jruby::ext::ffi::ArrayMemoryIO::BE64ArrayIO" , "selectors" : { "BE64ArrayIO()" : 1}},{ "className" : "org::jruby::test::bench::BenchIntFibRecursive" , "selectors" : { "benchBoxedFib(int)" : 1 , "benchIntFib(int)" : 1 , "benchIntegerFib(int)" : 1 , "boxedFib(BoxedInt)" : 3 , "intFib(int)" : 3 , "integerFib(Integer)" : 3}},{ "className" : "org::jruby::RubyHash::VisitorIOException" , "selectors" : { "VisitorIOException(Throwable)" : 1}},{ "className" : "org::jruby::runtime::callsite::MinusCallSite" , "selectors" : { "MinusCallSite()" : 1}},{ "className" : "org::jruby::util::io::CRLFStreamWrapper" , "selectors" : { "CRLFStreamWrapper(Stream)" : 1 , "convertCRLFToLF(ByteList)::ByteList" : 1 , "convertLFToCRLF(ByteList)::ByteList" : 1 , "fgetc()" : 1 , "fread(int)::ByteList" : 2 , "getline(ByteList,byte)::ByteList" : 1 , "getline(ByteList,byte,long)::ByteList" : 1}},{ "className" : "org::jruby::runtime::callsite::VariableCachingCallSite" , "selectors" : { "VariableCachingCallSite(String)" : 1}},{ "className" : "org::jruby::ext::ffi::jffi::DynamicLibrary" , "selectors" : { "DynamicLibrary(???)" : 1 , "createDynamicLibraryClass(Ruby,RubyModule)" : 1 , "getNativeLibrary(???)" : 1 , "getNativeLibraryFlags(IRubyObject)" : 1}},{ "className" : "org::jruby::ant::RakeTaskBase" , "selectors" : { "acquireRakeReference()" : 1 , "execute(???)" : 2 , "handleFilenameArgument()" : 2 , "rakeMethod(String,Object)::BuildException" : 1}},{ "className" : "org::jruby::ext::ffi::jffi::DefaultMethodFactory::Float32Marshaller" , "selectors" : { "Float32Marshaller()" : 1}},{ "className" : "org::jruby::ext::ffi::io::FileDescriptorByteChannel" , "selectors" : { "FileDescriptorByteChannel(int)" : 1}},{ "className" : "org::jruby::exceptions::JumpException::RetryJump" , "selectors" : { "RetryJump()" : 1}},{ "className" : "org::jruby::RubyTempfile::Reaper" , "selectors" : { "Reaper(RubyTempfile,Ruby,File,OpenFile)" : 1 , "release()" : 1}},{ "className" : "org::jruby::util::ShellLauncher::PidGetter" , "selectors" : { "getPid(Process)" : 1}},{ "className" : "org::jruby::ext::ffi::jffi::FastLongMethodFactory::Signed16ParameterConverter" , "selectors" : { "Signed16ParameterConverter()" : 1}},{ "className" : "org::jruby::RubyGlobal::InputGlobalVariable" , "selectors" : { "InputGlobalVariable(Ruby,String,IRubyObject)" : 2}},{ "className" : "org::jruby::javasupport::test::Interface2" , "selectors" : { "method2()" : 1}},{ "className" : "org::jruby::runtime::callback::ReflectionCallback" , "selectors" : { "ReflectionCallback(Class,String,Class[],boolean,boolean,Arity,boolean)" : 27 , "loadMethod(boolean)" : 1 , "packageRestArgumentsForReflection(Object[])" : 1}},{ "className" : "org::jruby::ast::RedoNode" , "selectors" : { "RedoNode(ISourcePosition)" : 2}},{ "className" : "org::jruby::ast::IArgumentNode" , "selectors" : { "getArgsNode()" : 2 , "setArgsNode(Node)" : 1}},{ "className" : "org::jruby::util::Join" , "selectors" : { "Join(long,Reaction[][],Executor)" : 1 , "call(Enum<?>,Object)" : 3 , "call(int,Object)" : 1 , "isAsync(int)" : 2 , "send(Enum<?>,Object)" : 16 , "send(int,Object)" : 1 , "sendRaw(int,Object)" : 4}},{ "className" : "org::jruby::anno::TypePopulator" , "selectors" : { "populate(RubyModule,Class)" : 1}},{ "className" : "org::jruby::ast::types::IArityNode" , "selectors" : { "getArity()" : 1}},{ "className" : "org::jruby::maven::AbstractJRubyMojo::LogAdapter" , "selectors" : { "LogAdapter()" : 1}},{ "className" : "org::jruby::util::ClassProvider" , "selectors" : { "defineClassUnder(RubyModule,String,RubyClass)" : 1 , "defineModuleUnder(RubyModule,String)" : 1}},{ "className" : "org::jruby::test::TestUnitTestSuite::ScriptTest" , "selectors" : { "ScriptTest(String,File,Interpreter)" : 2 , "generateTestScript(String,String)" : 1 , "getTestClassNamesFromReadingTestScript(String)" : 1 , "pretty(List)" : 1 , "scriptName()" : 4}},{ "className" : "org::jruby::libraries::ThreadLibrary::SizedQueue" , "selectors" : { "SizedQueue(Ruby,RubyClass)" : 2 , "setup(Ruby)" : 1}},{ "className" : "org::jruby::runtime::EventHookTest::NativeTracer" , "selectors" : { "NativeTracer()" : 1}},{ "className" : "org::jruby::runtime::load::LoadService::ScriptClassSearcher::ScriptClassLibrary" , "selectors" : { "ScriptClassLibrary(Script)" : 1}},{ "className" : "org::jruby::IncludedModuleWrapper" , "selectors" : { "IncludedModuleWrapper(Ruby,RubyClass,RubyModule)" : 3 , "getNonIncludedClass()" : 2}},{ "className" : "org::jruby::ast::CallThreeArgNode" , "selectors" : { "CallThreeArgNode(ISourcePosition,Node,String,ArrayNode)" : 1}},{ "className" : "java::nio::channels::WritableByteChannel" , "selectors" : { "write(ByteBuffer)" : 16}},{ "className" : "org::jruby::ast::TypedArgumentNode" , "selectors" : { "TypedArgumentNode(ISourcePosition,String,Node)" : 2 , "getTypeNode()" : 1}},{ "className" : "org::jruby::BasicObjectStub" , "selectors" : { "anyToString(IRubyObject)" : 1 , "callMethod(IRubyObject,ThreadContext,String,IRubyObject)" : 1 , "checkStringType(IRubyObject)" : 1 , "convertToInteger(IRubyObject,String)" : 2 , "getInstanceVariables(IRubyObject)" : 1 , "getMetaClass(IRubyObject)" : 7 , "getRuntime(IRubyObject)" : 22 , "hasVariables(IRubyObject)" : 1 , "inspect(IRubyObject)" : 1 , "inspectObj(IRubyObject,StringBuilder)" : 1 , "isTaint(IRubyObject)" : 2}},{ "className" : "org::jruby::RubyHash::BaseIterator" , "selectors" : { "BaseIterator(EntryView)" : 2 , "advance(boolean)" : 2}},{ "className" : "org::jruby::runtime::callback::FastInvocationCallback" , "selectors" : { "call(Object,Object[])" : 1}},{ "className" : "org::jruby::runtime::marshal::CoreObjectType" , "selectors" : { "getNativeTypeIndex()" : 2}},{ "className" : "org::jruby::ext::ffi::StructLayout::FunctionFieldAllocator" , "selectors" : { "FunctionFieldAllocator()" : 1}},{ "className" : "org::jruby::ast::MethodDefNode" , "selectors" : { "MethodDefNode(ISourcePosition,ArgumentNode,ArgsNode,StaticScope,Node)" : 2 , "getArgsNode()" : 7 , "getBodyNode()" : 16 , "getName()" : 2 , "getNameNode()" : 1 , "getScope()" : 2}},{ "className" : "org::jruby::compiler::ir::dataflow::DataFlowConstants::Anything" , "selectors" : { "Anything()" : 1}},{ "className" : "org::jruby::runtime::assigner::Pre1ExpandedRest0Post0Assigner" , "selectors" : { "Pre1ExpandedRest0Post0Assigner(Node)" : 1 , "assign(Ruby,ThreadContext,IRubyObject,Block)" : 1 , "assign(Ruby,ThreadContext,IRubyObject,IRubyObject,Block)" : 3}},{ "className" : "org::jruby::util::io::BlockingIO::IOChannel" , "selectors" : { "IOChannel(SelectableChannel,int,Object)" : 1 , "await()" : 1 , "await(long,TimeUnit)" : 2 , "interrupt()" : 1 , "wakeup(boolean)" : 2}},{ "className" : "org::jruby::ast::CallNoArgBlockPassNode" , "selectors" : { "CallNoArgBlockPassNode(ISourcePosition,Node,String,Node,BlockPassNode)" : 2}},{ "className" : "org::jruby::util::NormalizedFile" , "selectors" : { "NormalizedFile(String)" : 13 , "NormalizedFile(String,String)" : 16 , "createTempFile(String,String)" : 1 , "delete(???)" : 1 , "exists(???)" : 1 , "getAbsolutePath()" : 4 , "getCanonicalPath()" : 3 , "getParent()" : 1 , "getPath()" : 16 , "isAbsolute(???)" : 1}},{ "className" : "org::jruby::lexer::yacc::ByteArrayLexerSource" , "selectors" : { "ByteArrayLexerSource(String,byte[],List<String>,int,boolean)" : 2 , "ByteArrayLexerSource(String,byte[],List<String>,int,boolean)::ByteList" : 1 , "backward(int)" : 2 , "forward(int)" : 3 , "getRemainingAsStream()::ByteList" : 1 , "read()" : 2 , "readUntil(char,boolean)::ByteList" : 1 , "unread(int)" : 3}},{ "className" : "org::jruby::javasupport::JavaClass::Priority" , "selectors" : { "asImportantAs(AssignedName)" : 3 , "lessImportantThan(AssignedName)" : 3 , "moreImportantThan(AssignedName)" : 1}},{ "className" : "org::jruby::RubyIO::ByteListCache" , "selectors" : { "ByteListCache()" : 2 , "allocate(???)" : 2 , "allocate(int)::ByteList" : 1 , "release(???)" : 2}},{ "className" : "org::jruby::ast::FCallTwoArgBlockNode" , "selectors" : { "FCallTwoArgBlockNode(ISourcePosition,String,ArrayNode,IterNode)" : 2}},{ "className" : "org::jruby::RubyEnumerable::EachWithIndex" , "selectors" : { "EachWithIndex(ThreadContext,Block)" : 2}},{ "className" : "org::jruby::ext::ffi::StructLayoutBuilder::Allocator" , "selectors" : { "Allocator()" : 1}},{ "className" : "org::jruby::compiler::ir::compiler_pass::LiveVariableAnalysis" , "selectors" : { "LiveVariableAnalysis()" : 2}},{ "className" : "org::jruby::compiler::ir::instructions::DEFINE_CLASS_METHOD_Instr" , "selectors" : { "DEFINE_CLASS_METHOD_Instr(IR_Module,IRMethod)" : 2}},{ "className" : "org::jruby::internal::runtime::ReadonlyAccessor" , "selectors" : { "ReadonlyAccessor(String,IAccessor)" : 1}},{ "className" : "org::jruby::ext::ffi::jffi::FastIntMethodFactory::PointerParameterConverter" , "selectors" : { "PointerParameterConverter()" : 1}},{ "className" : "org::jruby::java::invokers::FieldMethodZero" , "selectors" : { "FieldMethodZero(String,RubyModule,Field)" : 2}},{ "className" : "org::jruby::javasupport::JavaConstructor" , "selectors" : { "JavaConstructor(Ruby,Constructor<?>)" : 5 , "create(Ruby,Constructor<?>)" : 4 , "createJavaConstructorClass(Ruby,RubyModule)" : 1 , "getMatchingConstructor(Ruby,Class<?>,Class<?>[])" : 1 , "getParameterTypes()" : 1 , "handleIllegalAccessEx(IllegalAccessException)" : 6 , "handlelIllegalArgumentEx(IllegalArgumentException,Object[])" : 6 , "isVarArgs()" : 1 , "newInstanceDirect()" : 1 , "newInstanceDirect(Object)" : 2 , "newInstanceDirect(Object,Object)" : 2 , "newInstanceDirect(Object,Object,Object)" : 2 , "newInstanceDirect(Object,Object,Object,Object)" : 1 , "newInstanceDirect(Object[])" : 2}},{ "className" : "java_integration::fixtures::DescendantOfSingleMethodInterface" , "selectors" : { "callThat()" : 1}},{ "className" : "java::io::InputStream" , "selectors" : { "InputStream()" : 10 , "available()" : 172 , "close()" : 1422 , "mark(int)" : 82 , "markSupported()" : 50 , "read()" : 777 , "read(byte[])" : 554 , "read(byte[],int,int)" : 397 , "reset()" : 113 , "skip(long)" : 102}},{ "className" : "org::jruby::runtime::CallbackFactory" , "selectors" : { "createFactory(Ruby,Class)" : 1 , "createFactory(Ruby,Class,ClassLoader)" : 1}},{ "className" : "org::jruby::javasupport::Java::JavaProxyClassMethods" , "selectors" : { "java_alias(ThreadContext,IRubyObject,IRubyObject,IRubyObject,IRubyObject)" : 1}},{ "className" : "org::jruby::RubyDigest::DigestClass" , "selectors" : { "DigestClass(Ruby,RubyClass)" : 1}},{ "className" : "org::jruby::ast::java_signature::MethodSignatureNode" , "selectors" : { "MethodSignatureNode(String,List<ParameterNode>)" : 1 , "setReturnType(TypeNode)" : 4}},{ "className" : "org::jruby::util::ShellLauncher::POpenProcess" , "selectors" : { "POpenProcess(Process)" : 2 , "POpenProcess(Process,Ruby,ModeFlags)" : 1 , "getChild()" : 1 , "getError()" : 2 , "getErrorStream()" : 1 , "getInput()" : 4 , "getInputStream()" : 2 , "getOutput()" : 4 , "getOutputStream()" : 2 , "hasOutput()" : 1 , "prepareInerr(Process)" : 1 , "prepareInput(Process)" : 2 , "prepareOutput(Process)" : 2 , "pumpInerr(Process,Ruby)" : 1 , "pumpInput(Process,Ruby)" : 1 , "waitFor()" : 1}},{ "className" : "org::jruby::ast::CallThreeArgBlockPassNode" , "selectors" : { "CallThreeArgBlockPassNode(ISourcePosition,Node,String,ArrayNode,BlockPassNode)" : 1}},{ "className" : "org::jruby::util::collections::IntHashMap::Entry" , "selectors" : { "Entry(int,int,Object,Entry)" : 1}},{ "className" : "org::jruby::compiler::ir::IR_Closure" , "selectors" : { "IR_Closure(IR_Scope)" : 2 , "getNextClosureId()" : 1 , "toString()" : 1 , "toStringBody()" : 2}},{ "className" : "org::jruby::RubyZlib::RubyGzipReader" , "selectors" : { "RubyGzipReader(Ruby,RubyClass)" : 1 , "each(ThreadContext,IRubyObject[],Block)" : 1 , "eof()" : 1 , "gets(ThreadContext,IRubyObject[])" : 1 , "initialize(IRubyObject,Block)" : 1 , "internalGets(IRubyObject[])" : 1 , "internalSepGets(ByteList)::ByteList" : 1 , "isEof()" : 1 , "newInstance(IRubyObject,IRubyObject[],Block)" : 2 , "read(IRubyObject[])" : 1 , "read(IRubyObject[])::ByteList" : 2}},{ "className" : "org::jruby::ast::ForNode" , "selectors" : { "ForNode(ISourcePosition,Node,Node,Node)" : 2 , "getIterNode()" : 3}},{ "className" : "org::jruby::test::TestRubyException" , "selectors" : { "expectedTraceLine(int)" : 4 , "printError()" : 3 , "setBackTrace(int)" : 2 , "testLine(int)" : 2}},{ "className" : "org::jruby::runtime::CompiledBlockCallback" , "selectors" : { "call(ThreadContext,IRubyObject,IRubyObject,Block)" : 2}},{ "className" : "org::jruby::ext::ffi::IOModule" , "selectors" : { "createIOModule(Ruby,RubyModule)" : 1}},{ "className" : "org::jruby::ext::ffi::Enum" , "selectors" : { "Enum(Ruby,RubyClass)" : 1 , "createEnumClass(Ruby,RubyModule)" : 1}},{ "className" : "org::jruby::threading::DaemonThreadFactory" , "selectors" : { "DaemonThreadFactory()" : 3}},{ "className" : "org::jruby::compiler::ir::dataflow::analyses::FrameLoadPlacementProblem" , "selectors" : { "FrameLoadPlacementProblem()" : 3 , "addLoads()" : 2 , "getLoadsOnScopeExit()" : 1 , "getName()" : 4 , "initLoadsOnScopeExit(Set<Variable>)" : 1 , "recordDefVar(Variable)" : 1 , "recordUsedVar(Variable)" : 1 , "scopeDefinesVariable(Variable)" : 3 , "scopeUsesVariable(Variable)" : 2}},{ "className" : "org::jruby::ext::ffi::AutoPointer::AutoPointerAllocator" , "selectors" : { "AutoPointerAllocator()" : 1}},{ "className" : "org::jruby::compiler::ir::operands::Nil" , "selectors" : { "Nil()" : 1}},{ "className" : "org::jruby::compiler::ir::dataflow::analyses::LiveVariablesProblem" , "selectors" : { "LiveVariablesProblem()" : 4 , "addDFVar(Variable)" : 1 , "addDFVar(Variable,boolean)" : 2 , "getAllVars()" : 1 , "getDFVar(Variable)" : 9 , "getName()" : 6 , "getVariable(int)" : 2 , "getVarsLiveOnEntry()" : 2 , "getVarsLiveOnExit()" : 2 , "initVarsLiveOnExit(Collection<Variable>)" : 1 , "markDeadInstructions()" : 1 , "setup(CFG)" : 3}},{ "className" : "org::jruby::ast::CallThreeArgBlockNode" , "selectors" : { "CallThreeArgBlockNode(ISourcePosition,Node,String,ArrayNode,IterNode)" : 2}},{ "className" : "org::jruby::ext::ffi::jffi::FastIntMethodFactory::Float32ResultConverter" , "selectors" : { "Float32ResultConverter()" : 1}},{ "className" : "org::jruby::ast::RetryNode" , "selectors" : { "RetryNode(ISourcePosition)" : 2}},{ "className" : "org::jruby::ext::ffi::jffi::DefaultMethodOneArg" , "selectors" : { "DefaultMethodOneArg(RubyModule,Function,FunctionInvoker,ParameterMarshaller[])" : 1 , "call(ThreadContext,IRubyObject,RubyModule,String,IRubyObject)::HeapInvocationBuffer" : 1}},{ "className" : "org::jruby::util::string::JavaCrypt" , "selectors" : { "D_ENCRYPT(int,int,int,int,int,int[])" : 2 , "HPERM_OP(int,int,int)" : 2 , "PERM_OP(int,int,int,int,int[])" : 9 , "body(int[],int,int)" : 1 , "byteToUnsigned(byte)" : 4 , "crypt(???)" : 1 , "crypt(ByteList,ByteList)::ByteList" : 1 , "des_set_key(byte[])" : 1 , "fourBytesToInt(byte[],int)" : 2 , "intToFourBytes(int,byte[],int)" : 2}},{ "className" : "org::jruby::internal::runtime::methods::DynamicMethodFactory" , "selectors" : { "newDefaultMethod(Ruby,RubyModule,String,StaticScope,Node,ArgsNode,Visibility,ISourcePosition)" : 2 , "newInterpretedMethod(Ruby,RubyModule,StaticScope,Node,ArgsNode,Visibility,ISourcePosition)" : 1 , "newJittedMethod(Ruby,RubyModule,StaticScope,Script,CallConfiguration,Visibility,Arity,ISourcePosition,DefaultMethod)" : 1}},{ "className" : "org::jruby::ext::ffi::jffi::DefaultMethodFactory::Signed16Invoker" , "selectors" : { "Signed16Invoker()" : 1}},{ "className" : "org::jruby::ext::ffi::jffi::CallbackManager::AbstractCallbackProxy" , "selectors" : { "AbstractCallbackProxy(Ruby,ClosureInfo)" : 2}},{ "className" : "org::jruby::ext::ffi::jffi::FastLongMethodFactory::StrptrResultConverter" , "selectors" : { "StrptrResultConverter()" : 1}},{ "className" : "org::jruby::runtime::callback::DumpingInvocationCallbackFactory" , "selectors" : { "DumpingInvocationCallbackFactory(Ruby,Class,ClassLoader)" : 1}},{ "className" : "org::jruby::compiler::ir::instructions::PUT_GLOBAL_VAR_Instr" , "selectors" : { "PUT_GLOBAL_VAR_Instr(String,Operand)" : 3}},{ "className" : "org::jruby::ext::ffi::jffi::DefaultMethodFactory::Float64Marshaller" , "selectors" : { "Float64Marshaller()" : 1}},{ "className" : "java::util::concurrent::ConcurrentLinkedQueue<T>" , "selectors" : { "ConcurrentLinkedQueue()" : 24}},{ "className" : "org::jruby::ext::socket::RubyTCPSocket" , "selectors" : { "RubyTCPSocket(Ruby,RubyClass)" : 4 , "createTCPSocket(Ruby)" : 1 , "getPortFrom(Ruby,IRubyObject)" : 2 , "gethostbyname(ThreadContext,IRubyObject,IRubyObject)" : 1 , "open(ThreadContext,IRubyObject,IRubyObject[],Block)" : 1}},{ "className" : "org::jruby::java::codegen::RealClassGenerator" , "selectors" : { "buildSimpleToAllMap(Class[],String[])" : 2 , "coerceArgumentsToRuby(SkinnyMethodAdapter,Class[],int)" : 3 , "coerceResultAndReturn(SkinnyMethodAdapter,Class)" : 3 , "createOldStyleImplClass(Class[],RubyClass,Ruby,String)" : 1 , "createRealImplClass(Class,Class[],RubyClass,Ruby,String)" : 1 , "defineOldStyleImplClass(Ruby,String,String[],Map<String,List<Method>>)" : 1 , "defineRealImplClass(Ruby,String,Class,String[],Map<String,List<Method>>)" : 1}},{ "className" : "org::jruby::compiler::ir::targets::JVM::ClassData" , "selectors" : { "ClassData(???)" : 2 , "method(???)" : 1 , "methodData()" : 3 , "popmethod()" : 1 , "pushmethod(String)" : 1}},{ "className" : "org::jruby::ast::FloatNode" , "selectors" : { "FloatNode(ISourcePosition,double)" : 1 , "getValue()" : 5 , "setValue(double)" : 1}},{ "className" : "org::jruby::ext::ffi::jffi::DefaultMethodFactory::CallbackInvoker" , "selectors" : { "CallbackInvoker(CallbackInfo)" : 1}},{ "className" : "org::jruby::embed::EvalFailedException" , "selectors" : { "EvalFailedException(String,Throwable)" : 1 , "EvalFailedException(Throwable)" : 2}},{ "className" : "org::jruby::RubyString::EmptyByteListHolder" , "selectors" : { "EmptyByteListHolder(???)" : 1}},{ "className" : "org::jruby::test::MainTestSuite" , "selectors" : { "suite()::TestSuite" : 1}},{ "className" : "org::jruby::ext::ffi::jffi::FastIntMethodFactory::Signed8ParameterConverter" , "selectors" : { "Signed8ParameterConverter()" : 1}},{ "className" : "org::jruby::interpreter::Interpreter" , "selectors" : { "buildAST(Ruby,boolean,String)" : 1 , "interpretMethod(Ruby,IRMethod)" : 2 , "interpretTop(Ruby,IR_Scope)" : 1}},{ "className" : "org::jruby::compiler::ir::operands::Symbol" , "selectors" : { "Symbol(String)" : 1}},{ "className" : "org::jruby::compiler::ir::IR_Builder::EnsureBlockInfo" , "selectors" : { "EnsureBlockInfo(IR_Scope)" : 1 , "emitJumpChain(IR_Scope,Stack<EnsureBlockInfo>)" : 2}},{ "className" : "org::jruby::lexer::yacc::StackState" , "selectors" : { "StackState()" : 2 , "begin()" : 8 , "end()" : 6 , "isInState()" : 2 , "reset()" : 2 , "reset(long)" : 3 , "restart()" : 8 , "stop()" : 8}},{ "className" : "java_integration::fixtures::BeanLikeInterface" , "selectors" : { "friendly()" : 1 , "getMyValue()" : 1 , "getSomethingFoo(Object)" : 1 , "getValue()" : 1 , "isFoo()" : 1 , "isMyFoo()" : 1 , "setFoo(boolean)" : 1 , "setMyFoo(boolean)" : 1 , "setMyValue(Object)" : 1 , "setSomethingFoo(Object,Object)" : 1 , "setValue(Object)" : 1 , "supahFriendly()" : 1}},{ "className" : "org::jruby::compiler::ir::operands::Hash" , "selectors" : { "Hash(List<KeyValuePair>)" : 2}},{ "className" : "org::jruby::ast::InstAsgnNode" , "selectors" : { "InstAsgnNode(ISourcePosition,String,Node)" : 2 , "getName()" : 6 , "verifyAccessor(RubyClass)" : 2}},{ "className" : "org::jruby::ext::ffi::AbstractMemory" , "selectors" : { "AbstractMemory(Ruby,RubyClass,MemoryIO,long)" : 3 , "AbstractMemory(Ruby,RubyClass,MemoryIO,long,int)" : 4 , "calculateSize(ThreadContext,IRubyObject)" : 4 , "checkArray(IRubyObject)" : 10 , "createAbstractMemoryClass(Ruby,RubyModule)" : 1 , "equals(Object)" : 2 , "getMemoryIO()" : 132 , "getOffset(IRubyObject)" : 52 , "getPointer(Ruby,long)" : 4 , "getSize()" : 2 , "get_array_of_int32(ThreadContext,IRubyObject,IRubyObject)" : 1 , "get_array_of_int64(ThreadContext,IRubyObject,IRubyObject)" : 1 , "get_array_of_uint32(ThreadContext,IRubyObject,IRubyObject)" : 1 , "get_array_of_uint64(ThreadContext,IRubyObject,IRubyObject)" : 1 , "get_int32(ThreadContext)" : 1 , "get_int32(ThreadContext,IRubyObject)" : 1 , "get_int64(ThreadContext)" : 1 , "get_int64(ThreadContext,IRubyObject)" : 1 , "get_long(ThreadContext)" : 1 , "get_uint32(ThreadContext)" : 1 , "get_uint32(ThreadContext,IRubyObject)" : 1 , "get_uint64(ThreadContext)" : 1 , "get_uint64(ThreadContext,IRubyObject)" : 1 , "get_ulong(ThreadContext)" : 1 , "hashCode()" : 1 , "putPointer(ThreadContext,long,IRubyObject)" : 5 , "putPointer(ThreadContext,long,Pointer)" : 1 , "put_array_of_int32(ThreadContext,IRubyObject,IRubyObject)" : 1 , "put_array_of_int64(ThreadContext,IRubyObject,IRubyObject)" : 1 , "put_array_of_uint32(ThreadContext,IRubyObject,IRubyObject)" : 1 , "put_array_of_uint64(ThreadContext,IRubyObject,IRubyObject)" : 1 , "put_int32(ThreadContext,IRubyObject)" : 1 , "put_int32(ThreadContext,IRubyObject,IRubyObject)" : 1 , "put_int64(ThreadContext,IRubyObject)" : 1 , "put_int64(ThreadContext,IRubyObject,IRubyObject)" : 1 , "put_long(ThreadContext,IRubyObject)" : 1 , "put_uint32(ThreadContext,IRubyObject)" : 1 , "put_uint32(ThreadContext,IRubyObject,IRubyObject)" : 1 , "put_uint64(ThreadContext,IRubyObject)" : 1 , "put_uint64(ThreadContext,IRubyObject,IRubyObject)" : 1 , "setMemoryIO(MemoryIO)" : 7 , "slice(Ruby,long)" : 4 , "slice(Ruby,long,long)" : 1}},{ "className" : "org::jruby::javasupport::bsf::JRubyEngine::FunctionsGlobalVariable" , "selectors" : { "FunctionsGlobalVariable(???)" : 1}},{ "className" : "org::jruby::runtime::builtin::InstanceVariableTable" , "selectors" : { "fastHashContains(String)" : 1 , "fastHashFetch(String)" : 1 , "fastHashStore(String,Object)" : 2 , "fastPackedContains(String)" : 1 , "fastPackedFetch(String)" : 1 , "fastPackedStore(String,Object)" : 1 , "getMap(Object,Map)" : 1 , "hashContains(String)" : 1 , "hashFetch(String)" : 1 , "hashRemove(String)" : 1 , "hashStore(String,Object)" : 2 , "packedContains(String)" : 1 , "packedFetch(String)" : 1 , "packedInsert(Object[],int,String,Object)" : 2 , "packedRemove(String)" : 1 , "packedStore(String,Object)" : 1 , "readLocked(VariableTableEntry)" : 2 , "rehash()" : 2 , "store(String,Object)" : 1 , "sync(List<Variable<IRubyObject>>)" : 1 , "unpack()" : 1 , "visit(TryLockVisitor)" : 1}},{ "className" : "org::jruby::compiler::ir::instructions::JUMP_INDIRECT_Instr" , "selectors" : { "JUMP_INDIRECT_Instr(Variable)" : 1}},{ "className" : "org::jruby::RubyNameError::RubyNameErrorMessage" , "selectors" : { "RubyNameError" : 3 , "to_str(ThreadContext)" : 1 , "to_str(ThreadContext)::ByteList" : 1}},{ "className" : "sun::misc::Unsafe" , "selectors" : { "arrayBaseOffset(Class)" : 1 , "getLong(Object,int)" : 2 , "throwException(Throwable)" : 1}},{ "className" : "org::jruby::ext::ffi::StructLayout::FunctionField" , "selectors" : { "FunctionField(Ruby,RubyClass)" : 1 , "StructLayout" : 1}},{ "className" : "org::jruby::util::ShellLauncher::ChannelPumper" , "selectors" : { "ChannelPumper(Ruby,FileChannel,FileChannel,Slave,Object)" : 2}},{ "className" : "org::jruby::RubyHash::Visitor" , "selectors" : { "visit(IRubyObject,IRubyObject)" : 1}},{ "className" : "org::jruby::RubyEnumerator::RubyEnumeratorEnumerable" , "selectors" : { "each_cons(ThreadContext,IRubyObject,IRubyObject,Block)" : 2 , "each_slice(ThreadContext,IRubyObject,IRubyObject,Block)" : 2 , "with_object_common(ThreadContext,IRubyObject,IRubyObject,Block,String)" : 2}},{ "className" : "org::jruby::RubyConverter" , "selectors" : { "RubyConverter(Ruby,RubyClass)" : 1 , "createConverterClass(Ruby)" : 1}},{ "className" : "org::jruby::ext::ffi::ArrayMemoryIO" , "selectors" : { "ArrayMemoryIO(Ruby,byte[],int,int)" : 4 , "ArrayMemoryIO(Ruby,int)" : 4 , "array()" : 5 , "arrayLength()" : 4 , "arrayOffset()" : 5 , "checkBounds(long,long)" : 34 , "getAddress(long)" : 1 , "getArrayIO()" : 1 , "getInt(long)" : 1 , "getLong(long)" : 1 , "index(long)" : 32 , "indexOf(long,byte)" : 1 , "indexOf(long,byte,int)" : 1 , "newBE32ArrayIO()" : 1 , "newBE64ArrayIO()" : 1 , "newLE32ArrayIO()" : 1 , "newLE64ArrayIO()" : 1 , "putAddress(long,long)" : 1 , "putInt(long,int)" : 1 , "putLong(long,long)" : 1}},{ "className" : "org::jruby::embed::jsr223::JRubyCompiledScript" , "selectors" : { "JRubyCompiledScript(ScriptingContainer,JRubyEngine,Reader)" : 1 , "JRubyCompiledScript(ScriptingContainer,JRubyEngine,String)" : 1 , "eval()" : 2 , "eval(Bindings)" : 3 , "eval(ScriptContext)" : 4 , "getEngine()" : 1 , "isTerminationOn()" : 3 , "wrapException(Exception)" : 3}},{ "className" : "org::jruby::javasupport::proxy::JavaProxyClassFactory::MethodData" , "selectors" : { "MethodData(Method)" : 1 , "add(Method)" : 1 , "generateProxyMethod()" : 1 , "getExceptions()" : 1 , "getMethod(???)" : 1 , "getName()" : 2 , "getParameterTypes()" : 2 , "getReturnType()" : 1 , "isFinal()" : 1 , "isImplemented()" : 3 , "isPrivate()" : 1 , "scrambledSignature()" : 1}},{ "className" : "java::security::PrivilegedActionException" , "selectors" : { "getCause()" : 11 , "getException()" : 180 , "toString()" : 1}},{ "className" : "org::jruby::RubyNKF" , "selectors" : { "convert(ThreadContext,String,String,ByteList)::ByteList" : 1 , "createNKF(Ruby)" : 1 , "encodeMimeString(Ruby,RubyString,String)" : 2 , "guess(ThreadContext,IRubyObject,IRubyObject)" : 2 , "optionUTF(String,int)" : 2 , "parseOpt(String)" : 1}},{ "className" : "org::jruby::RubyTempfile" , "selectors" : { "RubyTempfile(Ruby,RubyClass)" : 1 , "_close(ThreadContext)" : 2 , "close_bang(ThreadContext)" : 1 , "createTempfileClass(Ruby)" : 1 , "defaultTmpDir(Ruby,IRubyObject[])" : 1 , "initializeOpen()" : 1}},{ "className" : "org::jruby::util::JavaNameMangler" , "selectors" : { "mangleFilenameForClasspath(String,String,String)" : 1 , "mangleFilenameForClasspath(String,String,String,boolean)" : 2 , "mangleStringForCleanJavaIdentifier(String)" : 6 , "mangledFilenameForStartupClasspath(String)" : 1}},{ "className" : "org::jruby::ext::ffi::jffi::FastLongMethodFactory::Signed32ParameterConverter" , "selectors" : { "Signed32ParameterConverter()" : 1}},{ "className" : "org::jruby::internal::runtime::methods::InvocationMethodFactory::DescriptorInfo" , "selectors" : { "DescriptorInfo(List<JavaMethodDescriptor>)" : 2 , "getMax()" : 6 , "getMin()" : 7 , "isBacktrace()" : 1 , "isBlock()" : 3 , "isFrame()" : 1 , "isRest()" : 2 , "isScope()" : 1}},{ "className" : "org::jruby::test::Overloaded" , "selectors" : { "foo(Object)" : 1 , "getName(String)" : 1}},{ "className" : "org::jruby::lexer::JavaSignatureLexer" , "selectors" : { "JavaSignatureLexer(InputStream)" : 1 , "JavaSignatureLexer(Reader)" : 2 , "create(InputStream)" : 1 , "value()" : 2 , "yylength()" : 1 , "yylex()" : 3 , "yytext()" : 2 , "zzRefill()" : 2 , "zzScanError(int)" : 2 , "zzUnpackAction()" : 1 , "zzUnpackAction(String,int,int[])" : 1 , "zzUnpackAttribute()" : 1 , "zzUnpackAttribute(String,int,int[])" : 1 , "zzUnpackCMap(String)" : 1 , "zzUnpackRowMap()" : 1 , "zzUnpackRowMap(String,int,int[])" : 1 , "zzUnpackTrans()" : 1 , "zzUnpackTrans(String,int,int[])" : 1}},{ "className" : "org::jruby::compiler::ir::instructions::DECLARE_LOCAL_TYPE_Instr" , "selectors" : { "DECLARE_LOCAL_TYPE_Instr(int,String)" : 1}},{ "className" : "org::jruby::ast::CaseNode" , "selectors" : { "CaseNode(ISourcePosition,Node,ListNode)" : 1 , "getCaseNode()" : 4 , "getCases()" : 3 , "getElseNode()" : 4 , "setElseNode(Node)" : 1}},{ "className" : "org::jruby::RubyMath" , "selectors" : { "atan2(IRubyObject,IRubyObject,IRubyObject)" : 1 , "atanh_common(IRubyObject,IRubyObject)" : 2 , "chebylevSerie(double,double[])" : 11 , "cos(IRubyObject,IRubyObject)" : 3 , "cosh(IRubyObject,IRubyObject)" : 2 , "createMathModule(Ruby)" : 1 , "domainCheck(IRubyObject,double,String)" : 10 , "domainCheck19(IRubyObject,double,String)" : 3 , "erfc(IRubyObject,IRubyObject)" : 2 , "exp(IRubyObject,IRubyObject)" : 1 , "hypot(IRubyObject,IRubyObject,IRubyObject)" : 2 , "log(IRubyObject,IRubyObject)" : 2 , "log_common(IRubyObject,double,double)" : 6 , "needFloat(IRubyObject)" : 26 , "nemes_gamma(double)" : 1 , "sign(double,double)" : 4 , "sin(IRubyObject,IRubyObject)" : 3 , "sinh(IRubyObject,IRubyObject)" : 2 , "sqrt(IRubyObject,IRubyObject)" : 4 , "zeroInLogCheck(IRubyObject,double)" : 3}},{ "className" : "org::jruby::ast::CallSpecialArgBlockPassNode" , "selectors" : { "CallSpecialArgBlockPassNode(ISourcePosition,Node,String,Node,BlockPassNode)" : 1}},{ "className" : "org::jruby::RubyJRuby::MethodExtensions" , "selectors" : { "methodArgs(IRubyObject)" : 1}},{ "className" : "org::jruby::RubyDir" , "selectors" : { "RubyDir(Ruby,RubyClass)" : 1 , "checkDir()" : 6 , "checkDirIsTwoSlashesOnWindows(Ruby,String)" : 3 , "close()" : 1 , "createDirClass(Ruby)" : 1 , "each(ThreadContext,Block)" : 2 , "entriesCommon(Ruby,String)" : 2 , "entriesIntoADirectory(Ruby,String)" : 1 , "entriesIntoAJarFile(Ruby,String)" : 1 , "foreachCommon(ThreadContext,IRubyObject,Ruby,RubyString,Block)" : 2 , "getCWD(Ruby)" : 4 , "getContents(File)" : 1 , "getDir(Ruby,String,boolean)" : 4 , "getEntries(Ruby,String)" : 2 , "getHomeDirectoryPath(ThreadContext)" : 4 , "getHomeDirectoryPath(ThreadContext,String)" : 2 , "getPath19(ThreadContext,IRubyObject)" : 4 , "mkdirCommon(Ruby,String,IRubyObject[])" : 2 , "open(ThreadContext,IRubyObject,IRubyObject,Block)" : 1 , "rmdirCommon(Ruby,String)" : 2 , "set_pos(IRubyObject)" : 1}},{ "className" : "org::jruby::internal::runtime::methods::CompiledMethod" , "selectors" : { "CompiledMethod()" : 1 , "init(RubyModule,Arity,Visibility,StaticScope,Object,CallConfiguration)" : 2}},{ "className" : "org::jruby::util::io::FileExistsException" , "selectors" : { "FileExistsException(String)" : 1}},{ "className" : "org::jruby::test::TestCommandlineParser" , "selectors" : { "testParsingWithDashDash()::TestableCommandlineParser" : 1}},{ "className" : "org::jruby::embed::jsr223::JRubyEngineTest" , "selectors" : { "getNextYear()" : 1}},{ "className" : "org::jruby::RubyEnumerable::ChunkedBlockCallback" , "selectors" : { "ChunkedBlockCallback(Ruby,IRubyObject)" : 1}},{ "className" : "org::jruby::ext::ffi::jffi::FastLongMethodFactory::Float32ParameterConverter" , "selectors" : { "Float32ParameterConverter()" : 1}},{ "className" : "org::jruby::ast::BlockArgNode" , "selectors" : { "BlockArgNode(ISourcePosition,int,String)" : 2 , "getCount()" : 3 , "getName()" : 2}},{ "className" : "org::jruby::util::SimpleSampler" , "selectors" : { "registerThreadContext(ThreadContext)" : 1 , "report()" : 1 , "runSampling()" : 1 , "startSampleThread()" : 1}},{ "className" : "org::jruby::ast::OpElementOneArgOrAsgnNode" , "selectors" : { "OpElementOneArgOrAsgnNode(ISourcePosition,Node,String,ArrayNode,Node)" : 1}},{ "className" : "org::jruby::util::io::JRubyObjectInputStream::JRubyObjectInputStreamImpl" , "selectors" : { "JRubyObjectInputStreamImpl(Ruby,InputStream)" : 1}},{ "className" : "org::jruby::ext::ffi::jffi::DefaultMethodFactory::EnumMarshaller" , "selectors" : { "EnumMarshaller(ParameterMarshaller,RubyHash)" : 1}},{ "className" : "org::jruby::ext::ffi::AutoPointer::Reaper" , "selectors" : { "Reaper(AutoPointer,Pointer,IRubyObject,String)" : 2 , "autorelease(boolean)" : 1 , "release(ThreadContext)" : 2}},{ "className" : "org::jruby::compiler::ir::instructions::STORE_TO_FRAME_Instr" , "selectors" : { "STORE_TO_FRAME_Instr(IR_ExecutionScope,String,Operand)" : 3 , "getClosestMethodAncestor(IR_ExecutionScope)" : 1}},{ "className" : "org::jruby::compiler::impl::MethodBodyCompiler" , "selectors" : { "MethodBodyCompiler(StandardASMCompiler,String,String,ASTInspector,StaticScope)" : 3 , "beginMethod(CompilerCallback,StaticScope)" : 1 , "getSignature()" : 1 , "isSpecificArity()" : 1}},{ "className" : "org::jruby::ast::RegexpNode" , "selectors" : { "RegexpNode(???)" : 5 , "getOptions()" : 7 , "getValue(???)" : 4 , "setPattern(RubyRegexp)" : 1}},{ "className" : "org::jruby::ast::CallTwoArgNode" , "selectors" : { "CallTwoArgNode(ISourcePosition,Node,String,ArrayNode)" : 1}},{ "className" : "org::jruby::runtime::ExecutionContext" , "selectors" : { "getContextVariables()" : 1}},{ "className" : "org::jruby::ext::ffi::StructLayout::InnerStructFieldAllocator" , "selectors" : { "InnerStructFieldAllocator()" : 1}},{ "className" : "java::util::LinkedHashSet<T>" , "selectors" : { "LinkedHashSet()" : 204 , "LinkedHashSet(Collection<? extends E>)" : 48 , "LinkedHashSet(int)" : 56}},{ "className" : "org::jruby::util::io::BlockingIO::IOSelector" , "selectors" : { "IOSelector(SelectorProvider)" : 1 , "add(Channel,int,Object)" : 2 , "await(Channel,int)" : 1}},{ "className" : "org::jruby::Main" , "selectors" : { "Main()" : 2 , "Main(RubyInstanceConfig)" : 4 , "isShebangLine(String)" : 1 , "parseShebangOptions(InputStream)" : 1 , "printProperties()" : 1 , "printUsage()" : 3 , "run()" : 2 , "run(String[])" : 3 , "showCopyright()" : 1 , "showVersion()" : 1}},{ "className" : "org::jruby::compiler::ir::operands::BreakResult" , "selectors" : { "BreakResult(Operand,Label)" : 1}},{ "className" : "java::lang::NoSuchMethodException" , "selectors" : { "NoSuchMethodException()" : 9 , "NoSuchMethodException(String)" : 58 , "java" : 8}},{ "className" : "org::jruby::demo::IRBConsole" , "selectors" : { "IRBConsole(String)" : 1 , "findFont(String,int,int,String[])" : 1}},{ "className" : "org::jruby::ext::ffi::jffi::CallbackManager::CallbackProxy" , "selectors" : { "CallbackProxy(Ruby,ClosureInfo,Object)" : 1}},{ "className" : "org::jruby::javasupport::test::Interface1" , "selectors" : { "method1()" : 1}},{ "className" : "java::util::zip::Adler32" , "selectors" : { "Adler32()" : 3 , "getValue()" : 2 , "java" : 1 , "reset()" : 1 , "update(byte[])" : 1 , "update(byte[],int,int)" : 1 , "update(int)" : 1}},{ "className" : "org::jruby::RubyModule::Generation" , "selectors" : { "Generation()" : 1 , "update()" : 1}},{ "className" : "org::jruby::ext::ffi::jffi::FastLongMethodThreeArg" , "selectors" : { "FastLongMethodThreeArg(RubyModule,Function,LongResultConverter,LongParameterConverter[])" : 1 , "invoke(ThreadContext,IRubyObject,IRubyObject,IRubyObject)" : 2}},{ "className" : "org::jruby::RubyInstanceConfig::LoadServiceCreator" , "selectors" : { "create(Ruby)" : 1}},{ "className" : "org::jruby::ext::ffi::Struct" , "selectors" : { "Struct(Ruby,RubyClass)" : 2 , "Struct(Ruby,RubyClass,StructLayout,IRubyObject)" : 4 , "allocateStruct(ThreadContext,IRubyObject,int)" : 6 , "createStructClass(Ruby,RubyModule)" : 1 , "getMemory()" : 9 , "getMemoryIO()" : 2 , "getStructLayout(Ruby,IRubyObject)" : 6 , "getStructSize(Ruby,IRubyObject)" : 2 , "isStruct(Ruby,RubyClass)" : 1}},{ "className" : "org::jruby::compiler::impl::HeapBasedVariableCompiler" , "selectors" : { "HeapBasedVariableCompiler(BaseBodyCompiler,SkinnyMethodAdapter,StaticScope,boolean,int,int)" : 6 , "assignLocalVariable(int,CompilerCallback,boolean)" : 1 , "assignLocalVariable(int,boolean)" : 29 , "retrieveLocalVariable(int)" : 1}},{ "className" : "org::jruby::lexer::yacc::ByteArrayLexerSource::ByteArrayCursor" , "selectors" : { "ByteArrayCursor(byte[])" : 1}},{ "className" : "org::jruby::RubyZlib::RubyGzipReader::HeaderReadableGZIPInputStream" , "selectors" : { "HeaderReadableGZIPInputStream(CountingIOInputStream)" : 1 , "bytesToUInt(byte[],int)" : 2 , "crc()" : 1 , "pos()" : 1 , "readBytes(byte[])" : 1 , "readBytes(byte[],int,int,boolean)" : 2 , "readHeader()" : 1 , "readHeader()::DateTime" : 1 , "readNullTerminateString()" : 2 , "readTrailer()" : 3 , "readUByte()" : 9 , "readUInt()" : 1 , "readUShort()" : 3}},{ "className" : "org::jruby::util::IOChannel" , "selectors" : { "IOChannel(IRubyObject)" : 3 , "initReadSite()" : 2 , "initWriteSite()" : 2 , "read(CallSite,ByteBuffer)" : 2 , "write(CallSite,ByteBuffer)" : 2 , "write(CallSite,ByteBuffer)::ByteList" : 1}},{ "className" : "org::jruby::compiler::ir::instructions::YIELD_Instr" , "selectors" : { "YIELD_Instr(Variable,Operand[])" : 1}},{ "className" : "org::jruby::runtime::marshal::UnmarshalStream" , "selectors" : { "UnmarshalStream(Ruby,InputStream,IRubyObject,boolean)" : 1 , "defaultObjectUnmarshal()" : 1 , "defaultVariablesUnmarshal(IRubyObject)" : 6 , "findClass(String)" : 2 , "getClassFromPath(Ruby,String)" : 2 , "getModuleFromPath(Ruby,String)" : 1 , "getRuntime()" : 21 , "read()" : 1 , "readSignedByte()" : 3 , "readUnsignedByte()" : 5 , "registerLinkTarget(IRubyObject)" : 16 , "uclassUnmarshall()" : 1 , "unmarshalInt()" : 8 , "unmarshalObject()" : 19 , "unmarshalObjectDirectly(int)" : 1 , "unmarshalString()::ByteList" : 1 , "unmarshalString(???)" : 6 , "userNewUnmarshal()" : 1 , "userUnmarshal()" : 1}},{ "className" : "java::lang::Number" , "selectors" : { "Number()" : 2 , "byteValue()" : 71 , "doubleValue()" : 1113 , "floatValue()" : 206 , "intValue()" : 714 , "longValue()" : 430 , "shortValue()" : 80}},{ "className" : "org::jruby::internal::runtime::methods::JavaMethod::JavaMethodZero" , "selectors" : { "JavaMethodZero(RubyModule,Visibility)" : 1}},{ "className" : "org::jruby::util::io::OpenFile::Finalizer" , "selectors" : { "finalize(Ruby,boolean)" : 1}},{ "className" : "org::jruby::ast::RescueBodyNode" , "selectors" : { "RescueBodyNode(ISourcePosition,Node,Node,RescueBodyNode)" : 7 , "getBodyNode()" : 5 , "getExceptionNodes()" : 4 , "getOptRescueNode()" : 7 , "interpret(Ruby,ThreadContext,IRubyObject,Block)" : 2}},{ "className" : "org::jruby::parser::YyTables" , "selectors" : { "combine(short[],short[],short[],short[])" : 2 , "yyCheck()" : 1 , "yyCheck1()" : 1 , "yyCheck2()" : 1 , "yyCheck3()" : 1 , "yyCheck4()" : 1 , "yyTable()" : 1 , "yyTable1()" : 1 , "yyTable2()" : 1 , "yyTable3()" : 1 , "yyTable4()" : 1}},{ "className" : "org::jruby::management::Config" , "selectors" : { "Config(Ruby)" : 1}},{ "className" : "org::jruby::test::TestUnitTestSuite::Interpreter" , "selectors" : { "Interpreter()" : 1 , "setUp()" : 1 , "tearDown()" : 1}},{ "className" : "org::jruby::ext::ffi::jffi::DefaultMethodFactory::BooleanInvoker" , "selectors" : { "BooleanInvoker()" : 1}},{ "className" : "org::jruby::RubyGlobal::BackRefGlobalVariable" , "selectors" : { "BackRefGlobalVariable(Ruby,String)" : 1}},{ "className" : "org::jruby::RubyString::TrTables" , "selectors" : { "TrTables()" : 1}},{ "className" : "org::jruby::RubyHash::RubyHashEntry" , "selectors" : { "RubyHashEntry()" : 2 , "RubyHashEntry(int,IRubyObject,IRubyObject,RubyHashEntry,RubyHashEntry)" : 2 , "detach()" : 1 , "equals(Object)" : 4 , "hashCode()" : 1 , "isLive()" : 2 , "setValue(Object)" : 1}},{ "className" : "org::jruby::exceptions::JumpException::ReturnJump" , "selectors" : { "ReturnJump(int,Object)" : 1}},{ "className" : "org::jruby::ast::FCallTwoArgNode" , "selectors" : { "FCallTwoArgNode(ISourcePosition,String,ArrayNode)" : 1}},{ "className" : "sun::misc::SignalHandler" , "selectors" : { "handle(Signal)" : 2}},{ "className" : "org::jruby::ext::ffi::jffi::DefaultMethodFactory::StructByValueInvoker" , "selectors" : { "StructByValueInvoker(StructByValue)" : 1}},{ "className" : "org::jruby::ext::ffi::MemoryOp::Signed16" , "selectors" : { "Signed16()" : 1}},{ "className" : "org::jruby::internal::runtime::methods::JavaMethod::JavaMethodZeroOrOneOrTwoOrThreeOrN" , "selectors" : { "JavaMethodZeroOrOneOrTwoOrThreeOrN(RubyModule,Visibility)" : 1 , "JavaMethodZeroOrOneOrTwoOrThreeOrN(RubyModule,Visibility,CallConfiguration)" : 1 , "call(ThreadContext,IRubyObject,RubyModule,String,IRubyObject,IRubyObject,IRubyObject)" : 2}},{ "className" : "java_integration::fixtures::PackageInstanceMethod" , "selectors" : { "voidMethod()" : 1}},{ "className" : "org::jruby::ext::ffi::jffi::DefaultMethodFactory::StructByValueMarshaller" , "selectors" : { "StructByValueMarshaller(StructByValue)" : 1}},{ "className" : "java::text::DateFormatSymbols" , "selectors" : { "DateFormatSymbols()" : 4 , "DateFormatSymbols(Locale)" : 7 , "getAmPmStrings()" : 1 , "getMonths()" : 6 , "getShortMonths()" : 5 , "getShortWeekdays()" : 5 , "getWeekdays()" : 2}},{ "className" : "org::jruby::ext::ffi::jffi::FastLongMethodFactory::Float64ParameterConverter" , "selectors" : { "Float64ParameterConverter()" : 1}},{ "className" : "org::jruby::RubyNumeric::ByteListCaller" , "selectors" : { "yield(RubyString,boolean)" : 1}},{ "className" : "org::jruby::ast::YieldTwoNode" , "selectors" : { "YieldTwoNode(ISourcePosition,ArrayNode)" : 1}},{ "className" : "org::jruby::compiler::ir::CodeVersion" , "selectors" : { "CodeVersion(long)" : 2 , "getClassVersionToken()" : 2}},{ "className" : "org::jruby::RubyBigDecimal" , "selectors" : { "RubyBigDecimal(Ruby,BigDecimal)" : 27 , "RubyBigDecimal(Ruby,RubyClass)" : 1 , "addInternal(ThreadContext,IRubyObject,String,IRubyObject)" : 2 , "asEngineering(String)" : 1 , "bigSqrt(BigDecimal,MathContext)" : 1 , "cmp(ThreadContext,IRubyObject,char)" : 6 , "createBigDecimal(Ruby)" : 1 , "engineeringValue(String)" : 1 , "firstArgument(IRubyObject[])" : 1 , "fix()" : 1 , "floatingPointValue(String)" : 1 , "format(IRubyObject[])" : 1 , "formatFractionalDigitGroups(String)" : 6 , "formatHasFloatingPointNotation(String)" : 4 , "formatHasLeadingPlus(String)" : 4 , "formatHasLeadingSpace(String)" : 4 , "getAllDigits()" : 3 , "getExponent()" : 5 , "getPositiveInt(ThreadContext,IRubyObject)" : 1 , "getRoundingMode(Ruby)" : 1 , "getSignificantDigits()" : 3 , "getValue()" : 1 , "getVpValue(IRubyObject,boolean)" : 12 , "groups(String)" : 8 , "handleAddSpecialValues(RubyBigDecimal)" : 1 , "handleMinusSpecialValues(RubyBigDecimal)" : 2 , "hasArg(IRubyObject[])" : 1 , "isInfinity()" : 39 , "isInfinityExceptionMode(Ruby)" : 1 , "isNaN()" : 28 , "isNaNExceptionMode(Ruby)" : 1 , "isOverflowExceptionMode(Ruby)" : 1 , "isZero()" : 23 , "javaRoundingModeFromRubyRoundingMode(IRubyObject)" : 1 , "mult2(ThreadContext,IRubyObject,IRubyObject)" : 1 , "newBigDecimal(IRubyObject,IRubyObject[],Block)" : 1 , "newInfinity(Ruby,int)" : 15 , "newInstance(IRubyObject,IRubyObject[])" : 2 , "newNaN(Ruby)" : 26 , "newZero(Ruby,int)" : 5 , "op_div(ThreadContext,IRubyObject,IRubyObject)" : 1 , "op_mul(ThreadContext,IRubyObject)" : 3 , "op_quo(ThreadContext,IRubyObject)" : 1 , "posSign(String)" : 2 , "posSpace(String)" : 3 , "removeTrailingZeroes(String)" : 1 , "setResult()" : 8 , "setResult(int)" : 2 , "to_f()" : 1 , "truncate(IRubyObject)" : 2 , "unscaledValue()" : 5}},{ "className" : "org::jruby::compiler::ir::instructions::RECV_OPT_ARG_Instr" , "selectors" : { "RECV_OPT_ARG_Instr(Variable,int,Label)" : 1}},{ "className" : "org::jruby::javasupport::bsf::JRubyEngine::BeanGlobalVariable" , "selectors" : { "BeanGlobalVariable(???)" : 2}},{ "className" : "org::jruby::management::BeanManager" , "selectors" : { "register(ClassCacheMBean)" : 1 , "register(ConfigMBean)" : 1 , "register(JITCompilerMBean)" : 1 , "register(ParserStatsMBean)" : 1 , "unregisterClassCache()" : 1 , "unregisterCompiler()" : 1 , "unregisterConfig()" : 1 , "unregisterMethodCache()" : 1 , "unregisterParserStats()" : 1}},{ "className" : "org::jruby::runtime::builtin::InstanceVariableTable::PackedFields" , "selectors" : { "PackedFields()" : 1 , "PackedFields(String,Object)" : 1 , "contains(String)" : 1 , "fastContains(String)" : 1 , "fastFetch(String)" : 1 , "fastStore(String,Object)" : 1 , "fetch(String)" : 1 , "insert(String,Object)" : 3 , "remove(String)" : 1 , "remove(int,Object)" : 5 , "store(String,Object)" : 1 , "unpack()" : 1 , "unpackOne(VariableTableEntry[],String,Object)" : 5 , "visit(Visitor)" : 2}},{ "className" : "org::jruby::ext::ffi::ArrayMemoryIO::LE32ArrayIO" , "selectors" : { "LE32ArrayIO()" : 1}},{ "className" : "org::jruby::ext::ffi::MemoryOp::Unsigned64" , "selectors" : { "Unsigned64()" : 1}},{ "className" : "org::jruby::ext::ffi::jffi::FastIntMethodFactory::Unsigned32ResultConverter" , "selectors" : { "Unsigned32ResultConverter()" : 1}},{ "className" : "org::jruby::RubyIconv" , "selectors" : { "RubyIconv(Ruby,RubyClass)" : 1 , "_iconv(RubyString,int,int)" : 1 , "_iconv(RubyString,int,int)::ByteList" : 1 , "close()" : 2 , "convertWithArgs(ThreadContext,IRubyObject,IRubyObject[],String)" : 2 , "createIconv(Ruby)" : 1 , "getCharset(String)" : 2 , "iconv(IRubyObject)" : 2 , "iconv(IRubyObject,IRubyObject)" : 1 , "iconv(IRubyObject,IRubyObject,IRubyObject)" : 1 , "iconv(IRubyObject,int,int)" : 3 , "isIgnore(String)" : 1 , "newIconv(ThreadContext,IRubyObject,IRubyObject,IRubyObject)" : 2}},{ "className" : "org::jruby::runtime::callsite::LeCallSite" , "selectors" : { "LeCallSite()" : 1}},{ "className" : "org::jruby::embed::jsr223::JRubyScriptEngineManager" , "selectors" : { "JRubyScriptEngineManager()" : 5 , "JRubyScriptEngineManager(ClassLoader)" : 1 , "getEngineByName(String)" : 5 , "init(ClassLoader)" : 1 , "prepareMaps()" : 1}},{ "className" : "org::jruby::compiler::ir::representations::CFG::CFG_Edge" , "selectors" : { "CFG_Edge(BasicBlock,BasicBlock)" : 1}},{ "className" : "org::jruby::ext::ffi::jffi::DefaultMethodZeroArg" , "selectors" : { "DefaultMethodZeroArg(RubyModule,Function,FunctionInvoker)" : 1 , "DefaultMethodZeroArg(RubyModule,Function,FunctionInvoker)::HeapInvocationBuffer" : 1}},{ "className" : "org::jruby::ext::ffi::jffi::DefaultMethodFactory::Unsigned16Marshaller" , "selectors" : { "Unsigned16Marshaller()" : 1}},{ "className" : "org::jruby::test::BetaSingleton" , "selectors" : { "BetaSingleton()" : 1}},{ "className" : "org::jruby::runtime::callback::ReflectionCallbackFactory" , "selectors" : { "ReflectionCallbackFactory(Class)" : 1}},{ "className" : "org::jruby::JRubyApplet::TrivialFacade" , "selectors" : { "TrivialFacade()" : 1}},{ "className" : "org::jruby::ext::posix::JavaFileStatTest" , "selectors" : { "testSetup()::JavaFileStat" : 1}},{ "className" : "org::jruby::ext::ffi::jffi::FastIntMethodFactory::Unsigned16ResultConverter" , "selectors" : { "Unsigned16ResultConverter()" : 1}},{ "className" : "org::jruby::java::invokers::StaticFieldGetter" , "selectors" : { "StaticFieldGetter(String,RubyModule,Field)" : 1}},{ "className" : "org::jruby::internal::runtime::methods::DumpingInvocationMethodFactory" , "selectors" : { "DumpingInvocationMethodFactory(String,ClassLoader)" : 2}},{ "className" : "org::jruby::javasupport::JavaUtilities" , "selectors" : { "get_interface_module(IRubyObject,IRubyObject)" : 1 , "get_proxy_class(IRubyObject,IRubyObject)" : 1 , "set_java_object(IRubyObject,IRubyObject,IRubyObject)" : 2}},{ "className" : "java_integration::fixtures::UsesDescendantOfSingleMethodInterface" , "selectors" : { "callThat(DescendantOfSingleMethodInterface)" : 1}},{ "className" : "org::jruby::RubySymbol::SymbolTable" , "selectors" : { "RubySymbol" : 1 , "all_symbols()" : 2 , "fastCreateSymbol(String,SymbolEntry[])" : 1 , "fastGetSymbol(String)" : 4 , "getEntryFromTable(SymbolEntry[],int)" : 3 , "getSymbol(String)" : 6 , "isSymbolMatch(String,SymbolEntry)" : 1 , "isSymbolMatch(String,int,SymbolEntry)" : 2 , "lookup(String)" : 3 , "lookup(long)" : 1 , "rehash()" : 2}},{ "className" : "org::jruby::javasupport::JavaEmbedUtils::InterpretedEvalUnit" , "selectors" : { "InterpretedEvalUnit(Ruby,Node)" : 2}},{ "className" : "org::jruby::ext::ffi::Platform::AIX" , "selectors" : { "AIX()" : 1}},{ "className" : "org::jruby::util::IOChannel::IOReadableByteChannel" , "selectors" : { "IOReadableByteChannel(IRubyObject)" : 1}},{ "className" : "org::jruby::compiler::JITCompiler::JITClassGenerator" , "selectors" : { "JITClassGenerator(String,String,Ruby,DefaultMethod,ThreadContext)" : 1 , "callConfig()" : 1 , "compile()" : 2 , "compile()::ClassReader" : 1}},{ "className" : "org::jruby::compiler::ir::dataflow::DataFlowVar" , "selectors" : { "DataFlowVar(DataFlowProblem)" : 1}},{ "className" : "org::jruby::RubyGlobal::KCodeGlobalVariable" , "selectors" : { "KCodeGlobalVariable(Ruby,String,IRubyObject)" : 1}},{ "className" : "org::jruby::runtime::callsite::LtCallSite" , "selectors" : { "LtCallSite()" : 1}},{ "className" : "org::jruby::ast::SValue19Node" , "selectors" : { "SValue19Node(ISourcePosition,Node)" : 1}},{ "className" : "org::jruby::RubyModule::CacheEntryFactory" , "selectors" : { "newCacheEntry(DynamicMethod,Object)" : 1}},{ "className" : "org::jruby::ext::ffi::StructLayout::DefaultFieldIO" , "selectors" : { "DefaultFieldIO()" : 1}},{ "className" : "org::jruby::ext::ffi::jffi::DefaultMethodFactory::EnumInvoker" , "selectors" : { "EnumInvoker(Enum)" : 1}},{ "className" : "org::jruby::anno::AnnotationBinder::AnnotationBindingProcessor::RubyClassVisitor" , "selectors" : { "RubyClassVisitor()" : 1 , "calculateActualRequired(int,int,boolean,boolean,boolean,boolean)" : 2}},{ "className" : "org::jruby::runtime::load::ClassExtensionLibrary" , "selectors" : { "ClassExtensionLibrary(Class)" : 1}},{ "className" : "org::jruby::compiler::util::BasicObjectStubGenerator" , "selectors" : { "addBasicObjectStubsToClass(???)" : 1}},{ "className" : "java::io::PipedInputStream" , "selectors" : { "PipedInputStream()" : 24 , "PipedInputStream(PipedOutputStream)" : 10 , "available()" : 1 , "close()" : 6 , "connect(PipedOutputStream)" : 7 , "java" : 1 , "read()" : 1}},{ "className" : "org::jruby::RubyKernel::MethodMissingMethod" , "selectors" : { "methodMissing(ThreadContext,IRubyObject,RubyModule,String,IRubyObject[],Block)" : 1}},{ "className" : "org::jruby::JRubyServer" , "selectors" : { "JRubyServer(String[])" : 1 , "intoCommandArguments(String)" : 1}},{ "className" : "org::jruby::ast::FCallSpecialArgBlockNode" , "selectors" : { "FCallSpecialArgBlockNode(ISourcePosition,String,Node,IterNode)" : 2}},{ "className" : "org::jruby::util::NailMain" , "selectors" : { "NailMain()" : 1 , "run(???)" : 1}},{ "className" : "org::jruby::embed::variable::TransientLocalVariable" , "selectors" : { "TransientLocalVariable(Ruby,String,Object[])" : 1 , "getInstance(Ruby,String,Object[])" : 1 , "isValidName(Object)" : 1}},{ "className" : "org::jruby::RubyGlobal::SafeGlobalVariable" , "selectors" : { "SafeGlobalVariable(Ruby,String)" : 1}},{ "className" : "org::jruby::RubyIO::POpenTuple" , "selectors" : { "POpenTuple(RubyIO,RubyIO,RubyIO,Process)" : 1}},{ "className" : "org::jruby::ext::ffi::jffi::DefaultMethodFactory::Unsigned64Invoker" , "selectors" : { "Unsigned64Invoker()" : 1}},{ "className" : "org::jruby::compiler::ir::instructions::FilenameInstruction" , "selectors" : { "FilenameInstruction(String)" : 1}},{ "className" : "org::jruby::util::ClassCache::KeyedClassReference" , "selectors" : { "KeyedClassReference(Object,Class<T>,ReferenceQueue<Class<T>>)" : 1 , "getKey()" : 1}},{ "className" : "org::jruby::compiler::util::HandleFactory::FakeLoader" , "selectors" : { "FakeLoader(ClassLoader)" : 1 , "loadClass(String,boolean)" : 1}},{ "className" : "org::jruby::ext::ffi::Struct::Allocator" , "selectors" : { "Allocator()" : 1}},{ "className" : "org::jruby::runtime::IAccessor" , "selectors" : { "getValue()" : 2 , "setValue(IRubyObject)" : 1}},{ "className" : "org::jruby::RubyGlobal" , "selectors" : { "createGlobals(ThreadContext,Ruby)" : 1 , "defineGlobalEnvConstants(Ruby)" : 1}},{ "className" : "org::jruby::compiler::ir::instructions::ALU_Instr" , "selectors" : { "ALU_Instr(Operation,Variable,Operand)" : 1}},{ "className" : "org::jruby::ast::BlockArg18Node" , "selectors" : { "BlockArg18Node(ISourcePosition,Node,Node)" : 1 , "getArgs()" : 1 , "getBlockArg()" : 1}},{ "className" : "java::nio::channels::Pipe" , "selectors" : { "open()" : 2 , "sink()" : 2 , "source()" : 2}},{ "className" : "org::jruby::internal::runtime::methods::UndefinedMethod" , "selectors" : { "UndefinedMethod()" : 1 , "getInstance()" : 3}},{ "className" : "java::net::ServerSocket" , "selectors" : { "ServerSocket()" : 9 , "ServerSocket(int)" : 60 , "ServerSocket(int,int)" : 7 , "ServerSocket(int,int,InetAddress)" : 35 , "accept()" : 96 , "bind(SocketAddress)" : 13 , "bind(SocketAddress,int)" : 11 , "close()" : 74 , "getChannel()" : 1 , "getInetAddress()" : 15 , "getLocalPort()" : 63 , "getLocalSocketAddress()" : 7 , "getReceiveBufferSize()" : 2 , "getReuseAddress()" : 1 , "getSoTimeout()" : 1 , "implAccept(Socket)" : 2 , "isClosed()" : 8 , "setPerformancePreferences(int,int,int)" : 2 , "setReceiveBufferSize(int)" : 7 , "setReuseAddress(boolean)" : 16 , "setSoTimeout(int)" : 15 , "toString()" : 4}},{ "className" : "org::jruby::ext::socket::Shutdownable" , "selectors" : { "shutdownInput()" : 1 , "shutdownOutput()" : 1}},{ "className" : "org::jruby::ext::ffi::MemoryOp::Unsigned32" , "selectors" : { "Unsigned32()" : 1}},{ "className" : "org::jruby::util::JRubyThreadContextTest::SimpleClassLoader" , "selectors" : { "SimpleClassLoader()" : 1}},{ "className" : "org::jruby::parser::ParserSupport19" , "selectors" : { "ParserSupport19()" : 1}},{ "className" : "org::jruby::ext::ffi::NativeParam" , "selectors" : { "getNativeType()" : 1}},{ "className" : "org::jruby::compiler::ir::instructions::GET_GLOBAL_VAR_Instr" , "selectors" : { "GET_GLOBAL_VAR_Instr(Variable,String)" : 1}},{ "className" : "org::jruby::ext::ffi::jffi::FastLongMethodFactory::Unsigned8ResultConverter" , "selectors" : { "Unsigned8ResultConverter()" : 1}},{ "className" : "org::jruby::embed::EmbedRubyInterfaceAdapter" , "selectors" : { "getInstance(Object,Class<T>)" : 1}},{ "className" : "org::jruby::ast::EncodingNode" , "selectors" : { "EncodingNode(ISourcePosition)" : 1}},{ "className" : "org::jruby::ext::ffi::StructLayout::NullStorage" , "selectors" : { "NullStorage()" : 1}},{ "className" : "org::jruby::test::TestAdoptedThreading" , "selectors" : { "setUp()::BSFManager" : 1 , "suite()::TestSuite" : 1}},{ "className" : "org::jruby::embed::jsr223::ServiceFinder" , "selectors" : { "ServiceFinder(ClassLoader,String)" : 1 , "deleteComments(String)" : 1 , "findResources(ClassLoader)" : 1 , "getClassNames(Enumeration<URL>)" : 1 , "getServices()" : 1 , "instantiateClasses(List<String>)" : 1}},{ "className" : "org::jruby::ast::OpElementOneArgAndAsgnNode" , "selectors" : { "OpElementOneArgAndAsgnNode(ISourcePosition,Node,String,ArrayNode,Node)" : 1}},{ "className" : "org::jruby::runtime::ReadonlyGlobalVariable" , "selectors" : { "ReadonlyGlobalVariable(Ruby,String,IRubyObject)" : 2}},{ "className" : "java::lang::Process" , "selectors" : { "destroy()" : 60 , "exitValue()" : 69 , "getErrorStream()" : 93 , "getInputStream()" : 122 , "getOutputStream()" : 31 , "waitFor()" : 166}},{ "className" : "org::jruby::compiler::ir::operands::TemporaryClosureVariable" , "selectors" : { "TemporaryClosureVariable(int,int)" : 1}},{ "className" : "org::jruby::ext::ffi::jffi::FastIntMethodFactory::PointerResultConverter" , "selectors" : { "PointerResultConverter()" : 1}},{ "className" : "org::jruby::util::collections::WeakHashSet<T>" , "selectors" : { "WeakHashSet()" : 3}},{ "className" : "org::jruby::ext::ffi::io::FileDescriptorIO::Allocator" , "selectors" : { "Allocator()" : 1}},{ "className" : "org::jruby::ext::Readline::ReadlineHistory" , "selectors" : { "ReadlineHistory()" : 1 , "addToHistory(???)" : 1 , "getHistoryList(???)" : 3 , "pop()" : 1 , "remove(int)" : 3 , "set(int,String)" : 1 , "setCurrentIndex(int)" : 1 , "size(???)" : 7}},{ "className" : "org::jruby::ext::ffi::io::FileDescriptorByteChannel::LibC" , "selectors" : { "close(int)" : 1 , "read(int,ByteBuffer,int)" : 1 , "write(int,ByteBuffer,int)" : 1}},{ "className" : "org::jruby::ext::ffi::MemoryOp::Float32" , "selectors" : { "Float32()" : 1}},{ "className" : "org::jruby::embed::EmbedRubyRuntimeAdapter" , "selectors" : { "parse(InputStream,String,int[])" : 1 , "parse(PathType,String,int[])" : 1 , "parse(Reader,String,int[])" : 1 , "parse(String,int[])" : 2}},{ "className" : "org::jruby::ast::RootNode" , "selectors" : { "getBodyNode()" : 6 , "getStaticScope()" : 2 , "interpret(Ruby,ThreadContext,IRubyObject,Block)" : 1 , "org" : 3}},{ "className" : "org::jruby::ext::ffi::jffi::DefaultMethodFactory::Unsigned32Marshaller" , "selectors" : { "Unsigned32Marshaller()" : 1}},{ "className" : "org::jruby::compiler::ir::operands::DynamicReference" , "selectors" : { "DynamicReference(CompoundString)" : 1}},{ "className" : "org::jruby::RubyGlobal::LastExitStatusVariable" , "selectors" : { "LastExitStatusVariable(Ruby,String)" : 1}},{ "className" : "org::jruby::ext::ffi::jffi::FastIntMethodFactory::BooleanParameterConverter" , "selectors" : { "BooleanParameterConverter()" : 1}},{ "className" : "org::jruby::ast::CallManyArgsNode" , "selectors" : { "CallManyArgsNode(ISourcePosition,Node,String,Node)" : 1}},{ "className" : "org::jruby::RubyNumeric::ByteListCaller18" , "selectors" : { "ByteListCaller18()" : 1}},{ "className" : "org::jruby::ext::ffi::MemoryOp::Unsigned8" , "selectors" : { "Unsigned8()" : 1}},{ "className" : "org::jruby::util::collections::IntHashMap" , "selectors" : { "IntHashMap(int,float)" : 2 , "clear()" : 3 , "contains(Object)" : 1 , "containsKey(int)" : 1 , "containsValue(Object)" : 1 , "getEntry(int)" : 1 , "newEntryIterator()" : 1 , "newKeyIterator()" : 1 , "newValueIterator()" : 1 , "rehash()" : 1}},{ "className" : "java::util::zip::Deflater" , "selectors" : { "Deflater()" : 4 , "Deflater(int)" : 14 , "Deflater(int,boolean)" : 6 , "deflate(byte[])" : 7 , "deflate(byte[],int,int)" : 2 , "end()" : 11 , "finish()" : 8 , "finished()" : 8 , "getAdler()" : 1 , "getTotalIn()" : 3 , "getTotalOut()" : 3 , "needsInput()" : 1 , "reset()" : 6 , "setDictionary(byte[])" : 1 , "setInput(byte[])" : 3 , "setInput(byte[],int,int)" : 7 , "setLevel(int)" : 5 , "setStrategy(int)" : 6}},{ "className" : "org::jruby::RubyArray::RubyArrayConversionListIterator" , "selectors" : { "RubyArrayConversionListIterator()" : 1 , "RubyArrayConversionListIterator(int)" : 1}},{ "className" : "org::jruby::ext::ffi::jffi::AllocatedNativeMemoryIO" , "selectors" : { "AllocatedNativeMemoryIO(Ruby,long,int,int)" : 1 , "allocate(Ruby,int,boolean)" : 1 , "allocateAligned(Ruby,int,int,boolean)" : 2}},{ "className" : "org::jruby::ext::ffi::MemoryOp::Signed64" , "selectors" : { "Signed64()" : 1}},{ "className" : "org::jruby::RubyHash::Found" , "selectors" : { "Found()" : 2}},{ "className" : "org::jruby::ext::ffi::jffi::DefaultMethodFactory::StringMarshaller" , "selectors" : { "StringMarshaller()" : 1}},{ "className" : "org::jruby::util::RecursiveComparator::Pair" , "selectors" : { "RecursiveComparator" : 1}},{ "className" : "org::jruby::compiler::ir::operands::DynamicSymbol" , "selectors" : { "DynamicSymbol(CompoundString)" : 1}},{ "className" : "org::jruby::ext::ffi::StructLayout::EnumFieldIO" , "selectors" : { "EnumFieldIO()" : 1}},{ "className" : "javax::script::ScriptEngineManager" , "selectors" : { "ScriptEngineManager()" : 27 , "getEngineByName(String)" : 26 , "getEngineFactories()" : 1 , "put(String,Object)" : 16}},{ "className" : "org::jruby::RubyZlib::ZStream" , "selectors" : { "ZStream(Ruby,RubyClass)" : 2 , "checkClosed()" : 11 , "checkLevel(Ruby,int)" : 3 , "checkStrategy(Ruby,int)" : 1 , "checkWindowBits(Ruby,int)" : 2 , "close()" : 2 , "finish(ThreadContext)" : 1 , "internalAdler()" : 1 , "internalClose()" : 1 , "internalFinish()" : 1 , "internalFinished()" : 1 , "internalReset()" : 1 , "internalStreamEndP()" : 1 , "internalTotalIn()" : 1 , "internalTotalOut()" : 1}},{ "className" : "org::jruby::ast::OpElementOneArgAsgnNode" , "selectors" : { "OpElementOneArgAsgnNode(ISourcePosition,Node,String,ArrayNode,Node)" : 1}},{ "className" : "org::jruby::ext::NetProtocolBufferedIO" , "selectors" : { "create(Ruby)" : 1}},{ "className" : "org::jruby::javasupport::JavaClass::ClassInitializer" , "selectors" : { "ClassInitializer(Class<?>)" : 1}},{ "className" : "org::jruby::ast::Colon2MethodNode" , "selectors" : { "Colon2MethodNode(ISourcePosition,Node,String)" : 1 , "hasMethod(IRubyObject)" : 1}},{ "className" : "org::jruby::ext::ffi::jffi::CallbackManager::Callback" , "selectors" : { "Callback(???)" : 1 , "dispose()" : 1}},{ "className" : "org::jruby::runtime::callsite::FunctionalCachingCallSite" , "selectors" : { "FunctionalCachingCallSite(String)" : 1}},{ "className" : "org::jruby::RubyEnumerable::ChunkArg" , "selectors" : { "ChunkArg()" : 1}},{ "className" : "org::jruby::javasupport::JavaUtil::RubyConverter" , "selectors" : { "convert(ThreadContext,IRubyObject)" : 1}},{ "className" : "org::jruby::compiler::ir::instructions::GET_FIELD_Instr" , "selectors" : { "GET_FIELD_Instr(Variable,Operand,String)" : 1}},{ "className" : "org::jruby::ext::ffi::jffi::FastIntMethodFactory::Signed32ParameterConverter" , "selectors" : { "Signed32ParameterConverter()" : 1}},{ "className" : "org::jruby::test::Ruby1_9TestSuite" , "selectors" : { "Ruby1_9TestSuite(String)" : 1}},{ "className" : "org::jruby::util::collections::IntHashMap::Values" , "selectors" : { "Values()" : 1}},{ "className" : "org::jruby::ext::ffi::StructLayout::StringField" , "selectors" : { "StringField(Ruby,RubyClass)" : 1 , "StructLayout" : 1}},{ "className" : "org::jruby::compiler::ir::targets::JVM::MethodData" , "selectors" : { "MethodData(???)" : 1}},{ "className" : "org::jruby::java::addons::ArrayJavaAddons" , "selectors" : { "copyDataToJavaArray(ThreadContext,RubyArray,JavaArray)" : 2 , "copyDataToJavaArrayDirect(ThreadContext,RubyArray,Object)" : 1 , "dimsRecurse(ThreadContext,RubyArray,RubyArray,int)" : 4}},{ "className" : "org::jruby::runtime::ObjectSpace::WeakReferenceListNode" , "selectors" : { "WeakReferenceListNode(Object,ReferenceQueue,WeakReferenceListNode)" : 1 , "remove()" : 1}},{ "className" : "org::jruby::runtime::scope::OneVarDynamicScope" , "selectors" : { "OneVarDynamicScope(StaticScope)" : 1 , "OneVarDynamicScope(StaticScope,DynamicScope)" : 3 , "getValue(int,int)" : 1 , "getValueDepthZeroOrNil(int,IRubyObject)" : 1}},{ "className" : "java_integration::fixtures::BooleanReturningInterface" , "selectors" : { "bar()" : 1}},{ "className" : "org::jruby::ext::ffi::MemoryOp::Unsigned16" , "selectors" : { "Unsigned16()" : 1}},{ "className" : "org::jruby::ext::ffi::Factory::SingletonHolder" , "selectors" : { "getInstance()" : 1}},{ "className" : "org::jruby::javasupport::proxy::JavaProxyClassFactory::MethodKey" , "selectors" : { "MethodKey(Method)" : 1}},{ "className" : "org::jruby::internal::runtime::methods::JavaMethod::JavaMethodZeroOrOneOrTwoOrThreeOrNBlock" , "selectors" : { "JavaMethodZeroOrOneOrTwoOrThreeOrNBlock(RubyModule,Visibility)" : 1 , "JavaMethodZeroOrOneOrTwoOrThreeOrNBlock(RubyModule,Visibility,CallConfiguration)" : 1 , "call(ThreadContext,IRubyObject,RubyModule,String,IRubyObject,IRubyObject,IRubyObject,Block)" : 2}},{ "className" : "org::jruby::ext::ffi::StructLayout::PointerFieldIO" , "selectors" : { "PointerFieldIO()" : 1}},{ "className" : "org::jruby::ext::ffi::jffi::FastIntMethodFactory::Unsigned8ParameterConverter" , "selectors" : { "Unsigned8ParameterConverter()" : 1}},{ "className" : "org::jruby::RubyDigest::DigestBase" , "selectors" : { "DigestBase(Ruby,RubyClass)" : 1 , "getMetadata(RubyModule)" : 1 , "setAlgorithm(Metadata)" : 1 , "update(IRubyObject)" : 1}},{ "className" : "java::awt::image::VolatileImage" , "selectors" : { "contentsLost()" : 4 , "createGraphics()" : 3 , "getHeight()" : 3 , "getWidth()" : 3 , "validate(GraphicsConfiguration)" : 3}},{ "className" : "org::jruby::compiler::ir::operands::SValue" , "selectors" : { "SValue(Operand)" : 1}},{ "className" : "org::jruby::internal::runtime::methods::MethodArgs" , "selectors" : { "getArgsNode()" : 1}},{ "className" : "org::jruby::ext::ffi::StructLayout::StringFieldIO" , "selectors" : { "StringFieldIO()" : 1}},{ "className" : "java::nio::channels::spi::AbstractSelectableChannel" , "selectors" : { "blockingLock()" : 2 , "configureBlocking(boolean)" : 41 , "isBlocking()" : 2 , "isRegistered()" : 1 , "keyFor(Selector)" : 21 , "register(Selector,int,Object)" : 14}},{ "className" : "org::jruby::ext::ffi::jffi::DefaultMethodFactory::BooleanMarshaller" , "selectors" : { "BooleanMarshaller()" : 1}},{ "className" : "org::jruby::ext::ffi::MemoryOp" , "selectors" : { "get(Ruby,AbstractMemory,long)" : 2 , "get(Ruby,MemoryIO,long)" : 2 , "getMemoryOp(NativeType)" : 1 , "getMemoryOp(Type)" : 2 , "put(Ruby,AbstractMemory,long,IRubyObject)" : 2 , "put(Ruby,MemoryIO,long,IRubyObject)" : 2}},{ "className" : "org::jruby::ast::CallManyArgsBlockPassNode" , "selectors" : { "CallManyArgsBlockPassNode(ISourcePosition,Node,String,Node,BlockPassNode)" : 1}},{ "className" : "org::jruby::test::JRUBY_2480_B" , "selectors" : { "foo(Object)" : 1}},{ "className" : "org::jruby::ext::ffi::Platform::Default" , "selectors" : { "Default(OS)" : 1}},{ "className" : "org::jruby::runtime::CompiledSharedScopeBlock" , "selectors" : { "CompiledSharedScopeBlock(Arity,DynamicScope,CompiledBlockCallback,boolean,int)" : 1 , "newCompiledSharedScopeClosure(ThreadContext,IRubyObject,Arity,DynamicScope,CompiledBlockCallback,boolean,int)" : 1}},{ "className" : "org::jruby::ext::ffi::StructLayout::ArrayFieldAllocator" , "selectors" : { "ArrayFieldAllocator()" : 1}},{ "className" : "com::ivata::groupware::container::persistence::BaseDO" , "selectors" : { "equals(Object)" : 6 , "getId()" : 165 , "hashCode()" : 1 , "setId(Integer)" : 5 , "toString()" : 1}},{ "className" : "com::ivata::groupware::business::addressbook::address::country::CountryDO" , "selectors" : { "CountryDO()" : 4 , "getCode()" : 5 , "getDisplayValue()" : 1 , "getName()" : 4 , "getPriority()" : 2}},{ "className" : "com::ivata::groupware::container::persistence::TimestampDO" , "selectors" : { "getCreated()" : 4 , "getCreatedBy()" : 19 , "getModified()" : 9 , "getModifiedBy()" : 5 , "setCreated(Timestamp)" : 1 , "setCreatedBy(UserDO)" : 5 , "setModified(Timestamp)" : 1 , "setModifiedBy(UserDO)" : 2 , "toString()" : 5}},{ "className" : "com::ivata::groupware::web::tag::GetSettingTag" , "selectors" : { "doStartTag()::JspException" : 3}},{ "className" : "com::ivata::groupware::business::calendar::struts::IndexAction" , "selectors" : { "execute(ActionMapping,ActionErrors,ActionForm,HttpServletRequest,HttpServletResponse,HttpSession)::SystemException" : 1}},{ "className" : "com::ivata::groupware::admin::security::user::UserEvent" , "selectors" : { "getUserName()" : 1}},{ "className" : "com::ivata::groupware::business::addressbook::person::group::tree::PersonTreeModel" , "selectors" : { "getAllChildren(Object)" : 3}},{ "className" : "com::ivata::groupware::container::persistence::listener::AmendPersistenceListener" , "selectors" : { "onAmend(???)" : 1}},{ "className" : "com::ivata::groupware::web::tag::HeadTag" , "selectors" : { "doAfterBody()::JspException" : 1 , "doEndTag()::JspException" : 2 , "doEndTag()::URLFormat" : 1 , "doStartTag()::JspException" : 1}},{ "className" : "com::ivata::groupware::web::format::EmailAddressFormatter" , "selectors" : { "EmailAddressFormatter()" : 1 , "format(List)::JavaScriptWindow" : 1 , "format(List)::URLFormat" : 1 , "format(String)" : 6 , "format(String)::InternetAddress" : 2}},{ "className" : "cern::colt::function::IntObjectProcedure" , "selectors" : { "apply(int,Object)" : 4}},{ "className" : "cern::colt::buffer::ObjectBuffer" , "selectors" : { "flush()" : 2}},{ "className" : "cern::colt::buffer::IntBuffer2D" , "selectors" : { "flush()" : 2}},{ "className" : "cern::colt::function::BooleanProcedure" , "selectors" : { "apply(boolean)" : 2}},{ "className" : "cern::colt::matrix::impl::Former" , "selectors" : { "form(double)" : 5}},{ "className" : "cern::colt::matrix::ObjectMatrix2DProcedure" , "selectors" : { "apply(ObjectMatrix2D)" : 1}},{ "className" : "cern::colt::buffer::IntBuffer3D" , "selectors" : { "flush()" : 2}},{ "className" : "javax::naming::NameParser" , "selectors" : { "parse(String)" : 90}},{ "className" : "org::exoplatform::text::template::xhtml::HeaderCell" , "selectors" : { "HeaderCell(String)" : 1}},{ "className" : "org::exoplatform::services::jcr::impl::core::nodetype::nt::Base" , "selectors" : { "Base()" : 11}},{ "className" : "org::exoplatform::test::web::ExoWebClient::TimeListener" , "selectors" : { "TimeListener()" : 1 , "getExecutionTime()" : 1}},{ "className" : "org::exoplatform::services::communication::sms::common::OperationNotSupported" , "selectors" : { "OperationNotSupported(String)" : 7}},{ "className" : "org::exoplatform::services::communication::sms::provider::Sender" , "selectors" : { "getProvider()" : 1 , "prepare(Messages)" : 4 , "send()" : 3}},{ "className" : "java::lang::management::ClassLoadingMXBean" , "selectors" : { "getLoadedClassCount()" : 1 , "getTotalLoadedClassCount()" : 1 , "getUnloadedClassCount()" : 1}},{ "className" : "org::exoplatform::test::mocks::jsf::MockApplication" , "selectors" : { "MockApplication()" : 1}},{ "className" : "org::exoplatform::faces::core::renderer::html::Decorator" , "selectors" : { "Decorator(String)" : 1 , "decorate(???)" : 2}},{ "className" : "javax::jcr::ItemVisitor" , "selectors" : { "visit(Node)" : 1 , "visit(Property)" : 1}},{ "className" : "org::exoplatform::services::jcr::api::serialization::ExportSysViewTest" , "selectors" : { "initRepository()" : 3}},{ "className" : "javax::jcr::RangeIterator" , "selectors" : { "getSize()" : 9}},{ "className" : "org::exoplatform::commons::utils::HtmlUtil" , "selectors" : { "showXmlTags(String)" : 4}},{ "className" : "org::exoplatform::test::mocks::portlet::MockPortletContext" , "selectors" : { "MockPortletContext()" : 1}},{ "className" : "org::exoplatform::services::grammar::wiki::test::TestWikiParser" , "selectors" : { "pintMessage(String,long,long)" : 2}},{ "className" : "org::exoplatform::portlets::content::display::component::UIContentPortlet" , "selectors" : { "UIContentPortlet()" : 1 , "createUIContentTab(ContentConfig)" : 1}},{ "className" : "org::exoplatform::services::portal::impl::PageDescriptionData" , "selectors" : { "getId()" : 1}},{ "className" : "org::exoplatform::portlets::weather::component::UIWeatherEditPortlet" , "selectors" : { "process()" : 3}},{ "className" : "org::exoplatform::services::communication::sms::common::ResponseException" , "selectors" : { "ResponseException(String)" : 1 , "ResponseException(Throwable)" : 4}},{ "className" : "org::exoplatform::services::xml::querying::impl::xtas::TestConfig" , "selectors" : { "suite()::TestSuite" : 1}},{ "className" : "org::exoplatform::services::xml::querying::impl::xtas::Addresses" , "selectors" : { "getAddresses()" : 1 , "getCountry()" : 1}},{ "className" : "org::xml::sax::EntityResolver" , "selectors" : { "resolveEntity(String,String)" : 7}},{ "className" : "org::exoplatform::services::wsrp::consumer::adapters::PortletKeyAdapter" , "selectors" : { "PortletKeyAdapter()" : 3}},{ "className" : "javax::jcr::version::OnParentVersionAction" , "selectors" : { "nameFromValue(int)" : 1}},{ "className" : "org::exoplatform::services::xml::transform::impl::trax::TRAXTemplatesImpl" , "selectors" : { "TRAXTemplatesImpl(Templates)" : 1}},{ "className" : "org::exoplatform::services::grammar::wiki::impl::WikiEngineServiceImpl" , "selectors" : { "WikiEngineServiceImpl(ConfigurationManager)::StackObjectPool" : 1}},{ "className" : "org::exoplatform::services::portletcontainer::imp::TestPortletIoCComponent" , "selectors" : { "testPortletAsIoCComponent()::PortletMode" : 1}},{ "className" : "org::exoplatform::services::portletcontainer::imp::TestPortletLyfecycleListener::Listener" , "selectors" : { "Listener()" : 1}},{ "className" : "org::quartz::Quartz601Test" , "selectors" : { "assertParsesForField(String,int)" : 12}},{ "className" : "org::quartz::examples::example3::CronTriggerExample" , "selectors" : { "CronTriggerExample()" : 1 , "run()" : 1}},{ "className" : "java::rmi::RMISecurityManager" , "selectors" : { "RMISecurityManager()" : 2 , "java" : 2}},{ "className" : "org::quartz::impl::jdbcjobstore::LockException" , "selectors" : { "LockException(String,Throwable)" : 5}},{ "className" : "org::quartz::impl::SchedulerDetailsSetterTest::MyJobStore" , "selectors" : { "MyJobStore()" : 1}},{ "className" : "org::quartz::impl::jdbcjobstore::HSQLDBDelegate" , "selectors" : { "getObjectFromBlob(ResultSet,String)" : 1}},{ "className" : "org::quartz::jobs::NativeJob" , "selectors" : { "runNativeCommand(String,String,boolean,boolean)" : 1}},{ "className" : "org::quartz::utils::counter::sampled::SampledRateCounterImpl" , "selectors" : { "SampledRateCounterImpl(SampledRateCounterConfig)" : 1 , "getValue()" : 1 , "setValue(long,long)" : 2}},{ "className" : "org::argouml::swingext::SpacerPanel" , "selectors" : { "SpacerPanel()" : 16}},{ "className" : "org::argouml::model::mdr::MetaTypesMDRImpl" , "selectors" : { "MetaTypesMDRImpl()" : 1}},{ "className" : "org::argouml::activity2::diagram::UMLActivityDiagram" , "selectors" : { "UMLActivityDiagram(Object)" : 1}},{ "className" : "org::argouml::uml::reveng::ImporterManager" , "selectors" : { "ImporterManager()" : 1 , "addImporter(ImportInterface)" : 5 , "getImporters()" : 1 , "getInstance()" : 7 , "hasImporters()" : 1}},{ "className" : "org::argouml::uml::reveng::ui::ImportClasspathDialog" , "selectors" : { "ImportClasspathDialog(PathListSelection)" : 1 , "updatePathList()" : 2}},{ "className" : "org::argouml::uml::ui::ActionCollaborationDiagram" , "selectors" : { "ActionCollaborationDiagram()" : 8 , "createDiagram(Object,DiagramSettings)" : 1}},{ "className" : "org::argouml::profile::internal::ocl::uml14::HashBag<T>" , "selectors" : { "HashBag()" : 4}},{ "className" : "org::argouml::model::euml::DirectionKindEUMLImpl" , "selectors" : { "DirectionKindEUMLImpl()" : 1}},{ "className" : "org::argouml::uml::diagram::ui::ActionAddExtensionPoint" , "selectors" : { "ActionAddExtensionPoint()" : 1 , "shouldBeEnabled()" : 2 , "singleton()" : 2 , "singleton()::anonymous(TargetListener)" : 3}},{ "className" : "org::argouml::uml::ui::Seperator" , "selectors" : { "Seperator()" : 1}},{ "className" : "org::argouml::notation::providers::OperationNotation" , "selectors" : { "OperationNotation(Object)" : 3}},{ "className" : "javax::swing::ComboBoxModel" , "selectors" : { "getSelectedItem()" : 35 , "setSelectedItem(Object)" : 13}},{ "className" : "org::argouml::model::euml::ScopeKindEUMLImpl" , "selectors" : { "ScopeKindEUMLImpl()" : 1}},{ "className" : "org::argouml::core::propertypanels::model::GetterSetterManagerImpl::ActiveGetterSetter" , "selectors" : { "ActiveGetterSetter()" : 1}},{ "className" : "org::argouml::ui::cmd::ActionNew" , "selectors" : { "ActionNew()" : 3}},{ "className" : "org::argouml::uml::ui::behavior::state_machines::ActionNewSubmachineState" , "selectors" : { "ActionNewSubmachineState()" : 1}},{ "className" : "org::argouml::language::java::reveng::classfile::JavaParseException" , "selectors" : { "JavaParseException(String)" : 2}},{ "className" : "org::argouml::profile::StreamModelLoader" , "selectors" : { "loadModel(InputStream,URL)" : 1}},{ "className" : "org::argouml::persistence::ProfileConfigurationParser::ProfileConfigurationTokenTable" , "selectors" : { "ProfileConfigurationTokenTable()" : 1}},{ "className" : "org::argouml::cognitive::NotSnoozedCM" , "selectors" : { "NotSnoozedCM()" : 1}},{ "className" : "org::argouml::cognitive::ui::ActionAutoCritique" , "selectors" : { "ActionAutoCritique()" : 2}},{ "className" : "org::argouml::uml::util::namespace::Namespace" , "selectors" : { "iterator()" : 1 , "toString(String)" : 1}},{ "className" : "java::io::FilterInputStream" , "selectors" : { "FilterInputStream(InputStream)" : 49 , "available()" : 47 , "close()" : 242 , "mark(int)" : 12 , "markSupported()" : 1 , "read()" : 92 , "read(byte[])" : 100 , "read(byte[],int,int)" : 21 , "reset()" : 10 , "skip(long)" : 18}},{ "className" : "org::argouml::uml::generator::SourceUnit" , "selectors" : { "SourceUnit(String,String)" : 1 , "SourceUnit(String,String,String)" : 1 , "getBasePath()" : 1 , "getContent()" : 1 , "getFullName()" : 1 , "getName()" : 1 , "setBasePath(String)" : 1 , "setFullName(String)" : 1 , "setName(String)" : 1}},{ "className" : "org::argouml::uml::reveng::ui::ImportClasspathDialog::RemoveListener" , "selectors" : { "RemoveListener()" : 1}},{ "className" : "com::nwalsh::xalan::FormatGraphicCallout" , "selectors" : { "FormatGraphicCallout(String,String,int,boolean)" : 1}},{ "className" : "org::jgraph::util::RectUtils" , "selectors" : { "union(Rectangle2D,Rectangle2D)" : 3}},{ "className" : "org::jgraph::example::JGraphIconView::MyMultiLinedEditor" , "selectors" : { "MyMultiLinedEditor()" : 1}},{ "className" : "org::jgraph::example::LiveJGraphDemo::FrameSelectionListener" , "selectors" : { "FrameSelectionListener()" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::html::HtmlObject" , "selectors" : { "HtmlObject(String,String,SgmlPage,Map<String,DomAttr>)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::host::css::CSSRule" , "selectors" : { "CSSRule(CSSStyleSheet,CSSRule)" : 2 , "create(CSSStyleSheet,CSSRule)" : 2 , "getRule()" : 4 , "jsxGet_parentStyleSheet()" : 2}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::host::html::HTMLElement2Test" , "selectors" : { "events(String)" : 3}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::TimeoutError" , "selectors" : { "TimeoutError(long,long)" : 1}},{ "className" : "net::sf::freecol::common::model::MonarchTest" , "selectors" : { "choicesContain(List<RandomChoice<MonarchAction>>,MonarchAction)" : 12}},{ "className" : "net::sf::freecol::client::gui::panel::ChooseFoundingFatherDialog" , "selectors" : { "ChooseFoundingFatherDialog(Canvas,List<FoundingFather>)" : 1}},{ "className" : "net::sf::freecol::common::networking::DeliverGiftMessage" , "selectors" : { "DeliverGiftMessage(Game,Element)" : 1 , "DeliverGiftMessage(Unit,Settlement,Goods)" : 2 , "getXMLElementTagName()" : 2 , "handle(FreeColServer,Player,Connection)" : 1}},{ "className" : "net::sf::freecol::client::Worker" , "selectors" : { "Worker()" : 2 , "askToStop()" : 1 , "run()" : 1 , "schedule(Runnable)" : 3}},{ "className" : "net::sf::freecol::client::gui::plaf::FreeColMenuBarUI" , "selectors" : { "FreeColMenuBarUI()" : 1}},{ "className" : "net::sf::freecol::server::model::MercenariesSession" , "selectors" : { "MercenariesSession(Monarch,Player)" : 1 , "complete(ChangeSet)" : 1 , "getMercenaries()" : 1 , "getPrice()" : 1 , "setMercenaries(List<AbstractUnit>)" : 1 , "setPrice(int)" : 1}},{ "className" : "net::sf::freecol::client::gui::plaf::FreeColTableHeaderUI" , "selectors" : { "FreeColTableHeaderUI()" : 1}},{ "className" : "net::sf::freecol::client::gui::panel::PlayersTable::PlayerCellRenderer" , "selectors" : { "PlayerCellRenderer()" : 1}},{ "className" : "net::sf::freecol::client::gui::plaf::FreeColPanelUI" , "selectors" : { "FreeColPanelUI()" : 1}},{ "className" : "org::apache::jasper::compiler::TestGenerator::Bean" , "selectors" : { "Bean()" : 1 , "setTime(String)" : 1}},{ "className" : "org::apache::catalina::tribes::io::ListenCallback" , "selectors" : { "messageDataReceived(ChannelMessage)" : 2}},{ "className" : "org::apache::tomcat::jni::OS" , "selectors" : { "is(int)" : 8}},{ "className" : "org::apache::catalina::valves::RemoteIpValve" , "selectors" : { "RemoteIpValve()" : 11 , "commaDelimitedListToPatternArray(String)" : 2 , "commaDelimitedListToStringArray(String)" : 4 , "invoke(Request,Response)" : 11 , "listToCommaDelimitedString(List<String>)" : 7 , "matchesOne(String,Pattern[])" : 3 , "setInternalProxies(String)" : 7 , "setProtocolHeader(String)" : 4 , "setProxiesHeader(String)" : 7 , "setRemoteIpHeader(String)" : 11 , "setTrustedProxies(String)" : 7}},{ "className" : "java::security::cert::PKIXParameters" , "selectors" : { "addCertStore(CertStore)" : 1 , "setRevocationEnabled(boolean)" : 1}},{ "className" : "org::apache::catalina::tribes::group::RpcChannel::RpcCollector" , "selectors" : { "RpcCollector(RpcCollectorKey,int,int,long)" : 1 , "addResponse(Serializable,Member)" : 1 , "getResponses()" : 1 , "isComplete()" : 1}},{ "className" : "org::apache::tomcat::util::http::fileupload::util::Closeable" , "selectors" : { "isClosed()" : 1}},{ "className" : "org::apache::catalina::startup::SetJspConfig" , "selectors" : { "SetJspConfig()" : 1}},{ "className" : "org::apache::catalina::connector::CoyoteInputStream" , "selectors" : { "CoyoteInputStream(InputBuffer)" : 4 , "clear()" : 1}},{ "className" : "org::apache::jasper::compiler::Node::InvokeAction" , "selectors" : { "Node" : 3}},{ "className" : "org::apache::el::parser::AstString" , "selectors" : { "AstString(int)" : 1 , "getString()" : 1 , "setImage(String)" : 1}},{ "className" : "org::apache::catalina::loader::ResourceEntry" , "selectors" : { "ResourceEntry()" : 2}},{ "className" : "org::apache::juli::ClassLoaderLogManager::ClassLoaderLogInfo" , "selectors" : { "ClassLoaderLogInfo(LogNode)" : 1}},{ "className" : "org::apache::catalina::startup::EngineConfig" , "selectors" : { "start()" : 1 , "stop()" : 1}},{ "className" : "org::apache::jasper::runtime::JspRuntimeLibrary::PrivilegedIntrospectHelper" , "selectors" : { "PrivilegedIntrospectHelper(Object,String,String,ServletRequest,String,boolean)" : 1}},{ "className" : "org::apache::catalina::ssi::SSIConditionalState" , "selectors" : { "SSIConditionalState()" : 1}},{ "className" : "org::apache::tomcat::util::bcel::classfile::ParameterAnnotationEntry" , "selectors" : { "ParameterAnnotationEntry(DataInputStream,ConstantPool)" : 1}},{ "className" : "megamek::common::weapons::VehicleFlamerWeapon" , "selectors" : { "VehicleFlamerWeapon()" : 3}},{ "className" : "megamek::common::weapons::ISLRM10OS" , "selectors" : { "ISLRM10OS()" : 1}},{ "className" : "megamek::common::weapons::CLSupportPPC" , "selectors" : { "CLSupportPPC()" : 1}},{ "className" : "megamek::common::weapons::CLLRM19" , "selectors" : { "CLLRM19()" : 1}},{ "className" : "megamek::common::weapons::PointDefenseBayWeapon" , "selectors" : { "PointDefenseBayWeapon()" : 1}},{ "className" : "megamek::common::weapons::RifleWeapon" , "selectors" : { "RifleWeapon()" : 3}},{ "className" : "megamek::common::weapons::CLLRM6" , "selectors" : { "CLLRM6()" : 1}},{ "className" : "megamek::client::bot::MoveOption::WeightedComparator" , "selectors" : { "MoveOption" : 9}},{ "className" : "megamek::common::weapons::ISThunderBolt20" , "selectors" : { "ISThunderBolt20()" : 1}},{ "className" : "megamek::common::weapons::FluidGunWeapon" , "selectors" : { "FluidGunWeapon()" : 2}},{ "className" : "megamek::common::weapons::ISBinaryLaserCannon" , "selectors" : { "ISBinaryLaserCannon()" : 1}},{ "className" : "megamek::common::weapons::CLLRM18" , "selectors" : { "CLLRM18()" : 1}},{ "className" : "megamek::common::weapons::infantry::InfantryPistolMakeshiftPistolWeapon" , "selectors" : { "InfantryPistolMakeshiftPistolWeapon()" : 2}},{ "className" : "megamek::common::weapons::ISArrowIV" , "selectors" : { "ISArrowIV()" : 1}},{ "className" : "megamek::common::weapons::ISLRM4OS" , "selectors" : { "ISLRM4OS()" : 1}},{ "className" : "megamek::common::weapons::infantry::InfantryPistolMauserNeedlerPistolWeapon" , "selectors" : { "InfantryPistolMauserNeedlerPistolWeapon()" : 2}},{ "className" : "megamek::common::weapons::PPCBayWeapon" , "selectors" : { "PPCBayWeapon()" : 1}},{ "className" : "megamek::server::commands::CheckBVCommand" , "selectors" : { "CheckBVCommand(Server)" : 1}},{ "className" : "megamek::common::ReportMessages" , "selectors" : { "getString(String)" : 5}},{ "className" : "megamek::client::bot::ChatProcessor" , "selectors" : { "ChatProcessor()" : 1 , "processChat(GamePlayerChatEvent,TestBot)" : 1}},{ "className" : "megamek::common::weapons::CLNarc" , "selectors" : { "CLNarc()" : 1}},{ "className" : "megamek::common::weapons::CLERSmallLaserPrototype" , "selectors" : { "CLERSmallLaserPrototype()" : 1}},{ "className" : "megamek::common::weapons::CLSRM5" , "selectors" : { "CLSRM5()" : 1}},{ "className" : "megamek::common::weapons::MantaRayHandler" , "selectors" : { "MantaRayHandler(ToHitData,WeaponAttackAction,IGame,Server)" : 1}},{ "className" : "megamek::common::weapons::CLLBXPrototypeHandler" , "selectors" : { "CLLBXPrototypeHandler(ToHitData,WeaponAttackAction,IGame,Server)" : 1}},{ "className" : "megamek::common::weapons::ISLRM15" , "selectors" : { "ISLRM15()" : 1}},{ "className" : "megamek::common::weapons::ISAC15" , "selectors" : { "ISAC15()" : 1}},{ "className" : "megamek::common::weapons::ISRL20" , "selectors" : { "ISRL20()" : 1}},{ "className" : "megamek::common::weapons::infantry::InfantryArchaicVibroAxeWeapon" , "selectors" : { "InfantryArchaicVibroAxeWeapon()" : 1}},{ "className" : "megamek::common::WeaponComparator" , "selectors" : { "WeaponComparator()" : 1}},{ "className" : "megamek::common::weapons::ISGaussRifle" , "selectors" : { "ISGaussRifle()" : 1}},{ "className" : "megamek::client::ui::swing::widget::ProtomechMapSet" , "selectors" : { "ProtomechMapSet(JComponent)" : 1 , "setAreas()" : 1 , "setBackGround()" : 1}},{ "className" : "megamek::common::weapons::ISMRM2OS" , "selectors" : { "ISMRM2OS()" : 1}},{ "className" : "megamek::common::weapons::infantry::InfantryPistolSunbeamNovaLaserPistolWeapon" , "selectors" : { "InfantryPistolSunbeamNovaLaserPistolWeapon()" : 2}},{ "className" : "megamek::common::options::Quirks::QuirksInfo" , "selectors" : { "QuirksInfo()" : 1 , "getInstance()" : 1}},{ "className" : "megamek::server::commands::SaveGameCommand" , "selectors" : { "SaveGameCommand(Server)" : 1}},{ "className" : "megamek::common::weapons::HAGWeaponHandler" , "selectors" : { "HAGWeaponHandler(ToHitData,WeaponAttackAction,IGame,Server)" : 1}},{ "className" : "megamek::common::weapons::infantry::InfantryShotgunAutomaticWeapon" , "selectors" : { "InfantryShotgunAutomaticWeapon()" : 1}},{ "className" : "megamek::client::ui::swing::PortraitChoiceDialog::PortraitTableMouseAdapter" , "selectors" : { "PortraitTableMouseAdapter()" : 1}},{ "className" : "megamek::common::weapons::CLHAG40" , "selectors" : { "CLHAG40()" : 1}},{ "className" : "megamek::client::ui::AWT::widget::VTOLMapSet" , "selectors" : { "VTOLMapSet(Component)" : 1 , "setAreas()" : 1 , "setBackGround()" : 1 , "setContent()" : 1 , "setLabels()" : 1}},{ "className" : "megamek::common::weapons::ISLRT15" , "selectors" : { "ISLRT15()" : 1}},{ "className" : "megamek::common::weapons::CLBAHeavyMG" , "selectors" : { "CLBAHeavyMG()" : 1}},{ "className" : "megamek::client::ui::AWT::MineLayingDialog" , "selectors" : { "MineLayingDialog(Frame,Entity)" : 1 , "getAnswer()" : 1 , "getMine()" : 1}},{ "className" : "megamek::server::commands::NukeCommand" , "selectors" : { "NukeCommand(Server)" : 1}},{ "className" : "megamek::common::weapons::CLERMediumPulseLaser" , "selectors" : { "CLERMediumPulseLaser()" : 1}},{ "className" : "megamek::common::weapons::infantry::InfantryPistolAutoPistolWeapon" , "selectors" : { "InfantryPistolAutoPistolWeapon()" : 2}},{ "className" : "megamek::common::weapons::KrakenTWeapon" , "selectors" : { "KrakenTWeapon()" : 1}},{ "className" : "megamek::client::event::MechDisplayListener" , "selectors" : { "WeaponSelected(MechDisplayEvent)" : 2}},{ "className" : "megamek::common::weapons::infantry::InfantryPistolHoldoutNeedlerPistolWeapon" , "selectors" : { "InfantryPistolHoldoutNeedlerPistolWeapon()" : 2}},{ "className" : "megamek::common::weapons::KillerWhaleHandler" , "selectors" : { "KillerWhaleHandler(ToHitData,WeaponAttackAction,IGame,Server)" : 2}},{ "className" : "megamek::common::weapons::SRMFragHandler" , "selectors" : { "SRMFragHandler(ToHitData,WeaponAttackAction,IGame,Server)" : 2}},{ "className" : "javax::swing::table::TableRowSorter<T>" , "selectors" : { "TableRowSorter(M)" : 1}},{ "className" : "megamek::common::xml::GameTurnEncoder" , "selectors" : { "encode(GameTurn,Writer)" : 1}},{ "className" : "megamek::test::entities::TestOffBoardEntity" , "selectors" : { "testCoords(Coords,Coords)" : 4}},{ "className" : "megamek::common::weapons::ASMissileWeapon" , "selectors" : { "ASMissileWeapon()" : 1}},{ "className" : "megamek::common::weapons::WhiteSharkHandler" , "selectors" : { "WhiteSharkHandler(ToHitData,WeaponAttackAction,IGame,Server)" : 2}},{ "className" : "megamek::common::weapons::infantry::InfantryPistolDartGunWeapon" , "selectors" : { "InfantryPistolDartGunWeapon()" : 2}},{ "className" : "megamek::common::weapons::infantry::InfantrySupportPulseLaserWeapon" , "selectors" : { "InfantrySupportPulseLaserWeapon()" : 1}},{ "className" : "megamek::common::weapons::ISHeavyRecoillessRifle" , "selectors" : { "ISHeavyRecoillessRifle()" : 1}},{ "className" : "megamek::common::weapons::CLWERPPC" , "selectors" : { "CLWERPPC()" : 1}},{ "className" : "megamek::common::weapons::CLStreakSRM4Prototype" , "selectors" : { "CLStreakSRM4Prototype()" : 1}},{ "className" : "megamek::common::weapons::infantry::InfantryRifleClanERLaserWeapon" , "selectors" : { "InfantryRifleClanERLaserWeapon()" : 1}},{ "className" : "megamek::common::weapons::PrototypeLaserHandler" , "selectors" : { "PrototypeLaserHandler(ToHitData,WeaponAttackAction,IGame,Server)" : 2}},{ "className" : "megamek::common::weapons::MPodHandler" , "selectors" : { "MPodHandler(ToHitData,WeaponAttackAction,IGame,Server)" : 1}},{ "className" : "megamek::server::victory::SpaghettiVictory" , "selectors" : { "SpaghettiVictory()" : 1}},{ "className" : "megamek::common::weapons::infantry::InfantrySupportClanSemiPortableERLaserWeapon" , "selectors" : { "InfantrySupportClanSemiPortableERLaserWeapon()" : 1}},{ "className" : "megamek::common::xml::GameOptionsEncoder" , "selectors" : { "encode(GameOptions,Writer)" : 1}},{ "className" : "megamek::client::ui::swing::ConnectDialog" , "selectors" : { "ConnectDialog(JFrame)" : 2}},{ "className" : "megamek::common::weapons::CLSniper" , "selectors" : { "CLSniper()" : 1}},{ "className" : "megamek::common::weapons::CLStreakLRM10" , "selectors" : { "CLStreakLRM10()" : 1}},{ "className" : "megamek::common::weapons::infantry::InfantryArchaicSwordWeapon" , "selectors" : { "InfantryArchaicSwordWeapon()" : 1}},{ "className" : "megamek::common::OffBoardDirection" , "selectors" : { "getDirection(int)" : 2 , "getValue()" : 3 , "values()" : 1}},{ "className" : "megamek::client::commands::ShowEntityCommand" , "selectors" : { "ShowEntityCommand(Client)" : 1}},{ "className" : "megamek::common::weapons::infantry::InfantryPistolClanGaussPistolWeapon" , "selectors" : { "InfantryPistolClanGaussPistolWeapon()" : 2}},{ "className" : "megamek::common::MMShuffle" , "selectors" : { "MMShuffle(int,int)" : 1 , "setDeal(int)" : 1}},{ "className" : "megamek::common::weapons::infantry::InfantrySupportOneShotMRMWeapon" , "selectors" : { "InfantrySupportOneShotMRMWeapon()" : 1}},{ "className" : "megamek::client::ui::swing::TurretFacingDialog" , "selectors" : { "TurretFacingDialog(JFrame,Mech,Mounted,ClientGUI)" : 1}},{ "className" : "megamek::common::weapons::NavalGaussWeapon" , "selectors" : { "NavalGaussWeapon()" : 3}},{ "className" : "java::awt::MenuBar" , "selectors" : { "MenuBar()" : 3 , "add(Menu)" : 11 , "getShortcutMenuItem(MenuShortcut)" : 2 , "setHelpMenu(Menu)" : 1 , "shortcuts()" : 1}},{ "className" : "megamek::common::weapons::infantry::InfantryArchaicShurikenWeapon" , "selectors" : { "InfantryArchaicShurikenWeapon()" : 1}},{ "className" : "megamek::common::weapons::CLAdvancedSRM1" , "selectors" : { "CLAdvancedSRM1()" : 1}},{ "className" : "megamek::common::loaders::BLKSupportTankFile" , "selectors" : { "BLKSupportTankFile(BuildingBlock)" : 1 , "encode(String,SupportTank)" : 1}},{ "className" : "megamek::common::weapons::infantry::InfantrySupportLAWWeapon" , "selectors" : { "InfantrySupportLAWWeapon()" : 1}},{ "className" : "megamek::common::weapons::infantry::InfantrySupportERHeavyLaserWeapon" , "selectors" : { "InfantrySupportERHeavyLaserWeapon()" : 1}},{ "className" : "megamek::common::weapons::ISSRM4IOS" , "selectors" : { "ISSRM4IOS()" : 1}},{ "className" : "megamek::client::ui::AWT::boardview3d::ImageAlpha" , "selectors" : { "ImageAlpha(Image,float)" : 2}},{ "className" : "megamek::common::weapons::CLStreakSRM2OS" , "selectors" : { "CLStreakSRM2OS()" : 1}},{ "className" : "megamek::client::ui::swing::MechDisplay::ArmorPanel" , "selectors" : { "ArmorPanel()" : 1 , "displayMech(Entity)" : 1 , "onResize()" : 1}},{ "className" : "megamek::common::weapons::CLSRM4" , "selectors" : { "CLSRM4()" : 1}},{ "className" : "megamek::common::weapons::CLMPod" , "selectors" : { "CLMPod()" : 1}},{ "className" : "megamek::common::weapons::ISLargePulseLaser" , "selectors" : { "ISLargePulseLaser()" : 1}},{ "className" : "megamek::common::weapons::ISEHERPPC" , "selectors" : { "ISEHERPPC()" : 1}},{ "className" : "megamek::common::weapons::ISMRM20IOS" , "selectors" : { "ISMRM20IOS()" : 1}},{ "className" : "megamek::client::ui::AWT::DialogOptionListener" , "selectors" : { "optionClicked(DialogOptionComponent,IOption,boolean)" : 1 , "showDescFor(IOption)" : 1}},{ "className" : "megamek::common::weapons::infantry::InfantryInfernoSRMWeapon" , "selectors" : { "InfantryInfernoSRMWeapon()" : 1}},{ "className" : "megamek::common::weapons::infantry::InfantryGrenadeMiniInfernoWeapon" , "selectors" : { "InfantryGrenadeMiniInfernoWeapon()" : 1}},{ "className" : "megamek::common::weapons::ISLRT20" , "selectors" : { "ISLRT20()" : 1}},{ "className" : "megamek::common::weapons::CLSRM1" , "selectors" : { "CLSRM1()" : 1}},{ "className" : "megamek::common::weapons::CLLRM15OS" , "selectors" : { "CLLRM15OS()" : 1}},{ "className" : "megamek::common::weapons::ISUAC5Prototype" , "selectors" : { "ISUAC5Prototype()" : 1}},{ "className" : "megamek::test::client::TestCamoChoice" , "selectors" : { "TestCamoChoice()" : 1 , "dispose()" : 1}},{ "className" : "megamek::server::victory::NoodleVictory" , "selectors" : { "NoodleVictory()" : 1 , "construct(IGame)" : 1}},{ "className" : "megamek::common::loaders::InternalStructureType" , "selectors" : { "InternalStructureType(String,int)" : 5 , "getType(int)" : 1}},{ "className" : "megamek::common::weapons::BearHunterHandler" , "selectors" : { "BearHunterHandler(ToHitData,WeaponAttackAction,IGame,Server)" : 1}},{ "className" : "megamek::common::weapons::CLLRM20IOS" , "selectors" : { "CLLRM20IOS()" : 1}},{ "className" : "megamek::common::weapons::ISMRM3OS" , "selectors" : { "ISMRM3OS()" : 1}},{ "className" : "megamek::common::weapons::ISNarc" , "selectors" : { "ISNarc()" : 1}},{ "className" : "megamek::common::weapons::infantry::InfantryArchaicClanVibroSwordWeapon" , "selectors" : { "InfantryArchaicClanVibroSwordWeapon()" : 1}},{ "className" : "megamek::common::weapons::infantry::InfantryArchaicDaggerWeapon" , "selectors" : { "InfantryArchaicDaggerWeapon()" : 1}},{ "className" : "megamek::common::weapons::BombISRL10" , "selectors" : { "BombISRL10()" : 1}},{ "className" : "megamek::common::weapons::CLLRM5IOS" , "selectors" : { "CLLRM5IOS()" : 1}},{ "className" : "megamek::common::weapons::ISSRM3" , "selectors" : { "ISSRM3()" : 1}},{ "className" : "megamek::common::weapons::infantry::InfantrySupportMediumRecoillessRifleInfernoWeapon" , "selectors" : { "InfantrySupportMediumRecoillessRifleInfernoWeapon()" : 1}},{ "className" : "megamek::server::commands::DefeatCommand" , "selectors" : { "DefeatCommand(Server)" : 1}},{ "className" : "megamek::common::weapons::infantry::InfantrySupportClanBearhunterAutocannonWeapon" , "selectors" : { "InfantrySupportClanBearhunterAutocannonWeapon()" : 1}},{ "className" : "megamek::common::weapons::LRMBayWeapon" , "selectors" : { "LRMBayWeapon()" : 1}},{ "className" : "megamek::server::victory::SimpleDrawResult" , "selectors" : { "SimpleDrawResult()" : 2}},{ "className" : "megamek::server::GeyserProcessor::GeyserInfo" , "selectors" : { "GeyserInfo(Coords)" : 1}},{ "className" : "megamek::common::weapons::HVACWeaponHandler" , "selectors" : { "HVACWeaponHandler(ToHitData,WeaponAttackAction,IGame,Server)" : 1}},{ "className" : "megamek::client::ui::swing::BoardView1::GhostEntitySprite" , "selectors" : { "GhostEntitySprite(Entity)" : 1}},{ "className" : "megamek::common::weapons::CLGaussRifle" , "selectors" : { "CLGaussRifle()" : 1}},{ "className" : "megamek::common::options::PilotOptions" , "selectors" : { "PilotOptions()" : 1 , "initialize()" : 2}},{ "className" : "megamek::common::weapons::CLStreakLRM5" , "selectors" : { "CLStreakLRM5()" : 1}},{ "className" : "megamek::common::weapons::CLVehicleFlamer" , "selectors" : { "CLVehicleFlamer()" : 1}},{ "className" : "megamek::common::weapons::infantry::InfantrySupportAutoGrenadeLauncherWeapon" , "selectors" : { "InfantrySupportAutoGrenadeLauncherWeapon()" : 1}},{ "className" : "megamek::common::weapons::infantry::InfantrySupportCompactGrenadeLauncherWeapon" , "selectors" : { "InfantrySupportCompactGrenadeLauncherWeapon()" : 1}},{ "className" : "megamek::common::weapons::infantry::InfantryArchaicAxeWeapon" , "selectors" : { "InfantryArchaicAxeWeapon()" : 1}},{ "className" : "megamek::common::weapons::ISLRT5OS" , "selectors" : { "ISLRT5OS()" : 1}},{ "className" : "megamek::common::weapons::RapidfireHVACWeaponHandler" , "selectors" : { "RapidfireHVACWeaponHandler(ToHitData,WeaponAttackAction,IGame,Server)" : 1}},{ "className" : "megamek::server::victory::SummingThresholdVictory" , "selectors" : { "SummingThresholdVictory(int,Victory[])" : 1}},{ "className" : "megamek::client::ui::swing::SeaMineDepthDialog" , "selectors" : { "SeaMineDepthDialog(JFrame,int)" : 1 , "getDepth()" : 1}},{ "className" : "megamek::common::weapons::CLStreakLRM10IOS" , "selectors" : { "CLStreakLRM10IOS()" : 1}},{ "className" : "megamek::server::commands::WhoCommand" , "selectors" : { "WhoCommand(Server)" : 1}},{ "className" : "megamek::common::weapons::ISAC20" , "selectors" : { "ISAC20()" : 1}},{ "className" : "megamek::common::weapons::ISVehicleFlamer" , "selectors" : { "ISVehicleFlamer()" : 1}},{ "className" : "megamek::common::weapons::ISTHBUAC20" , "selectors" : { "ISTHBUAC20()" : 1}},{ "className" : "megamek::common::weapons::infantry::InfantryArchaicNunchakuWeapon" , "selectors" : { "InfantryArchaicNunchakuWeapon()" : 1}},{ "className" : "megamek::common::weapons::infantry::InfantryPistolMagnumAutoPistolWeapon" , "selectors" : { "InfantryPistolMagnumAutoPistolWeapon()" : 2}},{ "className" : "megamek::common::weapons::CLStreakLRM15OS" , "selectors" : { "CLStreakLRM15OS()" : 1}},{ "className" : "megamek::common::weapons::infantry::InfantryArchaicVibroKatanaWeapon" , "selectors" : { "InfantryArchaicVibroKatanaWeapon()" : 1}},{ "className" : "java::awt::font::FontRenderContext" , "selectors" : { "FontRenderContext(AffineTransform,boolean,boolean)" : 37 , "isAntiAliased()" : 1 , "usesFractionalMetrics()" : 1}},{ "className" : "megamek::common::weapons::ISMekTaser" , "selectors" : { "ISMekTaser()" : 1}},{ "className" : "megamek::common::weapons::ChemicalLaserHandler" , "selectors" : { "ChemicalLaserHandler(ToHitData,WeaponAttackAction,IGame,Server)" : 2}},{ "className" : "megamek::common::weapons::ISLRT5IOS" , "selectors" : { "ISLRT5IOS()" : 1}},{ "className" : "megamek::common::weapons::CLStreakSRM2IOS" , "selectors" : { "CLStreakSRM2IOS()" : 1}},{ "className" : "megamek::client::ui::swing::PortraitChoiceDialog::PortraitTableModel::Renderer" , "selectors" : { "PortraitTableModel" : 1}},{ "className" : "megamek::common::weapons::AltitudeBombAttack" , "selectors" : { "AltitudeBombAttack()" : 1}},{ "className" : "megamek::common::weapons::ISLightTAG" , "selectors" : { "ISLightTAG()" : 1}},{ "className" : "megamek::common::weapons::infantry::InfantryPistolSternsnachtPistolWeapon" , "selectors" : { "InfantryPistolSternsnachtPistolWeapon()" : 2}},{ "className" : "megamek::common::weapons::CLMekMortar4" , "selectors" : { "CLMekMortar4()" : 1}},{ "className" : "megamek::common::weapons::SubCapitalCannonWeapon" , "selectors" : { "SubCapitalCannonWeapon()" : 3}},{ "className" : "megamek::common::weapons::CLImprovedHeavyLargeLaser" , "selectors" : { "CLImprovedHeavyLargeLaser()" : 1}},{ "className" : "megamek::common::weapons::ISExtendedLRM10" , "selectors" : { "ISExtendedLRM10()" : 1}},{ "className" : "megamek::common::weapons::ISBAMG" , "selectors" : { "ISBAMG()" : 1}},{ "className" : "megamek::common::weapons::ISMediumRecoillessRifle" , "selectors" : { "ISMediumRecoillessRifle()" : 1}},{ "className" : "megamek::common::weapons::infantry::InfantryRifleMagnaLaserWeapon" , "selectors" : { "InfantryRifleMagnaLaserWeapon()" : 1}},{ "className" : "megamek::common::weapons::infantry::InfantryPistolNeedlerPistolWeapon" , "selectors" : { "InfantryPistolNeedlerPistolWeapon()" : 2}},{ "className" : "megamek::common::weapons::ISRivetGun" , "selectors" : { "ISRivetGun()" : 1}},{ "className" : "megamek::common::weapons::ISAC10i" , "selectors" : { "ISAC10i()" : 1}},{ "className" : "megamek::common::weapons::CLStreakSRM6Prototype" , "selectors" : { "CLStreakSRM6Prototype()" : 1}},{ "className" : "megamek::common::GameTurn::UnitNumberTurn" , "selectors" : { "UnitNumberTurn(int,char)" : 1}},{ "className" : "megamek::common::weapons::MediumSCCWeapon" , "selectors" : { "MediumSCCWeapon()" : 1}},{ "className" : "megamek::common::weapons::CLLRM14" , "selectors" : { "CLLRM14()" : 1}},{ "className" : "megamek::common::weapons::infantry::InfantryRifleTKAssaultWeapon" , "selectors" : { "InfantryRifleTKAssaultWeapon()" : 1}},{ "className" : "megamek::common::weapons::CLUAC10Prototype" , "selectors" : { "CLUAC10Prototype()" : 1}},{ "className" : "megamek::common::util::AbstractCommandLineParser::ParseException" , "selectors" : { "ParseException(String)" : 1}},{ "className" : "megamek::client::ui::swing::widget::InfantryMapSet" , "selectors" : { "InfantryMapSet(JComponent)" : 1 , "setAreas()" : 1 , "setBackGround()" : 1}},{ "className" : "megamek::client::bot::ui::AWT::BotGUI" , "selectors" : { "BotGUI(BotClient)" : 5 , "notifyOfBot()" : 1}},{ "className" : "megamek::common::weapons::ISImprovedNarc" , "selectors" : { "ISImprovedNarc()" : 1}},{ "className" : "megamek::common::weapons::infantry::InfantryArchaicVibroBladeWeapon" , "selectors" : { "InfantryArchaicVibroBladeWeapon()" : 1}},{ "className" : "megamek::common::weapons::CapitalGaussBayWeapon" , "selectors" : { "CapitalGaussBayWeapon()" : 1}},{ "className" : "megamek::common::weapons::StingrayHandler" , "selectors" : { "StingrayHandler(ToHitData,WeaponAttackAction,IGame,Server)" : 1}},{ "className" : "megamek::common::weapons::CLThumper" , "selectors" : { "CLThumper()" : 1}},{ "className" : "megamek::common::weapons::infantry::InfantryRifleThunderstrokeIIWeapon" , "selectors" : { "InfantryRifleThunderstrokeIIWeapon()" : 1}},{ "className" : "megamek::common::options::IOptionsInfo" , "selectors" : { "getGroups()" : 1 , "getOptionInfo(String)" : 1}},{ "className" : "megamek::common::weapons::infantry::InfantryRiflePulseLaserWeapon" , "selectors" : { "InfantryRiflePulseLaserWeapon()" : 1}},{ "className" : "megamek::common::MMRandom::SunRandom" , "selectors" : { "MMRandom" : 2 , "randomInt(int)" : 2}},{ "className" : "megamek::common::weapons::infantry::InfantryArchaicWakizashiWeapon" , "selectors" : { "InfantryArchaicWakizashiWeapon()" : 1}},{ "className" : "megamek::common::weapons::CLBALightMG" , "selectors" : { "CLBALightMG()" : 1}},{ "className" : "megamek::common::weapons::PlasmaRifleHandler" , "selectors" : { "PlasmaRifleHandler(ToHitData,WeaponAttackAction,IGame,Server)" : 1}},{ "className" : "megamek::common::loaders::HMVTechType" , "selectors" : { "HMVTechType(String,int)" : 3 , "getType(int)" : 5}},{ "className" : "megamek::common::weapons::ISSRM3OS" , "selectors" : { "ISSRM3OS()" : 1}},{ "className" : "megamek::client::ui::AWT::HeatEffects" , "selectors" : { "getHeatEffects(int,boolean,boolean)" : 1}},{ "className" : "megamek::common::weapons::CLLRM15IOS" , "selectors" : { "CLLRM15IOS()" : 1}},{ "className" : "megamek::common::weapons::ISStreakSRM6" , "selectors" : { "ISStreakSRM6()" : 1}},{ "className" : "megamek::common::weapons::ISMicroGrenadeLauncher" , "selectors" : { "ISMicroGrenadeLauncher()" : 1}},{ "className" : "megamek::common::weapons::infantry::InfantrySupportHeavyAutoGrenadeLauncherInfernoWeapon" , "selectors" : { "InfantrySupportHeavyAutoGrenadeLauncherInfernoWeapon()" : 1}},{ "className" : "megamek::server::victory::CheckVictory" , "selectors" : { "CheckVictory(Victory)" : 2}},{ "className" : "megamek::common::weapons::CLMediumChemicalLaser" , "selectors" : { "CLMediumChemicalLaser()" : 1}},{ "className" : "megamek::common::weapons::infantry::InfantryRifleNeedlerWeapon" , "selectors" : { "InfantryRifleNeedlerWeapon()" : 1}},{ "className" : "megamek::common::weapons::ISSRT6IOS" , "selectors" : { "ISSRT6IOS()" : 1}},{ "className" : "megamek::common::weapons::ISTAG" , "selectors" : { "ISTAG()" : 1}},{ "className" : "megamek::client::ui::swing::DialogOptionComponent::BasicOption" , "selectors" : { "BasicOption(String,Object)" : 1}},{ "className" : "megamek::common::weapons::ISRL5" , "selectors" : { "ISRL5()" : 1}},{ "className" : "megamek::common::TagInfo" , "selectors" : { "TagInfo(int,int,int,boolean)" : 2}},{ "className" : "megamek::common::weapons::VariableSpeedPulseLaserWeaponHandler" , "selectors" : { "VariableSpeedPulseLaserWeaponHandler(ToHitData,WeaponAttackAction,IGame,Server)" : 1}},{ "className" : "megamek::common::weapons::MRMBayWeapon" , "selectors" : { "MRMBayWeapon()" : 1}},{ "className" : "megamek::common::weapons::CLAdvancedSRM2OS" , "selectors" : { "CLAdvancedSRM2OS()" : 1}},{ "className" : "megamek::common::weapons::ISBAPlasmaRifle" , "selectors" : { "ISBAPlasmaRifle()" : 1}},{ "className" : "megamek::common::weapons::infantry::InfantrySupportUltraHeavyLaserWeapon" , "selectors" : { "InfantrySupportUltraHeavyLaserWeapon()" : 1}},{ "className" : "megamek::common::weapons::ISSmallXPulseLaser" , "selectors" : { "ISSmallXPulseLaser()" : 1}},{ "className" : "megamek::common::weapons::ISFluidGun" , "selectors" : { "ISFluidGun()" : 1}},{ "className" : "megamek::common::weapons::SRMAntiTSMHandler" , "selectors" : { "SRMAntiTSMHandler(ToHitData,WeaponAttackAction,IGame,Server)" : 2}},{ "className" : "megamek::common::weapons::CLHeavySmallLaser" , "selectors" : { "CLHeavySmallLaser()" : 1}},{ "className" : "megamek::common::weapons::LightRecoillessHandler" , "selectors" : { "LightRecoillessHandler(ToHitData,WeaponAttackAction,IGame,Server)" : 2}},{ "className" : "megamek::common::weapons::infantry::InfantryPistolStettaAutoPistolWeapon" , "selectors" : { "InfantryPistolStettaAutoPistolWeapon()" : 2}},{ "className" : "megamek::client::ui::swing::BoardView1::EcmBubble" , "selectors" : { "EcmBubble(Coords,int,int)" : 1 , "EcmBubble(Coords,int,int,int)" : 1}},{ "className" : "megamek::common::Building::DemolitionCharge" , "selectors" : { "DemolitionCharge(int,int)" : 1}},{ "className" : "megamek::common::weapons::ISLRT20IOS" , "selectors" : { "ISLRT20IOS()" : 1}},{ "className" : "megamek::client::ui::AWT::widget::MechSlotLabel" , "selectors" : { "drawBGImage()" : 2}},{ "className" : "megamek::common::weapons::MortarWeaponHandler" , "selectors" : { "MortarWeaponHandler(ToHitData,WeaponAttackAction,IGame,Server)" : 2}},{ "className" : "megamek::common::loaders::IMechLoader" , "selectors" : { "getEntity()" : 1}},{ "className" : "megamek::client::ui::swing::util::ImageFileFactory" , "selectors" : { "ImageFileFactory()" : 1 , "getInstance()" : 5}},{ "className" : "megamek::common::weapons::CLLRM5OS" , "selectors" : { "CLLRM5OS()" : 1}},{ "className" : "megamek::common::event::GamePlayerChangeEvent" , "selectors" : { "GamePlayerChangeEvent(Object,Player)" : 3}},{ "className" : "megamek::common::weapons::ISStreakSRM4OS" , "selectors" : { "ISStreakSRM4OS()" : 1}},{ "className" : "megamek::common::actions::SpotAction" , "selectors" : { "SpotAction(int,int)" : 2 , "getTargetId()" : 1}},{ "className" : "megamek::common::weapons::ACBayHandler" , "selectors" : { "ACBayHandler(ToHitData,WeaponAttackAction,IGame,Server)" : 1}},{ "className" : "megamek::common::weapons::infantry::InfantrySupportVLAWWeapon" , "selectors" : { "InfantrySupportVLAWWeapon()" : 1}},{ "className" : "megamek::common::weapons::infantry::InfantrySupportHellboreAssaultLaserWeapon" , "selectors" : { "InfantrySupportHellboreAssaultLaserWeapon()" : 1}},{ "className" : "megamek::common::weapons::PrototypeLBXHandler" , "selectors" : { "PrototypeLBXHandler(ToHitData,WeaponAttackAction,IGame,Server)" : 1}},{ "className" : "megamek::client::ui::AWT::DoneButtoned" , "selectors" : { "getDoneButton()" : 1}},{ "className" : "megamek::common::weapons::ISMRM3" , "selectors" : { "ISMRM3()" : 1}},{ "className" : "megamek::common::weapons::PlasmaCannonHandler" , "selectors" : { "PlasmaCannonHandler(ToHitData,WeaponAttackAction,IGame,Server)" : 1}},{ "className" : "megamek::common::weapons::infantry::InfantryArchaicBokkenWeapon" , "selectors" : { "InfantryArchaicBokkenWeapon()" : 1}},{ "className" : "megamek::common::weapons::CLAdvancedSRM2" , "selectors" : { "CLAdvancedSRM2()" : 1}},{ "className" : "megamek::common::options::IOptions" , "selectors" : { "getOptionInfo(String)" : 1}},{ "className" : "megamek::client::ui::swing::CustomMechDialog::MineChoicePanel" , "selectors" : { "MineChoicePanel(Mounted)" : 1 , "applyChoice()" : 1 , "setEnabled(boolean)" : 1}},{ "className" : "megamek::common::weapons::CLLRT6" , "selectors" : { "CLLRT6()" : 1}},{ "className" : "megamek::common::weapons::CLAdvancedSRM3" , "selectors" : { "CLAdvancedSRM3()" : 1}},{ "className" : "megamek::server::commands::ShowValidTargetsCommand" , "selectors" : { "ShowValidTargetsCommand(Server)" : 1}},{ "className" : "megamek::common::weapons::CLFireExtinguisher" , "selectors" : { "CLFireExtinguisher()" : 1}},{ "className" : "megamek::common::weapons::ISGrandMaulerGaussCannon" , "selectors" : { "ISGrandMaulerGaussCannon()" : 1}},{ "className" : "megamek::common::weapons::infantry::InfantryPistolMandrakeGaussPistolWeapon" , "selectors" : { "InfantryPistolMandrakeGaussPistolWeapon()" : 2}},{ "className" : "megamek::common::weapons::ISMRM4OS" , "selectors" : { "ISMRM4OS()" : 1}},{ "className" : "megamek::common::weapons::PrototypeRLHandler" , "selectors" : { "PrototypeRLHandler(ToHitData,WeaponAttackAction,IGame,Server)" : 1}},{ "className" : "megamek::common::weapons::infantry::InfantryPortableMGWeapon" , "selectors" : { "InfantryPortableMGWeapon()" : 1}},{ "className" : "megamek::server::ScenarioLoader::CritHitPlan" , "selectors" : { "AddCritHit(String)" : 1 , "CritHitPlan(Entity)" : 1}},{ "className" : "megamek::common::weapons::CLAPGaussRifle" , "selectors" : { "CLAPGaussRifle()" : 1}},{ "className" : "megamek::common::weapons::SCCBayWeapon" , "selectors" : { "SCCBayWeapon()" : 1}},{ "className" : "megamek::common::xml::QuadMechEncoder" , "selectors" : { "decode(???)" : 1 , "encode(Entity,Writer)" : 1}},{ "className" : "megamek::common::weapons::CLLightMG" , "selectors" : { "CLLightMG()" : 1}},{ "className" : "megamek::common::weapons::ISThunderBolt15" , "selectors" : { "ISThunderBolt15()" : 1}},{ "className" : "megamek::common::weapons::CLLRT14" , "selectors" : { "CLLRT14()" : 1}},{ "className" : "megamek::client::ui::AWT::BoardView1::WreckSprite" , "selectors" : { "WreckSprite(Entity)" : 1}},{ "className" : "megamek::common::weapons::ISMRM5" , "selectors" : { "ISMRM5()" : 1}},{ "className" : "megamek::common::weapons::SRMBayWeapon" , "selectors" : { "SRMBayWeapon()" : 1}},{ "className" : "megamek::common::weapons::CLERLargePulseLaser" , "selectors" : { "CLERLargePulseLaser()" : 1}},{ "className" : "megamek::common::weapons::ISBAHeavyMG" , "selectors" : { "ISBAHeavyMG()" : 1}},{ "className" : "megamek::common::weapons::CLMekMortar1" , "selectors" : { "CLMekMortar1()" : 1}},{ "className" : "megamek::common::weapons::CLLRM13" , "selectors" : { "CLLRM13()" : 1}},{ "className" : "megamek::common::weapons::infantry::InfantryArchaicNeuralLashWeapon" , "selectors" : { "InfantryArchaicNeuralLashWeapon()" : 1}},{ "className" : "megamek::common::weapons::CLLargePulseLaser" , "selectors" : { "CLLargePulseLaser()" : 1}},{ "className" : "megamek::common::weapons::CLAdvancedSRM6OS" , "selectors" : { "CLAdvancedSRM6OS()" : 1}},{ "className" : "megamek::common::weapons::CLERMediumLaserPrototype" , "selectors" : { "CLERMediumLaserPrototype()" : 1}},{ "className" : "megamek::common::weapons::ISStreakSRM2OS" , "selectors" : { "ISStreakSRM2OS()" : 1}},{ "className" : "megamek::common::weapons::ISLB20XAC" , "selectors" : { "ISLB20XAC()" : 1}},{ "className" : "megamek::common::weapons::ISSRM1" , "selectors" : { "ISSRM1()" : 1}},{ "className" : "megamek::common::weapons::ISLRT5" , "selectors" : { "ISLRT5()" : 1}},{ "className" : "megamek::common::weapons::CLProtoMechAC2" , "selectors" : { "CLProtoMechAC2()" : 1}},{ "className" : "megamek::common::weapons::CLLRM16" , "selectors" : { "CLLRM16()" : 1}},{ "className" : "megamek::common::weapons::CLLRM9" , "selectors" : { "CLLRM9()" : 1}},{ "className" : "megamek::common::weapons::SCL1Weapon" , "selectors" : { "SCL1Weapon()" : 1}},{ "className" : "megamek::common::weapons::CLLB20XAC" , "selectors" : { "CLLB20XAC()" : 1}},{ "className" : "edu::umd::cs::findbugs::classfile::engine::bcel::CFGFactory" , "selectors" : { "CFGFactory()" : 1}},{ "className" : "edu::umd::cs::findbugs::asm::FBClassReader::MyLabel" , "selectors" : { "MyLabel(int)" : 1}},{ "className" : "edu::umd::cs::findbugs::detect::FindReturnRef" , "selectors" : { "isPotentialCapture(Item)" : 2}},{ "className" : "edu::umd::cs::findbugs::xml::XMLWriteable" , "selectors" : { "writeXML(XMLOutput)" : 2}},{ "className" : "org::apache::log4j::or::UTObjectRenderer" , "selectors" : { "UTObjectRenderer(String)" : 9}},{ "className" : "org::apache::log4j::xml::DC" , "selectors" : { "DC(ContentHandler)" : 1}},{ "className" : "org::acm::seguin::metrics::LCTraversal" , "selectors" : { "LCTraversal(String)" : 1 , "run()" : 1}},{ "className" : "javax::print::attribute::HashPrintRequestAttributeSet" , "selectors" : { "HashPrintRequestAttributeSet()" : 15}},{ "className" : "artofillusion::CreateCubeTool" , "selectors" : { "CreateCubeTool(LayoutWindow)" : 1}},{ "className" : "nik777::chat::UniqueColors" , "selectors" : { "UniqueColors()" : 1 , "getNextRGB()" : 1}},{ "className" : "javax::faces::view::StateManagementStrategy" , "selectors" : { "restoreView(FacesContext,String,String)" : 1 , "saveView(FacesContext)" : 1}},{ "className" : "javax::faces::component::html::HtmlMessages" , "selectors" : { "getErrorClass()" : 1 , "getErrorStyle()" : 1 , "getFatalClass()" : 1 , "getFatalStyle()" : 1 , "getInfoClass()" : 1 , "getInfoStyle()" : 1 , "getLayout()" : 1 , "getStyle()" : 1 , "getStyleClass()" : 1 , "getTitle()" : 1 , "getWarnClass()" : 1 , "getWarnStyle()" : 1 , "isTooltip()" : 1 , "setTitle(String)" : 1 , "setValueExpression(???)" : 19}},{ "className" : "javax::faces::view::facelets::TagHandlerDelegateFactory" , "selectors" : { "createBehaviorHandlerDelegate(BehaviorHandler)" : 1 , "createComponentHandlerDelegate(ComponentHandler)" : 1 , "createConverterHandlerDelegate(ConverterHandler)" : 1 , "createValidatorHandlerDelegate(ValidatorHandler)" : 1}},{ "className" : "org::apache::myfaces::config::impl::digester::elements::ManagedProperty" , "selectors" : { "getValueBinding(FacesContext)" : 1 , "isValueReference()" : 1 , "org" : 1 , "setPropertyClass(String)" : 1 , "setPropertyName(String)" : 1 , "setValue(String)" : 1}},{ "className" : "javax::faces::component::_ValueBindingToValueExpression::Invoker" , "selectors" : { "invoke()" : 1}},{ "className" : "org::apache::myfaces::util::AbstractThreadSafeAttributeMap::EntrySet" , "selectors" : { "EntrySet()" : 1}},{ "className" : "org::apache::james::core::MimeMessageSource" , "selectors" : { "getInputStream()" : 5 , "getMessageSize()" : 3 , "getSourceId()" : 1}},{ "className" : "org::apache::james::transport::matchers::AttachmentFileNameIs::Mask" , "selectors" : { "Mask()" : 1}},{ "className" : "sandmark::birthmark::wpp::RunSequitur" , "selectors" : { "RunSequitur(int[])" : 3 , "getRules()" : 5 , "runSequitur()" : 3}},{ "className" : "sandmark::gui::StringPropertyInfo" , "selectors" : { "StringPropertyInfo(ConfigProperties,String,ConfigPropertyPanel)" : 3 , "getValue()" : 3}},{ "className" : "java::util::concurrent::ArrayBlockingQueue<T>" , "selectors" : { "ArrayBlockingQueue(int)" : 9}},{ "className" : "org::apache::jmeter::JMeter::ListenToTest" , "selectors" : { "ListenToTest(JMeter,List<JMeterEngine>)" : 1}},{ "className" : "java::util::concurrent::PriorityBlockingQueue" , "selectors" : { "PriorityBlockingQueue(int)" : 1 , "add(E)" : 1 , "poll()" : 1 , "put(E)" : 2 , "take()" : 1}},{ "className" : "org::sunflow::core::camera::SphericalLens" , "selectors" : { "SphericalLens()" : 1}},{ "className" : "org::openscience::cdk::tools::diff::IsotopeDiff" , "selectors" : { "diff(IChemObject,IChemObject)" : 3 , "difference(IChemObject,IChemObject)" : 3}},{ "className" : "org::openscience::cdk::smiles::smarts::parser::ASTLowAndBond" , "selectors" : { "childrenAccept(???)" : 1}},{ "className" : "org::apache::tools::ant::taskdefs::optional::ejb::InnerClassFilenameFilter" , "selectors" : { "InnerClassFilenameFilter(String)" : 1}},{ "className" : "org::apache::tools::ant::taskdefs::MoveTest" , "selectors" : { "testCompleteDirectoryMove(String)" : 2}},{ "className" : "org::apache::commons::collections::TestUnboundedFifoBuffer" , "selectors" : { "makeConfirmedCollection()" : 1 , "suite(???)" : 1 , "verify()" : 1}},{ "className" : "org::apache::commons::collections::TestCursorableLinkedList" , "selectors" : { "suite(???)" : 1}},{ "className" : "org::apache::xerces::impl::dv::xs::IDDV" , "selectors" : { "IDDV()" : 1}},{ "className" : "org::apache::xerces::impl::xs::XSLoaderImpl" , "selectors" : { "XSLoaderImpl()" : 1}},{ "className" : "dom::traversal::IteratorView::Errors" , "selectors" : { "Errors()" : 1 , "getErrorNodes()" : 1 , "store(SAXParseException,String)" : 3}},{ "className" : "org::hsqldb::test::TestJDBCSavepoints" , "selectors" : { "TestJDBCSavepoints(String)" : 1 , "main(String[])::TestResult" : 1}},{ "className" : "com::hp::hpl::jena::util::Locator" , "selectors" : { "getName()" : 2 , "open(String)" : 1}},{ "className" : "com::hp::hpl::jena::reasoner::rulesys::builtins::GreaterThan" , "selectors" : { "GreaterThan()" : 1}},{ "className" : "com::hp::hpl::jena::datatypes::xsd::impl::XSDYearMonthType" , "selectors" : { "XSDYearMonthType(String)" : 1}},{ "className" : "org::jgroups::demos::DistributedQueueDemo" , "selectors" : { "DistributedQueueDemo()" : 1 , "clearMsg()" : 1 , "help()" : 2 , "removeItem()" : 1 , "showAll()" : 4 , "showMsg(String)" : 3 , "start(String,ChannelFactory,String)" : 1}},{ "className" : "org::jgroups::tests::UNICAST_Test" , "selectors" : { "_testReceptionOfAllMessages()" : 2 , "createPayload(int,int)" : 1 , "createStack(Protocol[])" : 2 , "printStats(int)" : 1}},{ "className" : "org::jgroups::protocols::NAKACK_Delivery_Test::MyReceiver" , "selectors" : { "MyReceiver()" : 1 , "getMsgs()" : 1 , "init(Address[])" : 1}},{ "className" : "org::jgroups::util::Triple<T>" , "selectors" : { "Triple(V1,V2,V3)" : 1}},{ "className" : "org::jgroups::tests::GridFilesystemTest::pwd" , "selectors" : { "pwd()" : 1}},{ "className" : "org::jgroups::blocks::ConnectionTableNIO::Shutdown" , "selectors" : { "Shutdown()" : 2}},{ "className" : "org::jgroups::tests::ChannelTest" , "selectors" : { "checkMonotonicallyIncreasingNumbers(List<Integer>)" : 1}},{ "className" : "org::jgroups::protocols::FD_ALL::TimeoutChecker" , "selectors" : { "TimeoutChecker()" : 1}},{ "className" : "org::jgroups::tests::PerfTpTest" , "selectors" : { "PerfTpTest()" : 1 , "help()" : 1 , "start(String,int,int,String,boolean)" : 1}},{ "className" : "com::ibm::as400::access::DirectoryEntryList" , "selectors" : { "DirectoryEntryList(AS400)" : 1 , "addSelection(String,String)" : 2 , "getEntries()" : 1}},{ "className" : "org::nakedobjects::metamodel::facets::object::bounded::BoundedAnnotationFacetFactory" , "selectors" : { "BoundedAnnotationFacetFactory()" : 1 , "create(Bounded,FacetHolder)" : 1 , "process(Class<?>,MethodRemover,FacetHolder)" : 1}},{ "className" : "org::nakedobjects::plugins::dnd::viewer::border::DisposeOverlay" , "selectors" : { "DisposeOverlay(View)" : 2 , "dispose()" : 2}},{ "className" : "org::apache::poi::hdf::model::util::BTreeSet::Entry" , "selectors" : { "Entry()" : 12}},{ "className" : "org::apache::poi::hdf::extractor::TAP" , "selectors" : { "TAP()" : 1}},{ "className" : "org::apache::cayenne::access::DbLoaderPartialTest" , "selectors" : { "getDbEntity(DataMap,String)" : 6}},{ "className" : "org::apache::cayenne::cache::OSQueryCacheTest" , "selectors" : { "testDefaultOverrides()::GeneralCacheAdministrator" : 1 , "testGroupNames()::GeneralCacheAdministrator" : 2 , "testQueryOverrides()::GeneralCacheAdministrator" : 1}},{ "className" : "freecs::commands::CmdBan" , "selectors" : { "CmdBan()" : 1}},{ "className" : "org::compiere::model::MChatEntry" , "selectors" : { "MChatEntry(Ctx,ResultSet,Trx)" : 1 , "MChatEntry(Ctx,int,Trx)" : 2 , "MChatEntry(MChat,String)" : 1 , "isConfidentialType(String)" : 1}},{ "className" : "org::apache::velocity::test::ParserTestCase" , "selectors" : { "suite()::TestSuite" : 1}},{ "className" : "org::apache::velocity::runtime::parser::node::ASTMethod" , "selectors" : { "ASTMethod(Parser,int)" : 1 , "getMethodName()" : 2 , "handleInvocationException(Object,InternalContextAdapter,Throwable)" : 2}},{ "className" : "org::apache::lucene::util::collections::IntToIntMap::ValueIterator" , "selectors" : { "ValueIterator()" : 1}},{ "className" : "org::apache::lucene::search::TestPrefixQuery" , "selectors" : { "testPrefixQuery()::Document" : 1 , "testPrefixQuery()::PrefixQuery" : 2 , "testPrefixQuery()::RandomIndexWriter" : 1 , "testPrefixQuery()::Term" : 2}},{ "className" : "org::apache::lucene::search::MultiPhraseQuery" , "selectors" : { "MultiPhraseQuery()" : 30 , "add(Term)" : 17 , "add(Term[])" : 28 , "add(Term[],int)" : 14 , "createWeight(Searcher)" : 1 , "equals(Object)" : 1 , "getPositions()" : 2 , "getSlop()" : 2 , "getTermArrays()" : 2 , "hashCode()" : 8 , "setSlop(int)" : 15 , "termArraysEquals(List<Term[]>,List<Term[]>)" : 1 , "termArraysHashCode()" : 1}},{ "className" : "org::apache::lucene::search::ConstantScoreAutoRewrite::CutOffTermCollector" , "selectors" : { "CutOffTermCollector(IndexReader,int,int)" : 1}},{ "className" : "org::apache::lucene::search::TestPositionIncrement::StopWhitespaceAnalyzer" , "selectors" : { "StopWhitespaceAnalyzer(boolean)" : 2}},{ "className" : "<T>::WheelMousePlugin::WindowAWTEvent" , "selectors" : { "WindowAWTEvent()" : 1}},{ "className" : "com::itextpdf::text::pdf::IntHashtable::IntHashtableIterator" , "selectors" : { "IntHashtableIterator(Entry[])" : 1}},{ "className" : "org::apache::maven::toolchain::ToolchainPrivate" , "selectors" : { "getModel(???)" : 1}},{ "className" : "org::apache::hadoop::mapred::CapacityTaskScheduler::MapSchedulingMgr" , "selectors" : { "MapSchedulingMgr(CapacityTaskScheduler)" : 1}},{ "className" : "org::apache::hadoop::mapred::MapTask::OldOutputCollector" , "selectors" : { "OldOutputCollector(MapOutputCollector<K,V>,JobConf)" : 1}},{ "className" : "org::apache::hadoop::thriftfs::api::ThriftHadoopFileSystem::write_args" , "selectors" : { "equals(write_args)" : 1 , "read(???)" : 1 , "write(???)" : 1 , "write(TProtocol)::TField" : 1 , "write(TProtocol)::TStruct" : 1 , "write_args()" : 3}},{ "className" : "org::apache::hadoop::fs::permission::UmaskParser" , "selectors" : { "UmaskParser(String)" : 1 , "getUMask()" : 1}},{ "className" : "org::springframework::web::servlet::config::ResourcesBeanDefinitionParser" , "selectors" : { "ResourcesBeanDefinitionParser()" : 1 , "registerResourceHandler(ParserContext,Element,Object)" : 1 , "registerResourceMappings(ParserContext,Element,Object)" : 1}},{ "className" : "org::jboss::test::xml::mbeanserver::Services" , "selectors" : { "getMBeans()" : 1}},{ "className" : "org::omg::PortableServer::Servant" , "selectors" : { "_get_interface_def()" : 2 , "_this_object()" : 2 , "_this_object(ORB)" : 3}},{ "className" : "gnu::trove::SerializationTest::LinkedNode" , "selectors" : { "LinkedNode(int)" : 4}},{ "className" : "edu::rice::cs::drjava::model::repl::newjvm::InterpretResult::NumberValueResult" , "selectors" : { "NumberValueResult(Number)" : 1}},{ "className" : "java::security::InvalidAlgorithmParameterException" , "selectors" : { "InvalidAlgorithmParameterException(String)" : 12}},{ "className" : "org::exolab::jms::tools::admin::AdminInfo" , "selectors" : { "AdminInfo()" : 1}},{ "className" : "org::geotools::styling::builder::GraphicLegendBuilder" , "selectors" : { "GraphicLegendBuilder()" : 1 , "GraphicLegendBuilder(P)" : 2 , "build()" : 2 , "reset()" : 3 , "unset()" : 1}},{ "className" : "org::geotools::data::wms::WMS1_1_0::GetCapsRequest" , "selectors" : { "GetCapsRequest(URL)" : 2}},{ "className" : "org::geotools::xml::styling::sldComplexTypes2::_RANDOM" , "selectors" : { "_RANDOM()" : 1 , "getInstance()" : 2}},{ "className" : "org::aspectj::weaver::loadtime::DefaultMessageHandler" , "selectors" : { "isIgnoring(Kind)" : 1}},{ "className" : "org::jruby::runtime::ThreadContext" , "selectors" : { "ThreadContext(Ruby)" : 1 , "addBackTraceElement(Ruby,RubyArray,Frame,Frame)" : 1 , "addBackTraceElement(Ruby,RubyArray,RubyStackTraceElement,RubyStackTraceElement)" : 2 , "addBackTraceElement(RubyArray,RubyStackTraceElement,RubyStackTraceElement,FrameType)" : 3 , "buildTrace(RubyStackTraceElement[])" : 1 , "callThreadPoll()" : 2 , "callThreadPoll(ThreadContext)" : 1 , "createBacktrace(int,boolean)" : 1 , "createBacktrace2(int,boolean)" : 2 , "createBacktraceFromFrames(Ruby,RubyStackTraceElement[])" : 1 , "createBacktraceFromFrames(Ruby,RubyStackTraceElement[],boolean)" : 1 , "createCallerBacktrace(Ruby,int)" : 3 , "createRawBacktrace(Ruby,StackTraceElement[],boolean)" : 2 , "createRawBacktraceStringFromThrowable(Throwable)" : 2 , "createRubyBacktraceString(StackTraceElement)" : 4 , "createRubyCompiledBacktrace(Ruby,StackTraceElement[])" : 1 , "currentBinding()" : 5 , "currentBinding(IRubyObject)" : 5 , "currentBinding(IRubyObject,DynamicScope)" : 2 , "currentBinding(IRubyObject,Visibility)" : 7 , "currentBinding(IRubyObject,Visibility,DynamicScope)" : 1 , "expandCatchIfNecessary()" : 1 , "expandFramesIfNecessary()" : 7 , "expandParentsIfNecessary()" : 1 , "expandScopesIfNecessary()" : 1 , "fillNewFrameStack(Frame[],int)" : 1 , "getActiveCatch(String)" : 1 , "getClassNameFromFrame(Frame)" : 1 , "getConstant(String)" : 3 , "getConstantDefined(String)" : 1 , "getCurrentFrame()" : 35 , "getCurrentScope()" : 145 , "getCurrentVisibility()" : 11 , "getErrorInfo()" : 2 , "getFiber()" : 3 , "getFile()" : 31 , "getFrameBlock()" : 1 , "getFrameJumpTarget()" : 11 , "getFrameKlazz()" : 23 , "getFrameName()" : 35 , "getFrameSelf()" : 13 , "getFrames(int)" : 1 , "getLastCallType()" : 1 , "getLastExitStatus()" : 1 , "getLastVisibility()" : 1 , "getLine()" : 28 , "getMethodNameFromFrame(Frame)" : 1 , "getNextFrame()" : 2 , "getPreviousFrame()" : 7 , "getPreviousRubyClass()" : 2 , "getPreviousVisibility()" : 2 , "getRubyClass()" : 15 , "getRubyFrameDelta()" : 2 , "getRuntime()" : 2484 , "getThread()" : 36 , "isEventHooksEnabled()" : 1 , "isJumpTargetAlive(int,int)" : 1 , "isWithinDefined()" : 1 , "isWithinTrace()" : 2 , "newContext(Ruby)" : 2 , "pollThreadEvents()" : 14 , "popCatch()" : 1 , "popFrame()" : 12 , "popFrameReal(Frame)" : 4 , "popRubyClass()" : 13 , "popScope()" : 13 , "postBsfApply()" : 1 , "postClassEval()" : 1 , "postEvalScriptlet()" : 1 , "postEvalWithBinding(Binding,Frame)" : 1 , "postExecuteUnder()" : 4 , "postMethodBacktraceAndScope()" : 2 , "postMethodBacktraceDummyScope()" : 2 , "postMethodBacktraceOnly()" : 2 , "postMethodFrameAndScope()" : 5 , "postMethodFrameOnly()" : 2 , "postMethodScopeOnly()" : 5 , "postMproc()" : 1 , "postNodeEval()" : 3 , "postScopedBody()" : 4 , "postTrace()" : 1 , "postYield(Binding,Frame)" : 4 , "postYieldLight(Binding,Frame)" : 2 , "postYieldNoScope(Frame)" : 1 , "preAdoptThread()" : 1 , "preBsfApply(String[])" : 1 , "preClassEval(StaticScope,RubyModule)" : 1 , "preEvalScriptlet(DynamicScope)" : 1 , "preEvalWithBinding(Binding)" : 1 , "preExecuteUnder(RubyModule,Block)" : 4 , "preForBlock(Binding,RubyModule)" : 2 , "preMethodBacktraceAndScope(String,RubyModule,StaticScope)" : 2 , "preMethodBacktraceDummyScope(RubyModule,String,StaticScope)" : 2 , "preMethodBacktraceOnly(String)" : 2 , "preMethodFrameAndDummyScope(RubyModule,String,IRubyObject,Block,StaticScope)" : 3 , "preMethodFrameAndScope(RubyModule,String,IRubyObject,Block,StaticScope)" : 4 , "preMethodFrameOnly(RubyModule,String,IRubyObject,Block)" : 2 , "preMethodNoFrameAndDummyScope(RubyModule,StaticScope)" : 2 , "preMethodScopeOnly(RubyModule,StaticScope)" : 3 , "preMproc()" : 1 , "preNodeEval(RubyModule,IRubyObject)" : 1 , "preNodeEval(RubyModule,IRubyObject,String)" : 2 , "preRunThread(Frame[])" : 1 , "preScopedBody(DynamicScope)" : 4 , "preTrace()" : 1 , "preYieldLightBlock(Binding,DynamicScope,RubyModule)" : 2 , "preYieldNoScope(Binding,RubyModule)" : 4 , "preYieldSpecificBlock(Binding,StaticScope,RubyModule)" : 4 , "prepareTopLevel(RubyClass,IRubyObject)" : 1 , "previousBinding()" : 1 , "pushBacktraceFrame(String)" : 3 , "pushCallFrame(RubyModule,String,IRubyObject,Block)" : 4 , "pushCatch(Continuation)" : 1 , "pushEvalFrame(IRubyObject)" : 2 , "pushFrame()" : 5 , "pushFrame(Frame)" : 3 , "pushFrame(String)" : 1 , "pushFrameCopy()" : 3 , "pushFrameForBlock(Binding)" : 1 , "pushFrameForEval(Binding)" : 1 , "pushRubyClass(RubyModule)" : 17 , "pushScope(DynamicScope)" : 19 , "returnJump(IRubyObject)" : 2 , "setConstantInCurrent(String,IRubyObject)" : 2 , "setConstantInModule(String,IRubyObject,IRubyObject)" : 2 , "setConstantInObject(String,IRubyObject)" : 1 , "setCurrentVisibility(Visibility)" : 5 , "setErrorInfo(IRubyObject)" : 5 , "setEventHooksEnabled(boolean)" : 2 , "setFiber(Fiber)" : 1 , "setFile(String)" : 9 , "setFileAndLine(Frame)" : 3 , "setFileAndLine(ISourcePosition)" : 2 , "setFileAndLine(String,int)" : 5 , "setLastCallStatusAndVisibility(CallType,Visibility)" : 1 , "setLastExitStatus(IRubyObject)" : 1 , "setLine(int)" : 5 , "setRubyFrameDelta(int)" : 2 , "setThread(RubyThread)" : 3 , "setWithinDefined(boolean)" : 6 , "setWithinTrace(boolean)" : 4 , "trace(RubyEvent,String,RubyModule)" : 3 , "trace(RubyEvent,String,RubyModule,String,int)" : 2}},{ "className" : "org::jruby::RubyNumeric" , "selectors" : { "RubyNumeric(Ruby,RubyClass)" : 8 , "RubyNumeric(Ruby,RubyClass,boolean)" : 1 , "RubyNumeric(Ruby,RubyClass,boolean,boolean)" : 1 , "RubyNumeric(RubyClass)" : 1 , "abs(ThreadContext)" : 1 , "callCoerced(ThreadContext,String,IRubyObject)" : 14 , "callCoerced(ThreadContext,String,IRubyObject,boolean)" : 4 , "checkInt(IRubyObject,long)" : 3 , "coerceBin(ThreadContext,String,IRubyObject)" : 40 , "coerceBody(ThreadContext,IRubyObject)" : 1 , "coerceCmp(ThreadContext,String,IRubyObject)" : 7 , "coerceRelOp(ThreadContext,String,IRubyObject)" : 12 , "convertToNum(double,Ruby)" : 1 , "createNumericClass(Ruby)" : 1 , "dbl2num(Ruby,double)" : 13 , "dbl_cmp(Ruby,double,double)" : 3 , "denominator(ThreadContext)" : 1 , "div(ThreadContext,IRubyObject)" : 1 , "doCoerce(ThreadContext,IRubyObject,boolean)" : 4 , "duckStep(ThreadContext,Ruby,IRubyObject,IRubyObject,IRubyObject,Block)" : 2 , "fix2int(IRubyObject)" : 128 , "fix2int(RubyFixnum)" : 9 , "fix2long(IRubyObject)" : 15 , "fixnumStep(ThreadContext,Ruby,long,long,long,Block)" : 2 , "float2long(RubyFloat)" : 1 , "floatStep(ThreadContext,Ruby,IRubyObject,IRubyObject,IRubyObject,Block)" : 1 , "floatStep19(ThreadContext,Ruby,IRubyObject,IRubyObject,IRubyObject,boolean,Block)" : 2 , "getBigIntegerValue()" : 1 , "getCoerced(ThreadContext,IRubyObject,boolean)" : 2 , "getDoubleValue()" : 29 , "getLongValue()" : 96 , "int2fix(Ruby,long)" : 10 , "modulo(ThreadContext,IRubyObject)" : 1 , "newNumeric(Ruby)" : 1 , "num2chr(IRubyObject)" : 2 , "num2dbl(IRubyObject)" : 27 , "num2int(IRubyObject)" : 95 , "num2long(IRubyObject)" : 82 , "numerator(ThreadContext)" : 1 , "op_num_equal(ThreadContext,IRubyObject)" : 3 , "other2long(IRubyObject)" : 1 , "step(ThreadContext,IRubyObject,Block)" : 1 , "step(ThreadContext,IRubyObject,IRubyObject,Block)" : 2 , "stepCommon19(ThreadContext,IRubyObject,IRubyObject,Block)" : 2 , "str2fnum(Ruby,RubyString)" : 1 , "str2fnum(Ruby,RubyString,boolean)" : 3 , "str2fnum19(Ruby,RubyString,boolean)" : 1 , "str2fnumCommon(Ruby,RubyString,boolean,ByteListCaller)" : 2 , "str2inum(Ruby,RubyString,int,boolean)" : 7 , "tooBig(IRubyObject,long)" : 1 , "tooSmall(IRubyObject,long)" : 1 , "unwrapCoerced(ThreadContext,String,IRubyObject,RubyArray)" : 1}},{ "className" : "org::jruby::ext::ffi::StructLayout::Member" , "selectors" : { "Member(Field,int,int,int)" : 1 , "get(ThreadContext,Storage,IRubyObject)" : 1 , "getMemoryIO(IRubyObject)" : 14 , "getOffset(IRubyObject)" : 7 , "put(ThreadContext,Storage,IRubyObject,IRubyObject)" : 1 , "type()" : 1}},{ "className" : "org::jruby::util::Numeric" , "selectors" : { "f_abs(ThreadContext,IRubyObject)" : 10 , "f_abs2(ThreadContext,IRubyObject)" : 1 , "f_add(ThreadContext,IRubyObject,IRubyObject)" : 22 , "f_arg(ThreadContext,IRubyObject)" : 2 , "f_cmp(ThreadContext,IRubyObject,IRubyObject)" : 8 , "f_conjugate(ThreadContext,IRubyObject)" : 4 , "f_denominator(ThreadContext,IRubyObject)" : 5 , "f_div(ThreadContext,IRubyObject,IRubyObject)" : 16 , "f_divmod(ThreadContext,IRubyObject,IRubyObject)" : 2 , "f_equal(ThreadContext,IRubyObject,IRubyObject)" : 11 , "f_exact_p(ThreadContext,IRubyObject)" : 2 , "f_expt(ThreadContext,IRubyObject,IRubyObject)" : 11 , "f_floor(ThreadContext,IRubyObject)" : 3 , "f_gcd(ThreadContext,IRubyObject,IRubyObject)" : 8 , "f_gt_p(ThreadContext,IRubyObject,IRubyObject)" : 3 , "f_idiv(ThreadContext,IRubyObject,IRubyObject)" : 16 , "f_inspect(ThreadContext,IRubyObject)" : 4 , "f_integer_p(ThreadContext,IRubyObject)" : 3 , "f_lcm(ThreadContext,IRubyObject,IRubyObject)" : 3 , "f_lshift(ThreadContext,IRubyObject,IRubyObject)" : 3 , "f_lt_p(ThreadContext,IRubyObject,IRubyObject)" : 2 , "f_mod(ThreadContext,IRubyObject,IRubyObject)" : 1 , "f_mul(ThreadContext,IRubyObject,IRubyObject)" : 57 , "f_negate(ThreadContext,IRubyObject)" : 29 , "f_negative_p(ThreadContext,IRubyObject)" : 15 , "f_numerator(ThreadContext,IRubyObject)" : 3 , "f_one_p(ThreadContext,IRubyObject)" : 5 , "f_polar(ThreadContext,IRubyObject)" : 2 , "f_quo(ThreadContext,IRubyObject,IRubyObject)" : 8 , "f_real_p(ThreadContext,IRubyObject)" : 18 , "f_rshift(ThreadContext,IRubyObject,IRubyObject)" : 3 , "f_sub(ThreadContext,IRubyObject,IRubyObject)" : 25 , "f_to_f(ThreadContext,IRubyObject)" : 14 , "f_to_i(ThreadContext,IRubyObject)" : 13 , "f_to_r(ThreadContext,IRubyObject)" : 7 , "f_to_s(ThreadContext,IRubyObject)" : 7 , "f_truncate(ThreadContext,IRubyObject)" : 1 , "f_xor(ThreadContext,IRubyObject,IRubyObject)" : 2 , "f_zero_p(ThreadContext,IRubyObject)" : 29 , "fitSqrtLong(long)" : 1 , "frexp(double,long[])" : 2 , "i_gcd(long,long)" : 5 , "i_ilog2(ThreadContext,IRubyObject)" : 2 , "int_pow(ThreadContext,long,long)" : 2 , "k_exact_p(IRubyObject)" : 9 , "k_inexact_p(IRubyObject)" : 3 , "ldexp(double,long)" : 3 , "nurat_rationalize_internal(ThreadContext,IRubyObject[])" : 2}},{ "className" : "org::jruby::internal::runtime::methods::DynamicMethod" , "selectors" : { "DynamicMethod(RubyModule,Visibility,CallConfiguration)" : 17 , "calculateProtectedClass(RubyModule)" : 2 , "call(ThreadContext,IRubyObject,RubyModule,String)" : 15 , "call(ThreadContext,IRubyObject,RubyModule,String,Block)" : 23 , "call(ThreadContext,IRubyObject,RubyModule,String,IRubyObject)" : 14 , "call(ThreadContext,IRubyObject,RubyModule,String,IRubyObject,Block)" : 24 , "call(ThreadContext,IRubyObject,RubyModule,String,IRubyObject,IRubyObject)" : 14 , "call(ThreadContext,IRubyObject,RubyModule,String,IRubyObject,IRubyObject,Block)" : 23 , "call(ThreadContext,IRubyObject,RubyModule,String,IRubyObject,IRubyObject,IRubyObject)" : 13 , "call(ThreadContext,IRubyObject,RubyModule,String,IRubyObject,IRubyObject,IRubyObject,Block)" : 23 , "call(ThreadContext,IRubyObject,RubyModule,String,IRubyObject,IRubyObject,IRubyObject,IRubyObject)" : 2 , "call(ThreadContext,IRubyObject,RubyModule,String,IRubyObject,IRubyObject,IRubyObject,IRubyObject,Block)" : 3 , "call(ThreadContext,IRubyObject,RubyModule,String,IRubyObject,IRubyObject,IRubyObject,IRubyObject,IRubyObject)" : 2 , "call(ThreadContext,IRubyObject,RubyModule,String,IRubyObject,IRubyObject,IRubyObject,IRubyObject,IRubyObject,Block)" : 3 , "call(ThreadContext,IRubyObject,RubyModule,String,IRubyObject,IRubyObject,IRubyObject,IRubyObject,IRubyObject,IRubyObject)" : 2 , "call(ThreadContext,IRubyObject,RubyModule,String,IRubyObject,IRubyObject,IRubyObject,IRubyObject,IRubyObject,IRubyObject,Block)" : 3 , "call(ThreadContext,IRubyObject,RubyModule,String,IRubyObject,IRubyObject,IRubyObject,IRubyObject,IRubyObject,IRubyObject,IRubyObject)" : 2 , "call(ThreadContext,IRubyObject,RubyModule,String,IRubyObject,IRubyObject,IRubyObject,IRubyObject,IRubyObject,IRubyObject,IRubyObject,Block)" : 3 , "call(ThreadContext,IRubyObject,RubyModule,String,IRubyObject,IRubyObject,IRubyObject,IRubyObject,IRubyObject,IRubyObject,IRubyObject,IRubyObject)" : 2 , "call(ThreadContext,IRubyObject,RubyModule,String,IRubyObject,IRubyObject,IRubyObject,IRubyObject,IRubyObject,IRubyObject,IRubyObject,IRubyObject,Block)" : 3 , "call(ThreadContext,IRubyObject,RubyModule,String,IRubyObject,IRubyObject,IRubyObject,IRubyObject,IRubyObject,IRubyObject,IRubyObject,IRubyObject,IRubyObject)" : 2 , "call(ThreadContext,IRubyObject,RubyModule,String,IRubyObject,IRubyObject,IRubyObject,IRubyObject,IRubyObject,IRubyObject,IRubyObject,IRubyObject,IRubyObject,Block)" : 3 , "call(ThreadContext,IRubyObject,RubyModule,String,IRubyObject,IRubyObject,IRubyObject,IRubyObject,IRubyObject,IRubyObject,IRubyObject,IRubyObject,IRubyObject,IRubyObject)" : 2 , "call(ThreadContext,IRubyObject,RubyModule,String,IRubyObject,IRubyObject,IRubyObject,IRubyObject,IRubyObject,IRubyObject,IRubyObject,IRubyObject,IRubyObject,IRubyObject,Block)" : 3 , "call(ThreadContext,IRubyObject,RubyModule,String,IRubyObject[])" : 14 , "call(ThreadContext,IRubyObject,RubyModule,String,IRubyObject[],Block)" : 35 , "dup()" : 4 , "getArity()" : 7 , "getCallConfig()" : 2 , "getImplementationClass()" : 52 , "getProtectedClass()" : 2 , "getRealMethod()" : 4 , "getSerialNumber()" : 1 , "getVisibility()" : 85 , "handleBreak(ThreadContext,Ruby,BreakJump)" : 23 , "handleRedo(Ruby)" : 44 , "handleReturn(ThreadContext,ReturnJump)" : 44 , "init(RubyModule,Visibility,CallConfiguration)" : 2 , "isBuiltin()" : 1 , "isCallableFrom(IRubyObject,CallType)" : 4 , "isNative()" : 1 , "isUndefined()" : 41 , "protectedAccessOk(IRubyObject)" : 1 , "setCallConfig(CallConfiguration)" : 7 , "setImplementationClass(RubyModule)" : 4 , "setIsBuiltin(boolean)" : 4 , "setVisibility(Visibility)" : 5}},{ "className" : "org::jruby::parser::ParserSupport" , "selectors" : { "ParserSupport()" : 1 , "addRootNode(Node,ISourcePosition)" : 2 , "allowDubyExtension(ISourcePosition)" : 2 , "appendToBlock(Node,Node)" : 12 , "arg_add(ISourcePosition,Node,Node)" : 1 , "arg_append(Node,Node)" : 5 , "arg_blk_pass(Node,BlockPassNode)" : 21 , "arg_concat(ISourcePosition,Node,Node)" : 13 , "arg_var(Token)" : 6 , "aryset(Node,Node)" : 4 , "assignable(Token,Node)" : 14 , "attrset(Node,String)" : 12 , "backrefAssignError(Node)" : 8 , "checkAssignmentInCondition(Node)" : 1 , "checkExpression(Node)" : 47 , "checkForNilNode(Node,ISourcePosition)" : 2 , "checkUselessStatement(Node)" : 5 , "checkUselessStatements(BlockNode)" : 2 , "compactNewlines(Node)" : 1 , "cond0(Node)" : 6 , "createEmptyArgsNodePosition(ISourcePosition)" : 1 , "getConditionNode(Node)" : 32 , "getCurrentScope()" : 37 , "getFlipConditionNode(Node)" : 2 , "getInSingle()" : 6 , "getMatchNode(Node,Node)" : 4 , "getOperatorCallNode(Node,String)" : 15 , "getOperatorCallNode(Node,String,Node)" : 7 , "getOperatorCallNode(Node,String,Node,ISourcePosition)" : 43 , "getPosition(ISourcePositionHolder)" : 120 , "getResult()" : 7 , "gettable(Token)" : 2 , "gettable2(Node)" : 15 , "getterIdentifierError(ISourcePosition,String)" : 3 , "handleUselessWarn(Node,String)" : 8 , "initTopLocalVariables()" : 2 , "isBreakStatement(Node)" : 1 , "isInDef()" : 21 , "isInSingle()" : 19 , "isLiteral(Node)" : 1 , "isNumericOperator(String)" : 1 , "is_local_id(Token)" : 5 , "list_append(Node,Node)" : 2 , "list_concat(Node,Node)" : 2 , "literal_concat(ISourcePosition,Node,Node)" : 8 , "makeNullNil(Node)" : 17 , "negateFloat(FloatNode)" : 2 , "negateInteger(Node)" : 2 , "newAlias(ISourcePosition,Node,Node)" : 2 , "newAndNode(ISourcePosition,Node,Node)" : 4 , "newArrayNode(ISourcePosition,Node)" : 35 , "newBlockArg(ISourcePosition,Token)" : 1 , "newBlockArg18(ISourcePosition,Node,Node)" : 6 , "newCaseNode(ISourcePosition,Node,Node)" : 4 , "newEvStrNode(ISourcePosition,Node)" : 2 , "newOrNode(ISourcePosition,Node,Node)" : 4 , "newSValueNode(ISourcePosition,Node)" : 2 , "newSplatNode(ISourcePosition,Node)" : 6 , "newUndef(ISourcePosition,Node)" : 4 , "newWhenNode(ISourcePosition,Node,Node,Node)" : 2 , "new_aref(Node,Token,Node)" : 1 , "new_args(ISourcePosition,ListNode,ListNode,RestArgNode,ListNode,BlockArgNode)" : 42 , "new_attrassign(ISourcePosition,Node,String,Node)" : 2 , "new_bv(Token)" : 1 , "new_call(Node,Token,Node,Node)" : 26 , "new_call_blockpass(Node,Token,BlockPassNode)" : 1 , "new_call_complexargs(Node,Token,Node,Node)" : 1 , "new_call_noargs(Node,Token,IterNode)" : 1 , "new_call_one_arg(ISourcePosition,Node,String,Node)" : 1 , "new_colon2(ISourcePosition,Node,String)" : 10 , "new_colon3(ISourcePosition,String)" : 8 , "new_fcall(Token,Node,Node)" : 8 , "new_fcall_blockpass(Token,BlockPassNode)" : 1 , "new_fcall_noargs(Token,IterNode)" : 1 , "new_fcall_simpleargs(Token,ArrayNode,Node)" : 1 , "new_iter(ISourcePosition,Node,StaticScope,Node)" : 4 , "new_opElementAsgnNode(ISourcePosition,Node,String,Node,Node)" : 4 , "new_super(Node,Token)" : 4 , "new_yield(ISourcePosition,Node)" : 4 , "newline_node(Node,ISourcePosition)" : 4 , "node_assign(Node,Node)" : 10 , "popCurrentScope()" : 21 , "position(ISourcePositionHolder,ISourcePositionHolder)" : 23 , "pushBlockScope()" : 9 , "pushLocalScope()" : 12 , "reset()" : 2 , "ret_args(Node,ISourcePosition)" : 6 , "setConfiguration(ParserConfiguration)" : 2 , "setInDef(boolean)" : 8 , "setInSingle(int)" : 8 , "setLexer(RubyYaccLexer)" : 2 , "setResult(RubyParserResult)" : 2 , "setWarnings(IRubyWarnings)" : 2 , "shadowing_lvar(Token)" : 6 , "simplifyMultipleArgumentWhenNodes(WhenNode,ArrayNode)" : 1 , "splat_array(Node)" : 5 , "unwrapNewlineNode(Node)" : 2 , "warn(ID,ISourcePosition,String,Object[])" : 6 , "warnUnlessEOption(ID,Node,String)" : 1 , "warning(ID,ISourcePosition,String,Object[])" : 2 , "warningUnlessEOption(ID,Node,String)" : 1 , "yyerror(String)" : 48 , "yyerror(String,String[],String)" : 2}},{ "className" : "org::jruby::ast::ArgsNode" , "selectors" : { "ArgsNode(ISourcePosition,ListNode,ListNode,RestArgNode,ListNode,BlockArgNode)" : 4 , "assignOptArgs(IRubyObject[],Ruby,ThreadContext,IRubyObject,int)" : 1 , "calculateArity()" : 1 , "checkArgCount(Ruby,int)" : 23 , "getArity()" : 8 , "getBlock()" : 22 , "getOptArgs()" : 8 , "getOptionalArgsCount()" : 10 , "getPost()" : 2 , "getPostCount()" : 1 , "getPostCount(int,int,RestArgNode)" : 1 , "getPostIndex()" : 1 , "getPre()" : 4 , "getPreCount()" : 1 , "getRequiredArgsCount()" : 13 , "getRestArg()" : 15 , "getRestArgNode()" : 2 , "hasMasgnArgs()" : 1 , "masgnAwareArgAssign(ThreadContext,Ruby,IRubyObject,IRubyObject[],Block,DynamicScope)" : 1 , "prepare(ThreadContext,Ruby,IRubyObject,Block)" : 2 , "prepare(ThreadContext,Ruby,IRubyObject,IRubyObject,Block)" : 2 , "prepare(ThreadContext,Ruby,IRubyObject,IRubyObject,IRubyObject,Block)" : 2 , "prepare(ThreadContext,Ruby,IRubyObject,IRubyObject,IRubyObject,IRubyObject,Block)" : 2 , "prepare(ThreadContext,Ruby,IRubyObject,IRubyObject,IRubyObject,IRubyObject,IRubyObject,Block)" : 2 , "prepare(ThreadContext,Ruby,IRubyObject,IRubyObject,IRubyObject,IRubyObject,IRubyObject,IRubyObject,Block)" : 2 , "prepare(ThreadContext,Ruby,IRubyObject,IRubyObject,IRubyObject,IRubyObject,IRubyObject,IRubyObject,IRubyObject,Block)" : 2 , "prepare(ThreadContext,Ruby,IRubyObject,IRubyObject,IRubyObject,IRubyObject,IRubyObject,IRubyObject,IRubyObject,IRubyObject,Block)" : 2 , "prepare(ThreadContext,Ruby,IRubyObject,IRubyObject,IRubyObject,IRubyObject,IRubyObject,IRubyObject,IRubyObject,IRubyObject,IRubyObject,Block)" : 2 , "prepare(ThreadContext,Ruby,IRubyObject,IRubyObject,IRubyObject,IRubyObject,IRubyObject,IRubyObject,IRubyObject,IRubyObject,IRubyObject,IRubyObject,Block)" : 2 , "prepare(ThreadContext,Ruby,IRubyObject,IRubyObject,IRubyObject,IRubyObject,IRubyObject,IRubyObject,IRubyObject,IRubyObject,IRubyObject,IRubyObject,IRubyObject,Block)" : 2 , "prepare(ThreadContext,Ruby,IRubyObject,IRubyObject[],Block)" : 16 , "prepareOptOrRestArgs(ThreadContext,Ruby,DynamicScope,IRubyObject,IRubyObject[])" : 1 , "prepareOptionalArguments(ThreadContext,Ruby,IRubyObject,IRubyObject[])" : 1 , "prepareRestArg(ThreadContext,Ruby,DynamicScope,IRubyObject[],int)" : 1 , "processBlockArg(DynamicScope,Ruby,Block)" : 12}},{ "className" : "org::jruby::util::ReferenceReaper::Phantom" , "selectors" : { "Phantom<AllocatedNativeMemoryIO>(AllocatedNativeMemoryIO)" : 1 , "Phantom<AutoPointer>(AutoPointer)" : 1 , "Phantom<RubyTempfile>(RubyTempfile)" : 1}},{ "className" : "org::jruby::ast::OpAsgnOrNode" , "selectors" : { "OpAsgnOrNode(ISourcePosition,Node,Node)" : 5 , "defined(Ruby,ThreadContext,Node,IRubyObject,Block)" : 1 , "getFirstNode()" : 7 , "getSecondNode()" : 5 , "interpret(Ruby,ThreadContext,IRubyObject,Block)" : 1}},{ "className" : "org::jruby::compiler::ir::compiler_pass::opts::LocalOptimizationPass" , "selectors" : { "LocalOptimizationPass()" : 2 , "addMethodGuard(IRMethod,Label,Map<String,CodeVersion>,ListIterator)" : 3 , "run(IR_Scope)" : 1 , "runLocalOpts(IR_ExecutionScope)" : 1}},{ "className" : "org::jruby::RubyRegexp" , "selectors" : { "RubyRegexp(???)" : 2 , "RubyRegexp(Ruby)" : 4 , "RubyRegexp(Ruby,RubyClass)" : 2 , "adjustStartPos(RubyString,int,boolean)" : 3 , "adjustStartPos19(RubyString,int,boolean)" : 2 , "check()" : 17 , "clearKCodeDefault()" : 1 , "createRegexpClass(Ruby)" : 1 , "getEncoding(???)" : 1 , "getKcode()" : 1 , "getOptions()" : 2 , "getPattern(???)" : 8 , "getQuotedRegexpFromCache(???)" : 2 , "getQuotedRegexpFromCache19(???)" : 1 , "getRegexpFromCache(???)" : 1 , "initializeByRegexp(RubyRegexp)" : 3 , "initializeByRegexp19(RubyRegexp)" : 3 , "initializeCommon19(RubyString,int)" : 3 , "isEncodingNone()" : 1 , "isKCodeDefault()" : 7 , "isLiteral()" : 2 , "last_match(IRubyObject)" : 4 , "last_match_s(ThreadContext,IRubyObject)" : 1 , "last_match_s(ThreadContext,IRubyObject,IRubyObject)" : 1 , "length()" : 2 , "marshalTo(RubyRegexp,MarshalStream)" : 1 , "match19Common(ThreadContext,IRubyObject,int,Block)" : 2 , "matchPos(ThreadContext,RubyString,int)" : 2 , "match_last(IRubyObject)" : 3 , "match_post(IRubyObject)" : 3 , "match_pre(IRubyObject)" : 3 , "names(ThreadContext)" : 1 , "newDRegexp(Ruby,RubyString,int)" : 1 , "newDummyRegexp(???)" : 8 , "newRegexp(???)" : 1 , "newRegexp(Ruby,String,int)" : 10 , "nth_match(int,IRubyObject)" : 16 , "op_match(ThreadContext,IRubyObject)" : 5 , "op_match19(ThreadContext,IRubyObject)" : 1 , "op_match2(ThreadContext)" : 1 , "operandCheck(Ruby,IRubyObject)" : 3 , "operandNoCheck(IRubyObject)" : 1 , "preparePattern(???)" : 10 , "quote(ByteList,Encoding)::ByteList" : 1 , "quote(ThreadContext,IRubyObject,IRubyObject[])" : 2 , "quote19(ByteList,boolean)::ByteList" : 1 , "regexpDescription(Ruby,byte,int,int,Encoding,int)::ByteList" : 1 , "regexpDescription19(???)" : 1 , "regexpDescription19(Ruby,byte,int,int,int,Encoding)::ByteList" : 1 , "regsub(???)" : 2 , "regsub(RubyString,RubyString,Matcher,Encoding)::ByteList" : 1 , "regsub19(???)" : 2 , "regsub19(RubyString,RubyString,Matcher,Regex)::ByteList" : 1 , "search(ThreadContext,RubyString,int,boolean)" : 8 , "search19(ThreadContext,RubyString,int,boolean)" : 8 , "setEncodingNone()" : 1 , "setKCode(Ruby,int)" : 4 , "setKCodeDefault()" : 3 , "setLiteral()" : 2 , "to_s()" : 1 , "to_s()::ByteList" : 1 , "unmarshalFrom(UnmarshalStream)" : 1 , "updateBackRef(???)" : 7 , "updateBackRef19(???)" : 7}},{ "className" : "org::jruby::RubyStringScanner" , "selectors" : { "RubyStringScanner(Ruby,RubyClass)" : 1 , "adjustRegisters()" : 2 , "check()" : 22 , "clearMatched()" : 7 , "createScannerClass(Ruby)" : 1 , "eos_p(ThreadContext)" : 1 , "extractBegLen(Ruby,int,int)" : 2 , "extractRange(Ruby,int,int)" : 8 , "get_byte(ThreadContext)" : 1 , "getchCommon(ThreadContext,boolean)" : 2 , "inspect(String)" : 4 , "inspect1()" : 1 , "inspect2()" : 2 , "isMatched()" : 7 , "matched_size()" : 1 , "peek(ThreadContext,IRubyObject)" : 1 , "rest_size()" : 1 , "scan(IRubyObject,boolean,boolean,boolean)" : 10 , "setMatched()" : 3 , "terminate()" : 1}},{ "className" : "org::jruby::RubySymbol" , "selectors" : { "RubySymbol(???)" : 2 , "RubySymbol(Ruby,String)" : 1 , "asJavaString()" : 18 , "createSymbolClass(Ruby)" : 1 , "getBytes(???)" : 1 , "getSymbolLong(Ruby,long)" : 3 , "hashCode()" : 2 , "id2name()" : 2 , "inspect(Ruby)" : 2 , "inspect19(Ruby)" : 2 , "isIdentChar(char)" : 3 , "isIdentStart(char)" : 2 , "isIdentifier(String)" : 2 , "isPrintable()" : 1 , "isSpecialGlobalName(String)" : 1 , "isSymbolName(String)" : 2 , "newShared(Ruby)" : 15 , "newSymbol(Ruby,String)" : 8 , "toString()" : 1 , "to_i(Ruby)" : 3 , "to_int(Ruby)" : 2 , "to_s()" : 2 , "to_s(Ruby)" : 3 , "to_s(ThreadContext)" : 1 , "unmarshalFrom(UnmarshalStream)" : 1}},{ "className" : "org::jruby::ast::AttrAssignNode" , "selectors" : { "AttrAssignNode(ISourcePosition,Node,String,Node)" : 7 , "getArgsNode()" : 7 , "getName()" : 7 , "getReceiverNode()" : 7 , "hasMetaClass(IRubyObject)" : 7 , "newAttrAssignNode(ArrayNode)" : 1 , "newMutatedAttrAssignNode(ArrayNode)" : 1 , "otherAssign(Ruby,ThreadContext,IRubyObject,IRubyObject,Block,boolean)" : 1 , "receiverClassName(IRubyObject)" : 7 , "selectCallSite(IRubyObject,IRubyObject)" : 7 , "selfAssign(Ruby,ThreadContext,IRubyObject,IRubyObject,Block,boolean)" : 1 , "setArgsInternal(Node)" : 2}},{ "className" : "org::jruby::RubyArgsFile" , "selectors" : { "argf_close(ThreadContext,IRubyObject)" : 4 , "argf_getline(ThreadContext,IRubyObject,IRubyObject[])" : 4 , "each_byte(ThreadContext,IRubyObject,Block)" : 2 , "each_charCommon(ThreadContext,IRubyObject,Block)" : 2 , "each_line(ThreadContext,IRubyObject,IRubyObject[],Block)" : 2 , "getData(ThreadContext,IRubyObject,String)" : 7 , "getc(ThreadContext,IRubyObject)" : 4 , "gets(ThreadContext,IRubyObject,IRubyObject[])" : 2 , "initArgsFile(Ruby)" : 1 , "isClosed(ThreadContext,IRubyObject)" : 2 , "readlines(ThreadContext,IRubyObject,IRubyObject[])" : 1 , "setCurrentLineNumber(IRubyObject,int)" : 2}},{ "className" : "org::jruby::javasupport::JavaClass" , "selectors" : { "JavaClass(Ruby,Class<?>)" : 1 , "addField(Map<String,NamedInstaller>,Map<String,AssignedName>,Field,boolean,boolean)" : 3 , "addNewMethods(HashMap<String,List<Method>>,Method[],boolean,boolean)" : 2 , "addProxyExtender(IRubyObject)" : 1 , "addUnassignedAlias(String,Map<String,AssignedName>,MethodInstaller)" : 9 , "applyProxyExtenders()" : 2 , "array_class()" : 6 , "assignAliases(MethodInstaller,Map<String,AssignedName>)" : 3 , "assignable(Class<?>,Class<?>)" : 2 , "buildArgumentTypes(IRubyObject[])" : 3 , "buildClassArgs(IRubyObject[])" : 2 , "buildConstructors(Constructor<?>[])" : 2 , "buildFieldResults(Field[])" : 2 , "component_type()" : 1 , "concatArrays(ThreadContext,JavaArray,IRubyObject)" : 1 , "concatArrays(ThreadContext,JavaArray,JavaArray)" : 1 , "createJavaClass(Ruby,Class<?>)" : 1 , "createJavaClassClass(Ruby,RubyModule)" : 1 , "declaring_class()" : 1 , "emptyJavaArray(ThreadContext)" : 2 , "extendProxy(IRubyObject)" : 2 , "forNameQuiet(Ruby,String)" : 3 , "forNameVerbose(Ruby,String)" : 7 , "for_name(IRubyObject,IRubyObject)" : 4 , "get(Ruby,Class<?>)" : 54 , "getConstructors(Class<?>)" : 1 , "getDeclaredClasses(Class<?>)" : 1 , "getDeclaredFields(Class<?>)" : 2 , "getFields(Class<?>)" : 2 , "getInstanceAssignedNames()" : 1 , "getMatchingCallable(Ruby,Class<?>,String,Class<?>[])" : 1 , "getMethods(Class<?>)" : 1 , "getProxyClass()" : 3 , "getProxyModule()" : 2 , "getRubyArray(Ruby,Class<?>[])" : 5 , "getSimpleName(Class<?>)" : 3 , "getStaticAssignedNames()" : 1 , "installClassClasses(Class<?>,RubyModule)" : 2 , "installClassConstructors(RubyClass)" : 1 , "installClassFields(RubyClass)" : 1 , "installClassMethods(RubyClass)" : 1 , "installInstanceMethods(Map<String,NamedInstaller>,Class<?>,Method,String)" : 2 , "installStaticMethods(Map<String,NamedInstaller>,Class<?>,Method,String)" : 2 , "interface_p()" : 1 , "interfaces()" : 1 , "isPrimitive()" : 1 , "javaArrayFromRubyArray(ThreadContext,IRubyObject)" : 3 , "javaArraySubarray(ThreadContext,JavaArray,int,int)" : 2 , "javaClass()" : 99 , "java_methods(Method[],boolean)" : 4 , "lockProxy()" : 3 , "methodsAreEquivalent(Method,Method)" : 1 , "resource_as_string(IRubyObject)::ByteList" : 1 , "setupClassConstructors(Class<?>)" : 1 , "setupClassFields(Class<?>,InitializerState)" : 1 , "setupClassMethods(Class<?>,InitializerState)" : 1 , "setupInterfaceModule(RubyModule)" : 1 , "setupInterfaceProxy(RubyClass)" : 1 , "setupProxy(RubyClass)" : 1 , "undefinedFieldError(Ruby,String,String)" : 3 , "unlockProxy()" : 3}},{ "className" : "org::jruby::util::io::OpenFile" , "selectors" : { "OpenFile()" : 11 , "checkClosed(Ruby)" : 14 , "checkReadable(Ruby)" : 11 , "checkWritable(Ruby)" : 7 , "cleanup(Ruby,boolean)" : 4 , "fflush(Stream)" : 3 , "finalize(Ruby,boolean)" : 1 , "flushBeforeSeek()" : 1 , "getFinalizer()" : 2 , "getLineNumber()" : 5 , "getMainStream()" : 134 , "getMode()" : 11 , "getModeAsString(Ruby)" : 1 , "getPath()" : 6 , "getPid()" : 1 , "getPipeStream()" : 30 , "getProcess()" : 6 , "getStringFromMode(int)" : 1 , "getWriteStream()" : 9 , "isBinmode()" : 1 , "isOpen()" : 10 , "isReadBuffered()" : 2 , "isReadable()" : 8 , "isSync()" : 3 , "isWritable()" : 11 , "isWriteBuffered()" : 4 , "seek(long,int)" : 5 , "setBinmode()" : 1 , "setFinalizer(Finalizer)" : 2 , "setLineNumber(int)" : 5 , "setMainStream(Stream)" : 23 , "setMode(int)" : 22 , "setPath(String)" : 8 , "setPipeStream(Stream)" : 13 , "setProcess(Process)" : 3 , "setReadBuffered()" : 8 , "setSync(boolean)" : 1 , "setWriteBuffered()" : 1}},{ "className" : "org::jruby::compiler::ir::IRMethod" , "selectors" : { "IRMethod(IR_Scope,Operand,String,boolean)" : 4 , "addInstr(IR_Instr)" : 9 , "getCallArgs()" : 2 , "getDefiningModule()" : 3 , "getFullyQualifiedName()" : 1 , "getName()" : 15 , "getVersion()" : 2 , "isAClassRootMethod()" : 2 , "toString()" : 1 , "updateVersion()" : 1}},{ "className" : "org::jruby::ast::FCallNoArgNode" , "selectors" : { "FCallNoArgNode(ISourcePosition,Node,String)" : 1 , "FCallNoArgNode(ISourcePosition,String)" : 3}},{ "className" : "org::jruby::RubyNil" , "selectors" : { "RubyNil(Ruby)" : 1 , "createNilClass(Ruby)" : 1 , "inspect(IRubyObject)" : 2 , "op_and(IRubyObject,IRubyObject)" : 1 , "op_or(IRubyObject,IRubyObject)" : 2 , "op_xor(IRubyObject,IRubyObject)" : 2 , "toJava(Class)" : 1 , "to_a(IRubyObject)" : 1 , "to_i(IRubyObject)" : 1 , "to_r(ThreadContext,IRubyObject)" : 1 , "to_s(IRubyObject)" : 1}},{ "className" : "org::jruby::RubyStringIO" , "selectors" : { "RubyStringIO(Ruby,RubyClass)" : 1 , "append(ThreadContext,IRubyObject)" : 4 , "checkFinalized()" : 2 , "checkFrozen()" : 2 , "checkInitialized()" : 7 , "checkOpen()" : 2 , "checkReadable()" : 8 , "checkWritable()" : 5 , "createStringIOClass(Ruby)" : 1 , "doFinalize()" : 1 , "doRewind()" : 2 , "each(ThreadContext,IRubyObject[],Block)" : 3 , "each_byte(ThreadContext,Block)" : 2 , "each_char(ThreadContext,Block)" : 2 , "getc()" : 1 , "gets(ThreadContext,IRubyObject[])" : 1 , "getsOnly(ThreadContext,IRubyObject[])" : 3 , "initialize(IRubyObject[],Block)" : 1 , "initializeModes(Object)" : 1 , "initialize_copy(IRubyObject)" : 1 , "inspectPuts(ThreadContext,RubyArray)" : 1 , "internalGets(ThreadContext,IRubyObject[])" : 2 , "isEOF()" : 3 , "puts(ThreadContext,IRubyObject[])" : 2 , "read(IRubyObject[])" : 1 , "read(IRubyObject[])::ByteList" : 2 , "reopen(IRubyObject[])" : 1 , "setupModes()" : 1 , "string()" : 1 , "writeInternal(ThreadContext,IRubyObject)" : 2}},{ "className" : "org::jruby::runtime::Block" , "selectors" : { "Block(BlockBody)" : 1 , "Block(BlockBody,Binding)" : 21 , "arity()" : 5 , "call(ThreadContext,IRubyObject,IRubyObject)" : 2 , "call(ThreadContext,IRubyObject[])" : 4 , "call(ThreadContext,IRubyObject[],Block)" : 1 , "cloneBlock()" : 4 , "equals(Object)" : 1 , "escape()" : 17 , "getBinding()" : 19 , "getBody()" : 12 , "getProcObject()" : 10 , "isEscaped()" : 1 , "isGiven()" : 246 , "setProcObject(RubyProc)" : 1 , "yield(ThreadContext,IRubyObject)" : 177 , "yieldArray(ThreadContext,IRubyObject,IRubyObject,RubyModule)" : 10 , "yieldNonArray(ThreadContext,IRubyObject,IRubyObject,RubyModule)" : 4 , "yieldSpecific(ThreadContext)" : 5 , "yieldSpecific(ThreadContext,IRubyObject)" : 1 , "yieldSpecific(ThreadContext,IRubyObject,IRubyObject)" : 2 , "yieldSpecific(ThreadContext,IRubyObject,IRubyObject,IRubyObject)" : 1}},{ "className" : "org::jruby::embed::variable::PersistentLocalVariable" , "selectors" : { "PersistentLocalVariable(IRubyObject,String,IRubyObject)" : 1 , "PersistentLocalVariable(Ruby,String,Object[])" : 1 , "getInstance(Ruby,String,Object[])" : 2 , "isValidName(Object)" : 2 , "retrieve(Ruby,IRubyObject,BiVariableMap)" : 2}},{ "className" : "org::jruby::RubyString" , "selectors" : { "RubyString(???)" : 5 , "RubyString(Ruby,RubyClass,CharSequence)" : 30 , "RubyString(Ruby,RubyClass,CharSequence)::ByteList" : 1 , "RubyString(Ruby,RubyClass,byte[])" : 2 , "RubyString(Ruby,RubyClass,byte[])::ByteList" : 1 , "append(IRubyObject)" : 14 , "append19(IRubyObject)" : 2 , "asJavaString()" : 17 , "asString()" : 1 , "associateEncoding(???)" : 3 , "awkSplit(boolean,int,int)" : 2 , "awkSplit19(boolean,int,int)" : 2 , "byteListToString(???)" : 3 , "bytesToString(byte[],int,int)" : 2 , "capitalize19(ThreadContext)" : 1 , "capitalize_bang(ThreadContext)" : 1 , "capitalize_bang19(ThreadContext)" : 1 , "casecmp(ThreadContext,IRubyObject)" : 1 , "casecmp19(ThreadContext,IRubyObject)" : 1 , "cat(???)" : 14 , "cat(byte)" : 27 , "cat(byte[])" : 12 , "cat(byte[],int,int)" : 2 , "cat(int)" : 5 , "cat19(RubyString)" : 2 , "center(IRubyObject)" : 1 , "center(IRubyObject,IRubyObject)" : 1 , "checkBase(IRubyObject)" : 2 , "checkEncoding(???)" : 1 , "checkIndex(int,int)" : 5 , "checkIndexForRef(int,int)" : 2 , "checkLength(int)" : 2 , "chomp(ThreadContext)" : 1 , "chomp(ThreadContext,IRubyObject)" : 1 , "chompBangCommon(Ruby,IRubyObject)" : 2 , "chompBangCommon19(Ruby,IRubyObject)" : 2 , "chomp_bang(IRubyObject[])" : 2 , "chomp_bang(ThreadContext)" : 4 , "chomp_bang(ThreadContext,IRubyObject)" : 4 , "chomp_bang19(ThreadContext)" : 1 , "chomp_bang19(ThreadContext,IRubyObject)" : 1 , "chop_bang(ThreadContext)" : 2 , "choppedLength()" : 2 , "choppedLength19(Ruby)" : 2 , "clearCodeRange()" : 6 , "codeRangeAnd(int,int)" : 3 , "concat(IRubyObject)" : 3 , "concatNumeric(Ruby,int)" : 2 , "convertToString()" : 1 , "copyCodeRangeForSubstr(???)" : 3 , "countCommon(Ruby,boolean[])" : 2 , "createStringClass(Ruby)" : 1 , "delete_bang(ThreadContext,IRubyObject)" : 2 , "delete_bang(ThreadContext,IRubyObject[])" : 1 , "delete_bang19(ThreadContext,IRubyObject)" : 2 , "delete_bang19(ThreadContext,IRubyObject[])" : 1 , "delete_bangCommon(Ruby,boolean[])" : 2 , "downcase19(ThreadContext)" : 1 , "downcase_bang(ThreadContext)" : 1 , "downcase_bang19(ThreadContext)" : 1 , "dump(???)" : 1 , "dumpCommon(boolean)" : 2 , "dumpCommon(boolean)::ByteList" : 2 , "each_byte(ThreadContext,Block)" : 4 , "each_charCommon18(ThreadContext,Block)" : 2 , "each_charCommon19(ThreadContext,Block)" : 2 , "each_codepointCommon(ThreadContext,Block)" : 2 , "each_line(ThreadContext,Block)" : 3 , "each_lineCommon(ThreadContext,IRubyObject,Block)" : 5 , "each_lineCommon19(ThreadContext,Block)" : 2 , "each_lineCommon19(ThreadContext,IRubyObject,Block)" : 3 , "empty()" : 3 , "empty_p(ThreadContext)" : 1 , "encodeCommon(ThreadContext,Ruby,ByteList,IRubyObject,IRubyObject,IRubyObject)::ByteList" : 1 , "encode_bang(ThreadContext,IRubyObject)" : 1 , "end_with_pCommon(IRubyObject)" : 2 , "eql(IRubyObject)" : 3 , "eql18(Ruby,IRubyObject)" : 1 , "eql19(Ruby,IRubyObject)" : 1 , "escapeCodePointCat(Ruby,byte[],int,int)" : 2 , "exciseHead(int)" : 2 , "exciseTail(int)" : 2 , "freeze(???)" : 6 , "frozenCheck()" : 4 , "getByteList(???)" : 217 , "getBytes()" : 10 , "getCharset(Ruby,IRubyObject)" : 4 , "getCodeRange()" : 25 , "getEncoder(ThreadContext,Ruby,Charset,IRubyObject)" : 1 , "getEncoding(???)" : 6 , "getPattern(IRubyObject)" : 3 , "getStringForPattern(IRubyObject)" : 4 , "getUnicodeValue()" : 39 , "gsub(ThreadContext,IRubyObject,Block)" : 1 , "gsub(ThreadContext,IRubyObject,Block,boolean)" : 2 , "gsub(ThreadContext,IRubyObject,IRubyObject,Block)" : 1 , "gsub(ThreadContext,IRubyObject,IRubyObject,Block,boolean)" : 2 , "gsub19(ThreadContext,IRubyObject,IRubyObject,Block,boolean)" : 2 , "gsubCommon(ThreadContext,boolean,Regex,Block,RubyString,int)::ByteList" : 1 , "gsubCommon19(ThreadContext,Block,RubyString,RubyHash,IRubyObject,boolean,int)" : 3 , "gsubCommon19(ThreadContext,Block,RubyString,RubyHash,IRubyObject,boolean,int)::ByteList" : 1 , "gsub_bang(ThreadContext,IRubyObject,Block)" : 3 , "gsub_bang(ThreadContext,IRubyObject,IRubyObject,Block)" : 3 , "gsub_bang(ThreadContext,IRubyObject[],Block)" : 2 , "index(ThreadContext,IRubyObject)" : 1 , "index(ThreadContext,IRubyObject,IRubyObject)" : 1 , "indexCommon(Ruby,ThreadContext,IRubyObject,int)" : 2 , "indexCommon19(Ruby,ThreadContext,IRubyObject,int)" : 2 , "infectBy(???)" : 4 , "initialize(IRubyObject)" : 1 , "inspect()" : 2 , "inspect(???)" : 1 , "inspect19()" : 1 , "inspectCommon(boolean)" : 3 , "inspectCommon(boolean)::ByteList" : 1 , "isAsciiOnly()" : 2 , "isCodeRangeAsciiOnly()" : 1 , "isCodeRangeValid()" : 2 , "isComparableViaCodeRangeWith(RubyString)" : 1 , "isComparableWith(RubyString)" : 4 , "isEVStr(byte[],int,int)" : 3 , "isEVStr(int)" : 2 , "isEmpty()" : 7 , "isHeadSlice(int,int)" : 2 , "isTailSlice(int,int)" : 2 , "justify(IRubyObject,IRubyObject,int)" : 3 , "justify(IRubyObject,int)" : 3 , "justify19(IRubyObject,IRubyObject,int)" : 3 , "justify19(IRubyObject,int)" : 3 , "justifyCommon(Ruby,ByteList,int,int)::ByteList" : 1 , "keepCodeRange()" : 7 , "length()" : 4 , "length19()" : 1 , "ljust(IRubyObject)" : 1 , "ljust(IRubyObject,IRubyObject)" : 1 , "lstrip_bang(ThreadContext)" : 1 , "lstrip_bang19(ThreadContext)" : 1 , "makeShared(Ruby,RubyClass,int,int)" : 2 , "makeShared(Ruby,int,int)" : 21 , "makeShared19(Ruby,int,int)" : 19 , "makeSharedString(Ruby,int,int)" : 2 , "modify()" : 21 , "modify(int)" : 11 , "modify19()" : 10 , "modify19(int)" : 2 , "modifyAndKeepCodeRange()" : 10 , "modifyCheck()" : 31 , "modifyCheck(byte[],int)" : 7 , "multiplyByteList(ThreadContext,IRubyObject)" : 2 , "newEmptyString(Ruby)" : 47 , "newEmptyString(Ruby,RubyClass)" : 7 , "newString(Ruby,CharSequence)" : 44 , "newString(Ruby,String)" : 42 , "newString(Ruby,byte[],int,int)" : 1 , "newString(Ruby,byte[],int,int)::ByteList" : 1 , "newStringLight(???)" : 3 , "newStringLight(Ruby,int)" : 1 , "newStringLight(Ruby,int)::ByteList" : 1 , "newStringNoCopy(???)" : 5 , "newStringNoCopy(Ruby,byte[])" : 6 , "newStringNoCopy(Ruby,byte[])::ByteList" : 1 , "newStringNoCopy(Ruby,byte[],int,int)" : 1 , "newStringNoCopy(Ruby,byte[],int,int)::ByteList" : 1 , "newStringShared(Ruby,RubyString)" : 19 , "newStringShared(Ruby,byte[])" : 1 , "newStringShared(Ruby,byte[])::ByteList" : 1 , "newStringShared(Ruby,byte[],int,int)" : 2 , "newStringShared(Ruby,byte[],int,int)::ByteList" : 1 , "newUnicodeString(Ruby,String)" : 7 , "newUnicodeString(Ruby,String)::ByteList" : 1 , "newUsAsciiStringNoCopy(???)" : 2 , "newUsAsciiStringShared(???)" : 3 , "newUsAsciiStringShared(Ruby,byte[],int,int)" : 5 , "newUsAsciiStringShared(Ruby,byte[],int,int)::ByteList" : 1 , "objAsString(ThreadContext,IRubyObject)" : 15 , "oct(ThreadContext)" : 1 , "opFormatCommon(ThreadContext,IRubyObject,CompatVersion)" : 1 , "op_aref(Ruby,int)" : 2 , "op_aref(ThreadContext,IRubyObject)" : 2 , "op_aref(ThreadContext,IRubyObject,IRubyObject)" : 2 , "op_aref19(Ruby,int)" : 2 , "op_aref19(ThreadContext,IRubyObject)" : 2 , "op_aref19(ThreadContext,IRubyObject,IRubyObject)" : 2 , "op_aset(ThreadContext,IRubyObject,IRubyObject)" : 2 , "op_aset(ThreadContext,IRubyObject,IRubyObject,IRubyObject)" : 2 , "op_aset(ThreadContext,int,IRubyObject)" : 2 , "op_aset19(ThreadContext,IRubyObject,IRubyObject)" : 1 , "op_aset19(ThreadContext,IRubyObject,IRubyObject,IRubyObject)" : 1 , "op_aset19(ThreadContext,int,IRubyObject)" : 2 , "op_cmp(RubyString)" : 7 , "op_cmp19(RubyString)" : 8 , "op_cmp19(ThreadContext,IRubyObject)" : 1 , "op_cmpCommon(ThreadContext,IRubyObject)" : 3 , "op_equal(ThreadContext,IRubyObject)" : 1 , "op_equal19(ThreadContext,IRubyObject)" : 6 , "op_equalCommon(ThreadContext,IRubyObject)" : 2 , "op_format(ThreadContext,IRubyObject)" : 1 , "op_match19(ThreadContext,IRubyObject)" : 1 , "op_plus(ThreadContext,RubyString)" : 1 , "op_plus19(ThreadContext,RubyString)" : 1 , "partitionMismatch(Ruby)" : 3 , "prefixEscapeCat(int)" : 11 , "raiseIndexOutOfString(int)" : 4 , "regexSplit(ThreadContext,IRubyObject,boolean,int,int)" : 2 , "replace(IRubyObject)" : 1 , "replaceCommon(IRubyObject)" : 2 , "replaceInternal(int,int,RubyString)" : 8 , "replaceInternal19(int,int,RubyString)" : 5 , "reverse(ThreadContext)::ByteList" : 1 , "reverse19(ThreadContext)::ByteList" : 1 , "rindex(ThreadContext,IRubyObject)" : 1 , "rindex(ThreadContext,IRubyObject,IRubyObject)" : 1 , "rindexCommon(Ruby,ThreadContext,IRubyObject,int)" : 2 , "rindexCommon19(Ruby,ThreadContext,IRubyObject,int)" : 2 , "rjust(IRubyObject)" : 1 , "rjust(IRubyObject,IRubyObject)" : 1 , "rpartitionMismatch(Ruby)" : 2 , "rstrip_bang(ThreadContext)" : 1 , "rstrip_bang19(ThreadContext)" : 1 , "scan(ThreadContext,IRubyObject,Block)" : 1 , "scanForCodeRange()" : 25 , "setCodeRange(int)" : 21 , "setValue(CharSequence)" : 4 , "singleByteDowncase(Ruby,byte[],int,int)" : 2 , "singleByteOptimizable()" : 21 , "singleByteSwapcase(Ruby,byte[],int,int)" : 2 , "singleByteUpcase(Ruby,byte[],int,int)" : 2 , "slice_bang(ThreadContext,IRubyObject)" : 1 , "slice_bang(ThreadContext,IRubyObject,IRubyObject)" : 1 , "smartChopBangCommon(Ruby)" : 2 , "smartChopBangCommon19(Ruby)" : 2 , "split(ThreadContext)" : 2 , "split(ThreadContext,IRubyObject)" : 4 , "split(ThreadContext,IRubyObject,IRubyObject)" : 2 , "split(ThreadContext,IRubyObject[])" : 1 , "split19(ThreadContext,IRubyObject)" : 1 , "splitCommon(IRubyObject,boolean,int,int,ThreadContext)" : 3 , "splitCommon19(IRubyObject,boolean,int,int,ThreadContext)" : 3 , "squeezeCommon(Ruby,boolean[])" : 6 , "squeeze_bang(ThreadContext)" : 1 , "squeeze_bang(ThreadContext,IRubyObject)" : 1 , "squeeze_bang(ThreadContext,IRubyObject[])" : 1 , "squeeze_bang19(ThreadContext)" : 1 , "squeeze_bang19(ThreadContext,IRubyObject)" : 1 , "squeeze_bang19(ThreadContext,IRubyObject[])" : 1 , "start_with_pCommon(IRubyObject)" : 2 , "strDup(Ruby)" : 51 , "strDup(Ruby,RubyClass)" : 5 , "strHashCode(Ruby)" : 2 , "strIndex(RubyString,int)" : 2 , "strIndex19(RubyString,int)" : 6 , "strLength()" : 12 , "strLength(???)" : 3 , "strRindex(RubyString,int)" : 2 , "strRindex19(RubyString,int)" : 3 , "stringSplit19(ThreadContext,RubyString,boolean,int,int)" : 1 , "stringToBytes(String)" : 1 , "stringToInum(int,boolean)" : 5 , "stringToInum19(int,boolean)" : 3 , "stringValue(IRubyObject)" : 8 , "strip_bang(ThreadContext)" : 1 , "strip_bang19(ThreadContext)" : 1 , "subLength(int)" : 7 , "sub_bang(ThreadContext,IRubyObject,Block)" : 4 , "sub_bang(ThreadContext,IRubyObject,IRubyObject,Block)" : 4 , "sub_bang(ThreadContext,IRubyObject[],Block)" : 3 , "sub_bang19(ThreadContext,IRubyObject,Block)" : 1 , "sub_bang19(ThreadContext,IRubyObject,IRubyObject,Block)" : 1 , "subpat(Ruby,ThreadContext,RubyRegexp,int)" : 2 , "subpat19(Ruby,ThreadContext,RubyRegexp)" : 2 , "subpat19(Ruby,ThreadContext,RubyRegexp,IRubyObject)" : 1 , "subpatSet(ThreadContext,RubyRegexp,int,IRubyObject)" : 2 , "subpatSet19(ThreadContext,RubyRegexp,IRubyObject,IRubyObject)" : 2 , "substr(Ruby,int,int)" : 10 , "substr19(Ruby,int,int)" : 7 , "succ19(ThreadContext)" : 1 , "succ_bang()" : 1 , "sumCommon(ThreadContext,long)" : 2 , "swapcase19(ThreadContext)" : 1 , "swapcase_bang(ThreadContext)" : 1 , "swapcase_bang19(ThreadContext)" : 1 , "taint(???)" : 1 , "toEncoding(???)" : 2 , "toString()" : 98 , "to_c(ThreadContext)::ByteList" : 1 , "to_i()" : 1 , "to_i(IRubyObject)" : 1 , "to_r(ThreadContext)::ByteList" : 1 , "to_sym()" : 2 , "trFind(int,boolean[],TrTables)" : 3 , "trNext(TR)" : 5 , "trSetupTable(???)" : 9 , "trSetupTable(Ruby,boolean,TrTables,boolean,Encoding)::IntHash" : 1 , "trSetupTable(boolean[],boolean)" : 9 , "trTrans(ThreadContext,IRubyObject,IRubyObject,boolean)" : 4 , "trTrans19(ThreadContext,IRubyObject,IRubyObject,boolean)" : 4 , "trTrans19(ThreadContext,IRubyObject,IRubyObject,boolean)::IntHash" : 2 , "unmarshalFrom(UnmarshalStream)" : 1 , "upcase19(ThreadContext)" : 1 , "upcase_bang(ThreadContext)" : 1 , "upcase_bang19(ThreadContext)" : 1 , "uptoCommon18(ThreadContext,IRubyObject,boolean,Block)" : 4 , "uptoCommon19(ThreadContext,IRubyObject,boolean,Block)" : 4 , "uptoCommon19(ThreadContext,IRubyObject,boolean,Block,boolean)" : 2 , "view(???)" : 1 , "view(int,int)" : 20}},{ "className" : "org::jruby::ast::ConstNode" , "selectors" : { "ConstNode(ISourcePosition,String)" : 2 , "getName()" : 6 , "getValue(ThreadContext)" : 1 , "isCached(ThreadContext,IRubyObject)" : 1 , "reCache(ThreadContext,String)" : 1}},{ "className" : "org::jruby::java::invokers::ConstructorInvoker" , "selectors" : { "ConstructorInvoker(RubyModule,List<Constructor>)" : 1 , "call(ThreadContext,IRubyObject,RubyModule,String)" : 1 , "call(ThreadContext,IRubyObject,RubyModule,String,IRubyObject)" : 1 , "call(ThreadContext,IRubyObject,RubyModule,String,IRubyObject,IRubyObject)" : 1 , "call(ThreadContext,IRubyObject,RubyModule,String,IRubyObject,IRubyObject,IRubyObject)" : 1 , "call(ThreadContext,IRubyObject,RubyModule,String,IRubyObject[])" : 4}},{ "className" : "org::jruby::internal::runtime::methods::ReflectedCompiledMethod" , "selectors" : { "ReflectedCompiledMethod(RubyModule,Arity,Visibility,StaticScope,Object,Method,CallConfiguration,ISourcePosition)" : 1}},{ "className" : "org::jruby::java::invokers::InstanceMethodInvoker" , "selectors" : { "InstanceMethodInvoker(RubyModule,List<Method>)" : 1 , "InstanceMethodInvoker(RubyModule,Method)" : 3 , "call(ThreadContext,IRubyObject,RubyModule,String)" : 1 , "call(ThreadContext,IRubyObject,RubyModule,String,IRubyObject)" : 1 , "call(ThreadContext,IRubyObject,RubyModule,String,IRubyObject,IRubyObject)" : 1 , "call(ThreadContext,IRubyObject,RubyModule,String,IRubyObject,IRubyObject,IRubyObject)" : 1 , "call(ThreadContext,IRubyObject,RubyModule,String,IRubyObject[])" : 4 , "castJavaProxy(IRubyObject)" : 22}},{ "className" : "org::jruby::RubyNoMethodError" , "selectors" : { "RubyNoMethodError(Ruby,RubyClass)" : 1 , "RubyNoMethodError(Ruby,RubyClass,String,String,IRubyObject)" : 1 , "createNoMethodErrorClass(Ruby,RubyClass)" : 1}},{ "className" : "org::jruby::ext::ffi::jffi::CallbackMarshaller::CallbackReaper" , "selectors" : { "CallbackReaper(Callback)" : 1}},{ "className" : "org::jruby::ext::ffi::CallbackInfo" , "selectors" : { "CallbackInfo(Ruby,RubyClass,Type,Type[],boolean)" : 1 , "createCallbackInfoClass(Ruby,RubyModule)" : 1 , "getParameterTypes()" : 4 , "getProviderCallbackInfo()" : 1 , "getReturnType()" : 4 , "isStdcall()" : 4 , "setProviderCallbackInfo(Object)" : 1}},{ "className" : "org::jruby::javasupport::JavaArray" , "selectors" : { "JavaArray(Ruby,Object)" : 8 , "arefDirect(Ruby,JavaConverter,Object,int)" : 1 , "arefDirect(int)" : 4 , "at(int)" : 1 , "createJavaArrayClass(Ruby,RubyModule)" : 1 , "fillWithExceptionHandling(int,int,Object)" : 2 , "getComponentType()" : 9 , "getLength()" : 5 , "length()" : 13 , "setWithExceptionHandling(int,Object)" : 6}},{ "className" : "org::jruby::runtime::marshal::MarshalCache" , "selectors" : { "MarshalCache()" : 1 , "isRegistered(IRubyObject)" : 1 , "isSymbolRegistered(String)" : 2 , "register(IRubyObject)" : 1 , "registerSymbol(String)" : 2 , "registeredIndex(IRubyObject)" : 1 , "registeredSymbolIndex(String)" : 2 , "writeLink(MarshalStream,IRubyObject)" : 1 , "writeSymbolLink(MarshalStream,String)" : 2}},{ "className" : "org::jruby::lexer::yacc::ByteArrayLexerSourceTest" , "selectors" : { "assertActionShouldProduce(String,Callable<byte[]>)" : 5 , "assertReadShouldProduce(LexerSource,String)" : 19 , "assertReadShouldProduce(LexerSource,String)::ByteList" : 1 , "newSource(String)" : 29 , "newSource(String,List<String>)" : 2 , "safeGetBytes(String)" : 10 , "testGetRemainingOutputAsStream()::anonymous(Callable)" : 1 , "testMatchMarkerAcrossUnreadBuffers()::ByteList" : 1 , "testMatchMarkerShouldMatchAStringInTheInput()::ByteList" : 1 , "testMatchMarkerShouldMatchAStringInTheInputAndAdvance()::ByteList" : 1 , "testMatchMarkerShouldNotAdvanceIfItDoesntMatch()::ByteList" : 1 , "testMatchMarkerShouldNotCountNewlinesAsWhitespace()::ByteList" : 1 , "testMatchMarkerShouldSkipOverLeadingWhitespace()::ByteList" : 1 , "testMatchMarkerShouldVerifyEndOfLine()::ByteList" : 1 , "testMatchMarkerShouldVerifyEndOfLineCRLF()::ByteList" : 1 , "testMatchMarkerShouldVerifyEndOfLineCRLFWithIndent()::ByteList" : 1}},{ "className" : "org::jruby::runtime::Arity" , "selectors" : { "Arity(int)" : 1 , "checkArgumentCount(Ruby,IRubyObject[],int,int)" : 21 , "checkArgumentCount(Ruby,int,int,int)" : 3 , "checkArity(Ruby,IRubyObject[])" : 15 , "checkArity(Ruby,int)" : 2 , "createArity(int)" : 22 , "fixed(int)" : 25 , "fromAnnotation(JRubyMethod,Class[],boolean)" : 1 , "fromAnnotation(JRubyMethod,int)" : 2 , "getValue()" : 25 , "isFixed()" : 4 , "newArity(int)" : 9 , "noArguments()" : 17 , "optional()" : 19 , "procArityOf(Node)" : 7 , "raiseArgumentError(Ruby,int,int,int)" : 34 , "required()" : 11 , "required(int)" : 4 , "scanArgs(Ruby,IRubyObject[],int,int)" : 7 , "singleArgument()" : 14 , "twoArguments()" : 5}},{ "className" : "org::jruby::runtime::CompiledBlock19" , "selectors" : { "CompiledBlock19(Arity,StaticScope,CompiledBlockCallback19,boolean,int)" : 3 , "blockArgWarning(Ruby,int)" : 1 , "defaultArgLogic(Ruby,IRubyObject)" : 1 , "handleNextJump(ThreadContext,NextJump,Type)" : 3 , "newCompiledBlock(Arity,StaticScope,CompiledBlockCallback19,boolean,int)" : 1 , "newCompiledClosure(ThreadContext,IRubyObject,BlockBody)" : 1 , "post(ThreadContext,Binding,Visibility,Frame)" : 3 , "pre(ThreadContext,RubyModule,Binding)" : 3 , "prepareSelf(Binding)" : 3 , "setupBlockArg(Ruby,IRubyObject,IRubyObject)" : 1 , "setupBlockArgs(IRubyObject)" : 1 , "yield(ThreadContext,IRubyObject,IRubyObject,RubyModule,boolean,Binding,Type,Block)" : 3 , "yieldSpecificInternal(ThreadContext,IRubyObject[],Binding,Type)" : 4}},{ "className" : "org::jruby::RubyObject" , "selectors" : { "RubyObject(Ruby,RubyClass)" : 87 , "RubyObject(Ruby,RubyClass,boolean)" : 12 , "RubyObject(Ruby,RubyClass,boolean,boolean)" : 4 , "RubyObject(RubyClass)" : 2 , "callInit(IRubyObject[],Block)" : 17 , "checkFrozen()" : 7 , "createObjectClass(Ruby,RubyClass)" : 1 , "dup()" : 16 , "eqlInternal(ThreadContext,IRubyObject,IRubyObject)" : 3 , "eql_p(IRubyObject)" : 1 , "equalInternal(ThreadContext,IRubyObject,IRubyObject)" : 20 , "equals(Object)" : 1 , "evalUnder(ThreadContext,RubyModule,RubyString,String,int)" : 5 , "extend(IRubyObject[])" : 2 , "freeze(ThreadContext)" : 23 , "getInstanceEvalClass()" : 4 , "hashCode()" : 1 , "id()" : 4 , "initialize_copy(IRubyObject)" : 2 , "inspect()" : 2 , "inspect(ThreadContext,IRubyObject)" : 11 , "instance_variable_set(IRubyObject,IRubyObject)" : 1 , "kind_of_p(ThreadContext,IRubyObject)" : 5 , "method(IRubyObject)" : 2 , "methods(ThreadContext,IRubyObject[],boolean)" : 2 , "nonFixnumHashCode(IRubyObject)" : 1 , "op_equal(ThreadContext,IRubyObject)" : 3 , "rbClone()" : 2 , "send(ThreadContext,IRubyObject[],Block)" : 1 , "singletonMethods(ThreadContext,IRubyObject[],boolean)" : 2 , "specificEval(ThreadContext,RubyModule,Block)" : 2 , "specificEval(ThreadContext,RubyModule,IRubyObject,Block)" : 2 , "specificEval(ThreadContext,RubyModule,IRubyObject,IRubyObject,Block)" : 2 , "specificEval(ThreadContext,RubyModule,IRubyObject,IRubyObject,IRubyObject,Block)" : 2 , "specificEval(ThreadContext,RubyModule,IRubyObject[],Block)" : 2 , "taint(ThreadContext)" : 7 , "tainted_p(ThreadContext)" : 1 , "toString()" : 18 , "to_s()" : 2 , "trueIfNoArgument(ThreadContext,IRubyObject[])" : 6 , "type()" : 3 , "untrust(ThreadContext)" : 3 , "validateInstanceVariable(String)" : 4 , "yieldUnder(ThreadContext,RubyModule,Block)" : 2 , "yieldUnder(ThreadContext,RubyModule,IRubyObject[],Block)" : 1}},{ "className" : "org::jruby::internal::runtime::methods::InvocationMethodFactory" , "selectors" : { "InvocationMethodFactory(ClassLoader)" : 3 , "checkArity(JRubyMethod,SkinnyMethodAdapter,int)" : 1 , "checkArity(JRubyMethod,SkinnyMethodAdapter,int)::Label" : 2 , "createAnnotatedMethodInvocation(JavaMethodDescriptor,SkinnyMethodAdapter,String,int,boolean)" : 2 , "createAnnotatedMethodInvocation(JavaMethodDescriptor,SkinnyMethodAdapter,String,int,boolean)::Label" : 3 , "createCompiledCtor(String,String,String)::Label" : 1 , "createJavaMethodCtor(String,String,String)::Label" : 1 , "endCallWithBytes(byte[],String)" : 2 , "endClass(ClassWriter,String)::ClassReader" : 1 , "endClassOffline(ClassWriter)::ClassReader" : 1 , "endClassWithBytes(byte[],String)" : 2 , "getAnnotatedMethodClass(JavaMethodDescriptor)" : 2 , "getAnnotatedMethodClass(List<JavaMethodDescriptor>)" : 7 , "getBlockCallback19Offline(String,String)" : 1 , "getBlockCallbackOffline(String,String)" : 1 , "getCompiledMethodOffline(String,String,String,Arity,StaticScope,CallConfiguration,String,int)" : 1 , "getCompiledMethodOffline(String,String,String,Arity,StaticScope,CallConfiguration,String,int)::Label" : 7 , "getPostMethod(CallConfiguration)" : 1 , "getPreMethod(CallConfiguration)" : 1 , "getPreSignature(CallConfiguration)" : 1 , "invokeCCallTrace(SkinnyMethodAdapter,int)" : 1 , "invokeCReturnTrace(SkinnyMethodAdapter,int)" : 2 , "invokeCallConfigPost(SkinnyMethodAdapter,String,CallConfiguration)" : 6 , "invokeCallConfigPre(SkinnyMethodAdapter,String,int,boolean,CallConfiguration)" : 3 , "invokeTraceCompiledPost(SkinnyMethodAdapter,String,int)" : 4 , "invokeTraceCompiledPre(SkinnyMethodAdapter,String,int,String,int)" : 1 , "loadArgumentWithCast(SkinnyMethodAdapter,int,Class)" : 6 , "loadArguments(SkinnyMethodAdapter,JavaMethodDescriptor,int)" : 1 , "loadBlock(SkinnyMethodAdapter,int,boolean)" : 2 , "loadBlockForPre(SkinnyMethodAdapter,int,boolean)" : 1 , "loadReceiver(String,JavaMethodDescriptor,SkinnyMethodAdapter)" : 1 , "prepareForPre(SkinnyMethodAdapter,int,boolean,CallConfiguration)" : 1 , "selectSuperClass(int,boolean)" : 1 , "startBlockCall(ClassWriter)::Label" : 1 , "startBlockCall19(ClassWriter)::Label" : 1 , "tryClass(String)" : 2 , "tryClass(String,Class)" : 3}},{ "className" : "org::jruby::runtime::invokedynamic::InvokeDynamicSupport" , "selectors" : { "callMethodMissing(CacheEntry,CallType,ThreadContext,IRubyObject,String)" : 1 , "callMethodMissing(CacheEntry,CallType,ThreadContext,IRubyObject,String,Block)" : 1 , "callMethodMissing(CacheEntry,CallType,ThreadContext,IRubyObject,String,IRubyObject)" : 1 , "callMethodMissing(CacheEntry,CallType,ThreadContext,IRubyObject,String,IRubyObject,Block)" : 1 , "callMethodMissing(CacheEntry,CallType,ThreadContext,IRubyObject,String,IRubyObject,IRubyObject)" : 1 , "callMethodMissing(CacheEntry,CallType,ThreadContext,IRubyObject,String,IRubyObject,IRubyObject,Block)" : 1 , "callMethodMissing(CacheEntry,CallType,ThreadContext,IRubyObject,String,IRubyObject,IRubyObject,IRubyObject)" : 1 , "callMethodMissing(CacheEntry,CallType,ThreadContext,IRubyObject,String,IRubyObject,IRubyObject,IRubyObject,Block)" : 1 , "callMethodMissing(CacheEntry,CallType,ThreadContext,IRubyObject,String,IRubyObject[])" : 1 , "callMethodMissing(CacheEntry,CallType,ThreadContext,IRubyObject,String,IRubyObject[],Block)" : 1 , "handleBreakJump(ThreadContext,BreakJump)" : 5 , "methodMissing(CacheEntry,CallType,String,IRubyObject)" : 10 , "pollAndGetClass(ThreadContext,IRubyObject)" : 10 , "retryJumpError(ThreadContext)" : 5}},{ "className" : "org::jruby::RubyArray" , "selectors" : { "RubyArray(Ruby,IRubyObject[])" : 10 , "RubyArray(Ruby,IRubyObject[],boolean)" : 2 , "RubyArray(Ruby,IRubyObject[],int)" : 1 , "RubyArray(Ruby,IRubyObject[],int,int)" : 1 , "RubyArray(Ruby,RubyClass)" : 1 , "RubyArray(Ruby,RubyClass,IRubyObject[])" : 5 , "RubyArray(Ruby,RubyClass,IRubyObject[],boolean)" : 1 , "RubyArray(Ruby,RubyClass,RubyArray)" : 3 , "RubyArray(Ruby,RubyClass,boolean)" : 1 , "RubyArray(Ruby,RubyClass,int)" : 10 , "RubyArray(Ruby,boolean)" : 4 , "RubyArray(Ruby,int)" : 10 , "RubyArray(Ruby,int,boolean)" : 2 , "add(Object)" : 17 , "add(int,Object)" : 1 , "addAll(Collection)" : 2 , "all_p(ThreadContext,Block)" : 1 , "all_pBlockless(ThreadContext)" : 1 , "alloc(int)" : 2 , "any_p(ThreadContext,Block)" : 1 , "any_pBlockless(ThreadContext)" : 1 , "append(IRubyObject)" : 149 , "aref(IRubyObject)" : 6 , "aref(IRubyObject,IRubyObject)" : 2 , "aref19(IRubyObject)" : 1 , "aref19(IRubyObject,IRubyObject)" : 1 , "arefCommon(IRubyObject)" : 2 , "arefCommon(IRubyObject,IRubyObject)" : 2 , "aryDup()" : 8 , "aryReverse(IRubyObject[],int,IRubyObject[],int)" : 3 , "aryToAry(IRubyObject)" : 1 , "aset(IRubyObject,IRubyObject)" : 2 , "aset(IRubyObject,IRubyObject,IRubyObject)" : 1 , "at(IRubyObject)" : 2 , "checkLength(Ruby,long)" : 4 , "choiceCommon(ThreadContext)" : 2 , "cmpCommon(ThreadContext,Ruby,RubyArray)" : 1 , "collect(ThreadContext,Block)" : 1 , "collectBang(ThreadContext,Block)" : 2 , "combinationLength(ThreadContext,int,int)" : 1 , "compact_bang()" : 1 , "compare(ThreadContext,String,IRubyObject,Set<Pair>)" : 1 , "compareFixnums(RubyFixnum,RubyFixnum)" : 1 , "compareOthers(ThreadContext,IRubyObject,IRubyObject)" : 1 , "concat(IRubyObject)" : 4 , "concurrentModification()" : 41 , "createArrayClass(Ruby)" : 1 , "cycle(ThreadContext,Block)" : 1 , "cycleCommon(ThreadContext,long,Block)" : 2 , "delete(ThreadContext,IRubyObject,Block)" : 1 , "deleteIf(ThreadContext,Block)" : 1 , "delete_at(int)" : 4 , "detectCommon(ThreadContext,IRubyObject,Block)" : 1 , "eachCommon(ThreadContext,Block)" : 1 , "eachIndex(ThreadContext,Block)" : 1 , "elt(long)" : 23 , "eltInternal(int)" : 231 , "eltInternalSet(int,IRubyObject)" : 2 , "eltOk(long)" : 1 , "entry(int)" : 30 , "entry(long)" : 7 , "fetch(ThreadContext,IRubyObject,Block)" : 1 , "fetch(ThreadContext,IRubyObject,IRubyObject,Block)" : 1 , "fill(IRubyObject[],int,int,IRubyObject)" : 2 , "fillBegin(IRubyObject)" : 4 , "fillCommon(ThreadContext,int,long,Block)" : 4 , "fillCommon(ThreadContext,int,long,IRubyObject)" : 4 , "fillLen(long,IRubyObject)" : 4 , "find(ThreadContext,IRubyObject,Block)" : 4 , "find_index(ThreadContext,Block)" : 1 , "find_index(ThreadContext,IRubyObject)" : 1 , "first()" : 3 , "first(IRubyObject)" : 1 , "first(IRubyObject[])" : 1 , "flatten(ThreadContext)" : 1 , "flatten(ThreadContext,int,RubyArray)" : 6 , "flatten_bang(ThreadContext)" : 1 , "flatten_bang(ThreadContext,IRubyObject)" : 1 , "getLength()" : 53 , "getList()" : 7 , "include_p(ThreadContext,IRubyObject)" : 1 , "includes(ThreadContext,IRubyObject)" : 4 , "index(ThreadContext,IRubyObject)" : 1 , "indexOf(Object)" : 2 , "initialize(ThreadContext,Block)" : 1 , "initializeCommon(ThreadContext,IRubyObject,IRubyObject,Block)" : 4 , "insert(IRubyObject)" : 1 , "insert(IRubyObject,IRubyObject)" : 1 , "insert(IRubyObject[])" : 3 , "inspect()" : 6 , "inspectAry(ThreadContext)" : 1 , "inspectAry(ThreadContext)::ByteList" : 1 , "inspectJoin(ThreadContext,RubyArray,IRubyObject)" : 1 , "internalRotate(ThreadContext,int)" : 2 , "internalRotateBang(ThreadContext,int)" : 2 , "isEmpty()" : 2 , "iterator()" : 2 , "join(ThreadContext,IRubyObject)" : 6 , "join(ThreadContext,IRubyObject)::ByteList" : 1 , "join1(???)" : 2 , "join19(ThreadContext,IRubyObject)" : 3 , "join19(ThreadContext,IRubyObject)::ByteList" : 2 , "last()" : 1 , "last(IRubyObject)" : 2 , "length()" : 5 , "makeHash()" : 5 , "makeHash(RubyArray)" : 1 , "makeHash(RubyHash)" : 3 , "makeHash(ThreadContext,Block)" : 3 , "makeHash(ThreadContext,RubyHash,Block)" : 1 , "makeShared()" : 2 , "makeShared(int,int,RubyArray)" : 2 , "makeShared(int,int,RubyClass)" : 7 , "makeSharedFirst(ThreadContext,IRubyObject,boolean,RubyClass)" : 2 , "marshalTo(RubyArray,MarshalStream)" : 1 , "modify()" : 21 , "modifyCheck()" : 22 , "newArray(Ruby)" : 14 , "newArray(Ruby,Collection<? extends IRubyObject>)" : 11 , "newArray(Ruby,IRubyObject)" : 10 , "newArray(Ruby,IRubyObject,IRubyObject)" : 24 , "newArray(Ruby,IRubyObject[])" : 9 , "newArray(Ruby,int)" : 22 , "newArrayLight(Ruby)" : 1 , "newArrayLight(Ruby,IRubyObject)" : 3 , "newArrayLight(Ruby,IRubyObject[])" : 8 , "newArrayLight(Ruby,int)" : 3 , "newArrayNoCopy(Ruby,IRubyObject[])" : 25 , "newArrayNoCopy(Ruby,IRubyObject[],int)" : 3 , "newArrayNoCopy(Ruby,IRubyObject[],int,int)" : 2 , "newArrayNoCopyLight(Ruby,IRubyObject[])" : 6 , "newEmptyArray(Ruby)" : 20 , "op_diff(IRubyObject)" : 1 , "permutationCommon(ThreadContext,int,Block)" : 2 , "permute(ThreadContext,int,int,int[],int,boolean[],RubyArray,Block)" : 2 , "pop(ThreadContext)" : 8 , "push_m(IRubyObject[])" : 1 , "rb_clear()" : 2 , "realloc(int,int)" : 6 , "rejectBang(ThreadContext,Block)" : 1 , "rejectCommon(ThreadContext,Block)" : 1 , "reject_bang(ThreadContext,Block)" : 2 , "remove(Object)" : 2 , "replace(IRubyObject)" : 2 , "reverseEach(ThreadContext,Block)" : 1 , "reverse_each(ThreadContext,Block)" : 1 , "rindex(ThreadContext,IRubyObject)" : 1 , "rotateCount(int,int)" : 2 , "safeReverse()" : 1 , "selectCommon(ThreadContext,Block)" : 1 , "select_bang(ThreadContext,Block)" : 1 , "shift(ThreadContext)" : 3 , "shuffle_bang(ThreadContext)" : 1 , "size()" : 86 , "slice_bang(IRubyObject)" : 1 , "slice_bang(IRubyObject,IRubyObject)" : 1 , "slice_internal(long,long,IRubyObject,IRubyObject,Ruby)" : 2 , "sortInternal(ThreadContext,Block)" : 2 , "sortInternal(ThreadContext,boolean)" : 2 , "sort_bang(ThreadContext,Block)" : 3 , "sort_bang19(ThreadContext,Block)" : 1 , "splice(long,long,IRubyObject)" : 7 , "spliceOne(long,IRubyObject)" : 1 , "spliceRealloc(int,int)" : 4 , "store(long,IRubyObject)" : 15 , "storeRealloc(long,int)" : 1 , "subseq(long,long)" : 7 , "subseqLight(long,long)" : 12 , "toArray()" : 1 , "toArray(Object[])" : 12 , "toJavaArray()" : 31 , "toJavaArrayMaybeUnsafe()" : 10 , "to_s()" : 1 , "uniq(ThreadContext)" : 1 , "uniq_bang(ThreadContext)" : 1 , "unmarshalFrom(UnmarshalStream)" : 1 , "unshift(IRubyObject)" : 2 , "unshift(IRubyObject[])" : 1 , "values_at(IRubyObject[])" : 1 , "values_at(long,IRubyObject[])" : 1 , "zip(ThreadContext,IRubyObject[],Block)" : 1}},{ "className" : "org::jruby::internal::runtime::methods::ReflectedJavaMethod" , "selectors" : { "ReflectedJavaMethod(RubyModule,Method,JRubyMethod)" : 2 , "calcArgsLength()" : 1 , "call(ThreadContext,IRubyObject,RubyModule,String,IRubyObject[],Block)" : 1}},{ "className" : "org::jruby::javasupport::JavaUtil" , "selectors" : { "<Initializer>()::anonymous(JavaConverter)" : 12 , "convertArgument(Ruby,Object,Class<?>)" : 1 , "convertJavaArrayElementToRuby(Ruby,JavaConverter,Object,int)" : 1 , "convertJavaArrayToRuby(Ruby,Object[])" : 5 , "convertJavaToRuby(Ruby,Object)" : 11 , "convertJavaToRuby(Ruby,Object,Class)" : 5 , "convertJavaToUsableRubyObject(Ruby,Object)" : 47 , "convertJavaToUsableRubyObjectWithConverter(Ruby,Object,JavaConverter)" : 2 , "convertProcToInterface(ThreadContext,RubyBasicObject,Class)" : 2 , "convertProcToInterface(ThreadContext,RubyObject,Class)" : 4 , "convertRubyToJava(IRubyObject,Class)" : 9 , "getJavaCasedName(String)" : 2 , "getJavaConverter(Class)" : 5 , "getJavaPropertyName(String)" : 2 , "getNumericConverter(Class)" : 1 , "getRubyCasedName(String)" : 2 , "getRubyNamesForJavaName(String,List<Method>)" : 2 , "isDoubleFloatable(double)" : 1 , "isDuckTypeConvertable(Class,Class)" : 6 , "isJavaObject(IRubyObject)" : 1 , "isLongByteable(long)" : 1 , "isLongCharable(long)" : 1 , "isLongIntable(long)" : 1 , "isLongShortable(long)" : 1 , "java_to_primitive(IRubyObject,IRubyObject,Block)" : 1 , "java_to_ruby(Ruby,IRubyObject)" : 1 , "primitiveToWrapper(Class<?>)" : 3 , "primitive_to_java(IRubyObject,IRubyObject,Block)" : 1 , "ruby_to_java(IRubyObject,IRubyObject,Block)" : 1 , "trySimpleConversions(Ruby,Object)" : 3 , "unwrapJavaObject(IRubyObject)" : 3 , "unwrapJavaValue(Ruby,IRubyObject,String)" : 4}},{ "className" : "org::jruby::compiler::impl::StandardASMCompiler::BlockCallbackDescriptor" , "selectors" : { "BlockCallbackDescriptor(String,String)" : 2 , "getCallbackName()" : 2 , "getClassname()" : 2 , "getMethod()" : 2}},{ "className" : "org::jruby::util::io::ChannelDescriptor" , "selectors" : { "ChannelDescriptor(Channel,int,FileDescriptor)" : 6 , "ChannelDescriptor(Channel,int,ModeFlags,FileDescriptor)" : 18 , "ChannelDescriptor(Channel,int,ModeFlags,FileDescriptor,AtomicInteger,boolean)" : 4 , "ChannelDescriptor(InputStream,int,ModeFlags,FileDescriptor)" : 1 , "checkNewModes(ModeFlags)" : 1 , "checkOpen()" : 14 , "close()" : 3 , "dup()" : 1 , "dup2(int)" : 2 , "dup2Into(ChannelDescriptor)" : 1 , "getBaseInputStream()" : 1 , "getChannel()" : 68 , "getFileDescriptor()" : 2 , "getFileno()" : 19 , "getModesFromChannel(Channel)" : 1 , "getOriginalModes()" : 4 , "internalWrite(ByteBuffer)" : 4 , "isNull()" : 3 , "isOpen()" : 4 , "isSeekable()" : 8 , "isWritable()" : 1 , "lseek(long,int)" : 1 , "open(???)" : 2 , "open(String,String,ModeFlags)" : 1 , "read(???)" : 3 , "read(ByteBuffer)" : 2 , "setCanBeSeekable(boolean)" : 5 , "write(???)" : 1 , "write(ByteBuffer)" : 9}},{ "className" : "org::jruby::compiler::ir::IR_Module" , "selectors" : { "IR_Module(IR_Scope,Operand,String)" : 2 , "addCoreClass(String,IR_Scope,String[])" : 10 , "addRootMethod()" : 1 , "bootStrap()" : 1 , "getClassMethod(String)" : 1 , "getInstanceMethod(String)" : 1 , "getName()" : 8 , "getRootMethod()" : 10 , "isAClassRootMethod(IRMethod)" : 2 , "toString()" : 1 , "updateVersion()" : 1}},{ "className" : "org::jruby::internal::runtime::GlobalVariables" , "selectors" : { "GlobalVariables(Ruby)" : 1 , "alias(String,String)" : 7 , "clear(String)" : 2 , "createIfNotDefined(String)" : 3 , "define(String,IAccessor)" : 9 , "defineReadonly(String,IAccessor)" : 12 , "get(String)" : 60 , "getDefaultSeparator()" : 7 , "getNames()" : 3 , "isDefined(String)" : 3 , "set(String,IRubyObject)" : 37 , "setDefaultSeparator(IRubyObject)" : 1 , "setTraceVar(String,RubyProc)" : 1 , "untraceVar(String)" : 1 , "untraceVar(String,IRubyObject)" : 1}},{ "className" : "java::lang::Double" , "selectors" : { "Double(String)" : 365 , "Double(double)" : 2959 , "byteValue()" : 16 , "compare(double,double)" : 74 , "compareTo(Double)" : 31 , "createPoint(???)" : 1 , "doubleToLongBits(double)" : 413 , "doubleToRawLongBits(double)" : 57 , "doubleValue()" : 1202 , "doubleValue(???)" : 1 , "equals(Object)" : 28 , "floatValue()" : 44 , "hashCode()" : 27 , "intValue()" : 146 , "isInfinite()" : 4 , "isInfinite(double)" : 176 , "isNaN()" : 17 , "isNaN(double)" : 1131 , "java" : 69 , "longBitsToDouble(long)" : 43 , "longValue()" : 19 , "parseDouble(String)" : 998 , "shortValue()" : 10 , "toString()" : 56 , "toString(double)" : 277 , "valueOf(String)" : 222 , "valueOf(double)" : 182}},{ "className" : "org::jruby::runtime::MethodBlock" , "selectors" : { "callback(IRubyObject,IRubyObject,IRubyObject,Block)" : 1 , "createMethodBlock(ThreadContext,IRubyObject,DynamicScope,MethodBlock)" : 1 , "post(ThreadContext,Binding,Frame)" : 1 , "pre(ThreadContext,RubyModule,Binding)" : 1 , "yield(ThreadContext,IRubyObject,Binding,Type)" : 2 , "yield(ThreadContext,IRubyObject,IRubyObject,RubyModule,boolean,Binding,Type)" : 4}},{ "className" : "org::jruby::util::Dir::GlobArgs" , "selectors" : { "GlobArgs(???)" : 1 , "exists(???)" : 1}},{ "className" : "org::jruby::runtime::marshal::MarshalStream" , "selectors" : { "MarshalStream(Ruby,OutputStream,int)" : 1 , "dumpDefaultObjectHeader(RubyClass)" : 2 , "dumpDefaultObjectHeader(char,RubyClass)" : 2 , "dumpExtended(RubyClass)" : 2 , "dumpObject(IRubyObject)" : 9 , "dumpSymbol(String)" : 1 , "dumpVariables(List<Variable<Object>>)" : 6 , "getPathFromClass(RubyModule)" : 3 , "getVariables(IRubyObject)" : 1 , "hasNewUserDefinedMarshaling(IRubyObject)" : 1 , "hasSingletonMethods(RubyClass)" : 1 , "hasUserDefinedMarshaling(IRubyObject)" : 1 , "isMarshalFixnum(RubyFixnum)" : 2 , "isTainted()" : 1 , "registerLinkTarget(IRubyObject)" : 15 , "registerSymbol(String)" : 1 , "shouldBeRegistered(IRubyObject)" : 2 , "userMarshal(IRubyObject)" : 1 , "userNewMarshal(IRubyObject)" : 1 , "writeAndRegister(IRubyObject)" : 1 , "writeAndRegisterSymbol(String)" : 7 , "writeByte(int)" : 1 , "writeDirectly(IRubyObject)" : 1 , "writeInt(int)" : 10 , "writeObjectData(IRubyObject)" : 1 , "writeString(String)" : 7 , "writeUserClass(IRubyObject,RubyClass)" : 1}},{ "className" : "org::jruby::util::IdUtil" , "selectors" : { "isClassVariable(String)" : 8 , "isConstant(String)" : 19 , "isGlobal(String)" : 1 , "isInitialCharacter(int)" : 2 , "isInstanceVariable(String)" : 11 , "isLocal(String)" : 1 , "isNameCharacter(char)" : 1 , "isNameString(String,int,int)" : 3 , "isRubyVariable(String)" : 7 , "isValidClassVariableName(String)" : 1 , "isValidConstantName(String)" : 3 , "isValidInstanceVariableName(String)" : 1}},{ "className" : "org::jruby::lexer::yacc::InputStreamLexerSource" , "selectors" : { "InputStreamLexerSource(String,InputStream,List<String>,int,boolean)" : 1 , "advance(int)" : 1 , "bufferEntireStream(InputStream)" : 1 , "carriageReturn(int)" : 1 , "growBuf()" : 1 , "matchMarker(ByteList,boolean,boolean)::ByteList" : 1 , "read()" : 11 , "readLineBytes()::ByteList" : 1 , "readUntil(char)::ByteList" : 1 , "retreat()" : 1 , "toString()::ByteList" : 1 , "unread(int)" : 6 , "unreadMany(CharSequence)" : 2 , "wrappedRead()" : 1}},{ "className" : "org::jruby::util::RubyDateFormat" , "selectors" : { "RubyDateFormat(String,DateFormatSymbols)" : 2 , "RubyDateFormat(String,Locale)" : 1 , "RubyDateFormat(String,Locale,boolean)" : 1 , "addOutputFormatter(String,int)" : 1 , "applyPattern(String)" : 2 , "compilePattern(String)" : 1 , "formatOutput(TimeOutputFormatter,String)" : 1 , "formatWeekYear(int)" : 2 , "setDateTime(???)" : 1}},{ "className" : "org::jruby::compiler::impl::StackBasedVariableCompiler" , "selectors" : { "StackBasedVariableCompiler(BaseBodyCompiler,SkinnyMethodAdapter,StaticScope,boolean,int,int)" : 3 , "assignLocalVariable(int,CompilerCallback,boolean)" : 1 , "assignLocalVariable(int,boolean)" : 5 , "retrieveLocalVariable(int)" : 1}},{ "className" : "org::jruby::util::io::Stream" , "selectors" : { "clearerr()" : 11 , "fclose()" : 9 , "feof()" : 11 , "fflush()" : 10 , "fgetc()" : 6 , "fgetpos()" : 3 , "fgets(???)" : 1 , "fputc(int)" : 3 , "fread(???)" : 1 , "freopen(Ruby,String,ModeFlags)" : 2 , "ftruncate(long)" : 2 , "fwrite(???)" : 2 , "getChannel()" : 2 , "getDescriptor()" : 68 , "getModes()" : 6 , "getline(???)" : 7 , "isBlocking()" : 4 , "isSync()" : 4 , "lseek(long,int)" : 7 , "newInputStream()" : 2 , "newOutputStream()" : 2 , "read(???)" : 2 , "readDataBuffered()" : 5 , "readall(???)" : 2 , "ready()" : 2 , "setBinmode()" : 2 , "setBlocking(boolean)" : 2 , "setSync(boolean)" : 14 , "sync()" : 2 , "ungetc(int)" : 5 , "waitUntilReady()" : 2 , "writeDataBuffered()" : 2}},{ "className" : "org::jruby::javasupport::proxy::JavaProxyConstructor" , "selectors" : { "JavaProxyConstructor(Ruby,JavaProxyClass,Constructor<?>)" : 2 , "createJavaProxyConstructorClass(Ruby,RubyModule)" : 1 , "getDeclaringClass()" : 1 , "getParameterTypes()" : 7 , "nameOnInspection()" : 1 , "newInstance(IRubyObject,Object[])" : 1 , "newInstance(Object[],JavaProxyInvocationHandler)" : 4}},{ "className" : "org::jruby::util::WeakIdentityHashMap" , "selectors" : { "WeakIdentityHashMap()" : 2 , "clear()" : 1 , "clear(int)" : 2 , "containsKey(int,Object)" : 1 , "expunge()" : 6 , "get(int,Object)" : 1 , "grow()" : 1 , "index(int)" : 7 , "keyHash(Object)" : 4 , "maskKey(Object)" : 5 , "put(int,Object,Object)" : 1 , "remove(int,Object)" : 1 , "removeEntry(Entry)" : 2 , "size()" : 1 , "unmaskKey(Object)" : 1 , "valueRemoved(Object)" : 1}},{ "className" : "org::jruby::RubyZlib::Inflate" , "selectors" : { "Inflate(Ruby,RubyClass)" : 1 , "append(???)" : 1 , "append(ByteList)::ByteList" : 1 , "append(ThreadContext,IRubyObject)" : 1 , "flushOutput(Ruby)" : 3 , "inflate(ThreadContext,IRubyObject)" : 1 , "init(int)" : 2 , "init(int)::ByteList" : 2 , "internalFinish()" : 1 , "internalFinished()" : 3 , "run(boolean)" : 4 , "set_dictionary(IRubyObject)" : 1 , "sync_point()" : 1}},{ "className" : "org::jruby::compiler::ir::operands::CompoundString" , "selectors" : { "CompoundString(List<Operand>)" : 3 , "addUsedVariables(List<Variable>)" : 1 , "getSimplifiedOperand(Map<Operand,Operand>)" : 1}},{ "className" : "org::jruby::compiler::impl::StandardInvocationCompiler" , "selectors" : { "StandardInvocationCompiler(BaseBodyCompiler,SkinnyMethodAdapter)" : 2 , "invokeDynamic(String,CompilerCallback,ArgumentsCallback,CallType,CompilerCallback,boolean)" : 1 , "invokeDynamicSelfNoBlockSpecificArity(String,ArgumentsCallback)" : 1 , "invokeDynamicSelfNoBlockZero(String)" : 1 , "invokeOpAsgnWithAnd(String,String,CompilerCallback,ArgumentsCallback)::Label" : 2 , "invokeOpAsgnWithOr(String,String,CompilerCallback,ArgumentsCallback)::Label" : 2 , "opElementAsgnWithAnd(CompilerCallback,ArgumentsCallback,CompilerCallback)::Label" : 1 , "opElementAsgnWithOr(CompilerCallback,ArgumentsCallback,CompilerCallback)::Label" : 1}},{ "className" : "org::jruby::embed::io::ReaderInputStream" , "selectors" : { "ReaderInputStream(Reader)" : 14 , "ReaderInputStream(Reader,String)" : 1 , "appendBytes(List<byte[]>,ByteBuffer)" : 2 , "available()" : 2 , "close()" : 10 , "confirmOpen()" : 4 , "fillByteBuffer(Reader)" : 1 , "getByteArray(List<byte[]>)" : 1 , "mark(int)" : 2 , "markSupported()" : 1 , "read()" : 1 , "read(byte[])" : 1 , "read(byte[],int,int)" : 3 , "reset()" : 1 , "skip(long)" : 1}},{ "className" : "org::jruby::parser::ParserConfiguration" , "selectors" : { "ParserConfiguration(KCode,int,boolean,boolean,CompatVersion)" : 1 , "ParserConfiguration(KCode,int,boolean,boolean,boolean,CompatVersion)" : 2 , "ParserConfiguration(KCode,int,boolean,boolean,boolean,RubyInstanceConfig)" : 7 , "getKCode()" : 2 , "getLineNumber()" : 2 , "getScope()" : 1 , "getVersion()" : 2 , "hasExtraPositionInformation()" : 3 , "isDebug()" : 2 , "isDubyExtensionsEnabled()" : 1 , "isEvalParse()" : 1 , "isInlineSource()" : 3 , "parseAsBlock(DynamicScope)" : 1}},{ "className" : "org::jruby::runtime::load::LoadService" , "selectors" : { "LoadService(Ruby)" : 3 , "addAutoload(String,IAutoloadMethod)" : 1 , "addBuiltinLibrary(String,Library)" : 1 , "addLoadedFeature(RubyString)" : 1 , "addPath(String)" : 10 , "autoload(String)" : 1 , "autoloadFor(String)" : 4 , "buildClassName(String)" : 1 , "canonicalizePath(String)" : 1 , "checkEmptyLoad(String)" : 1 , "createLibrary(SearchState,LoadServiceResource)" : 9 , "debugLogFound(LoadServiceResource)" : 8 , "debugLogFound(String,String)" : 1 , "debugLogTry(String,String)" : 9 , "featureAlreadyLoaded(RubyString)" : 1 , "findBuiltinLibrary(SearchState,String,SuffixType)" : 4 , "findFileForLoad(String)" : 1 , "findFileInClasspath(String)" : 1 , "findLibraryWithClassloaders(SearchState,String,SuffixType)" : 2 , "findLibraryWithoutCWD(SearchState,String,SuffixType)" : 2 , "getClassPathResource(ClassLoader,String)" : 3 , "getLoadPath()" : 1 , "getLoadedFeatures()" : 1 , "init(List)" : 10 , "isJarfileLibrary(SearchState,String)" : 1 , "isRequireable(URL)" : 1 , "load(String,boolean)" : 2 , "loadPathLooksLikeJarURL(String)" : 1 , "lockAndRequire(String)" : 4 , "newLoadErrorFromThrowable(Ruby,String,Throwable)" : 2 , "reflectedLoad(Ruby,String,String,ClassLoader,boolean)" : 2 , "removeAutoLoadFor(String)" : 2 , "removeBuiltinLibrary(String)" : 1 , "removeInternalLoadedFeature(String)" : 1 , "removeLoadedFeature(RubyString)" : 1 , "require(String)" : 17 , "reraiseRaiseExceptions(Throwable)" : 1 , "resolveLoadName(LoadServiceResource,String)" : 10 , "smartLoad(String)" : 3 , "tryLoadingLibraryOrScript(Ruby,SearchState)" : 1 , "tryResourceAsIs(String)" : 1 , "tryResourceFromCWD(SearchState,String,SuffixType)" : 2 , "tryResourceFromHome(SearchState,String,SuffixType)" : 1 , "tryResourceFromJarURL(SearchState,String,SuffixType)" : 4 , "tryResourceFromJarURLWithLoadPath(String,String)" : 1 , "tryResourceFromLoadPath(String,String)" : 1 , "tryResourceFromLoadPathOrURL(SearchState,String,SuffixType)" : 4}},{ "className" : "org::jruby::ext::socket::RubySocket" , "selectors" : { "<Initializer>()::ByteList" : 2 , "RubySocket(Ruby,RubyClass)" : 1 , "connect(ThreadContext,IRubyObject)" : 1 , "createSocket(Ruby)" : 1 , "for_fd(ThreadContext,IRubyObject,IRubyObject)" : 1 , "formatMessage(Throwable,String)" : 1 , "getRubyInetAddress(???)" : 1 , "getaddrinfo(ThreadContext,IRubyObject,IRubyObject[])" : 1 , "gethostbyaddr(ThreadContext,IRubyObject,IRubyObject[])" : 1 , "gethostbyname(ThreadContext,IRubyObject,IRubyObject)" : 1 , "gethostbyname(ThreadContext,IRubyObject,IRubyObject)::ByteList" : 1 , "gethostname(ThreadContext,IRubyObject)" : 1 , "getnameinfo(ThreadContext,IRubyObject,IRubyObject[])" : 1 , "getservbyname(ThreadContext,IRubyObject,IRubyObject[])" : 3 , "handleSocketException(Ruby,String,SocketException)" : 5 , "intoAddress(Ruby,String)" : 1 , "pack_sockaddr_in(ThreadContext,IRubyObject,IRubyObject,IRubyObject)" : 1 , "pack_sockaddr_in(ThreadContext,IRubyObject,int,String)" : 6 , "pack_sockaddr_in(ThreadContext,IRubyObject,int,String)::ByteList" : 1 , "pack_sockaddr_un(ThreadContext,IRubyObject,IRubyObject)" : 1 , "sockerr(Ruby,String)" : 20 , "unpack_sockaddr_in(ThreadContext,IRubyObject,IRubyObject)" : 4}},{ "className" : "org::jruby::RubyComplex" , "selectors" : { "RubyComplex(Ruby,IRubyObject,IRubyObject,IRubyObject)" : 10 , "canonicalizeInternal(ThreadContext,IRubyObject,IRubyObject,IRubyObject)" : 5 , "convert(ThreadContext,IRubyObject,IRubyObject)" : 1 , "convert(ThreadContext,IRubyObject,IRubyObject,IRubyObject)" : 2 , "convertCommon(ThreadContext,IRubyObject,IRubyObject,IRubyObject)" : 2 , "createComplexClass(Ruby)" : 1 , "exact_p(ThreadContext)" : 1 , "f_complex_polar(ThreadContext,IRubyObject,IRubyObject,IRubyObject)" : 3 , "getImage()" : 4 , "getReal()" : 2 , "lastCharDigit(RubyString)" : 2 , "m_cos(ThreadContext,IRubyObject)" : 1 , "m_sin(ThreadContext,IRubyObject)" : 1 , "m_sqrt(ThreadContext,IRubyObject)" : 1 , "newComplex(ThreadContext,IRubyObject,IRubyObject,IRubyObject)" : 17 , "newComplexBang(ThreadContext,IRubyObject,IRubyObject)" : 2 , "newComplexBang(ThreadContext,IRubyObject,IRubyObject,IRubyObject)" : 3 , "newComplexCanonicalize(ThreadContext,IRubyObject)" : 3 , "newComplexCanonicalize(ThreadContext,IRubyObject,IRubyObject)" : 2 , "newComplexConvert(ThreadContext,IRubyObject,IRubyObject)" : 2 , "newComplexPolar(ThreadContext,IRubyObject,IRubyObject)" : 1 , "newComplexRaw(Ruby,IRubyObject)" : 3 , "newComplexRaw(Ruby,IRubyObject,RubyObject)" : 1 , "newInstance(ThreadContext,IRubyObject,IRubyObject)" : 3 , "newInstance(ThreadContext,IRubyObject,IRubyObject,IRubyObject)" : 3 , "newInstanceBang(ThreadContext,IRubyObject,IRubyObject)" : 1 , "newInstanceBang(ThreadContext,IRubyObject,IRubyObject,IRubyObject)" : 1 , "polar(ThreadContext,IRubyObject,IRubyObject,IRubyObject)" : 2 , "realCheck(ThreadContext,IRubyObject)" : 5 , "setCanonicalization(boolean)" : 1 , "signbit(ThreadContext,IRubyObject)" : 1 , "str_to_c_internal(ThreadContext,IRubyObject)" : 2 , "str_to_c_internal(ThreadContext,IRubyObject)::ByteList" : 4 , "str_to_c_strict(ThreadContext,IRubyObject)" : 2 , "to_r(ThreadContext)" : 1 , "tpositive_p(ThreadContext,IRubyObject)" : 2}},{ "className" : "java_integration::fixtures::ValueReceivingInterface" , "selectors" : { "receiveByte(byte)" : 1 , "receiveByteObj(Byte)" : 1 , "receiveChar(char)" : 1 , "receiveCharObj(Character)" : 1 , "receiveDouble(double)" : 1 , "receiveDoubleObj(Double)" : 1 , "receiveFalse(boolean)" : 1 , "receiveFalseObj(Boolean)" : 1 , "receiveFloat(float)" : 1 , "receiveFloatObj(Float)" : 1 , "receiveInt(int)" : 1 , "receiveIntObj(Integer)" : 1 , "receiveLong(long)" : 1 , "receiveLongAndDouble(long,double)" : 1 , "receiveLongObj(Long)" : 1 , "receiveNull(Object)" : 1 , "receiveObject(Object)" : 1 , "receiveShort(short)" : 1 , "receiveShortObj(Short)" : 1 , "receiveString(String)" : 1 , "receiveTrue(boolean)" : 1 , "receiveTrueObj(Boolean)" : 1}},{ "className" : "org::jruby::compiler::impl::ClassBodyCompiler" , "selectors" : { "ClassBodyCompiler(StandardASMCompiler,String,ASTInspector,StaticScope)" : 2}},{ "className" : "org::jruby::RubyThread" , "selectors" : { "RubyThread(Ruby,RubyClass)" : 3 , "abortOnException(Ruby)" : 1 , "addToCorrectThreadGroup(ThreadContext)" : 2 , "adopt(IRubyObject,Thread)" : 1 , "adoptThread(IRubyObject,Thread,Block)" : 1 , "afterBlockingCall()" : 3 , "alive_p()" : 2 , "beDead()" : 1 , "beforeBlockingCall()" : 3 , "checkMail(ThreadContext)" : 4 , "cleanTerminate(IRubyObject)" : 1 , "createThreadClass(Ruby)" : 1 , "dispose()" : 1 , "enterSleep()" : 2 , "exceptionRaised(RaiseException)" : 2 , "exitSleep()" : 2 , "getContext()" : 1 , "getErrorInfo()" : 1 , "getSelector(SelectableChannel)" : 1 , "getSymbolKey(IRubyObject)" : 3 , "getThreadLocals()" : 5 , "group()" : 3 , "initialize(ThreadContext,IRubyObject[],Block)" : 1 , "internalRaise(IRubyObject[])" : 1 , "interrupt()" : 1 , "isAlive()" : 2 , "isCurrent()" : 2 , "join(IRubyObject[])" : 1 , "kill()" : 3 , "newInstance(IRubyObject,IRubyObject[],Block)" : 1 , "pollThreadEvents()" : 8 , "pollThreadEvents(ThreadContext)" : 2 , "prepareRaiseException(Ruby,IRubyObject[],Block)" : 2 , "raise(IRubyObject[],Block)" : 4 , "receiveMail(Event)" : 2 , "receivedAnException(ThreadContext,IRubyObject)" : 1 , "select(Channel,RubyIO,int)" : 2 , "select(RubyIO,int)" : 5 , "setContext(ThreadContext)" : 1 , "setErrorInfo(IRubyObject)" : 1 , "setThreadGroup(RubyThreadGroup)" : 2 , "sleep(long)" : 1 , "startThread(IRubyObject,IRubyObject[],boolean,Block)" : 2 , "throwThreadKill()" : 2 , "wait_timeout(IRubyObject,Double)" : 3 , "wakeup()" : 1}},{ "className" : "org::jruby::javasupport::JavaClass::ConstructorInvokerInstaller" , "selectors" : { "ConstructorInvokerInstaller(String)" : 1 , "addConstructor(Constructor,Class<?>)" : 1 , "install(RubyModule)" : 1}},{ "className" : "org::jruby::runtime::callsite::MulCallSite" , "selectors" : { "MulCallSite()" : 1}},{ "className" : "org::jruby::internal::runtime::methods::TraceableJittedMethod" , "selectors" : { "TraceableJittedMethod(RubyModule,StaticScope,Script,CallConfiguration,Visibility,Arity,ISourcePosition,DefaultMethod)" : 2 , "getArity()" : 1 , "post(Ruby,ThreadContext,String)" : 10 , "pre(ThreadContext,IRubyObject,String,Block,int)" : 10 , "traceCall(ThreadContext,Ruby,String)" : 1 , "traceReturn(ThreadContext,Ruby,String)" : 1}},{ "className" : "org::jruby::ast::DefsNode" , "selectors" : { "DefsNode(ISourcePosition,Node,ArgumentNode,ArgsNode,StaticScope,Node)" : 2 , "getName()" : 2 , "getReceiverNode()" : 1}},{ "className" : "org::jruby::compiler::impl::BaseBodyCompiler" , "selectors" : { "<Initializer>()::Label" : 2 , "BaseBodyCompiler(StandardASMCompiler,String,ASTInspector,StaticScope)" : 2 , "assignConstantInModule(String)" : 1 , "backref()" : 3 , "beginChainedMethod()" : 4 , "buildObjectArray(String,Object[],ArrayCallback)" : 1 , "buildRubyArray(Object[],ArrayCallback,boolean)" : 2 , "buildRubyLiteralArray(Object[],ArrayCallback,boolean)" : 1 , "compileSequencedConditional(CompilerCallback,FastSwitchType,Map<CompilerCallback,int[]>,List<ArgumentsCallback>,List<CompilerCallback>,CompilerCallback)::Label" : 5 , "compileSequencedConditional(CompilerCallback,FastSwitchType,Map<CompilerCallback,int[]>,List<ArgumentsCallback>,List<CompilerCallback>,CompilerCallback)::TreeMap" : 1 , "createNewHashCommon(Object,ArrayCallback,int,String,String)" : 3 , "createNewLiteralHashCommon(Object,ArrayCallback,int,String,String)" : 1 , "createNewString(ArrayCallback,int)" : 1 , "createVariableCompiler()" : 1 , "defineClass(String,StaticScope,CompilerCallback,CompilerCallback,CompilerCallback,CompilerCallback,ASTInspector)::Label" : 4 , "defineModule(String,StaticScope,CompilerCallback,CompilerCallback,ASTInspector)::Label" : 4 , "endBody()" : 4 , "getActualArgsCount(StaticScope)" : 1 , "getClosureIndex()" : 8 , "getDynamicScopeIndex()" : 34 , "getExceptionIndex()" : 8 , "getFirstTempIndex()" : 9 , "getInvocationCompiler()" : 11 , "getNewEnding()::Label" : 1 , "getNewEnsureName()" : 2 , "getNewRescueName()" : 4 , "getNilIndex()" : 13 , "getPreviousExceptionIndex()" : 8 , "getRuntimeIndex()" : 21 , "getScriptCompiler()" : 30 , "getSignature()" : 1 , "getVariableCompiler()" : 57 , "getVarsArrayIndex()" : 15 , "hasBlock(BranchCallback,BranchCallback)::Label" : 2 , "ifNotNull(Object)" : 1 , "invokeIRubyObject(String,String)" : 8 , "invokeRuby(String,String)" : 15 , "invokeThreadContext(String,String)" : 35 , "invokeUtilityMethod(String,String)" : 143 , "isCaptured(int,BranchCallback,BranchCallback)::anonymous(BranchCallback)" : 2 , "isClassVarDefined(String,BranchCallback,BranchCallback)::Label" : 2 , "isConstantBranch(BranchCallback,String)::Label" : 4 , "isConstantDefined(String,BranchCallback,BranchCallback)::Label" : 2 , "isGlobalDefined(String,BranchCallback,BranchCallback)::Label" : 2 , "isInstanceOf(Class,BranchCallback,BranchCallback)" : 1 , "isInstanceOf(Class,BranchCallback,BranchCallback)::Label" : 2 , "isInstanceVariableDefined(String,BranchCallback,BranchCallback)::Label" : 2 , "isMethodBound(String,BranchCallback,BranchCallback)::Label" : 2 , "isNil(BranchCallback,BranchCallback)::Label" : 2 , "isNotProtected(Object,int)::Label" : 1 , "isNull(BranchCallback,BranchCallback)::Label" : 2 , "isPrivate(Object,int)::Label" : 1 , "isTrue()" : 5 , "issueLoopBreak()" : 3 , "issueLoopNext()" : 3 , "issueLoopRedo()" : 3 , "lineNumber(ISourcePosition)::Label" : 1 , "literalSwitch(int[],Object[],ArrayCallback,CompilerCallback)::Label" : 3 , "loadBlock()" : 8 , "loadException()" : 4 , "loadNil()" : 31 , "loadObject()" : 2 , "loadRuntime()" : 81 , "loadSelf()" : 51 , "loadThis()" : 21 , "loadThreadContext()" : 112 , "metaclass()" : 2 , "notIsModuleAndClassVarDefined(String,Object)::Label" : 2 , "nullToNil()::Label" : 1 , "outline(String)" : 4 , "performBooleanBranch(BranchCallback,BranchCallback)::Label" : 2 , "performBooleanLoop(BranchCallback,BranchCallback,boolean)" : 1 , "performBooleanLoop(BranchCallback,BranchCallback,boolean)::Label" : 9 , "performBooleanLoopLight(BranchCallback,BranchCallback,boolean)::Label" : 4 , "performBooleanLoopSafeInner(BranchCallback,BranchCallback,boolean)" : 1 , "performEnsureInner(BranchCallback,BranchCallback)" : 1 , "performEnsureInner(BranchCallback,BranchCallback)::Label" : 4 , "performLogicalAnd(BranchCallback)::Label" : 1 , "performLogicalOr(BranchCallback)::Label" : 1 , "performRescueLight(BranchCallback,BranchCallback,boolean)" : 1 , "performRescueLight(BranchCallback,BranchCallback,boolean)::Label" : 8 , "protect(BranchCallback,BranchCallback,Class)::Label" : 4 , "pushNull()" : 4 , "rescue(BranchCallback,Class,BranchCallback,Class)::Label" : 8 , "rethrowIfSystemExit()::Label" : 1 , "shouldUseBoxedArgs(StaticScope)" : 3 , "toJavaString()" : 1 , "traceClass()" : 2 , "traceEnd()" : 4 , "typeCheckBranch(Class,BranchCallback,BranchCallback)::Label" : 2 , "wrapJavaObject()" : 1}},{ "className" : "org::jruby::ast::WhenOneArgNode" , "selectors" : { "WhenOneArgNode(ISourcePosition,Node,Node,Node)" : 2 , "whenNoTest(ThreadContext,Ruby,IRubyObject,Block)" : 1 , "whenSlowTest(IRubyObject,ThreadContext,Ruby,IRubyObject,Block)" : 1}},{ "className" : "org::jruby::internal::runtime::methods::ReflectionMethodFactory" , "selectors" : { "ReflectionMethodFactory()" : 1 , "getCompiledMethod(RubyModule,String,Arity,Visibility,StaticScope,Object,CallConfiguration,ISourcePosition)" : 1}},{ "className" : "org::jruby::ast::executable::RuntimeCache" , "selectors" : { "cacheAndGet(ThreadContext,RubyClass,int,String)" : 1 , "createBlockBody(Object,ThreadContext,int,String)" : 1 , "createBlockBody19(Object,ThreadContext,int,String)" : 1 , "createCompiledBlockCallback(Object,Ruby,int,String)" : 1 , "getBigInteger(Ruby,int,String)" : 11 , "getBlockBody(Object,ThreadContext,int,String)" : 11 , "getBlockBody19(Object,ThreadContext,int,String)" : 11 , "getBlockCallback(Object,Ruby,int,String)" : 11 , "getCacheEntry(int)" : 9 , "getConstant(ThreadContext,String,int)" : 11 , "getConstantFrom(RubyModule,ThreadContext,String,int)" : 11 , "getDescriptorValue(String,int)" : 12 , "getFixnum(Ruby,int,int)" : 11 , "getFixnum(Ruby,int,long)" : 1 , "getMethod(ThreadContext,IRubyObject,int,String)" : 11 , "getRegexp(Ruby,int,String,int)" : 11 , "getScope(ThreadContext,String,int)" : 11 , "getString(Ruby,int)" : 11 , "getSymbol(Ruby,int,String)" : 11 , "getValue(ThreadContext,String,int)" : 1 , "getValueFrom(RubyModule,ThreadContext,String,int)" : 1 , "getVariable(Ruby,int,String,IRubyObject)" : 11 , "initBigIntegers(int)" : 1 , "initBlockBodies(int)" : 1 , "initBlockCallbacks(int)" : 1 , "initConstants(int)" : 1 , "initFixnums(int)" : 1 , "initFromDescriptor(String)" : 1 , "initMethodCache(int)" : 1 , "initOthers(String)" : 1 , "initRegexps(int)" : 1 , "initScopes(int)" : 1 , "initSymbols(int)" : 1 , "initVariableReaders(int)" : 1 , "initVariableWriters(int)" : 1 , "isCached(ThreadContext,IRubyObject,int)" : 1 , "isCachedFrom(RubyModule,ThreadContext,IRubyObject,int)" : 1 , "pollAndGetClass(ThreadContext,IRubyObject)" : 1 , "reCache(ThreadContext,String,int)" : 1 , "reCacheFrom(RubyModule,ThreadContext,String,int)" : 1 , "searchWithCache(RubyClass,int,String)" : 2 , "searchWithCache(RubyClass,int,String,String)" : 2 , "searchWithCache(RubyClass,int,String,String,String)" : 2 , "searchWithCache(RubyClass,int,String,String,String,String)" : 2 , "searchWithCache(RubyClass,int,String,String,String,String,String)" : 2 , "searchWithCache(RubyClass,int,String,String,String,String,String,String)" : 2 , "searchWithCache(RubyClass,int,String,String,String,String,String,String,String)" : 2 , "searchWithCache(RubyClass,int,String,String,String,String,String,String,String,String)" : 1 , "setVariable(Ruby,int,String,IRubyObject,IRubyObject)" : 11 , "warnAboutUninitializedIvar(Ruby,String)" : 1}},{ "className" : "org::jruby::exceptions::MainExitException" , "selectors" : { "MainExitException(int,String)" : 13 , "MainExitException(int,boolean)" : 2 , "getStatus()" : 2 , "isAborted()" : 2 , "isUsageError()" : 2 , "setUsageError(boolean)" : 4}},{ "className" : "org::jruby::RubyProcess" , "selectors" : { "createProcessModule(Ruby)" : 1 , "egid(Ruby)" : 5 , "egid_set(Ruby,IRubyObject)" : 5 , "euid(Ruby)" : 6 , "euid_set(Ruby,IRubyObject)" : 5 , "getpgid(Ruby,IRubyObject)" : 2 , "getpgrp(Ruby)" : 2 , "getpriority(Ruby,IRubyObject,IRubyObject)" : 2 , "getrlimit(Ruby,IRubyObject)" : 2 , "gid(Ruby)" : 5 , "gid_set(Ruby,IRubyObject)" : 4 , "kill(Ruby,IRubyObject[])" : 2 , "parseSignalString(Ruby,String)" : 3 , "pid(Ruby)" : 2 , "ppid(Ruby)" : 2 , "setpgid(Ruby,IRubyObject,IRubyObject)" : 2 , "setpgrp(Ruby)" : 2 , "setpriority(Ruby,IRubyObject,IRubyObject,IRubyObject)" : 2 , "setsid(Ruby)" : 2 , "times(Ruby)" : 2 , "times(ThreadContext,IRubyObject,Block)" : 1 , "uid(Ruby)" : 5 , "uid_set(Ruby,IRubyObject)" : 4 , "wait(Ruby,IRubyObject[])" : 2 , "waitall(Ruby)" : 2 , "waitpid(Ruby,IRubyObject[])" : 3 , "waitpid2(Ruby,IRubyObject[])" : 4}},{ "className" : "org::jruby::internal::runtime::methods::JavaMethod::JavaMethodThreeOrNBlock" , "selectors" : { "JavaMethodThreeOrNBlock(RubyModule,Visibility)" : 1 , "JavaMethodThreeOrNBlock(RubyModule,Visibility,CallConfiguration)" : 1 , "call(ThreadContext,IRubyObject,RubyModule,String,IRubyObject,IRubyObject,IRubyObject,Block)" : 2}},{ "className" : "org::jruby::javasupport::JavaCallable" , "selectors" : { "JavaCallable(Ruby,RubyClass,Class<?>[])" : 2 , "argument_types()" : 4 , "checkArity(int)" : 21 , "dumpArgTypes(Object[])" : 2 , "getArity()" : 3 , "getExceptionTypes()" : 1 , "getGenericExceptionTypes()" : 1 , "getGenericParameterTypes()" : 1 , "getModifiers()" : 1 , "getParameterAnnotations()" : 1 , "getParameterTypes()" : 17 , "handleInvocationTargetEx(InvocationTargetException,Member)" : 14 , "handleThrowable(Throwable,Member)" : 14 , "isVarArgs()" : 3 , "nameOnInspection()" : 1 , "registerRubyMethods(Ruby,RubyClass)" : 2 , "toGenericString()" : 1}},{ "className" : "org::jruby::embed::jsr223::JRubyBindings" , "selectors" : { "JRubyBindings(ScriptingContainer)" : 16 , "adjustKey(String)" : 1 , "checkKey(Object)" : 3 , "clear()" : 3 , "containsKey(Object)" : 3 , "containsValue(Object)" : 3 , "entrySet()" : 4 , "get(Object)" : 4 , "isEligibleKey(Object)" : 2 , "isEmpty()" : 3 , "isRubyVariable(String)" : 1 , "keySet()" : 1 , "put(String,Object)" : 35 , "putAll(Map)" : 3 , "remove(Object)" : 2 , "size()" : 7 , "values()" : 1}},{ "className" : "org::jruby::util::Pack" , "selectors" : { "decode(Ruby,ByteBuffer,int,RubyArray,Converter)" : 1 , "decodeDoubleBigEndian(ByteBuffer)" : 2 , "decodeDoubleLittleEndian(ByteBuffer)" : 2 , "decodeFloatBigEndian(ByteBuffer)" : 2 , "decodeFloatLittleEndian(ByteBuffer)" : 2 , "decodeIntBigEndian(ByteBuffer)" : 4 , "decodeIntLittleEndian(ByteBuffer)" : 4 , "decodeIntUnsignedBigEndian(ByteBuffer)" : 2 , "decodeIntUnsignedLittleEndian(ByteBuffer)" : 2 , "decodeLongBigEndian(ByteBuffer)" : 3 , "decodeLongLittleEndian(ByteBuffer)" : 3 , "decodeShortBigEndian(ByteBuffer)" : 1 , "decodeShortLittleEndian(ByteBuffer)" : 1 , "decodeShortUnsignedBigEndian(ByteBuffer)" : 2 , "decodeShortUnsignedLittleEndian(ByteBuffer)" : 2 , "num2quad(IRubyObject)" : 6 , "obj2dbl(Ruby,IRubyObject)" : 4 , "obj2flt(Ruby,IRubyObject)" : 4 , "pack(???)" : 3 , "pack(Ruby,RubyArray,ByteList)::ByteList" : 2 , "safeGet(ByteBuffer)" : 33 , "unpack(???)" : 4 , "unpack(Ruby,ByteList,ByteList)::ByteList" : 10 , "utf8Decode(ByteBuffer)" : 1 , "utf8Decode(Ruby,byte[],int,int)" : 2}},{ "className" : "org::jruby::ext::socket::RubyBasicSocket" , "selectors" : { "RubyBasicSocket(Ruby,RubyClass)" : 4 , "asBoolean(IRubyObject)" : 8 , "asDatagramSocket()" : 10 , "asNumber(IRubyObject)" : 9 , "asServerSocket()" : 6 , "asSocket()" : 19 , "createBasicSocket(Ruby)" : 1 , "doNotReverseLookup(ThreadContext)" : 1 , "do_not_reverse_lookup19(ThreadContext)" : 1 , "getBroadcast(Ruby)" : 1 , "getChannelSoType(Channel)" : 1 , "getKeepAlive(Ruby)" : 1 , "getLinger(Ruby)" : 1 , "getLocalSocket()" : 3 , "getOOBInline(Ruby)" : 1 , "getRcvBuf(Ruby)" : 1 , "getRemoteSocket()" : 3 , "getReuseAddr(Ruby)" : 1 , "getSndBuf(Ruby)" : 1 , "getSoType(Ruby)" : 1 , "getSoTypeDefault()" : 1 , "getTimeout(Ruby)" : 1 , "getpeername(ThreadContext)" : 1 , "getsockname(ThreadContext)" : 1 , "getsockopt(ThreadContext,IRubyObject,IRubyObject)" : 1 , "initSocket(Ruby,ChannelDescriptor)" : 7 , "number(Ruby,int)" : 8 , "recv(ThreadContext,IRubyObject[])" : 1 , "setBroadcast(IRubyObject)" : 1 , "setKeepAlive(IRubyObject)" : 1 , "setLinger(IRubyObject)" : 1 , "setOOBInline(IRubyObject)" : 1 , "setRcvBuf(IRubyObject)" : 1 , "setReuseAddr(IRubyObject)" : 1 , "setSndBuf(IRubyObject)" : 1 , "setTcpNoDelay(IRubyObject)" : 2 , "setTimeout(IRubyObject)" : 1 , "setsockopt(ThreadContext,IRubyObject,IRubyObject,IRubyObject)" : 1 , "shutdownInternal(ThreadContext,int)" : 5 , "stringAsNumber(IRubyObject)" : 2 , "trueFalse(Ruby,boolean)" : 5}},{ "className" : "org::jruby::javasupport::JavaClass::InstanceFieldGetterInstaller" , "selectors" : { "InstanceFieldGetterInstaller(String,Field)" : 1}},{ "className" : "org::jruby::compiler::JITCompiler" , "selectors" : { "JITCompiler(Ruby)" : 1 , "calculateFilename(ArgsNode,Node)" : 1 , "getHashForBytes(byte[])" : 2 , "getHashForString(String)" : 2 , "jitIsEnabled(DefaultMethod,ThreadContext,String)" : 2 , "jitThresholdReached(DefaultMethod,RubyInstanceConfig,ThreadContext,String)" : 1 , "log(DefaultMethod,String,String,String[])" : 3 , "saveToCodeCache(Ruby,byte[],String,File)" : 2 , "tryJIT(DefaultMethod,ThreadContext,String)" : 1}},{ "className" : "org::jruby::javasupport::proxy::JavaProxyClass" , "selectors" : { "JavaProxyClass(Class)" : 1 , "constructors()" : 1 , "createJavaProxyClassClass(Ruby,RubyModule)" : 1 , "createJavaProxyModule(Ruby)" : 1 , "getConstructor(Class[])" : 1 , "getConstructors()" : 1 , "getInterfaces()" : 1 , "getMethod(String,Class[])" : 7 , "getMethods()" : 1 , "getProxyClass(Ruby,Class,Class[])" : 2 , "getProxyClass(Ruby,Class,Class[],Set)" : 2 , "getSuperclass()" : 2 , "getThreadLocalRuntime()" : 2 , "get_with_class(IRubyObject,IRubyObject)" : 1 , "initMethod(String,String,boolean)" : 1 , "nameOnInspection()" : 2 , "parse(ClassLoader,String)" : 1}},{ "className" : "org::jruby::ext::socket::RubyTCPServer" , "selectors" : { "RubyTCPServer(Ruby,RubyClass)" : 1 , "accept(ThreadContext)" : 1 , "accept_nonblock(ThreadContext)" : 1 , "createTCPServer(Ruby)" : 1 , "listen(ThreadContext,IRubyObject)" : 1 , "open(ThreadContext,IRubyObject,IRubyObject[],Block)" : 1}},{ "className" : "java::util::zip::Inflater" , "selectors" : { "Inflater()" : 11 , "Inflater(boolean)" : 6 , "end()" : 7 , "finished()" : 7 , "getAdler()" : 1 , "getBytesRead()" : 1 , "getBytesWritten()" : 2 , "getRemaining()" : 5 , "getTotalIn()" : 3 , "getTotalOut()" : 1 , "inflate(byte[])" : 7 , "inflate(byte[],int,int)" : 2 , "java" : 6 , "needsDictionary()" : 2 , "needsInput()" : 2 , "reset()" : 5 , "setDictionary(byte[])" : 1 , "setDictionary(byte[],int,int)" : 1 , "setInput(byte[])" : 5 , "setInput(byte[],int,int)" : 3}},{ "className" : "org::jruby::internal::runtime::methods::JavaMethod::JavaMethodThreeOrN" , "selectors" : { "JavaMethodThreeOrN(RubyModule,Visibility)" : 1 , "JavaMethodThreeOrN(RubyModule,Visibility,CallConfiguration)" : 1 , "call(ThreadContext,IRubyObject,RubyModule,String,IRubyObject,IRubyObject,IRubyObject)" : 2}},{ "className" : "org::jruby::runtime::CompiledBlock" , "selectors" : { "CompiledBlock(Arity,StaticScope,CompiledBlockCallback,boolean,int)" : 3 , "blockArgWarning(Ruby,int)" : 1 , "defaultArgLogic(Ruby,IRubyObject)" : 1 , "defaultArgsLogic(Ruby,IRubyObject)" : 1 , "handleNextJump(ThreadContext,NextJump,Type)" : 2 , "newCompiledBlock(Arity,StaticScope,CompiledBlockCallback,boolean,int)" : 1 , "newCompiledClosure(ThreadContext,IRubyObject,Arity,StaticScope,CompiledBlockCallback,boolean,int)" : 1 , "newCompiledClosure(ThreadContext,IRubyObject,BlockBody)" : 1 , "post(ThreadContext,Binding,Visibility,Frame)" : 2 , "pre(ThreadContext,RubyModule,Binding)" : 2 , "prepareSelf(Binding)" : 2 , "setupBlockArg(Ruby,IRubyObject,IRubyObject)" : 2 , "setupBlockArgs(ThreadContext,IRubyObject,IRubyObject)" : 1 , "warnMultiReturnNil(Ruby)" : 1 , "yield(ThreadContext,IRubyObject,Binding,Type)" : 2 , "yield(ThreadContext,IRubyObject,Binding,Type,Block)" : 1 , "yield(ThreadContext,IRubyObject,IRubyObject,RubyModule,boolean,Binding,Type)" : 2 , "yield(ThreadContext,IRubyObject,IRubyObject,RubyModule,boolean,Binding,Type,Block)" : 1}},{ "className" : "org::jruby::RubyEnumerable" , "selectors" : { "all_pCommon(ThreadContext,IRubyObject,Block)" : 2 , "any_pCommon(ThreadContext,IRubyObject,Block)" : 2 , "callEach(Ruby,ThreadContext,IRubyObject,BlockCallback)" : 57 , "callEach(Ruby,ThreadContext,IRubyObject,IRubyObject[],BlockCallback)" : 2 , "checkArgs(Ruby,IRubyObject[])" : 50 , "checkContext(ThreadContext,ThreadContext,String)" : 22 , "collectCommon19(ThreadContext,IRubyObject,Block,String)" : 2 , "createEnumerableModule(Ruby)" : 1 , "cycle(ThreadContext,IRubyObject,Block)" : 1 , "cycleCommon(ThreadContext,IRubyObject,long,Block)" : 2 , "detectCommon(ThreadContext,IRubyObject,Block)" : 3 , "detectCommon(ThreadContext,IRubyObject,IRubyObject,Block)" : 3 , "each_with_indexCommon(ThreadContext,IRubyObject,Block)" : 2 , "each_with_indexCommon19(ThreadContext,IRubyObject,Block,IRubyObject[])" : 1 , "find_indexCommon(ThreadContext,IRubyObject,Block)" : 2 , "find_indexCommon(ThreadContext,IRubyObject,IRubyObject)" : 2 , "flatMapCommon19(ThreadContext,IRubyObject,Block,String)" : 2 , "inject(ThreadContext,IRubyObject,IRubyObject,IRubyObject,Block)" : 1 , "injectCommon(ThreadContext,IRubyObject,IRubyObject,Block)" : 2 , "join(ThreadContext,IRubyObject,IRubyObject)" : 1 , "partition(ThreadContext,IRubyObject,Block)" : 1 , "partitionCommon(ThreadContext,IRubyObject,Block)" : 1 , "rejectCommon(ThreadContext,IRubyObject,Block)" : 1 , "reverse_eachInternal(ThreadContext,IRubyObject,IRubyObject,Block)" : 2 , "selectCommon(ThreadContext,IRubyObject,Block)" : 2 , "sort_byCommon(ThreadContext,IRubyObject,Block)" : 1 , "to_a(ThreadContext,IRubyObject)" : 2 , "to_a(ThreadContext,IRubyObject,IRubyObject[])" : 1 , "to_a19(ThreadContext,IRubyObject)" : 1 , "zipCommon(ThreadContext,IRubyObject,IRubyObject[],Block,String)" : 2 , "zipCommonConvert(Ruby,IRubyObject[],String)" : 2}},{ "className" : "org::jruby::ast::FCallSpecialArgBlockPassNode" , "selectors" : { "FCallSpecialArgBlockPassNode(ISourcePosition,String,Node,BlockPassNode)" : 1}},{ "className" : "org::jruby::util::Dir" , "selectors" : { "<Initializer>()::anonymous(GlobFunc)" : 1 , "BASE(byte[])" : 4 , "extract_elem(byte[],int,int)" : 1 , "extract_path(byte[],int,int)" : 2 , "files(File)" : 1 , "fnmatch(byte[],int,int,byte[],int,int,int)" : 6 , "fnmatch_helper(byte[],int,int,byte[],int,int,int)" : 2 , "getBytesInUTF8(String)" : 5 , "glob_helper(String,byte[],int,int,int,int,GlobFunc,GlobArgs)" : 5 , "glob_helper(String,byte[],int,int,int,int,GlobFunc,GlobArgs)::ByteList" : 3 , "glob_helper(String,byte[],int,int,int,int,GlobFunc,GlobArgs)::JavaSecuredFile" : 6 , "has_magic(byte[],int,int,int)" : 2 , "isDoubleStarAndSlash(byte[],int)" : 2 , "isJarFilePath(byte[],int,int)" : 2 , "isdirsep(byte)" : 17 , "newStringFromUTF8(byte[])" : 2 , "newStringFromUTF8(byte[],int,int)" : 10 , "nextSlashIndex(byte[],int,int)" : 3 , "push_braces(String,List,GlobPattern)::ByteList" : 1 , "push_glob(???)" : 4 , "range(byte[],int,int,char,int)" : 1 , "rb_path_next(byte[],int,int)" : 2 , "remove_backslashes(byte[],int,int)" : 2 , "strchr(byte[],int,int,byte)" : 2}},{ "className" : "org::jruby::RubyZlib::RubyGzipFile" , "selectors" : { "RubyGzipFile(Ruby,RubyClass)" : 3 , "RubyGzipFile(Ruby,RubyClass)::DateTime" : 1 , "checkLevel(Ruby,int)" : 1 , "close()" : 1 , "isClosed()" : 1 , "newCRCError(Ruby,String)" : 1 , "newGzipFileError(Ruby,String)" : 12 , "newGzipFileError(Ruby,String,String)" : 4 , "newLengthError(Ruby,String)" : 1 , "newNoFooter(Ruby,String)" : 1 , "wrapBlock(ThreadContext,RubyGzipFile,Block)" : 3}},{ "className" : "org::jruby::ext::ffi::jffi::FFIUtil" , "selectors" : { "buildTypeMap()::EnumMap" : 1 , "getFFIType(???)" : 12 , "getString(Ruby,long)" : 7 , "getZeroTerminatedByteArray(long)" : 3 , "getZeroTerminatedByteArray(long,int)" : 2 , "newArray(???)" : 1 , "newStruct(???)" : 2 , "putZeroTerminatedByteArray(long,byte[],int,int)" : 2 , "resolveType(ThreadContext,IRubyObject)" : 2}},{ "className" : "org::jruby::runtime::Interpreted19Block" , "selectors" : { "Interpreted19Block(IterNode)" : 1 , "evalBlockBody(ThreadContext,IRubyObject)" : 2 , "handleNextJump(ThreadContext,NextJump,Type)" : 2 , "newInterpretedClosure(ThreadContext,BlockBody,IRubyObject)" : 2 , "post(ThreadContext,Binding,Visibility,Frame)" : 2 , "pre(ThreadContext,RubyModule,Binding)" : 2 , "prepareSelf(Binding)" : 2 , "setupBlockArg(ThreadContext,IRubyObject,IRubyObject,Block,Type)" : 1 , "setupBlockArgs(ThreadContext,IRubyObject,IRubyObject,Block,Type,boolean)" : 1 , "yield(ThreadContext,IRubyObject,Binding,Type)" : 2 , "yield(ThreadContext,IRubyObject,IRubyObject,RubyModule,boolean,Binding,Type)" : 2 , "yield(ThreadContext,IRubyObject,IRubyObject,RubyModule,boolean,Binding,Type,Block)" : 3}},{ "className" : "org::jruby::RubyBignum" , "selectors" : { "RubyBignum(Ruby,BigInteger)" : 11 , "addBignum(BigInteger)" : 1 , "addFixnum(long)" : 2 , "addFloat(RubyFloat)" : 1 , "addOther(ThreadContext,IRubyObject)" : 1 , "big2dbl(RubyBignum)" : 16 , "big2long(RubyBignum)" : 4 , "bignorm(Ruby,BigInteger)" : 24 , "checkShiftDown(RubyBignum)" : 2 , "compareTo(IRubyObject)" : 1 , "convertToDouble(BigInteger)" : 1 , "convertToInteger(ThreadContext,IRubyObject)" : 3 , "createBignumClass(Ruby)" : 1 , "divmod(ThreadContext,IRubyObject)" : 2 , "fix2big(RubyFixnum)" : 14 , "getBigIntegerValue()" : 1 , "getDoubleValue()" : 3 , "getLongValue()" : 1 , "getValue()" : 25 , "long2big(long)" : 2 , "marshalTo(RubyBignum,MarshalStream)" : 1 , "newBignum(Ruby,BigInteger)" : 16 , "newBignum(Ruby,double)" : 1 , "newBignum(Ruby,long)" : 22 , "num2fix(IRubyObject)" : 3 , "op_and(ThreadContext,IRubyObject)" : 2 , "op_divide(ThreadContext,IRubyObject,boolean)" : 2 , "op_lshift(IRubyObject)" : 2 , "op_minus(ThreadContext,IRubyObject)" : 2 , "op_minus(ThreadContext,long)" : 1 , "op_mod(ThreadContext,IRubyObject)" : 1 , "op_mul(ThreadContext,IRubyObject)" : 5 , "op_mul(ThreadContext,long)" : 1 , "op_or(ThreadContext,IRubyObject)" : 2 , "op_plus(ThreadContext,IRubyObject)" : 3 , "op_plus(ThreadContext,long)" : 1 , "op_pow(ThreadContext,IRubyObject)" : 4 , "op_rshift(IRubyObject)" : 1 , "op_xor(ThreadContext,IRubyObject)" : 2 , "quo(ThreadContext,IRubyObject)" : 1 , "remainder(ThreadContext,IRubyObject)" : 1 , "subtractBignum(BigInteger)" : 1 , "subtractFixnum(long)" : 2 , "subtractFloat(RubyFloat)" : 1 , "subtractOther(ThreadContext,IRubyObject)" : 1 , "to_s()" : 1 , "to_s(IRubyObject)" : 1 , "unmarshalFrom(UnmarshalStream)" : 1}},{ "className" : "org::jruby::RubyTime" , "selectors" : { "RubyTime(???)" : 5 , "RubyTime(Ruby,RubyClass)" : 5 , "cmp(RubyTime)" : 6 , "createTime(IRubyObject,IRubyObject[],boolean)" : 2 , "createTimeClass(Ruby)" : 1 , "getJavaDate()" : 4 , "getTimeInMillis()" : 13 , "getUSec()" : 12 , "gmt()" : 1 , "hour()" : 1 , "isdst()" : 1 , "mday()" : 1 , "mdump(IRubyObject[])" : 1 , "mdump(IRubyObject[])::ByteList" : 1 , "microseconds()" : 1 , "min()" : 1 , "month()" : 1 , "newInstance(ThreadContext,IRubyObject)" : 1 , "newTime(???)" : 1 , "newTime(Ruby,long)" : 1 , "newTime(Ruby,long)::DateTime" : 1 , "opMinus(RubyTime)" : 1 , "op_minus(IRubyObject)::DateTime" : 1 , "op_plus(IRubyObject)::DateTime" : 1 , "s_mload(IRubyObject,RubyTime,IRubyObject)" : 1 , "sec()" : 1 , "setDateTime(???)" : 3 , "setUSec(long)" : 10 , "to_f()" : 1 , "to_i()" : 3 , "usec()" : 2 , "wday()" : 1 , "withZone(???)" : 2 , "yday()" : 1 , "year()" : 1 , "zone()" : 1}},{ "className" : "java::lang::Class" , "selectors" : { "asSubclass(Class<U>)" : 85 , "cast(???)" : 27 , "cast(Object)" : 263 , "desiredAssertionStatus()" : 15 , "equals(???)" : 1 , "forName(String)" : 1835 , "forName(String,boolean,ClassLoader)" : 212 , "getAnnotation(???)" : 4 , "getAnnotation(Class<A>)" : 144 , "getAnnotations()" : 34 , "getCanonicalName()" : 139 , "getClassLoader()" : 1935 , "getClassLoader(???)" : 1 , "getClasses()" : 6 , "getComponentType()" : 253 , "getConstructor(???)" : 6 , "getConstructor(Class<?>[])" : 408 , "getConstructors()" : 73 , "getDeclaredAnnotations()" : 6 , "getDeclaredClasses()" : 10 , "getDeclaredConstructor(Class<?>[])" : 64 , "getDeclaredConstructors()" : 27 , "getDeclaredConstructors(???)" : 3 , "getDeclaredField(String)" : 172 , "getDeclaredFields()" : 107 , "getDeclaredFields(???)" : 1 , "getDeclaredMethod(???)" : 1 , "getDeclaredMethod(String,Class<?>[])" : 378 , "getDeclaredMethods()" : 146 , "getDeclaredMethods(???)" : 2 , "getDeclaringClass()" : 17 , "getEnclosingClass()" : 8 , "getEnclosingConstructor()" : 2 , "getEnclosingMethod()" : 2 , "getEnumConstants()" : 14 , "getField(String)" : 205 , "getFields()" : 54 , "getGenericInterfaces()" : 9 , "getGenericSuperclass()" : 12 , "getInterfaceRealizations(???)" : 1 , "getInterfaces()" : 214 , "getMethod(???)" : 1 , "getMethod(String,Class<?>[])" : 1647 , "getMethods()" : 308 , "getMethods(???)" : 3 , "getModifiers()" : 125 , "getModifiers(???)" : 3 , "getName()" : 14241 , "getName(???)" : 57 , "getPackage()" : 179 , "getProtectionDomain()" : 76 , "getResource(???)" : 1 , "getResource(String)" : 1217 , "getResourceAsStream(String)" : 513 , "getSigners()" : 2 , "getSimpleName()" : 435 , "getSimpleName(???)" : 1 , "getSuperclass()" : 356 , "getTypeParameters()" : 10 , "isAnnotation()" : 6 , "isAnnotationPresent(Class<? extends Annotation>)" : 42 , "isAnonymousClass()" : 7 , "isArray()" : 376 , "isAssignableFrom(???)" : 12 , "isAssignableFrom(Class<?>)" : 2251 , "isEnum()" : 42 , "isInstance(???)" : 5 , "isInstance(Object)" : 988 , "isInterface()" : 180 , "isLocalClass()" : 2 , "isMemberClass()" : 5 , "isPrimitive()" : 246 , "isSynthetic()" : 1 , "newInstance()" : 1615 , "newInstance(???)" : 3 , "toString()" : 200 , "toString(???)" : 5}},{ "className" : "org::jruby::javasupport::util::RuntimeHelpers" , "selectors" : { "aValueSplat(IRubyObject)" : 1 , "aValueSplat19(IRubyObject)" : 1 , "addInstanceMethod(RubyModule,String,DynamicMethod,Visibility,ThreadContext,Ruby)" : 3 , "addModuleMethod(RubyModule,String,DynamicMethod,ThreadContext,RubySymbol)" : 1 , "appendToObjectArray(IRubyObject[],IRubyObject)" : 1 , "arrayValue(IRubyObject)" : 2 , "arrayValue(ThreadContext,Ruby,IRubyObject)" : 2 , "aryToAry(IRubyObject)" : 1 , "breakJump(ThreadContext,IRubyObject)" : 1 , "breakJumpInWhile(BreakJump,ThreadContext)" : 2 , "callMethodMissing(ThreadContext,IRubyObject,Visibility,String,CallType,Block)" : 9 , "callMethodMissing(ThreadContext,IRubyObject,Visibility,String,CallType,IRubyObject,Block)" : 7 , "callMethodMissing(ThreadContext,IRubyObject,Visibility,String,CallType,IRubyObject,IRubyObject,Block)" : 7 , "callMethodMissing(ThreadContext,IRubyObject,Visibility,String,CallType,IRubyObject,IRubyObject,IRubyObject,Block)" : 7 , "callMethodMissing(ThreadContext,IRubyObject,Visibility,String,CallType,IRubyObject[],Block)" : 7 , "callNormalMethodHook(RubyModule,ThreadContext,RubySymbol)" : 1 , "callSingletonMethodHook(IRubyObject,ThreadContext,RubySymbol)" : 2 , "checkArgumentCount(ThreadContext,int,int,int)" : 2 , "checkIsModule(IRubyObject)" : 1 , "checkJavaException(Throwable,IRubyObject,ThreadContext)" : 7 , "checkSuperDisabledOrOutOfMethod(ThreadContext)" : 5 , "coerceProc(IRubyObject,Ruby)" : 1 , "constructNormalMethod(MethodFactory,String,String,RubyModule,ISourcePosition,int,StaticScope,Visibility,Object,CallConfiguration)" : 1 , "constructSingletonMethod(MethodFactory,String,RubyClass,ISourcePosition,int,StaticScope,Object,CallConfiguration)" : 1 , "creatScopeForClass(ThreadContext,String[],int,int,int)" : 2 , "createBlockCallback(Ruby,Object,String)" : 3 , "createBlockCallback19(Ruby,Object,String)" : 2 , "createBlockCallback19Offline(String,String)" : 1 , "createBlockCallbackOffline(String,String)" : 1 , "createCompiledBlockBody(ThreadContext,Object,String,int,String[],boolean,int,boolean)" : 1 , "createCompiledBlockBody19(ThreadContext,Object,String,int,String[],boolean,int,boolean)" : 1 , "createSubarray(RubyArray,int)" : 1 , "defOffline(String,String,String,Arity,StaticScope,CallConfiguration,String,int)" : 1 , "defineAlias(ThreadContext,Object,Object)" : 1 , "ensureRubyArray(Ruby,IRubyObject)" : 2 , "fillNil(IRubyObject[],Ruby)" : 2 , "fillNil(IRubyObject[],int,int,Ruby)" : 17 , "findImplementerIfNecessary(RubyModule,RubyModule)" : 6 , "getBackref(Ruby,ThreadContext)" : 1 , "getBlock(Ruby,ThreadContext,IRubyObject,Node,Block)" : 12 , "getBlock(ThreadContext,IRubyObject,Node)" : 12 , "getBlockFromBlockPassBody(IRubyObject,Block)" : 1 , "getBlockFromBlockPassBody(Ruby,IRubyObject,Block)" : 2 , "getBlockFromProc(Block,IRubyObject)" : 1 , "getInstanceVariable(IRubyObject,Ruby,String)" : 2 , "getLastLine(Ruby,ThreadContext)" : 1 , "interpretAliasUndefName(Node,Ruby,ThreadContext,IRubyObject,Block)" : 3 , "invoke(ThreadContext,IRubyObject,String)" : 34 , "invoke(ThreadContext,IRubyObject,String,Block)" : 4 , "invoke(ThreadContext,IRubyObject,String,IRubyObject)" : 19 , "invoke(ThreadContext,IRubyObject,String,IRubyObject,Block)" : 3 , "invoke(ThreadContext,IRubyObject,String,IRubyObject,CallType,Block)" : 1 , "invoke(ThreadContext,IRubyObject,String,IRubyObject,IRubyObject)" : 10 , "invoke(ThreadContext,IRubyObject,String,IRubyObject,IRubyObject,IRubyObject)" : 1 , "invoke(ThreadContext,IRubyObject,String,IRubyObject[])" : 12 , "invoke(ThreadContext,IRubyObject,String,IRubyObject[],Block)" : 14 , "invoke(ThreadContext,IRubyObject,String,IRubyObject[],CallType,Block)" : 4 , "invokeAs(ThreadContext,RubyClass,IRubyObject,String,IRubyObject,Block)" : 2 , "invokeAs(ThreadContext,RubyClass,IRubyObject,String,IRubyObject[],Block)" : 3 , "invokeChecked(ThreadContext,IRubyObject,String)" : 1 , "invokeEqqForCaseWhen(CallSite,ThreadContext,IRubyObject,IRubyObject,IRubyObject)" : 2 , "invokeEqqForCaseWhen(CallSite,ThreadContext,IRubyObject,IRubyObject,IRubyObject,IRubyObject)" : 1 , "invokeSuper(ThreadContext,IRubyObject,Block)" : 2 , "invokeSuper(ThreadContext,IRubyObject,IRubyObject,Block)" : 4 , "invokeSuper(ThreadContext,IRubyObject,IRubyObject[],Block)" : 7 , "isExceptionHandled(IRubyObject,IRubyObject,ThreadContext)" : 2 , "isExceptionHandled(RubyException,IRubyObject,IRubyObject,IRubyObject,ThreadContext)" : 1 , "isExceptionHandled(RubyException,IRubyObject,IRubyObject,ThreadContext)" : 2 , "isExceptionHandled(RubyException,IRubyObject,ThreadContext)" : 6 , "isExceptionHandled(RubyException,IRubyObject[],ThreadContext)" : 2 , "isJavaExceptionHandled(Throwable,IRubyObject[],ThreadContext)" : 1 , "isModuleAndHasConstant(IRubyObject,String)" : 2 , "performNormalMethodChecks(RubyModule,Ruby,String)" : 1 , "performSingletonMethodChecks(Ruby,IRubyObject,String)" : 1 , "postLoad(ThreadContext)" : 1 , "preLoad(ThreadContext,String[])" : 1 , "prepareClassNamespace(ThreadContext,IRubyObject)" : 1 , "prepareMethodMissingArgs(IRubyObject[],ThreadContext,String)" : 2 , "processBlockArgument(Ruby,Block)" : 60 , "processGivenBlock(Block,Ruby)" : 1 , "rbEqual(ThreadContext,IRubyObject,IRubyObject)" : 2 , "selectInternalMM(Ruby,Visibility,CallType)" : 6 , "selectMethodMissing(RubyClass,Visibility,String,CallType)" : 1 , "selectMethodMissing(ThreadContext,IRubyObject,Visibility,String,CallType)" : 25 , "selectMethodMissing(ThreadContext,RubyClass,Visibility,String,CallType)" : 1 , "setBackref(Ruby,ThreadContext,IRubyObject)" : 1 , "setErrorInfo(Ruby,IRubyObject)" : 3 , "setInstanceVariable(IRubyObject,IRubyObject,String)" : 2 , "setLastLine(Ruby,ThreadContext,IRubyObject)" : 1 , "splatValue(IRubyObject)" : 9 , "splatValue19(IRubyObject)" : 2 , "warnAboutUninitializedIvar(Ruby,String)" : 1}},{ "className" : "org::jruby::runtime::assigner::Assigner" , "selectors" : { "assign(Ruby,ThreadContext,IRubyObject,Block)" : 1 , "assign(Ruby,ThreadContext,IRubyObject,IRubyObject,Block)" : 1 , "assign(Ruby,ThreadContext,IRubyObject,IRubyObject,IRubyObject,Block)" : 1 , "assign(Ruby,ThreadContext,IRubyObject,IRubyObject,IRubyObject,IRubyObject,Block)" : 1 , "assignArray(Ruby,ThreadContext,IRubyObject,IRubyObject,Block)" : 2 , "convertIfAlreadyArray(Ruby,IRubyObject)" : 1 , "convertToArray(Ruby,IRubyObject)" : 2 , "shiftedArray(IRubyObject[],int)" : 8}},{ "className" : "org::jruby::javasupport::util::ObjectProxyCache" , "selectors" : { "ObjectProxyCache(int,int,ReferenceType)" : 2 , "allocateProxy(Object,A)" : 1 , "getOrCreate(Object,A)" : 1 , "hash(Object)" : 3 , "nextId()" : 1 , "put(Object,T)" : 3 , "segmentFor(int)" : 3 , "size()" : 1 , "stats()" : 2}},{ "className" : "org::jruby::RubyBasicObject" , "selectors" : { "RubyBasicObject()" : 2 , "RubyBasicObject(Ruby,RubyClass)" : 2 , "RubyBasicObject(Ruby,RubyClass,boolean)" : 1 , "RubyBasicObject(Ruby,RubyClass,boolean,boolean)" : 1 , "RubyBasicObject(RubyClass)" : 1 , "addToObjectSpace(Ruby)" : 3 , "anyToString()" : 4 , "asString()" : 1 , "callMethod(String)" : 2 , "callMethod(String,IRubyObject[])" : 1 , "callMethod(ThreadContext,String)" : 30 , "callMethod(ThreadContext,String,IRubyObject)" : 75 , "callMethod(ThreadContext,String,IRubyObject[])" : 5 , "callMethod(ThreadContext,String,IRubyObject[],Block)" : 3 , "checkIntegerType(Ruby,IRubyObject,String)" : 2 , "checkStringType()" : 1 , "convertToFloat()" : 5 , "convertToInteger(String)" : 2 , "convertToString()" : 2 , "copySpecialInstanceVariables(IRubyObject)" : 1 , "createBasicObjectClass(Ruby,RubyClass)" : 1 , "dataGetStruct()" : 4 , "dataWrapStruct(Object)" : 3 , "dup()" : 1 , "ensureInstanceVariablesSettable()" : 6 , "eql(IRubyObject)" : 1 , "fastGetInstanceVariable(String)" : 4 , "fastGetInternalVariable(String)" : 8 , "fastSetInstanceVariable(String,IRubyObject)" : 3 , "fastSetInternalVariable(String,Object)" : 8 , "getFlag(int)" : 1 , "getInstanceVariable(String)" : 2 , "getInstanceVariableList()" : 2 , "getInstanceVariableNameList()" : 2 , "getInstanceVariables()" : 17 , "getInternalVariable(String)" : 2 , "getJavaClass()" : 2 , "getMetaClass()" : 228 , "getObjectId()" : 2 , "getRuntime()" : 1755 , "getSingletonClass()" : 54 , "getSingletonClassClone()" : 3 , "getType()" : 5 , "getVariableList()" : 14 , "getVariableTableForRead()" : 1 , "getVariableTableForWrite(int)" : 2 , "hasInstanceVariable(String)" : 4 , "hasInternalVariable(String)" : 2 , "hasVariables()" : 12 , "hashyInspect()" : 2 , "id()" : 2 , "infectBy(IRubyObject)" : 5 , "infectBy(RubyBasicObject)" : 47 , "infectBy(int)" : 19 , "initCopy(IRubyObject,IRubyObject)" : 2 , "initObjectId(VariableAccessor)" : 1 , "inspect()" : 2 , "inspectHashCode()" : 1 , "inspectObj(StringBuilder)" : 1 , "isBuiltin(String)" : 9 , "isFalse()" : 10 , "isFrozen()" : 21 , "isImmediate()" : 10 , "isNil()" : 9 , "isTaint()" : 53 , "isTrue()" : 24 , "isUntrusted()" : 7 , "makeMetaClass(RubyClass)" : 2 , "op_equal(ThreadContext,IRubyObject)" : 1 , "op_equal_19(ThreadContext,IRubyObject)" : 2 , "rbClone()" : 1 , "removeInternalVariable(String)" : 10 , "respondsTo(String)" : 8 , "setFlag(int,boolean)" : 3 , "setFrozen(boolean)" : 4 , "setInstanceVariable(String,IRubyObject)" : 4 , "setInternalVariable(String,Object)" : 9 , "setMetaClass(RubyClass)" : 21 , "setObjectId(int,long)" : 1 , "setTaint(boolean)" : 33 , "setUntrusted(boolean)" : 2 , "syncVariables(List<Variable<Object>>)" : 9 , "taint(Ruby)" : 5 , "testFrozen()" : 4 , "testFrozen(String)" : 8 , "toJava(Class)" : 8 , "variableTableContains(String)" : 5 , "variableTableFastContains(String)" : 3 , "variableTableFastFetch(String)" : 3 , "variableTableFastStore(String,Object)" : 3 , "variableTableFetch(String)" : 5 , "variableTableRemove(String)" : 4 , "variableTableStore(String,Object)" : 6 , "variableTableSync(List<Variable<Object>>)" : 2}},{ "className" : "org::jruby::ast::CallNoArgNode" , "selectors" : { "CallNoArgNode(ISourcePosition,Node,Node,String)" : 1 , "CallNoArgNode(ISourcePosition,Node,String)" : 2}},{ "className" : "org::jruby::compiler::ir::IR_Loop" , "selectors" : { "IR_Loop(IR_ExecutionScope)" : 1}},{ "className" : "org::jruby::compiler::BodyCompiler" , "selectors" : { "aliasGlobal(String,String)" : 1 , "appendToArray()" : 2 , "aryToAry()" : 1 , "asString()" : 1 , "assignClassVariable(String)" : 1 , "assignClassVariable(String,CompilerCallback)" : 1 , "assignConstantInCurrent(String)" : 2 , "assignConstantInModule(String)" : 2 , "assignConstantInObject(String)" : 2 , "assignGlobalVariable(String)" : 2 , "assignGlobalVariable(String,CompilerCallback)" : 2 , "assignInstanceVariable(String)" : 1 , "assignInstanceVariable(String,CompilerCallback)" : 1 , "attached()" : 1 , "backref()" : 1 , "callZSuper(CompilerCallback)" : 1 , "chainToMethod(String)" : 1 , "checkIsExceptionHandled(ArgumentsCallback)" : 1 , "clearErrorInfo()" : 2 , "compileSequencedConditional(CompilerCallback,FastSwitchType,Map<CompilerCallback,int[]>,List<ArgumentsCallback>,List<CompilerCallback>,CompilerCallback)" : 1 , "concatArrays()" : 2 , "consumeCurrentValue()" : 126 , "convertToJavaArray()" : 4 , "createEmptyArray()" : 1 , "createEmptyHash()" : 1 , "createNewArray(Object[],ArrayCallback,boolean)" : 1 , "createNewArray(boolean)" : 1 , "createNewBignum(BigInteger)" : 2 , "createNewClosure(int,StaticScope,int,CompilerCallback,CompilerCallback,boolean,NodeType,ASTInspector)" : 1 , "createNewClosure19(int,StaticScope,int,CompilerCallback,CompilerCallback,boolean,NodeType,ASTInspector)" : 2 , "createNewEndBlock(CompilerCallback)" : 1 , "createNewFixnum(long)" : 2 , "createNewFloat(double)" : 2 , "createNewForLoop(int,CompilerCallback,CompilerCallback,boolean,NodeType,ASTInspector)" : 1 , "createNewHash(Object,ArrayCallback,int)" : 2 , "createNewHash19(Object,ArrayCallback,int)" : 1 , "createNewLambda(CompilerCallback)" : 1 , "createNewLiteralArray(Object[],ArrayCallback,boolean)" : 1 , "createNewLiteralHash(Object,ArrayCallback,int)" : 1 , "createNewRange(CompilerCallback,boolean)" : 1 , "createNewRegexp(???)" : 2 , "createNewRegexp(CompilerCallback,int)" : 1 , "createNewString(???)" : 2 , "createNewString(ArrayCallback,int)" : 3 , "createNewSymbol(ArrayCallback,int)" : 1 , "createNewSymbol(String)" : 1 , "createObjectArray(Object[],ArrayCallback)" : 1 , "declareClassVariable(String)" : 1 , "declareClassVariable(String,CompilerCallback)" : 1 , "defineAlias(CompilerCallback)" : 1 , "defineClass(String,StaticScope,CompilerCallback,CompilerCallback,CompilerCallback,CompilerCallback,ASTInspector)" : 2 , "defineModule(String,StaticScope,CompilerCallback,CompilerCallback,ASTInspector)" : 1 , "defineNewMethod(String,int,StaticScope,CompilerCallback,CompilerCallback,CompilerCallback,ASTInspector,boolean,String,int)" : 2 , "duplicateCurrentValue()" : 16 , "endBody()" : 4 , "ensureMultipleAssignableRubyArray(boolean)" : 4 , "ensureRubyArray()" : 1 , "forEachInValueArray(int,int,Object,ArrayCallback,CompilerCallback)" : 4 , "forEachInValueArray(int,int,Object,int,Object,ArrayCallback,CompilerCallback)" : 2 , "getFrameKlazz()" : 2 , "getFrameName()" : 2 , "getInvocationCompiler()" : 21 , "getNewEnding()" : 27 , "getVariableCompiler()" : 33 , "getVisibilityFor(String)" : 2 , "go(Object)" : 16 , "hasBlock(BranchCallback,BranchCallback)" : 1 , "ifNotNull(Object)" : 1 , "ifNotSuperMethodBound(Object)" : 2 , "ifNull(Object)" : 8 , "ifSingleton(Object)" : 1 , "inDefined()" : 1 , "isCaptured(int,BranchCallback,BranchCallback)" : 1 , "isClassVarDefined(String,BranchCallback,BranchCallback)" : 2 , "isConstantBranch(BranchCallback,String)" : 1 , "isConstantDefined(String,BranchCallback,BranchCallback)" : 1 , "isGlobalDefined(String,BranchCallback,BranchCallback)" : 1 , "isInstanceOf(Class,BranchCallback,BranchCallback)" : 1 , "isInstanceVariableDefined(String,BranchCallback,BranchCallback)" : 1 , "isMethodBound(String,BranchCallback,BranchCallback)" : 4 , "isNotProtected(Object,int)" : 2 , "isNull(BranchCallback,BranchCallback)" : 1 , "isPrivate(Object,int)" : 2 , "issueBreakEvent(CompilerCallback)" : 1 , "issueNextEvent(CompilerCallback)" : 1 , "issueRedoEvent()" : 1 , "issueRetryEvent()" : 1 , "lineNumber(ISourcePosition)" : 1 , "literal(String)" : 1 , "loadCurrentModule()" : 1 , "loadException()" : 1 , "loadFalse()" : 7 , "loadFilename()" : 1 , "loadNil()" : 32 , "loadObject()" : 4 , "loadSelf()" : 3 , "loadStandardError()" : 1 , "loadTrue()" : 7 , "match()" : 1 , "match2(CompilerCallback)" : 1 , "match3()" : 1 , "metaclass()" : 3 , "negateCurrentValue()" : 2 , "notIsModuleAndClassVarDefined(String,Object)" : 1 , "nthRef(int)" : 2 , "outDefined()" : 1 , "outline(String)" : 1 , "performBackref(char)" : 1 , "performBooleanBranch(BranchCallback,BranchCallback)" : 11 , "performBooleanLoopLight(BranchCallback,BranchCallback,boolean)" : 2 , "performBooleanLoopSafe(BranchCallback,BranchCallback,boolean)" : 2 , "performEnsure(BranchCallback,BranchCallback)" : 1 , "performLogicalAnd(BranchCallback)" : 2 , "performLogicalOr(BranchCallback)" : 1 , "performRescue(BranchCallback,BranchCallback,boolean)" : 1 , "performRescueLight(BranchCallback,BranchCallback,boolean)" : 1 , "performReturn()" : 1 , "pollThreadEvents()" : 14 , "protect(BranchCallback,BranchCallback,Class)" : 1 , "pushNull()" : 21 , "pushString(String)" : 23 , "raiseTypeError(String)" : 1 , "rescue(BranchCallback,Class,BranchCallback,Class)" : 3 , "rethrowException()" : 1 , "retrieveClassVariable(String)" : 1 , "retrieveConstant(String)" : 1 , "retrieveConstantFromModule(String)" : 2 , "retrieveConstantFromObject(String)" : 1 , "retrieveGlobalVariable(String)" : 2 , "retrieveInstanceVariable(String)" : 2 , "retrieveSelf()" : 2 , "reverseValues(int)" : 2 , "runBeginBlock(StaticScope,CompilerCallback)" : 1 , "selfIsKindOf(Object)" : 2 , "setEnding(Object)" : 27 , "setLinePosition(ISourcePosition)" : 3 , "singlifySplattedValue()" : 1 , "splatCurrentValue(String)" : 2 , "storeExceptionInErrorInfo()" : 1 , "stringOrNil()" : 2 , "superClass()" : 2 , "swapValues()" : 1 , "traceLine()" : 2 , "undefMethod(CompilerCallback)" : 1 , "unwrapPassedBlock()" : 1}},{ "className" : "org::jruby::compiler::ir::instructions::ALLOC_FRAME_Instr" , "selectors" : { "ALLOC_FRAME_Instr(IR_ExecutionScope)" : 2 , "getClosestMethodAncestor(IR_ExecutionScope)" : 1}},{ "className" : "org::jruby::javasupport::JavaMethod" , "selectors" : { "JavaMethod(Ruby,Method)" : 10 , "accessibleObject()" : 2 , "checkInstanceof(Object)" : 1 , "convertArguments(IRubyObject[],Object[],int)" : 2 , "convertReturn(Object)" : 7 , "create(Ruby,Class<?>,String,Class<?>[])" : 1 , "create(Ruby,Method)" : 7 , "createDeclared(Ruby,Class<?>,String,Class<?>[])" : 1 , "createJavaMethodClass(Ruby,RubyModule)" : 1 , "getMatchingDeclaredMethod(Ruby,Class<?>,String,Class<?>[])" : 1 , "getParameterTypes()" : 2 , "handleIllegalAccessEx(Method,IllegalAccessException)" : 8 , "handlelIllegalArgumentEx(Method,IllegalArgumentException,Object[])" : 8 , "invokeDirect(Object)" : 3 , "invokeDirect(Object,Object)" : 3 , "invokeDirect(Object,Object,Object)" : 2 , "invokeDirect(Object,Object,Object,Object)" : 2 , "invokeDirect(Object,Object,Object,Object,Object)" : 1 , "invokeDirect(Object,Object[])" : 3 , "invokeDirectSuperWithExceptionHandling(Method,Object,Object[])" : 6 , "invokeDirectWithExceptionHandling(Method,Object)" : 3 , "invokeDirectWithExceptionHandling(Method,Object,Object)" : 3 , "invokeDirectWithExceptionHandling(Method,Object,Object,Object)" : 3 , "invokeDirectWithExceptionHandling(Method,Object,Object,Object,Object)" : 3 , "invokeDirectWithExceptionHandling(Method,Object,Object,Object,Object,Object)" : 3 , "invokeDirectWithExceptionHandling(Method,Object,Object[])" : 3 , "invokeStaticDirect()" : 3 , "invokeStaticDirect(Object)" : 3 , "invokeStaticDirect(Object,Object)" : 2 , "invokeStaticDirect(Object,Object,Object)" : 2 , "invokeStaticDirect(Object,Object,Object,Object)" : 1 , "invokeStaticDirect(Object[])" : 3 , "invokeWithExceptionHandling(Method,Object,Object[])" : 4 , "isStatic()" : 2 , "isVarArgs()" : 3 , "mightBeProxy(Object)" : 6 , "name()" : 1 , "newArgSizeMismatchError(Ruby,Class[])" : 6 , "newMethodNotFoundError(Ruby,Class,String,String)" : 1 , "tryProxyInvocation(Object)" : 1 , "tryProxyInvocation(Object,Object)" : 1 , "tryProxyInvocation(Object,Object,Object)" : 1 , "tryProxyInvocation(Object,Object,Object,Object)" : 1 , "tryProxyInvocation(Object,Object,Object,Object,Object)" : 1 , "tryProxyInvocation(Object,Object[])" : 1}},{ "className" : "org::jruby::RubyInteger" , "selectors" : { "<Initializer>()::ByteList" : 1 , "RubyInteger(Ruby,RubyClass)" : 1 , "RubyInteger(RubyClass)" : 2 , "chr19(ThreadContext,IRubyObject)::ByteList" : 1 , "createIntegerClass(Ruby)" : 1 , "duckDownto(ThreadContext,IRubyObject,IRubyObject,Block)" : 1 , "duckUpto(ThreadContext,IRubyObject,IRubyObject,Block)" : 1 , "even_p(ThreadContext)" : 1 , "fixnumDownto(ThreadContext,long,long,Block)" : 1 , "fixnumUpto(ThreadContext,long,long,Block)" : 1 , "to_r(ThreadContext)" : 1}},{ "className" : "org::jruby::runtime::assigner::Pre3Rest1Post0Assigner" , "selectors" : { "Pre3Rest1Post0Assigner(Node,Node,Node,Node)" : 1 , "assign(Ruby,ThreadContext,IRubyObject,Block)" : 2 , "assign(Ruby,ThreadContext,IRubyObject,IRubyObject,Block)" : 2 , "assign(Ruby,ThreadContext,IRubyObject,IRubyObject,IRubyObject,Block)" : 2 , "assign(Ruby,ThreadContext,IRubyObject,IRubyObject,IRubyObject,IRubyObject,Block)" : 2}},{ "className" : "org::jruby::RubyRandom" , "selectors" : { "RubyRandom(Ruby,RubyClass)" : 1 , "createRandomClass(Ruby)" : 1 , "getRandomSeed(Ruby,IRubyObject)" : 1 , "randCommon(ThreadContext,IRubyObject,Random,boolean)" : 2 , "seed(ThreadContext)" : 2 , "srand(ThreadContext,IRubyObject,IRubyObject)" : 1}},{ "className" : "org::jruby::bench::BenchFixnumCreation" , "selectors" : { "benchFixnumCreation(Ruby)" : 1 , "benchStaticFib(Ruby)" : 1 , "fib(Ruby,ThreadContext,IRubyObject)" : 3}},{ "className" : "java::nio::charset::CoderResult" , "selectors" : { "isError()" : 7 , "isMalformed()" : 3 , "isOverflow()" : 5 , "isUnderflow()" : 3 , "isUnmappable()" : 1 , "length()" : 3 , "throwException()" : 1 , "toString()" : 1}},{ "className" : "org::jruby::ext::ffi::MemoryUtil" , "selectors" : { "getArrayOfFloat32(Ruby,MemoryIO,long,int)" : 1 , "getArrayOfFloat64(Ruby,MemoryIO,long,int)" : 1 , "getArrayOfSigned16(Ruby,MemoryIO,long,int)" : 1 , "getArrayOfSigned32(Ruby,MemoryIO,long,int)" : 1 , "getArrayOfSigned64(Ruby,MemoryIO,long,int)" : 1 , "getArrayOfSigned8(Ruby,MemoryIO,long,int)" : 1 , "getArrayOfUnsigned16(Ruby,MemoryIO,long,int)" : 1 , "getArrayOfUnsigned32(Ruby,MemoryIO,long,int)" : 1 , "getArrayOfUnsigned64(Ruby,MemoryIO,long,int)" : 1 , "getArrayOfUnsigned8(Ruby,MemoryIO,long,int)" : 1 , "getTaintedByteString(Ruby,MemoryIO,long,int)" : 2 , "getTaintedString(Ruby,MemoryIO,long)" : 6 , "getTaintedString(Ruby,MemoryIO,long,int)" : 2 , "newTaintedString(Ruby,byte[])" : 3 , "putArrayOfFloat32(Ruby,MemoryIO,long,RubyArray)" : 1 , "putArrayOfFloat64(Ruby,MemoryIO,long,RubyArray)" : 1 , "putArrayOfSigned16(Ruby,MemoryIO,long,RubyArray)" : 1 , "putArrayOfSigned32(Ruby,MemoryIO,long,RubyArray)" : 1 , "putArrayOfSigned64(Ruby,MemoryIO,long,RubyArray)" : 1 , "putArrayOfSigned8(Ruby,MemoryIO,long,RubyArray)" : 1 , "putArrayOfUnsigned16(Ruby,MemoryIO,long,RubyArray)" : 1 , "putArrayOfUnsigned32(Ruby,MemoryIO,long,RubyArray)" : 1 , "putArrayOfUnsigned64(Ruby,MemoryIO,long,RubyArray)" : 1 , "putArrayOfUnsigned8(Ruby,MemoryIO,long,RubyArray)" : 1}},{ "className" : "org::jruby::util::Join::Reaction" , "selectors" : { "Reaction(Enum<?>,Enum<?>[],boolean)" : 3 , "Reaction(int[],boolean)" : 4 , "dispatch(Join,Object[])" : 1 , "toIndices(Enum<?>,Enum<?>[])" : 1}},{ "className" : "org::jruby::ext::ffi::Type" , "selectors" : { "Type(Ruby,RubyClass,NativeType)" : 2 , "Type(Ruby,RubyClass,NativeType,int,int)" : 5 , "createTypeClass(Ruby,RubyModule)" : 1 , "defineBuiltinType(Ruby,RubyClass,NativeType,String[])" : 12 , "getNativeAlignment()" : 11 , "getNativeAlignment(NativeType)" : 2 , "getNativeSize()" : 18 , "getNativeSize(NativeType)" : 2 , "getNativeType()" : 22 , "getTypeClass(Ruby)" : 2 , "isPrimitive(NativeType)" : 2}},{ "className" : "org::jruby::compiler::CacheCompiler" , "selectors" : { "cacheBigInteger(BaseBodyCompiler,BigInteger)" : 1 , "cacheCallSite(BaseBodyCompiler,String,CallType)" : 24 , "cacheClosure(BaseBodyCompiler,String,int,StaticScope,boolean,NodeType,ASTInspector)" : 1 , "cacheClosure19(BaseBodyCompiler,String,int,StaticScope,boolean,NodeType,ASTInspector)" : 1 , "cacheConstant(BaseBodyCompiler,String)" : 1 , "cacheConstantFrom(BaseBodyCompiler,String)" : 2 , "cacheDRegexp(BaseBodyCompiler,CompilerCallback,int)" : 1 , "cacheFixnum(BaseBodyCompiler,long)" : 1 , "cacheMethod(BaseBodyCompiler,String)" : 2 , "cacheMethod(BaseBodyCompiler,String,int)" : 2 , "cacheRegexp(BaseBodyCompiler,String,int)" : 1 , "cacheSpecialClosure(BaseBodyCompiler,String)" : 3 , "cacheStaticScope(BaseBodyCompiler,StaticScope)" : 2 , "cacheString(???)" : 1 , "cacheSymbol(BaseBodyCompiler,String)" : 1 , "cachedGetVariable(BaseBodyCompiler,String)" : 1 , "cachedSetVariable(BaseBodyCompiler,String,CompilerCallback)" : 2 , "finish()" : 1}},{ "className" : "org::jruby::javasupport::Java" , "selectors" : { "addNameClassMappings(Ruby,Map<String,JavaClass>)" : 1 , "addToJavaPackageModule(RubyModule,JavaClass)" : 3 , "allocateProxy(Object,RubyClass)" : 3 , "concrete_proxy_inherited(IRubyObject,IRubyObject)" : 1 , "constructProxy(Ruby,Constructor,RubyClass)" : 1 , "createJavaModule(Ruby)" : 1 , "createPackageModule(RubyModule,String,String)" : 2 , "createProxyClass(Ruby,RubyClass,JavaClass,boolean)" : 4 , "create_proxy_class(IRubyObject,IRubyObject,IRubyObject,IRubyObject)" : 1 , "generateRealClass(RubyClass)" : 1 , "getInstance(Ruby,Object)" : 32 , "getInterfaceModule(Ruby,JavaClass)" : 4 , "getInterfacesFromRubyClass(RubyClass)" : 3 , "getJavaPackageModule(Ruby,String)" : 4 , "getMethodFromClass(Ruby,IRubyObject,String,Class[])" : 6 , "getMethodInvokerForMethod(RubyClass,Method)" : 1 , "getPackageModule(Ruby,String)" : 2 , "getProxyClass(Ruby,JavaClass)" : 12 , "getProxyClassForObject(Ruby,Object)" : 1 , "getProxyOrPackageUnderPackage(ThreadContext,Ruby,RubyModule,String)" : 1 , "getRealClassConstructor(Ruby,Class)" : 1 , "getRubyMethod(ThreadContext,IRubyObject,String,Class[])" : 2 , "getTopLevelProxyOrPackage(ThreadContext,Ruby,String)" : 1 , "get_interface_module(Ruby,IRubyObject)" : 3 , "get_java_class(IRubyObject,IRubyObject)" : 1 , "get_package_module(IRubyObject,IRubyObject)" : 1 , "get_package_module_dot_format(IRubyObject,IRubyObject)" : 1 , "get_proxy_class(IRubyObject,IRubyObject)" : 11 , "get_proxy_or_package_under_package(ThreadContext,IRubyObject,IRubyObject,IRubyObject)" : 1 , "get_top_level_proxy_or_package(ThreadContext,IRubyObject,IRubyObject)" : 1 , "interfacesHashCode(Class[])" : 2 , "memoizePackageOrClass(RubyModule,String,IRubyObject)" : 4 , "memoizePackageOrClass(RubyModule,String,IRubyObject)::anonymous(org" : 1 , "newInterfaceImpl(IRubyObject,Class[])" : 2 , "setupJavaSubclass(ThreadContext,IRubyObject,IRubyObject)" : 1 , "wrap(Ruby,IRubyObject)" : 6}},{ "className" : "org::jruby::ast::visitor::NodeVisitor" , "selectors" : { "visitAliasNode(AliasNode)" : 1 , "visitAndNode(AndNode)" : 1 , "visitArgsCatNode(ArgsCatNode)" : 1 , "visitArgsNode(ArgsNode)" : 1 , "visitArgsPushNode(ArgsPushNode)" : 1 , "visitArrayNode(ArrayNode)" : 1 , "visitAttrAssignNode(AttrAssignNode)" : 1 , "visitBackRefNode(BackRefNode)" : 1 , "visitBeginNode(BeginNode)" : 1 , "visitBignumNode(BignumNode)" : 1 , "visitBlockArg18Node(BlockArg18Node)" : 1 , "visitBlockArgNode(BlockArgNode)" : 1 , "visitBlockNode(BlockNode)" : 1 , "visitBlockPassNode(BlockPassNode)" : 1 , "visitBreakNode(BreakNode)" : 1 , "visitCallNode(CallNode)" : 1 , "visitCaseNode(CaseNode)" : 1 , "visitClassNode(ClassNode)" : 1 , "visitClassVarAsgnNode(ClassVarAsgnNode)" : 1 , "visitClassVarDeclNode(ClassVarDeclNode)" : 1 , "visitClassVarNode(ClassVarNode)" : 1 , "visitColon2Node(Colon2Node)" : 1 , "visitColon3Node(Colon3Node)" : 1 , "visitConstDeclNode(ConstDeclNode)" : 1 , "visitConstNode(ConstNode)" : 1 , "visitDAsgnNode(DAsgnNode)" : 1 , "visitDRegxNode(DRegexpNode)" : 1 , "visitDStrNode(DStrNode)" : 1 , "visitDSymbolNode(DSymbolNode)" : 1 , "visitDVarNode(DVarNode)" : 1 , "visitDXStrNode(DXStrNode)" : 1 , "visitDefinedNode(DefinedNode)" : 1 , "visitDefnNode(DefnNode)" : 1 , "visitDefsNode(DefsNode)" : 1 , "visitDotNode(DotNode)" : 1 , "visitEncodingNode(EncodingNode)" : 1 , "visitEnsureNode(EnsureNode)" : 1 , "visitEvStrNode(EvStrNode)" : 1 , "visitFCallNode(FCallNode)" : 1 , "visitFalseNode(FalseNode)" : 1 , "visitFixnumNode(FixnumNode)" : 1 , "visitFlipNode(FlipNode)" : 1 , "visitFloatNode(FloatNode)" : 1 , "visitForNode(ForNode)" : 1 , "visitGlobalAsgnNode(GlobalAsgnNode)" : 1 , "visitGlobalVarNode(GlobalVarNode)" : 1 , "visitHashNode(HashNode)" : 1 , "visitIfNode(IfNode)" : 1 , "visitInstAsgnNode(InstAsgnNode)" : 1 , "visitInstVarNode(InstVarNode)" : 1 , "visitIterNode(IterNode)" : 1 , "visitLiteralNode(LiteralNode)" : 1 , "visitLocalAsgnNode(LocalAsgnNode)" : 1 , "visitLocalVarNode(LocalVarNode)" : 1 , "visitMatch2Node(Match2Node)" : 1 , "visitMatch3Node(Match3Node)" : 1 , "visitMatchNode(MatchNode)" : 1 , "visitModuleNode(ModuleNode)" : 1 , "visitMultipleAsgnNode(MultipleAsgn19Node)" : 1 , "visitMultipleAsgnNode(MultipleAsgnNode)" : 1 , "visitNewlineNode(NewlineNode)" : 1 , "visitNextNode(NextNode)" : 1 , "visitNilNode(NilNode)" : 1 , "visitNotNode(NotNode)" : 1 , "visitNthRefNode(NthRefNode)" : 1 , "visitOpAsgnAndNode(OpAsgnAndNode)" : 1 , "visitOpAsgnNode(OpAsgnNode)" : 1 , "visitOpAsgnOrNode(OpAsgnOrNode)" : 1 , "visitOpElementAsgnNode(OpElementAsgnNode)" : 1 , "visitOrNode(OrNode)" : 1 , "visitPostExeNode(PostExeNode)" : 1 , "visitPreExeNode(PreExeNode)" : 1 , "visitRedoNode(RedoNode)" : 1 , "visitRegexpNode(RegexpNode)" : 1 , "visitRescueBodyNode(RescueBodyNode)" : 1 , "visitRescueNode(RescueNode)" : 1 , "visitRestArgNode(RestArgNode)" : 1 , "visitRetryNode(RetryNode)" : 1 , "visitReturnNode(ReturnNode)" : 1 , "visitRootNode(RootNode)" : 1 , "visitSClassNode(SClassNode)" : 1 , "visitSValueNode(SValueNode)" : 1 , "visitSelfNode(SelfNode)" : 1 , "visitSplatNode(SplatNode)" : 1 , "visitStrNode(StrNode)" : 1 , "visitSuperNode(SuperNode)" : 1 , "visitSymbolNode(SymbolNode)" : 1 , "visitToAryNode(ToAryNode)" : 1 , "visitTrueNode(TrueNode)" : 1 , "visitUndefNode(UndefNode)" : 1 , "visitUntilNode(UntilNode)" : 1 , "visitVAliasNode(VAliasNode)" : 1 , "visitVCallNode(VCallNode)" : 1 , "visitWhenNode(WhenNode)" : 1 , "visitWhileNode(WhileNode)" : 1 , "visitXStrNode(XStrNode)" : 1 , "visitYieldNode(YieldNode)" : 1 , "visitZArrayNode(ZArrayNode)" : 1 , "visitZSuperNode(ZSuperNode)" : 1}},{ "className" : "org::jruby::java::proxies::JavaProxy" , "selectors" : { "JavaProxy(Ruby,RubyClass)" : 4 , "createJavaProxy(ThreadContext)" : 1 , "dataGetStruct()" : 2 , "dataWrapStruct(Object)" : 5 , "findFields(ThreadContext,RubyModule,IRubyObject[],boolean,boolean)" : 3 , "getFieldListFromArgs(IRubyObject[])" : 1 , "getJavaClass()" : 2 , "getJavaClass(ThreadContext,RubyModule)" : 1 , "getMethod(String,Class[])" : 5 , "getMethodInvoker(Method)" : 2 , "getObject()" : 40 , "getRubyMethod(String,Class[])" : 2 , "installField(ThreadContext,Map<String,String>,Field,RubyModule,boolean,boolean)" : 1 , "lazyJavaObject()" : 2 , "marshal_dump()::ByteList" : 1 , "setObject(Object)" : 12}},{ "className" : "org::jruby::ast::SValueNode" , "selectors" : { "SValueNode(ISourcePosition,Node)" : 2 , "getValue()" : 3}},{ "className" : "org::jruby::parser::DefaultRubyParser" , "selectors" : { "DefaultRubyParser()" : 3 , "DefaultRubyParser(ParserSupport)" : 1 , "case100_line673(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case101_line676(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case102_line681(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case103_line684(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case104_line688(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case105_line691(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case106_line693(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case10_line323(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case11_line326(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case12_line329(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case13_line332(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case14_line335(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case15_line338(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case16_line341(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case174_line712(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case175_line717(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case176_line722(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case177_line738(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case178_line743(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case179_line748(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case17_line344(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case180_line753(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case181_line758(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case182_line761(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case183_line764(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case184_line767(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case185_line774(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case186_line780(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case187_line783(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case188_line786(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case189_line789(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case18_line351(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case190_line792(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case191_line795(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case192_line798(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case193_line801(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case194_line804(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case195_line811(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case196_line814(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case197_line817(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case198_line820(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case199_line823(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case19_line358(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case1_line271(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case200_line826(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case201_line829(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case202_line832(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case203_line835(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case204_line838(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case205_line841(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case206_line844(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case207_line847(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case208_line850(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case209_line853(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case20_line362(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case210_line856(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case211_line859(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case212_line862(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case213_line865(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case214_line868(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case215_line871(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case216_line874(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case217_line877(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case218_line881(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case21_line367(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case220_line887(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case221_line890(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case222_line893(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case223_line896(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case224_line900(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case225_line904(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case226_line907(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case227_line911(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case228_line914(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case22_line372(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case231_line921(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case232_line924(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case233_line927(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case234_line931(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case235_line936(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case236_line941(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case237_line945(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case238_line950(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case239_line953(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case23_line378(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case240_line956(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case241_line959(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case242_line962(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case243_line966(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case244_line970(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case245_line975(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case246_line980(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case247_line984(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case248_line988(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case249_line992(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case24_line381(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case250_line996(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case251_line999(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case252_line1002(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case253_line1004(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case255_line1010(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case256_line1012(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case257_line1016(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case258_line1018(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case259_line1023(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case25_line390(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case260_line1028(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case262_line1033(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case263_line1037(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case264_line1041(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case265_line1044(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case266_line1047(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case26_line406(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case275_line1059(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case276_line1062(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case277_line1065(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case278_line1067(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case279_line1071(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case27_line412(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case280_line1080(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case281_line1083(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case282_line1086(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case283_line1093(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case284_line1102(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case285_line1105(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case286_line1108(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case287_line1111(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case288_line1114(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case289_line1117(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case28_line417(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case290_line1120(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case292_line1124(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case293_line1132(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case294_line1135(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case295_line1138(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case296_line1140(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case297_line1142(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case298_line1146(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case299_line1148(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case29_line422(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case2_line274(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case300_line1150(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case301_line1154(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case302_line1157(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case303_line1165(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case304_line1168(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case305_line1170(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case306_line1172(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case307_line1175(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case308_line1180(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case309_line1186(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case30_line427(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case310_line1189(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case311_line1193(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case312_line1199(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case313_line1204(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case314_line1210(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case315_line1213(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case316_line1222(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case317_line1224(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case318_line1228(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case319_line1236(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case31_line430(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case320_line1239(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case321_line1242(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case322_line1245(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case323_line1249(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case32_line433(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case332_line1264(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case334_line1269(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case336_line1274(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case337_line1278(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case338_line1281(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case339_line1285(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case33_line441(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case340_line1292(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case341_line1295(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case342_line1298(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case343_line1301(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case344_line1304(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case345_line1307(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case346_line1310(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case347_line1313(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case348_line1316(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case349_line1319(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case350_line1322(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case352_line1327(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case353_line1331(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case354_line1335(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case355_line1345(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case356_line1347(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case357_line1353(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case358_line1364(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case359_line1367(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case360_line1371(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case361_line1374(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case362_line1377(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case363_line1380(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case364_line1383(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case365_line1386(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case366_line1391(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case367_line1393(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case368_line1397(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case369_line1399(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case36_line450(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case370_line1404(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case372_line1409(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case373_line1412(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case376_line1419(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case377_line1432(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case378_line1436(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case37_line453(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case381_line1442(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case383_line1447(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case386_line1458(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case388_line1465(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case38_line456(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case390_line1471(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case391_line1476(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case392_line1482(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case393_line1499(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case394_line1515(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case395_line1518(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case396_line1524(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case397_line1527(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case399_line1532(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case39_line459(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case3_line286(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case400_line1537(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case401_line1540(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case402_line1546(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case403_line1549(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case404_line1554(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case405_line1557(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case406_line1561(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case407_line1564(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case408_line1569(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case409_line1572(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case410_line1576(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case411_line1580(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case412_line1586(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case413_line1594(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case414_line1597(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case415_line1600(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case417_line1607(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case41_line464(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case422_line1617(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case424_line1634(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case425_line1637(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case426_line1640(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case432_line1646(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case433_line1649(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case434_line1652(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case435_line1655(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case436_line1658(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case437_line1661(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case438_line1666(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case439_line1671(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case442_line1679(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case443_line1682(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case444_line1684(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case445_line1687(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case446_line1692(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case447_line1698(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case448_line1703(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case449_line1706(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case44_line471(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case450_line1709(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case451_line1712(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case452_line1715(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case453_line1718(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case454_line1721(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case455_line1724(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case456_line1727(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case457_line1732(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case458_line1735(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case459_line1738(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case45_line474(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case460_line1741(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case461_line1744(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case462_line1755(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case463_line1760(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case464_line1764(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case465_line1770(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case466_line1777(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case467_line1788(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case468_line1791(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case46_line477(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case471_line1799(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case472_line1808(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case475_line1816(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case476_line1820(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case477_line1823(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case478_line1827(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case479_line1831(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case480_line1833(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case481_line1845(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case482_line1848(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case483_line1851(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case485_line1860(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case486_line1865(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case48_line483(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case49_line486(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case4_line303(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case506_line1884(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case509_line1889(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case50_line491(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case510_line1892(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case511_line1896(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case51_line493(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case52_line499(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case53_line502(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case54_line505(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case55_line508(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case56_line511(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case57_line514(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case58_line517(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case59_line520(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case61_line526(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case63_line532(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case64_line537(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case65_line540(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case66_line544(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case67_line547(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case68_line550(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case69_line553(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case6_line311(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case71_line558(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case72_line563(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case73_line566(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case74_line570(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case75_line573(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case76_line576(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case77_line579(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case78_line582(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case79_line585(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case7_line314(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case80_line594(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case81_line603(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case82_line608(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case83_line611(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case84_line614(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case85_line617(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case86_line620(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case87_line623(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case88_line632(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case89_line641(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case8_line317(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case90_line645(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case92_line650(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case93_line653(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case94_line656(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case98_line662(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case99_line667(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case9_line321(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "parse(ParserConfiguration,LexerSource)" : 1 , "setWarnings(IRubyWarnings)" : 1 , "yyDefault(Object)" : 1 , "yyExpecting(int)" : 1 , "yyName(int)" : 3 , "yyparse(RubyYaccLexer)" : 1 , "yyparse(RubyYaccLexer,Object)" : 1}},{ "className" : "org::jruby::java::invokers::StaticMethodInvoker" , "selectors" : { "StaticMethodInvoker(RubyClass,List<Method>)" : 1 , "StaticMethodInvoker(RubyClass,Method)" : 3 , "call(ThreadContext,IRubyObject,RubyModule,String)" : 1 , "call(ThreadContext,IRubyObject,RubyModule,String,IRubyObject)" : 1 , "call(ThreadContext,IRubyObject,RubyModule,String,IRubyObject,IRubyObject)" : 1 , "call(ThreadContext,IRubyObject,RubyModule,String,IRubyObject,IRubyObject,IRubyObject)" : 1 , "call(ThreadContext,IRubyObject,RubyModule,String,IRubyObject[])" : 5}},{ "className" : "org::jruby::runtime::ObjectSpace" , "selectors" : { "ObjectSpace()" : 2 , "add(IRubyObject)" : 6 , "addFinalizer(IRubyObject,IRubyObject)" : 1 , "calculateObjectId(Object)" : 2 , "cleanIdentities()" : 2 , "cleanup()" : 1 , "createAndRegisterObjectId(IRubyObject)" : 4 , "createId(IRubyObject)" : 1 , "id2ref(long)" : 5 , "iterator(RubyModule)" : 3 , "registerObjectId(long,IRubyObject)" : 2 , "removeFinalizers(long)" : 1}},{ "className" : "org::jruby::RubyRange" , "selectors" : { "RubyRange(Ruby,RubyClass)" : 4 , "begLen(long,int)" : 5 , "begLenInt(int,int)" : 8 , "checkBegin(long)" : 1 , "createRangeClass(Ruby)" : 1 , "exclude_end_p()" : 1 , "first()" : 3 , "fixnumEach(ThreadContext,Ruby,Block)" : 2 , "fixnumStep(ThreadContext,Ruby,long,Block)" : 2 , "include_p(ThreadContext,IRubyObject)" : 1 , "include_p19(ThreadContext,IRubyObject)" : 1 , "init(ThreadContext,IRubyObject,IRubyObject,boolean)" : 4 , "last()" : 3 , "newRange(Ruby,ThreadContext,IRubyObject,IRubyObject,boolean)" : 1 , "numericStep(ThreadContext,Ruby,IRubyObject,Block)" : 1 , "numericStep19(ThreadContext,Ruby,IRubyObject,Block)" : 1 , "rangeEach(ThreadContext,RangeCallBack)" : 4 , "rangeLe(ThreadContext,IRubyObject,IRubyObject)" : 5 , "rangeLt(ThreadContext,IRubyObject,IRubyObject)" : 3 , "stepCommon(ThreadContext,IRubyObject,Block)" : 2 , "stepCommon19(ThreadContext,IRubyObject,Block)" : 2}},{ "className" : "org::jruby::compiler::ir::targets::JVM" , "selectors" : { "clsData()" : 8 , "codegen(IR_Script)" : 1 , "declareField(String)" : 2 , "emit(IRMethod)" : 1 , "emit(IR_Class)" : 3 , "emit(IR_Instr)" : 2 , "emit(Operand)" : 8 , "emit(Variable)" : 1 , "emitBEQ(BEQ_Instr)" : 1 , "emitCALL(CallInstruction)" : 1 , "emitCOPY(COPY_Instr)" : 1 , "emitDEF_INST_METH(DEFINE_INSTANCE_METHOD_Instr)" : 1 , "emitGET_FIELD(GET_FIELD_Instr)" : 1 , "emitJUMP(JUMP_Instr)" : 1 , "emitLABEL(LABEL_Instr)" : 1 , "emitPUT_FIELD(PUT_FIELD_Instr)" : 1 , "emitRECV_ARG(ReceiveArgumentInstruction)" : 1 , "emitRETURN(RETURN_Instr)" : 1 , "getVariableIndex(Variable)" : 3 , "popclass()" : 1 , "popmethod()" : 2 , "pushclass()" : 1 , "pushclass()::TraceClassVisitor" : 1 , "pushmethod(String)" : 2}},{ "className" : "org::jruby::test::bench::BenchFixnumFibRecursive" , "selectors" : { "benchFixnumFib(int)" : 1 , "boxedFib(ThreadContext,RubyFixnum)" : 3}},{ "className" : "org::jruby::runtime::load::LoadService::ExtensionSearcher" , "selectors" : { "ExtensionSearcher()" : 1}},{ "className" : "org::jruby::embed::jsr223::JRubyEngineFactory" , "selectors" : { "JRubyEngineFactory()" : 17 , "getEngineName()" : 3 , "getEngineVersion()" : 2 , "getExtensions()" : 1 , "getLanguageName()" : 2 , "getLanguageVersion()" : 2 , "getMethodCallSyntax(String,String,String[])" : 1 , "getMimeTypes()" : 1 , "getNames()" : 1 , "getOutputStatement(String)" : 1 , "getParameter(String)" : 7 , "getProgram(String[])" : 1 , "getScriptEngine()" : 7 , "initParameters()" : 1}},{ "className" : "org::jruby::runtime::callsite::CachingCallSite" , "selectors" : { "CachingCallSite(String,CallType)" : 3 , "cacheAndCall(IRubyObject,RubyClass,Block,IRubyObject[],ThreadContext,IRubyObject)" : 1 , "cacheAndCall(IRubyObject,RubyClass,Block,ThreadContext,IRubyObject)" : 1 , "cacheAndCall(IRubyObject,RubyClass,Block,ThreadContext,IRubyObject,IRubyObject)" : 1 , "cacheAndCall(IRubyObject,RubyClass,Block,ThreadContext,IRubyObject,IRubyObject,IRubyObject)" : 1 , "cacheAndCall(IRubyObject,RubyClass,Block,ThreadContext,IRubyObject,IRubyObject,IRubyObject,IRubyObject)" : 1 , "cacheAndCall(IRubyObject,RubyClass,IRubyObject[],ThreadContext,IRubyObject)" : 1 , "cacheAndCall(IRubyObject,RubyClass,ThreadContext,IRubyObject)" : 1 , "cacheAndCall(IRubyObject,RubyClass,ThreadContext,IRubyObject,IRubyObject)" : 1 , "cacheAndCall(IRubyObject,RubyClass,ThreadContext,IRubyObject,IRubyObject,IRubyObject)" : 1 , "cacheAndCall(IRubyObject,RubyClass,ThreadContext,IRubyObject,IRubyObject,IRubyObject,IRubyObject)" : 1 , "call(ThreadContext,IRubyObject,IRubyObject,IRubyObject)" : 11 , "call(ThreadContext,IRubyObject,IRubyObject,IRubyObject,IRubyObject)" : 2 , "call(ThreadContext,IRubyObject,IRubyObject,long)" : 9 , "callBlock(ThreadContext,IRubyObject,IRubyObject,Block)" : 2 , "callBlock(ThreadContext,IRubyObject,IRubyObject,IRubyObject,Block)" : 2 , "callBlock(ThreadContext,IRubyObject,IRubyObject,IRubyObject,IRubyObject,Block)" : 2 , "callBlock(ThreadContext,IRubyObject,IRubyObject,IRubyObject,IRubyObject,IRubyObject,Block)" : 2 , "callBlock(ThreadContext,IRubyObject,IRubyObject,IRubyObject[],Block)" : 2 , "callMethodMissing(ThreadContext,IRubyObject,DynamicMethod)" : 1 , "callMethodMissing(ThreadContext,IRubyObject,DynamicMethod,Block)" : 1 , "callMethodMissing(ThreadContext,IRubyObject,DynamicMethod,IRubyObject)" : 2 , "callMethodMissing(ThreadContext,IRubyObject,DynamicMethod,IRubyObject,Block)" : 1 , "callMethodMissing(ThreadContext,IRubyObject,DynamicMethod,IRubyObject,IRubyObject)" : 2 , "callMethodMissing(ThreadContext,IRubyObject,DynamicMethod,IRubyObject,IRubyObject,Block)" : 1 , "callMethodMissing(ThreadContext,IRubyObject,DynamicMethod,IRubyObject,IRubyObject,IRubyObject)" : 1 , "callMethodMissing(ThreadContext,IRubyObject,DynamicMethod,IRubyObject,IRubyObject,IRubyObject,Block)" : 1 , "callMethodMissing(ThreadContext,IRubyObject,DynamicMethod,IRubyObject[])" : 1 , "callMethodMissing(ThreadContext,IRubyObject,DynamicMethod,IRubyObject[],Block)" : 1 , "getCache()" : 3 , "handleBreakJump(ThreadContext,BreakJump)" : 10 , "methodMissing(DynamicMethod,IRubyObject)" : 10 , "pollAndGetClass(ThreadContext,IRubyObject)" : 10 , "retryJumpError(ThreadContext)" : 10}},{ "className" : "org::jruby::RubyKernel" , "selectors" : { "abort(ThreadContext,IRubyObject,IRubyObject[])" : 1 , "autoload(IRubyObject,IRubyObject,IRubyObject)" : 2 , "autoload(IRubyObject,IRubyObject,IRubyObject)::anonymous(IAutoloadMethod)" : 1 , "autoload_p(ThreadContext,IRubyObject,IRubyObject)" : 1 , "convertToBinding(IRubyObject)" : 1 , "createKernelModule(Ruby)" : 1 , "eval(ThreadContext,IRubyObject,IRubyObject[],Block)" : 1 , "exit(IRubyObject,IRubyObject[])" : 1 , "exit(Ruby,IRubyObject[],boolean)" : 3 , "exit_bang(IRubyObject,IRubyObject[])" : 4 , "fork(ThreadContext,IRubyObject,Block)" : 1 , "getLastlineString(ThreadContext,Ruby)" : 25 , "gets(ThreadContext,IRubyObject,IRubyObject[])" : 2 , "loadCommon(IRubyObject,Ruby,IRubyObject[],Block)" : 2 , "methodMissing(ThreadContext,IRubyObject,String,Visibility,CallType,IRubyObject[],Block)" : 5 , "methodMissingDirect(ThreadContext,IRubyObject,RubySymbol,Visibility,CallType,IRubyObject[],Block)" : 1 , "method_missing(ThreadContext,IRubyObject,IRubyObject[],Block)" : 1 , "new_array(ThreadContext,IRubyObject,IRubyObject)" : 1 , "new_float(IRubyObject,IRubyObject)" : 36 , "new_integer(ThreadContext,IRubyObject,IRubyObject)" : 1 , "open(ThreadContext,IRubyObject,IRubyObject[],Block)" : 2 , "print(ThreadContext,IRubyObject,IRubyObject[])" : 1 , "printExceptionSummary(ThreadContext,Ruby,RubyException)" : 1 , "proc(ThreadContext,IRubyObject,Block)" : 1 , "raise(ThreadContext,IRubyObject,IRubyObject[],Block)" : 4 , "rbThrowInternal(ThreadContext,String,IRubyObject[],Block)" : 2 , "require(IRubyObject,IRubyObject,Block)" : 3 , "requireCommon(Ruby,IRubyObject,IRubyObject,Block)" : 3 , "sprintf(IRubyObject,IRubyObject[])" : 1 , "sprintf(ThreadContext,IRubyObject,IRubyObject[])" : 4}},{ "className" : "org::jruby::embed::variable::GlobalVariable" , "selectors" : { "GlobalVariable(Ruby,String,Object[])" : 2 , "GlobalVariable(String,IRubyObject)" : 2 , "getInstance(Ruby,String,Object[])" : 3 , "isPredefined(String)" : 2 , "isValidName(Object)" : 4 , "retrieveByKey(Ruby,BiVariableMap,String)" : 1 , "setJavaObject(Ruby,Object)" : 2 , "tryEagerInjection(Ruby,IRubyObject)" : 2 , "updateMap(BiVariableMap,String,IRubyObject)" : 2}},{ "className" : "org::jruby::embed::EmbedRubyObjectAdapter" , "selectors" : { "callMethod(Object,String,Block,Object[])" : 1 , "callMethod(Object,String,Class<T>)" : 2 , "callMethod(Object,String,Class<T>,EmbedEvalUnit)" : 1 , "callMethod(Object,String,Object,Class<T>)" : 1 , "callMethod(Object,String,Object[])" : 1 , "callMethod(Object,String,Object[],Block,Class<T>)" : 1 , "callMethod(Object,String,Object[],Block,Class<T>,EmbedEvalUnit)" : 1 , "callMethod(Object,String,Object[],Class<T>)" : 2 , "callMethod(Object,String,Object[],Class<T>,EmbedEvalUnit)" : 1 , "callSuper(Object,Object[],Block,Class<T>)" : 1 , "callSuper(Object,Object[],Class<T>)" : 1}},{ "className" : "org::jruby::runtime::assigner::Pre2Rest0Post0Assigner" , "selectors" : { "Pre2Rest0Post0Assigner(Node,Node)" : 1 , "assign(Ruby,ThreadContext,IRubyObject,Block)" : 2 , "assign(Ruby,ThreadContext,IRubyObject,IRubyObject,Block)" : 2 , "assign(Ruby,ThreadContext,IRubyObject,IRubyObject,IRubyObject,Block)" : 2}},{ "className" : "org::jruby::embed::ScriptingContainer" , "selectors" : { "ScriptingContainer()" : 2 , "ScriptingContainer(LocalContextScope)" : 126 , "ScriptingContainer(LocalContextScope,LocalVariableBehavior)" : 7 , "callMethod(Object,String,Class<T>)" : 8 , "callMethod(Object,String,Class<T>,EmbedEvalUnit)" : 2 , "callMethod(Object,String,Object,Class<T>)" : 2 , "callMethod(Object,String,Object[])" : 5 , "callMethod(Object,String,Object[],Class<T>)" : 5 , "clear()" : 3 , "get(String)" : 13 , "getArgv()" : 2 , "getAttribute(Object)" : 11 , "getAttributeMap()" : 18 , "getClassCache()" : 4 , "getClassLoader()" : 3 , "getCompatVersion()" : 3 , "getCompileMode()" : 3 , "getCurrentDirectory()" : 3 , "getEnvironment()" : 3 , "getError()" : 6 , "getErrorWriter()" : 22 , "getHomeDirectory()" : 2 , "getInput()" : 6 , "getInstance(Object,Class<T>)" : 4 , "getJitLogEvery()" : 1 , "getJitMax()" : 2 , "getJitMaxSize()" : 1 , "getJitThreshold()" : 1 , "getKCode()" : 1 , "getLoadPaths()" : 3 , "getLoadServiceCreator()" : 1 , "getOutput()" : 6 , "getProfile()" : 3 , "getProperty(String)" : 2 , "getProvider()" : 39 , "getProviderInstance(LocalContextScope,LocalVariableBehavior)" : 1 , "getReader()" : 2 , "getRecordSeparator()" : 1 , "getScriptFilename()" : 2 , "getSupportedRubyVersion()" : 2 , "getVarMap()" : 50 , "getWriter()" : 2 , "initConfig()" : 1 , "isObjectSpaceEnabled()" : 2 , "isRunRubyInProcess()" : 3 , "newObjectAdapter()" : 2 , "newRuntimeAdapter()" : 1 , "parse(InputStream,String,int[])" : 5 , "parse(PathType,String,int[])" : 9 , "parse(Reader,String,int[])" : 9 , "parse(String,int[])" : 11 , "put(String,Object)" : 41 , "remove(String)" : 1 , "removeAttribute(Object)" : 2 , "resetErrorWriter()" : 1 , "resetWriter()" : 1 , "runScriptlet(InputStream,String)" : 2 , "runScriptlet(PathType,String)" : 16 , "runScriptlet(Reader,String)" : 2 , "runScriptlet(String)" : 29 , "runUnit(EmbedEvalUnit)" : 4 , "setArgv(String[])" : 2 , "setAttribute(Object,Object)" : 5 , "setBasicProperties()" : 1 , "setClassCache(ClassCache)" : 2 , "setClassLoader(ClassLoader)" : 2 , "setCompatVersion(CompatVersion)" : 2 , "setCompileMode(CompileMode)" : 5 , "setCurrentDirectory(String)" : 2 , "setEnvironment(Map)" : 2 , "setError(PrintStream)" : 104 , "setError(Writer)" : 2 , "setErrorStream(PrintStream)" : 2 , "setErrorWriter(Writer)" : 106 , "setHomeDirectory(String)" : 2 , "setInput(InputStream)" : 2 , "setInput(Reader)" : 1 , "setJitLogEvery(int)" : 1 , "setJitMax(int)" : 1 , "setJitMaxSize(int)" : 1 , "setJitThreshold(int)" : 1 , "setKCode(KCode)" : 2 , "setLoadPaths(List<String>)" : 6 , "setLoadServiceCreator(LoadServiceCreator)" : 1 , "setObjectSpaceEnabled(boolean)" : 1 , "setOutput(PrintStream)" : 104 , "setOutput(Writer)" : 2 , "setOutputStream(PrintStream)" : 2 , "setProfile(Profile)" : 2 , "setReader(Reader)" : 2 , "setRecordSeparator(String)" : 1 , "setRunRubyInProcess(boolean)" : 2 , "setScriptFilename(String)" : 2 , "setWriter(Writer)" : 119 , "terminate()" : 16}},{ "className" : "org::jruby::RubyBasicObject::Finalizer" , "selectors" : { "Finalizer(RubyFixnum)" : 1 , "addFinalizer(IRubyObject)" : 1 , "callFinalizer(IRubyObject)" : 2 , "removeFinalizers()" : 1}},{ "className" : "org::jruby::internal::runtime::methods::JavaMethod::JavaMethodOneOrN" , "selectors" : { "JavaMethodOneOrN(RubyModule,Visibility)" : 2 , "JavaMethodOneOrN(RubyModule,Visibility,CallConfiguration)" : 2 , "call(ThreadContext,IRubyObject,RubyModule,String,IRubyObject)" : 4}},{ "className" : "org::jruby::util::JRubyClassLoader" , "selectors" : { "JRubyClassLoader(ClassLoader)" : 11 , "addURL(URL)" : 3 , "close(Closeable)" : 2 , "defineClass(String,byte[])" : 8 , "defineClass(String,byte[],ProtectionDomain)" : 2 , "indexJarContents(URL)" : 1}},{ "className" : "org::jruby::javasupport::proxy::JavaProxyClassFactory" , "selectors" : { "addClass(Set,Map,Class,Set)" : 2 , "addInterface(Set,Map,Class,Set)" : 1 , "addInterfaces(Set,Map,Class[],Set)" : 3 , "addMethod(Map,Method)" : 1 , "addMethods(Map,Class,Set)" : 2 , "collectMethods(Class,Class[],Map,Set)" : 1 , "invokeDefineClass(ClassLoader,String,byte[])" : 1 , "newProxyClass(ClassLoader,String,Class,Class[],Set)" : 1 , "newProxyClass(Ruby,ClassLoader,String,Class,Class[],Set)" : 2 , "nextId()" : 1 , "packageName(String)" : 2 , "proxyPackageName(Class)" : 1 , "toInternalClassName(Class)" : 3 , "toInternalClassName(String)" : 3 , "validateArgs(Ruby,String,Class)" : 1}},{ "className" : "java::util::zip::InflaterInputStream" , "selectors" : { "InflaterInputStream(InputStream)" : 22 , "InflaterInputStream(InputStream,Inflater)" : 6 , "InflaterInputStream(InputStream,Inflater,int)" : 1 , "close()" : 4 , "java" : 6 , "mark(int)" : 1 , "markSupported()" : 1 , "read()" : 4 , "read(byte[],int,int)" : 2 , "reset()" : 1 , "skip(long)" : 1}},{ "className" : "org::jruby::internal::runtime::methods::TraceableInterpretedMethod" , "selectors" : { "TraceableInterpretedMethod(RubyModule,StaticScope,Node,ArgsNode,Visibility,ISourcePosition)" : 3 , "traceCall(ThreadContext,Ruby,String)" : 1 , "traceReturn(ThreadContext,Ruby,String)" : 1}},{ "className" : "org::jruby::ext::ffi::jffi::FastLongMethodFactory::Signed16ResultConverter" , "selectors" : { "Signed16ResultConverter()" : 1}},{ "className" : "org::jruby::compiler::ir::Operation" , "selectors" : { "endsBasicBlock()" : 2 , "hasSideEffects()" : 1 , "isBranch()" : 1 , "isCall()" : 3 , "isEval()" : 1 , "isException()" : 1 , "isReturn()" : 3 , "isStore()" : 1 , "startsBasicBlock()" : 1}},{ "className" : "org::jruby::compiler::impl::ChainedChildBodyCompiler" , "selectors" : { "ChainedChildBodyCompiler(StandardASMCompiler,String,ASTInspector,StaticScope,ChildScopedBodyCompiler)" : 2 , "endBody()::Label" : 1}},{ "className" : "org::jruby::test::TestAdoptedThreading::Runner" , "selectors" : { "Runner(String,int)" : 1 , "getFailureException()" : 2 , "getTest()" : 1 , "isFailed()" : 1}},{ "className" : "org::jruby::RubyFileTest" , "selectors" : { "blockdev_p(IRubyObject,IRubyObject)" : 1 , "chardev_p(IRubyObject,IRubyObject)" : 1 , "createFileTestModule(Ruby)" : 1 , "directory_p(IRubyObject,IRubyObject)" : 1 , "directory_p(Ruby,IRubyObject)" : 2 , "executable_p(IRubyObject,IRubyObject)" : 1 , "executable_real_p(IRubyObject,IRubyObject)" : 1 , "exist_p(IRubyObject,IRubyObject)" : 5 , "existsOnClasspath(IRubyObject)" : 1 , "file(IRubyObject)" : 23 , "file_in_archive(IRubyObject)" : 7 , "file_p(IRubyObject,IRubyObject)" : 1 , "grpowned_p(IRubyObject,IRubyObject)" : 1 , "identical_p(IRubyObject,IRubyObject,IRubyObject)" : 1 , "noFileError(IRubyObject)" : 1 , "owned_p(IRubyObject,IRubyObject)" : 1 , "pipe_p(IRubyObject,IRubyObject)" : 1 , "readable_p(IRubyObject,IRubyObject)" : 2 , "rowned_p(IRubyObject,IRubyObject)" : 1 , "setgid_p(IRubyObject,IRubyObject)" : 1 , "setuid_p(IRubyObject,IRubyObject)" : 1 , "size_p(IRubyObject,IRubyObject)" : 1 , "socket_p(IRubyObject,IRubyObject)" : 1 , "sticky_p(IRubyObject,IRubyObject)" : 1 , "symlink_p(IRubyObject,IRubyObject)" : 3 , "writable_p(IRubyObject,IRubyObject)" : 2 , "zero_p(IRubyObject,IRubyObject)" : 1}},{ "className" : "org::jruby::runtime::callsite::ArefCallSite" , "selectors" : { "ArefCallSite()" : 1}},{ "className" : "org::jruby::ast::java_signature::ConstructorSignatureNode" , "selectors" : { "ConstructorSignatureNode(String,List<ParameterNode>)" : 1}},{ "className" : "org::jruby::compiler::ir::operands::CompoundArray" , "selectors" : { "CompoundArray(Operand,Operand)" : 2}},{ "className" : "org::jruby::runtime::load::LoadService::TracingLoadTimer" , "selectors" : { "TracingLoadTimer()" : 1 , "getIndentString()" : 2}},{ "className" : "org::jruby::internal::runtime::methods::ProcMethod" , "selectors" : { "ProcMethod(RubyModule,RubyProc,Visibility)" : 2}},{ "className" : "org::jruby::ext::socket::RubyUNIXSocket::LibCSocket" , "selectors" : { "accept(???)" : 2 , "bind(int,sockaddr_un,int)" : 1 , "close(int)" : 3 , "connect(int,sockaddr_un,int)" : 1 , "fcntl(int,int,int)" : 2 , "getpeername(???)" : 1 , "getsockname(???)" : 2 , "listen(int,int)" : 2 , "recv(int,ByteBuffer,int,int)" : 1 , "recvfrom(???)" : 1 , "send(int,ByteBuffer,int,int)" : 1 , "setsockopt(int,int,int,byte[],int)" : 1 , "shutdown(int,int)" : 2 , "socket(int,int,int)" : 1 , "socketpair(int,int,int,int[])" : 1}},{ "className" : "org::jruby::compiler::ir::representations::BasicBlock" , "selectors" : { "BasicBlock(CFG,Label)" : 1 , "addInstr(IR_Instr)" : 3 , "getID()" : 16 , "getInstrs()" : 9 , "setRescuedBodyEndBB(BasicBlock)" : 1 , "toString()" : 1 , "toStringInstrs()" : 1}},{ "className" : "org::jruby::parser::RubyParser" , "selectors" : { "parse(ParserConfiguration,LexerSource)" : 1 , "setWarnings(IRubyWarnings)" : 1}},{ "className" : "org::jruby::ext::ffi::Platform" , "selectors" : { "Platform(OS)" : 3 , "addressSize()" : 15 , "createPlatformModule(Ruby,RubyModule)" : 1 , "determineCPU()" : 1 , "determineLibC()" : 1 , "determineLibExt()" : 1 , "determineOS()" : 2 , "determinePlatform(OS)" : 1 , "getCPU()" : 4 , "getName()" : 2 , "getOS()" : 1 , "getPlatform()" : 59 , "isBSD()" : 2 , "isSupported()" : 1 , "isUnix()" : 1 , "longSize()" : 34 , "mapLibraryName(String)" : 2}},{ "className" : "org::jruby::runtime::builtin::InstanceVariables" , "selectors" : { "copyInstanceVariablesInto(InstanceVariables)" : 1 , "fastGetInstanceVariable(String)" : 19 , "fastHasInstanceVariable(String)" : 4 , "fastSetInstanceVariable(String,IRubyObject)" : 4 , "getInstanceVariable(String)" : 8 , "getInstanceVariableList()" : 1 , "getInstanceVariableNameList()" : 1 , "hasInstanceVariable(String)" : 1 , "removeInstanceVariable(String)" : 1 , "setInstanceVariable(String,IRubyObject)" : 9}},{ "className" : "org::jruby::util::Qsort" , "selectors" : { "bubbleDown(Object[],int,int,Comparator)" : 1 , "bubbleUp(Object[],int,int,Comparator)" : 1 , "endTest(Object[],int,int,Comparator)" : 2 , "insertionsort(Object[],int,int,Comparator)" : 7 , "med3(Object,Object,Object,Comparator)" : 3 , "partition(Object[],int,int,Object,Comparator)" : 1 , "quicksort_loop(Object[],int,int,Comparator)" : 2 , "revtest(Object[],int,int,Comparator)" : 1 , "seqtest(Object[],int,int,Comparator)" : 1 , "sort(Object[],int,int,Comparator)" : 2 , "swap(Object[],int,int)" : 6}},{ "className" : "org::jruby::util::ShellLauncher::LaunchConfig" , "selectors" : { "LaunchConfig(Ruby,IRubyObject[],boolean)" : 2 , "getExecArgs()" : 4 , "hasRedirection(String)" : 1 , "isCmdBuiltin(String)" : 1 , "shouldRunInProcess()" : 2 , "shouldRunInShell()" : 1 , "shouldVerifyPathExecutable(String)" : 2 , "verifyExecutable()" : 2 , "verifyExecutableForDirect()" : 1 , "verifyExecutableForShell()" : 1}},{ "className" : "org::jruby::RubyHash" , "selectors" : { "JavaSoftBucketIndex(int,int)" : 1 , "JavaSoftCheckResize()" : 1 , "JavaSoftHashValue(int)" : 1 , "MRIBucketIndex(int,int)" : 1 , "MRICheckResize()" : 1 , "MRIHashValue(int)" : 1 , "RubyHash(Ruby)" : 4 , "RubyHash(Ruby,IRubyObject)" : 1 , "RubyHash(Ruby,Map,IRubyObject)" : 2 , "RubyHash(Ruby,RubyClass)" : 1 , "RubyHash(Ruby,RubyClass,RubyHash)" : 1 , "RubyHash(Ruby,boolean)" : 2 , "alloc()" : 5 , "bucketIndex(int,int)" : 6 , "checkDefaultProcArity(IRubyObject)" : 1 , "checkResize()" : 1 , "clear()" : 2 , "compare(ThreadContext,String,IRubyObject,Set<Pair>)" : 1 , "concurrentModification()" : 3 , "containsKey(Object)" : 2 , "containsValue(Object)" : 1 , "createHashClass(Ruby)" : 1 , "default_value_get(ThreadContext)" : 1 , "default_value_get(ThreadContext,IRubyObject)" : 1 , "default_value_set(IRubyObject)" : 1 , "delete(ThreadContext,IRubyObject,Block)" : 4 , "delete_if(ThreadContext,Block)" : 3 , "directEntrySet()" : 2 , "each(ThreadContext,Block)" : 1 , "each_key(ThreadContext,Block)" : 1 , "each_pair(ThreadContext,Block)" : 1 , "each_value(ThreadContext,Block)" : 1 , "empty_p()" : 2 , "fastARef(IRubyObject)" : 23 , "fastASet(IRubyObject,IRubyObject)" : 7 , "fastASetCheckString(Ruby,IRubyObject,IRubyObject)" : 9 , "fastASetCheckString19(Ruby,IRubyObject,IRubyObject)" : 8 , "fastDelete(IRubyObject)" : 5 , "get(Object)" : 2 , "getIfNone()" : 1 , "hasDefaultProc()" : 1 , "hasValue(ThreadContext,IRubyObject)" : 3 , "has_key_p(IRubyObject)" : 2 , "hashValue(int)" : 4 , "inspect(ThreadContext)" : 1 , "inspectHash(ThreadContext)" : 1 , "inspectHash(ThreadContext)::ByteList" : 1 , "internalCopyTable(RubyHashEntry)" : 1 , "internalDelete(IRubyObject)" : 6 , "internalDelete(int,EntryMatchType,Object)" : 2 , "internalDeleteEntry(RubyHashEntry)" : 4 , "internalGet(IRubyObject)" : 8 , "internalGetEntry(IRubyObject)" : 5 , "internalIndex(ThreadContext,IRubyObject)" : 4 , "internalKeyExist(RubyHashEntry,int,IRubyObject)" : 2 , "internalPut(IRubyObject,IRubyObject)" : 7 , "internalPut(IRubyObject,IRubyObject,boolean)" : 2 , "isComparedByIdentity()" : 8 , "isEmpty()" : 1 , "iteratorEntry()" : 1 , "iteratorExit()" : 1 , "iteratorVisitAll(Visitor)" : 8 , "key(ThreadContext,IRubyObject)" : 1 , "keys()" : 1 , "marshalTo(RubyHash,MarshalStream)" : 1 , "merge_bang(ThreadContext,IRubyObject,Block)" : 1 , "modify()" : 13 , "newHash(Ruby)" : 18 , "op_aref(ThreadContext,IRubyObject)" : 15 , "op_aset(ThreadContext,IRubyObject,IRubyObject)" : 18 , "op_aset19(ThreadContext,IRubyObject,IRubyObject)" : 1 , "op_asetForString(Ruby,RubyString,IRubyObject)" : 2 , "overThreshold()" : 1 , "rb_clear()" : 3 , "reject(ThreadContext,Block)" : 1 , "reject_bang(ThreadContext,Block)" : 1 , "remove(Object)" : 1 , "replace(ThreadContext,IRubyObject)" : 2 , "replace19(ThreadContext,IRubyObject)" : 1 , "replaceCommon(ThreadContext,IRubyObject,Visitor)" : 1 , "replaceCommon19(ThreadContext,IRubyObject,Visitor)" : 1 , "resize(int)" : 2 , "resizeAndAdjustThreshold(RubyHashEntry[])" : 1 , "setComparedByIdentity(boolean)" : 5 , "size()" : 9 , "to_a()" : 4 , "unmarshalFrom(UnmarshalStream,boolean)" : 2 , "values_at(ThreadContext,IRubyObject[])" : 1 , "visitAll(Visitor)" : 21}},{ "className" : "org::jruby::RubyFixnum" , "selectors" : { "RubyFixnum(Ruby,long)" : 8 , "RubyFixnum(RubyClass,long)" : 1 , "abs(ThreadContext)" : 1 , "addAsBignum(ThreadContext,RubyFixnum)" : 1 , "addAsBignum(ThreadContext,long)" : 1 , "addFixnum(ThreadContext,RubyFixnum)" : 1 , "addFixnum(ThreadContext,long)" : 1 , "addOther(ThreadContext,IRubyObject)" : 1 , "additionOverflowed(long,long,long)" : 2 , "checkZeroDivisionError(ThreadContext,IRubyObject)" : 3 , "compareFixnum(Ruby,RubyFixnum)" : 2 , "compareOther(ThreadContext,IRubyObject)" : 1 , "compareToOther(IRubyObject)" : 1 , "createFixnumClass(Ruby)" : 1 , "div_div(ThreadContext,IRubyObject)" : 1 , "divmod(ThreadContext,IRubyObject)" : 1 , "divmodFixnum(ThreadContext,IRubyObject)" : 1 , "eql(IRubyObject)" : 2 , "fixCoerce(IRubyObject)" : 4 , "four(Ruby)" : 1 , "getDoubleValue()" : 3 , "getLongValue()" : 148 , "hashCode()" : 1 , "idiv(ThreadContext,IRubyObject,String)" : 2 , "idiv(ThreadContext,long,String)" : 1 , "idivLong(ThreadContext,long,long)" : 2 , "isInCacheRange(long)" : 1 , "lshift(long)" : 2 , "minus_one(Ruby)" : 20 , "moduloFixnum(ThreadContext,IRubyObject)" : 1 , "multiplyFixnum(ThreadContext,IRubyObject)" : 1 , "multiplyOther(ThreadContext,IRubyObject)" : 1 , "newFixnum(Ruby,long)" : 171 , "newFixnum(long)" : 4 , "one(Ruby)" : 71 , "op_div(ThreadContext,IRubyObject)" : 1 , "op_div(ThreadContext,long)" : 1 , "op_equal(ThreadContext,IRubyObject)" : 1 , "op_equalOther(ThreadContext,IRubyObject)" : 1 , "op_ge(ThreadContext,IRubyObject)" : 1 , "op_ge(ThreadContext,long)" : 1 , "op_geOther(ThreadContext,IRubyObject)" : 1 , "op_gt(ThreadContext,IRubyObject)" : 1 , "op_gt(ThreadContext,long)" : 1 , "op_gtOther(ThreadContext,IRubyObject)" : 1 , "op_le(ThreadContext,IRubyObject)" : 1 , "op_le(ThreadContext,long)" : 1 , "op_leOther(ThreadContext,IRubyObject)" : 1 , "op_lt(ThreadContext,IRubyObject)" : 3 , "op_lt(ThreadContext,long)" : 1 , "op_ltOther(ThreadContext,IRubyObject)" : 1 , "op_minus(ThreadContext,IRubyObject)" : 5 , "op_minus(ThreadContext,long)" : 1 , "op_mod(ThreadContext,IRubyObject)" : 1 , "op_mul(ThreadContext,IRubyObject)" : 1 , "op_mul(ThreadContext,long)" : 2 , "op_plus(ThreadContext,IRubyObject)" : 3 , "op_plus(ThreadContext,long)" : 1 , "powerFixnum(ThreadContext,IRubyObject)" : 1 , "powerFixnum19(ThreadContext,IRubyObject)" : 1 , "powerOther(ThreadContext,IRubyObject)" : 1 , "powerOther19(ThreadContext,IRubyObject)" : 1 , "rshift(long)" : 2 , "subtractAsBignum(ThreadContext,RubyFixnum)" : 1 , "subtractAsBignum(ThreadContext,long)" : 1 , "subtractFixnum(ThreadContext,RubyFixnum)" : 1 , "subtractFixnum(ThreadContext,long)" : 1 , "subtractOther(ThreadContext,IRubyObject)" : 1 , "subtractionOverflowed(long,long,long)" : 2 , "three(Ruby)" : 2 , "to_s()" : 1 , "to_s(IRubyObject)" : 1 , "two(Ruby)" : 11 , "unmarshalFrom(UnmarshalStream)" : 1 , "zero(Ruby)" : 148}},{ "className" : "org::jruby::java::dispatch::CallableSelector" , "selectors" : { "argClass(IRubyObject)" : 7 , "argClassTypeError(Object)" : 1 , "argTypesDoNotMatch(Ruby,IRubyObject,Object[],Object[])" : 7 , "argsHashCode(IRubyObject)" : 2 , "argsHashCode(IRubyObject,IRubyObject)" : 2 , "argsHashCode(IRubyObject,IRubyObject,IRubyObject)" : 2 , "argsHashCode(IRubyObject,IRubyObject,IRubyObject,IRubyObject)" : 1 , "argsHashCode(IRubyObject[])" : 2 , "argumentError(ThreadContext,Object,IRubyObject,List<Class<?>>)" : 1 , "assignable(Class,IRubyObject)" : 1 , "assignableAndPrimitivable(ParameterTypes,IRubyObject[])" : 1 , "assignableAndPrimitivableWithVarargs(ParameterTypes,IRubyObject[])" : 1 , "assignableOrDuckable(ParameterTypes,IRubyObject[])" : 1 , "classHashCode(IRubyObject)" : 5 , "duckable(Class,IRubyObject)" : 1 , "exactMatch(ParameterTypes,IRubyObject[])" : 1 , "findCallable(ParameterTypes[],CallableAcceptor,IRubyObject[])" : 4 , "findCallable(ParameterTypes[],IRubyObject[])" : 1 , "findMatchingCallableForArgs(Map,int,ParameterTypes[],IRubyObject[])" : 6 , "getExactnessScore(ParameterTypes,IRubyObject[])" : 1 , "matchingCallableArityFour(Map,JavaCallable[],IRubyObject,IRubyObject,IRubyObject,IRubyObject)" : 1 , "matchingCallableArityN(Map,JavaCallable[],IRubyObject[],int)" : 3 , "matchingCallableArityN(Map,ParameterTypes[],IRubyObject[],int)" : 1 , "matchingCallableArityOne(Map,JavaCallable[],IRubyObject)" : 1 , "matchingCallableArityThree(Map,JavaCallable[],IRubyObject,IRubyObject,IRubyObject)" : 1 , "matchingCallableArityTwo(Map,JavaCallable[],IRubyObject,IRubyObject)" : 1 , "primitivable(Class,IRubyObject)" : 1 , "warnMultipleMatches(IRubyObject[],List<ParameterTypes>)" : 1}},{ "className" : "org::jruby::ext::ffi::ArrayMemoryIO::ArrayIO" , "selectors" : { "getAddress(byte[],int)" : 1 , "getFloat32(byte[],int)" : 2 , "getFloat64(byte[],int)" : 2 , "getInt16(byte[],int)" : 2 , "getInt32(byte[],int)" : 3 , "getInt64(byte[],int)" : 3 , "putAddress(byte[],int,long)" : 1 , "putFloat32(byte[],int,float)" : 2 , "putFloat64(byte[],int,double)" : 2 , "putInt16(byte[],int,int)" : 2 , "putInt32(byte[],int,int)" : 3 , "putInt64(byte[],int,long)" : 3}},{ "className" : "org::jruby::compiler::ASTCompiler" , "selectors" : { "ASTCompiler()" : 1 , "addConditionalForWhen(WhenNode,List<ArgumentsCallback>,List<CompilerCallback>,CompilerCallback)" : 1 , "becomeTrueOrFalse(BodyCompiler)" : 1 , "compile(Node,BodyCompiler,boolean)" : 145 , "compileAlias(AliasNode,BodyCompiler,boolean)" : 1 , "compileAnd(Node,BodyCompiler,boolean)" : 1 , "compileArgs(Node,BodyCompiler,boolean)" : 3 , "compileArgsCat(Node,BodyCompiler,boolean)" : 1 , "compileArgsCatArguments(Node,BodyCompiler,boolean)" : 1 , "compileArgsPush(Node,BodyCompiler,boolean)" : 1 , "compileArgsPushArguments(Node,BodyCompiler,boolean)" : 1 , "compileArguments(Node,BodyCompiler)" : 3 , "compileArray(Node,BodyCompiler,boolean)" : 1 , "compileArrayArguments(Node,BodyCompiler,boolean)" : 1 , "compileAssignment(Node,BodyCompiler,boolean)" : 11 , "compileAttrAssign(Node,BodyCompiler,boolean)" : 1 , "compileAttrAssignAssignment(Node,BodyCompiler,boolean)" : 1 , "compileBackref(Node,BodyCompiler,boolean)" : 1 , "compileBegin(Node,BodyCompiler,boolean)" : 1 , "compileBignum(Node,BodyCompiler,boolean)" : 1 , "compileBlock(Node,BodyCompiler,boolean)" : 1 , "compileBreak(Node,BodyCompiler,boolean)" : 1 , "compileCall(Node,BodyCompiler,boolean)" : 1 , "compileCase(Node,BodyCompiler,boolean)" : 1 , "compileClass(Node,BodyCompiler,boolean)" : 1 , "compileClassVar(Node,BodyCompiler,boolean)" : 1 , "compileClassVarAsgn(Node,BodyCompiler,boolean)" : 1 , "compileClassVarAsgnAssignment(Node,BodyCompiler,boolean)" : 1 , "compileClassVarDecl(Node,BodyCompiler,boolean)" : 1 , "compileClassVarDeclAssignment(Node,BodyCompiler,boolean)" : 1 , "compileColon2(Node,BodyCompiler,boolean)" : 1 , "compileColon3(Node,BodyCompiler,boolean)" : 1 , "compileConst(Node,BodyCompiler,boolean)" : 1 , "compileConstDecl(Node,BodyCompiler,boolean)" : 1 , "compileConstDeclAssignment(Node,BodyCompiler,boolean)" : 1 , "compileDAsgn(Node,BodyCompiler,boolean)" : 1 , "compileDRegexp(Node,BodyCompiler,boolean)" : 1 , "compileDStr(Node,BodyCompiler,boolean)" : 1 , "compileDSymbol(Node,BodyCompiler,boolean)" : 1 , "compileDVar(Node,BodyCompiler,boolean)" : 1 , "compileDXStr(Node,BodyCompiler,boolean)" : 1 , "compileDefined(Node,BodyCompiler,boolean)" : 1 , "compileDefn(Node,BodyCompiler,boolean)" : 1 , "compileDefs(Node,BodyCompiler,boolean)" : 1 , "compileDot(Node,BodyCompiler,boolean)" : 1 , "compileEnsureNode(Node,BodyCompiler,boolean)" : 1 , "compileEvStr(Node,BodyCompiler,boolean)" : 1 , "compileFCall(Node,BodyCompiler,boolean)" : 1 , "compileFalse(Node,BodyCompiler,boolean)" : 1 , "compileFixnum(Node,BodyCompiler,boolean)" : 1 , "compileFlip(Node,BodyCompiler,boolean)" : 1 , "compileFloat(Node,BodyCompiler,boolean)" : 1 , "compileFor(Node,BodyCompiler,boolean)" : 1 , "compileForIter(Node,BodyCompiler)" : 1 , "compileGetArgumentDefinition(Node,BodyCompiler,String)" : 4 , "compileGetDefinition(Node,BodyCompiler)" : 6 , "compileGetDefinitionBase(Node,BodyCompiler)" : 3 , "compileGlobalAsgn(Node,BodyCompiler,boolean)" : 1 , "compileGlobalAsgnAssignment(Node,BodyCompiler,boolean)" : 1 , "compileGlobalVar(Node,BodyCompiler,boolean)" : 1 , "compileHash(Node,BodyCompiler,boolean)" : 1 , "compileHashCommon(HashNode,BodyCompiler,boolean)" : 2 , "compileIf(Node,BodyCompiler,boolean)" : 1 , "compileInstAsgn(Node,BodyCompiler,boolean)" : 1 , "compileInstAsgnAssignment(Node,BodyCompiler,boolean)" : 1 , "compileInstVar(Node,BodyCompiler,boolean)" : 1 , "compileIter(Node,BodyCompiler)" : 1 , "compileLiteral(LiteralNode,BodyCompiler)" : 1 , "compileLocalAsgn(Node,BodyCompiler,boolean)" : 1 , "compileLocalVar(Node,BodyCompiler,boolean)" : 1 , "compileMatch(Node,BodyCompiler,boolean)" : 1 , "compileMatch2(Node,BodyCompiler,boolean)" : 1 , "compileMatch3(Node,BodyCompiler,boolean)" : 1 , "compileModule(Node,BodyCompiler,boolean)" : 1 , "compileMultipleAsgn(Node,BodyCompiler,boolean)" : 1 , "compileMultipleAsgnAssignment(Node,BodyCompiler,boolean)" : 2 , "compileNewline(Node,BodyCompiler,boolean)" : 1 , "compileNext(Node,BodyCompiler,boolean)" : 1 , "compileNil(Node,BodyCompiler,boolean)" : 1 , "compileNot(Node,BodyCompiler,boolean)" : 1 , "compileNthRef(Node,BodyCompiler,boolean)" : 1 , "compileOpAsgn(Node,BodyCompiler,boolean)" : 1 , "compileOpAsgnAnd(Node,BodyCompiler,boolean)" : 1 , "compileOpAsgnOr(Node,BodyCompiler,boolean)" : 1 , "compileOpAsgnWithAnd(Node,BodyCompiler,boolean)" : 1 , "compileOpAsgnWithMethod(Node,BodyCompiler,boolean)" : 1 , "compileOpAsgnWithOr(Node,BodyCompiler,boolean)" : 1 , "compileOpElementAsgn(Node,BodyCompiler,boolean)" : 1 , "compileOpElementAsgnWithAnd(Node,BodyCompiler,boolean)" : 1 , "compileOpElementAsgnWithMethod(Node,BodyCompiler,boolean)" : 1 , "compileOpElementAsgnWithOr(Node,BodyCompiler,boolean)" : 1 , "compileOptimizedMultipleAsgn(MultipleAsgnNode,BodyCompiler,boolean)" : 1 , "compileOr(Node,BodyCompiler,boolean)" : 1 , "compilePostExe(Node,BodyCompiler,boolean)" : 1 , "compilePreExe(Node,BodyCompiler,boolean)" : 1 , "compileRedo(Node,BodyCompiler,boolean)" : 1 , "compileRegexp(Node,BodyCompiler,boolean)" : 1 , "compileRescue(Node,BodyCompiler,boolean)" : 1 , "compileRescueBodyInternal(Node,BodyCompiler,boolean)" : 2 , "compileRescueInternal(Node,BodyCompiler,boolean)" : 3 , "compileRetry(Node,BodyCompiler,boolean)" : 1 , "compileReturn(Node,BodyCompiler,boolean)" : 1 , "compileRoot(Node,ScriptCompiler,ASTInspector)" : 1 , "compileRoot(Node,ScriptCompiler,ASTInspector,boolean,boolean)" : 3 , "compileSClass(Node,BodyCompiler,boolean)" : 1 , "compileSValue(Node,BodyCompiler,boolean)" : 1 , "compileSelf(Node,BodyCompiler,boolean)" : 1 , "compileSplat(Node,BodyCompiler,boolean)" : 1 , "compileSplatArguments(Node,BodyCompiler,boolean)" : 1 , "compileStr(Node,BodyCompiler,boolean)" : 1 , "compileSuper(Node,BodyCompiler,boolean)" : 1 , "compileSymbol(Node,BodyCompiler,boolean)" : 1 , "compileToAry(Node,BodyCompiler,boolean)" : 1 , "compileTrue(Node,BodyCompiler,boolean)" : 1 , "compileUndef(UndefNode,BodyCompiler,boolean)" : 1 , "compileUnoptimizedMultipleAsgn(MultipleAsgnNode,BodyCompiler,boolean)" : 2 , "compileUntil(Node,BodyCompiler,boolean)" : 1 , "compileVAlias(Node,BodyCompiler,boolean)" : 1 , "compileVCall(Node,BodyCompiler,boolean)" : 1 , "compileWhen(Node,List<Node>,Node,BodyCompiler,boolean,boolean)" : 1 , "compileWhile(Node,BodyCompiler,boolean)" : 1 , "compileXStr(Node,BodyCompiler,boolean)" : 1 , "compileYield(Node,BodyCompiler,boolean)" : 1 , "compileZArray(Node,BodyCompiler,boolean)" : 1 , "compileZSuper(Node,BodyCompiler,boolean)" : 1 , "flipTrueOrFalse(BodyCompiler)" : 1 , "getArgsCallback(Node)" : 11 , "getBlock(Node)" : 4 , "getHomogeneousSwitchType(List<Node>)" : 1 , "getLiteralSend(CallNode)" : 1 , "getOptimizedCases(WhenNode)" : 1 , "isListAllLiterals(ListNode)" : 4 , "needsDefinitionCheck(Node)" : 1 , "splatCurrentValue(BodyCompiler)" : 4}},{ "className" : "org::jruby::java::invokers::RubyToJavaInvoker" , "selectors" : { "RubyToJavaInvoker(RubyModule,Member[])" : 3 , "convertArg(IRubyObject,JavaCallable,int)" : 57 , "convertVarargs(IRubyObject[],JavaCallable)" : 3 , "createCallable(Ruby,Member)" : 2 , "createCallableArray(JavaCallable)" : 1 , "createCallableArray(int)" : 2 , "createCallableArrayArray(int)" : 1 , "findCallable(IRubyObject,String,IRubyObject[],int)" : 6 , "findCallableArityFour(IRubyObject,String,IRubyObject,IRubyObject,IRubyObject,IRubyObject)" : 3 , "findCallableArityOne(IRubyObject,String,IRubyObject)" : 6 , "findCallableArityThree(IRubyObject,String,IRubyObject,IRubyObject,IRubyObject)" : 6 , "findCallableArityTwo(IRubyObject,String,IRubyObject,IRubyObject)" : 6 , "findCallableArityZero(IRubyObject,String)" : 3 , "getAccessibleObjects()" : 3 , "getMemberParameterTypes(Member)" : 1 , "getMembers()" : 1 , "isMemberVarArgs(Member)" : 1 , "raiseNoMatchingCallableError(String,IRubyObject,Object[])" : 1 , "trySetAccessible(AccessibleObject[])" : 3}},{ "className" : "org::jruby::util::JRubyFile" , "selectors" : { "JRubyFile(File)" : 3 , "JRubyFile(String)" : 12 , "canRead(???)" : 5 , "canWrite(???)" : 2 , "create(String,String)" : 27 , "createNewFile(???)" : 2 , "createNoUnicodeConversion(String,String)" : 4 , "createNoUnicodeConversion(String,String)::JavaSecuredFile" : 2 , "delete(???)" : 3 , "exists(???)" : 31 , "getAbsolutePath()" : 24 , "getCanonicalPath()" : 5 , "getFileProperty(String)" : 1 , "getParent()" : 1 , "getParentFile()" : 2 , "getPath()" : 1 , "isAbsolute(???)" : 2 , "isDirectory(???)" : 3 , "isFile(???)" : 5 , "lastModified(???)" : 1 , "length(???)" : 4 , "normalizeSeps(String)" : 9 , "renameTo(???)" : 2 , "toString()" : 6}},{ "className" : "org::jruby::RubyClass" , "selectors" : { "RubyClass(Ruby)" : 4 , "RubyClass(Ruby,RubyClass)" : 3 , "RubyClass(Ruby,RubyClass,CallSite[])" : 1 , "RubyClass(Ruby,RubyClass,boolean)" : 3 , "addClassAnnotation(Class,Map)" : 1 , "addMethodAnnotation(String,Class,Map)" : 1 , "addMethodSignature(String,Class[])" : 1 , "addParameterAnnotation(String,int,Class,Map<String,Object>)" : 1 , "addSubclass(RubyClass)" : 6 , "allocate()" : 35 , "allocateVariableAccessor()" : 2 , "becomeSynchronized()" : 3 , "checkInheritable(IRubyObject)" : 5 , "checkNotInitialized()" : 5 , "createBootstrapClass(Ruby,String,RubyClass,ObjectAllocator)" : 5 , "createClassClass(Ruby,RubyClass)" : 1 , "dumpReifiedClass(String,String,byte[])" : 1 , "finvoke(ThreadContext,IRubyObject,String)" : 1 , "finvoke(ThreadContext,IRubyObject,String,Block)" : 3 , "finvoke(ThreadContext,IRubyObject,String,IRubyObject)" : 1 , "finvoke(ThreadContext,IRubyObject,String,IRubyObject,Block)" : 3 , "finvoke(ThreadContext,IRubyObject,String,IRubyObject,IRubyObject)" : 1 , "finvoke(ThreadContext,IRubyObject,String,IRubyObject,IRubyObject,Block)" : 3 , "finvoke(ThreadContext,IRubyObject,String,IRubyObject,IRubyObject,IRubyObject)" : 1 , "finvoke(ThreadContext,IRubyObject,String,IRubyObject,IRubyObject,IRubyObject,Block)" : 2 , "finvoke(ThreadContext,IRubyObject,String,IRubyObject[])" : 1 , "finvoke(ThreadContext,IRubyObject,String,IRubyObject[],Block)" : 4 , "finvokeChecked(ThreadContext,IRubyObject,String)" : 1 , "generateMethodAnnotations(Map<Class,Map<String,Object>>,SkinnyMethodAdapter,List<Map<Class,Map<String,Object>>>)" : 3 , "getAllocator()" : 43 , "getBaseCallSites()" : 3 , "getClassRuntime()" : 3 , "getMarshal()" : 2 , "getMethodAnnotations()" : 1 , "getMethodSignatures()" : 1 , "getObjectIdAccessorForWrite()" : 1 , "getParameterAnnotations()" : 1 , "getRealClass()" : 81 , "getReifiedClass()" : 7 , "getVariableAccessorForRead(String)" : 6 , "getVariableAccessorForWrite(String)" : 7 , "getVariableAccessorsForRead()" : 6 , "getVariableTableSize()" : 2 , "getVariableTableSizeWithObjectId()" : 4 , "inherit(RubyClass)" : 6 , "initializeCommon(RubyClass,Block,boolean)" : 4 , "invalidateCacheDescendants()" : 2 , "invoke(ThreadContext,IRubyObject,String,IRubyObject,CallType,Block)" : 1 , "invoke(ThreadContext,IRubyObject,String,IRubyObject[],CallType,Block)" : 2 , "invokeInherited(ThreadContext,IRubyObject,IRubyObject)" : 1 , "isSingleton()" : 15 , "makeMetaClass(RubyClass)" : 9 , "marshal(Object,MarshalStream)" : 2 , "marshalTo(RubyClass,MarshalStream)" : 1 , "newClass(Ruby,RubyClass)" : 5 , "newClass(Ruby,RubyClass,CallSite[])" : 1 , "newClass(Ruby,RubyClass,String,ObjectAllocator,RubyModule,boolean)" : 1 , "newClass(Ruby,RubyClass,String,ObjectAllocator,RubyModule,boolean,CallSite[])" : 1 , "newInstance(ThreadContext,IRubyObject[],Block)" : 26 , "notVisibleAndNotMethodMissing(DynamicMethod,String,IRubyObject,CallType)" : 1 , "reify()" : 2 , "reify(String)" : 2 , "removeSubclass(RubyClass)" : 1 , "replaceSubclass(RubyClass,RubyClass)" : 1 , "setAllocator(ObjectAllocator)" : 6 , "setClassAllocator(Class)" : 2 , "setMarshal(ObjectMarshal)" : 4 , "setReifiedClass(Class)" : 36 , "setRubyClassAllocator(Class)" : 1 , "shouldCallMethodMissing(DynamicMethod)" : 10 , "shouldCallMethodMissing(DynamicMethod,String,IRubyObject,CallType)" : 10 , "subclasses(boolean)" : 2 , "unmarshal(UnmarshalStream)" : 1 , "unmarshalFrom(UnmarshalStream)" : 1}},{ "className" : "org::jruby::ext::ffi::Pointer" , "selectors" : { "Pointer(Ruby,DirectMemoryIO)" : 10 , "Pointer(Ruby,RubyClass)" : 2 , "Pointer(Ruby,RubyClass,DirectMemoryIO)" : 4 , "Pointer(Ruby,RubyClass,DirectMemoryIO,long)" : 4 , "Pointer(Ruby,RubyClass,DirectMemoryIO,long,int)" : 4 , "createPointerClass(Ruby,RubyModule)" : 1 , "getAddress()" : 11 , "getPointer(Ruby,long)" : 1 , "getPointerClass(Ruby)" : 5}},{ "className" : "org::jruby::compiler::impl::ChildScopedBodyCompiler19" , "selectors" : { "ChildScopedBodyCompiler19(StandardASMCompiler,String,ASTInspector,StaticScope)" : 1 , "getSignature()" : 1}},{ "className" : "org::jruby::ast::YieldNode" , "selectors" : { "YieldNode(ISourcePosition,Node,boolean)" : 6 , "getArgsNode()" : 5 , "getExpandArguments()" : 2}},{ "className" : "org::jruby::embed::variable::ClassVariable" , "selectors" : { "ClassVariable(IRubyObject,String,IRubyObject)" : 1 , "ClassVariable(Ruby,String,Object[])" : 1 , "getInstance(Ruby,String,Object[])" : 2 , "isValidName(Object)" : 2 , "retrieve(Ruby,IRubyObject,BiVariableMap)" : 1}},{ "className" : "javax::swing::text::DocumentFilter" , "selectors" : { "insertString(FilterBypass,int,String,AttributeSet)" : 3 , "remove(FilterBypass,int,int)" : 1 , "replace(FilterBypass,int,int,String,AttributeSet)" : 3}},{ "className" : "org::jruby::RubyMatchData" , "selectors" : { "RubyMatchData(Ruby)" : 1 , "RubyMatchData(Ruby,RubyClass)" : 1 , "backrefNumber(IRubyObject)" : 6 , "beginCommon(Ruby,int)" : 2 , "check()" : 12 , "checkLazyRegexp()" : 2 , "createMatchDataClass(Ruby)" : 1 , "endCommon(Ruby,int)" : 2 , "group(int)" : 1 , "match_array(Ruby,int)" : 2 , "nameToBackrefNumber(RubyString)" : 4 , "offsetCommon(ThreadContext,int,boolean)" : 2 , "op_aref(IRubyObject)" : 1 , "op_aref(IRubyObject,IRubyObject)" : 1 , "op_arefCommon(IRubyObject)" : 2 , "to_a()" : 5 , "updateCharOffset()" : 3 , "updateCharOffset()::Region" : 1 , "use()" : 9 , "used()" : 1}},{ "className" : "org::jruby::ext::ffi::jffi::DefaultMethodFactory::BufferMarshaller" , "selectors" : { "BufferMarshaller(int)" : 3 , "BufferMarshaller(int,boolean)" : 2 , "bufferFlags(Buffer)" : 1 , "getAddress(Pointer)" : 3}},{ "className" : "org::jruby::parser::JavaSignatureParser" , "selectors" : { "JavaSignatureParser()" : 1 , "yyDefault(Object)" : 1 , "yyExpecting(int)" : 1 , "yyerror(String,String[],String)" : 1 , "yyparse(JavaSignatureLexer)" : 2}},{ "className" : "org::jruby::compiler::ir::instructions::RESCUED_BODY_END_MARKER_Instr" , "selectors" : { "RESCUED_BODY_END_MARKER_Instr(RESCUED_BODY_START_MARKER_Instr)" : 1}},{ "className" : "org::jruby::RubyEncoding" , "selectors" : { "RubyEncoding(???)" : 2 , "RubyEncoding(Ruby,byte[],boolean)" : 1 , "RubyEncoding(Ruby,byte[],int,int,boolean)" : 2 , "RubyEncoding(Ruby,byte[],int,int,boolean)::ByteList" : 1 , "areCompatible(???)" : 1 , "convertEncodingToRubyEncoding(???)" : 1 , "createEncodingClass(Ruby)" : 1 , "decode(byte[],Charset)" : 1 , "decode(byte[],int,int,Charset)" : 1 , "decodeUTF8(byte[])" : 2 , "decodeUTF8(byte[],int,int)" : 7 , "encode(CharSequence,Charset)" : 1 , "encode(String,Charset)" : 1 , "encodeUTF8(CharSequence)" : 1 , "encodeUTF8(String)" : 4 , "find(ThreadContext,IRubyObject,IRubyObject)" : 1 , "getDefaultExternal(Ruby)" : 3 , "getDefaultInternal(Ruby)" : 4 , "getEncoding(???)" : 1 , "getEncodingFromObject(???)" : 4 , "inspect(ThreadContext)::ByteList" : 1 , "locale_charmap(ThreadContext,IRubyObject)::ByteList" : 1 , "newEncoding(Ruby,byte[],int,int,boolean)" : 1 , "to_s(ThreadContext)" : 1}},{ "className" : "org::jruby::RubyLocalJumpError" , "selectors" : { "RubyLocalJumpError(Ruby,RubyClass)" : 1 , "RubyLocalJumpError(Ruby,RubyClass,String,Reason,IRubyObject)" : 2 , "createLocalJumpErrorClass(Ruby,RubyClass)" : 1 , "exit_value()" : 4 , "getReason()" : 1 , "reason()" : 2}},{ "className" : "org::jruby::RubyNameError" , "selectors" : { "RubyNameError(Ruby,RubyClass)" : 1 , "RubyNameError(Ruby,RubyClass,String)" : 2 , "RubyNameError(Ruby,RubyClass,String,String)" : 3 , "copySpecialInstanceVariables(IRubyObject)" : 1 , "createNameErrorClass(Ruby,RubyClass)" : 1 , "createNameErrorMessageClass(Ruby,RubyClass)" : 1 , "initialize(IRubyObject[],Block)" : 1}},{ "className" : "org::jruby::ast::OpAsgnAndNode" , "selectors" : { "OpAsgnAndNode(ISourcePosition,Node,Node)" : 5 , "getFirstNode()" : 2 , "getSecondNode()" : 2 , "interpret(Ruby,ThreadContext,IRubyObject,Block)" : 1}},{ "className" : "org::jruby::RubyProcess::RubyStatus" , "selectors" : { "RubyStatus(Ruby,RubyClass,long)" : 1 , "inspect(Ruby)" : 2 , "newProcessStatus(Ruby,long)" : 10 , "op_rshift(Ruby,IRubyObject)" : 2 , "shiftedValue()" : 2 , "to_i(Ruby)" : 3 , "to_s(Ruby)" : 2}},{ "className" : "org::jruby::test::ITest" , "selectors" : { "exec(String)" : 1}},{ "className" : "org::jruby::runtime::InterpretedBlock" , "selectors" : { "InterpretedBlock(IterNode,Arity,int)" : 3 , "InterpretedBlock(IterNode,int)" : 1 , "assignerFor(IterNode)" : 1 , "evalBlockBody(ThreadContext,IRubyObject)" : 6 , "getBodyNode()" : 2 , "handleNextJump(ThreadContext,NextJump,Type)" : 6 , "newBlockBody(IterNode,Arity,int)" : 1 , "newInterpretedClosure(ThreadContext,BlockBody,IRubyObject)" : 2 , "newInterpretedClosure(ThreadContext,IterNode,IRubyObject)" : 1 , "post(ThreadContext,Binding,Visibility,Frame)" : 6 , "pre(ThreadContext,RubyModule,Binding)" : 6 , "prepareSelf(Binding)" : 6 , "yield(ThreadContext,Binding,Type)" : 1 , "yield(ThreadContext,IRubyObject,Binding,Type,Block)" : 1 , "yield(ThreadContext,IRubyObject,IRubyObject,RubyModule,boolean,Binding,Type)" : 1 , "yield(ThreadContext,IRubyObject,IRubyObject,RubyModule,boolean,Binding,Type,Block)" : 1}},{ "className" : "org::jruby::compiler::VariableCompiler" , "selectors" : { "assignBackRef()" : 1 , "assignBackRef(CompilerCallback)" : 1 , "assignLastLine()" : 1 , "assignLastLine(CompilerCallback)" : 1 , "assignLocalVariable(int,boolean)" : 6 , "assignLocalVariable(int,int,CompilerCallback,boolean)" : 2 , "assignLocalVariable(int,int,boolean)" : 8 , "assignMethodArguments(Object,int,Object,int,ArrayCallback,ArrayCallback,ArrayCallback,CompilerCallback,CompilerCallback)" : 1 , "assignMethodArguments19(Object,int,Object,int,int,Object,int,ArrayCallback,ArrayCallback,ArrayCallback,CompilerCallback,CompilerCallback)" : 1 , "beginClass(CompilerCallback,StaticScope)" : 1 , "beginClosure(CompilerCallback,StaticScope)" : 1 , "beginFlatClosure(CompilerCallback,StaticScope)" : 1 , "beginMethod(CompilerCallback,StaticScope)" : 2 , "checkMethodArity(int,int,int)" : 3 , "declareLocals(???)" : 3 , "getMethodAdapter()" : 3 , "getTempLocal(int)" : 14 , "grabTempLocal()" : 13 , "releaseTempLocal()" : 11 , "retrieveBackRef()" : 1 , "retrieveLastLine()" : 1 , "retrieveLocalVariable(int,int)" : 5 , "setMethodAdapter(SkinnyMethodAdapter)" : 6 , "setTempLocal(int)" : 11}},{ "className" : "org::jruby::javasupport::JavaAccessibleObject" , "selectors" : { "JavaAccessibleObject(Ruby,RubyClass)" : 2 , "accessibleObject()" : 18 , "equals(Object)" : 1 , "hashCode()" : 1 , "registerRubyMethods(Ruby,RubyClass)" : 3}},{ "className" : "java::nio::channels::DatagramChannel" , "selectors" : { "connect(SocketAddress)" : 3 , "open()" : 4 , "read(ByteBuffer)" : 1 , "receive(ByteBuffer)" : 3 , "send(ByteBuffer,SocketAddress)" : 2 , "socket()" : 18 , "write(ByteBuffer)" : 2}},{ "className" : "org::jruby::runtime::callsite::SuperCallSite" , "selectors" : { "SuperCallSite()" : 1 , "cacheAndCall(IRubyObject,RubyClass,Block,IRubyObject[],ThreadContext,IRubyObject,String)" : 1 , "cacheAndCall(IRubyObject,RubyClass,Block,ThreadContext,IRubyObject,String)" : 1 , "cacheAndCall(IRubyObject,RubyClass,Block,ThreadContext,IRubyObject,String,IRubyObject)" : 1 , "cacheAndCall(IRubyObject,RubyClass,Block,ThreadContext,IRubyObject,String,IRubyObject,IRubyObject)" : 1 , "cacheAndCall(IRubyObject,RubyClass,Block,ThreadContext,IRubyObject,String,IRubyObject,IRubyObject,IRubyObject)" : 1 , "cacheAndCall(IRubyObject,RubyClass,IRubyObject[],ThreadContext,IRubyObject,String)" : 1 , "cacheAndCall(IRubyObject,RubyClass,ThreadContext,IRubyObject,String)" : 1 , "cacheAndCall(IRubyObject,RubyClass,ThreadContext,IRubyObject,String,IRubyObject)" : 1 , "cacheAndCall(IRubyObject,RubyClass,ThreadContext,IRubyObject,String,IRubyObject,IRubyObject)" : 1 , "cacheAndCall(IRubyObject,RubyClass,ThreadContext,IRubyObject,String,IRubyObject,IRubyObject,IRubyObject)" : 1 , "call(ThreadContext,IRubyObject,IRubyObject,IRubyObject)" : 1 , "callBlock(ThreadContext,IRubyObject,IRubyObject,Block)" : 2 , "callBlock(ThreadContext,IRubyObject,IRubyObject,IRubyObject,Block)" : 2 , "callBlock(ThreadContext,IRubyObject,IRubyObject,IRubyObject,IRubyObject,Block)" : 2 , "callBlock(ThreadContext,IRubyObject,IRubyObject,IRubyObject,IRubyObject,IRubyObject,Block)" : 2 , "callBlock(ThreadContext,IRubyObject,IRubyObject,IRubyObject[],Block)" : 2 , "callMethodMissing(ThreadContext,IRubyObject,String,DynamicMethod)" : 1 , "callMethodMissing(ThreadContext,IRubyObject,String,DynamicMethod,Block)" : 1 , "callMethodMissing(ThreadContext,IRubyObject,String,DynamicMethod,IRubyObject)" : 1 , "callMethodMissing(ThreadContext,IRubyObject,String,DynamicMethod,IRubyObject,Block)" : 1 , "callMethodMissing(ThreadContext,IRubyObject,String,DynamicMethod,IRubyObject,IRubyObject)" : 1 , "callMethodMissing(ThreadContext,IRubyObject,String,DynamicMethod,IRubyObject,IRubyObject,Block)" : 1 , "callMethodMissing(ThreadContext,IRubyObject,String,DynamicMethod,IRubyObject,IRubyObject,IRubyObject)" : 1 , "callMethodMissing(ThreadContext,IRubyObject,String,DynamicMethod,IRubyObject,IRubyObject,IRubyObject,Block)" : 1 , "callMethodMissing(ThreadContext,IRubyObject,String,DynamicMethod,IRubyObject[])" : 1 , "callMethodMissing(ThreadContext,IRubyObject,String,DynamicMethod,IRubyObject[],Block)" : 1 , "checkSuperDisabledOrOutOfMethod(ThreadContext,RubyModule,String)" : 1 , "handleBreakJump(ThreadContext,BreakJump)" : 10 , "methodMissing(DynamicMethod,IRubyObject)" : 10 , "pollAndGetClass(ThreadContext,IRubyObject,RubyModule,String)" : 10 , "retryJumpError(ThreadContext)" : 10}},{ "className" : "org::jruby::javasupport::JavaObject" , "selectors" : { "JavaObject(Ruby,Object)" : 1 , "JavaObject(Ruby,RubyClass,Object)" : 4 , "createJavaObjectClass(Ruby,RubyModule)" : 1 , "dataGetStruct()" : 4 , "dataWrapStruct(Object)" : 2 , "getJavaClass()" : 4 , "getValue()" : 61 , "getWrappedObject(IRubyObject,Object)" : 4 , "hash()" : 1 , "hashCode()" : 1 , "java_class()" : 2 , "marshal_dump()::ByteList" : 1 , "opEqualShared(Object,IRubyObject)" : 2 , "op_equal(IRubyObject)" : 1 , "op_equal(JavaProxy,IRubyObject)" : 1 , "registerRubyMethods(Ruby,RubyClass)" : 1 , "ruby_synchronized(ThreadContext,Block)" : 1 , "ruby_synchronized(ThreadContext,Object,Block)" : 1 , "to_s()" : 1 , "to_s(Ruby,Object)" : 2 , "wrap(Ruby,Object)" : 16}},{ "className" : "org::jruby::ext::ffi::jffi::JFFIInvoker" , "selectors" : { "JFFIInvoker(???)" : 3 , "createDynamicMethod(RubyModule)" : 1 , "createInvokerClass(Ruby,RubyModule)" : 1}},{ "className" : "org::jruby::embed::variable::VariableInterceptor" , "selectors" : { "VariableInterceptor(LocalVariableBehavior)" : 1 , "getVariableInstance(Ruby,String,Object[])" : 2 , "inject(BiVariableMap,Ruby,ManyVarsDynamicScope,int,IRubyObject)" : 1 , "isKindOfRubyVariable(String)" : 1 , "resolve(BiVariable[])" : 3 , "retrieve(BiVariableMap,Ruby,IRubyObject)" : 1 , "terminateGlobalVariables(List<BiVariable>,Ruby)" : 1 , "terminateLocalVariables(List<String>,List<BiVariable>)" : 1 , "tryLazyRetrieval(BiVariableMap,Ruby,IRubyObject,Object)" : 1}},{ "className" : "org::jruby::ext::ffi::Platform::Darwin" , "selectors" : { "Darwin()" : 1}},{ "className" : "org::jruby::parser::Ruby19YyTables" , "selectors" : { "combine(short[],short[],short[],short[])" : 2 , "yyCheck()" : 1 , "yyCheck1()" : 1 , "yyCheck2()" : 1 , "yyCheck3()" : 1 , "yyCheck4()" : 1 , "yyTable()" : 1 , "yyTable1()" : 1 , "yyTable2()" : 1 , "yyTable3()" : 1 , "yyTable4()" : 1}},{ "className" : "org::jruby::ext::socket::RubyUNIXServer" , "selectors" : { "RubyUNIXServer(Ruby,RubyClass)" : 1 , "accept(ThreadContext)" : 3 , "accept(ThreadContext)::IntByReference" : 1 , "accept_nonblock(ThreadContext)" : 1 , "accept_nonblock(ThreadContext)::IntByReference" : 2 , "createUNIXServer(Ruby)" : 1 , "listen(ThreadContext,IRubyObject)" : 1}},{ "className" : "org::jruby::runtime::assigner::Pre2Rest1Post0Assigner" , "selectors" : { "Pre2Rest1Post0Assigner(Node,Node,Node)" : 1 , "assign(Ruby,ThreadContext,IRubyObject,Block)" : 2 , "assign(Ruby,ThreadContext,IRubyObject,IRubyObject,Block)" : 2 , "assign(Ruby,ThreadContext,IRubyObject,IRubyObject,IRubyObject,Block)" : 2 , "assign(Ruby,ThreadContext,IRubyObject,IRubyObject,IRubyObject,IRubyObject,Block)" : 2}},{ "className" : "org::jruby::RubyFileStat" , "selectors" : { "RubyFileStat(Ruby,RubyClass)" : 3 , "atime()" : 4 , "createFileStatClass(Ruby)" : 1 , "ctime()" : 4 , "directory_p()" : 1 , "ftype()" : 1 , "mtime()" : 2 , "mtimeEquals(IRubyObject)" : 1 , "mtimeGreaterThan(IRubyObject)" : 1 , "mtimeLessThan(IRubyObject)" : 1 , "newFileStat(Ruby,FileDescriptor)" : 1 , "newFileStat(Ruby,String,boolean)" : 4 , "setup(FileDescriptor)" : 1 , "setup(String,boolean)" : 2 , "size()" : 1 , "sizeInternal()" : 3}},{ "className" : "org::jruby::management::BeanManagerFactory" , "selectors" : { "create(Ruby,boolean)" : 1}},{ "className" : "org::jruby::compiler::ir::IR_ScopeImpl" , "selectors" : { "IR_ScopeImpl(IR_Scope,Operand)" : 3 , "addClass(IR_Class)" : 1 , "addMethod(IRMethod)" : 3 , "allocateNextPrefixedName(String)" : 3 , "getContainer()" : 1 , "getInstrs()" : 1 , "getLexicalParent()" : 4 , "getNewLabel()" : 2 , "getNewLabel(String)" : 9 , "getNewTemporaryClosureVariable(int)" : 1 , "getNewTemporaryVariable()" : 4 , "getSelf()" : 2 , "init(IR_Scope,Operand)" : 1 , "runCompilerPassOnNestedScopes(CompilerPass)" : 1 , "setConstantValue(String,Operand)" : 2 , "toString()" : 3}},{ "className" : "java::nio::charset::CharsetDecoder" , "selectors" : { "charset()" : 5 , "decode(ByteBuffer)" : 12 , "decode(ByteBuffer,CharBuffer,boolean)" : 8 , "detectedCharset()" : 1 , "flush(CharBuffer)" : 1 , "isCharsetDetected()" : 1 , "onMalformedInput(CodingErrorAction)" : 12 , "onUnmappableCharacter(CodingErrorAction)" : 12 , "reset()" : 3}},{ "className" : "org::jruby::RubyFile" , "selectors" : { "RubyFile(Ruby,RubyClass)" : 2 , "RubyFile(Ruby,String,InputStream)" : 2 , "adjustRootPathOnWindows(Ruby,String,String)" : 5 , "basename(ThreadContext,IRubyObject,IRubyObject[])" : 2 , "canonicalize(String)" : 1 , "canonicalize(String,String)" : 2 , "chomp(StringBuilder)" : 1 , "close()" : 4 , "countSlashes(String)" : 2 , "createFileClass(Ruby)" : 1 , "dirname(ThreadContext,IRubyObject,IRubyObject)" : 1 , "expandPathInternal(ThreadContext,IRubyObject,IRubyObject[],boolean)" : 2 , "expandUserPath(ThreadContext,String)" : 8 , "extractTimeval(Ruby,IRubyObject)" : 2 , "fopen(String,String)" : 2 , "getDirOrFileEntry(ZipFile,String)" : 2 , "getFileEntry(ZipFile,String)" : 3 , "getFilePermissions(IRubyObject[])" : 2 , "getLastModified(Ruby,String)" : 2 , "getPath()" : 1 , "get_path(ThreadContext,IRubyObject)" : 27 , "inspectJoin(ThreadContext,IRubyObject,RubyArray,RubyArray)" : 1 , "isWindowsDriveLetter(char)" : 2 , "join(ThreadContext,IRubyObject,RubyArray)" : 3 , "openFile(IRubyObject[])" : 1 , "openFile19(ThreadContext,IRubyObject[])" : 1 , "openInternal(String,String)" : 2 , "openInternal(String,String,ModeFlags)" : 1 , "startsWithDriveLetterOnWindows(String)" : 6 , "sysopen(String,ModeFlags,int)" : 1 , "sysopenInternal(String,ModeFlags,int)" : 3 , "truncate(ThreadContext,IRubyObject)" : 1}},{ "className" : "org::jruby::RubyFloat" , "selectors" : { "<Initializer>()::ByteList" : 3 , "RubyFloat(Ruby,double)" : 4 , "abs(ThreadContext)" : 1 , "ceil()" : 1 , "createFloatClass(Ruby)" : 1 , "divmod(ThreadContext,IRubyObject)" : 1 , "floor()" : 2 , "formatDouble(double)" : 1 , "getDoubleValue()" : 99 , "getValue()" : 6 , "hashCode()" : 1 , "infinite_p()" : 1 , "marshalDump()" : 1 , "marshalTo(RubyFloat,MarshalStream)" : 1 , "newFloat(Ruby,double)" : 129 , "op_mod(ThreadContext,IRubyObject)" : 1 , "op_pow(ThreadContext,IRubyObject)" : 1 , "rationalize(ThreadContext,IRubyObject[])" : 1 , "round()" : 1 , "to_r(ThreadContext)" : 1 , "to_s()::ByteList" : 1 , "truncate()" : 2 , "unmarshalFrom(UnmarshalStream)" : 1}},{ "className" : "org::jruby::util::ClassCache" , "selectors" : { "ClassCache(ClassLoader,int)" : 7 , "cacheClassByKey(Object,ClassGenerator)" : 1 , "cleanup()" : 3 , "defineClass(ClassGenerator)" : 2 , "flush()" : 1 , "getClassLoadCount()" : 1 , "getClassLoader()" : 2 , "getClassReuseCount()" : 1 , "getLiveClassCount()" : 1 , "getMax()" : 3 , "isFull()" : 3}},{ "className" : "org::jruby::embed::variable::LocalGlobalVariable" , "selectors" : { "LocalGlobalVariable(Ruby,String,Object[])" : 1 , "LocalGlobalVariable(String,IRubyObject)" : 2 , "getInstance(Ruby,String,Object[])" : 1 , "isValidName(Object)" : 2 , "retrieveByKey(Ruby,BiVariableMap,String)" : 1 , "updateMap(BiVariableMap,String,IRubyObject)" : 1}},{ "className" : "org::jruby::runtime::encoding::EncodingService" , "selectors" : { "EncodingService(Ruby)" : 1 , "defineAliases()" : 1 , "defineEncodingConstant(RubyEncoding,byte[],int,int)" : 3 , "defineEncodingConstants(RubyEncoding,byte[],int,int)" : 2 , "defineEncodings()" : 1 , "findEncodingOrAliasEntry(???)" : 4 , "getAliases(???)" : 4 , "getEncoding(???)" : 4 , "getEncodingList()" : 3 , "getEncodings(???)" : 3 , "loadEncoding(???)" : 2}},{ "className" : "org::jruby::ext::ffi::StructByValue" , "selectors" : { "StructByValue(Ruby,RubyClass,RubyClass,StructLayout)" : 1 , "StructByValue(Ruby,RubyClass,StructLayout)" : 1 , "createStructByValueClass(Ruby,RubyModule)" : 1 , "getStructClass()" : 4 , "getStructLayout()" : 3}},{ "className" : "org::jruby::internal::runtime::methods::JavaMethod::JavaMethodOneOrTwoOrThreeOrNBlock" , "selectors" : { "JavaMethodOneOrTwoOrThreeOrNBlock(RubyModule,Visibility)" : 1 , "JavaMethodOneOrTwoOrThreeOrNBlock(RubyModule,Visibility,CallConfiguration)" : 1 , "call(ThreadContext,IRubyObject,RubyModule,String,IRubyObject,IRubyObject,IRubyObject,Block)" : 2}},{ "className" : "org::jruby::runtime::callback::InvocationCallbackFactory" , "selectors" : { "InvocationCallbackFactory(Ruby,Class,ClassLoader)" : 2 , "callMethodMissingIfNecessary(SkinnyMethodAdapter,Label,Label)::Label" : 1 , "checkArity(SkinnyMethodAdapter,Arity)::Label" : 1 , "createCtor(String)::Label" : 1 , "createCtorFast(String)::Label" : 1 , "dispatchWithoutSTI(SkinnyMethodAdapter,Label)::Label" : 1 , "getReturnClass(String,Class[])" : 20 , "startBlockCall(ClassWriter)::Label" : 1 , "startBlockCall19(ClassWriter)::Label" : 1 , "startCall(ClassWriter)::Label" : 1 , "startCallFast(ClassWriter)::Label" : 1 , "startCallS(ClassWriter)::Label" : 1 , "startCallSFast(ClassWriter)::Label" : 1 , "startDispatcher(ClassWriter)::Label" : 1 , "tryClass(String)" : 22}},{ "className" : "org::jruby::parser::Ruby19Parser" , "selectors" : { "Ruby19Parser()" : 1 , "Ruby19Parser(ParserSupport19)" : 1 , "case100_line665(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case104_line671(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case105_line675(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case106_line681(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case107_line684(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case108_line689(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case109_line692(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case10_line325(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case110_line696(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case111_line699(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case112_line701(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case11_line328(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case12_line331(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case13_line334(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case14_line337(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case15_line340(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case16_line343(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case17_line346(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case184_line720(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case185_line725(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case186_line730(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case187_line747(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case188_line767(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case189_line771(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case18_line353(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case190_line774(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case191_line777(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case192_line780(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case193_line783(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case194_line786(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case195_line789(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case196_line796(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case197_line803(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case198_line806(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case199_line809(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case19_line360(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case1_line272(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case200_line812(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case201_line815(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case202_line818(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case203_line821(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case204_line824(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case205_line827(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case206_line830(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case207_line833(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case208_line836(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case209_line839(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case20_line364(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case210_line842(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case211_line845(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case212_line848(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case213_line851(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case214_line854(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case215_line857(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case216_line860(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case217_line863(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case218_line866(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case219_line875(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case21_line369(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case220_line878(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case221_line881(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case222_line884(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case223_line887(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case224_line890(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case225_line893(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case226_line896(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case227_line900(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case228_line903(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case229_line907(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case22_line374(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case231_line913(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case232_line916(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case233_line919(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case234_line923(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case239_line933(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case23_line380(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case240_line936(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case241_line939(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case242_line943(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case243_line947(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case244_line950(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case245_line952(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case246_line957(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case247_line961(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case248_line964(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case24_line384(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case250_line970(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case251_line974(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case252_line977(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case253_line986(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case254_line998(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case255_line1007(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case256_line1017(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case25_line389(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case265_line1029(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case266_line1032(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case267_line1035(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case268_line1037(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case269_line1041(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case26_line406(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case270_line1050(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case271_line1053(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case272_line1056(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case273_line1065(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case274_line1068(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case275_line1071(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case276_line1074(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case277_line1077(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case278_line1080(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case279_line1083(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case27_line410(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case280_line1086(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case281_line1089(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case283_line1093(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case284_line1101(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case285_line1104(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case286_line1107(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case287_line1110(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case288_line1112(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case289_line1114(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case28_line413(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case290_line1118(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case291_line1120(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case292_line1122(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case293_line1126(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case294_line1129(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case295_line1132(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case296_line1134(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case297_line1136(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case298_line1140(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case299_line1145(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case29_line416(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case2_line275(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case300_line1151(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case301_line1154(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case302_line1158(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case303_line1164(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case304_line1169(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case305_line1175(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case306_line1178(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case307_line1186(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case308_line1188(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case309_line1192(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case30_line419(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case310_line1200(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case311_line1203(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case312_line1206(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case313_line1209(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case314_line1213(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case31_line422(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case321_line1227(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case323_line1232(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case325_line1237(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case326_line1240(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case327_line1243(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case328_line1248(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case329_line1251(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case32_line425(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case330_line1255(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case331_line1258(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case332_line1261(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case333_line1264(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case334_line1267(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case335_line1270(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case336_line1273(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case337_line1276(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case338_line1279(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case339_line1284(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case33_line429(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case340_line1287(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case341_line1290(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case342_line1293(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case343_line1296(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case344_line1299(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case345_line1303(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case346_line1306(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case347_line1309(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case348_line1312(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case349_line1315(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case350_line1318(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case351_line1321(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case352_line1324(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case353_line1327(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case354_line1331(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case355_line1335(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case356_line1340(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case357_line1343(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case358_line1346(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case360_line1352(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case361_line1357(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case362_line1360(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case363_line1364(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case364_line1367(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case365_line1371(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case366_line1375(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case367_line1381(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case368_line1385(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case369_line1389(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case36_line438(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case370_line1392(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case371_line1396(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case372_line1398(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case373_line1403(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case374_line1414(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case375_line1417(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case376_line1422(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case377_line1425(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case378_line1428(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case379_line1431(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case37_line441(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case380_line1434(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case381_line1437(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case382_line1440(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case383_line1443(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case384_line1446(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case385_line1454(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case386_line1456(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case387_line1460(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case388_line1462(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case389_line1469(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case38_line444(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case392_line1475(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case393_line1488(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case394_line1492(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case395_line1495(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case397_line1501(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case399_line1506(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case39_line447(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case3_line288(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case402_line1512(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case404_line1518(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case405_line1532(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case406_line1535(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case407_line1538(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case408_line1542(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case409_line1557(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case410_line1573(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case411_line1588(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case412_line1591(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case413_line1595(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case414_line1598(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case416_line1603(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case417_line1607(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case418_line1610(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case419_line1615(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case41_line452(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case420_line1618(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case421_line1622(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case422_line1625(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case423_line1629(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case424_line1632(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case425_line1636(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case426_line1639(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case427_line1643(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case428_line1647(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case429_line1651(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case430_line1657(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case431_line1660(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case432_line1663(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case434_line1669(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case439_line1678(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case440_line1702(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case441_line1705(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case442_line1708(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case443_line1711(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case449_line1717(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case44_line459(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case450_line1720(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case451_line1723(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case452_line1726(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case453_line1729(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case454_line1732(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case455_line1735(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case456_line1740(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case457_line1745(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case458_line1750(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case459_line1753(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case45_line462(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case460_line1757(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case461_line1760(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case462_line1762(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case463_line1765(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case464_line1771(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case465_line1776(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case466_line1781(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case467_line1784(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case468_line1787(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case469_line1790(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case46_line465(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case470_line1793(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case471_line1796(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case472_line1799(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case473_line1802(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case474_line1805(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case475_line1808(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case476_line1811(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case477_line1814(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case478_line1817(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case479_line1820(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case480_line1823(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case481_line1827(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case482_line1830(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case483_line1833(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case484_line1836(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case486_line1842(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case487_line1852(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case488_line1859(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case489_line1875(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case48_line471(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case490_line1878(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case491_line1883(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case492_line1892(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case493_line1901(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case494_line1904(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case495_line1908(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case496_line1911(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case499_line1918(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case49_line474(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case4_line305(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case500_line1925(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case503_line1933(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case504_line1943(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case505_line1946(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case506_line1950(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case507_line1956(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case508_line1958(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case509_line1969(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case50_line479(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case510_line1972(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case512_line1978(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case513_line1983(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case514_line1993(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case51_line481(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case52_line487(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case531_line2004(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case532_line2007(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case53_line490(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case540_line2018(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case541_line2022(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case54_line493(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case55_line496(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case56_line499(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case57_line502(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case58_line505(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case59_line508(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case61_line514(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case62_line519(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case63_line522(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case64_line527(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case65_line530(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case66_line533(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case67_line536(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case68_line539(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case69_line542(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case6_line313(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case70_line545(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case71_line548(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case72_line551(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case73_line554(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case75_line559(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case76_line564(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case77_line567(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case78_line572(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case79_line575(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case7_line316(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case80_line579(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case81_line582(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case82_line585(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case83_line588(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case84_line591(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case85_line594(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case86_line603(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case87_line612(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case88_line616(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case89_line620(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case8_line319(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case90_line623(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case91_line626(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case92_line629(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case93_line632(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case94_line641(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case95_line650(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case96_line654(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case98_line659(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case99_line662(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "case9_line323(ParserSupport,RubyYaccLexer,Object,Object[],int)" : 1 , "yyDefault(Object)" : 1 , "yyExpecting(int)" : 1 , "yyName(int)" : 3 , "yyparse(RubyYaccLexer)" : 1 , "yyparse(RubyYaccLexer,Object)" : 1}},{ "className" : "java::nio::charset::CharsetEncoder" , "selectors" : { "canEncode(CharSequence)" : 2 , "canEncode(char)" : 1 , "charset()" : 2 , "encode(CharBuffer)" : 15 , "encode(CharBuffer,ByteBuffer,boolean)" : 4 , "flush(ByteBuffer)" : 1 , "maxBytesPerChar()" : 4 , "onMalformedInput(CodingErrorAction)" : 10 , "onUnmappableCharacter(CodingErrorAction)" : 11 , "replaceWith(byte[])" : 1 , "reset()" : 1}},{ "className" : "org::jruby::ext::ffi::StructLayout" , "selectors" : { "StructLayout(Ruby,Collection<RubySymbol>,Map<IRubyObject,Field>,int,int)" : 1 , "StructLayout(Ruby,RubyClass,Collection<RubySymbol>,Map<IRubyObject,Field>,int,int)" : 1 , "createStructLayoutClass(Ruby,RubyModule)" : 1 , "getCacheableFieldCount()" : 1 , "getCacheableFieldIndex(Member)" : 2 , "getField(Ruby,IRubyObject)" : 1 , "getMember(Ruby,IRubyObject)" : 4 , "getMembers()" : 1 , "getReferenceFieldCount()" : 1 , "getReferenceFieldIndex(Member)" : 1 , "getSize()" : 8 , "getValue(ThreadContext,IRubyObject,Storage,IRubyObject)" : 2 , "members(ThreadContext)" : 1 , "putValue(ThreadContext,IRubyObject,Storage,IRubyObject,IRubyObject)" : 2}},{ "className" : "org::jruby::embed::bsf::JRubyEngine" , "selectors" : { "JRubyEngine()" : 8 , "apply(String,int,int,Object,Vector,Vector)" : 5 , "call(???)" : 4 , "declareBean(???)" : 1 , "eval(???)" : 6 , "exec(???)" : 2 , "handleException(???)" : 1 , "initialize(???)" : 9 , "printException(Ruby,Exception)" : 1 , "run(String,int,Object)" : 3 , "terminate()" : 1 , "undeclareBean(???)" : 1}},{ "className" : "org::jruby::Ruby" , "selectors" : { "Ruby(RubyInstanceConfig)" : 1 , "addBuiltinIfAllowed(String,Library)" : 3 , "addEventHook(EventHook)" : 2 , "addFinalizer(Finalizable)" : 1 , "addInternalFinalizer(Finalizable)" : 1 , "addLazyBuiltin(String,String,String)" : 37 , "addModule(RubyModule)" : 2 , "allocModuleId()" : 2 , "allocSymbolId()" : 1 , "bootstrap()" : 1 , "callEventHooks(ThreadContext,RubyEvent,String,int,String,IRubyObject)" : 20 , "callbackFactory(Class<?>)" : 1 , "checkSafeString(IRubyObject)" : 13 , "cleanDescriptors()" : 3 , "compileAndLoadFile(String,InputStream,boolean)" : 1 , "createSysErr(int,String)" : 2 , "defineClass(String,RubyClass,ObjectAllocator)" : 72 , "defineClassIfAllowed(String,RubyClass)" : 24 , "defineClassUnder(String,RubyClass,ObjectAllocator,RubyModule)" : 26 , "defineClassUnder(String,RubyClass,ObjectAllocator,RubyModule,CallSite[])" : 2 , "defineGlobalConstant(String,IRubyObject)" : 28 , "defineModule(String)" : 32 , "defineModuleUnder(String,RubyModule)" : 2 , "defineReadonlyVariable(String,IRubyObject)" : 11 , "defineVariable(GlobalVariable)" : 33 , "eachModule(Function1<Object,IRubyObject>)" : 1 , "evalScriptlet(String)" : 16 , "evalScriptlet(String,DynamicScope)" : 1 , "execRecursive(RecursiveFunction,IRubyObject)" : 2 , "execRecursiveI(ExecRecursiveParams)" : 2 , "execRecursiveInternal(RecursiveFunction,IRubyObject,IRubyObject,boolean)" : 2 , "execRecursiveOuter(RecursiveFunction,IRubyObject)" : 2 , "executeScript(String,String)" : 2 , "fastGetClass(String)" : 46 , "fastGetModule(String)" : 61 , "fastNewSymbol(String)" : 19 , "getArgsFile()" : 5 , "getArgumentError()" : 3 , "getArray()" : 32 , "getBasicObject()" : 3 , "getBeanManager()" : 6 , "getBignum()" : 1 , "getBinding()" : 1 , "getCharsetMap()" : 2 , "getClass(String)" : 13 , "getClassClass()" : 17 , "getClassFromPath(String)" : 14 , "getClassLoader()" : 3 , "getComparable()" : 3 , "getComplex()" : 13 , "getConcurrencyError()" : 1 , "getConstantGeneration()" : 10 , "getContinuation()" : 2 , "getConverter()" : 1 , "getConverterNotFoundError()" : 1 , "getCurrentContext()" : 333 , "getCurrentDirectory()" : 36 , "getCurrentLine()" : 1 , "getDebug()" : 36 , "getDefaultExternalEncoding(???)" : 1 , "getDefaultInternalEncoding(???)" : 1 , "getDefaultMethodMissing()" : 4 , "getDefaultThreadGroup()" : 3 , "getDescriptorByFileno(int)" : 1 , "getDir()" : 3 , "getDummy()" : 6 , "getEOFError()" : 2 , "getEncoding()" : 4 , "getEncodingCompatibilityError()" : 1 , "getEncodingError()" : 1 , "getEncodingService()" : 13 , "getEnumerable()" : 19 , "getEnumerator()" : 7 , "getErr()" : 13 , "getErrno()" : 32 , "getErrno(int)" : 4 , "getErrorStream()" : 10 , "getException()" : 6 , "getExecutor()" : 3 , "getFalse()" : 198 , "getFalseClass()" : 1 , "getFile()" : 14 , "getFileStat()" : 2 , "getFileTest()" : 1 , "getFixnum()" : 9 , "getFloat()" : 8 , "getFloatDomainError()" : 1 , "getGlobalRuntime()" : 7 , "getGlobalVariables()" : 137 , "getGroupStruct()" : 1 , "getHash()" : 10 , "getHierarchyLock()" : 7 , "getIO()" : 15 , "getIOError()" : 3 , "getIn()" : 1 , "getIndexError()" : 1 , "getInputStream()" : 2 , "getInstanceConfig()" : 89 , "getInteger()" : 17 , "getInterrupt()" : 4 , "getInvalidByteSequenceError()" : 1 , "getJITCompiler()" : 1 , "getJRubyClassLoader()" : 59 , "getJRubyHome()" : 3 , "getJavaSupport()" : 57 , "getJittedMethods()" : 1 , "getKCode()" : 21 , "getKernel()" : 15 , "getLoadError()" : 1 , "getLoadService()" : 45 , "getLocalJumpError()" : 5 , "getMatchData()" : 2 , "getMath()" : 1 , "getMathDomainError()" : 1 , "getMethod()" : 4 , "getModule()" : 14 , "getModule(String)" : 12 , "getNameError()" : 3 , "getNameErrorMessage()" : 1 , "getNextDynamicMethodSerial()" : 1 , "getNil()" : 977 , "getNilClass()" : 2 , "getNilPrefilledArray()" : 1 , "getNoMemoryError()" : 2 , "getNoMethodError()" : 4 , "getNormalMethodMissing()" : 1 , "getNotImplementedError()" : 2 , "getNumeric()" : 8 , "getObject()" : 147 , "getObjectSpace()" : 8 , "getOrCreateModule(String)" : 3 , "getOut()" : 3 , "getOutputStream()" : 3 , "getParser()" : 2 , "getPasswdStruct()" : 1 , "getPosix(???)" : 104 , "getPrecision()" : 3 , "getPrivateMethodMissing()" : 1 , "getProc()" : 10 , "getProcStatus()" : 1 , "getProfile()" : 2 , "getProtectedMethodMissing()" : 1 , "getRandom()" : 11 , "getRandomSeed()" : 7 , "getRange()" : 6 , "getRangeError()" : 1 , "getRational()" : 7 , "getRecordSeparatorVar()" : 3 , "getRegexp()" : 4 , "getRegexpError()" : 1 , "getRespondToMethod()" : 4 , "getRuntimeError()" : 13 , "getSafeLevel()" : 48 , "getSecurityError()" : 1 , "getSingleNilArray()" : 1 , "getStackTraces()" : 3 , "getStandardError()" : 13 , "getStartTime()" : 1 , "getStopIteration()" : 1 , "getString()" : 35 , "getStructClass()" : 3 , "getSuperMethodMissing()" : 1 , "getSymbol()" : 2 , "getSymbolTable()" : 7 , "getSyntaxError()" : 1 , "getSystemCallError()" : 3 , "getSystemExit()" : 5 , "getSystemStackError()" : 2 , "getThread()" : 7 , "getThreadError()" : 4 , "getThreadService()" : 29 , "getTime()" : 3 , "getTimezoneCache(???)" : 2 , "getTmsStruct()" : 2 , "getTopSelf()" : 19 , "getTrue()" : 177 , "getTrueClass()" : 1 , "getTypeError()" : 3 , "getUnboundMethod()" : 1 , "getUndefinedConversionError()" : 1 , "getVariableMethodMissing()" : 1 , "getVerbose()" : 2 , "getWarnings()" : 108 , "getYielder()" : 1 , "getZeroDivisionError()" : 1 , "hasEventHooks()" : 14 , "incrementConstantGeneration()" : 1 , "incrementRandomSeedSequence()" : 3 , "init()" : 1 , "initBuiltins()" : 1 , "initCore()" : 1 , "initErrno()" : 1 , "initExceptions()" : 1 , "initRoot()" : 1 , "is1_9()" : 52 , "isDebug()" : 1 , "isDoNotReverseLookupEnabled()" : 3 , "isGlobalAbortOnExceptionEnabled()" : 2 , "isGlobalRuntimeReady()" : 1 , "isInspecting(Object)" : 16 , "isObjectSpaceEnabled()" : 9 , "isSecurityRestricted()" : 25 , "isVerbose()" : 18 , "loadConstantSet(???)" : 13 , "loadConstantSet(RubyModule,String)" : 2 , "loadFile(String,InputStream,boolean)" : 4 , "loadScript(Script)" : 1 , "newArgumentError(String)" : 276 , "newArgumentError(int,int)" : 56 , "newArray()" : 62 , "newArray(IRubyObject)" : 21 , "newArray(IRubyObject,IRubyObject)" : 55 , "newArray(IRubyObject[])" : 9 , "newArray(List<IRubyObject>)" : 6 , "newArray(int)" : 18 , "newArrayNoCopy(IRubyObject[])" : 47 , "newArrayNoCopyLight(IRubyObject[])" : 66 , "newBinding()" : 1 , "newBinding(Binding)" : 1 , "newBlockPassProc(Type,Block)" : 1 , "newBoolean(boolean)" : 186 , "newConcurrencyError(String)" : 8 , "newConverterNotFoundError(String)" : 3 , "newEOFError()" : 21 , "newEOFError(String)" : 1 , "newEmptyArray()" : 19 , "newEncodingCompatibilityError(String)" : 8 , "newErrnoEACCESError(String)" : 11 , "newErrnoEADDRINUSEError(String)" : 2 , "newErrnoEADDRNOTAVAILError(String)" : 2 , "newErrnoEAGAINError(String)" : 2 , "newErrnoEBADFError()" : 38 , "newErrnoECHILDError()" : 3 , "newErrnoECONNABORTEDError()" : 1 , "newErrnoECONNREFUSEDError()" : 4 , "newErrnoECONNRESETError()" : 3 , "newErrnoEDOMError(String)" : 3 , "newErrnoEEXISTError(String)" : 8 , "newErrnoEINPROGRESSError()" : 3 , "newErrnoEINVALError()" : 51 , "newErrnoEINVALError(String)" : 10 , "newErrnoEISCONNError()" : 2 , "newErrnoEISDirError()" : 2 , "newErrnoEISDirError(String)" : 2 , "newErrnoENOENTError(String)" : 26 , "newErrnoENOPROTOOPTError()" : 14 , "newErrnoENOTCONNError()" : 1 , "newErrnoENOTDIRError(String)" : 1 , "newErrnoENOTSOCKError(String)" : 3 , "newErrnoEPIPEError()" : 20 , "newErrnoESPIPEError()" : 6 , "newErrnoFromInt(int,String)" : 1 , "newErrnoFromLastPOSIXErrno()" : 1 , "newFileStat(FileDescriptor)" : 1 , "newFileStat(String,boolean)" : 17 , "newFixnum(???)" : 68 , "newFixnum(int)" : 299 , "newFixnum(long)" : 51 , "newFloat(double)" : 24 , "newFloatDomainError(String)" : 8 , "newFrozenError(String)" : 11 , "newIOError(String)" : 57 , "newIOErrorFromException(IOException)" : 66 , "newIllegalSequence(String)" : 3 , "newIndexError(String)" : 35 , "newInstance()" : 31 , "newInstance(InputStream,PrintStream,PrintStream)" : 1 , "newInstance(RubyInstanceConfig)" : 13 , "newInvalidByteSequenceError(String)" : 1 , "newInvalidEncoding(String)" : 3 , "newLoadError(String)" : 23 , "newLocalJumpError(Reason,IRubyObject,String)" : 47 , "newLocalJumpErrorNoBlock()" : 6 , "newMathDomainError(String)" : 2 , "newNameError(String,String)" : 44 , "newNameError(String,String,Throwable)" : 6 , "newNameError(String,String,Throwable,boolean)" : 5 , "newNoMethodError(String,String,IRubyObject)" : 4 , "newNotImplementedError(String)" : 46 , "newProc(Type,Block)" : 13 , "newRaiseException(RubyClass,String)" : 66 , "newRangeError(String)" : 39 , "newRegexpError(String)" : 4 , "newRuntimeError(String)" : 40 , "newSecurityError(String)" : 49 , "newStandardError(String)" : 1 , "newString()" : 9 , "newString()::ByteList" : 1 , "newString(String)" : 311 , "newSymbol(String)" : 67 , "newSyntaxError(String)" : 4 , "newSystemCallError(String)" : 8 , "newSystemExit(int)" : 2 , "newSystemStackError(String,StackOverflowError)" : 8 , "newThreadError(String)" : 19 , "newTime(long)" : 4 , "newTypeError(IRubyObject,RubyClass)" : 53 , "newTypeError(String)" : 330 , "newZeroDivisionError()" : 23 , "parse(String,String,DynamicScope,int,boolean)" : 5 , "parseEval(String,String,DynamicScope,int)" : 7 , "parseFile(InputStream,String,DynamicScope)" : 4 , "parseFile(InputStream,String,DynamicScope,int)" : 4 , "parseFromMain(InputStream,String)" : 3 , "parseInline(InputStream,String,DynamicScope)" : 2 , "printError(RubyException)" : 12 , "printErrorPos(ThreadContext,PrintStream)" : 2 , "printRubiniusTrace(RubyException)" : 1 , "pushExitBlock(RubyProc)" : 3 , "recursiveCheck(IRubyObject,IRubyObject,IRubyObject)" : 2 , "recursiveListAccess()" : 1 , "recursivePop(IRubyObject,IRubyObject,IRubyObject)" : 2 , "recursivePush(IRubyObject,IRubyObject,IRubyObject)" : 2 , "registerDescriptor(ChannelDescriptor,boolean)" : 3 , "registerInspecting(Object)" : 14 , "removeEventHook(EventHook)" : 1 , "removeFinalizer(Finalizable)" : 1 , "removeInternalFinalizer(Finalizable)" : 1 , "runFromMain(InputStream,String)" : 2 , "runInterpreter(Node)" : 6 , "runInterpreterBody(Node)" : 1 , "runNormally(Node)" : 3 , "runScript(Script)" : 3 , "runScriptBody(Script)" : 2 , "runWithGetsLoop(Node,boolean,boolean,boolean)" : 2 , "secure(int)" : 25 , "setArgsFile(IRubyObject)" : 1 , "setArray(RubyClass)" : 1 , "setBignum(RubyClass)" : 1 , "setBinding(RubyClass)" : 1 , "setComparable(RubyModule)" : 1 , "setComplex(RubyClass)" : 1 , "setContinuation(RubyClass)" : 1 , "setConverter(RubyClass)" : 1 , "setCurrentDirectory(String)" : 4 , "setCurrentLine(int)" : 4 , "setDebug(IRubyObject)" : 2 , "setDefaultExternalEncoding(???)" : 2 , "setDefaultInternalEncoding(???)" : 1 , "setDefaultMethodMissing(DynamicMethod)" : 1 , "setDefaultThreadGroup(RubyThreadGroup)" : 1 , "setDir(RubyClass)" : 1 , "setDoNotReverseLookupEnabled(boolean)" : 1 , "setEncoding(RubyClass)" : 1 , "setEnumerable(RubyModule)" : 1 , "setEnumerator(RubyClass)" : 1 , "setEtc(RubyModule)" : 1 , "setException(RubyClass)" : 1 , "setFalseClass(RubyClass)" : 1 , "setFile(RubyClass)" : 1 , "setFileStat(RubyClass)" : 1 , "setFileTest(RubyModule)" : 1 , "setFixnum(RubyClass)" : 1 , "setFloat(RubyClass)" : 1 , "setGC(RubyModule)" : 1 , "setGlobalAbortOnExceptionEnabled(boolean)" : 1 , "setGlobalRuntimeFirstTimeOnly(Ruby)" : 2 , "setGroupStruct(RubyClass)" : 1 , "setHash(RubyClass)" : 1 , "setInteger(RubyClass)" : 1 , "setKCode(KCode)" : 1 , "setKernel(RubyModule)" : 1 , "setMarshal(RubyModule)" : 1 , "setMatchData(RubyClass)" : 1 , "setMath(RubyModule)" : 1 , "setMethod(RubyClass)" : 1 , "setNilClass(RubyClass)" : 1 , "setNormalMethodMissing(DynamicMethod)" : 1 , "setNumeric(RubyClass)" : 1 , "setObjectSpaceEnabled(boolean)" : 1 , "setObjectSpaceModule(RubyModule)" : 1 , "setPasswdStruct(RubyClass)" : 1 , "setPrecision(RubyModule)" : 1 , "setPrivateMethodMissing(DynamicMethod)" : 1 , "setProc(RubyClass)" : 1 , "setProcGID(RubyModule)" : 1 , "setProcStatus(RubyClass)" : 1 , "setProcSys(RubyModule)" : 1 , "setProcUID(RubyModule)" : 1 , "setProcess(RubyModule)" : 1 , "setProtectedMethodMissing(DynamicMethod)" : 1 , "setRandomClass(RubyClass)" : 1 , "setRandomSeed(long)" : 2 , "setRange(RubyClass)" : 1 , "setRational(RubyClass)" : 1 , "setRecordSeparatorVar(GlobalVariable)" : 1 , "setRegexp(RubyClass)" : 1 , "setRespondToMethod(Object)" : 1 , "setSecurityRestricted(boolean)" : 1 , "setStackTraces(int)" : 2 , "setString(RubyClass)" : 1 , "setStructClass(RubyClass)" : 1 , "setSuperMethodMissing(DynamicMethod)" : 1 , "setSymbol(RubyClass)" : 1 , "setThread(RubyClass)" : 1 , "setThreadGroup(RubyClass)" : 1 , "setTime(RubyClass)" : 1 , "setTraceFunction(RubyProc)" : 2 , "setTrueClass(RubyClass)" : 1 , "setUnboundMethod(RubyClass)" : 1 , "setVariableMethodMissing(DynamicMethod)" : 1 , "setVerbose(IRubyObject)" : 4 , "setYielder(RubyClass)" : 1 , "tearDown()" : 4 , "tearDown(boolean)" : 2 , "tryCompile(Node)" : 1 , "tryCompile(Node,ASTInspector)" : 1 , "tryCompile(Node,String,JRubyClassLoader,ASTInspector,boolean)" : 2 , "tryCompile(Node,String,JRubyClassLoader,boolean)" : 3 , "unregisterDescriptor(int)" : 3 , "unregisterInspecting(Object)" : 14 , "useAsGlobalRuntime()" : 2 , "warningsEnabled()" : 2}},{ "className" : "org::jruby::ext::socket::RubyUDPSocket" , "selectors" : { "RubyUDPSocket(Ruby,RubyClass)" : 1 , "bind(ThreadContext,IRubyObject,IRubyObject)" : 1 , "connect(ThreadContext,IRubyObject,IRubyObject)" : 1 , "createUDPSocket(Ruby)" : 1 , "initialize(ThreadContext)" : 1 , "open(ThreadContext,IRubyObject,IRubyObject[],Block)" : 1 , "recv(ThreadContext,IRubyObject[])::ByteList" : 1 , "recvfrom(ThreadContext,IRubyObject[])" : 1 , "recvfrom(ThreadContext,IRubyObject[])::ByteList" : 1 , "send(ThreadContext,IRubyObject[])" : 1}},{ "className" : "org::jruby::runtime::marshal::UnmarshalCache" , "selectors" : { "UnmarshalCache(Ruby)" : 1 , "isLinkType(int)" : 1 , "linkedByIndex(int)" : 1 , "readLink(UnmarshalStream,int)" : 1 , "register(IRubyObject)" : 1 , "selectCache(IRubyObject)" : 1 , "symbolByIndex(int)" : 1}},{ "className" : "org::jruby::compiler::impl::ChainedRootBodyCompiler" , "selectors" : { "ChainedRootBodyCompiler(StandardASMCompiler,String,ASTInspector,StaticScope,RootScopedBodyCompiler)" : 1 , "endBody()::Label" : 1}},{ "className" : "org::jruby::runtime::SharedScopeBlock" , "selectors" : { "SharedScopeBlock(IterNode)" : 1 , "newInterpretedSharedScopeClosure(ThreadContext,IterNode,DynamicScope,IRubyObject)" : 2}},{ "className" : "org::jruby::embed::variable::Constant" , "selectors" : { "Constant(IRubyObject,String,IRubyObject)" : 1 , "Constant(Ruby,String,Object[])" : 1 , "getInstance(Ruby,String,Object[])" : 3 , "isValidName(Object)" : 2 , "markInitialized()" : 1 , "retrieve(Ruby,IRubyObject,BiVariableMap)" : 1 , "updateVarMap(BiVariableMap,IRubyObject,String,IRubyObject)" : 2}},{ "className" : "org::jruby::RubyObjectAdapter" , "selectors" : { "callMethod(IRubyObject,String)" : 1 , "callMethod(IRubyObject,String,IRubyObject)" : 1 , "callMethod(IRubyObject,String,IRubyObject[])" : 1 , "callMethod(IRubyObject,String,IRubyObject[],Block)" : 1 , "callSuper(IRubyObject,IRubyObject[])" : 1 , "callSuper(IRubyObject,IRubyObject[],Block)" : 1 , "convertToJavaArray(IRubyObject)" : 1 , "convertToRubyInteger(IRubyObject)" : 1 , "convertToRubyString(IRubyObject)" : 1 , "isKindOf(IRubyObject,RubyModule)" : 1}},{ "className" : "org::jruby::RubyDigest::DigestInstance" , "selectors" : { "digest(ThreadContext,IRubyObject,IRubyObject[])" : 4 , "digest_bang(ThreadContext,IRubyObject)" : 1 , "hexdigest(ThreadContext,IRubyObject,IRubyObject[])" : 1 , "throwUnimplError(IRubyObject,String)" : 4 , "to_s(ThreadContext,IRubyObject)" : 1}},{ "className" : "org::jruby::runtime::assigner::Pre3Rest0Post0Assigner" , "selectors" : { "Pre3Rest0Post0Assigner(Node,Node,Node)" : 1 , "assign(Ruby,ThreadContext,IRubyObject,Block)" : 1 , "assign(Ruby,ThreadContext,IRubyObject,IRubyObject,Block)" : 1 , "assign(Ruby,ThreadContext,IRubyObject,IRubyObject,IRubyObject,Block)" : 1 , "assign(Ruby,ThreadContext,IRubyObject,IRubyObject,IRubyObject,IRubyObject,Block)" : 5}},{ "className" : "org::jruby::compiler::ir::operands::Operand" , "selectors" : { "addUsedVariables(List<Variable>)" : 13 , "fetchCompileTimeArrayElement(int,boolean)" : 1 , "getSimplifiedOperand(Map<Operand,Operand>)" : 22 , "getTargetClass()" : 1 , "getValue(Map<Operand,Operand>)" : 1 , "isConstant()" : 18 , "isNonAtomicValue()" : 1}},{ "className" : "org::jruby::compiler::ir::dataflow::DataFlowProblem" , "selectors" : { "DataFlowProblem(DF_Direction)" : 3 , "addDataFlowVar(DataFlowVar)" : 1 , "buildFlowGraph()" : 1 , "buildFlowGraphNode(BasicBlock)" : 1 , "compute_MOP_Solution()" : 7 , "getCFG()" : 13 , "getDFVarsCount()" : 1 , "getDataFlowVarsForOutput()" : 1 , "getFlowDirection()" : 4 , "getFlowGraphNode(BasicBlock)" : 6 , "getInitialWorkList()" : 1 , "getName()" : 1 , "incomingEdgesOf(BasicBlock)" : 2 , "isEmpty()" : 1 , "outgoingEdgesOf(BasicBlock)" : 2 , "setup(CFG)" : 5}},{ "className" : "org::jruby::util::StringSupport" , "selectors" : { "caseCmp(byte[],int,byte[],int,int)" : 1 , "codeLength(???)" : 1 , "codePoint(???)" : 1 , "countUtf8LeadBytes(long)" : 2 , "getUnsafe()" : 1 , "hexLength(byte[],int,int)" : 3 , "length(???)" : 20 , "nth(???)" : 8 , "octLength(byte[],int,int)" : 1 , "offset(???)" : 2 , "pack(int,int)" : 16 , "preciseCodePoint(???)" : 2 , "preciseLength(???)" : 26 , "scanHex(byte[],int,int)" : 3 , "scanOct(byte[],int,int)" : 2 , "searchNonAscii(byte[],int,int)" : 10 , "strLength(???)" : 2 , "unpackArg(long)" : 1 , "unpackResult(long)" : 1 , "utf8Length(???)" : 1 , "utf8Length(byte[],int,int)" : 1 , "utf8Nth(byte[],int,int,int)" : 2 , "utf8Offset(byte[],int,int,int)" : 1}},{ "className" : "org::jruby::ast::Colon2ImplicitNode" , "selectors" : { "Colon2ImplicitNode(ISourcePosition,String)" : 1}},{ "className" : "org::jruby::util::ConvertBytes" , "selectors" : { "ConvertBytes(???)" : 3 , "bigParse(int,boolean)" : 2 , "byteListToInum()" : 2 , "byteListToInum(???)" : 2 , "byteListToInum19(???)" : 1 , "calculateLength()" : 1 , "convertDigit(byte)" : 3 , "figureOutBase()" : 1 , "getSign()" : 1 , "ignoreLeadingWhitespace()" : 1 , "intToBinaryByteList(int)::ByteList" : 1 , "intToBinaryBytes(int)" : 2 , "intToByteArray(int,int,boolean)" : 1 , "intToCharBytes(int)" : 1 , "intToHexByteList(int)::ByteList" : 1 , "intToHexByteList(int,boolean)::ByteList" : 1 , "intToHexBytes(int)" : 1 , "intToHexBytes(int,boolean)" : 2 , "intToOctalByteList(int)::ByteList" : 1 , "intToOctalBytes(int)" : 2 , "invalidString(String)" : 9 , "isSpace(int)" : 5 , "isSpaceOrUnderscore(int)" : 1 , "longToBinaryByteList(long)::ByteList" : 1 , "longToBinaryBytes(long)" : 2 , "longToByteArray(long,int,boolean)" : 1 , "longToByteList(???)" : 2 , "longToCharBytes(long)" : 2 , "longToHexByteList(long)::ByteList" : 1 , "longToHexByteList(long,boolean)::ByteList" : 1 , "longToHexBytes(long)" : 1 , "longToHexBytes(long,boolean)" : 2 , "longToOctalByteList(long)::ByteList" : 1 , "longToOctalBytes(long)" : 2 , "squeezeZeroes()" : 1 , "stringToLong(int,int[],int)" : 1 , "twosComplementToBinaryBytes(byte[])" : 1 , "twosComplementToHexBytes(byte[],boolean)" : 1 , "twosComplementToOctalBytes(byte[])" : 1 , "twosComplementToUnsignedBytes(byte[],int,boolean)" : 3}},{ "className" : "java_integration::fixtures::CoerceToInterface" , "selectors" : { "coerceArgumentBackToRuby(Ruby,Runnable)" : 1}},{ "className" : "org::jruby::compiler::ir::IR_Builder" , "selectors" : { "IR_Builder()" : 2 , "build(Node,IR_Scope)" : 100 , "buildAST(boolean,String)" : 1 , "buildAST(boolean,String)::ByteList" : 1 , "buildAlias(AliasNode,IR_Scope)" : 1 , "buildAnd(AndNode,IR_Scope)" : 1 , "buildArgs(List<Operand>,Node,IR_Scope)" : 2 , "buildArgsCat(ArgsCatNode,IR_Scope)" : 1 , "buildArgsCatArguments(List<Operand>,ArgsCatNode,IR_Scope)" : 1 , "buildArgsPush(ArgsPushNode,IR_Scope)" : 1 , "buildArgsPushArguments(List<Operand>,ArgsPushNode,IR_Scope)" : 1 , "buildArguments(List<Operand>,Node,IR_Scope)" : 1 , "buildArray(Node,IR_Scope)" : 2 , "buildArrayArguments(List<Operand>,Node,IR_Scope)" : 1 , "buildAssignment(Node,IR_Scope,Operand,int,boolean)" : 2 , "buildAttrAssign(AttrAssignNode,IR_Scope)" : 1 , "buildAttrAssignAssignment(Node,IR_Scope,Operand)" : 2 , "buildBackref(BackRefNode,IR_Scope)" : 1 , "buildBegin(BeginNode,IR_Scope)" : 1 , "buildBignum(BignumNode,IR_Scope)" : 1 , "buildBlock(BlockNode,IR_Scope)" : 1 , "buildBlockArgsAssignment(Node,IR_Scope,int,boolean)" : 4 , "buildBreak(BreakNode,IR_ExecutionScope)" : 1 , "buildCall(CallNode,IR_Scope)" : 1 , "buildCase(CaseNode,IR_Scope)" : 1 , "buildClass(ClassNode,IR_Scope)" : 1 , "buildClassVar(ClassVarNode,IR_Scope)" : 1 , "buildClassVarAsgn(ClassVarAsgnNode,IR_Scope)" : 1 , "buildClassVarDecl(ClassVarDeclNode,IR_Scope)" : 1 , "buildColon2(Colon2Node,IR_Scope)" : 1 , "buildColon3(Colon3Node,IR_Scope)" : 1 , "buildConditionalLoop(IR_ExecutionScope,Node,Node,boolean,boolean)" : 2 , "buildConst(ConstNode,IR_Scope)" : 1 , "buildConstDecl(ConstDeclNode,IR_Scope)" : 1 , "buildConstDeclAssignment(ConstDeclNode,IR_Scope,Operand)" : 3 , "buildDAsgn(DAsgnNode,IR_Scope)" : 1 , "buildDRegexp(DRegexpNode,IR_Scope)" : 1 , "buildDStr(DStrNode,IR_Scope)" : 1 , "buildDSymbol(Node,IR_Scope)" : 1 , "buildDVar(DVarNode,IR_Scope)" : 1 , "buildDXStr(DXStrNode,IR_Scope)" : 1 , "buildDefn(MethodDefNode,IR_Scope)" : 1 , "buildDefs(MethodDefNode,IR_Scope)" : 1 , "buildDot(DotNode,IR_Scope)" : 1 , "buildEnsureNode(Node,IR_Scope)" : 1 , "buildEvStr(EvStrNode,IR_Scope)" : 1 , "buildFCall(FCallNode,IR_Scope)" : 1 , "buildFalse(Node,IR_Scope)" : 1 , "buildFixnum(FixnumNode,IR_Scope)" : 1 , "buildFloat(FloatNode,IR_Scope)" : 1 , "buildFor(ForNode,IR_ExecutionScope)" : 1 , "buildForIter(ForNode,IR_ExecutionScope)" : 1 , "buildGlobalAsgn(GlobalAsgnNode,IR_Scope)" : 1 , "buildGlobalVar(GlobalVarNode,IR_Scope)" : 1 , "buildHash(HashNode,IR_Scope)" : 1 , "buildIf(IfNode,IR_Scope)" : 1 , "buildInstAsgn(InstAsgnNode,IR_Scope)" : 1 , "buildInstVar(InstVarNode,IR_Scope)" : 1 , "buildIter(IterNode,IR_ExecutionScope)" : 1 , "buildLocalAsgn(LocalAsgnNode,IR_Scope)" : 1 , "buildLocalVar(LocalVarNode,IR_Scope)" : 1 , "buildMatch(MatchNode,IR_Scope)" : 1 , "buildMatch2(Match2Node,IR_Scope)" : 1 , "buildMatch3(Match3Node,IR_Scope)" : 1 , "buildModule(ModuleNode,IR_Scope)" : 1 , "buildMultipleAsgn(MultipleAsgnNode,IR_Scope)" : 1 , "buildMultipleAsgnAssignment(MultipleAsgnNode,IR_Scope,Operand)" : 3 , "buildNewline(NewlineNode,IR_Scope)" : 1 , "buildNext(NextNode,IR_ExecutionScope)" : 1 , "buildNil(Node,IR_Scope)" : 1 , "buildNot(NotNode,IR_Scope)" : 1 , "buildNthRef(NthRefNode,IR_Scope)" : 1 , "buildOpAsgn(OpAsgnNode,IR_Scope)" : 1 , "buildOpAsgnAnd(OpAsgnAndNode,IR_Scope)" : 1 , "buildOpAsgnOr(OpAsgnOrNode,IR_Scope)" : 1 , "buildOpElementAsgn(Node,IR_Scope)" : 1 , "buildOpElementAsgnWithAnd(Node,IR_Scope)" : 1 , "buildOpElementAsgnWithMethod(Node,IR_Scope)" : 1 , "buildOpElementAsgnWithOr(Node,IR_Scope)" : 2 , "buildOr(OrNode,IR_Scope)" : 1 , "buildRedo(Node,IR_ExecutionScope)" : 1 , "buildRegexp(RegexpNode,IR_Scope)" : 1 , "buildRescue(Node,IR_Scope)" : 1 , "buildRescueBodyInternal(IR_Scope,Node,Variable,Label,List<Label>)" : 2 , "buildRescueInternal(Node,IR_Scope)" : 3 , "buildReturn(ReturnNode,IR_Scope)" : 1 , "buildRoot(Node)" : 2 , "buildSClass(Node,IR_Scope)" : 1 , "buildSValue(SValueNode,IR_Scope)" : 1 , "buildSelf(Node,IR_Scope)" : 1 , "buildSpecificArityArguments(List<Operand>,Node,IR_Scope)" : 2 , "buildSplat(SplatNode,IR_Scope)" : 2 , "buildSplatArguments(List<Operand>,SplatNode,IR_Scope)" : 1 , "buildStr(StrNode,IR_Scope)" : 1 , "buildSuper(SuperNode,IR_Scope)" : 1 , "buildSymbol(SymbolNode,IR_Scope)" : 1 , "buildToAry(ToAryNode,IR_Scope)" : 1 , "buildTrue(Node,IR_Scope)" : 1 , "buildType(Node)" : 1 , "buildUntil(UntilNode,IR_ExecutionScope)" : 1 , "buildVCall(VCallNode,IR_Scope)" : 1 , "buildVariableArityArguments(List<Operand>,Node,IR_Scope)" : 2 , "buildWhile(WhileNode,IR_ExecutionScope)" : 1 , "buildXStr(XStrNode,IR_Scope)" : 1 , "buildYield(YieldNode,IR_Scope)" : 1 , "buildZArray(Node,IR_Scope)" : 1 , "buildZSuper(ZSuperNode,IR_Scope)" : 1 , "defineNewMethod(MethodDefNode,IR_Scope,Operand,boolean)" : 2 , "loadConst(IR_Scope,IR_Scope,String)" : 3 , "needsDefinitionCheck(Node)" : 1 , "receiveArgs(ArgsNode,IR_Scope)" : 1 , "setupCallArgs(Node,IR_Scope)" : 8 , "setupCallArgs(Node,Node,IR_Scope)" : 1 , "setupCallClosure(Node,IR_Scope)" : 5 , "skipOverNewlines(IR_Scope,Node)" : 5}},{ "className" : "org::jruby::ast::SplatNode" , "selectors" : { "SplatNode(ISourcePosition,Node)" : 3 , "getValue()" : 5 , "interpret(Ruby,ThreadContext,IRubyObject,Block)" : 1}},{ "className" : "org::jruby::java::addons::KernelJavaAddons" , "selectors" : { "getTargetType(ThreadContext,Ruby,IRubyObject)" : 1 , "to_java(ThreadContext,IRubyObject)" : 1}},{ "className" : "org::jruby::RubyHash::EntryMatchType" , "selectors" : { "matches(RubyHashEntry,Object)" : 1}},{ "className" : "org::jruby::ext::ffi::StructLayoutBuilder" , "selectors" : { "StructLayoutBuilder(Ruby)" : 1 , "StructLayoutBuilder(Ruby,RubyClass)" : 2 , "alignMember(int,int)" : 1 , "calculateOffset(IRubyObject[],int,int)" : 3 , "checkFieldName(Ruby,IRubyObject)" : 3 , "createBuiltinMember(Ruby,Builtin,int)" : 1 , "createStringKey(Ruby,IRubyObject)" : 1 , "createStructLayoutBuilderClass(Ruby,RubyModule)" : 1 , "createSymbolKey(Ruby,IRubyObject)" : 2 , "storeField(Ruby,IRubyObject,Field,int,int)" : 3}},{ "className" : "org::jruby::runtime::BlockBody" , "selectors" : { "BlockBody(int)" : 7 , "arity()" : 3 , "asArgumentType(NodeType)" : 6 , "call(ThreadContext,Binding,Type)" : 2 , "call(ThreadContext,Binding,Type,Block)" : 1 , "call(ThreadContext,IRubyObject,Binding,Type)" : 2 , "call(ThreadContext,IRubyObject,Binding,Type,Block)" : 1 , "call(ThreadContext,IRubyObject,IRubyObject,Binding,Type)" : 2 , "call(ThreadContext,IRubyObject,IRubyObject,Binding,Type,Block)" : 1 , "call(ThreadContext,IRubyObject,IRubyObject,IRubyObject,Binding,Type)" : 2 , "call(ThreadContext,IRubyObject,IRubyObject,IRubyObject,Binding,Type,Block)" : 1 , "call(ThreadContext,IRubyObject,IRubyObject,IRubyObject,IRubyObject,Binding,Type)" : 2 , "call(ThreadContext,IRubyObject,IRubyObject,IRubyObject,IRubyObject,Binding,Type,Block)" : 1 , "call(ThreadContext,IRubyObject,IRubyObject,IRubyObject,IRubyObject,IRubyObject,Binding,Type)" : 2 , "call(ThreadContext,IRubyObject,IRubyObject,IRubyObject,IRubyObject,IRubyObject,Binding,Type,Block)" : 1 , "call(ThreadContext,IRubyObject,IRubyObject,IRubyObject,IRubyObject,IRubyObject,IRubyObject,Binding,Type)" : 2 , "call(ThreadContext,IRubyObject,IRubyObject,IRubyObject,IRubyObject,IRubyObject,IRubyObject,Binding,Type,Block)" : 1 , "call(ThreadContext,IRubyObject,IRubyObject,IRubyObject,IRubyObject,IRubyObject,IRubyObject,IRubyObject,Binding,Type)" : 2 , "call(ThreadContext,IRubyObject,IRubyObject,IRubyObject,IRubyObject,IRubyObject,IRubyObject,IRubyObject,Binding,Type,Block)" : 1 , "call(ThreadContext,IRubyObject,IRubyObject,IRubyObject,IRubyObject,IRubyObject,IRubyObject,IRubyObject,IRubyObject,Binding,Type)" : 2 , "call(ThreadContext,IRubyObject,IRubyObject,IRubyObject,IRubyObject,IRubyObject,IRubyObject,IRubyObject,IRubyObject,Binding,Type,Block)" : 1 , "call(ThreadContext,IRubyObject,IRubyObject,IRubyObject,IRubyObject,IRubyObject,IRubyObject,IRubyObject,IRubyObject,IRubyObject,Binding,Type)" : 2 , "call(ThreadContext,IRubyObject,IRubyObject,IRubyObject,IRubyObject,IRubyObject,IRubyObject,IRubyObject,IRubyObject,IRubyObject,Binding,Type,Block)" : 1 , "call(ThreadContext,IRubyObject,IRubyObject,IRubyObject,IRubyObject,IRubyObject,IRubyObject,IRubyObject,IRubyObject,IRubyObject,IRubyObject,Binding,Type)" : 2 , "call(ThreadContext,IRubyObject,IRubyObject,IRubyObject,IRubyObject,IRubyObject,IRubyObject,IRubyObject,IRubyObject,IRubyObject,IRubyObject,Binding,Type,Block)" : 1 , "call(ThreadContext,IRubyObject[],Binding,Type)" : 1 , "call(ThreadContext,IRubyObject[],Binding,Type,Block)" : 1 , "cloneBlock(Binding)" : 1 , "getArgumentType()" : 5 , "getArgumentTypeWackyHack(IterNode)" : 6 , "getStaticScope()" : 2 , "prepareArgumentsForCall(ThreadContext,IRubyObject[],Type)" : 13 , "setStaticScope(StaticScope)" : 1 , "yield(ThreadContext,IRubyObject,Binding,Type)" : 2 , "yield(ThreadContext,IRubyObject,IRubyObject,RubyModule,boolean,Binding,Type)" : 29 , "yield(ThreadContext,IRubyObject,IRubyObject,RubyModule,boolean,Binding,Type,Block)" : 1 , "yieldSpecific(ThreadContext,Binding,Type)" : 1 , "yieldSpecific(ThreadContext,IRubyObject,Binding,Type)" : 1 , "yieldSpecific(ThreadContext,IRubyObject,IRubyObject,Binding,Type)" : 1 , "yieldSpecific(ThreadContext,IRubyObject,IRubyObject,IRubyObject,Binding,Type)" : 1 , "yieldSpecific(ThreadContext,IRubyObject,IRubyObject,IRubyObject,IRubyObject,Binding,Type)" : 1 , "yieldSpecific(ThreadContext,IRubyObject,IRubyObject,IRubyObject,IRubyObject,IRubyObject,Binding,Type)" : 1 , "yieldSpecific(ThreadContext,IRubyObject,IRubyObject,IRubyObject,IRubyObject,IRubyObject,IRubyObject,Binding,Type)" : 1 , "yieldSpecific(ThreadContext,IRubyObject,IRubyObject,IRubyObject,IRubyObject,IRubyObject,IRubyObject,IRubyObject,Binding,Type)" : 1 , "yieldSpecific(ThreadContext,IRubyObject,IRubyObject,IRubyObject,IRubyObject,IRubyObject,IRubyObject,IRubyObject,IRubyObject,Binding,Type)" : 1 , "yieldSpecific(ThreadContext,IRubyObject,IRubyObject,IRubyObject,IRubyObject,IRubyObject,IRubyObject,IRubyObject,IRubyObject,IRubyObject,Binding,Type)" : 1 , "yieldSpecific(ThreadContext,IRubyObject,IRubyObject,IRubyObject,IRubyObject,IRubyObject,IRubyObject,IRubyObject,IRubyObject,IRubyObject,IRubyObject,Binding,Type)" : 1}},{ "className" : "org::jruby::util::io::BlockingIO" , "selectors" : { "awaitReadable(ReadableByteChannel)" : 1 , "awaitWritable(WritableByteChannel)" : 1 , "getSelector(Channel)" : 2 , "getSelector(SelectorProvider)" : 1 , "newCondition(Channel,int)" : 1 , "newCondition(Channel,int,Object)" : 1 , "read(ReadableByteChannel,ByteBuffer,boolean)" : 1 , "waitForIO(Channel,int)" : 2 , "write(WritableByteChannel,ByteBuffer,boolean)" : 1}},{ "className" : "org::jruby::ext::ffi::jffi::FastIntPointerMethodThreeArg" , "selectors" : { "FastIntPointerMethodThreeArg(RubyModule,Function,IntResultConverter,IntParameterConverter[],ParameterMarshaller[])" : 1 , "invoke(ThreadContext,IRubyObject,IRubyObject,IRubyObject)" : 2 , "invoke(ThreadContext,IRubyObject,IRubyObject,IRubyObject)::HeapInvocationBuffer" : 1}},{ "className" : "org::jruby::RubyException" , "selectors" : { "RubyException(Ruby,RubyClass)" : 3 , "RubyException(Ruby,RubyClass,String)" : 10 , "backtrace()" : 5 , "copySpecialInstanceVariables(IRubyObject)" : 1 , "createExceptionClass(Ruby)" : 1 , "getBacktrace()" : 3 , "getBacktraceFrames()" : 2 , "initBacktrace()" : 1 , "initialize(IRubyObject[],Block)" : 4 , "isArrayOfStrings(IRubyObject)" : 1 , "message(ThreadContext)" : 5 , "newException(Ruby,RubyClass,String)" : 6 , "printBacktrace(PrintStream)" : 5 , "printStackTraceLine(PrintStream,IRubyObject)" : 1 , "setBacktraceFrames(RubyStackTraceElement[])" : 2 , "set_backtrace(IRubyObject)" : 8}},{ "className" : "org::jruby::ext::ffi::StructLayout::ScalarFieldAllocator" , "selectors" : { "ScalarFieldAllocator()" : 1}},{ "className" : "org::jruby::RubyRational" , "selectors" : { "RubyRational(Ruby,IRubyObject,IRubyObject,IRubyObject)" : 7 , "canonicalizeInternal(ThreadContext,IRubyObject,IRubyObject,IRubyObject)" : 5 , "canonicalizeInternalNoReduce(ThreadContext,IRubyObject,IRubyObject,IRubyObject)" : 2 , "convert(ThreadContext,IRubyObject,IRubyObject)" : 1 , "convert(ThreadContext,IRubyObject,IRubyObject,IRubyObject)" : 2 , "convertCommon(ThreadContext,IRubyObject,IRubyObject,IRubyObject)" : 2 , "createRationalClass(Ruby)" : 1 , "denominator(ThreadContext)" : 1 , "f_addsub(ThreadContext,IRubyObject,IRubyObject,IRubyObject,IRubyObject,boolean)" : 4 , "f_imul(ThreadContext,long,long)" : 6 , "f_muldiv(ThreadContext,IRubyObject,IRubyObject,IRubyObject,IRubyObject,boolean)" : 4 , "intCheck(ThreadContext,IRubyObject)" : 1 , "intValue(ThreadContext,IRubyObject)" : 6 , "newInstance(ThreadContext,IRubyObject,IRubyObject)" : 2 , "newInstance(ThreadContext,IRubyObject,IRubyObject,IRubyObject)" : 2 , "newInstanceBang(ThreadContext,IRubyObject,IRubyObject)" : 1 , "newInstanceBang(ThreadContext,IRubyObject,IRubyObject,IRubyObject)" : 2 , "newRational(ThreadContext,IRubyObject,IRubyObject,IRubyObject)" : 2 , "newRationalBang(ThreadContext,IRubyObject,IRubyObject)" : 4 , "newRationalBang(ThreadContext,IRubyObject,IRubyObject,IRubyObject)" : 1 , "newRationalCanonicalize(ThreadContext,IRubyObject)" : 4 , "newRationalCanonicalize(ThreadContext,IRubyObject,IRubyObject)" : 1 , "newRationalConvert(ThreadContext,IRubyObject)" : 2 , "newRationalConvert(ThreadContext,IRubyObject,IRubyObject)" : 1 , "newRationalNoReduce(ThreadContext,IRubyObject,IRubyObject,IRubyObject)" : 2 , "newRationalRaw(Ruby,IRubyObject)" : 5 , "newRationalRaw(Ruby,IRubyObject,IRubyObject)" : 3 , "numerator(ThreadContext)" : 1 , "op_ceil(ThreadContext)" : 1 , "op_divmod(ThreadContext,IRubyObject)" : 1 , "op_floor(ThreadContext)" : 1 , "op_idiv(ThreadContext,IRubyObject)" : 1 , "op_mod(ThreadContext,IRubyObject)" : 1 , "op_round(ThreadContext)" : 1 , "op_roundCommonPost(ThreadContext,IRubyObject,IRubyObject,IRubyObject)" : 4 , "op_roundCommonPre(ThreadContext,IRubyObject)" : 4 , "op_truncate(ThreadContext)" : 1 , "rationalize(ThreadContext,IRubyObject[])" : 1 , "setCanonicalization(boolean)" : 1 , "str_to_r_internal(ThreadContext,IRubyObject)" : 2 , "str_to_r_strict(ThreadContext,IRubyObject)" : 2 , "to_r(ThreadContext)" : 1}},{ "className" : "org::jruby::Profile" , "selectors" : { "allowBuiltin(String)" : 1 , "allowClass(String)" : 36 , "allowLoad(String)" : 1 , "allowModule(String)" : 9 , "allowRequire(String)" : 1}},{ "className" : "org::jruby::internal::runtime::methods::JavaMethod::JavaMethodZeroOrNBlock" , "selectors" : { "JavaMethodZeroOrNBlock(RubyModule,Visibility)" : 2 , "JavaMethodZeroOrNBlock(RubyModule,Visibility,CallConfiguration)" : 2 , "call(ThreadContext,IRubyObject,RubyModule,String,Block)" : 5}},{ "className" : "org::jruby::RubyProc" , "selectors" : { "RubyProc(Ruby,RubyClass,Type)" : 4 , "call(ThreadContext,IRubyObject[])" : 10 , "call(ThreadContext,IRubyObject[],IRubyObject,Block)" : 5 , "createProcClass(Ruby)" : 1 , "getBlock()" : 11 , "handleBreakJump(Ruby,Block,BreakJump,int)" : 1 , "handleRetryJump(Ruby,RetryJump)" : 1 , "handleReturnJump(ThreadContext,ReturnJump,int)" : 1 , "initialize(ThreadContext,Block)" : 1 , "newProc(Ruby,Block,Type)" : 23 , "newProc(Ruby,Type)" : 3}},{ "className" : "org::jruby::ext::ffi::MemoryPointer" , "selectors" : { "MemoryPointer(Ruby,IRubyObject)" : 1 , "MemoryPointer(Ruby,IRubyObject,DirectMemoryIO,long,int)" : 1 , "allocate(Ruby,int,int,boolean)" : 3 , "createMemoryPointerClass(Ruby,RubyModule)" : 1 , "init(ThreadContext,IRubyObject,int,int,boolean,Block)" : 3}},{ "className" : "org::jruby::RubyInstanceConfig" , "selectors" : { "RubyInstanceConfig()" : 24 , "createLoadService(Ruby)" : 1 , "displayedFileName()" : 7 , "findScript(File)" : 1 , "getArgv()" : 11 , "getBasicUsageHelp()" : 1 , "getClassCache()" : 11 , "getCompatVersion()" : 11 , "getCompileMode()" : 11 , "getCopyrightString()" : 3 , "getCurrentDirectory()" : 5 , "getEnvironment()" : 4 , "getError()" : 31 , "getExcludedMethods()" : 5 , "getExtendedHelp()" : 1 , "getInPlaceBackupExtention()" : 1 , "getInput()" : 4 , "getInputFieldSeparator()" : 3 , "getJRubyHome()" : 4 , "getJarScriptSource()" : 1 , "getJitLogEvery()" : 4 , "getJitMax()" : 3 , "getJitMaxSize()" : 4 , "getJitThreshold()" : 3 , "getKCode()" : 4 , "getLoadServiceCreator()" : 2 , "getLoader()" : 6 , "getOptionGlobals()" : 2 , "getOutput()" : 17 , "getProfile()" : 2 , "getPropertyHelp()" : 1 , "getRecordSeparator()" : 3 , "getSafeLevel()" : 2 , "getScriptFileName()" : 13 , "getScriptSource()" : 1 , "getThreadDumpSignal()" : 1 , "getVerbose()" : 7 , "getVersionString()" : 4 , "hasShebangLine()" : 1 , "inlineScript()" : 2 , "isAssumeLoop()" : 4 , "isAssumePrinting()" : 4 , "isBenchmarking()" : 3 , "isDebug()" : 9 , "isInlineScript()" : 2 , "isJitLogging()" : 3 , "isJitLoggingVerbose()" : 7 , "isManagementEnabled()" : 2 , "isObjectSpaceEnabled()" : 3 , "isParserDebug()" : 1 , "isProcessLineEnds()" : 3 , "isRunRubyInProcess()" : 3 , "isSamplingEnabled()" : 4 , "isShouldCheckSyntax()" : 1 , "isShouldRunInterpreter()" : 3 , "isShowBytecode()" : 4 , "isShowCopyright()" : 1 , "isShowVersion()" : 4 , "isSourceFromStdin()" : 2 , "isSplit()" : 3 , "isVerbose()" : 5 , "isxFlag()" : 4 , "loadPaths()" : 5 , "newCompiler()" : 3 , "processArguments(String[])" : 14 , "requiredLibraries()" : 3 , "setArgv(String[])" : 2 , "setClassCache(ClassCache)" : 4 , "setCompatVersion(CompatVersion)" : 11 , "setCompileMode(CompileMode)" : 5 , "setCurrentDirectory(String)" : 5 , "setEnvironment(Map)" : 3 , "setError(PrintStream)" : 10 , "setHasShebangLine(boolean)" : 2 , "setInput(InputStream)" : 10 , "setJRubyHome(String)" : 10 , "setJitLogEvery(int)" : 1 , "setJitMax(int)" : 1 , "setJitMaxSize(int)" : 1 , "setJitThreshold(int)" : 1 , "setKCode(KCode)" : 1 , "setLoadPaths(List<String>)" : 9 , "setLoadServiceCreator(LoadServiceCreator)" : 2 , "setLoader(ClassLoader)" : 6 , "setObjectSpaceEnabled(boolean)" : 7 , "setOutput(PrintStream)" : 10 , "setProfile(Profile)" : 1 , "setRecordSeparator(String)" : 1 , "setRunRubyInProcess(boolean)" : 1 , "setScriptFileName(String)" : 3 , "setShowBytecode(boolean)" : 1 , "setShowCopyright(boolean)" : 1 , "setShowVersion(boolean)" : 2 , "shouldPrintProperties()" : 1 , "shouldPrintUsage()" : 1 , "shouldRunInterpreter()" : 1 , "tryProcessArgumentsWithRubyopts(String[])" : 1 , "verifyHome(String)" : 3}},{ "className" : "org::jruby::embed::internal::EmbedRubyInterfaceAdapterImpl" , "selectors" : { "EmbedRubyInterfaceAdapterImpl(ScriptingContainer)" : 1}},{ "className" : "org::jruby::test::bench::BenchLongFibRecursive" , "selectors" : { "benchBoxedLongFib(long)" : 1 , "benchFullyBoxedFib(long)" : 1 , "benchPrimitiveLongFib(long)" : 1 , "boxedLongFib(Long)" : 3 , "fullyBoxedFib(BoxedLong)" : 3 , "longFib(long)" : 3}},{ "className" : "org::jruby::compiler::ScriptCompiler" , "selectors" : { "endScript(boolean,boolean)" : 1 , "startFileMethod(CompilerCallback,StaticScope,ASTInspector)" : 1 , "startScript(StaticScope)" : 1}},{ "className" : "org::jruby::ast::HashNode" , "selectors" : { "HashNode(ISourcePosition,ListNode)" : 14 , "aset(Ruby,RubyHash,IRubyObject,IRubyObject)" : 1 , "getListNode()" : 17}},{ "className" : "org::jruby::RubyIO" , "selectors" : { "RubyIO(Ruby,Channel)" : 6 , "RubyIO(Ruby,InputStream)" : 4 , "RubyIO(Ruby,OutputStream)" : 6 , "RubyIO(Ruby,POpenProcess,ModeFlags)" : 1 , "RubyIO(Ruby,RubyClass)" : 6 , "RubyIO(Ruby,STDIO)" : 3 , "addBlockingThread(RubyThread)" : 2 , "binmode()" : 1 , "checkArrayType(Ruby,IRubyObject)" : 3 , "checkDescriptor(Ruby,ChannelDescriptor)" : 2 , "cleanupPOpen(POpenTuple)" : 2 , "close()" : 21 , "close2(Ruby)" : 2 , "closed_p(ThreadContext)" : 1 , "convertToIO(ThreadContext,IRubyObject)" : 3 , "createIOClass(Ruby)" : 1 , "ctl(Ruby,IRubyObject,IRubyObject)" : 3 , "doSeek(ThreadContext,long,int)" : 3 , "each_byte(ThreadContext,Block)" : 1 , "each_char(ThreadContext,Block)" : 2 , "each_line(ThreadContext,IRubyObject[],Block)" : 2 , "eof_p(ThreadContext)" : 2 , "external_encoding(ThreadContext)" : 2 , "fdopen(ChannelDescriptor,ModeFlags)" : 3 , "fileno(ThreadContext)" : 1 , "flush()" : 2 , "foreach(ThreadContext,IRubyObject,IRubyObject[],Block)" : 1 , "getChannel()" : 21 , "getDescriptorByFileno(int)" : 3 , "getEncodingCommon(ThreadContext,IRubyObject)" : 2 , "getHandler()" : 4 , "getIOModes(Ruby,String)" : 11 , "getIOModesIntFromString(Ruby,String)" : 4 , "getInStream()" : 2 , "getNewFileno()" : 20 , "getOpenFile()" : 14 , "getOpenFileChecked()" : 38 , "getOutStream()" : 2 , "getPartial(ThreadContext,IRubyObject[],boolean)" : 2 , "getc()" : 4 , "getline(???)" : 2 , "getline(Ruby,ByteList,long,ByteListCache)::ByteList" : 1 , "getlineFast(Ruby,int,ByteListCache)" : 1 , "getlineFast(Ruby,int,ByteListCache)::ByteList" : 1 , "gets(ThreadContext)" : 2 , "gets(ThreadContext,IRubyObject)" : 2 , "incrementLineno(Ruby,OpenFile)" : 3 , "initialize(IRubyObject[],Block)" : 1 , "initialize19(ThreadContext,IRubyObject,Block)" : 1 , "initialize19(ThreadContext,IRubyObject,IRubyObject,Block)" : 1 , "initialize19(ThreadContext,IRubyObject,IRubyObject,IRubyObject,Block)" : 1 , "initializeCommon19(int,ModeFlags)" : 3 , "inspectPuts(ThreadContext,IRubyObject,RubyArray)" : 1 , "interruptBlockingThreads()" : 1 , "isClosed()" : 8 , "lineno_set(ThreadContext,IRubyObject)" : 1 , "newFile(ThreadContext,IRubyObject,IRubyObject[])" : 4 , "obliterateProcess(Process)" : 2 , "op_binmode(ThreadContext)" : 1 , "open(ThreadContext,IRubyObject,IRubyObject[],Block)" : 9 , "parseEncodingFromString(ThreadContext,IRubyObject,int)" : 2 , "parseModes(IRubyObject)" : 2 , "parseModes19(ThreadContext,IRubyObject)" : 5 , "parseOptions(ThreadContext,IRubyObject,ModeFlags)" : 3 , "popen(ThreadContext,IRubyObject,IRubyObject[],Block)" : 1 , "popenSpecial(ThreadContext,IRubyObject[])" : 2 , "pos(ThreadContext)" : 1 , "pos_set(ThreadContext,IRubyObject)" : 1 , "print(ThreadContext,IRubyObject,IRubyObject[])" : 2 , "putc(ThreadContext,IRubyObject,IRubyObject)" : 2 , "puts(ThreadContext,IRubyObject,IRubyObject[])" : 2 , "putsArray(ThreadContext,IRubyObject,IRubyObject[])" : 2 , "read(IRubyObject[])" : 2 , "read(ThreadContext)" : 6 , "read(ThreadContext,IRubyObject)" : 4 , "read(ThreadContext,IRubyObject,IRubyObject)" : 1 , "read(ThreadContext,IRubyObject,IRubyObject,Block)" : 1 , "read(ThreadContext,IRubyObject,IRubyObject,IRubyObject)" : 1 , "read(ThreadContext,IRubyObject,IRubyObject,IRubyObject,IRubyObject)" : 1 , "read19(ThreadContext,IRubyObject,IRubyObject,IRubyObject,IRubyObject,RubyHash)" : 1 , "readAll(IRubyObject)" : 3 , "readCheck(Stream)" : 6 , "readNotAll(ThreadContext,OpenFile,int,RubyString)" : 2 , "readline(ThreadContext)" : 1 , "readline(ThreadContext,IRubyObject)" : 1 , "readlines(ThreadContext,IRubyObject[])" : 1 , "registerDescriptor(ChannelDescriptor)" : 17 , "registerDescriptor(ChannelDescriptor,boolean)" : 1 , "registerSelect(ThreadContext,Selector,IRubyObject,RubyIO,int)" : 2 , "removeBlockingThread(RubyThread)" : 2 , "restartSystemCall(Exception)" : 1 , "rewind(ThreadContext)" : 1 , "seek(ThreadContext,IRubyObject)" : 2 , "seek(ThreadContext,IRubyObject[])" : 1 , "select_static(ThreadContext,Ruby,IRubyObject[])" : 2 , "setExternalEncoding(ThreadContext,IRubyObject)" : 4 , "setInternalEncoding(ThreadContext,IRubyObject)" : 3 , "set_encoding(ThreadContext,IRubyObject)" : 1 , "set_encoding(ThreadContext,IRubyObject,IRubyObject)" : 1 , "swallow(int)" : 2 , "synthesizeSystemCallError(IOException)" : 1 , "sysread(ThreadContext,IRubyObject[])::ByteList" : 1 , "syswrite(ThreadContext,IRubyObject)" : 1 , "unregisterDescriptor(int)" : 1 , "waitReadable(ChannelDescriptor)" : 1 , "waitWritable(ChannelDescriptor)" : 1 , "writeDataBuffered()" : 1 , "writeSeparator(ThreadContext,IRubyObject)" : 1}},{ "className" : "org::jruby::ext::ffi::NoImplFactory" , "selectors" : { "NoImplFactory(String)" : 1}},{ "className" : "org::jruby::ext::ffi::jffi::CallbackManager" , "selectors" : { "CallbackManager()" : 1 , "addressValue(IRubyObject)" : 2 , "createCallbackClass(Ruby,RubyModule)" : 1 , "getCallback(Ruby,CallbackInfo,Block)" : 1 , "getCallback(Ruby,CallbackInfo,Object)" : 1 , "getCallback(Ruby,CallbackInfo,RubyObject)" : 1 , "getClosureInfo(Ruby,CallbackInfo)" : 1 , "getInstance()" : 4 , "isParameterTypeValid(Type)" : 1 , "isReturnTypeValid(Type)" : 1 , "longValue(IRubyObject)" : 8 , "newCallback(Ruby,CallbackInfo,Object)" : 3 , "newClosure(???)" : 1 , "newClosureInfo(Ruby,CallbackInfo)" : 1}},{ "className" : "org::jruby::test::Abstract" , "selectors" : { "protected_method()" : 1}},{ "className" : "org::jruby::embed::internal::EmbedRubyObjectAdapterImpl" , "selectors" : { "EmbedRubyObjectAdapterImpl(ScriptingContainer)" : 1 , "call(MethodType,Class<T>,Object,String,Block,EmbedEvalUnit,Object[])" : 12 , "callEachType(MethodType,IRubyObject,String,Block,Object[])" : 1}},{ "className" : "org::jruby::ext::ffi::AutoPointer" , "selectors" : { "AutoPointer(Ruby,RubyClass)" : 1 , "checkPointer(Ruby,IRubyObject)" : 2 , "createAutoPointerClass(Ruby,RubyModule)" : 1}},{ "className" : "org::jruby::ext::ffi::StructLayout::StringFieldAllocator" , "selectors" : { "StringFieldAllocator()" : 1}},{ "className" : "org::jruby::RubyPrecision" , "selectors" : { "createPrecisionModule(Ruby)" : 1 , "induced_from(IRubyObject,IRubyObject,Block)" : 1}},{ "className" : "org::jruby::ext::ffi::jffi::CallbackMarshaller" , "selectors" : { "CallbackMarshaller(???)" : 1 , "marshal(???)" : 1}},{ "className" : "org::jruby::ext::ffi::jffi::FastIntPointerMethodOneArg" , "selectors" : { "FastIntPointerMethodOneArg(RubyModule,Function,IntResultConverter,IntParameterConverter[],ParameterMarshaller[])" : 1 , "invoke(ThreadContext,IRubyObject)" : 2 , "invoke(ThreadContext,IRubyObject)::HeapInvocationBuffer" : 1}},{ "className" : "org::jruby::platform::Platform" , "selectors" : { "Platform()" : 1 , "getProperty(String,String)" : 3 , "initArchitecture()" : 1 , "initOperatingSystem()" : 1}},{ "className" : "org::jruby::ext::ffi::jffi::FastLongMethodZeroArg" , "selectors" : { "FastLongMethodZeroArg(RubyModule,Function,LongResultConverter,LongParameterConverter[])" : 1}},{ "className" : "org::jruby::ast::util::SexpMaker" , "selectors" : { "SexpMaker()" : 2 , "aliasNode(AliasNode)" : 1 , "argumentNode(ArgumentNode)" : 1 , "attrAssignNode(AttrAssignNode)" : 1 , "backRefNode(BackRefNode)" : 1 , "bignumNode(BignumNode)" : 1 , "blockArgNode(BlockArgNode)" : 1 , "callNode(CallNode)" : 1 , "classVarAsgnNode(ClassVarAsgnNode)" : 1 , "classVarDeclNode(ClassVarDeclNode)" : 1 , "classVarNode(ClassVarNode)" : 1 , "colon2Node(Colon2Node)" : 1 , "colon3Node(Colon3Node)" : 1 , "constDeclNode(ConstDeclNode)" : 1 , "constNode(ConstNode)" : 1 , "create(String,Node,Node)" : 1 , "dAsgnNode(DAsgnNode)" : 1 , "dRegexpNode(DRegexpNode)" : 1 , "dVarNode(DVarNode)" : 1 , "dotNode(DotNode)" : 1 , "fCallNode(FCallNode)" : 1 , "fixnumNode(FixnumNode)" : 1 , "flipNode(FlipNode)" : 1 , "floatNode(FloatNode)" : 1 , "globalAsgnNode(GlobalAsgnNode)" : 1 , "globalVarNode(GlobalVarNode)" : 1 , "instAsgnNode(InstAsgnNode)" : 1 , "instVarNode(InstVarNode)" : 1 , "leafInfo(Node)" : 1 , "localAsgnNode(LocalAsgnNode)" : 1 , "localVarNode(LocalVarNode)" : 1 , "noDataContents(Node)" : 58 , "nthRefNode(NthRefNode)" : 1 , "opAsgnNode(OpAsgnNode)" : 1 , "opElementAsgnNode(OpElementAsgnNode)" : 1 , "process(Node)" : 4 , "processMethod(String,Node,Node)" : 1 , "regexpNode(RegexpNode)" : 1 , "shortName(Node)" : 1 , "strNode(StrNode)" : 1 , "symbolNode(SymbolNode)" : 1 , "toString()" : 2 , "undefNode(UndefNode)" : 1 , "valiasNode(VAliasNode)" : 1 , "vcallNode(VCallNode)" : 1 , "xStrNode(XStrNode)" : 1}},{ "className" : "org::jruby::ext::ffi::jffi::FastLongMethodFactory::PointerResultConverter" , "selectors" : { "PointerResultConverter()" : 1}},{ "className" : "org::jruby::ext::ffi::jffi::FastIntMethodFactory::Unsigned32ParameterConverter" , "selectors" : { "Unsigned32ParameterConverter()" : 1}},{ "className" : "org::jruby::runtime::load::LoadService::LoadSearcher" , "selectors" : { "shouldTrySearch(SearchState)" : 1 , "trySearch(SearchState)" : 1}},{ "className" : "org::jruby::internal::runtime::methods::JavaMethod::JavaMethodTwoOrN" , "selectors" : { "JavaMethodTwoOrN(RubyModule,Visibility)" : 2 , "JavaMethodTwoOrN(RubyModule,Visibility,CallConfiguration)" : 2 , "call(ThreadContext,IRubyObject,RubyModule,String,IRubyObject,IRubyObject)" : 3}},{ "className" : "org::jruby::test::ScriptTestSuite" , "selectors" : { "setupInterpreter()" : 1 , "suite()::TestSuite" : 1}},{ "className" : "org::jruby::compiler::impl::StandardASMCompiler" , "selectors" : { "StandardASMCompiler(String,String)" : 5 , "addBlockCallback19Descriptor(String)" : 1 , "addBlockCallbackDescriptor(String)" : 1 , "addInvokerDescriptor(String,int,StaticScope,CallConfiguration,String,int)" : 1 , "beginClassInit()" : 1 , "beginInit()" : 1 , "buildStaticScopeNames(SkinnyMethodAdapter,StaticScope)" : 3 , "dumpClass(PrintStream)" : 1 , "dumpClass(PrintStream)::TraceClassVisitor" : 2 , "endClassInit()" : 1 , "endInit()" : 1 , "endScript(boolean,boolean)" : 1 , "endScript(boolean,boolean)::Label" : 2 , "getAndIncrementEnsureNumber()" : 1 , "getAndIncrementInnerIndex()" : 5 , "getAndIncrementMethodIndex()" : 12 , "getAndIncrementRescueNumber()" : 1 , "getCacheCompiler()" : 48 , "getClassByteArray()" : 3 , "getClassInitMethod()" : 1 , "getClassVisitor(???)" : 10 , "getClassname()" : 97 , "getInitMethod()" : 1 , "getMethodSignature(int)" : 4 , "getNewConstant(String,String,Object)" : 1 , "getNewConstantName()" : 1 , "getSourcename()" : 2 , "getStaticClosure19Signature(String)" : 2 , "getStaticClosureSignature(String)" : 1 , "getStaticMethodSignature(String,int)" : 13 , "loadClass(JRubyClassLoader)" : 1 , "startFileMethod(CompilerCallback,StaticScope,ASTInspector)" : 3 , "startMethod(String,String,CompilerCallback,StaticScope,ASTInspector)" : 1 , "startScript(StaticScope)" : 1 , "writeClass(String,File,ClassWriter)::ClassReader" : 1 , "writeClassFile(File,byte[],String)" : 4 , "writeInvokers(File)::ClassReader" : 3}},{ "className" : "org::jruby::runtime::assigner::Pre1ExpandedRest0Post0BlockAssigner" , "selectors" : { "Pre1ExpandedRest0Post0BlockAssigner(Node,Node)" : 1 , "assign(Ruby,ThreadContext,IRubyObject,Block)" : 1 , "assign(Ruby,ThreadContext,IRubyObject,IRubyObject,Block)" : 3}},{ "className" : "org::jruby::embed::internal::BiVariableMap" , "selectors" : { "BiVariableMap(Ruby,LocalVariableBehavior)" : 2 , "checkKey(Object)" : 1 , "clear()" : 25 , "containsKey(Object)" : 11 , "containsValue(Object)" : 1 , "entrySet()" : 1 , "get(Object)" : 9 , "getLocalVarNames()" : 1 , "getLocalVarValues()" : 1 , "getMap()" : 1 , "getNames()" : 1 , "getVariable(String)" : 11 , "getVariableInterceptor()" : 3 , "getVariables()" : 2 , "inject(ManyVarsDynamicScope,int,IRubyObject)" : 2 , "keySet()" : 1 , "put(K,V)" : 10 , "remove(Object)" : 3 , "retrieve(IRubyObject)" : 2 , "setVariable(BiVariable)" : 1 , "size()" : 2 , "terminate()" : 1 , "update(String,BiVariable)" : 8 , "values()" : 1}},{ "className" : "org::jruby::runtime::load::JarredScript" , "selectors" : { "JarredScript(LoadServiceResource)" : 1 , "getResource()" : 1}},{ "className" : "org::jruby::ext::ffi::StructLayout::CharArrayProxy" , "selectors" : { "CharArrayProxy(Ruby,IRubyObject,long,Array,MemoryOp)" : 1}},{ "className" : "org::jruby::RubyZlib::Deflate" , "selectors" : { "Deflate(Ruby,RubyClass)" : 1 , "append(IRubyObject)" : 2 , "deflate(???)" : 1 , "finish()" : 1 , "flush(int)" : 3 , "flush(int)::ByteList" : 1 , "init(int,int,int,int)" : 2 , "init(int,int,int,int)::ByteList" : 1 , "internalFinished()" : 1 , "internalReset()::ByteList" : 1 , "run()" : 4}},{ "className" : "org::jruby::lexer::yacc::RubyYaccLexer" , "selectors" : { "<Initializer>()::ByteList" : 3 , "RubyYaccLexer()" : 1 , "RubyYaccLexer(boolean)" : 2 , "advance()" : 4 , "ampersand(boolean)" : 1 , "arg_ambiguous()" : 3 , "at()" : 1 , "backtick(boolean)" : 1 , "bang()" : 1 , "caret()" : 1 , "colon(boolean)" : 1 , "comma(int)" : 1 , "determineExpressionState()" : 9 , "dollar()" : 1 , "dot()" : 1 , "doubleQuote()" : 1 , "getCmdArgumentState()" : 6 , "getConditionState()" : 14 , "getCurrentLine()" : 62 , "getFloatToken(String)" : 1 , "getIdentifier(int)" : 4 , "getInteger(String,int)" : 6 , "getKeyword(String)" : 1 , "getLeftParenBegin()" : 1 , "getNumberToken(String,boolean,int)" : 3 , "getPosition()" : 232 , "getPosition(ISourcePosition)" : 1 , "getStrTerm()" : 4 , "greaterThan()" : 1 , "hereDocumentIdentifier()" : 1 , "hereDocumentIdentifier()::ByteList" : 2 , "identifier(int,boolean)" : 2 , "identifierToken(LexState,int,String)" : 5 , "incrementParenNest()" : 1 , "isARG()" : 14 , "isBEG()" : 10 , "isHexChar(int)" : 5 , "isIdentifierChar(int)" : 9 , "isMultiByteChar(int)" : 1 , "isNext_identchar()" : 1 , "isOctChar(int)" : 2 , "leftBracket(boolean)" : 1 , "leftCurly()" : 1 , "leftParen(boolean)" : 1 , "lessThan(boolean)" : 1 , "minus(boolean)" : 1 , "newBignumNode(String,int)" : 1 , "newFixnumNode(String,int)" : 1 , "parseNumber(int)" : 2 , "parseQuote(int)" : 2 , "percent(boolean)" : 1 , "pipe()" : 1 , "plus(boolean)" : 1 , "printToken(int)" : 1 , "questionMark()" : 1 , "questionMark()::ByteList" : 1 , "readComment(int)" : 1 , "readEscape()" : 4 , "reset()" : 3 , "resetStacks()" : 1 , "rightBracket()" : 1 , "rightCurly()" : 1 , "rightParen()" : 1 , "scanOct(int)" : 1 , "setEncoding(???)" : 2 , "setLeftParenBegin(int)" : 2 , "setParserSupport(ParserSupport)" : 2 , "setSource(LexerSource)" : 2 , "setState(LexState)" : 32 , "setStrTerm(StrTerm)" : 9 , "setValue(Object)" : 9 , "setWarnings(IRubyWarnings)" : 2 , "singleQuote()" : 1 , "slash(boolean)" : 1 , "star(boolean)" : 1 , "tilde()" : 1 , "token()" : 4 , "value()" : 16 , "yylex()" : 1 , "yylex2()" : 1}},{ "className" : "org::jruby::ext::ffi::io::FileDescriptorIO" , "selectors" : { "FileDescriptorIO(Ruby,IRubyObject)" : 2 , "FileDescriptorIO(Ruby,RubyClass)" : 1 , "createFileDescriptorIOClass(Ruby,RubyModule)" : 1}},{ "className" : "org::jruby::util::SunSignalFacade::JRubySignalHandler" , "selectors" : { "JRubySignalHandler(Ruby,BlockCallback,String)" : 1 , "JRubySignalHandler(Ruby,IRubyObject,BlockCallback,String)" : 2 , "JRubySignalHandler(Ruby,IRubyObject,String)" : 1}},{ "className" : "org::jruby::compiler::ir::representations::CFG" , "selectors" : { "CFG(IR_ExecutionScope)" : 1 , "build(List<IR_Instr>)" : 1 , "build(List<IR_Instr>)::DefaultDirectedGraph" : 1 , "buildDominatorTree()" : 1 , "buildPostOrderTraversal()" : 2 , "getDataFlowSolution(String)" : 12 , "getEntryBB()" : 5 , "getExitBB()" : 3 , "getFallThroughBB(BasicBlock)" : 1 , "getGraph(???)" : 3 , "getMaxNodeID()" : 5 , "getNewLabel()" : 1 , "getNextBBID()" : 1 , "getNodes()" : 3 , "getPostOrderTraverser()" : 2 , "getReversePostOrderTraverser()" : 2 , "getScope()" : 7 , "getTargetBB(Label)" : 3 , "incomingEdgesOf(BasicBlock)" : 1 , "intersectDomSets(Integer[],Integer,Integer)" : 1 , "outgoingEdgesOf(BasicBlock)" : 1 , "setDataFlowSolution(String,DataFlowProblem)" : 5 , "toStringInstrs()" : 3}},{ "className" : "org::jruby::compiler::ir::instructions::LOAD_FROM_FRAME_Instr" , "selectors" : { "LOAD_FROM_FRAME_Instr(Variable,IR_ExecutionScope,String)" : 3 , "getClosestMethodAncestor(IR_ExecutionScope)" : 1}},{ "className" : "org::jruby::runtime::MethodFactory" , "selectors" : { "createFactory(ClassLoader)" : 9 , "getAnnotatedMethod(RubyModule,JavaMethodDescriptor)" : 2 , "getAnnotatedMethod(RubyModule,List<JavaMethodDescriptor>)" : 1 , "getBlockCallback(String,Object)" : 1 , "getBlockCallback19(String,Object)" : 1 , "getBlockCallback19Offline(String,String)" : 1 , "getBlockCallbackOffline(String,String)" : 1 , "getCompiledMethod(RubyModule,String,Arity,Visibility,StaticScope,Object,CallConfiguration,ISourcePosition)" : 3 , "getCompiledMethodLazily(RubyModule,String,Arity,Visibility,StaticScope,Object,CallConfiguration,ISourcePosition)" : 2 , "getCompiledMethodOffline(String,String,String,Arity,StaticScope,CallConfiguration,String,int)" : 1}},{ "className" : "org::jruby::RubyModule" , "selectors" : { "RubyModule(Ruby)" : 1 , "RubyModule(Ruby,RubyClass)" : 3 , "RubyModule(Ruby,RubyClass,Generation,boolean)" : 1 , "RubyModule(Ruby,RubyClass,boolean)" : 2 , "addAccessor(ThreadContext,String,Visibility,boolean,boolean)" : 8 , "addAccessor(ThreadContext,String,Visibility,boolean,boolean)::anonymous(JavaMethodOne)" : 1 , "addAccessor(ThreadContext,String,Visibility,boolean,boolean)::anonymous(JavaMethodZero)" : 1 , "addClassProvider(ClassProvider)" : 1 , "addIncludingHierarchy(IncludedModuleWrapper)" : 1 , "addMethod(String,DynamicMethod)" : 67 , "addMethodAtBootTimeOnly(String,DynamicMethod)" : 1 , "addMethodInternal(String,DynamicMethod)" : 1 , "addReadAttribute(ThreadContext,String)" : 2 , "addReadWriteAttribute(ThreadContext,String)" : 3 , "addToCache(String,DynamicMethod,Object)" : 2 , "append_features(IRubyObject)" : 1 , "attr_accessor(ThreadContext,IRubyObject[])" : 1 , "attr_reader(ThreadContext,IRubyObject[])" : 2 , "becomeSynchronized()" : 3 , "cacheHit(String)" : 1 , "calculateFullName()" : 1 , "cannotRemoveError(String)" : 3 , "checkForCyclicInclude(RubyModule)" : 2 , "classVariablesCommon()" : 2 , "cloneMethods(RubyModule)" : 2 , "const_set(IRubyObject,IRubyObject)" : 2 , "constantTableContains(String)" : 2 , "constantTableFastContains(String)" : 2 , "constantTableFastFetch(String)" : 5 , "constantTableFastStore(String,IRubyObject)" : 2 , "constantTableFetch(String)" : 5 , "constantTableRemove(String)" : 2 , "constantTableStore(String,IRubyObject)" : 2 , "constantsCommon(Ruby,boolean)" : 2 , "constantsCommon19(ThreadContext,boolean)" : 2 , "createModuleClass(Ruby,RubyClass)" : 1 , "createProcMethod(String,Visibility,RubyProc)" : 2 , "define(RubyModule,JavaMethodDescriptor,DynamicMethod)" : 3 , "defineAlias(String,String)" : 7 , "defineAliases(List<String>,String)" : 2 , "defineAnnotatedConstant(Field)" : 1 , "defineAnnotatedConstants(Class)" : 20 , "defineAnnotatedMethod(JavaMethodDescriptor,MethodFactory)" : 1 , "defineAnnotatedMethod(Method,MethodFactory)" : 1 , "defineAnnotatedMethod(String,List<JavaMethodDescriptor>,MethodFactory)" : 6 , "defineAnnotatedMethods(Class)" : 199 , "defineAnnotatedMethodsIndividually(Class)" : 1 , "defineClassUnder(String,RubyClass,ObjectAllocator)" : 67 , "defineConstant(String,IRubyObject)" : 110 , "defineFastMethod(String,Callback)" : 5 , "defineFastPrivateMethod(String,Callback)" : 4 , "defineMethod(String,Callback)" : 4 , "defineModuleFunction(String,Callback)" : 1 , "defineModuleUnder(String)" : 17 , "defineOrGetClassUnder(String,RubyClass)" : 1 , "defineOrGetModuleUnder(String)" : 1 , "definePrivateMethod(String,Callback)" : 1 , "define_method(ThreadContext,IRubyObject,Block)" : 2 , "define_method(ThreadContext,IRubyObject,IRubyObject,Block)" : 2 , "deleteClassVariable(String)" : 2 , "deleteConstant(String)" : 2 , "doIncludeModule(RubyModule)" : 1 , "doesTheClassWrapTheModule(RubyClass,RubyModule)" : 1 , "ensureClassVariablesSettable()" : 2 , "ensureConstantsSettable()" : 3 , "equals(Object)" : 1 , "exportMethod(String,Visibility)" : 1 , "extend_object(IRubyObject)" : 5 , "fastFetchConstant(String)" : 5 , "fastGetClass(String)" : 136 , "fastGetClassVar(String)" : 2 , "fastGetConstant(String)" : 43 , "fastGetConstantAt(String)" : 5 , "fastGetConstantFrom(String)" : 1 , "fastGetConstantFromConstMissing(String)" : 4 , "fastGetConstantFromNoConstMissing(String)" : 5 , "fastHasClassVariable(String)" : 3 , "fastIsClassVarDefined(String)" : 5 , "fastIsConstantDefined(String)" : 1 , "fastIsConstantDefined19(String)" : 1 , "fastSetClassVar(String,IRubyObject)" : 7 , "fastSetConstant(String,IRubyObject)" : 52 , "fastStoreClassVariable(String,IRubyObject)" : 2 , "fastStoreConstant(String,IRubyObject)" : 1 , "fetchClassVariable(String)" : 3 , "fetchConstant(String)" : 2 , "findImplementer(RubyModule)" : 1 , "freeze(ThreadContext)" : 1 , "gatherModules(RubyModule)" : 1 , "getAncestorList()" : 3 , "getBaseName()" : 16 , "getCacheToken()" : 3 , "getCachedMethods()" : 1 , "getCachedMethodsForWrite()" : 1 , "getClass(String)" : 6 , "getClassVar(String)" : 3 , "getClassVariableNameList()" : 2 , "getClassVariables()" : 2 , "getClassVariablesForRead()" : 5 , "getConstant(String)" : 11 , "getConstantAt(String)" : 13 , "getConstantInner(String)" : 2 , "getConstantMap()" : 9 , "getConstantMapForWrite()" : 7 , "getConstantNames()" : 6 , "getConstantNoConstMissing(String)" : 3 , "getMethods()" : 13 , "getMethodsForWrite()" : 6 , "getName()" : 156 , "getNonIncludedClass()" : 12 , "getParent()" : 2 , "getStoredConstantNameList()" : 1 , "getSuperClass()" : 75 , "hasClassVariable(String)" : 3 , "hasConstant(String)" : 3 , "hasConstantInHierarchy(String)" : 1 , "hasModuleInHierarchy(RubyModule)" : 2 , "hashCode()" : 14 , "include(IRubyObject[])" : 5 , "includeModule(IRubyObject)" : 37 , "initialize(Block)" : 2 , "initialize_copy(IRubyObject)" : 1 , "instance_methods(IRubyObject[])" : 2 , "instance_methods(IRubyObject[],Visibility,boolean,boolean)" : 8 , "instance_methods19(IRubyObject[])" : 1 , "invalidateCacheDescendants()" : 8 , "invalidateConstantCache()" : 3 , "isClass()" : 6 , "isConstantDefined(String)" : 4 , "isIncluded()" : 8 , "isInstance(IRubyObject)" : 47 , "isKindOfModule(RubyModule)" : 7 , "isMethodBound(String,boolean)" : 19 , "isModule()" : 12 , "isSame(RubyModule)" : 4 , "isSingleton()" : 15 , "isSynchronized()" : 1 , "marshalTo(RubyModule,MarshalStream)" : 1 , "name()" : 8 , "needsImplementer()" : 1 , "newMethod(IRubyObject,String,boolean)" : 2 , "newModule(Ruby)" : 1 , "newModule(Ruby,String,RubyModule,boolean)" : 2 , "op_eqq(ThreadContext,IRubyObject)" : 2 , "op_ge(IRubyObject)" : 2 , "op_le(IRubyObject)" : 2 , "populateInstanceMethodNames(Set<String>,RubyArray,Visibility,boolean,boolean,boolean)" : 4 , "private_instance_methods(IRubyObject[])" : 1 , "private_instance_methods19(IRubyObject[])" : 1 , "proceedWithInclude(RubyModule,RubyModule)" : 1 , "protected_instance_methods(IRubyObject[])" : 1 , "protected_instance_methods19(IRubyObject[])" : 1 , "public_instance_methods(IRubyObject[])" : 1 , "public_instance_methods19(IRubyObject[])" : 1 , "putMethod(String,DynamicMethod)" : 3 , "rbPrivate(ThreadContext,IRubyObject[])" : 1 , "rbPublic(ThreadContext,IRubyObject[])" : 1 , "removeCvar(IRubyObject)" : 1 , "removeMethod(ThreadContext,String)" : 1 , "remove_const(ThreadContext,IRubyObject)" : 1 , "resolveUndefConstant(Ruby,String)" : 5 , "searchInternalModuleVariable(String)" : 12 , "searchMethod(String)" : 65 , "searchMethodInner(String)" : 3 , "searchProvidersForClass(String,RubyClass)" : 1 , "searchProvidersForModule(String)" : 1 , "searchWithCache(String)" : 43 , "setBaseName(String)" : 6 , "setClassVar(String,IRubyObject)" : 3 , "setConstant(String,IRubyObject)" : 18 , "setConstantCommon(String,IRubyObject,boolean)" : 2 , "setConstantQuiet(String,IRubyObject)" : 1 , "setInternalModuleVariable(String,IRubyObject)" : 6 , "setMethodVisibility(IRubyObject[],Visibility)" : 4 , "setParent(RubyModule)" : 4 , "setSuperClass(RubyClass)" : 9 , "setVisibility(ThreadContext,IRubyObject[],Visibility)" : 3 , "storeClassVariable(String,IRubyObject)" : 3 , "storeConstant(String,IRubyObject)" : 1 , "syncConstants(RubyModule)" : 4 , "to_s()" : 2 , "undef(ThreadContext,String)" : 3 , "undefineMethod(String)" : 24 , "unmarshalFrom(UnmarshalStream)" : 1 , "validateClassVariable(String)" : 5 , "validateConstant(String)" : 5}},{ "className" : "org::jruby::lexer::yacc::LexerSource" , "selectors" : { "LexerSource(String,List<String>,int,boolean)" : 2 , "captureFeature(int)" : 2 , "captureFeatureNewline()" : 1 , "getCurrentLine()" : 11 , "getFilename()" : 2 , "getLine()" : 3 , "getOffset()" : 7 , "getPosition()" : 12 , "getPosition(ISourcePosition)" : 1 , "getRemainingAsStream()" : 2 , "getSource(String,InputStream,List<String>,ParserConfiguration)" : 2 , "getSource(String,byte[],List<String>,ParserConfiguration)" : 2 , "lastWasBeginOfLine()" : 6 , "makePointer(int)" : 2 , "matchMarker(???)" : 15 , "peek(int)" : 10 , "read()" : 108 , "readLineBytes(???)" : 5 , "readUntil(???)" : 2 , "skipUntil(int)" : 3 , "uncaptureFeature(int)" : 1 , "unread(int)" : 93 , "unreadMany(CharSequence)" : 7 , "wasBeginOfLine()" : 8}},{ "className" : "org::jruby::compiler::ir::IR_Scope" , "selectors" : { "addClass(IR_Class)" : 2 , "addInstr(IR_Instr)" : 136 , "addMethod(IRMethod)" : 1 , "addModule(IR_Module)" : 1 , "getConstantValue(String)" : 3 , "getContainer()" : 2 , "getNewLabel()" : 20 , "getNewTemporaryVariable()" : 45 , "getNextClosureId()" : 1 , "getSelf()" : 10 , "recordMethodAlias(String,String)" : 1 , "runCompilerPass(CompilerPass)" : 21 , "setConstantValue(String,Operand)" : 2}},{ "className" : "org::jruby::internal::runtime::methods::JavaMethod::JavaMethodTwoOrNBlock" , "selectors" : { "JavaMethodTwoOrNBlock(RubyModule,Visibility)" : 2 , "JavaMethodTwoOrNBlock(RubyModule,Visibility,CallConfiguration)" : 2 , "call(ThreadContext,IRubyObject,RubyModule,String,IRubyObject,IRubyObject,Block)" : 3}},{ "className" : "org::jruby::util::CodegenUtils" , "selectors" : { "c(String)" : 3 , "ci(Class)" : 67 , "getAnnotatedBindingClassName(String,String,boolean,int,int,boolean,boolean)" : 4 , "getBoxType(Class)" : 6 , "human(Class)" : 2 , "p(Class)" : 360 , "params(Class,Class,Class,int)" : 2 , "params(Class,Class,int)" : 3 , "params(Class,int)" : 2 , "params(Class[])" : 168 , "pretty(Class,Class[])" : 1 , "prettyParams(Class[])" : 9 , "sig(Class,Class[])" : 616 , "sig(Class,String,Class[])" : 25 , "sigParams(Class[])" : 2 , "sigParams(String,Class[])" : 1 , "visitAnnotationFields(???)" : 1}},{ "className" : "org::jruby::ext::ffi::jffi::FastLongMethodFactory::Signed8ParameterConverter" , "selectors" : { "Signed8ParameterConverter()" : 1}},{ "className" : "org::jruby::internal::runtime::methods::JavaMethod::JavaMethodTwoOrThreeOrNBlock" , "selectors" : { "JavaMethodTwoOrThreeOrNBlock(RubyModule,Visibility)" : 1 , "JavaMethodTwoOrThreeOrNBlock(RubyModule,Visibility,CallConfiguration)" : 1 , "call(ThreadContext,IRubyObject,RubyModule,String,IRubyObject,IRubyObject,IRubyObject,Block)" : 2}},{ "className" : "com::ivata::groupware::navigation::struts::AddFavoriteAction" , "selectors" : { "execute(ActionMapping,ActionErrors,ActionForm,HttpServletRequest,HttpServletResponse,HttpSession)::SystemException" : 3}},{ "className" : "com::ivata::groupware::business::addressbook::person::group::GroupConstants" , "selectors" : { "equals(Integer,Integer)" : 15}},{ "className" : "com::ivata::groupware::container::persistence::hibernate::HibernateQuery" , "selectors" : { "HibernateQuery(String,Map)" : 1 , "getArguments()" : 2 , "getQueryString()" : 2}},{ "className" : "com::ivata::groupware::admin::script::ScriptExecutor" , "selectors" : { "exec(???)" : 14}},{ "className" : "com::ivata::groupware::business::library::struts::LibraryForm" , "selectors" : { "getEdit()" : 1 , "reset(???)" : 1 , "setEdit(String)" : 2 , "setPreview(String)" : 2}},{ "className" : "com::ivata::groupware::admin::security::server::SecuritySession" , "selectors" : { "getContainer(???)" : 17 , "getPassword()" : 1 , "getUser()" : 51 , "isGuest()" : 3}},{ "className" : "com::ivata::groupware::admin::security::right::SecurityRights" , "selectors" : { "canAddUser(???)" : 1}},{ "className" : "com::ivata::groupware::business::search::SearchEngine" , "selectors" : { "updateIndex(???)" : 7}},{ "className" : "com::ivata::groupware::business::event::EventManager" , "selectors" : { "EventManager()" : 1}},{ "className" : "com::ivata::groupware::business::addressbook::struts::GroupListAction" , "selectors" : { "execute(ActionMapping,ActionErrors,ActionForm,HttpServletRequest,HttpServletResponse,HttpSession)::SystemException" : 8}},{ "className" : "com::ivata::groupware::admin::security::struts::JavaScriptAction" , "selectors" : { "execute(ActionMapping,ActionErrors,ActionForm,HttpServletRequest,HttpServletResponse,HttpSession)::SystemException" : 6}},{ "className" : "com::ivata::groupware::business::addressbook::person::employee::EmployeeDO" , "selectors" : { "EmployeeDO()" : 4 , "getCountry()" : 6 , "getNumber()" : 2 , "getVacationDays()" : 1 , "setCountry(CountryDO)" : 4 , "setNumber(String)" : 2 , "setVacationDays(Integer)" : 2}},{ "className" : "com::ivata::groupware::business::addressbook::person::group::tree::PersonTreeNode" , "selectors" : { "PersonTreeNode(GroupDO)" : 2 , "PersonTreeNode(PersonDO)" : 1 , "getGroup()" : 1 , "getPerson()" : 5}},{ "className" : "com::ivata::groupware::business::library::faq::category::FAQCategoryDO" , "selectors" : { "FAQCategoryDO()" : 1 , "getDescription()" : 2 , "getFAQs()" : 8 , "getName()" : 6 , "setDescription(String)" : 1 , "setFAQs(List)" : 2}},{ "className" : "com::ivata::groupware::business::library::struts::UploadHTMLForm" , "selectors" : { "getFile(???)" : 1 , "validate(ActionMapping,HttpServletRequest)::ActionErrors" : 1 , "validate(ActionMapping,HttpServletRequest)::ActionMessage" : 2}},{ "className" : "com::ivata::groupware::admin::security::server::PlainTextSecuritySession" , "selectors" : { "PlainTextSecuritySession(???)" : 3}},{ "className" : "com::ivata::groupware::business::mail::session::MailSession" , "selectors" : { "MailSession(???)" : 2 , "getJavaMailSession(???)" : 12 , "login(???)" : 2}},{ "className" : "com::ivata::groupware::container::persistence::hibernate::HibernateSession" , "selectors" : { "HibernateSession(???)" : 2 , "getSession(???)" : 6 , "getTransaction(???)" : 3}},{ "className" : "com::ivata::groupware::container::persistence::TimestampDOHandling" , "selectors" : { "add(SecuritySession,TimestampDO)" : 10 , "amend(SecuritySession,TimestampDO)" : 8}},{ "className" : "com::ivata::groupware::web::tree::DefaultTreeNodeRenderer" , "selectors" : { "DefaultTreeNodeRenderer()" : 1 , "finalize(???)" : 1 , "initialize(???)" : 2 , "render(javax" : 2}},{ "className" : "com::ivata::groupware::admin::security::user::UserDO" , "selectors" : { "UserDO()" : 7 , "getDisplayName()" : 3 , "getGroups()" : 4 , "getId()" : 16 , "getName()" : 80 , "getPassword()" : 2 , "isDeleted()" : 9 , "isEnabled()" : 11 , "setDeleted(boolean)" : 11 , "setEnabled(boolean)" : 9 , "setGroups(Set)" : 2 , "setName(String)" : 8 , "setPassword(String)" : 2}},{ "className" : "com::ivata::groupware::business::mail::message::MessageNotFoundException" , "selectors" : { "MessageNotFoundException(String,String,String)" : 4 , "MessageNotFoundException(String,String,String,Throwable)" : 2 , "MessageNotFoundException(String,String,Throwable)" : 1}},{ "className" : "com::ivata::groupware::business::calendar::event::EventDO" , "selectors" : { "EventDO()" : 2 , "getFinish()" : 15 , "getStart()" : 17 , "getSubject()" : 1 , "isAllDayEvent()" : 1 , "setAllDayEvent(boolean)" : 2 , "setDescription(String)" : 1 , "setFinish(Calendar)" : 3 , "setStart(Calendar)" : 3 , "setSubject(String)" : 1}},{ "className" : "com::ivata::groupware::business::calendar::event::meeting::category::MeetingCategoryDO" , "selectors" : { "MeetingCategoryDO()" : 2 , "getAgendaPoints()" : 1 , "getName()" : 1 , "setMeeting(MeetingDO)" : 2 , "setName(String)" : 3}},{ "className" : "com::ivata::groupware::business::addressbook::struts::PersonAction" , "selectors" : { "execute(???)" : 1 , "onConfirm(???)" : 1}},{ "className" : "com::ivata::groupware::admin::security::server::AbstractSecuritySession" , "selectors" : { "getUser()" : 11 , "setPassword(String)" : 2}},{ "className" : "com::ivata::groupware::web::tree::TreeNode" , "selectors" : { "getId()" : 12 , "getName()" : 3}},{ "className" : "com::ivata::groupware::business::library::struts::IndexAction" , "selectors" : { "execute(ActionMapping,ActionErrors,ActionForm,HttpServletRequest,HttpServletResponse,HttpSession)::SystemException" : 3}},{ "className" : "com::ivata::groupware::business::mail::server::ScriptMailServer" , "selectors" : { "getSystemUserName(SecuritySession,String)" : 13}},{ "className" : "com::ivata::groupware::business::library::struts::UploadHTMLAction" , "selectors" : { "onConfirm(ActionMapping,ActionErrors,ActionForm,HttpServletRequest,HttpServletResponse,HttpSession,String)::SystemException" : 2}},{ "className" : "com::ivata::groupware::business::library::item::LibraryItemDO" , "selectors" : { "LibraryItemDO()" : 1 , "getFAQCategories()" : 12 , "getPages()" : 16 , "getSummary()" : 5 , "getTitle()" : 9 , "getTopic()" : 16 , "getType()" : 11 , "setFAQCategories(List)" : 1 , "setPages(List)" : 1 , "setSummary(String)" : 1 , "setType(Integer)" : 2}},{ "className" : "com::ivata::groupware::business::library::struts::CommentAction" , "selectors" : { "execute(ActionMapping,ActionErrors,ActionForm,HttpServletRequest,HttpServletResponse,HttpSession)::SystemException" : 1}},{ "className" : "com::ivata::groupware::business::search::index::SearchIndexDO" , "selectors" : { "SearchIndexDO()" : 1 , "getContent()" : 1 , "getWeight()" : 3 , "setContent(SearchItemContentDO)" : 1 , "setWeight(float)" : 1 , "setWord(String)" : 1}},{ "className" : "com::ivata::groupware::container::persistence::QueryPersistenceManager" , "selectors" : { "add(???)" : 21 , "addAddListener(Class,AddPersistenceListener)" : 1 , "addAmendListener(Class,AmendPersistenceListener)" : 1 , "addRemoveListener(Class,RemovePersistenceListener)" : 1 , "amend(???)" : 23 , "find(???)" : 28 , "findAll(???)" : 7 , "findByPrimaryKey(???)" : 27 , "findInstance(???)" : 28 , "findInteger(???)" : 1 , "openSession(???)" : 84 , "remove(???)" : 14 , "removeAll(???)" : 2}},{ "className" : "com::ivata::groupware::business::mail::server::MailServer" , "selectors" : { "connectStore(???)" : 12 , "getFolder(???)" : 11 , "getUserAliases(???)" : 2 , "getVacationMessage(???)" : 1 , "hasNewMessages(???)" : 1 , "login(???)" : 1 , "setUserAliases(???)" : 1 , "setVacationMessage(???)" : 1}},{ "className" : "com::ivata::groupware::struts::SetupAction" , "selectors" : { "execute(???)" : 2 , "setActions(Map)" : 2}},{ "className" : "com::ivata::groupware::business::mail::struts::ComposeForm" , "selectors" : { "getAttach()" : 2 , "getMessage()" : 2 , "setMessage(MessageDO)" : 3 , "setMessagingException(???)" : 1}},{ "className" : "com::ivata::groupware::admin::security::struts::LoginAction" , "selectors" : { "execute(???)" : 4 , "execute(ActionMapping,ActionErrors,ActionForm,HttpServletRequest,HttpServletResponse,HttpSession)::ActionMessage" : 3 , "execute(ActionMapping,ActionErrors,ActionForm,HttpServletRequest,HttpServletResponse,HttpSession)::SystemException" : 6}},{ "className" : "com::ivata::groupware::container::persistence::NamedDO" , "selectors" : { "compareTo(Object)" : 1 , "getName()" : 4}},{ "className" : "com::ivata::groupware::web::tag::SetSettingTag" , "selectors" : { "doStartTag()::JspException" : 1}},{ "className" : "com::ivata::groupware::business::library::right::LibraryRights" , "selectors" : { "canAmendComment(???)" : 1 , "canAmendInTopic(???)" : 1 , "findRightsForItemsInTopic(???)" : 4 , "findRightsForTopic(???)" : 3}},{ "className" : "com::ivata::groupware::business::event::Event" , "selectors" : { "Event(String)" : 1}},{ "className" : "com::ivata::groupware::business::addressbook::struts::PersonListAction" , "selectors" : { "execute(ActionMapping,ActionErrors,ActionForm,HttpServletRequest,HttpServletResponse,HttpSession)::SystemException" : 6}},{ "className" : "com::ivata::groupware::admin::security::server::PlainTextSecurityServer" , "selectors" : { "PlainTextSecurityServer(QueryPersistenceManager)" : 1 , "checkPassword(SecuritySession,String,String)::SystemException" : 3 , "setPassword(SecuritySession,String,String)::SystemException" : 1}},{ "className" : "com::ivata::groupware::business::search::PorterStemmer" , "selectors" : { "containsVowel(String)" : 4 , "endsWithCVC(String)" : 2 , "endsWithDoubleConsonent(String)" : 2 , "isVowel(char)" : 5 , "stem(String)" : 2 , "step1a(String)" : 1 , "step1b(String)" : 1 , "step1b2(String)" : 2 , "step1c(String)" : 1 , "step2(String)" : 1 , "step3(String)" : 1 , "step4(String)" : 1 , "step5a(String)" : 1 , "step5b(String)" : 1 , "stringMeasure(String)" : 51}},{ "className" : "com::ivata::groupware::container::PicoContainerFactory" , "selectors" : { "<Initializer>()::DefaultFieldValueConvertorFactory" : 1 , "PicoContainerFactory()" : 1 , "classForName(String)" : 2 , "getContainer(String,PicoContainer)::SimpleReference" : 2 , "getGlobalContainer(???)" : 3 , "getInstance(???)" : 40 , "initialize()::DefaultNanoPicoContainer" : 1 , "initialize()::SystemException" : 3 , "initialize(???)" : 2 , "instantiateOrOverride(???)" : 1 , "instantiateOrOverride(PicoContainer,String)::SystemException" : 1 , "isInitialized()" : 1 , "override(???)" : 1 , "reset()" : 1 , "setHibernateConfigFileName(String)" : 1}},{ "className" : "com::ivata::groupware::web::tag::container::ContainerBeanTag" , "selectors" : { "doEndTag()::JspException" : 3}},{ "className" : "java::beans::XMLEncoder" , "selectors" : { "XMLEncoder(OutputStream)" : 7 , "close()" : 7 , "writeObject(Object)" : 7}},{ "className" : "com::ivata::groupware::admin::setting::Settings" , "selectors" : { "amendSetting(???)" : 6 , "getBooleanSetting(???)" : 6 , "getIntegerSetting(???)" : 5 , "getSetting(???)" : 4 , "getSettingType(???)" : 1 , "getStringSetting(???)" : 51 , "isSettingEnabled(???)" : 1 , "revertSetting(???)" : 2 , "validate(???)" : 2}},{ "className" : "com::ivata::groupware::business::addressbook::struts::GroupFrameAction" , "selectors" : { "execute(ActionMapping,ActionErrors,ActionForm,HttpServletRequest,HttpServletResponse,HttpSession)::SystemException" : 5}},{ "className" : "com::ivata::groupware::admin::security::struts::PasswordAction" , "selectors" : { "execute(ActionMapping,ActionErrors,ActionForm,HttpServletRequest,HttpServletResponse,HttpSession)::ActionMessage" : 3 , "execute(ActionMapping,ActionErrors,ActionForm,HttpServletRequest,HttpServletResponse,HttpSession)::SystemException" : 3 , "onConfirm(ActionMapping,ActionErrors,ActionForm,HttpServletRequest,HttpServletResponse,HttpSession,String)::ActionMessage" : 8 , "onConfirm(ActionMapping,ActionErrors,ActionForm,HttpServletRequest,HttpServletResponse,HttpSession,String)::SystemException" : 6}},{ "className" : "com::ivata::groupware::business::library::topic::TopicDO" , "selectors" : { "TopicDO()" : 1 , "getCaption()" : 2 , "getImage()" : 1}},{ "className" : "com::ivata::groupware::admin::security::addressbook::AddressBookSecurity" , "selectors" : { "addUserToPerson(???)" : 1 , "amendUser(???)" : 3}},{ "className" : "com::ivata::groupware::business::library::comment::tree::CommentTreeModel" , "selectors" : { "getReplies(CommentDO)" : 3}},{ "className" : "com::ivata::groupware::business::addressbook::person::group::right::RightDO" , "selectors" : { "RightDO()" : 3 , "getGroup()" : 4 , "getTargetId()" : 1 , "setAccess(Integer)" : 3 , "setDetail(RightDetailDO)" : 3 , "setGroup(GroupDO)" : 3 , "setTargetId(Integer)" : 3}},{ "className" : "com::ivata::groupware::admin::script::ExternalScriptExecutor" , "selectors" : { "exec(String,String)::SystemException" : 2 , "exec(String,String)::ValidationError" : 3 , "exec(String,String)::ValidationErrors" : 1 , "extractText(InputStream)" : 2}},{ "className" : "com::ivata::groupware::web::format::SanitizerFormat" , "selectors" : { "<Initializer>()::CharacterEntityFormat" : 1 , "<Initializer>()::HTMLFormatter" : 1 , "<Initializer>()::Tidy" : 1 , "SanitizerFormat()" : 4 , "addCloseElementAsText(Element,StringBuffer)" : 1 , "addOpenElementAsText(Element,StringBuffer)" : 1 , "addTextNewLine(StringBuffer)" : 4 , "addToBuffer(Node,StringBuffer)" : 2 , "convertToText(Document)" : 1 , "format(String)" : 7 , "format(String)::SAXReader" : 1 , "format(String)::org" : 1 , "notTextNewLine()" : 8 , "setOnlyBodyContents(boolean)" : 2 , "setSourceName(String)" : 2 , "setTextOnly(boolean)" : 3}},{ "className" : "com::ivata::groupware::business::calendar::CalendarImpl::EventComparator" , "selectors" : { "EventComparator()" : 1}},{ "className" : "com::ivata::groupware::navigation::menu::item::MenuItemDO" , "selectors" : { "MenuItemDO()" : 1 , "getPriority()" : 4 , "setImage(String)" : 1 , "setMenu(MenuDO)" : 1 , "setPriority(Integer)" : 1 , "setText(String)" : 1 , "setURL(String)" : 1 , "setUser(UserDO)" : 1}},{ "className" : "com::ivata::groupware::admin::security::server::SecurityServer" , "selectors" : { "addUser(???)" : 4 , "checkPassword(???)" : 1 , "getSystemUserName(SecuritySession,String)" : 3 , "getUserNameFromSystemUserName(SecuritySession,String)" : 1 , "isUser(???)" : 2 , "login(???)" : 1 , "loginGuest(???)" : 2 , "removeUser(???)" : 2 , "setPassword(???)" : 1}},{ "className" : "com::ivata::groupware::web::tree::comment::CommentTreeNodeRenderer" , "selectors" : { "<Initializer>()::CharacterEntityFormat" : 1 , "<Initializer>()::LineBreakFormat" : 1 , "finalize(HttpSession,HttpServletRequest,JspWriter)::JspException" : 1 , "initialize(HttpSession,HttpServletRequest,JspWriter,PageContext)::JspException" : 1 , "setAdditionalProperties(TreeNode,int,Properties)::HTMLFormatter" : 1 , "setAdditionalProperties(TreeNode,int,Properties)::JspException" : 1}},{ "className" : "com::ivata::groupware::web::tree::person::PersonTreeNodeRenderer" , "selectors" : { "initialize(HttpSession,HttpServletRequest,JspWriter,PageContext)::JspException" : 1 , "setAdditionalProperties(TreeNode,int,java" : 1}},{ "className" : "com::ivata::groupware::admin::AdminTestCase" , "selectors" : { "getHibernateConfiguration()::Configuration" : 1}},{ "className" : "com::ivata::groupware::container::struts::PicoRequestProcessorImplementation" , "selectors" : { "createAction(String,HttpServletRequest,HttpServletResponse,ActionMapping,Map,ActionServlet)::DefaultFieldWriterFactory" : 1 , "createAction(String,HttpServletRequest,HttpServletResponse,ActionMapping,Map,ActionServlet)::SystemException" : 1 , "createActionForm(FormBeanConfig,HttpServletRequest,HttpServletResponse,ActionMapping)::SystemException" : 1 , "getPersistenceManager(???)" : 2 , "getRequestProcessorImplementation(???)" : 2}},{ "className" : "com::ivata::groupware::web::tag::webgui::tree::TreeSelectTag" , "selectors" : { "createChildren(Object,JspWriter,int)::JspException" : 1 , "doStartTag()::JspException" : 2 , "isSelected(Integer)" : 2}},{ "className" : "com::ivata::groupware::business::library::struts::CommentForm" , "selectors" : { "clear()" : 1 , "getComment()" : 2 , "getList()" : 5 , "setBundle(???)" : 1 , "setComment(CommentDO)" : 2 , "setDeleteKey(???)" : 1 , "setList(String)" : 1}},{ "className" : "com::ivata::groupware::business::library::struts::ItemForm" , "selectors" : { "clear()" : 1 , "getComment()" : 2 , "getDisplayPage()" : 5 , "getItem()" : 11 , "getNewPage()" : 2 , "getNewPoint(int)" : 2 , "getPageLinks()" : 1 , "reset(???)" : 1 , "setDeleteKey(???)" : 2 , "setDisplayIncludePage(String)" : 7 , "setDisplayPage(int)" : 1 , "setHelpKey(???)" : 4 , "setItem(LibraryItemDO)" : 2 , "setLinkPage(String)" : 1 , "setNextPageLink(String)" : 1 , "setPageLinks(String)" : 4 , "setPreviousPageLink(String)" : 1 , "setSubmitIncludePage(String)" : 4 , "setSummaryPromptKey(String)" : 2 , "setSummaryThemeName(String)" : 4 , "setSummaryTitleKey(String)" : 4 , "setThemeName(String)" : 4 , "setTopicCaptions(Map)" : 1 , "setTopicIds(Set)" : 1 , "setTopicImages(Map)" : 1 , "validate(HttpServletRequest,HttpSession)::ValidationErrors" : 1}},{ "className" : "com::ivata::groupware::admin::struts::HibernateSetupForm" , "selectors" : { "getDatabaseDialect()" : 1 , "getDatabaseDriver()" : 3 , "getDatabasePassword()" : 3 , "getDatabaseURL()" : 5 , "getDatabaseUserName()" : 3 , "isCreateDatabaseAutomatically()" : 1 , "reset(???)" : 1 , "setCreateDatabaseAutomatically(boolean)" : 2 , "setDatabaseDialect(String)" : 1 , "setDatabaseDriver(String)" : 1 , "setDatabasePassword(String)" : 1 , "setDatabaseURL(String)" : 1 , "setDatabaseUserName(String)" : 1 , "validate(???)" : 1 , "validate(HttpServletRequest,HttpSession)::ValidationError" : 2}},{ "className" : "com::ivata::groupware::business::mail::session::MailAuthenticator" , "selectors" : { "MailAuthenticator(String,String)" : 1 , "getPasswordAuthentication()::PasswordAuthentication" : 1 , "getPasswordAuthentication(???)" : 1}},{ "className" : "com::ivata::groupware::GroupwareTestCase" , "selectors" : { "getHibernateManager()" : 18 , "getHibernateSession()" : 7 , "getSecuritySession()" : 28 , "setUp()" : 3 , "setUp()::DefaultPersistenceRights" : 1 , "tearDown()" : 3}},{ "className" : "com::ivata::groupware::mask::struts::ResetAction" , "selectors" : { "execute(ActionMapping,ActionErrors,ActionForm,HttpServletRequest,HttpServletResponse,HttpSession)::SystemException" : 1}},{ "className" : "com::ivata::groupware::business::calendar::struts::EventForm" , "selectors" : { "clear()" : 1 , "getAddCategory()" : 1 , "getAttendees()" : 1 , "getEvent()" : 3 , "getEventTab_activeTab()" : 1 , "reset(???)" : 1 , "setAttendees(String)" : 1 , "setEvent(EventDO)" : 5 , "setEventTab_activeTab(Integer)" : 1 , "setFinishDate(String)" : 2 , "setFinishTime(String)" : 2 , "setHelpKey(???)" : 11 , "setStartDate(String)" : 1 , "setStartTime(String)" : 1 , "setTabPage(String)" : 3 , "setTitleKey(String)" : 6 , "validate(HttpServletRequest,HttpSession)::ValidationErrors" : 1}},{ "className" : "com::ivata::groupware::business::mail::server::JavaMailServer" , "selectors" : { "JavaMailServer(AddressBook,Settings)" : 2 , "checkPassword(SecuritySession,String,String)::SystemException" : 2 , "connectStore(MailSession)::SystemException" : 2 , "login(UserDO,String)::SystemException" : 4}},{ "className" : "com::ivata::groupware::business::addressbook::telecomaddress::TelecomAddressDO" , "selectors" : { "TelecomAddressDO()" : 5 , "getAddress()" : 10 , "getNumber()" : 1 , "getType()" : 6 , "setAddress(String)" : 5 , "setNumber(int)" : 3 , "setType(int)" : 5}},{ "className" : "com::ivata::groupware::admin::setting::SettingsInitializationException" , "selectors" : { "SettingsInitializationException(String)" : 1}},{ "className" : "com::ivata::groupware::business::addressbook::right::AddressBookRights" , "selectors" : { "amendRightsForGroup(???)" : 2 , "canAddEmployeeToPerson(???)" : 1 , "canAmendInGroup(???)" : 4 , "canRemoveFromGroup(???)" : 4 , "canUser(???)" : 1 , "findRightsForGroup(???)" : 9}},{ "className" : "com::ivata::groupware::business::addressbook::struts::FindPersonAction" , "selectors" : { "execute(???)" : 1 , "execute(ActionMapping,ActionErrors,ActionForm,HttpServletRequest,HttpServletResponse,HttpSession)::SystemException" : 1}},{ "className" : "com::ivata::groupware::business::addressbook::person::group::GroupDO" , "selectors" : { "GroupDO()" : 9 , "getAddressBook()" : 9 , "getDescription()" : 3 , "getHead()" : 3 , "getName()" : 16 , "getParent()" : 9 , "getPeople()" : 9 , "getUsers()" : 3 , "setDescription(String)" : 5 , "setHead(PersonDO)" : 2 , "setName(String)" : 8 , "setParent(GroupDO)" : 6 , "setPeople(Set)" : 2}},{ "className" : "com::ivata::groupware::admin::struts::HibernateSetupAction" , "selectors" : { "checkConnection(HibernateSetupForm,ActionErrors)::ActionMessage" : 2 , "copyStartDB(ActionErrors,File,File,File,File)::ActionMessage" : 2 , "execute(???)" : 1 , "execute(ActionMapping,ActionErrors,ActionForm,HttpServletRequest,HttpServletResponse,HttpSession)::ActionErrors" : 1 , "getHibernateXPath(String)" : 6 , "onConfirm(???)" : 1 , "readHibernateConfig(ActionErrors)::ActionMessage" : 1 , "readHibernateConfig(ActionErrors)::DTDEntityResolver" : 1 , "readHibernateConfig(ActionErrors)::SAXReader" : 1 , "setHibernateProperty(String,String,Document,ActionErrors)::ActionMessage" : 1 , "writeHibernateConfig(Document,ActionErrors)::ActionMessage" : 1 , "writeHibernateConfig(Document,ActionErrors)::OutputFormat" : 1 , "writeHibernateConfig(Document,ActionErrors)::SAXReader" : 1}},{ "className" : "com::ivata::groupware::navigation::menu::item::MenuItemComparator" , "selectors" : { "compareNull(Object,Object)" : 3}},{ "className" : "com::ivata::groupware::business::addressbook::struts::GroupRightAction" , "selectors" : { "convertGroupCollectionToStringArray(Collection)" : 8 , "onConfirm(ActionMapping,ActionErrors,ActionForm,HttpServletRequest,HttpServletResponse,HttpSession,String)::ActionMessage" : 1 , "onDelete(ActionMapping,ActionErrors,ActionForm,HttpServletRequest,HttpServletResponse,HttpSession,String)::ActionMessage" : 1}},{ "className" : "com::ivata::groupware::business::mail::struts::DisplayForm" , "selectors" : { "getDelete()" : 1 , "getDeleteTrash()" : 1 , "getFolderName()" : 3 , "getId()" : 1 , "getMessage()" : 1 , "getThread()" : 2 , "setFolderName(String)" : 1 , "setId(String)" : 1 , "setMessage(MessageDO)" : 1}},{ "className" : "com::ivata::groupware::util::SettingDateFormatter" , "selectors" : { "SettingDateFormatter(SecuritySession,Settings)" : 1 , "format(???)" : 7 , "format(Date)::DateFormatterException" : 2 , "parse(???)" : 3 , "parse(String)::DateFormatterException" : 1 , "setDateFormat(???)" : 7 , "setDateFormat(int)::DateFormatterException" : 1 , "setDateTimeText(???)" : 11 , "setDateTimeText(String)::DateFormatterException" : 1 , "setTimeFormat(???)" : 5 , "setTimeFormat(int)::DateFormatterException" : 1 , "setUserName(???)" : 2}},{ "className" : "com::ivata::groupware::admin::security::server::TestSecuritySession" , "selectors" : { "TestSecuritySession(UserDO)" : 1}},{ "className" : "com::ivata::groupware::container::persistence::listener::AddPersistenceListener" , "selectors" : { "onAdd(???)" : 1}},{ "className" : "com::ivata::groupware::business::addressbook::right::AddressBookRightsImpl" , "selectors" : { "AddressBookRightsImpl(QueryPersistenceManager)" : 1 , "amendRightsForGroup(SecuritySession,GroupDO,Collection,Integer)::SystemException" : 1 , "findAddressBooksByGroupAccess(SecuritySession,GroupDO,Integer)::SystemException" : 1 , "findRightsForGroup(SecuritySession,GroupDO,Integer)::SystemException" : 1}},{ "className" : "com::ivata::groupware::business::library::comment::CommentDO" , "selectors" : { "CommentDO()" : 4 , "getFormat()" : 7 , "getItem()" : 17 , "getParent()" : 7 , "getSubject()" : 13 , "getText()" : 8 , "setItem(LibraryItemDO)" : 3 , "setParent(CommentDO)" : 1 , "setSubject(String)" : 1 , "setText(String)" : 1 , "setUnacknowledged(boolean)" : 1}},{ "className" : "com::ivata::groupware::business::calendar::struts::IndexForm" , "selectors" : { "getCurrentDay()" : 1 , "getDayFinishHour()" : 2 , "getDayStartHour()" : 2 , "getView()" : 1 , "setAllDayEvents(Vector[])" : 2 , "setDayFinishHour(int)" : 2 , "setDayStartHour(int)" : 2 , "setEvents(Map[])" : 3 , "setFirstWeekDay(GregorianCalendar)" : 1 , "setHelpKey(???)" : 3 , "setView(Integer)" : 3 , "setViewPage(String)" : 3}},{ "className" : "com::ivata::groupware::business::calendar::struts::EventHourComparator" , "selectors" : { "EventHourComparator()" : 2 , "getKey(EventDO)" : 2 , "isAfterDay(EventDO)" : 3 , "setDay(GregorianCalendar)" : 2}},{ "className" : "com::ivata::groupware::business::library::struts::SubmitAction" , "selectors" : { "execute(ActionMapping,ActionErrors,ActionForm,HttpServletRequest,HttpServletResponse,HttpSession)::ActionMessage" : 2}},{ "className" : "com::ivata::groupware::admin::security::Security" , "selectors" : { "checkPassword(???)" : 1 , "findUserByName(???)" : 2 , "isUser(???)" : 1 , "isUserEnabled(???)" : 3 , "login(???)" : 1 , "loginGuest(???)" : 6 , "setPassword(???)" : 1}},{ "className" : "com::ivata::groupware::container::persistence::hibernate::HibernateInterceptor" , "selectors" : { "HibernateInterceptor(???)" : 2 , "addAddListener(Class,AddPersistenceListener)" : 1 , "addAmendListener(Class,AmendPersistenceListener)" : 1 , "addRemoveListener(Class,RemovePersistenceListener)" : 1 , "getListenerClasses(Map,Class)::PersistenceException" : 1 , "instantiate(Class,Serializable)::CallbackException" : 3 , "setHibernateSession(HibernateSession)" : 1 , "updateState(String,ValueObject,Object,String)::CallbackException" : 3}},{ "className" : "com::ivata::groupware::admin::setting::SettingsImpl" , "selectors" : { "SettingsImpl(QueryPersistenceManager)" : 2 , "amendSetting(???)" : 2 , "amendSetting(SecuritySession,String,Object,UserDO)::SystemException" : 1 , "amendSetting(SecuritySession,String,Object,UserDO)::ValidationError" : 3 , "findSetting(SecuritySession,String,UserDO)::SystemException" : 1 , "getBooleanSetting(???)" : 1 , "getIntegerSetting(???)" : 1 , "getSetting(???)" : 1 , "getSettingType(SecuritySession,String)::SystemException" : 1 , "isSettingEnabled(SecuritySession,String)::SystemException" : 1 , "revertSetting(SecuritySession,String,UserDO)::SystemException" : 1 , "validate(SecuritySession,Map,Locale,int)::ValidationError" : 5 , "validate(SecuritySession,Map,Locale,int)::ValidationErrors" : 1}},{ "className" : "com::ivata::groupware::business::library::page::PageDO" , "selectors" : { "PageDO()" : 1 , "getText()" : 3 , "setNumber(Integer)" : 2 , "setText(String)" : 1}},{ "className" : "com::ivata::groupware::business::library::struts::UploadImagesForm" , "selectors" : { "UploadImagesForm()" : 1 , "setImageFileName(Vector)" : 1}},{ "className" : "com::ivata::groupware::business::library::struts::DisplayAction" , "selectors" : { "chooseItemType(ItemForm)" : 2 , "execute(ActionMapping,ActionErrors,ActionForm,HttpServletRequest,HttpServletResponse,HttpSession)::SystemException" : 1 , "setDocumentPageNumber(PageContext,String,HttpServletRequest,ItemForm)::SystemException" : 1 , "setFaqPageNumber(PageContext,String,HttpServletRequest,ItemForm)::SystemException" : 2 , "setMeetingPageNumber(PageContext,String,HttpServletRequest,ItemForm)::SystemException" : 1 , "setPageNumber(String,HttpServletRequest,HttpServletResponse,ItemForm)::SystemException" : 2}},{ "className" : "com::ivata::groupware::business::addressbook::struts::PersonForm" , "selectors" : { "clear()" : 3 , "findAndSetCountry(SecuritySession)" : 2 , "getAddressBookGroupId()" : 2 , "getAddressBookGroupNames()" : 1 , "getClear(???)" : 1 , "getEnableUser()" : 1 , "getPerson()" : 11 , "getPersonTab_activeTabKey()" : 2 , "getReadOnly()" : 2 , "getRefreshOnExit()" : 1 , "getRestoreUser()" : 1 , "getTabKeys()" : 1 , "getTabPage()" : 1 , "getTelecomAddresses()" : 2 , "getUserGroups()" : 1 , "getUserName()" : 10 , "isEmployee()" : 2 , "reset(???)" : 1 , "setAddressBookGroupId(Integer)" : 1 , "setAddressBookGroupName(String)" : 2 , "setAddressBookGroupNames(Map)" : 1 , "setCanRemove(boolean)" : 2 , "setChangedAddressBook(String)" : 1 , "setDateOfBirthString(String)" : 1 , "setDeleteKey(???)" : 2 , "setEmployee(boolean)" : 1 , "setEnableUser(boolean)" : 2 , "setHelpKey(???)" : 6 , "setPerson(PersonDO)" : 2 , "setPersonFromTelecomAddresses()" : 4 , "setReadOnly(boolean)" : 4 , "setTabKeys(List)" : 1 , "setTabPage(String)" : 6 , "setTelecomAddressesFromPerson()" : 2 , "setTitleKey(String)" : 1 , "setUserGroups(List)" : 1 , "setUserName(String)" : 3 , "validate(HttpServletRequest,HttpSession)::ValidationErrors" : 1}},{ "className" : "com::ivata::groupware::admin::setting::SettingDO" , "selectors" : { "SettingDO()" : 2 , "getDescription()" : 1 , "getName()" : 3 , "getType()" : 5 , "getValue()" : 6 , "isEnabled()" : 2 , "setDescription(String)" : 2 , "setEnabled(boolean)" : 2 , "setName(String)" : 2 , "setType(int)" : 4 , "setUser(UserDO)" : 2 , "setValue(String)" : 6}},{ "className" : "com::ivata::groupware::business::library::NotificationException" , "selectors" : { "NotificationException(Throwable,String,List)" : 1}},{ "className" : "com::ivata::groupware::navigation::NavigationImpl" , "selectors" : { "addMenuItem(SecuritySession,MenuItemDO)::SystemException" : 1 , "amendMenuItem(SecuritySession,MenuItemDO)::SystemException" : 1 , "findMenues(SecuritySession)::SystemException" : 1 , "removeMenuItem(SecuritySession,String)::SystemException" : 1}},{ "className" : "com::ivata::groupware::business::library::struts::FindTopicAction" , "selectors" : { "execute(ActionMapping,ActionErrors,ActionForm,HttpServletRequest,HttpServletResponse,HttpSession)::SystemException" : 3}},{ "className" : "com::ivata::groupware::business::search::SearchEngineImpl" , "selectors" : { "isStopWord(Connection,String)::SystemException" : 1 , "removeFromIndex(SecuritySession,String,String,String)::SystemException" : 1 , "search(SecuritySession,String)::SystemException" : 1 , "updateIndex(SecuritySession,Integer,String,String,Integer,String,String,int)::HTMLFormatter" : 1 , "updateIndex(SecuritySession,Integer,String,String,Integer,String,String,int)::SystemException" : 1}},{ "className" : "com::ivata::groupware::business::mail::struts::FindMailUserAction" , "selectors" : { "execute(ActionMapping,ActionErrors,ActionForm,HttpServletRequest,HttpServletResponse,HttpSession)::SystemException" : 1}},{ "className" : "com::ivata::groupware::container::persistence::hibernate::HibernateQueryFactory" , "selectors" : { "HibernateQueryFactory(Map,Map)" : 1 , "generateQuery(String,Map)" : 1 , "generateQuery(String,Object[])" : 1}},{ "className" : "com::ivata::groupware::business::drive::file::FileContentDO" , "selectors" : { "FileContentDO(???)" : 1 , "getContent(???)" : 1}},{ "className" : "com::ivata::groupware::business::mail::struts::MailSetupAction" , "selectors" : { "checkSocket(String,int,ActionErrors,String)::ActionMessage" : 2 , "execute(ActionMapping,ActionErrors,ActionForm,HttpServletRequest,HttpServletResponse,HttpSession)::ActionMessage" : 1 , "resetFactoryUpdateSettings(HibernateSetupForm,SecuritySession,HttpSession)::SystemException" : 6 , "setOneSystemSetting(PreparedStatement,String,String)::SystemException" : 4}},{ "className" : "com::ivata::groupware::admin::security::addressbook::AddressBookSecurityImpl" , "selectors" : { "addUserToPerson(SecuritySession,PersonDO)::SystemException" : 1 , "addUserToPerson(SecuritySession,PersonDO)::ValidationError" : 1 , "addUserToPerson(SecuritySession,PersonDO)::ValidationException" : 2 , "loginAgain(SecuritySession,String)::SystemException" : 1}},{ "className" : "com::ivata::groupware::admin::security::SecurityImpl" , "selectors" : { "SecurityImpl(???)" : 1 , "addUser(SecuritySession,UserDO)::SystemException" : 1 , "addUser(SecuritySession,UserDO)::ValidationException" : 1 , "amendUser(SecuritySession,UserDO)::SystemException" : 2 , "amendUser(SecuritySession,UserDO)::ValidationException" : 1 , "enableUser(SecuritySession,String,boolean)::SystemException" : 1 , "enableUser(SecuritySession,String,boolean)::ValidationException" : 1 , "findUserByName(SecuritySession,String)::SystemException" : 1 , "isDemoVersion()" : 4 , "isUser(???)" : 1 , "isUserEnabled(SecuritySession,String)::SystemException" : 1 , "onAmendUserName(???)" : 1 , "onAmendUserName(SecuritySession,PersistenceSession,UserDO,String)::ValidationException" : 1 , "removeUser(SecuritySession,String)::SystemException" : 1 , "removeUser(SecuritySession,String)::ValidationException" : 1 , "restoreUser(SecuritySession,String)::SystemException" : 1 , "setPassword(SecuritySession,String,String)::SystemException" : 1 , "setPassword(SecuritySession,String,String)::ValidationException" : 1}},{ "className" : "com::ivata::groupware::admin::setting::SettingsDataTypeException" , "selectors" : { "SettingsDataTypeException(String)" : 1}},{ "className" : "com::ivata::groupware::business::addressbook::AddressBook" , "selectors" : { "addAddressBook(???)" : 1 , "addPerson(???)" : 1 , "addUserGroup(???)" : 1 , "amendGroup(???)" : 2 , "amendPerson(???)" : 2 , "findAddressBooks(???)" : 4 , "findAllPeopleInGroup(???)" : 1 , "findCountryByCode(???)" : 2 , "findGroupByPrimaryKey(???)" : 9 , "findGroupsByParent(???)" : 3 , "findPersonByPrimaryKey(???)" : 3 , "findPersonByUserName(???)" : 8 , "findUserGroups(???)" : 2 , "removeGroup(???)" : 2 , "removePerson(???)" : 1 , "validate(???)" : 1}},{ "className" : "com::ivata::groupware::business::library::struts::TopicForm" , "selectors" : { "TopicForm(Library)" : 1 , "getTopic()" : 2 , "setRightsAddItem(Integer[])" : 1 , "setRightsAmend(Integer[])" : 2 , "setRightsAmendItem(Integer[])" : 1 , "setRightsRemove(Integer[])" : 2 , "setRightsRemoveItem(Integer[])" : 1 , "setRightsView(Integer[])" : 2 , "setRightsViewItem(Integer[])" : 1 , "setTopic(TopicDO)" : 1 , "setTopicTab_activeTab(Integer)" : 1}},{ "className" : "com::ivata::groupware::business::library::Library" , "selectors" : { "addComment(???)" : 1 , "addItem(???)" : 1 , "addTopic(???)" : 1 , "amendComment(???)" : 2 , "amendItem(???)" : 1 , "amendTopic(???)" : 1 , "countCommentsForItem(???)" : 1 , "findCommentByItem(???)" : 1 , "findCommentByParent(???)" : 1 , "findCommentByPrimaryKey(???)" : 3 , "findItemByPrimaryKey(???)" : 1 , "findRecentItems(???)" : 1 , "findTopicByPrimaryKey(???)" : 1 , "findTopics(???)" : 1 , "findUnacknowledgedComments(???)" : 1 , "removeItem(???)" : 1 , "removeTopic(???)" : 1 , "sanitize(???)" : 1 , "updateSearchIndex(???)" : 1 , "validate(???)" : 3}},{ "className" : "com::ivata::groupware::admin::security::SecurityImplTest" , "selectors" : { "setUp()::DefaultMaskFactory" : 1}},{ "className" : "com::ivata::groupware::business::mail::struts::MailUserForm" , "selectors" : { "getUserAliases()" : 2 , "setUserAliases(List)" : 3 , "setVacationMessage(String)" : 1}},{ "className" : "com::ivata::groupware::business::mail::MailImpl" , "selectors" : { "addMessageToDraftsFolder(MailSession,MessageDO)::MimeMessage" : 1 , "addMessageToDraftsFolder(MailSession,MessageDO)::SystemException" : 1 , "addMultiPart(Part,MessageDO)::SystemException" : 1 , "addToSentFolder(MailSession,MimeMessage)::SystemException" : 2 , "appendAttachments(MailSession,String,List)::MimeBodyPart" : 2 , "appendAttachments(MailSession,String,List)::MimeMessage" : 1 , "appendAttachments(MailSession,String,List)::MimeMultipart" : 1 , "appendAttachments(MailSession,String,List)::SystemException" : 3 , "checkDateFormatter(SecuritySession)" : 20 , "convertAddresses(SecuritySession,Collection)::InternetAddress" : 1 , "convertAddresses(SecuritySession,Collection)::SystemException" : 1 , "createDOFromJavaMailMessage(MimeMessage,boolean)::SystemException" : 1 , "createFolder(MailSession,String)::SystemException" : 4 , "createForwardedMessage(MailSession,Folder,List)::CharacterEntityFormat" : 1 , "createForwardedMessage(MailSession,Folder,List)::SystemException" : 2 , "createHTMLContent(String)::MimeBodyPart" : 2 , "createHTMLContent(String)::MimeMultipart" : 1 , "createReplyMessage(MailSession,Folder,String,Integer)::HTMLFormatter" : 1 , "createReplyMessage(MailSession,Folder,String,Integer)::LineBreakFormat" : 1 , "createReplyMessage(MailSession,Folder,String,Integer)::SystemException" : 2 , "createThreadMessage(MailSession,String,List,Integer)::SystemException" : 3 , "deleteMessagesFromTrash(MailSession,List)::SystemException" : 1 , "doesFolderExist(MailSession,String)::SystemException" : 3 , "findMessagesInFolder(MailSession,String,Integer,boolean)::ListColumnComparator" : 1 , "findMessagesInFolder(MailSession,String,Integer,boolean)::SystemException" : 2 , "getAttachment(MailSession,String,String,String)::SerializedByteArray" : 1 , "getAttachment(MailSession,String,String,String)::SystemException" : 1 , "getDOFromJavaMailMessage(MimeMessage,boolean)::SystemException" : 1 , "getMultiPartText(Part)::SystemException" : 1 , "getNullString()" : 5 , "hasNewMessages(SecuritySession,String,String)::SystemException" : 2 , "openDraftsFolder(Store,MailSession)::SystemException" : 1 , "retainAttachments(MessageDO,MimeBodyPart,MimeMessage,MimeMessage)::MimeBodyPart" : 1 , "retainAttachments(MessageDO,MimeBodyPart,MimeMessage,MimeMessage)::MimeMessage" : 1 , "retainAttachments(MessageDO,MimeBodyPart,MimeMessage,MimeMessage)::MimeMultipart" : 1 , "retainAttachments(MessageDO,MimeBodyPart,MimeMessage,MimeMessage)::SystemException" : 1 , "send(MailSession,MessageDO)::SystemException" : 3 , "send(MailSession,String,Collection,Collection,Collection,String,Object,String,boolean)::InternetAddress" : 1 , "send(MailSession,String,Collection,Collection,Collection,String,Object,String,boolean)::SystemException" : 4 , "setDOToJavaMailMessage(Session,Folder,MessageDO)::MimeBodyPart" : 1 , "setDOToJavaMailMessage(Session,Folder,MessageDO)::SystemException" : 1 , "setMultiPartText(Part,MessageTextParts)::SystemException" : 1 , "validate(SecuritySession,MessageDO)::InternetAddress" : 3 , "validate(SecuritySession,MessageDO)::ValidationErrors" : 1}},{ "className" : "com::ivata::groupware::business::mail::struts::IndexForm" , "selectors" : { "getDeleteTrash()" : 1 , "getFolderName()" : 4 , "getForwardMessages()" : 1 , "getMessageIds()" : 1 , "getMoveTo()" : 2 , "getRetainPrevious()" : 1 , "getSelectAll()" : 1 , "getSelectedMessageIds()" : 3 , "getSortAscending()" : 3 , "getSortBy()" : 2 , "setFolderName(String)" : 5 , "setForwardMessages(boolean)" : 1 , "setMoveTo(String)" : 1 , "setSelectedMessageIds(String[])" : 1}},{ "className" : "com::ivata::groupware::business::calendar::event::publicholiday::PublicHolidayDO" , "selectors" : { "PublicHolidayDO()" : 1}},{ "className" : "com::ivata::groupware::admin::security::server::SecurityServerException" , "selectors" : { "getCause(???)" : 1 , "getMessage(???)" : 1 , "printStackTrace(???)" : 1}},{ "className" : "com::ivata::groupware::business::mail::struts::MailSetupForm" , "selectors" : { "getMailDomain()" : 1 , "getMailDomains()" : 1 , "getMailHostIMAP()" : 2 , "getMailHostSMTP()" : 2 , "getScriptsPath()" : 2 , "isWindows()" : 3 , "validate(HttpServletRequest,HttpSession)::ValidationError" : 5}},{ "className" : "com::ivata::groupware::admin::setting::struts::SettingForm" , "selectors" : { "clear()" : 1 , "getAdministrator()" : 1 , "getSettingName()" : 1 , "getSettingOverride(String)" : 1 , "getSettingSystem(String)" : 1 , "getSettingTabSystem()" : 1 , "getSettingTabUser()" : 1 , "getSettingTab_activeTab()" : 2 , "getSettingUser(String)" : 1 , "getTabName()" : 1 , "setAdministrator(String)" : 1 , "setSettingArea(String)" : 1 , "setSettingOverride(String,boolean)" : 1 , "setSettingSystem(String,Object)" : 1 , "setSettingTabSystem(List)" : 1 , "setSettingTabUser(List)" : 1 , "setSettingTab_activeTab(Integer)" : 1 , "setSettingType(String,Integer)" : 1 , "setSettingUser(String,Object)" : 2 , "setTabName(List)" : 1 , "validate(HttpServletRequest,HttpSession)::ValidationError" : 4 , "validate(HttpServletRequest,HttpSession)::ValidationErrors" : 1}},{ "className" : "com::ivata::groupware::business::calendar::Calendar" , "selectors" : { "addEvent(???)" : 1 , "amendEvent(???)" : 1 , "findEventByPrimaryKey(???)" : 1 , "findEventsForDay(???)" : 2 , "removeEvent(???)" : 1 , "validate(???)" : 1}},{ "className" : "com::ivata::groupware::business::addressbook::struts::GroupRightForm" , "selectors" : { "getAddGroup()" : 1 , "getGroup()" : 3 , "getGroupIds()" : 9 , "getGroupNames()" : 5 , "getGroupRightTab_activeTab()" : 2 , "getGroupRightsAdd()" : 2 , "getGroupRightsAmend()" : 2 , "getGroupRightsRemove()" : 2 , "getGroupRightsView()" : 2 , "getOk(???)" : 1 , "getRemove()" : 1 , "getRowNames()" : 1 , "getRows()" : 3 , "getSelected()" : 1 , "getType()" : 7 , "setAddGroup(Integer)" : 1 , "setCanRemove(boolean)" : 4 , "setEmptyListMessage(String)" : 2 , "setGroup(GroupDO)" : 5 , "setGroupIds(Vector)" : 3 , "setGroupNames(Vector)" : 2 , "setGroupRightTab_activeTab(Integer)" : 3 , "setGroupRightsAdd(String[])" : 3 , "setGroupRightsAmend(String[])" : 3 , "setGroupRightsRemove(String[])" : 3 , "setGroupRightsView(String[])" : 3 , "setHelpKey(???)" : 3 , "setIncludePage(String)" : 4 , "setReadOnly(boolean)" : 4 , "setRowNames(Vector)" : 3 , "setRows(Vector)" : 3 , "setSelected(String[])" : 1 , "setType(String)" : 2 , "validate(HttpServletRequest,HttpSession)::ValidationErrors" : 1}},{ "className" : "com::ivata::groupware::business::addressbook::person::PersonDO" , "selectors" : { "PersonDO()" : 4 , "getAddress()" : 12 , "getCompany()" : 2 , "getDateOfBirth()" : 2 , "getEmailAddress()" : 8 , "getEmployee()" : 15 , "getFileAs()" : 9 , "getFirstNames()" : 3 , "getGroup()" : 14 , "getJobTitle()" : 1 , "getLastName()" : 3 , "getSalutation()" : 2 , "getTelecomAddresses()" : 11 , "getUser()" : 39 , "isDeleted()" : 1 , "setAddress(AddressDO)" : 7 , "setCompany(String)" : 4 , "setDateOfBirth(Date)" : 4 , "setDeleted(boolean)" : 1 , "setEmployee(EmployeeDO)" : 8 , "setFileAs(String)" : 6 , "setFirstNames(String)" : 5 , "setGroup(GroupDO)" : 8 , "setJobTitle(String)" : 2 , "setLastName(String)" : 5 , "setSalutation(String)" : 3 , "setTelecomAddresses(Set)" : 3 , "setUser(UserDO)" : 10}},{ "className" : "com::ivata::groupware::business::addressbook::address::AddressDO" , "selectors" : { "AddressDO()" : 4 , "getCountry()" : 6 , "getPostCode()" : 3 , "getRegion()" : 3 , "getStreetAddress()" : 4 , "getTown()" : 4 , "setCountry(CountryDO)" : 4 , "setPerson(PersonDO)" : 2 , "setPostCode(String)" : 1 , "setRegion(String)" : 1 , "setStreetAddress(String)" : 2 , "setTown(String)" : 2}},{ "className" : "com::ivata::groupware::container::persistence::listener::RemovePersistenceListener" , "selectors" : { "onRemove(???)" : 1}},{ "className" : "com::ivata::groupware::navigation::menu::MenuDO" , "selectors" : { "getItems()" : 1}},{ "className" : "com::ivata::groupware::business::addressbook::AddressBookImplTest" , "selectors" : { "getHibernateConfiguration()::Configuration" : 1 , "setUp()::DefaultFieldValueConvertorFactory" : 1 , "testAmendPerson()::SystemException" : 1 , "testFindAddressBooks()::SystemException" : 1 , "testFindAllCountries()::SystemException" : 1 , "testFindCountryByCode()::SystemException" : 1 , "testFindPersonalAddressBook()::SystemException" : 1 , "testFindUserGroups()::SystemException" : 1 , "testValidateSecuritySessionAddressDO()::SystemException" : 1}},{ "className" : "com::ivata::groupware::business::mail::server::HMailServer" , "selectors" : { "<Initializer>()::ReleaseManager" : 1 , "HMailServer(String,AddressBook,Settings)" : 1 , "addUser(???)" : 1 , "addUser(SecuritySession,String,String)::SystemException" : 2 , "checkPassword(???)" : 1 , "checkPassword(SecuritySession,String,String)::SystemException" : 3 , "getDomains(???)" : 1 , "getSystemUserName(SecuritySession,String)" : 10 , "getUserAliases(SecuritySession,String)::SystemException" : 1 , "getUserForwarding(SecuritySession,String)::SystemException" : 1 , "getVacationMessage(???)" : 1 , "getVacationMessage(SecuritySession,String)::SystemException" : 1 , "isUser(SecuritySession,String)::SystemException" : 1 , "removeList(SecuritySession,String)::SystemException" : 1 , "removeUser(???)" : 1 , "removeUser(SecuritySession,String)::SystemException" : 1 , "setList(SecuritySession,String,Collection)::SystemException" : 1 , "setPassword(???)" : 1 , "setPassword(SecuritySession,String,String)::SystemException" : 1 , "setUserAliases(SecuritySession,String,Collection)::SystemException" : 1 , "setUserForwarding(SecuritySession,String,String)::SystemException" : 1 , "setVacationMessage(???)" : 1 , "setVacationMessage(SecuritySession,String,String)::SystemException" : 1}},{ "className" : "com::ivata::groupware::web::tag::webgui::tree::TreeTag" , "selectors" : { "createChildren(Object,int)::JspException" : 1 , "doStartTag()::JspException" : 2 , "getFormName()" : 6 , "getTheme(???)" : 3 , "setCloseFolder(Integer)" : 1 , "setOpenFolder(Integer)" : 1}},{ "className" : "com::ivata::groupware::business::drive::file::FileDO" , "selectors" : { "FileDO()" : 1 , "getName()" : 2 , "setComment(String)" : 1 , "setMimeType(String)" : 1 , "setName(String)" : 1 , "setSize(Integer)" : 1}},{ "className" : "com::ivata::groupware::business::addressbook::AddressBookImpl" , "selectors" : { "AddressBookImpl(???)" : 1 , "addAddressBook(SecuritySession,GroupDO)::SystemException" : 1 , "addGroup(???)" : 1 , "addGroup(SecuritySession,GroupDO)::SystemException" : 1 , "addPerson(???)" : 1 , "addPerson(SecuritySession,PersonDO)::SystemException" : 1 , "addUserGroup(SecuritySession,GroupDO)::SystemException" : 1 , "amendGroup(???)" : 2 , "amendGroup(SecuritySession,GroupDO)::SystemException" : 1 , "amendPerson(???)" : 8 , "amendPerson(SecuritySession,PersonDO)::SystemException" : 1 , "findAddressBooks(???)" : 2 , "findAddressBooks(SecuritySession,boolean)::SystemException" : 1 , "findAllCountries(???)" : 1 , "findAllCountries(SecuritySession)::SystemException" : 1 , "findAllPeopleInGroup(???)" : 2 , "findAllPeopleInGroup(GroupDO,String,List,Stack)::SystemException" : 1 , "findAllPeopleInGroup(GroupDO,String,List,Stack)::ValidationError" : 1 , "findCountryByCode(???)" : 3 , "findCountryByCode(SecuritySession,String)::SystemException" : 1 , "findGroupByPrimaryKey(???)" : 5 , "findGroupByPrimaryKey(SecuritySession,Integer)::SystemException" : 1 , "findGroupsByParent(???)" : 1 , "findGroupsByParent(SecuritySession,Integer)::SystemException" : 1 , "findPersonByPrimaryKey(???)" : 9 , "findPersonByPrimaryKey(SecuritySession,String)::SystemException" : 1 , "findPersonByUserName(???)" : 2 , "findPersonByUserName(SecuritySession,String)::SystemException" : 1 , "findPersonalAddressBook(???)" : 1 , "findPersonalAddressBook(SecuritySession)::SystemException" : 1 , "findUserGroups(???)" : 1 , "findUserGroups(SecuritySession,boolean)::SystemException" : 1 , "removeGroup(???)" : 1 , "removeGroup(SecuritySession,Integer)::SystemException" : 1 , "removePerson(SecuritySession,Integer)::EJBException" : 1 , "removePerson(SecuritySession,Integer)::SystemException" : 1 , "validate(???)" : 6 , "validate(SecuritySession,AddressDO)::ValidationErrors" : 1 , "validate(SecuritySession,GroupDO)::ValidationErrors" : 1 , "validate(SecuritySession,PersonDO)::ValidationErrors" : 1}},{ "className" : "com::ivata::groupware::business::search::result::SearchResult" , "selectors" : { "SearchResult()" : 1 , "getWeight()" : 1 , "setItem(SearchItemDO)" : 1 , "setWeight(float)" : 2}},{ "className" : "com::ivata::groupware::business::calendar::event::meeting::MeetingDO" , "selectors" : { "MeetingDO()" : 1 , "getAttendees()" : 1 , "getCategories()" : 3 , "getChairPerson()" : 1 , "getLocation()" : 1 , "setAttendees(Set)" : 2 , "setCategories(Set)" : 2 , "setChairPerson(PersonDO)" : 2 , "setLocation(String)" : 1}},{ "className" : "com::ivata::groupware::business::library::LibraryImpl" , "selectors" : { "addComment(SecuritySession,CommentDO)::SystemException" : 1 , "addItem(SecuritySession,LibraryItemDO,String)::SystemException" : 1 , "addTopic(SecuritySession,TopicDO)::SystemException" : 1 , "amendComment(SecuritySession,CommentDO)::SystemException" : 1 , "amendItem(SecuritySession,LibraryItemDO,String)::SystemException" : 1 , "amendTopic(SecuritySession,TopicDO)::SystemException" : 1 , "countCommentsForItem(SecuritySession,Integer)::SystemException" : 1 , "findCommentByItem(SecuritySession,Integer)::SystemException" : 1 , "findCommentByParent(SecuritySession,Integer)::SystemException" : 1 , "findCommentByPrimaryKey(SecuritySession,Integer)::SystemException" : 1 , "findItemByPrimaryKey(SecuritySession,Integer)::SystemException" : 1 , "findItemByRevision(SecuritySession,String,String)::SystemException" : 1 , "findRecentItems(SecuritySession,Integer,Integer,Integer)::SystemException" : 1 , "findTopicByPrimaryKey(SecuritySession,Integer)::SystemException" : 1 , "findTopics(SecuritySession)::SystemException" : 1 , "findUnacknowledgedComments(SecuritySession,Integer)::SystemException" : 1 , "notifyForSubmission(SecuritySession,Object,boolean)::CharacterEntityFormat" : 1 , "notifyForSubmission(SecuritySession,Object,boolean)::LineBreakFormat" : 1 , "notifyForSubmission(SecuritySession,Object,boolean)::SystemException" : 3 , "removeComment(SecuritySession,CommentDO)::SystemException" : 1 , "removeItem(SecuritySession,LibraryItemDO)::SystemException" : 1 , "removeTopic(SecuritySession,TopicDO)::SystemException" : 1 , "revertItemToRevision(SecuritySession,String,String,String)::MethodNotSupportedException" : 1 , "sanitize(SecuritySession)::SystemException" : 1 , "updateSearchIndex(SecuritySession)::SystemException" : 1 , "validate(SecuritySession,CommentDO)::ValidationErrors" : 1 , "validate(SecuritySession,LibraryItemDO)::ValidationErrors" : 1 , "validate(SecuritySession,TopicDO)::ValidationErrors" : 1}},{ "className" : "com::ivata::groupware::admin::setting::right::SettingsRightsImpl" , "selectors" : { "addAmendRightForSetting(SecuritySession,String)::SystemException" : 1 , "canAmendSetting(SecuritySession,String)::SystemException" : 1 , "canAmendSystemSettings(SecuritySession)::SystemException" : 1 , "removeAmendRightForSetting(SecuritySession,String)::SystemException" : 1}},{ "className" : "com::ivata::groupware::business::calendar::CalendarImpl" , "selectors" : { "addEvent(SecuritySession,EventDO)::SystemException" : 1 , "amendEvent(SecuritySession,EventDO)::SystemException" : 1 , "findEventByPrimaryKey(SecuritySession,String)::SystemException" : 1 , "findEventsForDay(SecuritySession,java" : 1 , "removeEvent(SecuritySession,EventDO)::SystemException" : 1 , "validate(SecuritySession,EventDO)::ValidationErrors" : 1}},{ "className" : "com::ivata::groupware::business::search::item::SearchItemDO" , "selectors" : { "SearchItemDO()" : 1 , "setCategory(String)" : 1 , "setTargetId(Integer)" : 1 , "setType(String)" : 1}},{ "className" : "com::ivata::groupware::business::mail::server::NoMailServerException" , "selectors" : { "NoMailServerException()" : 1 , "NoMailServerException(ClassCastException)" : 5 , "getCause(???)" : 1 , "printStackTrace(???)" : 1}},{ "className" : "org::w3c::dom::NodeList" , "selectors" : { "getLength()" : 1270 , "item(int)" : 1136}},{ "className" : "com::ivata::groupware::web::tag::CheckSiteTag" , "selectors" : { "doEndTag()::JspException" : 1}},{ "className" : "com::ivata::groupware::business::mail::Mail" , "selectors" : { "addMessageToDraftsFolder(???)" : 1 , "addUserAliasEmailAddresses(???)" : 1 , "appendAttachments(???)" : 1 , "createFolder(???)" : 1 , "createThreadMessage(???)" : 2 , "deleteMessagesFromTrash(???)" : 2 , "doesFolderExist(???)" : 1 , "findMessageByFolderMessageId(???)" : 1 , "findMessagesInFolder(???)" : 3 , "getUserAliases(???)" : 2 , "getVacationMessage(???)" : 1 , "hasNewMessages(???)" : 1 , "moveMessages(???)" : 2 , "send(???)" : 2 , "setUserAliases(???)" : 1 , "validate(???)" : 1}},{ "className" : "com::ivata::groupware::container::persistence::hibernate::HibernateManager" , "selectors" : { "HibernateManager(???)" : 1 , "add(???)" : 1 , "amend(???)" : 3 , "execute(PersistenceSession,String,Object,Integer,Integer,boolean)::FinderException" : 1 , "findByPrimaryKey(???)" : 4 , "findByPrimaryKey(PersistenceSession,Class,Serializable)::FinderException" : 1 , "findByPrimaryKey(PersistenceSession,Class,Serializable)::PersistenceException" : 1 , "findInstance(???)" : 12 , "openSession(???)" : 7 , "remove(???)" : 1 , "remove(PersistenceSession,Class,Serializable)::PersistenceException" : 1}},{ "className" : "com::ivata::groupware::admin::setting::right::SettingsRights" , "selectors" : { "addAmendRightForSetting(???)" : 1 , "canAmendSetting(???)" : 2 , "canAmendSystemSettings(???)" : 2 , "removeAmendRightForSetting(???)" : 1}},{ "className" : "com::ivata::groupware::business::addressbook::telecomaddress::TelecomAddressConstants" , "selectors" : { "countTypes()" : 1}},{ "className" : "com::ivata::groupware::business::search::item::content::SearchItemContentDO" , "selectors" : { "SearchItemContentDO()" : 1 , "getItem()" : 1 , "setItem(SearchItemDO)" : 1 , "setTargetId(Integer)" : 1 , "setType(String)" : 1}},{ "className" : "com::ivata::groupware::business::mail::MailImpl::MessageTextParts" , "selectors" : { "MessageTextParts()" : 1}},{ "className" : "com::ivata::groupware::web::tree::TreeNodeRenderer" , "selectors" : { "finalize(???)" : 1 , "getTreeTag()" : 5 , "initialize(???)" : 1 , "render(???)" : 1 , "setTreeTag(TreeTag)" : 1}},{ "className" : "com::ivata::groupware::business::addressbook::person::group::right::UserRightFilter" , "selectors" : { "setAccess(Integer)" : 1 , "setDetail(Integer)" : 1 , "setUserName(String)" : 1}},{ "className" : "com::ivata::groupware::business::library::right::LibraryRightsImpl" , "selectors" : { "amendAddRightsForItem(SecuritySession,Integer,Collection)::MethodNotSupportedException" : 1 , "amendAmendRightsForItem(SecuritySession,Integer,Collection)::MethodNotSupportedException" : 1 , "amendAmendRightsForTopic(SecuritySession,Integer,Collection)::MethodNotSupportedException" : 1 , "amendRemoveRightsForItem(SecuritySession,Integer,Collection)::MethodNotSupportedException" : 1 , "amendRemoveRightsForTopic(SecuritySession,Integer,Collection)::MethodNotSupportedException" : 1 , "amendViewRightsForItem(SecuritySession,Integer,Collection)::MethodNotSupportedException" : 1 , "amendViewRightsForTopic(SecuritySession,Integer,Collection)::MethodNotSupportedException" : 1 , "canAmendComment(SecuritySession,CommentDO)::SystemException" : 1 , "canRemoveComment(SecuritySession,CommentDO)::SystemException" : 1 , "findRightsForItemsInTopic(SecuritySession,Integer,Integer)::SystemException" : 1 , "findRightsForTopic(SecuritySession,Integer,Integer)::SystemException" : 1 , "findTopicsByGroupAccess(SecuritySession,Integer,Integer)::SystemException" : 1}},{ "className" : "com::ivata::groupware::business::mail::message::MessageDO" , "selectors" : { "MessageDO()" : 5 , "getAttachments()" : 7 , "getFolderName()" : 2 , "getFormat()" : 3 , "getMessageID()" : 6 , "getReceived()" : 1 , "getRecipients()" : 7 , "getRecipientsBCC()" : 6 , "getRecipientsCC()" : 6 , "getSenders()" : 5 , "getSent()" : 1 , "getSize()" : 1 , "getSubject()" : 3 , "getText()" : 7 , "setAttachments(List)" : 2 , "setFolderName(String)" : 4 , "setFormat(int)" : 8 , "setMessageID(String)" : 4 , "setReceived(GregorianCalendar)" : 2 , "setRecipients(List)" : 3 , "setRecipientsBCC(List)" : 3 , "setRecipientsCC(List)" : 3 , "setSenders(List)" : 3 , "setSent(GregorianCalendar)" : 2 , "setSize(Integer)" : 2 , "setSubject(String)" : 2 , "setText(String)" : 6}},{ "className" : "cern::colt::function::IntComparator" , "selectors" : { "compare(int,int)" : 28}},{ "className" : "cern::colt::matrix::impl::WrapperDoubleMatrix1D" , "selectors" : { "WrapperDoubleMatrix1D(DoubleMatrix1D)" : 2}},{ "className" : "cern::jet::math::Polynomial" , "selectors" : { "p1evl(double,double[],int)" : 7 , "polevl(double,double[],int)" : 11}},{ "className" : "java::lang::IndexOutOfBoundsException" , "selectors" : { "IndexOutOfBoundsException()" : 129 , "IndexOutOfBoundsException(String)" : 373}},{ "className" : "cern::colt::function::IntIntProcedure" , "selectors" : { "apply(int,int)" : 7}},{ "className" : "cern::colt::function::DoubleFunction" , "selectors" : { "apply(double)" : 23}},{ "className" : "cern::colt::matrix::impl::SparseObjectMatrix3D" , "selectors" : { "SparseObjectMatrix3D(Object[][][])" : 1 , "SparseObjectMatrix3D(int,int,int)" : 4 , "SparseObjectMatrix3D(int,int,int,int,double,double)" : 1}},{ "className" : "cern::colt::map::QuickOpenIntIntHashMap" , "selectors" : { "QuickOpenIntIntHashMap()" : 1 , "QuickOpenIntIntHashMap(int)" : 1 , "QuickOpenIntIntHashMap(int,double,double)" : 1 , "put(int,int)" : 4 , "rehash(int)" : 4}},{ "className" : "cern::colt::function::ObjectObjectFunction" , "selectors" : { "apply(Object,Object)" : 17}},{ "className" : "cern::colt::function::IntIntDoubleFunction" , "selectors" : { "apply(int,int,double)" : 4}},{ "className" : "cern::jet::random::Zeta" , "selectors" : { "Zeta(double,double,RandomEngine)" : 1 , "generateZeta(double,double,RandomEngine)" : 1 , "nextInt()" : 1 , "setState(double,double)" : 2}},{ "className" : "hep::aida::IAxis" , "selectors" : { "binLowerEdge(int)" : 7 , "bins()" : 104 , "coordToIndex(double)" : 12 , "lowerEdge()" : 13 , "upperEdge()" : 14}},{ "className" : "cern::jet::random::Hyperbolic" , "selectors" : { "Hyperbolic(double,double,RandomEngine)" : 1 , "nextDouble(double,double)" : 2 , "setState(double,double)" : 1}},{ "className" : "cern::jet::random::AbstractDistribution" , "selectors" : { "clone()" : 7 , "getRandomGenerator()" : 2 , "nextDouble()" : 8 , "nextInt()" : 1 , "setRandomGenerator(RandomEngine)" : 40}},{ "className" : "cern::colt::matrix::impl::SelectedDenseDoubleMatrix3D" , "selectors" : { "SelectedDenseDoubleMatrix3D(double[],int[],int[],int[],int)" : 2 , "_columnOffset(int)" : 1 , "_rowOffset(int)" : 1 , "_sliceOffset(int)" : 1 , "setUp(int,int,int)" : 1}},{ "className" : "cern::jet::random::NegativeBinomial" , "selectors" : { "NegativeBinomial(int,double,RandomEngine)" : 1 , "nextInt(int,double)" : 2 , "setNandP(int,double)" : 1}},{ "className" : "cern::jet::random::Gamma" , "selectors" : { "Gamma(double,double,RandomEngine)" : 3 , "nextDouble(double,double)" : 3 , "setState(double,double)" : 1}},{ "className" : "cern::jet::random::Poisson" , "selectors" : { "cern" : 4 , "clone()" : 1 , "f(int,double,double)" : 6 , "nextInt()" : 1 , "nextInt(double)" : 2 , "setMean(double)" : 2}},{ "className" : "cern::colt::matrix::bench::BenchmarkKernel" , "selectors" : { "run(double,TimerProcedure)" : 2 , "systemInfo()" : 1}},{ "className" : "cern::colt::PersistentObject" , "selectors" : { "clone()" : 40}},{ "className" : "cern::colt::function::ShortComparator" , "selectors" : { "compare(short,short)" : 9}},{ "className" : "cern::colt::list::DistinctNumberList" , "selectors" : { "codeOf(long)" : 2 , "setUp(long[],int)" : 1}},{ "className" : "cern::colt::buffer::DoubleBuffer3DConsumer" , "selectors" : { "addAllOf(DoubleArrayList,DoubleArrayList,DoubleArrayList)" : 2}},{ "className" : "cern::colt::function::DoubleDoubleFunction" , "selectors" : { "apply(double,double)" : 29}},{ "className" : "cern::colt::matrix::impl::SelectedDenseDoubleMatrix1D" , "selectors" : { "SelectedDenseDoubleMatrix1D(double[],int[])" : 2 , "SelectedDenseDoubleMatrix1D(int,double[],int,int,int[],int)" : 3}},{ "className" : "cern::colt::map::HashFunctions" , "selectors" : { "hash(double)" : 2 , "hash(int)" : 8 , "hash(long)" : 2}},{ "className" : "cern::jet::random::engine::DRand" , "selectors" : { "cern" : 24 , "setSeed(int)" : 1}},{ "className" : "cern::colt::matrix::ObjectFactory1D" , "selectors" : { "ObjectFactory1D()" : 2 , "make(int)" : 6}},{ "className" : "cern::colt::matrix::impl::FormerFactory" , "selectors" : { "cern" : 7 , "create(String)" : 7}},{ "className" : "cern::colt::map::PrimeFinder" , "selectors" : { "nextPrime(int)" : 4 , "statistics(int,int)" : 1}},{ "className" : "cern::colt::matrix::ObjectFactory2D" , "selectors" : { "ObjectFactory2D()" : 2 , "checkRectangularShape(ObjectMatrix2D[][])" : 2 , "make(Object[][])" : 1 , "make(int,int)" : 13 , "make1D(int)" : 1}},{ "className" : "cern::colt::matrix::doublealgo::Statistic" , "selectors" : { "aggregate(DoubleMatrix2D,BinFunction1D[],DoubleMatrix2D)" : 3 , "bin(DoubleMatrix1D)" : 3 , "correlation(DoubleMatrix2D)" : 2 , "covariance(DoubleMatrix2D)" : 3 , "demo2(int,int,boolean)" : 1 , "distance(DoubleMatrix2D,VectorVectorFunction)" : 1 , "histogram(IHistogram2D,DoubleMatrix1D,DoubleMatrix1D,DoubleMatrix1D)" : 1 , "histogram(IHistogram3D,DoubleMatrix1D,DoubleMatrix1D,DoubleMatrix1D,DoubleMatrix1D)" : 1}},{ "className" : "cern::colt::matrix::impl::SelectedSparseDoubleMatrix1D" , "selectors" : { "SelectedSparseDoubleMatrix1D(AbstractIntDoubleMap,int[])" : 2 , "SelectedSparseDoubleMatrix1D(int,AbstractIntDoubleMap,int,int,int[],int)" : 3}},{ "className" : "java::lang::Comparable" , "selectors" : { "compareTo(T)" : 287}},{ "className" : "cern::colt::function::IntProcedure" , "selectors" : { "apply(int)" : 9}},{ "className" : "cern::colt::matrix::impl::AbstractMatrix" , "selectors" : { "ensureCapacity(int)" : 1}},{ "className" : "cern::colt::Swapper" , "selectors" : { "swap(int,int)" : 13}},{ "className" : "cern::jet::math::PlusMult" , "selectors" : { "PlusMult(double)" : 5 , "minusMult(double)" : 1 , "plusMult(double)" : 4}},{ "className" : "cern::colt::function::DoubleIntProcedure" , "selectors" : { "apply(double,int)" : 4}},{ "className" : "hep::aida::IHistogram1D" , "selectors" : { "binEntries(int)" : 11 , "binError(int)" : 3 , "binHeight(int)" : 11 , "fill(double)" : 4 , "mean()" : 5 , "minMaxBins()" : 1 , "rms()" : 5 , "xAxis()" : 19}},{ "className" : "cern::colt::function::ByteComparator" , "selectors" : { "compare(byte,byte)" : 9}},{ "className" : "cern::jet::stat::quantile::Utils" , "selectors" : { "epsilonCeiling(double)" : 3}},{ "className" : "cern::colt::function::CharComparator" , "selectors" : { "compare(char,char)" : 9}},{ "className" : "cern::colt::matrix::DoubleFactory1D" , "selectors" : { "DoubleFactory1D()" : 2 , "descending(int)" : 2 , "make(double[])" : 6 , "make(int)" : 11 , "toList(DoubleMatrix1D)" : 1}},{ "className" : "cern::colt::matrix::impl::SelectedDenseObjectMatrix1D" , "selectors" : { "SelectedDenseObjectMatrix1D(Object[],int[])" : 2 , "SelectedDenseObjectMatrix1D(int,Object[],int,int,int[],int)" : 3}},{ "className" : "cern::jet::random::engine::MersenneTwister" , "selectors" : { "MersenneTwister(Date)" : 3 , "cern" : 18 , "nextBlock()" : 1 , "setSeed(int)" : 1}},{ "className" : "cern::colt::function::ObjectFunction" , "selectors" : { "apply(Object)" : 11}},{ "className" : "cern::colt::buffer::DoubleBuffer2DConsumer" , "selectors" : { "addAllOf(DoubleArrayList,DoubleArrayList)" : 2}},{ "className" : "cern::colt::list::adapter::LongListAdapter" , "selectors" : { "get(int)" : 2 , "object(long)" : 1 , "value(Object)" : 2}},{ "className" : "cern::jet::random::engine::RandomSeedGenerator" , "selectors" : { "RandomSeedGenerator(int,int)" : 2 , "nextSeed()" : 1 , "print(int)" : 1}},{ "className" : "cern::colt::matrix::bench::TimerProcedure" , "selectors" : { "apply(Timer)" : 2 , "init()" : 3}},{ "className" : "cern::jet::random::sampling::RandomSamplingAssistant" , "selectors" : { "cern" : 7 , "clone()" : 1 , "fetchNextBlock()" : 3 , "getRandomGenerator()" : 1 , "sampleArray(int,int[])" : 1 , "sampleNextElement()" : 6 , "testArraySampling(int,int)" : 1}},{ "className" : "cern::colt::matrix::impl::SparseDoubleMatrix2D" , "selectors" : { "SparseDoubleMatrix2D(double[][])" : 1 , "SparseDoubleMatrix2D(int,int)" : 6 , "SparseDoubleMatrix2D(int,int,AbstractIntDoubleMap,int,int,int,int)" : 1 , "SparseDoubleMatrix2D(int,int,int,double,double)" : 5 , "ensureCapacity(int)" : 1 , "getQuick(int,int)" : 1 , "setQuick(int,int,double)" : 1}},{ "className" : "cern::colt::matrix::impl::DenseObjectMatrix2D" , "selectors" : { "DenseObjectMatrix2D(Object[][])" : 1 , "DenseObjectMatrix2D(int,int,Object[],int,int,int,int)" : 1 , "assign(Object[][])" : 1 , "cern" : 7 , "index(int,int)" : 5}},{ "className" : "cern::colt::function::FloatComparator" , "selectors" : { "compare(float,float)" : 9}},{ "className" : "hep::aida::bin::BinFunctions1D" , "selectors" : { "BinFunctions1D()" : 1 , "quantile(double)" : 2}},{ "className" : "cern::colt::matrix::linalg::EigenvalueDecomposition" , "selectors" : { "EigenvalueDecomposition(DoubleMatrix2D)" : 2 , "cdiv(double,double,double,double)" : 4 , "getD()" : 1 , "getImagEigenvalues()" : 1 , "getRealEigenvalues()" : 1 , "getV()" : 1 , "hqr2()" : 1 , "orthes()" : 1 , "toString()" : 1 , "tql2()" : 1 , "tred2()" : 1}},{ "className" : "cern::colt::matrix::bench::Double2DProcedure" , "selectors" : { "operations()" : 2 , "setParameters(DoubleMatrix2D,DoubleMatrix2D)" : 8}},{ "className" : "cern::colt::matrix::impl::AbstractMatrix1D" , "selectors" : { "_offset(int)" : 1 , "_rank(int)" : 1 , "checkIndex(int)" : 5 , "checkIndexes(int[])" : 3 , "checkRange(int,int)" : 2 , "checkSize(AbstractMatrix1D)" : 16 , "index(int)" : 8 , "setUp(int)" : 10 , "setUp(int,int,int)" : 9 , "size()" : 93 , "toStringShort()" : 20 , "vFlip()" : 2 , "vPart(int,int)" : 2 , "vStrides(int)" : 2}},{ "className" : "cern::colt::matrix::impl::SelectedSparseObjectMatrix1D" , "selectors" : { "SelectedSparseObjectMatrix1D(AbstractIntObjectMap,int[])" : 2 , "SelectedSparseObjectMatrix1D(int,AbstractIntObjectMap,int,int,int[],int)" : 3}},{ "className" : "cern::colt::matrix::DoubleMatrix2DProcedure" , "selectors" : { "apply(DoubleMatrix2D)" : 2}},{ "className" : "cern::colt::function::DoubleProcedure" , "selectors" : { "apply(double)" : 8}},{ "className" : "cern::colt::function::IntIntIntProcedure" , "selectors" : { "apply(int,int,int)" : 2}},{ "className" : "cern::colt::buffer::DoubleBuffer" , "selectors" : { "add(double)" : 3 , "cern" : 1 , "clear()" : 1 , "flush()" : 4}},{ "className" : "cern::colt::matrix::objectalgo::Formatter" , "selectors" : { "cern" : 7 , "form(ObjectMatrix1D,int,Former)" : 1 , "format(ObjectMatrix2D)" : 1 , "toString(ObjectMatrix1D)" : 2 , "toString(ObjectMatrix2D)" : 7 , "toString(ObjectMatrix3D)" : 2 , "toTitleString(ObjectMatrix2D,String[],String[],String,String,String)" : 3}},{ "className" : "cern::jet::random::ExponentialPower" , "selectors" : { "ExponentialPower(double,RandomEngine)" : 1 , "nextDouble(double)" : 2 , "setState(double)" : 1}},{ "className" : "cern::jet::stat::Gamma" , "selectors" : { "gamma(double)" : 13 , "incompleteBeta(double,double,double)" : 7 , "incompleteBetaFraction1(double,double,double)" : 1 , "incompleteBetaFraction2(double,double,double)" : 1 , "incompleteGamma(double,double)" : 4 , "incompleteGammaComplement(double,double)" : 4 , "logGamma(double)" : 9 , "powerSeries(double,double,double)" : 2 , "stirlingFormula(double)" : 2}},{ "className" : "cern::jet::stat::quantile::QuantileFinderFactory" , "selectors" : { "known_N_compute_B_and_K(long,double,double,int,double[])" : 2 , "known_N_compute_B_and_K_quick(long,double)" : 1 , "known_N_compute_B_and_K_slow(long,double,double,int,double[])" : 1 , "newDoubleQuantileFinder(boolean,long,double,double,int,RandomEngine)" : 4 , "unknown_N_compute_B_and_K(double,double,int)" : 1 , "unknown_N_compute_B_and_K_raw(double,double,int)" : 1}},{ "className" : "cern::colt::matrix::impl::SelectedDenseDoubleMatrix2D" , "selectors" : { "SelectedDenseDoubleMatrix2D(double[],int[],int[],int)" : 2 , "SelectedDenseDoubleMatrix2D(int,int,double[],int,int,int,int,int[],int[],int)" : 4 , "_columnOffset(int)" : 1 , "_rowOffset(int)" : 1}},{ "className" : "cern::colt::matrix::DoubleMatrix2D" , "selectors" : { "aggregate(DoubleDoubleFunction,DoubleFunction)" : 2 , "assign(DoubleFunction)" : 37 , "assign(DoubleMatrix2D)" : 42 , "assign(DoubleMatrix2D,DoubleDoubleFunction)" : 17 , "assign(double)" : 36 , "assign(double[][])" : 5 , "cardinality()" : 4 , "copy()" : 34 , "equals(Object)" : 3 , "equals(double)" : 1 , "forEachNonZero(IntIntDoubleFunction)" : 6 , "get(int,int)" : 7 , "getContent()" : 2 , "getQuick(int,int)" : 150 , "haveSharedCells(DoubleMatrix2D)" : 2 , "haveSharedCellsRaw(DoubleMatrix2D)" : 1 , "like()" : 5 , "like(int,int)" : 11 , "like1D(int)" : 5 , "like1D(int,int,int)" : 2 , "set(int,int,double)" : 37 , "setQuick(int,int,double)" : 57 , "toArray()" : 2 , "view()" : 5 , "viewColumn(int)" : 25 , "viewColumnFlip()" : 2 , "viewDice()" : 39 , "viewPart(int,int,int,int)" : 51 , "viewRow(int)" : 42 , "viewRowFlip()" : 6 , "viewSelection(int[],int[])" : 13 , "viewSelectionLike(int[],int[])" : 1 , "viewSorted(int)" : 1 , "viewStrides(int,int)" : 4 , "zAssign8Neighbors(DoubleMatrix2D,Double9Function)" : 6 , "zMult(DoubleMatrix1D,DoubleMatrix1D)" : 4 , "zMult(DoubleMatrix1D,DoubleMatrix1D,double,double,boolean)" : 8 , "zMult(DoubleMatrix2D,DoubleMatrix2D)" : 11 , "zMult(DoubleMatrix2D,DoubleMatrix2D,double,double,boolean,boolean)" : 10 , "zSum()" : 7}},{ "className" : "cern::colt::matrix::impl::SelectedSparseDoubleMatrix2D" , "selectors" : { "SelectedSparseDoubleMatrix2D(AbstractIntDoubleMap,int[],int[],int)" : 2 , "SelectedSparseDoubleMatrix2D(int,int,AbstractIntDoubleMap,int,int,int,int,int[],int[],int)" : 4 , "_columnOffset(int)" : 1 , "_rowOffset(int)" : 1}},{ "className" : "cern::colt::function::LongComparator" , "selectors" : { "compare(long,long)" : 9}},{ "className" : "cern::colt::list::AbstractCollection" , "selectors" : { "size()" : 8 , "toList()" : 1}},{ "className" : "cern::colt::Timer" , "selectors" : { "Timer()" : 60 , "display()" : 69 , "elapsedTime()" : 7 , "millis()" : 6 , "minus(Timer)" : 23 , "minutes()" : 1 , "plus(Timer)" : 1 , "reset()" : 26 , "seconds()" : 17 , "start()" : 77 , "stop()" : 76}},{ "className" : "cern::jet::random::engine::RandomSeedTable" , "selectors" : { "getSeedAtRowColumn(int,int)" : 1 , "rows()" : 1}},{ "className" : "cern::jet::stat::quantile::QuantileCalc" , "selectors" : { "binomial(long,long)" : 19 , "ceiling(double)" : 4 , "known_N_compute_B_and_K(long,double,double,int,double[])" : 1 , "known_N_compute_B_and_K_quick(long,double)" : 1 , "known_N_compute_B_and_K_slow(long,double,double,int,double[])" : 1 , "test_B_and_K_Calculation(String[])" : 1 , "unknown_N_compute_B_and_K(double,double,int)" : 1}},{ "className" : "hep::aida::IHistogram" , "selectors" : { "entries()" : 5 , "extraEntries()" : 3 , "title()" : 7}},{ "className" : "cern::colt::list::adapter::FloatListAdapter" , "selectors" : { "get(int)" : 2 , "object(float)" : 1 , "value(Object)" : 2}},{ "className" : "cern::colt::function::FloatProcedure" , "selectors" : { "apply(float)" : 2}},{ "className" : "cern::colt::map::OpenIntIntHashMap" , "selectors" : { "OpenIntIntHashMap()" : 1 , "OpenIntIntHashMap(int)" : 1 , "OpenIntIntHashMap(int,double,double)" : 1 , "clear()" : 1 , "get(int)" : 1 , "indexOfInsertion(int)" : 2 , "indexOfKey(int)" : 3 , "indexOfValue(int)" : 2 , "put(int,int)" : 1 , "rehash(int)" : 5 , "setUp(int,double,double)" : 2 , "trimToSize()" : 1}},{ "className" : "cern::jet::random::VonMises" , "selectors" : { "VonMises(double,RandomEngine)" : 1 , "nextDouble(double)" : 2 , "setState(double)" : 1}},{ "className" : "cern::jet::random::Stack" , "selectors" : { "Stack(int)" : 2 , "pop()" : 3 , "push(int)" : 4 , "size()" : 3}},{ "className" : "cern::colt::list::adapter::ObjectListAdapter" , "selectors" : { "get(int)" : 2}},{ "className" : "cern::colt::function::LongObjectProcedure" , "selectors" : { "apply(long,Object)" : 4}},{ "className" : "cern::jet::random::BreitWigner" , "selectors" : { "BreitWigner(double,double,double,RandomEngine)" : 2 , "nextDouble(double,double,double)" : 3 , "setState(double,double,double)" : 1}},{ "className" : "hep::aida::bin::AbstractBin" , "selectors" : { "center()" : 2 , "center(int)" : 1 , "error()" : 2 , "error(int)" : 1 , "offset(int)" : 1 , "size()" : 11 , "value()" : 2 , "value(int)" : 1}},{ "className" : "cern::colt::function::LongProcedure" , "selectors" : { "apply(long)" : 3}},{ "className" : "cern::colt::list::FloatArrayList" , "selectors" : { "FloatArrayList(float[])" : 5 , "FloatArrayList(int)" : 4 , "binarySearchFromTo(float,int,int)" : 3 , "clone()" : 1 , "elements()" : 2 , "elements(float[])" : 1 , "ensureCapacity(int)" : 2}},{ "className" : "cern::colt::matrix::impl::SelectedSparseObjectMatrix2D" , "selectors" : { "SelectedSparseObjectMatrix2D(AbstractIntObjectMap,int[],int[],int)" : 2 , "SelectedSparseObjectMatrix2D(int,int,AbstractIntObjectMap,int,int,int,int,int[],int[],int)" : 4 , "_columnOffset(int)" : 1 , "_rowOffset(int)" : 1}},{ "className" : "cern::colt::matrix::impl::DenseDoubleMatrix3D" , "selectors" : { "DenseDoubleMatrix3D(int,int,int)" : 4 , "assign(double[][][])" : 1 , "cern" : 2 , "index(int,int,int)" : 2}},{ "className" : "cern::colt::matrix::impl::WrapperDoubleMatrix2D" , "selectors" : { "WrapperDoubleMatrix2D(DoubleMatrix2D)" : 3 , "viewDice()" : 3}},{ "className" : "cern::colt::buffer::ObjectBufferConsumer" , "selectors" : { "addAllOf(ObjectArrayList)" : 2}},{ "className" : "cern::colt::GenericSorting" , "selectors" : { "inplace_merge(int,int,int,IntComparator,Swapper)" : 3 , "lower_bound(int,int,int,IntComparator)" : 1 , "med3(int,int,int,IntComparator)" : 4 , "mergeSort(int,int,IntComparator,Swapper)" : 4 , "quickSort(int,int,IntComparator,Swapper)" : 11 , "quickSort1(int,int,IntComparator,Swapper)" : 3 , "reverse(int,int,Swapper)" : 3 , "upper_bound(int,int,int,IntComparator)" : 1 , "vecswap(Swapper,int,int,int)" : 2}},{ "className" : "cern::colt::matrix::linalg::Smp" , "selectors" : { "Smp(int)" : 1 , "Smp(int)::FJTaskRunnerGroup" : 1 , "run(DoubleMatrix2D[],DoubleMatrix2D[],double[],Matrix2DMatrix2DFunction)" : 2 , "splitBlockedNN(DoubleMatrix2D,DoubleMatrix2D,int,long)" : 1 , "splitBlockedNN(DoubleMatrix2D,int,long)" : 3 , "stats()" : 1}},{ "className" : "hep::aida::bin::MightyStaticBin1D" , "selectors" : { "MightyStaticBin1D(boolean,boolean,int)" : 4 , "addAllOfFromTo(DoubleArrayList,int,int)" : 1 , "clearAllMeasures()" : 1 , "clone()" : 1 , "compareWith(AbstractBin1D)" : 1 , "geometricMean()" : 4 , "getMaxOrderForSumOfPowers()" : 7 , "getMinOrderForSumOfPowers()" : 3 , "harmonicMean()" : 3 , "hasSumOfInversions()" : 4 , "hasSumOfLogarithms()" : 3 , "hasSumOfPowers(int)" : 6 , "kurtosis()" : 3 , "moment(int,double)" : 4 , "product()" : 1 , "setMaxOrderForSumOfPowers(int)" : 1 , "skew()" : 3 , "sumOfInversions()" : 5 , "sumOfLogarithms()" : 4 , "sumOfPowers(int)" : 3 , "toString()" : 1}},{ "className" : "hep::aida::ref::Histogram2D" , "selectors" : { "Histogram2D(String,IAxis,IAxis)" : 7 , "Histogram2D(String,int,double,double,int,double,double)" : 2 , "setContents(int[][],double[][],double[][])" : 3}},{ "className" : "cern::colt::buffer::DoubleBuffer2D" , "selectors" : { "flush()" : 2}},{ "className" : "cern::colt::matrix::impl::AbstractMatrix3D" , "selectors" : { "_columnOffset(int)" : 5 , "_columnRank(int)" : 9 , "_rowOffset(int)" : 5 , "_rowRank(int)" : 9 , "_sliceOffset(int)" : 5 , "_sliceRank(int)" : 9 , "checkBox(int,int,int,int,int,int)" : 1 , "checkColumn(int)" : 7 , "checkColumnIndexes(int[])" : 2 , "checkRow(int)" : 7 , "checkRowIndexes(int[])" : 2 , "checkShape(AbstractMatrix3D)" : 10 , "checkSlice(int)" : 7 , "checkSliceIndexes(int[])" : 2 , "columns()" : 13 , "rows()" : 13 , "setUp(int,int,int)" : 8 , "setUp(int,int,int,int,int,int,int,int,int)" : 5 , "shape()" : 1 , "size()" : 8 , "slices()" : 21 , "toStringShort()" : 9 , "vColumnFlip()" : 2 , "vDice(int,int,int)" : 6 , "vPart(int,int,int,int,int,int)" : 2 , "vRowFlip()" : 2 , "vSliceFlip()" : 2 , "vStrides(int,int,int)" : 2}},{ "className" : "cern::colt::matrix::impl::AbstractMatrix2D" , "selectors" : { "_columnOffset(int)" : 3 , "_columnRank(int)" : 7 , "_rowOffset(int)" : 3 , "_rowRank(int)" : 7 , "checkBox(int,int,int,int)" : 2 , "checkColumn(int)" : 7 , "checkColumnIndexes(int[])" : 3 , "checkRow(int)" : 8 , "checkRowIndexes(int[])" : 3 , "checkShape(AbstractMatrix2D)" : 19 , "columns()" : 178 , "index(int,int)" : 4 , "rows()" : 193 , "setUp(int,int)" : 12 , "setUp(int,int,int,int,int,int)" : 9 , "size()" : 11 , "toStringShort()" : 46 , "vColumnFlip()" : 2 , "vDice()" : 6 , "vPart(int,int,int,int)" : 2 , "vRowFlip()" : 2 , "vStrides(int,int)" : 2}},{ "className" : "cern::colt::matrix::objectalgo::Sorting" , "selectors" : { "Sorting()" : 1 , "runSort(int[],int,int,IntComparator)" : 6 , "sort(ObjectMatrix1D)" : 1 , "sort(ObjectMatrix2D,int)" : 1 , "sort(ObjectMatrix3D,int,int)" : 1}},{ "className" : "hep::aida::bin::AbstractBin1D" , "selectors" : { "add(double)" : 1 , "addAllOf(DoubleArrayList)" : 4 , "addAllOfFromTo(DoubleArrayList,int,int)" : 1 , "buffered(int)" : 3 , "compareWith(AbstractBin1D)" : 1 , "equals(Object)" : 2 , "max()" : 5 , "mean()" : 10 , "min()" : 5 , "relError(double,double)" : 18 , "rms()" : 4 , "standardDeviation()" : 8 , "standardError()" : 3 , "sum()" : 7 , "sumOfSquares()" : 7 , "toString()" : 1 , "variance()" : 5}},{ "className" : "cern::jet::random::Exponential" , "selectors" : { "Exponential(double,RandomEngine)" : 1 , "nextDouble(double)" : 2 , "setState(double)" : 1}},{ "className" : "cern::colt::function::IntFunction" , "selectors" : { "apply(int)" : 5}},{ "className" : "cern::colt::map::AbstractDoubleIntMap" , "selectors" : { "containsKey(double)" : 2 , "forEachKey(DoubleProcedure)" : 4 , "forEachPair(DoubleIntProcedure)" : 5 , "get(double)" : 8 , "keys()" : 1 , "keys(DoubleArrayList)" : 3 , "keysSortedByValue(DoubleArrayList)" : 1 , "pairsSortedByValue(DoubleArrayList,IntArrayList)" : 1 , "put(double,int)" : 1 , "values(IntArrayList)" : 2}},{ "className" : "cern::colt::matrix::DoubleFactory2D" , "selectors" : { "DoubleFactory2D()" : 3 , "appendColumns(DoubleMatrix2D,DoubleMatrix2D)" : 1 , "appendRows(DoubleMatrix2D,DoubleMatrix2D)" : 2 , "ascending(int,int)" : 28 , "checkRectangularShape(DoubleMatrix2D[][])" : 2 , "compose(DoubleMatrix2D[][])" : 4 , "decompose(DoubleMatrix2D[][],DoubleMatrix2D)" : 1 , "descending(int,int)" : 3 , "identity(int)" : 10 , "make(double[][])" : 30 , "make(int,int)" : 27 , "make(int,int,double)" : 17 , "make1D(int)" : 1 , "repeat(DoubleMatrix2D,int,int)" : 1 , "sample(DoubleMatrix2D,double,double)" : 1 , "sample(int,int,double,double)" : 8}},{ "className" : "hep::aida::bin::BinBinFunction1D" , "selectors" : { "apply(DynamicBin1D,DynamicBin1D)" : 1}},{ "className" : "cern::colt::matrix::impl::SelectedSparseDoubleMatrix3D" , "selectors" : { "SelectedSparseDoubleMatrix3D(AbstractIntDoubleMap,int[],int[],int[],int)" : 2 , "_columnOffset(int)" : 1 , "_rowOffset(int)" : 1 , "_sliceOffset(int)" : 1 , "setUp(int,int,int)" : 1}},{ "className" : "cern::jet::random::AbstractDiscreteDistribution" , "selectors" : { "nextInt()" : 1}},{ "className" : "cern::colt::buffer::DoubleBufferConsumer" , "selectors" : { "addAllOf(DoubleArrayList)" : 2}},{ "className" : "cern::jet::random::Normal" , "selectors" : { "cern" : 2 , "nextDouble(double,double)" : 2 , "setRandomGenerator(RandomEngine)" : 2 , "setState(double,double)" : 1}},{ "className" : "cern::colt::list::ObjectArrayList" , "selectors" : { "ObjectArrayList()" : 5 , "ObjectArrayList(int)" : 8 , "add(Object)" : 115 , "addAllOfFromTo(ObjectArrayList,int,int)" : 1 , "beforeInsert(int,Object)" : 1 , "beforeInsertAllOfFromTo(int,ObjectArrayList,int,int)" : 1 , "beforeInsertDummies(int,int)" : 2 , "binarySearchFromTo(Object,int,int)" : 1 , "cern" : 13 , "clone()" : 1 , "elements()" : 7 , "elements(Object[])" : 1 , "ensureCapacity(int)" : 3 , "equals(Object,boolean)" : 1 , "fillFromToWith(int,int,Object)" : 3 , "get(int)" : 18 , "indexOf(Object,boolean)" : 1 , "indexOfFromTo(Object,int,int,boolean)" : 5 , "lastIndexOfFromTo(Object,int,int,boolean)" : 1 , "partFromTo(int,int)" : 2 , "quickSortFromTo(int,int,Comparator)" : 1 , "removeFromTo(int,int)" : 2 , "replaceFromToWithFrom(int,int,ObjectArrayList,int)" : 1 , "replaceFromToWithFromTo(int,int,ObjectArrayList,int,int)" : 1 , "reverse()" : 3 , "set(int,Object)" : 10 , "setQuick(int,Object)" : 3 , "size()" : 21 , "toArray(Object[])" : 2}},{ "className" : "cern::colt::matrix::impl::SparseDoubleMatrix1D" , "selectors" : { "SparseDoubleMatrix1D(double[])" : 1 , "SparseDoubleMatrix1D(int)" : 9 , "SparseDoubleMatrix1D(int,AbstractIntDoubleMap,int,int)" : 1 , "SparseDoubleMatrix1D(int,int,double,double)" : 1}},{ "className" : "hep::aida::IHistogram2D" , "selectors" : { "binEntries(int,int)" : 4 , "binError(int,int)" : 3 , "binHeight(int,int)" : 10 , "fill(double,double)" : 4 , "fill(double,double,double)" : 2 , "meanX()" : 1 , "meanY()" : 1 , "minMaxBins()" : 1 , "projectionX()" : 3 , "projectionY()" : 3 , "rmsX()" : 2 , "xAxis()" : 22 , "yAxis()" : 22}},{ "className" : "cern::colt::matrix::doublealgo::DoubleMatrix2DComparator" , "selectors" : { "compare(DoubleMatrix2D,DoubleMatrix2D)" : 1}},{ "className" : "cern::colt::GenericPermuting" , "selectors" : { "permute(int[],Swapper,int[],int[])" : 2}},{ "className" : "cern::jet::stat::quantile::DoubleBufferSet" , "selectors" : { "DoubleBufferSet(int,int)" : 1 , "_getFirstEmptyBuffer()" : 4 , "_getFullOrPartialBuffers()" : 3 , "_getFullOrPartialBuffersWithLevel(int)" : 3 , "_getMinLevelOfFullOrPartialBuffers()" : 3 , "_getNumberOfEmptyBuffers()" : 1 , "_getPartialBuffer()" : 1 , "b()" : 6 , "clear()" : 1 , "clear(int)" : 2 , "clone()" : 1 , "collapse(DoubleBuffer[])" : 1 , "contains(double)" : 1 , "forEach(DoubleProcedure)" : 1 , "getValuesAtPositions(DoubleBuffer[],long[])" : 2 , "k()" : 6 , "memory()" : 1 , "nextTriggerPosition(int,long)" : 1 , "phi(double)" : 1 , "totalSize()" : 3}},{ "className" : "cern::jet::random::StudentT" , "selectors" : { "StudentT(double,RandomEngine)" : 1 , "nextDouble(double)" : 2 , "setState(double)" : 1}},{ "className" : "cern::jet::math::Functions" , "selectors" : { "Functions()" : 1 , "between(double,double)" : 2 , "chain(DoubleDoubleFunction,DoubleFunction,DoubleFunction)" : 2 , "chain(DoubleFunction,DoubleDoubleFunction)" : 9 , "chain(DoubleFunction,DoubleFunction)" : 7 , "demo2(int)" : 1 , "div(double)" : 6 , "equals(double)" : 1 , "greater(double)" : 1 , "less(double)" : 1 , "minus(double)" : 5 , "minusMult(double)" : 5 , "mult(double)" : 21 , "plus(double)" : 20 , "plusMult(double)" : 10 , "pow(double)" : 3 , "random()" : 4 , "round(double)" : 1 , "swapArgs(DoubleDoubleFunction)" : 1}},{ "className" : "cern::colt::list::AbstractList" , "selectors" : { "beforeInsertAllOf(int,Collection)" : 1 , "beforeInsertDummies(int,int)" : 2 , "checkRange(int,int)" : 9 , "checkRangeFromTo(int,int,int)" : 164 , "clear()" : 67 , "mergeSortFromTo(int,int)" : 1 , "quickSort()" : 16 , "quickSortFromTo(int,int)" : 2 , "remove(int)" : 18 , "removeFromTo(int,int)" : 3 , "replaceFromWith(int,Collection)" : 1 , "setSize(int)" : 86 , "shuffle()" : 1 , "shuffleFromTo(int,int)" : 1 , "sort()" : 18 , "sortFromTo(int,int)" : 1}},{ "className" : "cern::colt::matrix::impl::SparseObjectMatrix1D" , "selectors" : { "SparseObjectMatrix1D(Object[])" : 1 , "SparseObjectMatrix1D(int)" : 6 , "SparseObjectMatrix1D(int,AbstractIntObjectMap,int,int)" : 1 , "SparseObjectMatrix1D(int,int,double,double)" : 1}},{ "className" : "cern::colt::matrix::linalg::Property" , "selectors" : { "Property(double)" : 5 , "blanks(int)" : 2 , "checkRectangular(DoubleMatrix2D)" : 5 , "checkSquare(DoubleMatrix2D)" : 13 , "density(DoubleMatrix2D)" : 1 , "equals(DoubleMatrix1D,DoubleMatrix1D)" : 1 , "equals(DoubleMatrix1D,double)" : 1 , "equals(DoubleMatrix2D,DoubleMatrix2D)" : 3 , "equals(DoubleMatrix2D,double)" : 2 , "equals(DoubleMatrix3D,DoubleMatrix3D)" : 1 , "equals(DoubleMatrix3D,double)" : 1 , "generateNonSingular(DoubleMatrix2D)" : 7 , "get(ObjectArrayList,int)" : 4 , "isDiagonal(DoubleMatrix2D)" : 2 , "isDiagonallyDominantByColumn(DoubleMatrix2D)" : 5 , "isDiagonallyDominantByRow(DoubleMatrix2D)" : 5 , "isIdentity(DoubleMatrix2D)" : 1 , "isLowerBidiagonal(DoubleMatrix2D)" : 1 , "isLowerTriangular(DoubleMatrix2D)" : 2 , "isNonNegative(DoubleMatrix2D)" : 1 , "isOrthogonal(DoubleMatrix2D)" : 1 , "isPositive(DoubleMatrix2D)" : 1 , "isSingular(DoubleMatrix2D)" : 1 , "isSkewSymmetric(DoubleMatrix2D)" : 1 , "isSquare(DoubleMatrix2D)" : 3 , "isStrictlyLowerTriangular(DoubleMatrix2D)" : 1 , "isStrictlyTriangular(DoubleMatrix2D)" : 1 , "isStrictlyUpperTriangular(DoubleMatrix2D)" : 1 , "isSymmetric(DoubleMatrix2D)" : 2 , "isTriangular(DoubleMatrix2D)" : 3 , "isTridiagonal(DoubleMatrix2D)" : 1 , "isUnitTriangular(DoubleMatrix2D)" : 1 , "isUpperBidiagonal(DoubleMatrix2D)" : 1 , "isUpperTriangular(DoubleMatrix2D)" : 2 , "isZero(DoubleMatrix2D)" : 1 , "lowerBandwidth(DoubleMatrix2D)" : 8 , "semiBandwidth(DoubleMatrix2D)" : 8 , "toString(DoubleMatrix2D)" : 1 , "tolerance()" : 28 , "upperBandwidth(DoubleMatrix2D)" : 8}},{ "className" : "cern::colt::map::AbstractIntDoubleMap" , "selectors" : { "assign(AbstractIntDoubleMap)" : 2 , "assign(DoubleFunction)" : 1 , "containsKey(int)" : 4 , "containsValue(double)" : 1 , "copy()" : 2 , "forEachKey(IntProcedure)" : 4 , "forEachPair(IntDoubleProcedure)" : 12 , "get(int)" : 15 , "keyOf(double)" : 1 , "keys()" : 1 , "keys(IntArrayList)" : 3 , "keysSortedByValue(IntArrayList)" : 1 , "pairsSortedByValue(IntArrayList,DoubleArrayList)" : 1 , "put(int,double)" : 12 , "removeKey(int)" : 6 , "values(DoubleArrayList)" : 2}},{ "className" : "cern::colt::matrix::DoubleFactory3D" , "selectors" : { "DoubleFactory3D()" : 2 , "ascending(int,int,int)" : 1 , "descending(int,int,int)" : 2 , "make(int,int,int)" : 4}},{ "className" : "cern::colt::matrix::ObjectMatrix2D" , "selectors" : { "assign(Object)" : 1 , "assign(ObjectMatrix2D)" : 16 , "assign(ObjectMatrix2D,ObjectObjectFunction)" : 1 , "assign(Object[][])" : 4 , "cardinality()" : 1 , "copy()" : 2 , "equals(Object,boolean)" : 1 , "getContent()" : 2 , "getQuick(int,int)" : 22 , "haveSharedCells(ObjectMatrix2D)" : 2 , "haveSharedCellsRaw(ObjectMatrix2D)" : 1 , "like()" : 1 , "like(int,int)" : 2 , "like1D(int)" : 1 , "like1D(int,int,int)" : 2 , "set(int,int,Object)" : 1 , "setQuick(int,int,Object)" : 8 , "view()" : 5 , "viewColumn(int)" : 8 , "viewPart(int,int,int,int)" : 19 , "viewRow(int)" : 5 , "viewSelection(int[],int[])" : 4 , "viewSelectionLike(int[],int[])" : 1}},{ "className" : "cern::colt::Partitioning" , "selectors" : { "binarySearchFromTo(int,int,int,IntComparator)" : 1 , "dualPartition(double[],double[],int,int,double)" : 1 , "dualPartition(double[],double[],int,int,double[],int,int,int[])" : 2 , "dualPartition(int[],int[],int,int,int)" : 1 , "dualPartition(int[],int[],int,int,int[],int,int,int[])" : 2 , "genericPartition(int,int,int,IntComparator,Swapper)" : 1 , "genericPartition(int,int,int,int,int[],IntComparator,IntComparator,IntComparator,Swapper)" : 4 , "med3(Object[],int,int,int,Comparator)" : 4 , "med3(double[],int,int,int)" : 12 , "med3(int,int,int,IntComparator)" : 4 , "med3(int[],int,int,int)" : 12 , "partition(Object[],int,int,Object,Comparator)" : 1 , "partition(Object[],int,int,Object[],int,int,int[],Comparator)" : 2 , "partition(double[],int,int,double)" : 1 , "partition(double[],int,int,double[],int,int,int[])" : 3 , "partition(int[],int,int,int)" : 1 , "partition(int[],int,int,int[],int,int,int[])" : 3 , "triplePartition(double[],double[],double[],int,int,double)" : 1 , "triplePartition(double[],double[],double[],int,int,double[],int,int,int[])" : 2 , "triplePartition(int[],int[],int[],int,int,int)" : 1 , "triplePartition(int[],int[],int[],int,int,int[],int,int,int[])" : 2}},{ "className" : "hep::aida::ref::AbstractHistogram3D" , "selectors" : { "AbstractHistogram3D(String)" : 1 , "allEntries()" : 1 , "entries()" : 1 , "internalSliceXY(String,int,int)" : 3 , "internalSliceXZ(String,int,int)" : 1 , "internalSliceYZ(String,int,int)" : 2 , "mapX(int)" : 9 , "mapY(int)" : 9 , "mapZ(int)" : 9 , "sliceXY(int,int)" : 1 , "sliceXZ(int,int)" : 1 , "sliceYZ(int,int)" : 1 , "sumAllBinHeights()" : 1 , "sumBinHeights()" : 1}},{ "className" : "cern::jet::random::HyperGeometric" , "selectors" : { "HyperGeometric(int,int,int,RandomEngine)" : 1 , "fc_lnpk(int,int,int,int)" : 8 , "hmdu(int,int,int,RandomEngine)" : 2 , "hprs(int,int,int,RandomEngine)" : 2 , "nextInt(int,int,int)" : 1 , "nextInt(int,int,int,RandomEngine)" : 2 , "setState(int,int,int)" : 1}},{ "className" : "cern::jet::random::PoissonSlow" , "selectors" : { "PoissonSlow(double,RandomEngine)" : 1 , "logGamma(double)" : 2 , "nextInt()" : 1 , "nextInt(double)" : 1 , "setMean(double)" : 2}},{ "className" : "cern::jet::random::engine::MersenneTwister64" , "selectors" : { "MersenneTwister64()" : 1}},{ "className" : "cern::jet::math::Mult" , "selectors" : { "Mult(double)" : 2 , "div(double)" : 1 , "mult(double)" : 2}},{ "className" : "cern::colt::map::AbstractIntObjectMap" , "selectors" : { "containsKey(int)" : 2 , "forEachKey(IntProcedure)" : 4 , "forEachPair(IntObjectProcedure)" : 5 , "get(int)" : 13 , "keys()" : 1 , "keys(IntArrayList)" : 3 , "keysSortedByValue(IntArrayList)" : 1 , "pairsSortedByValue(IntArrayList,ObjectArrayList)" : 1 , "put(int,Object)" : 6 , "removeKey(int)" : 6 , "values(ObjectArrayList)" : 2}},{ "className" : "hep::aida::bin::DynamicBin1D" , "selectors" : { "DynamicBin1D()" : 10 , "add(double)" : 4 , "addAllOfFromTo(DoubleArrayList,int,int)" : 1 , "clear()" : 5 , "clearAllMeasures()" : 2 , "covariance(DynamicBin1D)" : 1 , "elements_unsafe()" : 1 , "frequencies(DoubleArrayList,IntArrayList)" : 2 , "includes(double[],double[],int,int,int,int)" : 2 , "invalidateAll()" : 5 , "max()" : 2 , "min()" : 1 , "quantile(double)" : 3 , "sample(int,boolean,RandomEngine,DoubleBuffer)" : 2 , "size()" : 16 , "sort()" : 1 , "sortedElements()" : 1 , "sortedElements_unsafe()" : 8 , "sum()" : 3 , "sumOfLogarithms()" : 1 , "updateIncrementalStats()" : 5 , "updateSumOfInversions()" : 1 , "updateSumOfLogarithms()" : 1 , "validateAll()" : 1}},{ "className" : "cern::jet::random::Beta" , "selectors" : { "Beta(double,double,RandomEngine)" : 1 , "b00(double,double,RandomEngine)" : 1 , "b01(double,double,RandomEngine)" : 2 , "b1prs(double,double,RandomEngine)" : 1 , "f(double,double,double,double)" : 6 , "nextDouble(double,double)" : 2 , "setState(double,double)" : 1}},{ "className" : "cern::colt::matrix::linalg::SeqBlas" , "selectors" : { "SeqBlas()" : 1 , "sign(double,double)" : 1}},{ "className" : "cern::colt::matrix::impl::TestMatrix2D" , "selectors" : { "doubleTest30(int,int)" : 1 , "solve(int,double[],double[])" : 2}},{ "className" : "cern::colt::matrix::linalg::Matrix2DMatrix2DFunction" , "selectors" : { "apply(DoubleMatrix2D,DoubleMatrix2D)" : 3}},{ "className" : "cern::colt::list::adapter::IntListAdapter" , "selectors" : { "get(int)" : 2 , "object(int)" : 1 , "value(Object)" : 2}},{ "className" : "hep::aida::ref::AbstractHistogram2D" , "selectors" : { "AbstractHistogram2D(String)" : 1 , "allEntries()" : 1 , "entries()" : 1 , "internalSliceX(String,int,int)" : 3 , "internalSliceY(String,int,int)" : 3 , "mapX(int)" : 10 , "mapY(int)" : 10 , "projectionX()" : 2 , "projectionY()" : 2 , "sumAllBinHeights()" : 1 , "sumBinHeights()" : 1}},{ "className" : "cern::jet::stat::quantile::Buffer" , "selectors" : { "Buffer(int)" : 1 , "isAllocated()" : 1 , "isEmpty()" : 1 , "isFull()" : 1 , "isPartial()" : 1 , "level()" : 10 , "level(int)" : 5 , "weight()" : 5 , "weight(int)" : 3}},{ "className" : "cern::colt::matrix::impl::RCDoubleMatrix2D" , "selectors" : { "RCDoubleMatrix2D(int,int)" : 3 , "assign(double)" : 3 , "getQuick(int,int)" : 1 , "insert(int,int,int,double)" : 1 , "remove(int,int)" : 3 , "setQuick(int,int,double)" : 2}},{ "className" : "cern::colt::matrix::objectalgo::ObjectMatrix1DComparator" , "selectors" : { "compare(ObjectMatrix1D,ObjectMatrix1D)" : 1}},{ "className" : "cern::jet::stat::quantile::KnownDoubleQuantileEstimator" , "selectors" : { "KnownDoubleQuantileEstimator(int,int,long,double,RandomEngine)" : 2 , "addInfinities(int,DoubleBuffer)" : 1 , "clear()" : 1 , "removeInfinitiesFrom(int,DoubleBuffer)" : 1}},{ "className" : "cern::colt::map::OpenIntObjectHashMap" , "selectors" : { "OpenIntObjectHashMap(int)" : 1 , "OpenIntObjectHashMap(int,double,double)" : 4 , "indexOfInsertion(int)" : 2 , "indexOfKey(int)" : 3 , "indexOfValue(Object)" : 2 , "put(int,Object)" : 1 , "rehash(int)" : 5 , "setUp(int,double,double)" : 1 , "trimToSize()" : 1}},{ "className" : "cern::colt::function::DoubleComparator" , "selectors" : { "compare(double,double)" : 10}},{ "className" : "hep::aida::ref::FixedAxis" , "selectors" : { "FixedAxis(int,double,double)" : 6 , "upperEdge()" : 1}},{ "className" : "cern::colt::bitvector::QuickBitVector" , "selectors" : { "bitMaskWithBitsSetFromTo(int,int)" : 7 , "clear(long[],int)" : 4 , "get(long[],int)" : 6 , "getLongFromTo(long[],int,int)" : 5 , "makeBitVector(int,int)" : 3 , "mostSignificantBit(int)" : 1 , "offset(int)" : 6 , "precomputePows()" : 1 , "put(long[],int,boolean)" : 2 , "putLongFromTo(long[],long,int,int)" : 9 , "set(long[],int)" : 4 , "unit(int)" : 6}},{ "className" : "cern::colt::function::IntIntFunction" , "selectors" : { "apply(int,int)" : 5}},{ "className" : "hep::aida::ref::VariableAxis" , "selectors" : { "VariableAxis(double[])" : 14 , "binLowerEdge(int)" : 2 , "binUpperEdge(int)" : 2 , "lowerEdge()" : 1 , "upperEdge()" : 1}},{ "className" : "cern::colt::map::OpenIntDoubleHashMap" , "selectors" : { "OpenIntDoubleHashMap(int)" : 1 , "OpenIntDoubleHashMap(int,double,double)" : 5 , "clear()" : 1 , "indexOfInsertion(int)" : 2 , "indexOfKey(int)" : 3 , "indexOfValue(double)" : 2 , "put(int,double)" : 1 , "rehash(int)" : 5 , "setUp(int,double,double)" : 1 , "trimToSize()" : 1}},{ "className" : "cern::colt::map::OpenDoubleIntHashMap" , "selectors" : { "cern" : 3 , "indexOfInsertion(double)" : 2 , "indexOfKey(double)" : 3 , "indexOfValue(int)" : 2 , "put(double,int)" : 1 , "rehash(int)" : 5 , "setUp(int,double,double)" : 1 , "trimToSize()" : 1}},{ "className" : "hep::aida::ref::Converter" , "selectors" : { "Converter()" : 4 , "edges(IAxis)" : 2 , "form(Former,double)" : 48 , "toArrayHeights(IHistogram1D)" : 1 , "toArrayHeights(IHistogram2D)" : 1 , "toArrayHeights(IHistogram3D)" : 1 , "toString(IHistogram1D)" : 1 , "toString(IHistogram2D)" : 1 , "toString(IHistogram3D)" : 1 , "toString(double[])" : 1}},{ "className" : "cern::colt::list::CharArrayList" , "selectors" : { "CharArrayList(char[])" : 4 , "CharArrayList(int)" : 4 , "binarySearchFromTo(char,int,int)" : 2 , "clone()" : 1 , "countSortFromTo(int,int,char,char)" : 1 , "elements()" : 2 , "elements(char[])" : 1 , "ensureCapacity(int)" : 2}},{ "className" : "hep::aida::bin::BinFunction1D" , "selectors" : { "apply(DynamicBin1D)" : 1 , "name()" : 2}},{ "className" : "cern::colt::list::AbstractLongList" , "selectors" : { "AbstractLongList()" : 1 , "addAllOfFromTo(AbstractLongList,int,int)" : 3 , "beforeInsert(int,long)" : 2 , "beforeInsertAllOfFromTo(int,AbstractLongList,int,int)" : 1 , "beforeInsertDummies(int,int)" : 3 , "binarySearchFromTo(long,int,int)" : 1 , "clone()" : 2 , "elements()" : 5 , "elements(long[])" : 6 , "ensureCapacity(int)" : 1 , "equals(Object)" : 1 , "fillFromToWith(int,int,long)" : 1 , "get(int)" : 4 , "getQuick(int)" : 16 , "indexOfFromTo(long,int,int)" : 7 , "lastIndexOfFromTo(long,int,int)" : 1 , "partFromTo(int,int)" : 3 , "quickSortFromTo(int,int)" : 1 , "removeAll(AbstractLongList)" : 1 , "removeFromTo(int,int)" : 2 , "replaceFromToWithFrom(int,int,AbstractLongList,int)" : 5 , "replaceFromToWithFromTo(int,int,AbstractLongList,int,int)" : 1 , "retainAll(AbstractLongList)" : 1 , "set(int,long)" : 3 , "setQuick(int,long)" : 10 , "setSizeRaw(int)" : 10 , "size()" : 43}},{ "className" : "cern::jet::random::sampling::RandomSampler" , "selectors" : { "RandomSampler(long,long,long,RandomEngine)" : 2 , "clone()" : 1 , "nextBlock(int,long[],int)" : 3 , "rejectMethodD(long,long,int,long,long[],int,RandomEngine)" : 1 , "sample(long,long,int,long,long[],int,RandomEngine)" : 7 , "sampleMethodA(long,long,int,long,long[],int,RandomEngine)" : 1 , "sampleMethodD(long,long,int,long,long[],int,RandomEngine)" : 1 , "test(long,long,long,int,int)" : 1}},{ "className" : "cern::colt::map::AbstractMap" , "selectors" : { "chooseGrowCapacity(int,double,double)" : 12 , "chooseHighWaterMark(int,double)" : 11 , "chooseLowWaterMark(int,double)" : 6 , "chooseShrinkCapacity(int,double,double)" : 5 , "clear()" : 4 , "ensureCapacity(int)" : 6 , "nextPrime(int)" : 18 , "setUp(int,double,double)" : 5 , "size()" : 36 , "trimToSize()" : 6}},{ "className" : "cern::jet::stat::Descriptive" , "selectors" : { "checkRangeFromTo(int,int,int)" : 2 , "covariance(DoubleArrayList,DoubleArrayList)" : 1 , "frequencies(DoubleArrayList,DoubleArrayList,IntArrayList)" : 6 , "geometricMean(int,double)" : 2 , "harmonicMean(int,double)" : 1 , "incrementalUpdate(DoubleArrayList,int,int,double[])" : 2 , "incrementalUpdateSumsOfPowers(DoubleArrayList,int,int,int,int,double[])" : 1 , "kurtosis(double,double)" : 2 , "mean(DoubleArrayList)" : 2 , "moment(DoubleArrayList,int,double)" : 5 , "moment(int,double,int,double[])" : 1 , "product(int,double)" : 1 , "quantile(DoubleArrayList,double)" : 3 , "quantileInverse(DoubleArrayList,double)" : 1 , "quantiles(DoubleArrayList,DoubleArrayList)" : 2 , "rankInterpolated(DoubleArrayList,double)" : 4 , "rms(int,double)" : 1 , "sampleKurtosis(int,double,double)" : 1 , "sampleSkew(int,double,double)" : 1 , "sampleVariance(int,double,double)" : 1 , "skew(double,double)" : 2 , "standardError(int,double)" : 1 , "standardize(DoubleArrayList,double,double)" : 1 , "sum(DoubleArrayList)" : 1 , "sumOfInversions(DoubleArrayList,int,int)" : 2 , "sumOfLogarithms(DoubleArrayList,int,int)" : 3 , "sumOfPowerDeviations(DoubleArrayList,int,double)" : 4 , "sumOfPowerDeviations(DoubleArrayList,int,double,int,int)" : 3 , "sumOfPowers(DoubleArrayList,int)" : 1 , "trimmedMean(DoubleArrayList,double,int,int)" : 1}},{ "className" : "cern::colt::buffer::DoubleBuffer3D" , "selectors" : { "flush()" : 2}},{ "className" : "cern::colt::list::AbstractIntList" , "selectors" : { "addAllOfFromTo(AbstractIntList,int,int)" : 4 , "beforeInsert(int,int)" : 2 , "beforeInsertAllOfFromTo(int,AbstractIntList,int,int)" : 1 , "beforeInsertDummies(int,int)" : 3 , "binarySearch(int)" : 4 , "binarySearchFromTo(int,int,int)" : 1 , "clone()" : 2 , "elements()" : 5 , "elements(int[])" : 4 , "ensureCapacity(int)" : 1 , "equals(Object)" : 1 , "fillFromToWith(int,int,int)" : 1 , "get(int)" : 4 , "getQuick(int)" : 16 , "indexOfFromTo(int,int,int)" : 7 , "lastIndexOfFromTo(int,int,int)" : 1 , "partFromTo(int,int)" : 3 , "quickSortFromTo(int,int)" : 1 , "removeAll(AbstractIntList)" : 1 , "removeFromTo(int,int)" : 1 , "replaceFromToWithFrom(int,int,AbstractIntList,int)" : 5 , "replaceFromToWithFromTo(int,int,AbstractIntList,int,int)" : 1 , "retainAll(AbstractIntList)" : 1 , "set(int,int)" : 3 , "setQuick(int,int)" : 10 , "setSizeRaw(int)" : 8 , "size()" : 68 , "toString()" : 1}},{ "className" : "hep::aida::ref::AbstractHistogram1D" , "selectors" : { "AbstractHistogram1D(String)" : 1 , "entries()" : 1 , "extraEntries()" : 1 , "map(int)" : 5 , "sumBinHeights()" : 1 , "sumExtraBinHeights()" : 1}},{ "className" : "cern::colt::function::Double27Function" , "selectors" : { "apply(double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double)" : 2}},{ "className" : "cern::jet::stat::quantile::UnknownDoubleQuantileEstimator" , "selectors" : { "UnknownDoubleQuantileEstimator(int,int,int,double,RandomEngine)" : 2 , "clear()" : 1 , "sortAscendingByLevel(DoubleBuffer[])" : 1}},{ "className" : "cern::colt::matrix::impl::SelectedDenseObjectMatrix3D" , "selectors" : { "SelectedDenseObjectMatrix3D(Object[],int[],int[],int[],int)" : 2 , "_columnOffset(int)" : 1 , "_rowOffset(int)" : 1 , "_sliceOffset(int)" : 1 , "setUp(int,int,int)" : 1}},{ "className" : "cern::colt::matrix::impl::DenseObjectMatrix1D" , "selectors" : { "DenseObjectMatrix1D(Object[])" : 1 , "DenseObjectMatrix1D(int)" : 6 , "DenseObjectMatrix1D(int,Object[],int,int)" : 1 , "assign(Object[])" : 1 , "index(int)" : 7}},{ "className" : "hep::aida::ref::Histogram" , "selectors" : { "Histogram(String)" : 3 , "title()" : 12}},{ "className" : "cern::colt::matrix::ObjectMatrix1D" , "selectors" : { "assign(Object)" : 3 , "assign(ObjectMatrix1D)" : 8 , "assign(ObjectMatrix1D,ObjectObjectFunction)" : 1 , "assign(Object[])" : 6 , "cardinality()" : 1 , "copy()" : 2 , "equals(Object,boolean)" : 1 , "get(int)" : 2 , "getContent()" : 2 , "getQuick(int)" : 36 , "haveSharedCells(ObjectMatrix1D)" : 2 , "haveSharedCellsRaw(ObjectMatrix1D)" : 1 , "like()" : 1 , "like(int)" : 1 , "like2D(int,int)" : 1 , "set(int,Object)" : 1 , "setQuick(int,Object)" : 9 , "swap(ObjectMatrix1D)" : 1 , "toArray(Object[])" : 2 , "view()" : 3 , "viewPart(int,int)" : 8 , "viewSelection(int[])" : 3 , "viewSelectionLike(int[])" : 1}},{ "className" : "cern::colt::matrix::linalg::SmpBlas" , "selectors" : { "SmpBlas(int,Blas)" : 1 , "allocateBlas(int,Blas)" : 4 , "dgemm(boolean,boolean,double,DoubleMatrix2D,DoubleMatrix2D,double,DoubleMatrix2D)" : 2 , "dgemv(boolean,double,DoubleMatrix2D,DoubleMatrix1D,double,DoubleMatrix1D)" : 1 , "run(DoubleMatrix2D,DoubleMatrix2D,boolean,Matrix2DMatrix2DFunction)" : 1 , "run(DoubleMatrix2D,boolean,Matrix2DMatrix2DFunction)" : 2}},{ "className" : "cern::colt::Version" , "selectors" : { "asString()" : 2 , "getBuildTime()" : 1 , "getBuildVersion()" : 1 , "getMajorVersion()" : 1 , "getMicroVersion()" : 1 , "getMinorVersion()" : 1 , "getPackage()" : 4 , "numbers()" : 4}},{ "className" : "cern::colt::matrix::impl::SelectedDenseObjectMatrix2D" , "selectors" : { "SelectedDenseObjectMatrix2D(Object[],int[],int[],int)" : 2 , "SelectedDenseObjectMatrix2D(int,int,Object[],int,int,int,int,int[],int[],int)" : 4 , "_columnOffset(int)" : 1 , "_rowOffset(int)" : 1}},{ "className" : "hep::aida::ref::Histogram3D" , "selectors" : { "Histogram3D(String,IAxis,IAxis,IAxis)" : 3 , "Histogram3D(String,int,double,double,int,double,double,int,double,double)" : 1}},{ "className" : "cern::colt::matrix::ObjectMatrix3D" , "selectors" : { "assign(Object)" : 1 , "assign(ObjectMatrix3D)" : 4 , "assign(Object[][][])" : 2 , "cardinality()" : 1 , "copy()" : 2 , "equals(Object,boolean)" : 1 , "getContent()" : 2 , "getQuick(int,int,int)" : 21 , "haveSharedCells(ObjectMatrix3D)" : 2 , "haveSharedCellsRaw(ObjectMatrix3D)" : 1 , "like()" : 1 , "like(int,int,int)" : 1 , "like2D(int,int,int,int,int,int)" : 3 , "setQuick(int,int,int,Object)" : 6 , "view()" : 6 , "viewRow(int)" : 1 , "viewSelection(int[],int[],int[])" : 3 , "viewSelectionLike(int[],int[],int[])" : 1 , "viewSlice(int)" : 4}},{ "className" : "hep::aida::ref::Test" , "selectors" : { "writeAsXML(IHistogram1D,String)" : 3 , "writeAsXML(IHistogram2D,String)" : 1}},{ "className" : "cern::colt::matrix::objectalgo::ObjectMatrix2DComparator" , "selectors" : { "compare(ObjectMatrix2D,ObjectMatrix2D)" : 1}},{ "className" : "cern::jet::math::IntFunctions" , "selectors" : { "IntFunctions()" : 1}},{ "className" : "cern::colt::list::AbstractDoubleList" , "selectors" : { "addAllOfFromTo(AbstractDoubleList,int,int)" : 11 , "beforeInsert(int,double)" : 2 , "beforeInsertAllOfFromTo(int,AbstractDoubleList,int,int)" : 1 , "beforeInsertDummies(int,int)" : 3 , "binarySearch(double)" : 4 , "binarySearchFromTo(double,int,int)" : 1 , "clone()" : 2 , "contains(double)" : 1 , "elements()" : 5 , "elements(double[])" : 4 , "ensureCapacity(int)" : 1 , "equals(Object)" : 1 , "get(int)" : 5 , "getQuick(int)" : 16 , "indexOfFromTo(double,int,int)" : 7 , "lastIndexOfFromTo(double,int,int)" : 1 , "partFromTo(int,int)" : 3 , "removeAll(AbstractDoubleList)" : 1 , "removeFromTo(int,int)" : 3 , "replaceFromToWithFrom(int,int,AbstractDoubleList,int)" : 5 , "replaceFromToWithFromTo(int,int,AbstractDoubleList,int,int)" : 1 , "retainAll(AbstractDoubleList)" : 1 , "set(int,double)" : 3 , "setQuick(int,double)" : 10 , "setSizeRaw(int)" : 8 , "size()" : 121}},{ "className" : "cern::colt::function::ObjectProcedure" , "selectors" : { "apply(Object)" : 5}},{ "className" : "cern::colt::list::DoubleArrayList" , "selectors" : { "DoubleArrayList()" : 8 , "DoubleArrayList(double[])" : 29 , "DoubleArrayList(int)" : 18 , "add(double)" : 32 , "beforeInsert(int,double)" : 3 , "binarySearchFromTo(double,int,int)" : 3 , "clone()" : 1 , "copy()" : 8 , "elements()" : 57 , "elements(double[])" : 2 , "ensureCapacity(int)" : 3 , "forEach(DoubleProcedure)" : 1 , "get(int)" : 26 , "getQuick(int)" : 12 , "removeAll(AbstractDoubleList)" : 2 , "replaceFromToWithFrom(int,int,AbstractDoubleList,int)" : 1 , "set(int,double)" : 4 , "setQuick(int,double)" : 3 , "trimToSize()" : 10}},{ "className" : "cern::colt::function::IntDoubleProcedure" , "selectors" : { "apply(int,double)" : 4}},{ "className" : "cern::colt::matrix::linalg::CholeskyDecomposition" , "selectors" : { "CholeskyDecomposition(DoubleMatrix2D)" : 2 , "getL()" : 1 , "isSymmetricPositiveDefinite()" : 1 , "solve(DoubleMatrix2D)" : 1 , "toString()" : 1}},{ "className" : "cern::colt::matrix::impl::SparseDoubleMatrix3D" , "selectors" : { "SparseDoubleMatrix3D(double[][][])" : 1 , "SparseDoubleMatrix3D(int,int,int)" : 4 , "SparseDoubleMatrix3D(int,int,int,int,double,double)" : 1}},{ "className" : "cern::colt::matrix::linalg::Algebra" , "selectors" : { "Algebra()" : 3 , "Algebra(double)" : 3 , "cond(DoubleMatrix2D)" : 1 , "det(DoubleMatrix2D)" : 2 , "hypot(double,double)" : 10 , "hypotFunction()" : 2 , "inverse(DoubleMatrix2D)" : 7 , "lu(DoubleMatrix2D)" : 2 , "mult(DoubleMatrix1D,DoubleMatrix1D)" : 1 , "mult(DoubleMatrix2D,DoubleMatrix2D)" : 5 , "multOuter(DoubleMatrix1D,DoubleMatrix1D,DoubleMatrix2D)" : 1 , "norm1(DoubleMatrix1D)" : 2 , "norm1(DoubleMatrix2D)" : 1 , "norm2(DoubleMatrix1D)" : 1 , "norm2(DoubleMatrix2D)" : 1 , "normF(DoubleMatrix2D)" : 1 , "normInfinity(DoubleMatrix1D)" : 3 , "normInfinity(DoubleMatrix2D)" : 1 , "permute(DoubleMatrix1D,int[],double[])" : 2 , "permuteRows(DoubleMatrix2D,int[],int[])" : 3 , "pow(DoubleMatrix2D,int)" : 1 , "property()" : 5 , "qr(DoubleMatrix2D)" : 1 , "rank(DoubleMatrix2D)" : 1 , "setProperty(Property)" : 1 , "solve(DoubleMatrix2D,DoubleMatrix2D)" : 3 , "svd(DoubleMatrix2D)" : 3 , "toString(DoubleMatrix2D)" : 1 , "toVerboseString(DoubleMatrix2D)" : 3 , "trace(DoubleMatrix2D)" : 1 , "transpose(DoubleMatrix2D)" : 3 , "trapezoidalLower(DoubleMatrix2D)" : 1}},{ "className" : "cern::colt::map::AbstractLongObjectMap" , "selectors" : { "containsKey(long)" : 2 , "forEachKey(LongProcedure)" : 4 , "forEachPair(LongObjectProcedure)" : 5 , "get(long)" : 7 , "keys()" : 1 , "keys(LongArrayList)" : 3 , "keysSortedByValue(LongArrayList)" : 1 , "pairsSortedByValue(LongArrayList,ObjectArrayList)" : 1 , "values(ObjectArrayList)" : 2}},{ "className" : "cern::jet::random::EmpiricalWalker" , "selectors" : { "setState(double[],int)" : 1 , "setState2(double[])" : 1}},{ "className" : "cern::colt::buffer::IntBuffer3DConsumer" , "selectors" : { "addAllOf(IntArrayList,IntArrayList,IntArrayList)" : 2}},{ "className" : "cern::jet::math::Arithmetic" , "selectors" : { "binomial(long,long)" : 25 , "chbevl(double,double[],int)" : 16 , "factorial(int)" : 4 , "floor(double)" : 2 , "log(double,double)" : 1 , "log2(double)" : 16 , "logFactorial(int)" : 20 , "longFactorial(int)" : 3 , "stirlingCorrection(int)" : 4}},{ "className" : "cern::colt::matrix::impl::SelectedSparseObjectMatrix3D" , "selectors" : { "SelectedSparseObjectMatrix3D(AbstractIntObjectMap,int[],int[],int[],int)" : 2 , "_columnOffset(int)" : 1 , "_rowOffset(int)" : 1 , "_sliceOffset(int)" : 1 , "setUp(int,int,int)" : 1}},{ "className" : "cern::jet::math::Bessel" , "selectors" : { "i0(double)" : 2 , "i1(double)" : 2 , "j0(double)" : 3 , "j1(double)" : 3 , "y0(double)" : 2 , "y1(double)" : 2}},{ "className" : "cern::jet::random::Fun" , "selectors" : { "_fkt_value(double,double,double,double)" : 6 , "cosh(double)" : 2 , "factorial(int)" : 2 , "fkt2_value(double,double,double)" : 5 , "gamma(double)" : 2 , "logGamma(double)" : 8}},{ "className" : "cern::jet::stat::Probability" , "selectors" : { "beta(double,double,double)" : 1 , "binomial(int,int,double)" : 1 , "chiSquare(double,double)" : 1 , "errorFunction(double)" : 4 , "errorFunctionComplemented(double)" : 2 , "gamma(double,double,double)" : 1 , "negativeBinomial(int,int,double)" : 1 , "normal(double,double,double)" : 1 , "normalInverse(double)" : 1 , "poisson(int,double)" : 1 , "studentT(double,double)" : 4}},{ "className" : "cern::colt::list::BooleanArrayList" , "selectors" : { "BooleanArrayList(boolean[])" : 4 , "BooleanArrayList(int)" : 4 , "clone()" : 1 , "countSortFromTo(int,int)" : 3 , "elements()" : 4 , "elements(boolean[])" : 1 , "ensureCapacity(int)" : 2}},{ "className" : "corejava::Format" , "selectors" : { "Format(String)" : 6 , "atol(String)" : 1 , "convert(long,int,int,String)" : 3 , "expFormat(double)" : 3 , "fixedFormat(double)" : 3 , "format(String)" : 1 , "format(char)" : 1 , "format(double)" : 2 , "format(int)" : 1 , "format(long)" : 2 , "pad(String)" : 4 , "parseLong(String,int)" : 4 , "printf(String,String)" : 2 , "printf(String,char)" : 1 , "printf(String,double)" : 38 , "printf(String,int)" : 18 , "printf(String,long)" : 1 , "repeat(char,int)" : 2 , "sign(int,String)" : 2}},{ "className" : "cern::colt::matrix::doublealgo::Transform" , "selectors" : { "Transform()" : 1 , "mult(DoubleMatrix2D,double)" : 5}},{ "className" : "cern::colt::bitvector::BitVector" , "selectors" : { "BitVector(int)" : 3 , "BitVector(long[],int)" : 4 , "and(BitVector)" : 1 , "andNot(BitVector)" : 1 , "cardinality()" : 1 , "checkRangeFromTo(int,int,int)" : 4 , "checkSize(BitVector)" : 4 , "clear()" : 1 , "clone()" : 1 , "copy()" : 1 , "elements()" : 3 , "elements(long[],int)" : 2 , "equals(Object)" : 1 , "forEachIndexFromToInState(int,int,boolean,IntProcedure)" : 1 , "get(int)" : 4 , "hashCode()" : 1 , "not()" : 1 , "numberOfBitsInPartialUnit()" : 3 , "numberOfFullUnits()" : 3 , "or(BitVector)" : 1 , "replaceFromToWith(int,int,BitVector,int)" : 3 , "replaceFromToWith(int,int,boolean)" : 1 , "setSize(int)" : 2 , "size()" : 8 , "toString()" : 1 , "xor(BitVector)" : 1}},{ "className" : "cern::colt::list::AbstractBooleanList" , "selectors" : { "addAllOfFromTo(AbstractBooleanList,int,int)" : 3 , "beforeInsert(int,boolean)" : 1 , "beforeInsertAllOfFromTo(int,AbstractBooleanList,int,int)" : 1 , "beforeInsertDummies(int,int)" : 3 , "binarySearchFromTo(boolean,int,int)" : 3 , "clone()" : 2 , "elements()" : 1 , "ensureCapacity(int)" : 1 , "equals(Object)" : 1 , "fillFromToWith(int,int,boolean)" : 2 , "get(int)" : 3 , "getQuick(int)" : 16 , "indexOfFromTo(boolean,int,int)" : 7 , "lastIndexOfFromTo(boolean,int,int)" : 1 , "partFromTo(int,int)" : 3 , "removeAll(AbstractBooleanList)" : 1 , "removeFromTo(int,int)" : 1 , "replaceFromToWithFrom(int,int,AbstractBooleanList,int)" : 5 , "replaceFromToWithFromTo(int,int,AbstractBooleanList,int,int)" : 1 , "retainAll(AbstractBooleanList)" : 1 , "set(int,boolean)" : 2 , "setQuick(int,boolean)" : 10 , "setSizeRaw(int)" : 4 , "size()" : 34 , "toInt(boolean)" : 3}},{ "className" : "cern::jet::random::ChiSquare" , "selectors" : { "ChiSquare(double,RandomEngine)" : 1 , "nextDouble(double)" : 2 , "setState(double)" : 1}},{ "className" : "cern::colt::map::OpenLongObjectHashMap" , "selectors" : { "OpenLongObjectHashMap(int)" : 1 , "OpenLongObjectHashMap(int,double,double)" : 1 , "indexOfInsertion(long)" : 2 , "indexOfKey(long)" : 3 , "indexOfValue(Object)" : 2 , "put(long,Object)" : 1 , "rehash(int)" : 5 , "setUp(int,double,double)" : 1 , "trimToSize()" : 1}},{ "className" : "cern::colt::matrix::impl::DenseObjectMatrix3D" , "selectors" : { "DenseObjectMatrix3D(Object[][][])" : 1 , "DenseObjectMatrix3D(int,int,int)" : 4 , "assign(Object[][][])" : 1}},{ "className" : "hep::aida::ref::Histogram1D" , "selectors" : { "Histogram1D(String,IAxis)" : 5 , "Histogram1D(String,int,double,double)" : 2 , "setContents(int[],double[],double[])" : 2}},{ "className" : "cern::colt::matrix::linalg::Blas" , "selectors" : { "assign(DoubleMatrix2D,DoubleFunction)" : 3 , "assign(DoubleMatrix2D,DoubleMatrix2D,DoubleDoubleFunction)" : 3 , "dasum(DoubleMatrix1D)" : 1 , "daxpy(double,DoubleMatrix1D,DoubleMatrix1D)" : 1 , "daxpy(double,DoubleMatrix2D,DoubleMatrix2D)" : 1 , "dcopy(DoubleMatrix1D,DoubleMatrix1D)" : 1 , "dcopy(DoubleMatrix2D,DoubleMatrix2D)" : 1 , "ddot(DoubleMatrix1D,DoubleMatrix1D)" : 1 , "dgemm(boolean,boolean,double,DoubleMatrix2D,DoubleMatrix2D,double,DoubleMatrix2D)" : 7 , "dgemv(boolean,double,DoubleMatrix2D,DoubleMatrix1D,double,DoubleMatrix1D)" : 3 , "dger(double,DoubleMatrix1D,DoubleMatrix1D,DoubleMatrix2D)" : 2 , "dnrm2(DoubleMatrix1D)" : 1 , "drot(DoubleMatrix1D,DoubleMatrix1D,double,double)" : 1 , "drotg(double,double,double[])" : 1 , "dscal(double,DoubleMatrix1D)" : 1 , "dscal(double,DoubleMatrix2D)" : 1 , "dswap(DoubleMatrix1D,DoubleMatrix1D)" : 1 , "dswap(DoubleMatrix2D,DoubleMatrix2D)" : 1 , "dsymv(boolean,double,DoubleMatrix2D,DoubleMatrix1D,double,DoubleMatrix1D)" : 1 , "dtrmv(boolean,boolean,boolean,DoubleMatrix2D,DoubleMatrix1D)" : 1 , "idamax(DoubleMatrix1D)" : 1}},{ "className" : "cern::colt::buffer::IntBufferConsumer" , "selectors" : { "addAllOf(IntArrayList)" : 2}},{ "className" : "hep::aida::bin::QuantileBin1D" , "selectors" : { "QuantileBin1D()" : 1 , "QuantileBin1D(boolean,long,double,double,int,RandomEngine)" : 1 , "QuantileBin1D(boolean,long,double,double,int,RandomEngine,boolean,boolean,int)" : 2 , "clear()" : 2 , "clone()" : 1 , "median()" : 4 , "quantile(double)" : 11 , "quantileInverse(double)" : 6 , "quantiles(DoubleArrayList)" : 2 , "splitApproximately(DoubleArrayList,int)" : 1 , "toString()" : 1}},{ "className" : "cern::colt::buffer::IntBuffer" , "selectors" : { "flush()" : 2}},{ "className" : "cern::colt::list::ByteArrayList" , "selectors" : { "ByteArrayList(byte[])" : 9 , "ByteArrayList(int)" : 4 , "binarySearchFromTo(byte,int,int)" : 2 , "clone()" : 1 , "countSortFromTo(int,int)" : 1 , "elements()" : 2 , "elements(byte[])" : 1 , "ensureCapacity(int)" : 2}},{ "className" : "cern::colt::matrix::doublealgo::Formatter" , "selectors" : { "cern" : 23 , "form(DoubleMatrix1D,int,Former)" : 1 , "format(DoubleMatrix2D)" : 4 , "indexOfDecimalPoint(String)" : 1 , "shape(AbstractMatrix2D)" : 6 , "toSourceCode(DoubleMatrix2D)" : 1 , "toString(DoubleMatrix1D)" : 4 , "toString(DoubleMatrix2D)" : 11 , "toString(DoubleMatrix3D)" : 2 , "toTitleString(DoubleMatrix2D,String[],String[],String,String,String)" : 5 , "toTitleString(DoubleMatrix2D,String[],String[],String,String,String,BinFunction1D[])" : 6 , "toTitleString(DoubleMatrix3D,String[],String[],String[],String,String,String,String,BinFunction1D[])" : 2}},{ "className" : "cern::colt::matrix::DoubleMatrix1DProcedure" , "selectors" : { "apply(DoubleMatrix1D)" : 1}},{ "className" : "cern::jet::random::Binomial" , "selectors" : { "Binomial(int,double,RandomEngine)" : 1 , "generateBinomial(int,double)" : 2 , "nextInt(int,double)" : 1 , "pdf(int)" : 1 , "setNandP(int,double)" : 1}},{ "className" : "cern::jet::random::engine::RandomEngine" , "selectors" : { "makeDefault()" : 1 , "nextDouble()" : 1 , "nextInt()" : 5 , "nextLong()" : 1 , "raw()" : 100}},{ "className" : "cern::jet::stat::quantile::DoubleQuantileFinder" , "selectors" : { "addAllOf(DoubleArrayList)" : 2 , "addAllOfFromTo(DoubleArrayList,int,int)" : 1 , "clear()" : 1 , "clone()" : 1 , "phi(double)" : 5 , "quantileElements(DoubleArrayList)" : 7 , "totalMemory()" : 1}},{ "className" : "cern::colt::matrix::linalg::LUDecomposition" , "selectors" : { "LUDecomposition(DoubleMatrix2D)" : 2 , "det()" : 1 , "solve(DoubleMatrix2D)" : 1 , "toString()" : 1}},{ "className" : "cern::colt::matrix::DoubleMatrix1D" , "selectors" : { "aggregate(DoubleDoubleFunction,DoubleFunction)" : 17 , "aggregate(DoubleMatrix1D,DoubleDoubleFunction,DoubleDoubleFunction)" : 9 , "assign(DoubleFunction)" : 28 , "assign(DoubleMatrix1D)" : 21 , "assign(DoubleMatrix1D,DoubleDoubleFunction)" : 26 , "assign(DoubleMatrix1D,DoubleDoubleFunction,IntArrayList)" : 2 , "assign(double)" : 6 , "assign(double[])" : 3 , "cardinality()" : 1 , "cardinality(int)" : 1 , "copy()" : 5 , "equals(Object)" : 1 , "get(int)" : 7 , "getContent()" : 2 , "getNonZeros(IntArrayList,DoubleArrayList,int)" : 3 , "getQuick(int)" : 84 , "haveSharedCells(DoubleMatrix1D)" : 2 , "haveSharedCellsRaw(DoubleMatrix1D)" : 1 , "like()" : 6 , "like(int)" : 4 , "like2D(int,int)" : 4 , "set(int,double)" : 11 , "setQuick(int,double)" : 28 , "swap(DoubleMatrix1D)" : 5 , "toArray()" : 4 , "toArray(double[])" : 10 , "view()" : 3 , "viewFlip()" : 1 , "viewPart(int,int)" : 13 , "viewSelection(DoubleProcedure)" : 1 , "viewSelection(int[])" : 5 , "viewSelectionLike(int[])" : 1 , "viewSorted()" : 2 , "zDotProduct(DoubleMatrix1D)" : 5 , "zDotProduct(DoubleMatrix1D,int,int)" : 4 , "zDotProduct(DoubleMatrix1D,int,int,IntArrayList)" : 2 , "zSum()" : 3}},{ "className" : "cern::colt::matrix::ObjectMatrix1DProcedure" , "selectors" : { "apply(ObjectMatrix1D)" : 1}},{ "className" : "cern::colt::matrix::bench::BenchmarkMatrix" , "selectors" : { "benchGeneric(Double2DProcedure,String[])" : 1 , "bench_dgemm(String[])" : 1 , "bench_dgemv(String[])" : 1 , "bench_pow(String[])" : 1 , "commands()" : 3 , "funAssign()" : 1 , "funAssignGetSet()" : 1 , "funAssignGetSetQuick()" : 1 , "funAssignLog()" : 1 , "funAssignPlusMult()" : 1 , "funElementwiseMult()" : 1 , "funElementwiseMultB()" : 1 , "funLUDecompose()" : 1 , "funLUSolve()" : 1 , "funSOR5()" : 1 , "funSOR8()" : 1 , "fun_dgemm(boolean,boolean)" : 2 , "fun_dgemv(boolean)" : 2 , "fun_pow(int)" : 2 , "getFactory(String)" : 1 , "getGenericFunction(String)" : 2 , "handle(String[])" : 2 , "run(double,String,Double2DProcedure,String[],int[],double[])" : 4 , "usage()" : 3 , "usage(String)" : 5}},{ "className" : "cern::colt::list::AbstractCharList" , "selectors" : { "addAllOfFromTo(AbstractCharList,int,int)" : 3 , "beforeInsert(int,char)" : 1 , "beforeInsertAllOfFromTo(int,AbstractCharList,int,int)" : 1 , "beforeInsertDummies(int,int)" : 3 , "binarySearchFromTo(char,int,int)" : 1 , "clone()" : 2 , "elements()" : 5 , "elements(char[])" : 4 , "ensureCapacity(int)" : 1 , "equals(Object)" : 1 , "fillFromToWith(int,int,char)" : 1 , "get(int)" : 3 , "getQuick(int)" : 16 , "indexOfFromTo(char,int,int)" : 7 , "lastIndexOfFromTo(char,int,int)" : 1 , "partFromTo(int,int)" : 3 , "quickSortFromTo(int,int)" : 1 , "removeAll(AbstractCharList)" : 1 , "removeFromTo(int,int)" : 1 , "replaceFromToWithFrom(int,int,AbstractCharList,int)" : 5 , "replaceFromToWithFromTo(int,int,AbstractCharList,int,int)" : 1 , "retainAll(AbstractCharList)" : 1 , "set(int,char)" : 2 , "setQuick(int,char)" : 10 , "setSizeRaw(int)" : 8 , "size()" : 36}},{ "className" : "cern::colt::function::CharProcedure" , "selectors" : { "apply(char)" : 2}},{ "className" : "cern::colt::matrix::DoubleMatrix3DProcedure" , "selectors" : { "apply(DoubleMatrix3D)" : 1}},{ "className" : "cern::colt::list::AbstractFloatList" , "selectors" : { "addAllOfFromTo(AbstractFloatList,int,int)" : 3 , "beforeInsert(int,float)" : 2 , "beforeInsertAllOfFromTo(int,AbstractFloatList,int,int)" : 1 , "beforeInsertDummies(int,int)" : 3 , "binarySearchFromTo(float,int,int)" : 1 , "clone()" : 2 , "elements()" : 5 , "elements(float[])" : 4 , "ensureCapacity(int)" : 1 , "equals(Object)" : 1 , "get(int)" : 4 , "getQuick(int)" : 16 , "indexOfFromTo(float,int,int)" : 7 , "lastIndexOfFromTo(float,int,int)" : 1 , "partFromTo(int,int)" : 3 , "removeAll(AbstractFloatList)" : 1 , "removeFromTo(int,int)" : 1 , "replaceFromToWithFrom(int,int,AbstractFloatList,int)" : 5 , "replaceFromToWithFromTo(int,int,AbstractFloatList,int,int)" : 1 , "retainAll(AbstractFloatList)" : 1 , "set(int,float)" : 3 , "setQuick(int,float)" : 10 , "setSizeRaw(int)" : 8 , "size()" : 37}},{ "className" : "cern::colt::matrix::DoubleMatrix3D" , "selectors" : { "aggregate(DoubleDoubleFunction,DoubleFunction)" : 2 , "aggregate(DoubleMatrix3D,DoubleDoubleFunction,DoubleDoubleFunction)" : 1 , "assign(DoubleFunction)" : 2 , "assign(DoubleMatrix3D)" : 4 , "assign(double)" : 2 , "assign(double[][][])" : 2 , "cardinality()" : 1 , "copy()" : 4 , "getContent()" : 2 , "getQuick(int,int,int)" : 45 , "haveSharedCells(DoubleMatrix3D)" : 2 , "haveSharedCellsRaw(DoubleMatrix3D)" : 1 , "like()" : 1 , "like(int,int,int)" : 1 , "like2D(int,int,int,int,int,int)" : 3 , "set(int,int,int,double)" : 1 , "setQuick(int,int,int,double)" : 8 , "view()" : 6 , "viewDice(int,int,int)" : 2 , "viewRow(int)" : 1 , "viewRowFlip()" : 1 , "viewSelection(int[],int[],int[])" : 4 , "viewSelectionLike(int[],int[],int[])" : 1 , "viewSlice(int)" : 5 , "viewSliceFlip()" : 1 , "zAssign27Neighbors(DoubleMatrix3D,Double27Function)" : 3}},{ "className" : "cern::colt::function::ByteProcedure" , "selectors" : { "apply(byte)" : 2}},{ "className" : "cern::colt::matrix::impl::DelegateDoubleMatrix1D" , "selectors" : { "DelegateDoubleMatrix1D(DoubleMatrix2D,int)" : 1}},{ "className" : "cern::colt::list::adapter::DoubleListAdapter" , "selectors" : { "get(int)" : 2 , "object(double)" : 1 , "value(Object)" : 2}},{ "className" : "cern::colt::list::AbstractByteList" , "selectors" : { "addAllOfFromTo(AbstractByteList,int,int)" : 3 , "beforeInsert(int,byte)" : 1 , "beforeInsertAllOfFromTo(int,AbstractByteList,int,int)" : 1 , "beforeInsertDummies(int,int)" : 3 , "binarySearchFromTo(byte,int,int)" : 1 , "clone()" : 2 , "elements()" : 5 , "elements(byte[])" : 4 , "ensureCapacity(int)" : 1 , "equals(Object)" : 1 , "fillFromToWith(int,int,byte)" : 7 , "get(int)" : 3 , "getQuick(int)" : 16 , "indexOfFromTo(byte,int,int)" : 7 , "lastIndexOfFromTo(byte,int,int)" : 1 , "partFromTo(int,int)" : 3 , "quickSortFromTo(int,int)" : 1 , "removeAll(AbstractByteList)" : 1 , "removeFromTo(int,int)" : 1 , "replaceFromToWithFrom(int,int,AbstractByteList,int)" : 5 , "replaceFromToWithFromTo(int,int,AbstractByteList,int,int)" : 1 , "retainAll(AbstractByteList)" : 1 , "set(int,byte)" : 2 , "setQuick(int,byte)" : 10 , "setSizeRaw(int)" : 8 , "size()" : 36}},{ "className" : "cern::jet::stat::quantile::DoubleQuantileEstimator" , "selectors" : { "addAllOfFromTo(DoubleArrayList,int,int)" : 1 , "buffersToCollapse()" : 1 , "clear()" : 3 , "clone()" : 2 , "collapse()" : 2 , "memory()" : 1 , "newBuffer()" : 2 , "postCollapse(DoubleBuffer[])" : 1 , "preProcessPhis(DoubleArrayList)" : 1 , "quantileElements(DoubleArrayList)" : 3 , "sampleNextElement()" : 2 , "setUp(int,int)" : 2 , "size()" : 1 , "toString()" : 1}},{ "className" : "cern::jet::stat::quantile::QuantileFinderTest" , "selectors" : { "binaryMultiSearch(DoubleArrayList,double)" : 1 , "epsilon(DoubleArrayList,double,double)" : 1 , "epsilon(int,double,double)" : 1 , "observedEpsilonAtPhi(double,ExactDoubleQuantileFinder,DoubleQuantileFinder)" : 1 , "observedEpsilonsAtPhis(DoubleArrayList,ExactDoubleQuantileFinder,DoubleQuantileFinder,double)" : 1 , "testBestBandKCalculation(String[])" : 1 , "testQuantileCalculation(String[])" : 1}},{ "className" : "cern::jet::stat::quantile::EquiDepthHistogram" , "selectors" : { "EquiDepthHistogram(float[])" : 1 , "phi(float)" : 3}},{ "className" : "cern::colt::bitvector::BitVector::IndexProcedure" , "selectors" : { "IndexProcedure()" : 1}},{ "className" : "cern::colt::Sorting" , "selectors" : { "binarySearchFromTo(Object[],Object,int,int,Comparator)" : 2 , "binarySearchFromTo(byte[],byte,int,int)" : 1 , "binarySearchFromTo(char[],char,int,int)" : 1 , "binarySearchFromTo(double[],double,int,int)" : 4 , "binarySearchFromTo(float[],float,int,int)" : 1 , "binarySearchFromTo(int[],int,int,int)" : 5 , "binarySearchFromTo(long[],long,int,int)" : 1 , "binarySearchFromTo(short[],short,int,int)" : 1 , "inplace_merge(int[],int,int,int)" : 3 , "lower_bound(int[],int,int,int)" : 1 , "med3(Object[],int,int,int)" : 4 , "med3(Object[],int,int,int,Comparator)" : 4 , "med3(byte[],int,int,int,ByteComparator)" : 4 , "med3(char[],int,int,int,CharComparator)" : 4 , "med3(double[],int,int,int,DoubleComparator)" : 4 , "med3(float[],int,int,int,FloatComparator)" : 4 , "med3(int[],int,int,int,IntComparator)" : 4 , "med3(long[],int,int,int,LongComparator)" : 4 , "med3(short[],int,int,int,ShortComparator)" : 4 , "mergeSort(byte[],int,int)" : 1 , "mergeSort(byte[],int,int,ByteComparator)" : 1 , "mergeSort(char[],int,int)" : 1 , "mergeSort(char[],int,int,CharComparator)" : 1 , "mergeSort(double[],int,int)" : 1 , "mergeSort(double[],int,int,DoubleComparator)" : 1 , "mergeSort(float[],int,int)" : 1 , "mergeSort(float[],int,int,FloatComparator)" : 1 , "mergeSort(int[],int,int)" : 1 , "mergeSort(int[],int,int,IntComparator)" : 3 , "mergeSort(long[],int,int)" : 1 , "mergeSort(long[],int,int,LongComparator)" : 1 , "mergeSort(short[],int,int)" : 1 , "mergeSort(short[],int,int,ShortComparator)" : 1 , "mergeSort1(byte[],byte[],int,int)" : 3 , "mergeSort1(byte[],byte[],int,int,ByteComparator)" : 3 , "mergeSort1(char[],char[],int,int)" : 3 , "mergeSort1(char[],char[],int,int,CharComparator)" : 3 , "mergeSort1(double[],double[],int,int)" : 3 , "mergeSort1(double[],double[],int,int,DoubleComparator)" : 3 , "mergeSort1(float[],float[],int,int)" : 3 , "mergeSort1(float[],float[],int,int,FloatComparator)" : 3 , "mergeSort1(int[],int[],int,int)" : 3 , "mergeSort1(int[],int[],int,int,IntComparator)" : 3 , "mergeSort1(long[],long[],int,int)" : 3 , "mergeSort1(long[],long[],int,int,LongComparator)" : 3 , "mergeSort1(short[],short[],int,int)" : 3 , "mergeSort1(short[],short[],int,int,ShortComparator)" : 3 , "mergeSort2(double[],int,int)" : 1 , "mergeSort2(float[],int,int)" : 1 , "mergeSortInPlace(int[],int,int)" : 2 , "quickSort(Object[],int,int)" : 1 , "quickSort(Object[],int,int,Comparator)" : 1 , "quickSort(byte[],int,int,ByteComparator)" : 1 , "quickSort(char[],int,int,CharComparator)" : 1 , "quickSort(double[],int,int,DoubleComparator)" : 1 , "quickSort(float[],int,int,FloatComparator)" : 1 , "quickSort(int[],int,int,IntComparator)" : 3 , "quickSort(long[],int,int,LongComparator)" : 1 , "quickSort(short[],int,int,ShortComparator)" : 1 , "quickSort1(Object[],int,int)" : 4 , "quickSort1(Object[],int,int,Comparator)" : 4 , "quickSort1(byte[],int,int,ByteComparator)" : 3 , "quickSort1(char[],int,int,CharComparator)" : 3 , "quickSort1(double[],int,int,DoubleComparator)" : 3 , "quickSort1(float[],int,int,FloatComparator)" : 3 , "quickSort1(int[],int,int,IntComparator)" : 3 , "quickSort1(long[],int,int,LongComparator)" : 3 , "quickSort1(short[],int,int,ShortComparator)" : 3 , "rangeCheck(int,int,int)" : 24 , "swap(Object[],int,int)" : 9 , "swap(byte[],int,int)" : 7 , "swap(char[],int,int)" : 7 , "swap(double[],int,int)" : 7 , "swap(float[],int,int)" : 7 , "swap(int[],int,int)" : 7 , "swap(long[],int,int)" : 7 , "swap(short[],int,int)" : 7 , "upper_bound(int[],int,int,int)" : 1 , "vecswap(Object[],int,int,int)" : 4 , "vecswap(byte[],int,int,int)" : 2 , "vecswap(char[],int,int,int)" : 2 , "vecswap(double[],int,int,int)" : 2 , "vecswap(float[],int,int,int)" : 2 , "vecswap(int[],int,int,int)" : 2 , "vecswap(long[],int,int,int)" : 2 , "vecswap(short[],int,int,int)" : 2}},{ "className" : "cern::colt::matrix::doublealgo::Statistic::VectorVectorFunction" , "selectors" : { "apply(DoubleMatrix1D,DoubleMatrix1D)" : 1}},{ "className" : "cern::colt::bitvector::BitMatrix" , "selectors" : { "BitMatrix(int,int)" : 2 , "checkDimensionCompatibility(BitMatrix)" : 4 , "clone()" : 1 , "columns()" : 4 , "containsBox(int,int,int,int)" : 3 , "copy()" : 1 , "elements(long[],int,int)" : 1 , "replaceBoxWith(int,int,int,int,BitMatrix,int,int)" : 1 , "rows()" : 3 , "size()" : 3 , "toBitVector()" : 18}},{ "className" : "cern::colt::matrix::impl::DenseDoubleMatrix1D" , "selectors" : { "DenseDoubleMatrix1D(double[])" : 12 , "DenseDoubleMatrix1D(int)" : 11 , "DenseDoubleMatrix1D(int,double[],int,int)" : 1 , "assign(double[])" : 1 , "index(int)" : 14}},{ "className" : "cern::colt::function::Double9Function" , "selectors" : { "apply(double,double,double,double,double,double,double,double,double)" : 2}},{ "className" : "cern::colt::matrix::impl::RCMDoubleMatrix2D" , "selectors" : { "RCMDoubleMatrix2D(int,int)" : 2}},{ "className" : "hep::aida::bin::StaticBin1D" , "selectors" : { "add(double)" : 1 , "addAllOfFromTo(DoubleArrayList,int,int)" : 1 , "clear()" : 3 , "clearAllMeasures()" : 2 , "size()" : 8 , "sum()" : 2 , "sumOfSquares()" : 2}},{ "className" : "cern::colt::matrix::impl::DenseDoubleMatrix2D" , "selectors" : { "DenseDoubleMatrix2D(int,int,double[],int,int,int,int)" : 1 , "assign(double)" : 5 , "assign(double[][])" : 7 , "cern" : 39 , "index(int,int)" : 13 , "zMult(DoubleMatrix2D,DoubleMatrix2D,double,double,boolean,boolean)" : 1}},{ "className" : "hep::aida::IHistogram3D" , "selectors" : { "binEntries(int,int,int)" : 2 , "binHeight(int,int,int)" : 6 , "fill(double,double,double)" : 1 , "fill(double,double,double,double)" : 2 , "meanX()" : 1 , "meanY()" : 1 , "meanZ()" : 1 , "minMaxBins()" : 1 , "rmsX()" : 2 , "rmsZ()" : 1 , "xAxis()" : 7 , "yAxis()" : 7 , "zAxis()" : 7}},{ "className" : "cern::jet::random::engine::Benchmark" , "selectors" : { "benchmark(int)" : 1}},{ "className" : "cern::colt::matrix::impl::SparseObjectMatrix2D" , "selectors" : { "SparseObjectMatrix2D(Object[][])" : 1 , "SparseObjectMatrix2D(int,int)" : 6 , "SparseObjectMatrix2D(int,int,AbstractIntObjectMap,int,int,int,int)" : 1 , "SparseObjectMatrix2D(int,int,int,double,double)" : 1}},{ "className" : "cern::jet::random::sampling::WeightedRandomSampler" , "selectors" : { "WeightedRandomSampler()" : 1 , "WeightedRandomSampler(int,RandomEngine)" : 2 , "clone()" : 1 , "getWeight()" : 2 , "sampleNextElement()" : 2 , "setWeight(int)" : 4}},{ "className" : "cern::colt::list::LongArrayList" , "selectors" : { "LongArrayList()" : 1 , "LongArrayList(int)" : 6 , "LongArrayList(long[])" : 4 , "add(long)" : 4 , "binarySearchFromTo(long,int,int)" : 2 , "clone()" : 1 , "countSortFromTo(int,int,long,long)" : 1 , "elements()" : 4 , "elements(long[])" : 1 , "ensureCapacity(int)" : 2 , "get(int)" : 2 , "getQuick(int)" : 1}},{ "className" : "hep::aida::ref::Test2" , "selectors" : { "writeAsXML(IHistogram1D,String)" : 6 , "writeAsXML(IHistogram2D,String)" : 2 , "writeAsXML(IHistogram3D,String)" : 1}},{ "className" : "cern::colt::matrix::linalg::QRDecomposition" , "selectors" : { "QRDecomposition(DoubleMatrix2D)" : 2 , "getH()" : 1 , "getQ()" : 1 , "getR()" : 1 , "hasFullRank()" : 2 , "solve(DoubleMatrix2D)" : 2 , "toString()" : 1}},{ "className" : "cern::colt::matrix::linalg::Diagonal" , "selectors" : { "inverse(DoubleMatrix2D)" : 1}},{ "className" : "cern::jet::stat::quantile::DoubleBuffer" , "selectors" : { "DoubleBuffer(int)" : 1 , "add(double)" : 1 , "allocate()" : 3 , "clear()" : 1 , "clone()" : 1 , "contains(double)" : 1 , "isEmpty()" : 10 , "isFull()" : 1 , "memory()" : 1 , "rank(double)" : 1 , "size()" : 6 , "sort()" : 3 , "toString()" : 1}},{ "className" : "cern::jet::random::BreitWignerMeanSquare" , "selectors" : { "BreitWignerMeanSquare(double,double,double,RandomEngine)" : 1}},{ "className" : "cern::colt::list::IntArrayList" , "selectors" : { "IntArrayList()" : 15 , "IntArrayList(int)" : 12 , "IntArrayList(int[])" : 14 , "add(int)" : 37 , "beforeInsert(int,int)" : 3 , "binarySearchFromTo(int,int,int)" : 5 , "clone()" : 1 , "countSortFromTo(int,int,int,int)" : 1 , "elements()" : 30 , "elements(int[])" : 1 , "ensureCapacity(int)" : 2 , "get(int)" : 8 , "getQuick(int)" : 4 , "replaceFromToWithFrom(int,int,AbstractIntList,int)" : 1 , "setQuick(int,int)" : 2 , "trimToSize()" : 8}},{ "className" : "cern::jet::stat::quantile::ExactDoubleQuantileFinder" , "selectors" : { "ExactDoubleQuantileFinder()" : 5 , "addAllOfFromTo(DoubleArrayList,int,int)" : 1 , "clear()" : 1 , "memory()" : 2 , "quantileElements(DoubleArrayList)" : 1 , "size()" : 4 , "sort()" : 3}},{ "className" : "cern::colt::list::SimpleLongArrayList" , "selectors" : { "SimpleLongArrayList(int)" : 1}},{ "className" : "cern::colt::Arrays" , "selectors" : { "ensureCapacity(Object[],int)" : 1 , "ensureCapacity(boolean[],int)" : 1 , "ensureCapacity(byte[],int)" : 1 , "ensureCapacity(char[],int)" : 1 , "ensureCapacity(double[],int)" : 1 , "ensureCapacity(float[],int)" : 1 , "ensureCapacity(int[],int)" : 1 , "ensureCapacity(long[],int)" : 2 , "ensureCapacity(short[],int)" : 1 , "toString(Object[])" : 1 , "toString(boolean[])" : 1 , "toString(byte[])" : 1 , "toString(char[])" : 1 , "toString(double[])" : 9 , "toString(float[])" : 1 , "toString(int[])" : 5 , "toString(long[])" : 1 , "toString(short[])" : 1 , "trimToCapacity(Object[],int)" : 1 , "trimToCapacity(boolean[],int)" : 1 , "trimToCapacity(byte[],int)" : 1 , "trimToCapacity(char[],int)" : 1 , "trimToCapacity(double[],int)" : 1 , "trimToCapacity(float[],int)" : 1 , "trimToCapacity(int[],int)" : 1 , "trimToCapacity(long[],int)" : 2 , "trimToCapacity(short[],int)" : 1}},{ "className" : "cern::colt::matrix::objectalgo::Partitioning" , "selectors" : { "partition(ObjectMatrix2D,int[],int,int,int,Object[],int,int,int[])" : 1}},{ "className" : "cern::colt::matrix::linalg::LUDecompositionQuick" , "selectors" : { "LUDecompositionQuick()" : 1 , "LUDecompositionQuick(double)" : 4 , "decompose(DoubleMatrix2D)" : 5 , "det()" : 2 , "getDoublePivot()" : 1 , "getL()" : 2 , "getPivot()" : 2 , "getU()" : 2 , "isNonsingular()" : 6 , "isNonsingular(DoubleMatrix2D)" : 1 , "lowerTriangular(DoubleMatrix2D)" : 1 , "m()" : 6 , "n()" : 4 , "setLU(DoubleMatrix2D)" : 4 , "solve(DoubleMatrix1D)" : 1 , "solve(DoubleMatrix2D)" : 3 , "toString()" : 1 , "upperTriangular(DoubleMatrix2D)" : 1}},{ "className" : "cern::colt::matrix::impl::TridiagonalDoubleMatrix2D" , "selectors" : { "TridiagonalDoubleMatrix2D(double[][])" : 1 , "TridiagonalDoubleMatrix2D(int,int)" : 2 , "assign(double)" : 3 , "forEachNonZero(IntIntDoubleFunction)" : 5 , "getQuick(int,int)" : 3 , "setQuick(int,int,double)" : 4}},{ "className" : "cern::colt::buffer::IntBuffer2DConsumer" , "selectors" : { "addAllOf(IntArrayList,IntArrayList)" : 2}},{ "className" : "cern::colt::list::MinMaxNumberList" , "selectors" : { "MinMaxNumberList(long,long,int)" : 1 , "add(long)" : 1 , "bitsPerElement(long,long)" : 1 , "ensureCapacity(int)" : 3 , "getQuick(int)" : 1 , "setQuick(int,long)" : 1 , "setSizeRaw(int)" : 1 , "setUp(long,long,int)" : 1 , "setUpBitsPerEntry(long,long)" : 1 , "toBitVector()" : 2 , "trimToSize()" : 1}},{ "className" : "cern::colt::matrix::impl::BenchmarkMatrix2D" , "selectors" : { "doubleBenchmark(int,int,int,String,boolean,int,double,double)" : 1 , "doubleBenchmarkMult(int,int,int,String,boolean,int,double,double)" : 1 , "doubleBenchmarkPrimitive(int,int,int,boolean)" : 1 , "doubleBenchmarkPrimitiveOptimized(int,int,int,boolean)" : 1 , "intBenchmark(int,int,int,String,boolean,int,double,double)" : 1 , "intBenchmarkPrimitive(int,int,int,boolean)" : 1 , "intBenchmarkPrimitiveOptimized(int,int,int,boolean)" : 1}},{ "className" : "cern::colt::matrix::doublealgo::Sorting" , "selectors" : { "Sorting()" : 1 , "compareNaN(double,double)" : 4 , "runSort(int,int,IntComparator,Swapper)" : 1 , "runSort(int[],int,int,IntComparator)" : 6 , "sort(DoubleMatrix1D)" : 1 , "sort(DoubleMatrix1D,DoubleComparator)" : 1 , "sort(DoubleMatrix2D,BinFunction1D)" : 1 , "sort(DoubleMatrix2D,DoubleMatrix1DComparator)" : 2 , "sort(DoubleMatrix2D,double[])" : 3 , "sort(DoubleMatrix2D,int)" : 9 , "sort(DoubleMatrix3D,DoubleMatrix2DComparator)" : 1 , "sort(DoubleMatrix3D,int,int)" : 1}},{ "className" : "cern::colt::matrix::doublealgo::DoubleMatrix1DComparator" , "selectors" : { "compare(DoubleMatrix1D,DoubleMatrix1D)" : 1}},{ "className" : "cern::colt::function::ShortProcedure" , "selectors" : { "apply(short)" : 2}},{ "className" : "cern::colt::map::AbstractIntIntMap" , "selectors" : { "containsKey(int)" : 2 , "forEachKey(IntProcedure)" : 4 , "forEachPair(IntIntProcedure)" : 5 , "get(int)" : 8 , "keys()" : 1 , "keys(IntArrayList)" : 3 , "keysSortedByValue(IntArrayList)" : 1 , "pairsSortedByValue(IntArrayList,IntArrayList)" : 1 , "put(int,int)" : 1 , "values(IntArrayList)" : 2}},{ "className" : "cern::colt::matrix::linalg::SingularValueDecomposition" , "selectors" : { "SingularValueDecomposition(DoubleMatrix2D)" : 2 , "cond()" : 2 , "getS()" : 1 , "getU()" : 1 , "getV()" : 1 , "norm2()" : 2 , "rank()" : 2 , "toString()" : 1}},{ "className" : "cern::clhep::PhysicalConstants" , "selectors" : { "PhysicalConstants()" : 1}},{ "className" : "cern::colt::map::Benchmark" , "selectors" : { "benchmark(int,int,String)" : 1}},{ "className" : "cern::jet::random::Benchmark" , "selectors" : { "random(int,boolean,double,String)" : 1 , "randomInstance(int,boolean,AbstractDistribution)" : 1}},{ "className" : "cern::jet::random::Empirical" , "selectors" : { "setState(double[],int)" : 1}},{ "className" : "cern::colt::matrix::ObjectFactory3D" , "selectors" : { "ObjectFactory3D()" : 2 , "make(int,int,int)" : 1}},{ "className" : "cern::colt::matrix::impl::Benchmark" , "selectors" : { "benchmark(int,int,String,boolean,int,double,double,double)" : 1}},{ "className" : "cern::colt::matrix::doublealgo::Partitioning" , "selectors" : { "partition(DoubleMatrix2D,int[],int,int,int,double[],int,int,int[])" : 1}},{ "className" : "cern::colt::list::AbstractShortList" , "selectors" : { "addAllOfFromTo(AbstractShortList,int,int)" : 3 , "beforeInsert(int,short)" : 1 , "beforeInsertAllOfFromTo(int,AbstractShortList,int,int)" : 1 , "beforeInsertDummies(int,int)" : 3 , "binarySearchFromTo(short,int,int)" : 1 , "clone()" : 2 , "elements()" : 5 , "elements(short[])" : 4 , "ensureCapacity(int)" : 1 , "equals(Object)" : 1 , "fillFromToWith(int,int,short)" : 1 , "get(int)" : 3 , "getQuick(int)" : 16 , "indexOfFromTo(short,int,int)" : 7 , "lastIndexOfFromTo(short,int,int)" : 1 , "partFromTo(int,int)" : 3 , "quickSortFromTo(int,int)" : 1 , "removeAll(AbstractShortList)" : 1 , "removeFromTo(int,int)" : 1 , "replaceFromToWithFrom(int,int,AbstractShortList,int)" : 5 , "replaceFromToWithFromTo(int,int,AbstractShortList,int,int)" : 1 , "retainAll(AbstractShortList)" : 1 , "set(int,short)" : 2 , "setQuick(int,short)" : 10 , "setSizeRaw(int)" : 8 , "size()" : 36}},{ "className" : "cern::colt::list::ShortArrayList" , "selectors" : { "ShortArrayList(int)" : 4 , "ShortArrayList(short[])" : 4 , "binarySearchFromTo(short,int,int)" : 2 , "clone()" : 1 , "countSortFromTo(int,int,short,short)" : 1 , "elements()" : 2 , "elements(short[])" : 1 , "ensureCapacity(int)" : 2}},{ "className" : "cern::colt::matrix::impl::AbstractFormatter" , "selectors" : { "align(String[][])" : 4 , "alignRow(String[],int[],int[])" : 1 , "alignmentCode(String)" : 1 , "blanks(int)" : 14 , "form(AbstractMatrix1D,int,Former)" : 1 , "format(AbstractMatrix2D)" : 1 , "formatRow(AbstractMatrix1D)" : 2 , "lead(String)" : 3 , "repeat(char,int)" : 3 , "setAlignment(String)" : 2 , "setColumnSeparator(String)" : 6 , "setFormat(String)" : 1 , "setPrintShape(boolean)" : 7 , "setRowSeparator(String)" : 4 , "setSliceSeparator(String)" : 2 , "setupBlanksCache()" : 1 , "shape(AbstractMatrix1D)" : 1 , "shape(AbstractMatrix3D)" : 7 , "toString(AbstractMatrix2D)" : 2 , "toString(String[][])" : 1}},{ "className" : "cern::jet::random::Logarithmic" , "selectors" : { "Logarithmic(double,RandomEngine)" : 1 , "nextDouble(double)" : 2 , "setState(double)" : 1}},{ "className" : "org::exoplatform::services::xml::querying::QueryRunTimeException" , "selectors" : { "QueryRunTimeException(String)" : 9}},{ "className" : "org::exoplatform::services::grammar::wiki::impl::ListTokenHandler" , "selectors" : { "li(StringBuffer,int)" : 3 , "ul(StringBuffer,int)" : 2}},{ "className" : "javax::jcr::StringValue" , "selectors" : { "StringValue(String)" : 89}},{ "className" : "org::exoplatform::services::jcr::impl::core::nodetype::mix::Referenceable" , "selectors" : { "org" : 4}},{ "className" : "javax::jcr::Repository" , "selectors" : { "login(Credentials,String)" : 138}},{ "className" : "org::exoplatform::faces::core::component::model::ListComponentCell" , "selectors" : { "ListComponentCell()" : 65 , "add(???)" : 4 , "add(HtmlFragment)" : 88 , "add(Object)" : 11}},{ "className" : "org::exoplatform::services::xml::querying::XMLQuery" , "selectors" : { "execute()" : 18 , "getResult()" : 19 , "prepare(Statement)" : 18 , "serialize()" : 3 , "setInputStream(InputStream)" : 7}},{ "className" : "org::exoplatform::services::communication::sms::util::ClientSocket" , "selectors" : { "ClientSocket(String,int)" : 1 , "byteArrayToCharArray(byte[],int,int)" : 1 , "sendMessage(String)" : 1}},{ "className" : "org::exoplatform::faces::core::event::CheckRoleInterceptor" , "selectors" : { "CheckRoleInterceptor(String)" : 40}},{ "className" : "org::exoplatform::services::ldap::LDAPService" , "selectors" : { "authenticate(String,String)" : 1 , "getLdapContext()" : 41}},{ "className" : "javax::jcr::PropertyIterator" , "selectors" : { "nextProperty()" : 22}},{ "className" : "org::exoplatform::services::portletcontainer::impl::portletAPIImp::pool::EmptyResponse" , "selectors" : { "EmptyResponse()" : 40}},{ "className" : "javax::naming::directory::BasicAttribute" , "selectors" : { "BasicAttribute(String)" : 20 , "BasicAttribute(String,Object)" : 85 , "add(Object)" : 28}},{ "className" : "org::exoplatform::portal::faces::application::ExoPortalViewHandler" , "selectors" : { "ExoPortalViewHandler(???)" : 1}},{ "className" : "org::exoplatform::services::communication::forum::Watcher" , "selectors" : { "getAddress()" : 2 , "getUserName()" : 1 , "setAddress(String)" : 5 , "setMessageProtocol(String)" : 3 , "setUserName(String)" : 4}},{ "className" : "org::exoplatform::services::jcr::api::namespaces::PrefixesTicketTest" , "selectors" : { "init()" : 3}},{ "className" : "org::exoplatform::services::cache::CacheService" , "selectors" : { "getAllCacheInstances()" : 2 , "getCacheInstance(String)" : 19}},{ "className" : "org::exoplatform::services::jcr::impl::core::nodetype::nt::MimeResource" , "selectors" : { "MimeResource()" : 1}},{ "className" : "org::exoplatform::faces::core::component::model::Parameter" , "selectors" : { "Parameter(String,String)" : 228 , "getName()" : 5 , "getValue()" : 5 , "setValue(String)" : 45}},{ "className" : "org::exoplatform::services::wsrp::test::TestCachingMechanism" , "selectors" : { "testExistenceOfValidateTag()::PortletContext" : 1 , "testExistenceOfValidateTag()::RegistrationContext" : 1}},{ "className" : "org::exoplatform::faces::core::component::UIRadioBox" , "selectors" : { "UIRadioBox(String,String,List)" : 2 , "getValue()" : 2}},{ "className" : "javax::jcr::RepositoryException" , "selectors" : { "RepositoryException()" : 17 , "RepositoryException(String)" : 63 , "RepositoryException(String,Exception)" : 24 , "getMessage()" : 9 , "printStackTrace()" : 9}},{ "className" : "org::exoplatform::portlets::wsrp::UserSessionImpl" , "selectors" : { "UserSessionImpl(String)" : 1 , "addGroupSession(GroupSession)" : 1}},{ "className" : "org::exoplatform::faces::core::component::model::LabelCell" , "selectors" : { "LabelCell(String)" : 181 , "add(???)" : 6}},{ "className" : "org::exoplatform::services::database::impl::DatabaseServiceConfig::DataSourceConfig" , "selectors" : { "getJndi()" : 6 , "getName()" : 1}},{ "className" : "org::exoplatform::faces::core::component::model::SelectItem" , "selectors" : { "SelectItem(String,String)" : 91}},{ "className" : "org::exoplatform::faces::core::component::model::ComponentCell" , "selectors" : { "ComponentCell(???)" : 159}},{ "className" : "org::exoplatform::portlet::exomvc::exception::ExceptionHandler" , "selectors" : { "canHandle(Throwable)" : 2 , "handle(???)" : 2}},{ "className" : "org::exoplatform::faces::core::component::model::HeaderRow" , "selectors" : { "HeaderRow()" : 34}},{ "className" : "org::exoplatform::services::portletcontainer::test::portlet::PortletToTestResponseContentTypeMethods" , "selectors" : { "processAction(ActionRequest,ActionResponse)::PortletException" : 5 , "render(RenderRequest,RenderResponse)::PortletException" : 5}},{ "className" : "org::exoplatform::test::mocks::servlet::MockHttpSession" , "selectors" : { "MockHttpSession()" : 40}},{ "className" : "org::exoplatform::commons::xhtml::Attributes" , "selectors" : { "Attributes(String)" : 1 , "appendAttribute(String)" : 1 , "toString()" : 9}},{ "className" : "org::exoplatform::services::grammar::wiki::impl::TokenHandlerManager" , "selectors" : { "TokenHandlerManager(ServiceConfiguration)" : 1 , "handleToken(Token,Token,ParsingContext)" : 15 , "initHandlers(ServiceConfiguration)" : 1}},{ "className" : "org::exoplatform::faces::core::component::UINode" , "selectors" : { "UINode()" : 1 , "encodeChildren(???)" : 1 , "getName()" : 2 , "setName(String)" : 13}},{ "className" : "org::exoplatform::services::xml::querying::impl::xtas::QueryType" , "selectors" : { "exists(String)" : 1 , "isAtResource(String)" : 2 , "isAtXml(String)" : 2}},{ "className" : "org::exoplatform::commons::utils::ObjectPageList" , "selectors" : { "ObjectPageList(List,int)" : 4}},{ "className" : "org::exoplatform::faces::core::renderer::html::LinkRenderer" , "selectors" : { "LinkRenderer()" : 1 , "render(???)" : 108 , "renderSelect(???)" : 1}},{ "className" : "java::lang::IllegalAccessError" , "selectors" : { "IllegalAccessError(String)" : 25 , "java" : 1}},{ "className" : "org::exoplatform::faces::core::component::model::ActionColumn" , "selectors" : { "ActionColumn(String,String)" : 10 , "add(Button)" : 2 , "add(boolean,Button)" : 16}},{ "className" : "javax::jcr::PathNotFoundException" , "selectors" : { "PathNotFoundException(String)" : 31}},{ "className" : "org::exoplatform::faces::core::component::ComponentVisitor" , "selectors" : { "traverse(UIExoComponent)" : 1 , "visit(UIExoComponent)" : 1}},{ "className" : "org::exoplatform::container::configuration::ValueParam" , "selectors" : { "ValueParam()" : 1 , "getValue()" : 16 , "setValue(String)" : 1}},{ "className" : "org::exoplatform::faces::ActionListenerManager" , "selectors" : { "createListener(Class,String)" : 2 , "getActionListener(Class,String)" : 1}},{ "className" : "org::exoplatform::services::jcr::BaseTest" , "selectors" : { "setUp()" : 71}},{ "className" : "org::exoplatform::faces::core::component::model::DataHandler" , "selectors" : { "begin()" : 1 , "getData(String)" : 4 , "nextRow()" : 1 , "setCurrentObject(Object)" : 3}},{ "className" : "org::exoplatform::services::communication::sms::util::SortComparator" , "selectors" : { "SortComparator(String)" : 1}},{ "className" : "org::exoplatform::services::portletcontainer::impl::portletAPIImp::helpers::HttpSessionWrapper" , "selectors" : { "getAttribute(String)" : 7 , "getAttributeNames()" : 2 , "removeAttribute(String)" : 2 , "setAttribute(String,Object)" : 6 , "setSession(???)" : 1}},{ "className" : "org::exoplatform::services::jcr::storage::WorkspaceContainer" , "selectors" : { "getName()" : 15}},{ "className" : "javax::naming::directory::ModificationItem" , "selectors" : { "ModificationItem(int,Attribute)" : 28}},{ "className" : "org::exoplatform::services::xml::transform::PipeTransformer" , "selectors" : { "getTransformerAsResult()" : 5}},{ "className" : "org::exoplatform::services::portletregistery::impl::TestPortletRegistery" , "selectors" : { "createPortlet(PortletCategory,String,String)" : 5 , "createPortletCategory(String,String)" : 4 , "createPortletRole(Portlet,String,String)" : 7}},{ "className" : "org::exoplatform::services::organization::GroupEventListener" , "selectors" : { "postDelete(Group,XResources)" : 2 , "postSave(Group,boolean,XResources)" : 2 , "preDelete(Group,XResources)" : 2 , "preSave(Group,boolean,XResources)" : 2}},{ "className" : "org::exoplatform::portlets::weather::component::UIWeatherTitle" , "selectors" : { "UIWeatherTitle()" : 2 , "setTitle(String)" : 11 , "updateTree()" : 2}},{ "className" : "org::exoplatform::faces::test::TestValidator" , "selectors" : { "validate(UIStringInput,EmailAddressValidator,String)" : 13}},{ "className" : "org::exoplatform::portlets::portletregistery::component::UIPortletRole::UpdateActionListener" , "selectors" : { "UpdateActionListener()" : 1}},{ "className" : "org::exoplatform::services::jcr::impl::core::nodetype::nt::HierarchyNode" , "selectors" : { "HierarchyNode()" : 1}},{ "className" : "org::exoplatform::services::portal::community::CommunityConfig" , "selectors" : { "CommunityConfig()" : 1 , "getCommunityNavigations()" : 2 , "getCommunityPortals()" : 2}},{ "className" : "org::exoplatform::services::portal::skin::model::PortletStyleConfig" , "selectors" : { "PortletStyleConfig()" : 1 , "addStyle(Style)" : 1 , "getPortletName()" : 3 , "getStyles()" : 4 , "setPortletName(String)" : 1}},{ "className" : "org::exoplatform::services::threadpool::impl::ThreadPoolServiceImpl::DiscardWhenBlocked" , "selectors" : { "DiscardWhenBlocked()" : 1}},{ "className" : "org::exoplatform::portlets::log::component::UILogConfig" , "selectors" : { "update()" : 3}},{ "className" : "org::exoplatform::faces::core::renderer::html::ButtonRenderer" , "selectors" : { "ButtonRenderer()" : 1 , "render(???)" : 9}},{ "className" : "org::exoplatform::text::template::xhtml::Row" , "selectors" : { "Row()" : 4 , "add(Element)" : 4}},{ "className" : "org::exoplatform::portlets::portletregistery::component::UIPortletCategoryForm" , "selectors" : { "getSibling(???)" : 1 , "setPortletCategoryData(PortletCategoryData)" : 2}},{ "className" : "org::exoplatform::services::xml::querying::impl::xtas::UniFormTreeFragment" , "selectors" : { "UniFormTreeFragment()" : 11 , "getAsByteArray()" : 1 , "getAsCollection(Class)" : 4 , "getAsNodeList()" : 1 , "init(InputStream)" : 12}},{ "className" : "org::exoplatform::services::communication::message::Folder" , "selectors" : { "getId()" : 5 , "getLabel()" : 3 , "getName()" : 9 , "setLabel(String)" : 1 , "setName(String)" : 2}},{ "className" : "org::exoplatform::services::database::XResources" , "selectors" : { "XResources()" : 34 , "addResource(Class,Object)" : 36 , "getResource(Class)" : 19}},{ "className" : "com::capeclear::www::GlobalWeather_xsd::Phenomenon" , "selectors" : { "<Initializer>()::org" : 4 , "getIntensity()" : 4 , "getString()" : 4 , "getType()" : 4}},{ "className" : "org::exoplatform::services::jcr::impl::storage::rdb::repository::data::PathReference" , "selectors" : { "PathReference()" : 2 , "getPath()" : 1 , "getUuidRef()" : 3 , "setPath(String)" : 2 , "setUuidRef(UUIDReference)" : 2}},{ "className" : "org::exoplatform::services::wsrp::consumer::InitCookieInfo" , "selectors" : { "isInitCookieDone()" : 2 , "setInitCookieDone(boolean)" : 4 , "setInitCookieRequired(boolean)" : 2}},{ "className" : "org::exoplatform::faces::context::HtmlResponseWriter" , "selectors" : { "HtmlResponseWriter(Writer)" : 3 , "closeStartIfNecessary()" : 7 , "flush()" : 1}},{ "className" : "org::exoplatform::services::communication::sms::encoder::MessageFormat" , "selectors" : { "MessageFormat(String)" : 9 , "parse(String)" : 1 , "toString()" : 13}},{ "className" : "org::exoplatform::portlets::user::component::UIListUser" , "selectors" : { "getSibling(???)" : 2 , "refresh()" : 1 , "search(Query)" : 3}},{ "className" : "org::exoplatform::services::resources::LocaleConfigService" , "selectors" : { "getDefaultLocaleConfig()" : 2 , "getLocalConfigs()" : 4 , "getLocaleConfig(String)" : 1}},{ "className" : "org::exoplatform::services::jcr::api::writing::fs::TestAddProperty" , "selectors" : { "initRepository()" : 1}},{ "className" : "org::exoplatform::portlets::content::display::component::UIContentTab" , "selectors" : { "UIContentTab(ContentConfig)" : 2}},{ "className" : "org::exoplatform::services::xml::resolving::XMLResolvingService" , "selectors" : { "getEntityResolver()" : 9}},{ "className" : "org::exoplatform::services::threadpool::impl::ThreadPoolServiceImpl::Worker" , "selectors" : { "Worker(Runnable)" : 1}},{ "className" : "org::exoplatform::services::jcr::impl::core::nodetype::NodeTypeManagerImpl" , "selectors" : { "NodeTypeManagerImpl()" : 1 , "getInstance()" : 14}},{ "className" : "com::capeclear::www::GlobalWeather_xsd::Precipitation" , "selectors" : { "<Initializer>()::org" : 4 , "getAmount()" : 2 , "getHours()" : 2 , "getString()" : 4}},{ "className" : "com::capeclear::www::GlobalWeather_xsd::ExtremeType" , "selectors" : { "ExtremeType(String)" : 2 , "equals(Object)" : 1 , "fromValue(String)" : 2 , "hashCode()" : 1 , "toString()" : 1}},{ "className" : "org::exoplatform::container::configuration::Parameter" , "selectors" : { "getName()" : 5 , "setDescription(String)" : 4 , "setName(String)" : 4}},{ "className" : "org::exoplatform::portlets::communication::message::component::UISummary" , "selectors" : { "changeAccount(UIAccount)" : 1 , "changeFolder(Folder)" : 3 , "update()" : 3}},{ "className" : "org::exoplatform::services::portletcontainer::impl::portletAPIImp::tags::XURLTag" , "selectors" : { "addParameter(String,String)" : 1 , "doEndTag()::JspException" : 1 , "setPortletMode(String)::PortletMode" : 1 , "setWindowState(String)::WindowState" : 1}},{ "className" : "org::exoplatform::text::template::xhtml::XhtmlDataHandlerManager" , "selectors" : { "getBaseURL()" : 2 , "getDataHandler(Class)" : 9}},{ "className" : "org::exoplatform::services::portletcontainer::test::portlet::PortletToTestModeSupport" , "selectors" : { "render(RenderRequest,RenderResponse)::PortletMode" : 1}},{ "className" : "org::exoplatform::services::portletregistery::PortletRegisteryException" , "selectors" : { "PortletRegisteryException(String,int)" : 9 , "getErrorCode()" : 3}},{ "className" : "org::exoplatform::services::communication::sms::provider::prodat::ProdatRequestImpl" , "selectors" : { "ProdatRequestImpl(Provider)" : 1}},{ "className" : "org::exoplatform::services::xml::transform::AbstractTransformer" , "selectors" : { "initResult(Result)" : 13 , "transform(Source)" : 9}},{ "className" : "org::exoplatform::portlets::jmx::component::UIListMBean::ObjectNameDataHandler" , "selectors" : { "ObjectNameDataHandler()" : 1}},{ "className" : "org::exoplatform::text::template::xhtml::Rows" , "selectors" : { "Rows()" : 4 , "setShowHeader(boolean)" : 4}},{ "className" : "org::exoplatform::services::organization::impl::UserProfileImpl" , "selectors" : { "UserProfileImpl()" : 4}},{ "className" : "org::exoplatform::test::web::unit::SubmitFormUnit::ExoUploadFileSpec" , "selectors" : { "ExoUploadFileSpec(File)" : 1 , "ExoUploadFileSpec(String,InputStream,String)" : 1}},{ "className" : "org::exoplatform::portlets::communication::message::component::UIMessages" , "selectors" : { "changeFolder(Folder)" : 1 , "getAncestorOfType(???)" : 1 , "getMessages()" : 1 , "update()" : 1}},{ "className" : "org::exoplatform::services::portletcontainer::imp::BaseTest" , "selectors" : { "BaseTest(String)" : 16 , "setUp()" : 6}},{ "className" : "org::exoplatform::services::cache::ExoCache" , "selectors" : { "clear()" : 4 , "get(Serializable)" : 22 , "getCacheHit()" : 1 , "getCacheMiss()" : 1 , "getCacheSize()" : 1 , "getMaxSize()" : 1 , "getName()" : 1 , "put(Serializable,Object)" : 29 , "remove(Serializable)" : 25 , "setMaxSize(int)" : 7}},{ "className" : "org::exoplatform::services::jcr::impl::storage::rdb::container::data::ValueRecord" , "selectors" : { "ValueRecord()" : 16}},{ "className" : "org::exoplatform::test::mocks::jsf::MockFacesContext" , "selectors" : { "MockFacesContext()" : 1}},{ "className" : "org::exoplatform::commons::utils::IdentifierUtil" , "selectors" : { "generateUUID(Object)" : 24 , "getInt(byte[])" : 1 , "hexFormat(int,int)" : 4 , "padHex(String,int)" : 1}},{ "className" : "java::security::Principal" , "selectors" : { "equals(Object)" : 35 , "getName()" : 215 , "hashCode()" : 2 , "toString()" : 3}},{ "className" : "org::exoplatform::services::database::ObjectQuery::Parameter" , "selectors" : { "Parameter(String,String,Object)" : 4}},{ "className" : "org::exoplatform::services::portal::log::impl::SessionLogDataImpl" , "selectors" : { "SessionLogDataImpl()" : 2 , "getData()" : 1}},{ "className" : "org::exoplatform::services::jcr::impl::core::nodetype::nt::HierarchyItem" , "selectors" : { "HierarchyItem()" : 3}},{ "className" : "org::exoplatform::services::xml::querying::impl::xtas::xml::Utils" , "selectors" : { "createDocument()" : 8 , "createDocument(InputStream)" : 1}},{ "className" : "org::exoplatform::test::web::validator::Validator" , "selectors" : { "getDescription()" : 1 , "getName()" : 1 , "validate(???)" : 1}},{ "className" : "org::exoplatform::services::portletcontainer::helper::PortletWindowInternal" , "selectors" : { "PortletWindowInternal()" : 3 , "getPreferences(???)" : 9 , "getWindowID()" : 10}},{ "className" : "org::exoplatform::services::jcr::impl::util::PropertyConvertor" , "selectors" : { "convert(Value,int)" : 1 , "convert(Value[],int)" : 9}},{ "className" : "org::exoplatform::faces::search::component::UISearchSummary" , "selectors" : { "UISearchSummary(DocumentDataHandler)" : 1 , "getParent(???)" : 1 , "getUIPageIterator()" : 1 , "setSearchResult(PageList)" : 3}},{ "className" : "org::exoplatform::text::template::BeanDataHandler" , "selectors" : { "BeanDataHandler(Class)" : 1 , "BeanDataHandler(Object)" : 3 , "setBean(Object)" : 4}},{ "className" : "org::exoplatform::services::xml::querying::XMLQueryingService" , "selectors" : { "createQuery()" : 12 , "createStatementHelper()" : 21 , "createXMLDataManager()" : 4}},{ "className" : "org::exoplatform::services::xml::querying::InvalidDestinationException" , "selectors" : { "InvalidDestinationException(String)" : 4}},{ "className" : "org::exoplatform::container::configuration::PropertiesParam" , "selectors" : { "PropertiesParam()" : 1 , "getProperties()" : 8 , "setProperty(String,String)" : 1}},{ "className" : "org::exoplatform::services::portletcontainer::impl::portletAPIImp::helpers::HttpSessionBindingListenerProxy" , "selectors" : { "HttpSessionBindingListenerProxy(???)" : 1 , "getListener(???)" : 2}},{ "className" : "org::exoplatform::services::grammar::wiki::WikiEngineService" , "selectors" : { "toXHTML(String)" : 11}},{ "className" : "org::exoplatform::services::organization::ldap::OrganizationConfig" , "selectors" : { "getGroup()" : 1 , "getMembershipType()" : 1 , "getUser()" : 1}},{ "className" : "javax::jcr::NodeIterator" , "selectors" : { "nextNode()" : 9}},{ "className" : "org::exoplatform::services::jcr::impl::core::nodetype::nt::NodeType" , "selectors" : { "NodeType()" : 1}},{ "className" : "org::exoplatform::services::xml::querying::object::ObjectMappingException" , "selectors" : { "ObjectMappingException(String)" : 11}},{ "className" : "org::exoplatform::services::xml::querying::helper::XMLDataManager" , "selectors" : { "create(InputSource)" : 2 , "toFragment(XMLData)" : 14 , "toWellFormed(XMLData)" : 1}},{ "className" : "org::exoplatform::services::communication::message::impl::AccountListenerConfig" , "selectors" : { "getAccountName()" : 4 , "getProtocol()" : 3 , "getServer()" : 1}},{ "className" : "org::exoplatform::services::portletcontainer::impl::portletAPIImp::helpers::CustomResponseWrapper::ByteArrayServletOutputStream" , "selectors" : { "ByteArrayServletOutputStream(ByteArrayOutputStream)" : 1 , "close(???)" : 1 , "flush(???)" : 1}},{ "className" : "org::exoplatform::text::template::xhtml::Table" , "selectors" : { "Table()" : 4 , "add(Element)" : 4}},{ "className" : "org::exoplatform::services::portal::skin::model::Style" , "selectors" : { "Style(String,String)" : 1 , "getName()" : 10 , "getUrl()" : 2}},{ "className" : "javax::jcr::ReferenceValue" , "selectors" : { "ReferenceValue(String)" : 6}},{ "className" : "org::exoplatform::services::log::LogMessage" , "selectors" : { "LogMessage(String,int,String,String)" : 10 , "getDetail()" : 1 , "getMessage()" : 2 , "getName()" : 1 , "getType()" : 3}},{ "className" : "org::exoplatform::portal::faces::component::UIPortalForm" , "selectors" : { "getAncestorOfType(???)" : 1 , "setUIPortal(UIPortal)" : 2}},{ "className" : "org::exoplatform::services::grammar::wiki::impl::WikiEngineServiceImpl::ParsingContextFactory" , "selectors" : { "ParsingContextFactory(ServiceConfiguration)" : 1}},{ "className" : "org::exoplatform::services::jcr::impl::storage::rdb::container::data::SoftLinkValueRecord" , "selectors" : { "SoftLinkValueRecord()" : 1 , "SoftLinkValueRecord(String)" : 1 , "getValue()" : 1}},{ "className" : "org::exoplatform::services::organization::ldap::UserProfileData" , "selectors" : { "UserProfileData()" : 1 , "UserProfileData(String)" : 1 , "getUserProfile()" : 2 , "getXStream()::XppDriver" : 1 , "setUserProfile(UserProfile)" : 2}},{ "className" : "com::capeclear::www::GlobalWeather_xsd::Direction" , "selectors" : { "<Initializer>()::org" : 4 , "equals(Object)" : 3 , "getCompass()" : 4 , "getDegrees()" : 2 , "getString()" : 5 , "hashCode()" : 3}},{ "className" : "org::exoplatform::services::communication::sms::model::MessageImpl" , "selectors" : { "MessageImpl()" : 2}},{ "className" : "org::exoplatform::services::portletcontainer::pci::ActionInput" , "selectors" : { "ActionInput()" : 3 , "isStateChangeAuthorized()" : 1 , "setPortletMode(???)" : 13 , "setStateChangeAuthorized(boolean)" : 2 , "setWindowState(???)" : 3}},{ "className" : "org::exoplatform::services::jcr::impl::storage::filesystem::nodedata::NodeContainerResolver" , "selectors" : { "NodeContainerResolver()" : 2 , "create(File,NodeData)" : 1 , "isFile(String)" : 1 , "resolve(File,String)" : 5}},{ "className" : "org::exoplatform::services::xml::querying::impl::xtas::XTASMLStatement" , "selectors" : { "XTASMLStatement(InputStream)" : 3 , "XTASMLStatement(String)" : 5 , "XTASMLStatement(byte[])" : 1}},{ "className" : "org::exoplatform::portlets::exomvc::velocity::ListUserPage" , "selectors" : { "render(RenderRequest,RenderResponse)::VelocityContext" : 1}},{ "className" : "org::exoplatform::container::monitor::ActionData" , "selectors" : { "ActionData(String,String,String,long,Map)" : 5 , "getError()" : 3 , "getHandleTime()" : 2 , "getPage()" : 4 , "getParameters()" : 1 , "getPortal()" : 1 , "getRequestType()" : 1 , "setError(String)" : 1}},{ "className" : "org::exoplatform::faces::core::component::UIGrid" , "selectors" : { "UIGrid()" : 7 , "add(Row)" : 282 , "add(Rows)" : 12 , "clear()" : 6 , "encodeBegin(???)" : 2 , "getComponentRenderer(???)" : 1 , "getRows()" : 6}},{ "className" : "javax::naming::ldap::LdapContext" , "selectors" : { "getResponseControls()" : 4 , "setRequestControls(Control[])" : 6}},{ "className" : "org::exoplatform::services::communication::sms::provider::prodat::ProdatMessengerImpl" , "selectors" : { "ProdatMessengerImpl(Provider)" : 3 , "statusSending(Messages)" : 3}},{ "className" : "javax::jcr::SimpleCredentials" , "selectors" : { "SimpleCredentials(String,char[])" : 8 , "removeAttribute(String)" : 1}},{ "className" : "org::exoplatform::services::jcr::impl::core::NamespaceRegistryImpl" , "selectors" : { "getPrefixes()" : 2 , "getURI(String)" : 1 , "getURIMap()" : 5}},{ "className" : "org::exoplatform::container::monitor::jvm::v14::OperatingSystemInfoImpl" , "selectors" : { "getArch()" : 1 , "getAvailableProcessors()" : 1 , "getName()" : 1 , "getVersion()" : 1}},{ "className" : "org::exoplatform::services::communication::sms::model::LogonStatus" , "selectors" : { "LogonStatus(String)" : 3 , "equals(Object)" : 1}},{ "className" : "org::exoplatform::services::jcr::impl::storage::inmemory::WorkspaceContainerRegistry" , "selectors" : { "WorkspaceContainerRegistry()" : 1 , "getInstance()" : 1 , "getWorkspaceContainer(String,String)" : 1 , "initWorkspaceContainer(String,String)" : 1}},{ "className" : "org::exoplatform::services::communication::sms::provider::SmsResponse" , "selectors" : { "getMessages()" : 2 , "setMessages(Messages)" : 1 , "setResult(String)" : 2 , "translate()" : 2}},{ "className" : "org::exoplatform::commons::utils::ListenerStack" , "selectors" : { "ListenerStack()" : 2 , "ListenerStack(int)" : 12 , "add(Object)" : 3}},{ "className" : "javax::naming::directory::BasicAttributes" , "selectors" : { "BasicAttributes()" : 22 , "BasicAttributes(boolean)" : 7 , "put(Attribute)" : 48 , "put(String,Object)" : 46}},{ "className" : "org::exoplatform::portlets::communication::message::component::UIAccountConfiguration" , "selectors" : { "getAccountOwner()" : 1 , "getAccounts()" : 1 , "getSelectAccount()" : 1 , "getSelectAccountFolders()" : 1 , "getSibling(???)" : 4 , "updateAccountList()" : 3 , "updateSelectAccount(String)" : 3}},{ "className" : "org::exoplatform::services::jcr::impl::storage::rdb::container::data::LongValueRecord" , "selectors" : { "LongValueRecord(Long)" : 1 , "getValue()" : 1}},{ "className" : "org::exoplatform::services::organization::ldap::NewUserConfig::JoinGroup" , "selectors" : { "getGroupId()" : 1 , "getMembership()" : 1}},{ "className" : "org::exoplatform::container::configuration::PortalContainerInfo" , "selectors" : { "PortalContainerInfo(String)" : 1 , "getContainerName()" : 1}},{ "className" : "javax::jcr::nodetype::NodeTypeManager" , "selectors" : { "getNodeType(String)" : 13}},{ "className" : "org::exoplatform::services::xml::querying::impl::xtas::XTASMLContentHandler" , "selectors" : { "XTASMLContentHandler()" : 1 , "getDestinationId()" : 1 , "getMatch()" : 1 , "getNewValue()" : 1 , "getSourceId()" : 1 , "getType()" : 1}},{ "className" : "org::exoplatform::portlets::communication::forum::component::UIForumPortlet" , "selectors" : { "addHistoryElement(???)" : 14 , "getRenderedComponent(???)" : 2 , "undo()" : 1 , "undo()::UIComponent" : 1}},{ "className" : "org::exoplatform::services::wsrp::producer::impl::StateData" , "selectors" : { "StateData()" : 1 , "getDataObject()" : 9 , "setDataObject(Object)" : 1 , "setDataType(String)" : 1 , "setId(String)" : 1}},{ "className" : "org::exoplatform::services::organization::hibernate::OrganizationServiceListenerImpl" , "selectors" : { "createGroups(OrganizationService)" : 1 , "createMembershipTypes(OrganizationService)" : 1 , "createUsers(OrganizationService)" : 1}},{ "className" : "org::exoplatform::faces::core::component::UIFileUpload::UserInput" , "selectors" : { "UserInput(String,String,byte[])" : 1 , "getFileName()" : 1 , "getName()" : 1 , "getStream()" : 2 , "setName(String)" : 1}},{ "className" : "org::exoplatform::faces::search::component::model::DocumentDataHandler" , "selectors" : { "DocumentDataHandler()" : 1 , "getDescription()" : 1 , "getModule()" : 1 , "getScore()" : 1 , "getTitle()" : 1}},{ "className" : "org::exoplatform::services::xml::transform::html::HTMLTransformerService" , "selectors" : { "getTransformer()" : 3}},{ "className" : "org::exoplatform::portlets::jmx::component::model::MBeanDomain::MBeanDescription" , "selectors" : { "MBeanDescription(ObjectName)" : 1 , "getId()" : 3 , "getLabel()" : 1 , "getObjectName()" : 2}},{ "className" : "org::exoplatform::services::workflow::Form" , "selectors" : { "getResourceBundle()" : 6 , "getStateName()" : 2 , "getSubmitButtons()" : 3 , "getVariableFormats()" : 4}},{ "className" : "org::exoplatform::services::database::DatabaseService" , "selectors" : { "getDataSource(String)" : 3 , "getDatabaseType(String)" : 2}},{ "className" : "org::exoplatform::portlets::log::component::UILogMessages" , "selectors" : { "UILogMessages()" : 2 , "getLogMessages()" : 1 , "setLogMessages(List)" : 3}},{ "className" : "org::exoplatform::faces::user::validator::ValidUserValidator" , "selectors" : { "validate(FacesContext,UIComponent,Object)::ValidatorException" : 3}},{ "className" : "org::exoplatform::services::portletregistery::PortletRole" , "selectors" : { "getId()" : 11 , "getPortletRoleName()" : 5 , "setPortletRoleName(String)" : 3}},{ "className" : "org::exoplatform::portlet::faces::application::FacesPortletViewHandler" , "selectors" : { "FacesPortletViewHandler(???)" : 1}},{ "className" : "org::exoplatform::services::jcr::impl::storage::rdb::container::data::BooleanValueRecord" , "selectors" : { "BooleanValueRecord()" : 1 , "BooleanValueRecord(Boolean)" : 1 , "getValue()" : 1}},{ "className" : "org::exoplatform::services::portletcontainer::pci::model::Description" , "selectors" : { "Description()" : 1 , "getDescription()" : 3 , "getLang()" : 4 , "setDescription(String)" : 1 , "setLang(String)" : 1}},{ "className" : "org::exoplatform::portal::faces::component::UIPortal::ResolveLabelVisitor" , "selectors" : { "ResolveLabelVisitor(ResourceBundle)" : 1}},{ "className" : "javax::jcr::LoginException" , "selectors" : { "LoginException(String)" : 2 , "LoginException(String,Exception)" : 2}},{ "className" : "org::exoplatform::services::portletcontainer::pci::Output" , "selectors" : { "addProperty(String,Object)" : 4 , "getProperties()" : 10}},{ "className" : "org::exoplatform::portlets::content::explorer::component::UIJCRExplorer" , "selectors" : { "changeNode(String)" : 2 , "getCurrentNode()" : 3}},{ "className" : "org::exoplatform::services::xml::querying::UniFormTransformationException" , "selectors" : { "UniFormTransformationException(String)" : 14}},{ "className" : "org::exoplatform::services::jcr::impl::core::nodetype::nt::File" , "selectors" : { "File()" : 3}},{ "className" : "org::exoplatform::services::communication::sms::util::TestBean" , "selectors" : { "TestBean(String,String)" : 4 , "getName()" : 1}},{ "className" : "org::exoplatform::services::xml::querying::impl::xtas::BaseStatement" , "selectors" : { "addInstruction(String,String,UniFormTree)" : 3 , "getDestinationId()" : 1 , "getInstructions()" : 7 , "pickNextInstruction()" : 1 , "setDestinationId(String)" : 3 , "toString()" : 5}},{ "className" : "org::exoplatform::services::jcr::impl::storage::inmemory::RepositoryManagerImpl" , "selectors" : { "deleteLocationByUUID(String,String)" : 1 , "getLocationByUUID(String,String)" : 1 , "getReferenceTable(String)" : 5 , "getWorkspaceContainer(String)" : 4}},{ "className" : "org::exoplatform::services::communication::sms::provider::prodat::ProdatResponseImpl" , "selectors" : { "ProdatResponseImpl(Provider)" : 1 , "beautifyResponse()" : 1 , "select(XMLQueryingService,Query,String)" : 4}},{ "className" : "org::exoplatform::services::xml::querying::impl::xtas::Query" , "selectors" : { "Query()" : 2 , "Query(Statement)" : 23 , "Query(Statement,InputStream)" : 1 , "execute()" : 41 , "getResult()" : 12 , "loadSource(Resource)" : 3 , "prepare(Statement)" : 14 , "prepare(Statement,Object)" : 1 , "prepareNext(Statement)" : 7 , "serialize()" : 16 , "setDestination(String)" : 2 , "setInput(XMLData)" : 4 , "setInputStream(InputStream)" : 7}},{ "className" : "org::exoplatform::services::jcr::api::serialization::ExportDocViewTest" , "selectors" : { "initRepository()" : 3}},{ "className" : "org::exoplatform::services::wsrp::producer::impl::PersistentStateManagerImpl" , "selectors" : { "load(String)" : 12 , "remove(String)" : 3 , "save(String,String,Object)" : 4}},{ "className" : "org::exoplatform::services::jcr::impl::util::XMLWriter::Context" , "selectors" : { "Context(String)" : 1}},{ "className" : "org::exoplatform::services::wsrp::consumer::adapters::UserAdapter" , "selectors" : { "UserAdapter()" : 2}},{ "className" : "org::exoplatform::test::mocks::servlet::MockServletRequest" , "selectors" : { "MockServletRequest(???)" : 41 , "setParameter(String,Object)" : 4 , "setRemoteUser(String)" : 1}},{ "className" : "org::exoplatform::portlet::exomvc::config::PageConfig" , "selectors" : { "getPageDecorator()" : 1 , "getPageName()" : 8 , "getPageObject(Configuration)" : 3}},{ "className" : "org::exoplatform::services::wsrp::consumer::PortletRegistry" , "selectors" : { "addPortlet(WSRPPortlet)" : 4 , "existsPortlet(PortletKey)" : 1 , "getAllPortlets()" : 3 , "getPortlet(PortletKey)" : 1 , "removeAllPortlets()" : 1 , "removePortlet(PortletKey)" : 1}},{ "className" : "org::exoplatform::services::portal::model::Container" , "selectors" : { "Container()" : 4 , "addChild(Component)" : 3 , "findPortletByWindowId(String)" : 3 , "getChildren()" : 13 , "getTitle()" : 16 , "setTitle(String)" : 6 , "softCloneObject()" : 1}},{ "className" : "org::exoplatform::services::wsrp::consumer::UserSession" , "selectors" : { "getGroupSession(String)" : 3 , "getUserID()" : 2}},{ "className" : "com::capeclear::www::GlobalWeather_xsd::Layer" , "selectors" : { "<Initializer>()::org" : 5 , "getAltitude()" : 2 , "getExtent()" : 3 , "getString()" : 4 , "getType()" : 5}},{ "className" : "org::exoplatform::services::jcr::impl::core::itemfilters::AllAcceptedFilter" , "selectors" : { "AllAcceptedFilter()" : 3}},{ "className" : "org::exoplatform::faces::core::renderer::html::HtmlBasicRenderer" , "selectors" : { "appendLink(???)" : 1 , "encodeBegin(???)" : 2 , "encodeChildren(???)" : 1 , "getBaseURL(???)" : 1}},{ "className" : "org::exoplatform::portlet::faces::ExoFacesPortlet" , "selectors" : { "logError(Throwable,String)" : 1}},{ "className" : "org::exoplatform::services::portletcontainer::impl::PortletApplicationsHolder::PortletApplicationHelper" , "selectors" : { "PortletApplicationHelper(String,PortletApp,Collection)" : 1 , "getPortletApp()" : 2 , "getRoles()" : 1}},{ "className" : "org::exoplatform::portal::faces::component::UISinglePage" , "selectors" : { "UISinglePage()" : 1 , "getRendererType()" : 1 , "getUserCss()" : 3}},{ "className" : "javax::jcr::DateValue" , "selectors" : { "DateValue(Calendar)" : 14}},{ "className" : "org::exoplatform::services::portletcontainer::test::portlet::PortletToTestParameterNonEncoding" , "selectors" : { "render(RenderRequest,RenderResponse)::PortletException" : 1}},{ "className" : "org::exoplatform::faces::core::renderer::html::SimpleTabRenderer" , "selectors" : { "SimpleTabRenderer()" : 1 , "getTabBodyCssClass()" : 1 , "getTabCssClass()" : 1}},{ "className" : "org::exoplatform::faces::core::component::UIForm::Element" , "selectors" : { "Element(String)" : 3 , "getLabel()" : 2}},{ "className" : "org::exoplatform::portlets::backup::component::ZipFileFilter" , "selectors" : { "ZipFileFilter()" : 1}},{ "className" : "org::exoplatform::commons::exception::ObjectNotFoundException" , "selectors" : { "ObjectNotFoundException(String)" : 1}},{ "className" : "org::exoplatform::text::template::ResourceBindingValue" , "selectors" : { "ResourceBindingValue(String)" : 3 , "getKey()" : 1}},{ "className" : "org::exoplatform::services::jcr::config::RepositoryManagerEntry" , "selectors" : { "RepositoryManagerEntry(String,Class,Properties)" : 4 , "getName()" : 4 , "getParameters()" : 3 , "getType()" : 1}},{ "className" : "org::exoplatform::portlet::faces::context::ExternalContextImpl" , "selectors" : { "ExternalContextImpl(Object,Object,Object,boolean)" : 1 , "getConfig(???)" : 3 , "getResourceAsStream(String)" : 1 , "getWindowID()" : 2}},{ "className" : "org::exoplatform::test::web::condition::Condition" , "selectors" : { "checkCondition(???)" : 1 , "getDescription()" : 1 , "getName()" : 1}},{ "className" : "org::exoplatform::services::portletcontainer::impl::PortletApplicationHandler" , "selectors" : { "generateOutputForException(PortletRequestImp,boolean,String,Output)" : 5 , "getBundle(String,String,Locale)" : 2 , "initPools()" : 1 , "initPools()::StackObjectPool" : 1 , "process(???)" : 2}},{ "className" : "org::exoplatform::portlets::content::explorer::component::UIFileNodeInfo::RemoveNodeActionListener" , "selectors" : { "delete(File)" : 2}},{ "className" : "org::exoplatform::services::jcr::impl::storage::rdb::container::data::DateValueRecord" , "selectors" : { "DateValueRecord()" : 1 , "DateValueRecord(Calendar)" : 1 , "getValue()" : 1}},{ "className" : "org::exoplatform::services::portletcontainer::impl::portletAPIImp::utils::PortletSessionImpUtil" , "selectors" : { "encodePortletSessionAttribute(String,String,int)" : 3}},{ "className" : "org::exoplatform::portlets::communication::message::component::UIFolderForm" , "selectors" : { "getSibling(???)" : 2 , "setFormData(Account,Folder)" : 2}},{ "className" : "org::exoplatform::text::template::xhtml::Properties" , "selectors" : { "Properties()" : 6 , "add(String,String)" : 50 , "add(String,String,ObjectFormater)" : 7 , "addHeader(String)" : 3}},{ "className" : "org::exoplatform::portlets::communication::forum::component::UIAdminViewCategories" , "selectors" : { "UIAdminViewCategories(ForumService)" : 1 , "buildGrid()" : 2 , "getSibling(???)" : 4 , "update()" : 4}},{ "className" : "org::exoplatform::services::wsrp::producer::impl::utils::Utils" , "selectors" : { "testRegistration(???)" : 5}},{ "className" : "org::exoplatform::services::xml::transform::trax::TRAXTransformerService" , "selectors" : { "getTemplates(Source)" : 3 , "getTransformer(Source)" : 1}},{ "className" : "com::capeclear::www::GlobalWeather_wsdl::StationInfo" , "selectors" : { "searchByCode(String)" : 1 , "searchByName(String)" : 1}},{ "className" : "org::exoplatform::portlets::content::FileACL" , "selectors" : { "FileACL(String,String,String)" : 1}},{ "className" : "org::exoplatform::faces::core::component::model::Rows" , "selectors" : { "Rows(DataHandler,String,String)" : 12 , "add(Column)" : 61}},{ "className" : "org::exoplatform::faces::core::component::model::ListDataHandler" , "selectors" : { "begin()" : 3 , "end()" : 3 , "getCurrentObject()" : 2 , "getCurrentRow()" : 3 , "getDatas()" : 1 , "nextRow()" : 3 , "setDatas(List)" : 6}},{ "className" : "org::exoplatform::portal::portlet::struts::StrutsURLEncoder" , "selectors" : { "StrutsURLEncoder(String,String)" : 1 , "isStaticResource(String)" : 1}},{ "className" : "org::exoplatform::services::communication::sms::encoder::Resolver" , "selectors" : { "getFormatter(MessageFormat)" : 1 , "getOperationCode(MessageFormat)" : 1}},{ "className" : "org::exoplatform::faces::core::component::model::Column" , "selectors" : { "Column(String,String)" : 52 , "render(???)" : 1 , "renderHeader(???)" : 1 , "setCellClass(String)" : 6 , "setHeaderClass(String)" : 1}},{ "className" : "org::exoplatform::portlets::user::component::UIViewUserInGroup::GroupChangeObserver" , "selectors" : { "GroupChangeObserver()" : 1}},{ "className" : "org::exoplatform::services::jcr::impl::util::XMLWriter" , "selectors" : { "XMLWriter()" : 1 , "XMLWriter(Map)" : 6 , "endElement()" : 6 , "getBytes()" : 7 , "startElement(String,Properties)" : 6 , "writeAttribute(String,String)" : 2 , "writeText(String)" : 4}},{ "className" : "org::exoplatform::portlets::summary::component::UISummaryPortlet" , "selectors" : { "generateLink(String,String,String)" : 14}},{ "className" : "javax::jcr::PropertyType" , "selectors" : { "nameFromValue(int)" : 4 , "valueFromName(String)" : 1}},{ "className" : "javax::jcr::ValueFormatException" , "selectors" : { "ValueFormatException(String)" : 46 , "ValueFormatException(String,Exception)" : 7}},{ "className" : "org::exoplatform::services::communication::sms::provider::Provider" , "selectors" : { "getAdapter()" : 2 , "getMessenger()" : 1 , "getOperator()" : 10 , "getResolver()" : 1}},{ "className" : "org::exoplatform::services::communication::forum::hibernate::TopicBackup" , "selectors" : { "TopicBackup(TopicImpl,List)" : 1 , "getPosts()" : 1 , "getTopic()" : 1}},{ "className" : "org::exoplatform::services::xml::querying::impl::xtas::QueryProcessor" , "selectors" : { "QueryProcessor()" : 1 , "init(Command)" : 1 , "process(Command,UniFormTree)" : 1}},{ "className" : "org::exoplatform::services::wsrp::producer::RegistrationOperationsInterface" , "selectors" : { "deregister(???)" : 1 , "modifyRegistration(???)" : 1 , "register(???)" : 1}},{ "className" : "org::exoplatform::portlets::content::explorer::component::UIFileNodeEditor" , "selectors" : { "UIFileNodeEditor()" : 1 , "getAncestorOfType(???)" : 2}},{ "className" : "org::exoplatform::services::communication::forum::hibernate::WatcherNotifyListener::NotifyForumWatcherTask" , "selectors" : { "NotifyForumWatcherTask(MailService,Message)" : 1}},{ "className" : "org::exoplatform::faces::core::component::UIExoCommand" , "selectors" : { "addActionListener(Class,String)" : 266 , "addChild(Class)" : 9 , "findComponentById(String)" : 5 , "findDescendantsOfType(Class)" : 4 , "getAncestorOfType(???)" : 2 , "getBaseURL()" : 2 , "getChildComponentOfType(Class)" : 10 , "getClazz()" : 8 , "getFamily()" : 1 , "hasRole(String)" : 15 , "setClazz(String)" : 50 , "setId(String)" : 119 , "setRenderedComponent(Class)" : 12 , "setRenderedComponent(String)" : 4 , "setRenderedSibling(Class)" : 70 , "setRendererType(String)" : 71}},{ "className" : "org::exoplatform::portal::faces::component::UIPortletCategories" , "selectors" : { "UIPortletCategories(PortletRegisteryService,UIPortletCategory,UIPortletInfo)" : 1 , "getPortletCaterories()" : 2 , "hasCategory()" : 1 , "reset()" : 4}},{ "className" : "org::exoplatform::faces::search::renderer::html::ViewDocumentRenderer" , "selectors" : { "ViewDocumentRenderer()" : 1}},{ "className" : "org::exoplatform::portlets::monitor::portlet::component::UIPortletApplicationMonitor" , "selectors" : { "UIPortletApplicationMonitor()" : 1 , "getPortletApplicationData()" : 1 , "setPortletApplicationData(PortletApplicationData)" : 2}},{ "className" : "org::exoplatform::services::xml::querying::impl::xtas::util" , "selectors" : { "getFileContent(String)" : 5 , "packXmlString(String)" : 6 , "print(Node)" : 2 , "sortAttributes(NamedNodeMap)" : 1}},{ "className" : "org::exoplatform::faces::core::component::UICheckBox" , "selectors" : { "UICheckBox(String,String)" : 11 , "getSelect()" : 7 , "getValue()" : 5 , "setSelect(boolean)" : 11}},{ "className" : "org::exoplatform::faces::core::component::UICommandNode" , "selectors" : { "addObserver(UIComponentObserver)" : 2 , "broadcastOnChange()" : 1 , "encodeChildren(???)" : 1 , "setName(String)" : 3}},{ "className" : "org::exoplatform::services::organization::ldap::BaseHandler" , "selectors" : { "escapeDN(String)" : 4 , "explodeDN(Name,boolean)" : 8 , "getAttribute(Attributes,String)" : 18 , "getAttributes(Attributes,String)" : 5 , "getDNFromUsername(String)" : 15 , "getGroupByDN(String)" : 4 , "getGroupDNFromGroupId(String)" : 10 , "getGroupFromMembershipDN(String)" : 4}},{ "className" : "org::exoplatform::portlets::workflow::component::UITask" , "selectors" : { "extractAttribute(List,String)" : 2 , "getParent(???)" : 5 , "getRemoteUser()" : 3 , "prepareVariables(Form,UIStringInput[])" : 3 , "setIdentification(Long)" : 2 , "setIsStart(boolean)" : 2 , "updateUITree()" : 2}},{ "className" : "org::exoplatform::services::portletcontainer::monitor::CachedData" , "selectors" : { "getContent()" : 1 , "getMode(???)" : 1 , "getTitle()" : 1 , "getWindowState(???)" : 1}},{ "className" : "org::exoplatform::services::organization::impl::MembershipTypeImpl" , "selectors" : { "MembershipTypeImpl()" : 5 , "MembershipTypeImpl(String,String,String)" : 3 , "getName()" : 1 , "setCreatedDate(Date)" : 2 , "setDescription(String)" : 2 , "setModifiedDate(Date)" : 2 , "setName(String)" : 2}},{ "className" : "org::exoplatform::portlets::communication::sms::component::UISmsAdminForm::SaveSmsConfigActionListener" , "selectors" : { "execute(ExoActionEvent)::FacesMessage" : 1}},{ "className" : "org::exoplatform::services::organization::hibernate::UserProfileData" , "selectors" : { "UserProfileData()" : 1 , "UserProfileData(String)" : 1 , "getUserProfile()" : 2 , "getXStream()::XppDriver" : 1 , "setUserProfile(UserProfile)" : 2}},{ "className" : "org::exoplatform::portal::faces::component::UIPageModelForm" , "selectors" : { "getAncestorOfType(???)" : 1 , "getSibling(???)" : 1 , "getTemplates(String,PortalConfigService)" : 1}},{ "className" : "org::exoplatform::services::task::impl::TaskServiceImpl" , "selectors" : { "dequeueRepeatTasks()" : 1 , "dequeueTasks()" : 1 , "runTasks(Collection)" : 2}},{ "className" : "org::exoplatform::services::xml::querying::impl::xtas::resource::plugins::LocalFile" , "selectors" : { "LocalFile(String)" : 3}},{ "className" : "org::exoplatform::services::jcr::impl::RepositoryServiceImpl" , "selectors" : { "getRepository(String)" : 1 , "init(PortalContainer)" : 1 , "init(PortalContainer)::ComponentParameter" : 1 , "init(PortalContainer)::ConstantParameter" : 5 , "init(PortalContainer)::DefaultComponentAdapterFactory" : 1}},{ "className" : "org::exoplatform::faces::core::renderer::xhtmlmp::SimpleFormRenderer" , "selectors" : { "SimpleFormRenderer()" : 2 , "getLabel(String)" : 2}},{ "className" : "org::exoplatform::services::portletcontainer::test::portlet::PortletToTestSecurityInfoFromRequest" , "selectors" : { "processAction(ActionRequest,ActionResponse)::PortletException" : 6}},{ "className" : "org::exoplatform::faces::core::renderer::html::ThreeImagePatternButton" , "selectors" : { "ThreeImagePatternButton(String,String)" : 3}},{ "className" : "org::exoplatform::services::portletcontainer::test::portlet::PortletToTestPortletURL2" , "selectors" : { "render(RenderRequest,RenderResponse)::PortletException" : 1}},{ "className" : "org::exoplatform::services::organization::MembershipEventListener" , "selectors" : { "postDelete(Membership,XResources)" : 2 , "postSave(Membership,boolean,XResources)" : 2 , "preDelete(Membership,XResources)" : 2 , "preSave(Membership,boolean,XResources)" : 2}},{ "className" : "org::exoplatform::services::jcr::impl::core::nodetype::NodeDefImpl" , "selectors" : { "NodeDefImpl()" : 1 , "NodeDefImpl(String,String[],String,String[],String[],boolean,boolean,int,boolean,boolean,boolean)" : 10 , "getName()" : 4}},{ "className" : "org::exoplatform::services::xml::transform::trax::TRAXTemplates" , "selectors" : { "newTransformer()" : 7}},{ "className" : "org::exoplatform::test::mocks::servlet::MockServletResponse" , "selectors" : { "MockServletResponse(???)" : 37 , "reset()" : 1}},{ "className" : "org::exoplatform::faces::core::component::model::Row" , "selectors" : { "Row()" : 263 , "add(???)" : 7 , "add(Cell)" : 491 , "isVisible()" : 1 , "render(???)" : 2 , "setClazz(String)" : 9 , "setVisible(boolean)" : 7}},{ "className" : "org::exoplatform::services::portletcontainer::test::portlet::PortletWithNonPermanentUnavailibiltyInProcessActionAndRender" , "selectors" : { "processAction(ActionRequest,ActionResponse)::UnavailableException" : 1 , "render(RenderRequest,RenderResponse)::UnavailableException" : 1}},{ "className" : "org::exoplatform::portlets::weather::component::UISelectList" , "selectors" : { "getOptions()" : 4 , "getValue()" : 2 , "setValue(String)" : 2}},{ "className" : "org::exoplatform::portlets::backup::component::model::ImportData" , "selectors" : { "ImportData(File)" : 1 , "getCreatedDate()" : 2 , "getEntries()" : 1 , "getJarFile()" : 1 , "getModifiedDate()" : 2 , "getName()" : 4}},{ "className" : "org::exoplatform::faces::core::component::model::Button" , "selectors" : { "Button(String,Parameter[])" : 52 , "render(???)" : 4 , "setActivate(boolean)" : 2}},{ "className" : "org::exoplatform::portlets::communication::forum::component::UICategory" , "selectors" : { "UICategory(ForumService,Category)" : 1 , "getAncestorOfType(???)" : 1 , "getParent(???)" : 1}},{ "className" : "org::exoplatform::services::xml::transform::impl::trax::TRAXTransformerImpl" , "selectors" : { "TRAXTransformerImpl()" : 1 , "TRAXTransformerImpl(Source)" : 1 , "TRAXTransformerImpl(Templates)" : 1 , "getTransformer()" : 11 , "getXMLReader()" : 3}},{ "className" : "org::exoplatform::portal::filter::Util" , "selectors" : { "removeAttribute(???)" : 2}},{ "className" : "org::exoplatform::xml::object::XMLMap" , "selectors" : { "XMLMap(Map)" : 1 , "getEntryIterator()" : 1 , "getMap()" : 1}},{ "className" : "org::exoplatform::portlets::content::explorer::component::model::FileNodeDescriptor" , "selectors" : { "FileNodeDescriptor(File,String,String)" : 2 , "getCacheContent()" : 5 , "getUri()" : 1 , "setCacheContent(String)" : 3}},{ "className" : "org::exoplatform::portlets::communication::sms::component::UISmsRecipients" , "selectors" : { "UISmsRecipients(LogService,SmsService)" : 1 , "UISmsRecipients(LogService,SmsService)::UIOutput" : 1}},{ "className" : "org::exoplatform::portal::faces::component::UIPortletForm" , "selectors" : { "getAncestorOfType(???)" : 1 , "setEditingPortlet(UIPortlet)" : 1}},{ "className" : "org::exoplatform::services::workflow::WorkflowServiceContainer" , "selectors" : { "createWorkflowDefinitionService()" : 2 , "createWorkflowExecutionService()" : 10}},{ "className" : "org::exoplatform::services::xml::transform::BaseTest" , "selectors" : { "getTimeStamp()" : 5 , "validateXML(InputStream)" : 3}},{ "className" : "org::exoplatform::portlets::communication::message::component::UIViewMessage" , "selectors" : { "getFormat()" : 1 , "getMessage()" : 1 , "getParent(???)" : 4 , "getSibling(???)" : 3 , "setMessage(Message)" : 2}},{ "className" : "org::exoplatform::services::xml::querying::XMLFragmentData" , "selectors" : { "getAsNodeList()" : 14}},{ "className" : "org::exoplatform::services::portletcontainer::impl::portletAPIImp::persistenceImp::PersistenceManager" , "selectors" : { "getWindow(Input,ExoPortletPreferences)" : 5}},{ "className" : "org::exoplatform::services::organization::ldap::ActiveDirectoryGroupHandler" , "selectors" : { "findGroups(String,String)" : 2 , "findMembershipDNBySID(byte[],String)" : 1}},{ "className" : "javax::jcr::UnsupportedRepositoryOperationException" , "selectors" : { "UnsupportedRepositoryOperationException(String)" : 16 , "UnsupportedRepositoryOperationException(String,Exception)" : 1}},{ "className" : "org::exoplatform::portal::html::PortalProviderRenderer" , "selectors" : { "renderLink(???)" : 1 , "renderMeta(???)" : 1 , "renderScript(???)" : 1 , "renderTitle(???)" : 1}},{ "className" : "org::exoplatform::portlets::wsrp::PortletSessionImpl" , "selectors" : { "PortletSessionImpl(String)" : 1}},{ "className" : "org::exoplatform::services::portletcontainer::pci::model::PortletApp" , "selectors" : { "PortletApp()" : 1 , "addCustomPortletMode(CustomPortletMode)" : 1 , "addCustomWindowState(CustomWindowState)" : 1 , "addPortlet(Portlet)" : 1 , "addSecurityConstraint(SecurityConstraint)" : 1 , "addUserAttribute(UserAttribute)" : 1 , "getCustomPortletMode()" : 4 , "getCustomWindowState()" : 6 , "getPortlet()" : 12 , "getSecurityConstraint()" : 5 , "getUserAttribute()" : 5 , "setVersion(String)" : 1}},{ "className" : "javax::management::MBeanFeatureInfo" , "selectors" : { "MBeanFeatureInfo(String,String)" : 15 , "equals(Object)" : 8 , "getDescription()" : 101 , "getName()" : 279 , "hashCode()" : 2 , "toString()" : 5}},{ "className" : "org::exoplatform::services::xml::querying::impl::xtas::resource::ResourceResolver" , "selectors" : { "ResourceResolver()" : 1 , "getInstance()" : 3 , "getResource(String)" : 3}},{ "className" : "org::exoplatform::commons::exception::ExoException" , "selectors" : { "getSeverity()" : 2}},{ "className" : "org::exoplatform::portlets::communication::sms::component::UISmsForm::SendSmsActionListener" , "selectors" : { "execute(ExoActionEvent)::FacesMessage" : 6}},{ "className" : "org::exoplatform::container::configuration::ValuesParam" , "selectors" : { "ValuesParam()" : 1 , "addValue(String)" : 1 , "getValue()" : 4 , "getValues()" : 2}},{ "className" : "org::exoplatform::services::portletcontainer::impl::config::SharedSession" , "selectors" : { "SharedSession()" : 1 , "getEnable()" : 1 , "setEnable(String)" : 1}},{ "className" : "java::util::ResourceBundle" , "selectors" : { "getBundle(String)" : 164 , "getBundle(String,Locale)" : 245 , "getBundle(String,Locale,ClassLoader)" : 64 , "getKeys()" : 33 , "getLocale()" : 28 , "getObject(String)" : 45 , "getString(String)" : 2110 , "getStringArray(String)" : 2 , "keySet()" : 1 , "setParent(ResourceBundle)" : 2}},{ "className" : "org::exoplatform::portlet::cocoon::URLRewriter" , "selectors" : { "URLRewriter()" : 2 , "getTemplates()" : 1 , "rewrite(InputStream,OutputStream,String,String)" : 3}},{ "className" : "org::exoplatform::services::resources::impl::ExoResourceBundle" , "selectors" : { "ExoResourceBundle(InputStream,ResourceBundle)" : 1}},{ "className" : "org::exoplatform::services::portletcontainer::test::portlet::PortletToTestNonPropagationOfActionParamToRender" , "selectors" : { "processAction(ActionRequest,ActionResponse)::PortletException" : 1 , "render(RenderRequest,RenderResponse)::PortletException" : 1}},{ "className" : "org::exoplatform::container::client::ClientInfo" , "selectors" : { "getClientName()" : 1 , "getIpAddress()" : 1 , "getRemoteUser()" : 1}},{ "className" : "org::exoplatform::services::portletregistery::impl::TestPortletRegistery::MockPortletRuntimeData" , "selectors" : { "MockPortletRuntimeData(String,String)" : 3}},{ "className" : "org::exoplatform::services::jcr::util::PathUtil" , "selectors" : { "getAncestorPath(String,int)" : 4 , "getDepth(String)" : 7 , "isDescendant(String,String,boolean)" : 12 , "makeCanonicalPath(String)" : 12 , "makeCanonicalPath(String,String)" : 1 , "rewriteSuffix(String,String,String)" : 2}},{ "className" : "org::exoplatform::services::organization::impl::UserImpl" , "selectors" : { "UserImpl()" : 7 , "getFirstName()" : 1 , "getLastName()" : 1}},{ "className" : "org::exoplatform::services::wsrp::consumer::User" , "selectors" : { "getUserContext(???)" : 1 , "getUserID()" : 3 , "setUserContext(???)" : 2 , "setUserID(String)" : 2}},{ "className" : "com::capeclear::www::GlobalWeather_xsd::Extreme" , "selectors" : { "<Initializer>()::org" : 5 , "getHours()" : 2 , "getString()" : 4 , "getTemperature()" : 4 , "getType()" : 4}},{ "className" : "javax::jcr::BooleanValue" , "selectors" : { "BooleanValue(Boolean)" : 3 , "BooleanValue(boolean)" : 8}},{ "className" : "org::exoplatform::services::portletcontainer::impl::PortletContainerServiceImpl" , "selectors" : { "getAllPortletMetaData()" : 2 , "getPortletModes(String,String,String)" : 4 , "getWindowStates(String)" : 1 , "isModeSuported(???)" : 10 , "processAction(???)" : 18 , "render(???)" : 58}},{ "className" : "org::exoplatform::faces::core::renderer::html::SimpleFormButtonRenderer" , "selectors" : { "SimpleFormButtonRenderer()" : 1}},{ "className" : "org::exoplatform::services::communication::forum::hibernate::WatcherImpl" , "selectors" : { "WatcherImpl(Forum)" : 1 , "WatcherImpl(Topic)" : 1 , "getId()" : 1 , "setId(String)" : 1}},{ "className" : "org::exoplatform::text::template::ListBeanDataHandler" , "selectors" : { "ListBeanDataHandler(Class)" : 4 , "getBeans()" : 1 , "setBeans(List)" : 3 , "setBeans(Object[])" : 1}},{ "className" : "org::exoplatform::services::communication::sms::provider::SmsRequest" , "selectors" : { "getMessages()" : 3 , "getPayload()" : 4 , "prepare()" : 1 , "setMessages(Messages)" : 1}},{ "className" : "javax::jcr::ItemNotFoundException" , "selectors" : { "ItemNotFoundException(String)" : 3 , "ItemNotFoundException(String,Exception)" : 2}},{ "className" : "org::exoplatform::portlets::console::component::UIAdminConsolePortlet" , "selectors" : { "addExoMonitors()" : 1 , "addJVMManagement()" : 1 , "addLogNode()" : 1 , "getComponent(String)" : 6}},{ "className" : "org::exoplatform::services::portal::skin::model::Decorator" , "selectors" : { "Decorator()" : 1 , "addStyle(Style)" : 1 , "getRendererType()" : 5 , "getStyles()" : 9 , "setRendererType(String)" : 1}},{ "className" : "org::exoplatform::portlets::user::component::UIGroupForm" , "selectors" : { "getSibling(???)" : 1 , "setParentGroup(String)" : 1}},{ "className" : "javax::jcr::BaseValue" , "selectors" : { "BaseValue(int)" : 14 , "getStream()" : 1 , "setStreamConsumed()" : 2 , "setValueConsumed()" : 40}},{ "className" : "org::exoplatform::services::portal::log::impl::PortalLogServiceImpl" , "selectors" : { "getSessionLogData(String)" : 1 , "getXStreamInstance()::XppDriver" : 1 , "getXStreamInstance(???)" : 2 , "saveSessionLogData(SessionLogData)" : 1}},{ "className" : "org::exoplatform::container::monitor::jvm::JVMRuntimeInfo" , "selectors" : { "getSystemPropertiesAsText()" : 1 , "isManagementSupported()" : 1}},{ "className" : "org::exoplatform::container::groovy::GroovyManagerContainer" , "selectors" : { "getGroovyManager(URL)" : 4 , "removeGroovyManager(URL)" : 1}},{ "className" : "org::exoplatform::services::communication::sms::encoder::VCardFormatter" , "selectors" : { "VCardFormatter()" : 1 , "getInstance()" : 1}},{ "className" : "org::exoplatform::services::cache::test::BaseCacheTest" , "selectors" : { "BaseCacheTest(String)" : 1}},{ "className" : "org::exoplatform::portlets::monitor::portlet::renderer::html::PortletApplicationMonitorRenderer" , "selectors" : { "formatTime(long,Date)" : 4}},{ "className" : "org::exoplatform::services::wsrp::bind::WSRP_v1_ServiceDescription_Binding_SOAPImpl" , "selectors" : { "WSRP_v1_ServiceDescription_Binding_SOAPImpl()" : 3}},{ "className" : "org::exoplatform::portlets::communication::sms::component::UISmsMonitor" , "selectors" : { "UISmsMonitor(SmsMonitorService,ResourceBundle)::UIOutput" : 4 , "updateCounter()" : 1}},{ "className" : "org::exoplatform::services::communication::message::MailService" , "selectors" : { "getMailSession(???)" : 1 , "sendMessage(Message)" : 2}},{ "className" : "org::exoplatform::portal::faces::component::UIBody" , "selectors" : { "UIBody(Body,String)" : 1 , "getBodyComponent(???)" : 3 , "getParent(???)" : 1 , "initDefaultBodyComponent()" : 1 , "processDecodes(???)" : 1 , "setBodyComponent(???)" : 1 , "setBodyMode(int)" : 6 , "setLastBodyComponent()" : 1}},{ "className" : "org::exoplatform::portlets::monitor::portlet::component::UIPortalMonitor" , "selectors" : { "getAverageExecutionTime()" : 1 , "getMaxExecutionTime()" : 1 , "getMinExecutionTime()" : 1 , "getRequestCounter()" : 1 , "getRequestMonitorData()" : 1}},{ "className" : "org::exoplatform::faces::core::component::UIDateInput" , "selectors" : { "UIDateInput(String,Date)" : 8 , "getCalendar()" : 2 , "getMaxYearRange()" : 1 , "getMinYearRange()" : 1 , "getParent(???)" : 1 , "getValue()" : 8 , "setValue(Date)" : 1}},{ "className" : "org::exoplatform::services::wsrp::consumer::WSRPPortlet" , "selectors" : { "getParent()" : 6 , "getPortletContext(???)" : 7 , "getPortletKey()" : 8 , "isConsumerConfigured()" : 1 , "setParent(String)" : 2 , "setPortletContext(???)" : 2 , "setPortletKey(PortletKey)" : 1}},{ "className" : "org::exoplatform::services::xml::querying::object::ObjectMarshalException" , "selectors" : { "ObjectMarshalException(String)" : 13}},{ "className" : "org::exoplatform::commons::xml::ExoXMLSerializer" , "selectors" : { "ExoXMLSerializer()" : 1 , "attribute(???)" : 1 , "element(String,String,String)" : 12 , "endDocument(???)" : 1 , "endTag(???)" : 9 , "getInstance()" : 1 , "setOutput(???)" : 1 , "setProperty(???)" : 2 , "startDocument(???)" : 1 , "startTag(???)" : 9 , "text(???)" : 2}},{ "className" : "org::exoplatform::container::jmx::MX4JRegistrationException" , "selectors" : { "MX4JRegistrationException(String,Exception)" : 2}},{ "className" : "javax::security::auth::login::LoginException" , "selectors" : { "LoginException(String)" : 38}},{ "className" : "org::exoplatform::services::jcr::impl::core::ItemImpl" , "selectors" : { "ItemImpl(String)" : 6 , "getAncestor(int)" : 1 , "getDepth()" : 2 , "getName()" : 24 , "getParent()" : 5 , "getPath()" : 56 , "isItemIdentical(Item)" : 1 , "setTicket(TicketImpl)" : 13}},{ "className" : "org::exoplatform::test::web::unit::SubmitFormUnit::CheckboxParameter" , "selectors" : { "CheckboxParameter(String,boolean)" : 1}},{ "className" : "org::exoplatform::services::portletcontainer::pci::RenderInput" , "selectors" : { "RenderInput()" : 3 , "getRenderParameters()" : 1 , "getTitle()" : 2 , "isUpdateCache()" : 1 , "setPortletMode(???)" : 12 , "setRenderParameters(Map)" : 9 , "setTitle(String)" : 1 , "setUpdateCache(boolean)" : 4 , "setWindowState(???)" : 5}},{ "className" : "org::exoplatform::text::template::StringValue" , "selectors" : { "StringValue(String)" : 3 , "getValue()" : 1}},{ "className" : "org::exoplatform::portlets::monitor::portlet::component::model::PortletApplicationData" , "selectors" : { "PortletApplicationData(String)" : 1 , "getPortletAppName()" : 1 , "getPortletRuntimeData(String)" : 1 , "getPortletRuntimeDatas()" : 2 , "isSelect()" : 3 , "put(PortletRuntimeData)" : 1 , "setSelect(boolean)" : 2}},{ "className" : "org::exoplatform::commons::exception::ExoPermissionException" , "selectors" : { "ExoPermissionException(String,String)" : 3 , "getMessage(ResourceBundle)" : 1}},{ "className" : "java::lang::InterruptedException" , "selectors" : { "InterruptedException()" : 29 , "InterruptedException(String)" : 8}},{ "className" : "org::exoplatform::faces::core::event::ExoActionEvent" , "selectors" : { "ExoActionEvent(???)" : 13 , "addParameter(String,String)" : 2 , "getAction()" : 9 , "getApplicationResourceBundle()" : 2 , "getComponent(???)" : 152 , "getParameter(String)" : 71 , "getParameterValues(String)" : 1 , "getSource(???)" : 79}},{ "className" : "org::exoplatform::text::template::DataHandler" , "selectors" : { "getValue(DataBindingValue)" : 2 , "getValueAsString(DataBindingValue)" : 2}},{ "className" : "org::exoplatform::services::communication::message::MessageProtocolPlugin" , "selectors" : { "getProtocol()" : 1 , "sendMessage(Account,Message)" : 1 , "synchronize(Account)" : 1}},{ "className" : "org::exoplatform::portlet::exomvc::VelocityPage" , "selectors" : { "render(???)" : 1 , "render(RenderRequest,RenderResponse)::VelocityContext" : 1 , "setTemplate(String)" : 1}},{ "className" : "org::exoplatform::services::organization::ldap::OrganizationConfig::Group" , "selectors" : { "getDescription()" : 1 , "getName()" : 1 , "getParentId()" : 1}},{ "className" : "org::exoplatform::container::groovy::ExoGroovyComponentAdapter" , "selectors" : { "ExoGroovyComponentAdapter(GroovyObject)" : 2 , "getComponentInstance(???)" : 1 , "getComponentInstance(PicoContainer)::PicoInitializationException" : 1}},{ "className" : "org::exoplatform::services::workflow::format::BasicDateFormat" , "selectors" : { "updateFormat()" : 3}},{ "className" : "org::exoplatform::services::communication::sms::encoder::VCalendarFormatter" , "selectors" : { "VCalendarFormatter()" : 1 , "getInstance()" : 1}},{ "className" : "org::exoplatform::services::portletcontainer::ExoPortletContext" , "selectors" : { "getWrappedServletContext(???)" : 1 , "isSessionShared()" : 2 , "send(???)" : 2}},{ "className" : "org::exoplatform::services::workflow::Form::Attribute" , "selectors" : { "Attribute(String,Object)" : 2 , "getName()" : 9 , "getValue()" : 3}},{ "className" : "org::exoplatform::services::communication::message::MessageService" , "selectors" : { "addMessageProtocolPlugin(MessageProtocolPlugin)" : 1 , "countNewMessages(Account)" : 1 , "createAccount(Account)" : 8 , "createAccountInstance()" : 2 , "createAttachment()" : 1 , "createFolder(Account,Folder)" : 5 , "createFolderInstance()" : 2 , "createMessage(Account,Folder,Message)" : 3 , "createMessageInstance()" : 2 , "getAccount(String,String)" : 1 , "getAccounts(String)" : 6 , "getAttachments(Message)" : 2 , "getFolder(Account,String)" : 8 , "getFolders(String)" : 8 , "getMessage(String)" : 5 , "getMessages(Folder)" : 7 , "getSupportedFlags()" : 1 , "moveMessage(Account,Folder,Message)" : 3 , "removeAccount(Account)" : 8 , "removeFolder(Folder)" : 5 , "removeMessage(Message)" : 2 , "sendMessage(Account,Message)" : 2 , "synchronizeAccount(Account)" : 2 , "updateAccount(Account)" : 1 , "updateFolder(Folder)" : 1 , "updateMessage(Message)" : 1}},{ "className" : "org::exoplatform::portlets::monitor::jvm::component::UIClassInfo::ClassInfoDataHandler" , "selectors" : { "ClassInfoDataHandler(ClassLoadingMXBean,CompilationMXBean)" : 1}},{ "className" : "org::exoplatform::services::wsrp::producer::MarkupOperationsInterface" , "selectors" : { "getMarkup(???)" : 1 , "initCookie(???)" : 1 , "performBlockingInteraction(???)" : 1 , "releaseSessions(???)" : 1}},{ "className" : "org::exoplatform::text::template::xhtml::Cell" , "selectors" : { "Cell(String)" : 5 , "addArribute(String,String)" : 1}},{ "className" : "org::exoplatform::portal::faces::component::PortalComponentCache" , "selectors" : { "getPortalComponent(Class)" : 1 , "getUIPage(Node,UIPortal)" : 2 , "removeUIPageFromCache(String)" : 1}},{ "className" : "org::exoplatform::services::portletcontainer::impl::monitor::CachedDataImpl" , "selectors" : { "CachedDataImpl()" : 5 , "getLastAccessTime()" : 1 , "setContent(char[])" : 2 , "setLastAccessTime(long)" : 2 , "setMode(???)" : 2 , "setTitle(String)" : 2 , "setWindowState(???)" : 2}},{ "className" : "org::exoplatform::portlets::monitor::session::component::UIActionHistory" , "selectors" : { "getActionHistory()" : 1 , "setActionHistory(Class,List)" : 2}},{ "className" : "org::exoplatform::commons::utils::ExceptionUtil" , "selectors" : { "getExoStackTrace(Throwable)" : 12 , "getRootCause(Throwable)" : 8 , "getStackTrace(Throwable,int)" : 6}},{ "className" : "org::exoplatform::services::wsrp::consumer::impl::URLTemplateComposerImpl" , "selectors" : { "appendParameters(StringBuffer)" : 8 , "manageServerPath(StringBuffer,String)" : 8}},{ "className" : "org::exoplatform::portlet::exomvc::config::VelocityResourceManager" , "selectors" : { "VelocityResourceManager(???)" : 1 , "VelocityResourceManager(PortletContext,String)::VelocityEngine" : 1 , "getTemplate(???)" : 1}},{ "className" : "org::exoplatform::services::portletcontainer::pci::WindowID" , "selectors" : { "generateKey()" : 5 , "getOwner()" : 4 , "getPortletApplicationName()" : 8 , "getPortletName()" : 6 , "getUniqueID()" : 6}},{ "className" : "org::exoplatform::services::portal::impl::DefaultPortalServiceInterceptor" , "selectors" : { "createPageNode(NodeImpl)" : 2}},{ "className" : "org::exoplatform::services::jcr::impl::core::NodesModificationManager::PathComparator" , "selectors" : { "PathComparator()" : 1}},{ "className" : "org::exoplatform::portlets::portletregistery::component::UIPortletList" , "selectors" : { "getAllPortletMetaData()" : 1 , "getBaseURL(???)" : 1 , "setPortletCategoryData(PortletCategoryData)" : 1}},{ "className" : "org::exoplatform::services::portletcontainer::pci::CustomWindowStateWithDescription" , "selectors" : { "CustomWindowStateWithDescription(???)" : 1 , "getDescriptions()" : 1 , "getWindowState(???)" : 2}},{ "className" : "org::exoplatform::container::PortalContainer" , "selectors" : { "PortalContainer(???)" : 2 , "createSessionContainer(String,String)" : 10 , "getComponent(Class)" : 15 , "getComponentInstance(???)" : 23 , "getComponentInstanceOfType(???)" : 179 , "getComponentInstancesOfType(???)" : 2 , "getGroovyManager()" : 1 , "getInstance()" : 161 , "getLiveSessions()" : 2 , "getMBeanServer()" : 1 , "getMonitor()" : 2 , "getParent(???)" : 2 , "getPortalServletContext(???)" : 2 , "getThisContainer()" : 1 , "isStarted()" : 1 , "registerComponent(???)" : 3 , "registerComponentImplementation(???)" : 1 , "registerComponentInstance(???)" : 5 , "removeSessionContainer(String)" : 5 , "setGroovyManager(GroovyManager)" : 2 , "setInstance(PortalContainer)" : 25 , "start()" : 2 , "stop()" : 1 , "unregisterComponent(???)" : 1}},{ "className" : "javax::security::auth::callback::PasswordCallback" , "selectors" : { "PasswordCallback(String,boolean)" : 5 , "clearPassword()" : 2 , "getPassword()" : 6 , "setPassword(char[])" : 7}},{ "className" : "org::exoplatform::services::jcr::impl::storage::rdb::container::data::ReferenceValueRecord" , "selectors" : { "ReferenceValueRecord()" : 1 , "ReferenceValueRecord(String)" : 1 , "getValue()" : 1}},{ "className" : "org::exoplatform::services::portletcontainer::event::DefaultPortletMessage" , "selectors" : { "DefaultPortletMessage(String)" : 2 , "getMessage()" : 2}},{ "className" : "org::exoplatform::services::xml::querying::impl::xtas::object::ObjectMarshaller" , "selectors" : { "loadMapping(Object)" : 3 , "marshal(Object)" : 1 , "unmarshal(Document)" : 2}},{ "className" : "org::exoplatform::services::wsrp::exceptions::Exception2Fault" , "selectors" : { "getNameSpace(String)" : 1 , "handleException(WSRPException)" : 33 , "handleException(WSRPException)::AxisFault" : 1}},{ "className" : "org::exoplatform::commons::map::RequestMap" , "selectors" : { "RequestMap(???)" : 1}},{ "className" : "org::exoplatform::services::jcr::impl::core::NodeChangeState" , "selectors" : { "getStateName(int)" : 5}},{ "className" : "org::exoplatform::portlets::content::explorer::component::UIChildrenInfo" , "selectors" : { "getAncestorOfType(???)" : 1 , "getChildren(UIExplorer,NodeDescriptor)" : 1 , "onChange(UIExplorer,NodeDescriptor)" : 1}},{ "className" : "javax::jcr::DoubleValue" , "selectors" : { "DoubleValue(Double)" : 2 , "DoubleValue(double)" : 12}},{ "className" : "org::exoplatform::portlets::content::ACL" , "selectors" : { "hasWriteRole(NodeDescriptor)" : 1}},{ "className" : "org::exoplatform::services::idgenerator::IDGeneratorService" , "selectors" : { "generateStringID(Object)" : 10}},{ "className" : "org::exoplatform::services::organization::MembershipType" , "selectors" : { "getCreatedDate()" : 1 , "getDescription()" : 7 , "getModifiedDate()" : 1 , "getName()" : 8 , "getOwner()" : 1 , "setCreatedDate(Date)" : 3 , "setDescription(String)" : 9 , "setModifiedDate(Date)" : 4 , "setName(String)" : 6 , "setOwner(String)" : 3}},{ "className" : "org::exoplatform::portlets::nav::component::UIFirstLevelMenu" , "selectors" : { "getFacesContext(???)" : 1}},{ "className" : "javax::naming::directory::SearchResult" , "selectors" : { "SearchResult(String,Object,Attributes)" : 1 , "getAttributes()" : 18}},{ "className" : "org::exoplatform::services::portletcontainer::impl::portletAPIImp::bundle::ResourceBundleManager" , "selectors" : { "initBundle(PortletInfo,MapResourceBundle)" : 3 , "lookupBundle(Portlet,Locale)" : 3}},{ "className" : "org::exoplatform::services::jcr::impl::core::NodeChangeImpl" , "selectors" : { "NodeChangeImpl(NodeData,int,String)" : 5}},{ "className" : "org::exoplatform::faces::core::component::Node" , "selectors" : { "getChildren()" : 50 , "getId()" : 2 , "getName()" : 6 , "isRendered()" : 1 , "setRendered(boolean)" : 22}},{ "className" : "org::exoplatform::services::portletcontainer::test::portlet::PortletToTestStateSupport" , "selectors" : { "render(RenderRequest,RenderResponse)::WindowState" : 2}},{ "className" : "org::exoplatform::services::portletcontainer::test::portlet::PortletToTestAccessToHeaders" , "selectors" : { "processAction(ActionRequest,ActionResponse)::PortletException" : 4}},{ "className" : "org::exoplatform::services::wsrp::consumer::ConsumerEnvironment" , "selectors" : { "getPortletStateChange(???)" : 1 , "setPortletStateChange(???)" : 1}},{ "className" : "org::exoplatform::services::communication::forum::hibernate::PostImpl" , "selectors" : { "PostImpl()" : 1 , "getForumId()" : 4 , "getId()" : 3 , "getMessage()" : 4 , "getModifiedDate()" : 2 , "getOwner()" : 3 , "getSubject()" : 1 , "getTopicId()" : 3 , "setCreatedDate(Date)" : 1 , "setForumId(String)" : 1 , "setId(String)" : 1 , "setModifiedDate(Date)" : 2 , "setTopicId(String)" : 1}},{ "className" : "org::exoplatform::services::xml::querying::impl::xtas::UniFormTree" , "selectors" : { "convert(Result)" : 6 , "convert(Result,boolean)" : 3 , "getAsByteArray()" : 2 , "getAsInputStream()" : 6 , "getAsString()" : 3 , "isEmpty()" : 2 , "toString()" : 4}},{ "className" : "org::exoplatform::services::portletcontainer::impl::portletAPIImp::ActionRequestImp" , "selectors" : { "ActionRequestImp(???)" : 1 , "decode(String)" : 1 , "decode(String[])" : 3 , "emptyActionRequest()" : 1}},{ "className" : "org::exoplatform::services::portletcontainer::test::portlet::PortletToTestGetParameterXXXMethods" , "selectors" : { "processAction(ActionRequest,ActionResponse)::PortletException" : 2 , "render(RenderRequest,RenderResponse)::PortletException" : 4}},{ "className" : "org::exoplatform::services::workflow::WorkflowExecutionService" , "selectors" : { "close()" : 10 , "endOfState(???)" : 5 , "getAllDefinitions()" : 3 , "getDefinition(???)" : 2 , "getFile(Long,String)" : 3 , "getLatestDefinitions()" : 2 , "getTaskList(???)" : 4 , "getToken(???)" : 1 , "getVariables(Long)" : 1 , "startProcessInstance(???)" : 2}},{ "className" : "org::exoplatform::portlets::content::explorer::component::UIFileUpload" , "selectors" : { "UIFileUpload()" : 1 , "addFileSystemActionListener()" : 1 , "getAncestorOfType(???)" : 1}},{ "className" : "org::exoplatform::services::organization::hibernate::OrganizationConfig" , "selectors" : { "getGroup()" : 1 , "getMembershipType()" : 1 , "getUser()" : 1}},{ "className" : "org::exoplatform::services::jcr::api::writing::AddNodeTest" , "selectors" : { "initRepository()" : 3}},{ "className" : "org::exoplatform::faces::core::component::UIForm::StringField" , "selectors" : { "StringField(String,String,String)" : 20 , "getValue()" : 9 , "setValue(String)" : 8}},{ "className" : "org::exoplatform::services::xml::querying::impl::xtas::object::plugins::SyntheticalRoot" , "selectors" : { "getObjects()" : 1}},{ "className" : "org::exoplatform::portlets::wsrp::UIProducer" , "selectors" : { "UIProducer(???)" : 1 , "getId()" : 1 , "isVisible()" : 1 , "render(???)" : 1 , "setVisible(boolean)" : 2 , "writeProducerLink(Writer,String)" : 1 , "writeSelectLink(Writer,String,String,ResourceBundle)" : 1}},{ "className" : "org::exoplatform::faces::core::component::model::ActionCell" , "selectors" : { "ActionCell()" : 3 , "add(Button)" : 1 , "add(boolean,Button)" : 2}},{ "className" : "org::exoplatform::portlets::wsrp::component::UIProducerForm" , "selectors" : { "decode(FacesContext)::RegistrationData" : 1 , "reset()" : 2}},{ "className" : "org::exoplatform::services::portal::community::impl::CommunityConfigServiceImpl" , "selectors" : { "createCommunityConfig()" : 4 , "populateConfiguration(CommunityConfig)" : 1}},{ "className" : "org::exoplatform::services::portletcontainer::test::portlet::PortletWithPermanentUnavailibiltyInProcessActionAndRender" , "selectors" : { "processAction(ActionRequest,ActionResponse)::UnavailableException" : 1 , "render(RenderRequest,RenderResponse)::UnavailableException" : 1}},{ "className" : "org::exoplatform::services::portletcontainer::PortletContainerException" , "selectors" : { "PortletContainerException(String,Throwable)" : 5 , "PortletContainerException(Throwable)" : 4}},{ "className" : "org::exoplatform::text::template::CollectionDataHandler" , "selectors" : { "begin()" : 1 , "end()" : 1 , "nextRow()" : 1}},{ "className" : "org::exoplatform::services::communication::sms::encoder::prodat::ProdatResolverImpl" , "selectors" : { "ProdatResolverImpl()" : 1 , "getInstance()" : 2}},{ "className" : "org::exoplatform::services::communication::message::impl::MailServiceImpl" , "selectors" : { "fillFlags(String)::Flags" : 1 , "sendMessage(Message)::InternetAddress" : 1}},{ "className" : "org::exoplatform::text::template::DataBindingValue" , "selectors" : { "DataBindingValue(String)" : 3 , "getMethodName()" : 10}},{ "className" : "org::exoplatform::services::organization::ldap::ActiveDirectoryMembershipHandler" , "selectors" : { "findMembershipDNBySID(byte[],String,String)" : 1 , "findMemberships(String,String,String)" : 3}},{ "className" : "org::exoplatform::services::communication::message::impl::FolderImpl" , "selectors" : { "FolderImpl()" : 1 , "FolderImpl(String,String,String)" : 4 , "getId()" : 4 , "getRemoveable()" : 1 , "setAccountId(String)" : 1 , "setCreatedDate(Date)" : 5 , "setId(String)" : 5 , "setRemoveable(boolean)" : 5}},{ "className" : "org::exoplatform::services::database::ObjectQuery" , "selectors" : { "ObjectQuery(Class)" : 11 , "addEQ(String,Object)" : 16 , "addGT(String,Object)" : 3 , "addLIKE(String,String)" : 12 , "addLT(String,Object)" : 2 , "getHibernateCountQuery()" : 1 , "getHibernateQuery()" : 4 , "setDescOrderBy(String)" : 2}},{ "className" : "javax::xml::transform::sax::TransformerHandler" , "selectors" : { "getTransformer()" : 10 , "setResult(Result)" : 26}},{ "className" : "org::exoplatform::services::communication::sms::SmsService" , "selectors" : { "createMessages()" : 2 , "createProdatProvider(String,String)" : 4 , "createRecipient(String)" : 1 , "createSender(Provider)" : 4}},{ "className" : "org::exoplatform::portlet::exomvc::JSPPage" , "selectors" : { "render(???)" : 1 , "setJSPPage(String)" : 1}},{ "className" : "org::exoplatform::portlet::faces::lifecycle::ExoLifecycle" , "selectors" : { "<Initializer>()::ApplyRequestValuesPhase" : 1 , "<Initializer>()::InvokeApplicationPhase" : 1 , "<Initializer>()::ProcessValidationsPhase" : 1 , "<Initializer>()::RestoreViewPhase" : 1 , "<Initializer>()::UpdateModelValuesPhase" : 1 , "ExoLifecycle()" : 1 , "ExoLifecycle()::RenderResponsePhase" : 1}},{ "className" : "org::exoplatform::services::idgenerator::impl::IDGeneratorServiceImpl" , "selectors" : { "generateStringID(Object)" : 1 , "getInt(byte[])" : 1 , "hexFormat(int,int)" : 4 , "padHex(String,int)" : 1}},{ "className" : "org::exoplatform::text::template::ArrayFormater" , "selectors" : { "ArrayFormater(String,String)" : 3}},{ "className" : "org::exoplatform::services::communication::sms::util::Sort" , "selectors" : { "sort(List,String,int)" : 1}},{ "className" : "org::exoplatform::portlets::user::component::UIListMembershipType::MembershipDataHandler" , "selectors" : { "MembershipDataHandler()" : 1}},{ "className" : "org::exoplatform::services::xml::querying::InvalidSourceException" , "selectors" : { "InvalidSourceException(String)" : 8}},{ "className" : "org::exoplatform::services::xml::querying::InvalidStatementException" , "selectors" : { "InvalidStatementException(String)" : 9}},{ "className" : "org::exoplatform::services::xml::querying::impl::xtas::UniFormConverter" , "selectors" : { "toFragment(UniFormTree)" : 4 , "toWellForm(UniFormTree)" : 4 , "toWellForm(UniFormTree,String,String,Properties)" : 1}},{ "className" : "org::exoplatform::services::communication::forum::hibernate::CategoryImpl" , "selectors" : { "CategoryImpl()" : 1 , "getId()" : 3 , "setCreatedDate(Date)" : 1 , "setId(String)" : 1 , "setModifiedBy(String)" : 1 , "setModifiedDate(Date)" : 2 , "setOwner(String)" : 1}},{ "className" : "org::exoplatform::services::portletcontainer::impl::portletAPIImp::ActionResponseImp" , "selectors" : { "ActionResponseImp(???)" : 1 , "emptyActionResponse()" : 1 , "fillActionResponse(Input,Portlet)" : 1 , "getLocation()" : 1 , "isSendRedirectAlreadyOccured()" : 1}},{ "className" : "org::exoplatform::services::security::impl::UserPrincipalImpl" , "selectors" : { "UserPrincipalImpl(String)" : 1}},{ "className" : "org::exoplatform::services::workflow::WorkflowFormsService" , "selectors" : { "addForms(???)" : 2 , "getForm(Long,String)" : 3}},{ "className" : "org::exoplatform::services::organization::ldap::OrganizationConfig::MembershipType" , "selectors" : { "getDescription()" : 1 , "getType()" : 1}},{ "className" : "org::exoplatform::portlets::content::explorer::component::UIFileExplorer" , "selectors" : { "UIFileExplorer()" : 1 , "changeNode(String)" : 3 , "createNodeDescriptor(String)" : 1 , "getRealPathBaseDir()" : 8 , "getRelativePathBaseDir()" : 6 , "init()" : 1}},{ "className" : "org::exoplatform::portlets::monitor::session::component::UIListSessionLog" , "selectors" : { "getSibling(???)" : 1 , "update(Query)" : 3}},{ "className" : "org::exoplatform::services::wsrp::consumer::URLGenerator" , "selectors" : { "getBlockingActionURL(String,Map)" : 1 , "getRenderURL(String,Map)" : 1 , "getResourceURL(String,Map)" : 1}},{ "className" : "org::exoplatform::portlets::backup::component::UIData" , "selectors" : { "getImportDataModel()" : 1 , "getParent(???)" : 1 , "setImportClass(Class)" : 2 , "setImportDataModel(ImportData)" : 1}},{ "className" : "org::exoplatform::faces::core::renderer::html::TemplateRenderer" , "selectors" : { "TemplateRenderer()" : 1}},{ "className" : "org::exoplatform::portlets::workflow::component::UIBPDefinition" , "selectors" : { "getAllDefinition()" : 1 , "getBaseURL(???)" : 1}},{ "className" : "org::exoplatform::services::portal::impl::ImportExportPluginImpl" , "selectors" : { "getDescription()" : 1}},{ "className" : "org::exoplatform::text::template::xhtml::Button" , "selectors" : { "Button(String)" : 2 , "addParameter(String,String)" : 2}},{ "className" : "org::exoplatform::services::database::DBObjectPageList" , "selectors" : { "DBObjectPageList(HibernateService,Class)" : 1 , "DBObjectPageList(HibernateService,ObjectQuery)" : 7 , "DBObjectPageList(HibernateService,int,String,String)" : 2}},{ "className" : "org::exoplatform::services::portletcontainer::impl::portletAPIImp::PortletContextImpl" , "selectors" : { "PortletContextImpl(???)" : 2 , "getWrappedServletContext(???)" : 3 , "send(String,PortletMessage,PortletRequest)::PortletException" : 2}},{ "className" : "org::exoplatform::services::xml::querying::impl::xtas::SimpleStatement" , "selectors" : { "SimpleStatement()" : 3 , "SimpleStatement(String,String)" : 2 , "SimpleStatement(String,String,String)" : 5 , "SimpleStatement(String,String,String,String,String)" : 13 , "SimpleStatement(String,String,UniFormTree,String,String)" : 13 , "append(String,String,String)" : 1 , "select(String)" : 1 , "select(String,String)" : 2 , "select(String,String,String)" : 3}},{ "className" : "org::exoplatform::services::communication::sms::common::CommunicationError" , "selectors" : { "CommunicationError(String)" : 4 , "CommunicationError(Throwable)" : 2}},{ "className" : "org::exoplatform::portlets::user::component::UIGroupCommunityInfo" , "selectors" : { "getCommunityNavigation()" : 2 , "getCommunityPortal()" : 2 , "getSibling(???)" : 2 , "setCommunityNavigation(CommunityNavigation)" : 1 , "setCommunityPortal(CommunityPortal)" : 1}},{ "className" : "org::exoplatform::faces::core::component::UISelectBox" , "selectors" : { "UISelectBox(String,String,List)" : 34 , "getValue()" : 34 , "setOptions(List)" : 14 , "setUpdateOnChangeAction(String)" : 5 , "setValue(String)" : 40}},{ "className" : "org::exoplatform::services::jcr::config::ContainerEntry" , "selectors" : { "ContainerEntry(String,Class,Properties)" : 6 , "getName()" : 4 , "getParameters()" : 4 , "getType()" : 3}},{ "className" : "org::exoplatform::portlets::communication::forum::component::UIToolbarPanel" , "selectors" : { "UIToolbarPanel()" : 1 , "getAncestorOfType(???)" : 3}},{ "className" : "javax::jcr::LongValue" , "selectors" : { "LongValue(Long)" : 2 , "LongValue(long)" : 16}},{ "className" : "org::exoplatform::faces::core::event::ExceptionHandler" , "selectors" : { "canHandleError(Throwable)" : 1 , "getResource(ResourceBundle,String)" : 1 , "handle(ExoActionEvent,Throwable)" : 1}},{ "className" : "org::exoplatform::portlets::jmx::component::UIMBeanServer" , "selectors" : { "UIMBeanServer(MBeanServer)" : 1 , "getAncestorOfType(???)" : 2 , "getMBeanServer()" : 3 , "getName()" : 1 , "getRootDomain()" : 3}},{ "className" : "org::exoplatform::services::communication::sms::provider::prodat::ProdatOperatorImpl" , "selectors" : { "ProdatOperatorImpl()" : 2}},{ "className" : "org::exoplatform::container::groovy::GroovyManagerContainer::ScannerThread" , "selectors" : { "ScannerThread(long)" : 1}},{ "className" : "org::exoplatform::portlets::content::ContentUtil" , "selectors" : { "createContentNode(Ticket,String)" : 1 , "createNodeFromNode(Node,String)" : 3 , "getCurrentTicket(String)" : 2 , "getHomeNode(Ticket)" : 3 , "getLocale()" : 2 , "getPortalOwner()" : 2 , "getUserName()" : 1 , "lookupNode(Ticket,String,String,boolean)" : 2 , "resolveContent(ContentConfig,Node)" : 2 , "storeContent(String,String)" : 1}},{ "className" : "org::exoplatform::services::portletcontainer::imp::TestWindowState" , "selectors" : { "testPortletNotCalledWithAnUnsupportedMode()::WindowState" : 1 , "testWindowStateSupport()::WindowState" : 3}},{ "className" : "org::exoplatform::services::jcr::config::RepositoryServiceConfig" , "selectors" : { "getContainerEntry(String)" : 4 , "getDefaultRepositoryName()" : 3 , "getRepositoryEntries()" : 3 , "getRepositoryEntry(String)" : 2 , "getRepositoryManagerEntry(String)" : 1 , "getSupportedContainerEntries()" : 2 , "getSupportedRepositoryManagerEntries()" : 2 , "getWorkspaceEntries()" : 3 , "getWorkspaceEntry(String,String)" : 3}},{ "className" : "org::exoplatform::portlets::portletregistery::component::UIPortletList::SaveActionListener" , "selectors" : { "SaveActionListener()" : 1}},{ "className" : "org::exoplatform::portal::faces::component::UIPageNodeForm::NodeNameValidator" , "selectors" : { "validate(FacesContext,UIComponent,Object)::ValidatorException" : 1}},{ "className" : "javax::jcr::Credentials" , "selectors" : { "getPassword()" : 1 , "getUserId()" : 4}},{ "className" : "org::exoplatform::portlets::communication::forum::component::UIForumForm" , "selectors" : { "UIForumForm(ForumService)" : 1 , "getSibling(???)" : 1 , "setForum(String,Forum)" : 2}},{ "className" : "javax::jcr::SoftLinkValue" , "selectors" : { "SoftLinkValue(String)" : 5}},{ "className" : "org::exoplatform::services::jcr::impl::core::nodetype::nt::Folder" , "selectors" : { "Folder()" : 2}},{ "className" : "org::exoplatform::services::database::HibernateService" , "selectors" : { "addMappingFiles(String[])" : 13 , "closeSession()" : 24 , "closeSession(???)" : 9 , "create(Object)" : 4 , "findExactOne(???)" : 3 , "findOne(???)" : 9 , "findOne(Class,Serializable)" : 16 , "findOne(ObjectQuery)" : 2 , "getServiceName()" : 1 , "openSession(???)" : 120 , "remove(Class,Serializable)" : 5 , "remove(Object)" : 1 , "save(Object)" : 8 , "update(Object)" : 6}},{ "className" : "org::exoplatform::portal::faces::component::PortalComponentIDGenerator" , "selectors" : { "generatePortletId(UIPortal,String)" : 1}},{ "className" : "org::exoplatform::portlets::communication::message::component::UIAccount" , "selectors" : { "getAccount()" : 4 , "getFolder(String)" : 3 , "getFolders()" : 2 , "getSelectFolder()" : 2 , "setAccount(Account)" : 2 , "setSelectFolder(String)" : 4}},{ "className" : "org::exoplatform::portlets::wsrp::WSRPConfigModeHandler" , "selectors" : { "WSRPConfigModeHandler(???)" : 1 , "processAction(???)" : 1 , "render(???)" : 1 , "writeRefreshLink(Writer,String,ResourceBundle)" : 1}},{ "className" : "org::exoplatform::services::xml::querying::impl::xtas::WellFormedUniFormTree" , "selectors" : { "WellFormedUniFormTree()" : 23 , "getAsDOM()" : 1 , "getValidationHandler()" : 2 , "init(InputSource)" : 16 , "init(Node)" : 3 , "init(Object)" : 2 , "init(Object,Object)" : 2 , "initRoot(String)" : 1 , "setDTDPublicId(String)" : 1 , "setDTDSystemId(String)" : 1 , "setIndentOutput(boolean)" : 1 , "setOmitXmlDeclaration(boolean)" : 1 , "setValidate(boolean)" : 3}},{ "className" : "org::exoplatform::services::xml::querying::object::MarshallerCreateException" , "selectors" : { "MarshallerCreateException(String)" : 2}},{ "className" : "org::exoplatform::text::template::xhtml::Text" , "selectors" : { "Text(String)" : 6}},{ "className" : "org::exoplatform::services::portletcontainer::impl::portletAPIImp::pool::EmptySession" , "selectors" : { "EmptySession()" : 1}},{ "className" : "org::exoplatform::portlet::faces::renderer::PortletPreferencesRenderer" , "selectors" : { "PortletPreferencesRenderer()" : 1}},{ "className" : "com::capeclear::www::GlobalWeather_xsd::Station" , "selectors" : { "<Initializer>()::org" : 11 , "equals(Object)" : 1 , "getCountry()" : 6 , "getElevation()" : 2 , "getIata()" : 7 , "getIcao()" : 7 , "getLatitude()" : 2 , "getLongitude()" : 2 , "getName()" : 7 , "getRegion()" : 4 , "getString()" : 4 , "getWmo()" : 4 , "hashCode()" : 1}},{ "className" : "org::exoplatform::services::portletcontainer::impl::config::Description" , "selectors" : { "Description()" : 1 , "getDescription()" : 3 , "getLang()" : 3 , "setDescription(String)" : 1 , "setLang(String)" : 1}},{ "className" : "org::exoplatform::faces::core::event::ActionInterceptor" , "selectors" : { "preExecute(ExoActionEvent)" : 2}},{ "className" : "org::exoplatform::services::wsrp::consumer::PortletKey" , "selectors" : { "getPortletHandle()" : 9 , "getProducerId()" : 6 , "setPortletHandle(String)" : 5 , "setProducerId(String)" : 2}},{ "className" : "org::exoplatform::services::jcr::impl::storage::rdb::container::data::BinaryValueRecord" , "selectors" : { "BinaryValueRecord()" : 1 , "BinaryValueRecord(byte[])" : 1 , "getValue()" : 1}},{ "className" : "org::exoplatform::services::jcr::api::accessing::TicketTest" , "selectors" : { "isInNamespaceRegistery(String)" : 2}},{ "className" : "org::exoplatform::services::config::ConfigurationService" , "selectors" : { "getServiceConfiguration(Class)" : 2 , "saveServiceConfiguration(Class,Object)" : 5}},{ "className" : "org::exoplatform::portlets::indexing::component::UIListIndexer" , "selectors" : { "getParent(???)" : 1}},{ "className" : "org::exoplatform::services::jcr::impl::core::itemfilters::NamePatternFilter" , "selectors" : { "NamePatternFilter(String)" : 4 , "estimate(String,String)" : 1}},{ "className" : "org::exoplatform::services::portletcontainer::impl::config::DelegatedBundle" , "selectors" : { "DelegatedBundle()" : 1 , "getEnable()" : 1 , "setEnable(String)" : 1}},{ "className" : "org::exoplatform::services::portletcontainer::impl::config::SupportedContent" , "selectors" : { "SupportedContent()" : 1 , "getName()" : 2 , "setName(String)" : 1}},{ "className" : "org::exoplatform::services::jcr::impl::storage::filesystem::nodedata::NodeContainer" , "selectors" : { "parseRelPath(String)" : 2}},{ "className" : "org::exoplatform::commons::Environment" , "selectors" : { "Environment()" : 1 , "getInstance()" : 6 , "getPlatform()" : 6}},{ "className" : "org::exoplatform::services::communication::forum::hibernate::ForumServiceImpl" , "selectors" : { "ForumServiceImpl(HibernateService,ForumIndexerPluginImpl,IDGeneratorService,ListenerStack,String)" : 1 , "getForum(String)" : 1}},{ "className" : "org::exoplatform::services::cms::impl::NewUserConfig" , "selectors" : { "getContentLocation()" : 1 , "getDefaultLocale()" : 1 , "getJcrPath()" : 4 , "getTemplate()" : 1 , "getUsers()" : 2 , "getWorkspace()" : 2 , "isCreateHome()" : 2}},{ "className" : "org::exoplatform::text::template::ListFormater" , "selectors" : { "ListFormater(String,String)" : 1}},{ "className" : "javax::jcr::nodetype::NodeDef" , "selectors" : { "allowSameNameSibs()" : 1 , "getDeclaringNodeType()" : 1 , "getDefaultPrimaryType()" : 5 , "getName()" : 23 , "getOnParentVersion()" : 1 , "getRequiredPrimaryTypes()" : 1 , "isAutoCreate()" : 2 , "isMandatory()" : 3 , "isPrimaryItem()" : 2 , "isReadOnly()" : 3}},{ "className" : "org::exoplatform::services::indexing::SingleFieldSearchInput" , "selectors" : { "SingleFieldSearchInput(String)" : 1 , "SingleFieldSearchInput(String,String)" : 13 , "setTerm(String)" : 1}},{ "className" : "org::exoplatform::services::jcr::impl::core::nodetype::exo::MockNodeType" , "selectors" : { "MockNodeType()" : 1}},{ "className" : "org::exoplatform::portal::portlet::struts::ExoRequestProcessor" , "selectors" : { "doForward(String,HttpServletRequest,HttpServletResponse)::MultipartRequestWrapper" : 1 , "doForward(String,HttpServletRequest,HttpServletResponse)::ServletException" : 1}},{ "className" : "org::exoplatform::commons::xml::ExoXPPParser" , "selectors" : { "ExoXPPParser()" : 1 , "copyAttributes()" : 2 , "getContent()" : 68 , "getEventType(???)" : 4 , "getInstance()" : 5 , "getName(???)" : 4 , "getNodeAttributeValue(String)" : 17 , "mandatoryNode(String)" : 49 , "mandatoryNodeContent(String)" : 5 , "next(???)" : 1 , "nextTag(???)" : 3 , "node(String)" : 68 , "nodeContent(String)" : 5 , "setInput(???)" : 5}},{ "className" : "org::exoplatform::portlet::faces::XHTMLMPRendererConfiguration" , "selectors" : { "confiure()" : 1 , "confiure()::RenderKitImpl" : 1}},{ "className" : "org::exoplatform::faces::ValidatorManager" , "selectors" : { "getValidator(???)" : 3}},{ "className" : "org::exoplatform::services::organization::Membership" , "selectors" : { "getGroupId()" : 5 , "getId()" : 4 , "getMembershipType()" : 6 , "getUserName()" : 3 , "setMembershipType(String)" : 7}},{ "className" : "org::exoplatform::services::xml::transform::trax::TRAXTransformer" , "selectors" : { "setParameter(String,Object)" : 3}},{ "className" : "javax::jcr::Ticket" , "selectors" : { "getCredentials()" : 4 , "getNodeByAbsPath(String)" : 50 , "getNodeByUUID(String)" : 5 , "getPrefixes()" : 2 , "getRepository()" : 4 , "getRootNode()" : 166 , "getURI(String)" : 8 , "getWorkspace()" : 19 , "impersonate(Credentials)" : 3 , "importXML(String,InputStream)" : 2 , "revert()" : 20 , "save()" : 74 , "setPrefix(String,String)" : 6}},{ "className" : "org::exoplatform::services::portletcontainer::pci::model::SecurityRoleRef" , "selectors" : { "SecurityRoleRef()" : 1 , "getRoleLink()" : 1 , "getRoleName()" : 1 , "setRoleLink(String)" : 1 , "setRoleName(String)" : 1}},{ "className" : "java::net::URLEncoder" , "selectors" : { "encode(String)" : 70 , "encode(String,String)" : 202}},{ "className" : "org::exoplatform::portal::faces::component::ChangeLocaleVisitor" , "selectors" : { "ChangeLocaleVisitor()" : 6 , "changeLocale(UIPage)" : 3 , "changeLocale(UIPortal)" : 1 , "changeLocale(UIPortal,String)" : 2 , "changeLocale(UISinglePage,String)" : 1 , "traverse(UIExoComponent)" : 3 , "visit(UIExoComponent)" : 5}},{ "className" : "org::exoplatform::portal::faces::component::UIPageList" , "selectors" : { "getAncestorOfType(???)" : 1 , "getParent(???)" : 4 , "queryDescriptions(String,String,String)" : 3 , "update()" : 1}},{ "className" : "org::exoplatform::faces::core::validator::EmptyFieldValidator" , "selectors" : { "validate(FacesContext,UIComponent,Object)::ValidatorException" : 2}},{ "className" : "org::exoplatform::portlet::faces::context::FacesPortletContextImpl" , "selectors" : { "FacesPortletContextImpl(Object,Object,Object)" : 1 , "getMaximumSeverity()::FacesMessage" : 1 , "isPortletRenderPhase()" : 2}},{ "className" : "java::util::zip::ZipFile" , "selectors" : { "ZipFile(File)" : 61 , "ZipFile(File,int)" : 1 , "ZipFile(String)" : 28 , "close()" : 116 , "entries()" : 61 , "getEntry(String)" : 61 , "getInputStream(ZipEntry)" : 87 , "getName()" : 37 , "parse(???)" : 1 , "size()" : 2}},{ "className" : "org::exoplatform::services::portletcontainer::impl::portletAPIImp::helpers::CustomRequestWrapper" , "selectors" : { "CustomRequestWrapper(???)" : 1 , "emptyCustomRequestWrapper()" : 1 , "fillCustomRequestWrapper(???)" : 1 , "getContextPath()" : 1 , "getParameter(???)" : 2 , "setAttribute(String,Object)" : 2 , "setContextPath(String)" : 3 , "setRedirected(boolean)" : 7 , "setRedirectedPath(String)" : 4 , "setSharedSession(???)" : 6}},{ "className" : "org::exoplatform::services::indexing::KeywordFieldSearchInput" , "selectors" : { "getQuery(Analyzer)::Term" : 1}},{ "className" : "org::exoplatform::faces::core::component::model::Information" , "selectors" : { "Information()" : 4 , "addMessage(???)" : 4 , "clearMessages()" : 4 , "getMessages()" : 4 , "hasMessage()" : 10 , "renderBodyInformation(???)" : 3 , "renderFooterInformation(???)" : 3}},{ "className" : "org::exoplatform::services::portletcontainer::impl::config::Cache" , "selectors" : { "Cache()" : 1 , "getEnable()" : 2 , "setEnable(String)" : 1}},{ "className" : "org::exoplatform::text::template::xhtml::Div" , "selectors" : { "Div()" : 4}},{ "className" : "org::exoplatform::services::organization::hibernate::NewUserConfig" , "selectors" : { "getGroup()" : 1 , "isIgnoreUser(String)" : 1}},{ "className" : "org::exoplatform::services::database::impl::ExoCacheProvider" , "selectors" : { "buildCache(String,Properties)::CacheException" : 1}},{ "className" : "javax::jcr::Property" , "selectors" : { "getBoolean()" : 1 , "getDate()" : 1 , "getDouble()" : 1 , "getLength()" : 2 , "getLong()" : 9 , "getStream()" : 1 , "getString()" : 35 , "getValue()" : 17 , "getValues()" : 11 , "hasValue()" : 1 , "setValue(Calendar)" : 2 , "setValue(InputStream)" : 2 , "setValue(String)" : 4 , "setValue(Value)" : 5 , "setValue(Value[])" : 4 , "setValue(boolean)" : 2 , "setValue(double)" : 4 , "setValue(long)" : 2}},{ "className" : "org::exoplatform::services::wsrp::producer::impl::WSRPPortletPreferencesPersister" , "selectors" : { "WSRPPortletPreferencesPersister()" : 1 , "getInstance()" : 2}},{ "className" : "org::exoplatform::portlets::weather::component::UIWeatherViewPortlet" , "selectors" : { "process()" : 3}},{ "className" : "org::exoplatform::faces::core::component::UIInput" , "selectors" : { "UIInput()" : 1 , "addComponentValidator(Class)" : 3 , "getKeyDown()" : 2 , "getKeyUp()" : 2 , "getName()" : 24 , "getScripting()" : 1 , "hasError()" : 2 , "isEditable()" : 7 , "isReadonly()" : 6 , "setEditable(boolean)" : 19 , "setKeyDown(String)" : 1 , "setKeyUp(String)" : 1 , "setReadonly(boolean)" : 2}},{ "className" : "org::exoplatform::services::portletcontainer::imp::TestFilters" , "selectors" : { "testFilters()::PortletMode" : 1}},{ "className" : "org::exoplatform::services::wsrp::test::TestRegistrationInterface" , "selectors" : { "getModifyRegistration(RegistrationContext)::ModifyRegistrationRequest" : 1}},{ "className" : "org::exoplatform::portlets::content::display::component::UIContentConfigForm" , "selectors" : { "getSibling(???)" : 1 , "setContentConfig(ContentConfig)" : 2}},{ "className" : "org::exoplatform::services::portletregistery::Portlet" , "selectors" : { "getCreatedDate()" : 1 , "getDescription()" : 3 , "getDisplayName()" : 4 , "getId()" : 20 , "getModifiedDate()" : 1 , "getPortletApplicationName()" : 2 , "getPortletName()" : 3 , "setDescription(String)" : 2 , "setDisplayName(String)" : 3 , "setPortletApplicationName(String)" : 2 , "setPortletName(String)" : 3}},{ "className" : "org::exoplatform::faces::search::component::UIViewDocument" , "selectors" : { "UIViewDocument(IndexingService)" : 1 , "getDocument()" : 1 , "setDocument(???)" : 1}},{ "className" : "org::exoplatform::services::organization::impl::MembershipImpl" , "selectors" : { "MembershipImpl()" : 9 , "getId()" : 2 , "setGroupId(String)" : 9 , "setId(String)" : 7 , "setMembershipType(String)" : 7 , "setUserName(String)" : 9}},{ "className" : "org::exoplatform::portlets::weather::component::UISelectStationForm" , "selectors" : { "UISelectStationForm()" : 2 , "getSelectStationCode()" : 2 , "setStationsList(Station[])" : 2 , "updateTree()" : 2}},{ "className" : "org::exoplatform::services::portal::model::Portlet" , "selectors" : { "getPortletPreferences()" : 3 , "getPortletStyle()" : 5 , "getShowInfoBar()" : 7 , "getShowPortletMode()" : 5 , "getShowWindowState()" : 5 , "getTitle()" : 5 , "getWindowId()" : 4 , "org" : 5 , "setPortletPreferences(ExoPortletPreferences)" : 5 , "setPortletStyle(String)" : 6 , "setShowInfoBar(boolean)" : 4 , "setShowPortletMode(boolean)" : 3 , "setShowWindowState(boolean)" : 4 , "setTitle(String)" : 4 , "setWindowId(String)" : 5 , "softCloneObject()" : 1}},{ "className" : "org::exoplatform::container::configuration::ServiceConfiguration" , "selectors" : { "ServiceConfiguration()" : 1 , "addParameter(Parameter)" : 4 , "getObjectParam(String)" : 8 , "getParameter(String)" : 2 , "getPropertiesParam(String)" : 7 , "getServiceKey()" : 2 , "getServiceType()" : 5 , "getValueParam(String)" : 14 , "getValuesParam(String)" : 5 , "setServiceKey(String)" : 1 , "setServiceType(String)" : 1}},{ "className" : "org::exoplatform::services::portletcontainer::impl::portletAPIImp::RenderResponseImp" , "selectors" : { "RenderResponseImp(???)" : 1 , "fillRenderResponse(String,Input,Portlet,boolean,Collection,Enumeration)" : 1 , "getResponseContentType()" : 1 , "getResponseContentTypes()" : 1 , "isContentTypeSupported(String)" : 1}},{ "className" : "org::exoplatform::services::portletcontainer::pci::model::UserAttribute" , "selectors" : { "UserAttribute()" : 1 , "addDescription(Description)" : 1 , "getName()" : 1 , "setName(String)" : 1}},{ "className" : "org::exoplatform::test::web::unit::NewMockSessionUnit" , "selectors" : { "NewMockSessionUnit(String,String)::ServletRunner" : 1 , "execute(WebResponse,WebTable,ExoWebClient)::GetMethodWebRequest" : 1}},{ "className" : "org::exoplatform::faces::search::component::UIAdvancedSearch" , "selectors" : { "UIAdvancedSearch(IndexingService)" : 1 , "getParent(???)" : 1}},{ "className" : "org::exoplatform::services::organization::ldap::ActiveDirectoryUserHandler" , "selectors" : { "ActiveDirectoryUserHandler(LDAPService,HibernateService)" : 1 , "encryptPassword(String)" : 2}},{ "className" : "javax::jcr::Value" , "selectors" : { "getBoolean()" : 6 , "getDate()" : 6 , "getDouble()" : 7 , "getLong()" : 5 , "getStream()" : 11 , "getString()" : 22 , "getType()" : 23}},{ "className" : "org::exoplatform::services::jcr::api::reading::PropertyTest" , "selectors" : { "initRepository()" : 3}},{ "className" : "org::exoplatform::services::wsrp::consumer::adapters::WSRPPortletAdapter" , "selectors" : { "WSRPPortletAdapter(PortletKey)" : 2 , "getParent()" : 1}},{ "className" : "org::exoplatform::services::jcr::core::ReferenceableNodeLocation" , "selectors" : { "ReferenceableNodeLocation(String,String,String)" : 3 , "ReferenceableNodeLocation(String,String,String,Set)" : 2 , "addReferencedPath(String)" : 3 , "getRealPath()" : 6 , "getReferencedPaths()" : 1 , "getUUID()" : 1}},{ "className" : "org::exoplatform::faces::core::event::PermissionExceptionHandler" , "selectors" : { "PermissionExceptionHandler()" : 1}},{ "className" : "org::exoplatform::text::template::ReflectionBeanDataHandler" , "selectors" : { "getMethodMap(Class)" : 2}},{ "className" : "org::exoplatform::faces::core::component::UIHtmlTextArea" , "selectors" : { "UIHtmlTextArea(String,String,String,String)" : 2}},{ "className" : "org::exoplatform::services::portal::impl::NodeNavigationData" , "selectors" : { "NodeNavigationData(NodeNavigation)" : 1 , "NodeNavigationData(String)" : 1 , "NodeNavigationData(String,PageNode)" : 1 , "getNodeNavigation()" : 3 , "setData(String)" : 1 , "setNodeNavigation(NodeNavigation)" : 1}},{ "className" : "org::exoplatform::services::communication::forum::ForumServiceException" , "selectors" : { "getErrorCode()" : 3}},{ "className" : "org::exoplatform::services::portletcontainer::impl::portletAPIImp::pool::PortletObjectsWrapperFactory" , "selectors" : { "PortletObjectsWrapperFactory()" : 2 , "createObject()" : 2 , "getInstance()" : 1}},{ "className" : "org::exoplatform::services::log::LogService" , "selectors" : { "getErrorBuffer()" : 1 , "getLog(???)" : 69 , "getLogBuffer()" : 1 , "getLogLevel(String)" : 4 , "getLogs()" : 2 , "setLogLevel(String,int,boolean)" : 9}},{ "className" : "org::exoplatform::services::indexing::HitPageList" , "selectors" : { "HitPageList(Searcher)" : 4 , "HitPageList(Searcher,int)" : 1 , "getAll()" : 2 , "getScoreOfDocumentInPage(int)" : 1}},{ "className" : "org::exoplatform::services::portletcontainer::impl::portletAPIImp::utils::CustomRequestWrapperUtil" , "selectors" : { "decodeRequestAttribute(String,String)" : 1 , "encodeAttribute(String,String)" : 3}},{ "className" : "org::exoplatform::portlets::portal::component::UISearchForm" , "selectors" : { "getParent(???)" : 1}},{ "className" : "org::exoplatform::services::wsrp::bind::WSRP_v1_PortletManagement_Binding_SOAPImpl" , "selectors" : { "WSRP_v1_PortletManagement_Binding_SOAPImpl()" : 3}},{ "className" : "org::exoplatform::portlets::weather::component::UIWeatherForm" , "selectors" : { "UIWeatherForm()" : 2 , "getSearchStationCode()" : 2 , "getSearchStationName()" : 2 , "setSearchStationCode(String)" : 3 , "setSearchStationName(String)" : 3}},{ "className" : "org::exoplatform::services::communication::sms::SmsMonitorService" , "selectors" : { "getCountMessages()" : 2 , "getErroneousMessage()" : 1 , "getFailedMessages()" : 2 , "getSuccessfullMessages()" : 2 , "incCountMessages()" : 1 , "incFailedMessages()" : 1 , "incSuccessfulMessages()" : 1}},{ "className" : "org::exoplatform::services::jcr::impl::util::DocNodeImporter" , "selectors" : { "DocNodeImporter(NodeImpl,String[])" : 1 , "fillNode(NodeImpl,InputStream,String[])" : 1}},{ "className" : "javax::jcr::InvalidSerializedDataException" , "selectors" : { "InvalidSerializedDataException(String,Exception)" : 4}},{ "className" : "org::exoplatform::services::xml::transform::NotSupportedIOTypeException" , "selectors" : { "NotSupportedIOTypeException(Result)" : 1 , "NotSupportedIOTypeException(Source)" : 3}},{ "className" : "org::exoplatform::services::cms::impl::NewUserConfig::User" , "selectors" : { "getReferencedFiles()" : 2 , "getUserName()" : 3}},{ "className" : "org::exoplatform::services::xml::querying::impl::xtas::InstructionCompilerException" , "selectors" : { "InstructionCompilerException(String)" : 1}},{ "className" : "org::exoplatform::services::jcr::impl::storage::filesystem::nodedata::FolderNodeContainer" , "selectors" : { "FolderNodeContainer(String,File)" : 1 , "deleteRecursively(File)" : 2}},{ "className" : "org::exoplatform::container::monitor::jvm::v15::OperatingSystemInfoImpl" , "selectors" : { "getArch()" : 1 , "getAvailableProcessors()" : 1 , "getName()" : 1 , "getVersion()" : 1}},{ "className" : "org::exoplatform::services::jcr::impl::core::PropertyImpl" , "selectors" : { "PropertyImpl(PropertyImpl)" : 1 , "PropertyImpl(String,Value,int)" : 12 , "PropertyImpl(String,Value[],int)" : 3 , "getDefinition()" : 2 , "getLength()" : 1 , "getStream()" : 1 , "getString()" : 3 , "getType()" : 12 , "getValue()" : 2 , "getValues()" : 2 , "setValue(Value)" : 6 , "setValue(Value[])" : 1 , "toString()" : 4}},{ "className" : "org::exoplatform::services::wsrp::producer::impl::helpers::WSRPProducerRewriterPortletURLFactory" , "selectors" : { "WSRPProducerRewriterPortletURLFactory(String,List,boolean,List,Enumeration,String,String,PersistentStateManager,String)" : 1}},{ "className" : "org::exoplatform::services::organization::UserProfile" , "selectors" : { "getUserInfoMap()" : 8 , "getUserName()" : 7 , "setUserInfoMap(Map)" : 1}},{ "className" : "org::exoplatform::portlets::wsrp::UIWSRPConfig" , "selectors" : { "UIWSRPConfig(???)" : 1 , "processAction(???)" : 1 , "render(???)" : 1}},{ "className" : "org::exoplatform::services::backup::ImportExportPlugin" , "selectors" : { "createEntry(String,ZipOutputStream,Object)" : 10 , "exportServiceData(XResources,ZipOutputStream)" : 1 , "exportUserData(String,XResources,ZipOutputStream)" : 1 , "getCurrentDataVersion()" : 4 , "getDescription()" : 4 , "getEntry(String,ZipFile)" : 8 , "getMetadata(String,ZipFile)" : 4 , "getName()" : 3 , "getXMLObjectConverter(String)" : 4 , "hasServiceData()" : 3 , "hasUserData()" : 2 , "importServiceData(XResources,ZipFile)" : 1 , "importUserData(String,XResources,ZipFile)" : 1 , "init()" : 3 , "setDescription(String)" : 3 , "setName(String)" : 3}},{ "className" : "org::exoplatform::services::resources::impl::ResourceBundleDescriptionImpl" , "selectors" : { "getId()" : 1 , "setLanguage(String)" : 2 , "setName(String)" : 1 , "setResourceType(String)" : 1}},{ "className" : "org::exoplatform::services::portal::model::Component" , "selectors" : { "copyBasicProperties(Component)" : 5 , "getDecorator()" : 8 , "getHeight()" : 8 , "getId()" : 4 , "getRenderer()" : 7 , "getWidth()" : 9 , "setDecorator(String)" : 7 , "setHeight(String)" : 5 , "setId(String)" : 5 , "setRenderer(String)" : 8 , "setWidth(String)" : 5}},{ "className" : "org::exoplatform::portlet::faces::lifecycle::ExoLifecycleFactory" , "selectors" : { "alreadyCreated(String)" : 1 , "getLifecycle(String)::FacesException" : 1}},{ "className" : "org::exoplatform::portlets::monitor::session::component::UIListSessionLog::SessionLogDataHandler" , "selectors" : { "SessionLogDataHandler()" : 1}},{ "className" : "org::exoplatform::portal::faces::component::UIPortletInfo" , "selectors" : { "UIPortletInfo()" : 2 , "getAncestorOfType(???)" : 1 , "getPortletData()" : 1 , "setPortletContainer(UIContainer)" : 1 , "setPortletData(Portlet)" : 1}},{ "className" : "org::exoplatform::services::jcr::config::RepositoryEntry" , "selectors" : { "RepositoryEntry(String,String)" : 4 , "getManager()" : 1 , "getName()" : 5}},{ "className" : "javax::jcr::NamespaceRegistry" , "selectors" : { "getPrefix(String)" : 4 , "getPrefixes()" : 3 , "getURI(String)" : 10 , "getURIs()" : 1 , "setMapping(String,String)" : 15}},{ "className" : "java::lang::management::OperatingSystemMXBean" , "selectors" : { "getArch()" : 1 , "getAvailableProcessors()" : 1 , "getName()" : 1 , "getVersion()" : 1}},{ "className" : "org::exoplatform::services::portal::Interceptor" , "selectors" : { "getNodeNavigation(String)" : 1 , "getPage(String)" : 1 , "getPortalConfig(String)" : 1 , "saveNodeNavigation(String,Node)" : 1 , "savePage(Page)" : 1 , "savePortalConfig(PortalConfig)" : 1}},{ "className" : "org::exoplatform::services::organization::ldap::UserHandler" , "selectors" : { "UserHandler(LDAPService,HibernateService)" : 2 , "addUserEventListener(UserEventListener)" : 1 , "authenticate(String,String)" : 1 , "checkProfile(String)" : 1 , "checkProfile(User)" : 2 , "createUser(User)" : 1 , "createUserEntry(User)" : 1 , "encryptPassword(String)" : 2 , "findUserByDN(String,LdapContext)" : 7 , "findUserByName(String)" : 3 , "findUsers(Query)" : 1 , "findUsers(Query)::PagedResultsControl" : 1 , "findUsers(Query)::PagedResultsResponseControl" : 1 , "findUsers(Query)::SortControl" : 1 , "findUsersByGroup(String)" : 1 , "getUserEventListeners()" : 1 , "getUserPageList(int)" : 1 , "getUserPageList(int)::PagedResultsControl" : 1 , "getUserPageList(int)::PagedResultsResponseControl" : 1 , "getUserPageList(int)::SortControl" : 1 , "removeUser(String)" : 1 , "saveUser(User)" : 1}},{ "className" : "org::exoplatform::text::template::ObjectFormater" , "selectors" : { "format(Writer,Object)" : 6}},{ "className" : "org::exoplatform::services::xml::querying::impl::xtas::object::plugins::CastorMapToElement" , "selectors" : { "getXml()" : 1}},{ "className" : "org::exoplatform::portlets::user::component::UICommunityNavForm" , "selectors" : { "getAncestorOfType(???)" : 1 , "getSibling(???)" : 1 , "setCommunityNavigation(CommunityNavigation)" : 1}},{ "className" : "org::exoplatform::faces::core::component::ComponentUtil" , "selectors" : { "addValidator(List,Class)" : 3 , "findComponentById(UIExoComponent,String)" : 3 , "findDescendantsOfType(???)" : 1 , "findRenderedComponentById(UIExoComponent,String)" : 3 , "getAncestorOfType(???)" : 2 , "getChildComponentOfType(???)" : 2 , "getSibling(???)" : 2 , "getValidator(???)" : 1 , "setRenderedComponent(UIExoComponent,Class)" : 2 , "setRenderedComponent(UIExoComponent,String)" : 2 , "setRenderedSibling(UIExoComponent,Class)" : 2}},{ "className" : "org::exoplatform::services::jcr::impl::core::RepositoryImpl" , "selectors" : { "getContainer(String)" : 5 , "getName()" : 3 , "getRepositoryManager()" : 6 , "login(Credentials,String)" : 1 , "setDefaultWorkspaceName(String)" : 1 , "setRepositoryManager(RepositoryManager)" : 1 , "setWorkspaceContainers(HashMap)" : 1}},{ "className" : "org::exoplatform::portlets::content::display::component::UIAdminStaticContentPortlet" , "selectors" : { "UIAdminStaticContentPortlet(UIContentConfig,UIContentConfigForm)" : 1}},{ "className" : "org::exoplatform::services::portletcontainer::pci::model::MessageListener" , "selectors" : { "MessageListener()" : 1 , "addDescription(Description)" : 1 , "getListenerClass()" : 1 , "getListenerName()" : 2 , "setListenerClass(String)" : 1 , "setListenerName(String)" : 1}},{ "className" : "org::exoplatform::services::portletregistery::PortletCategory" , "selectors" : { "getCreatedDate()" : 1 , "getDescription()" : 3 , "getId()" : 11 , "getModifiedDate()" : 1 , "getPortletCategoryName()" : 5 , "setDescription(String)" : 3 , "setPortletCategoryName(String)" : 4}},{ "className" : "org::exoplatform::faces::core::Util" , "selectors" : { "encodeActionPhase(???)" : 4 , "findInformationProvider(???)" : 8 , "getActionPhaseId(???)" : 2 , "getApplicationResourceBundle()" : 8 , "getRemoteUser()" : 1 , "getRenderer(???)" : 2}},{ "className" : "org::exoplatform::portlets::iframe::component::UIIframe" , "selectors" : { "getFrameHeight()" : 1 , "getFrameSource()" : 1 , "getFrameWidth()" : 1}},{ "className" : "org::exoplatform::services::indexing::IndexingService" , "selectors" : { "addIndexerPlugin(IndexerPlugin)" : 1 , "getAnalyzer(???)" : 1 , "getIndexDatabaseLocation()" : 1 , "getIndexerPlugin(String)" : 8 , "getIndexerPlugins()" : 3 , "getSearcher()" : 1 , "optimizeDatabase()" : 1 , "queueDeleteDocuments(???)" : 11 , "queueIndexDocument(???)" : 4 , "queueIndexDocuments(List)" : 1}},{ "className" : "org::exoplatform::services::backup::Metadata" , "selectors" : { "Metadata(String,String,String)" : 4 , "getDataVersion()" : 4}},{ "className" : "org::exoplatform::services::organization::impl::GroupImpl" , "selectors" : { "GroupImpl()" : 5 , "getGroupName()" : 1 , "getId()" : 2 , "setDescription(String)" : 2 , "setGroupName(String)" : 3 , "setId(String)" : 4 , "setParentId(String)" : 5}},{ "className" : "org::exoplatform::services::organization::OrganizationServiceListener" , "selectors" : { "inititalize(OrganizationService)" : 2}},{ "className" : "org::exoplatform::portal::session::RequestInfo" , "selectors" : { "RequestInfo()" : 1 , "getAccessibility()" : 7 , "getContextPath()" : 8 , "getOwnerURI()" : 15 , "getPageName()" : 5 , "getPageURI()" : 5 , "getPortal()" : 1 , "getPortalAction()" : 2 , "getPortalOwner()" : 13 , "getPortalOwner(???)" : 2 , "getPortletActionType()" : 1 , "getPortletMode()" : 3 , "getPortletWindowState()" : 3 , "getTargetComponentId()" : 3 , "getViewId()" : 4 , "init(???)" : 3}},{ "className" : "org::exoplatform::portlets::portletregistery::component::UIPortletRole::AddRoleActionListener" , "selectors" : { "AddRoleActionListener()" : 1}},{ "className" : "org::exoplatform::services::communication::sms::adapter::prodat::ProdatAdapterImpl" , "selectors" : { "ProdatAdapterImpl(Provider)" : 2}},{ "className" : "org::exoplatform::services::communication::message::impl::AttachmentImpl" , "selectors" : { "AttachmentImpl()" : 2 , "cloneAttachment()" : 1 , "getContent()" : 1 , "getName()" : 1 , "setContent(byte[])" : 1 , "setFolderId(String)" : 1 , "setId(String)" : 1 , "setMessageId(String)" : 1 , "setName(String)" : 1}},{ "className" : "org::exoplatform::faces::core::component::UIForm::Button" , "selectors" : { "Button(String,String)" : 9 , "getAction()" : 1}},{ "className" : "org::exoplatform::portlets::portletregistery::component::UIPortletCategoryForm::CancelActionListener" , "selectors" : { "CancelActionListener()" : 1}},{ "className" : "org::exoplatform::test::web::unit::SubmitFormUnit::FileParameter" , "selectors" : { "FileParameter(String,ExoUploadFileSpec[])" : 2}},{ "className" : "org::exoplatform::services::portletcontainer::test::portlet::PortletWithUnavailableExceptionWhileInit" , "selectors" : { "init(PortletConfig)::UnavailableException" : 1}},{ "className" : "javax::jcr::nodetype::NoSuchNodeTypeException" , "selectors" : { "NoSuchNodeTypeException(String)" : 1}},{ "className" : "org::exoplatform::container::configuration::MockConfigurationManagerImpl" , "selectors" : { "MockConfigurationManagerImpl(???)" : 2}},{ "className" : "org::exoplatform::services::portletcontainer::impl::event::MessageEventImpl" , "selectors" : { "MessageEventImpl(???)" : 1}},{ "className" : "org::exoplatform::services::wsrp::consumer::ProducerRegistry" , "selectors" : { "addProducer(Producer)" : 4 , "createProducerInstance()" : 1 , "existsProducer(String)" : 1 , "getAllProducers()" : 5 , "getLastModifiedTime()" : 2 , "getProducer(String)" : 2 , "removeAllProducers()" : 2 , "removeProducer(String)" : 1}},{ "className" : "org::exoplatform::test::mocks::portlet::MockPortletRequest" , "selectors" : { "MockPortletRequest()" : 2 , "getPreferences(???)" : 1}},{ "className" : "org::exoplatform::portlets::portletregistery::component::UIPortletForm::CancelActionListener" , "selectors" : { "CancelActionListener()" : 1}},{ "className" : "org::exoplatform::services::exception::ExoServiceException" , "selectors" : { "ExoServiceException(String)" : 2 , "ExoServiceException(Throwable)" : 4}},{ "className" : "org::exoplatform::services::jcr::impl::core::WorkspaceRegistryImpl" , "selectors" : { "createWorkspace(String,Ticket)" : 2 , "getWorkspace(Ticket)" : 1}},{ "className" : "org::exoplatform::portlets::portletregistery::component::UIPortletForm" , "selectors" : { "setPortletData(Portlet)" : 1}},{ "className" : "org::exoplatform::services::portletcontainer::pci::model::SecurityConstraint" , "selectors" : { "SecurityConstraint()" : 1 , "getPortletCollection()" : 3 , "getUserDataConstraint()" : 1 , "setDisplayName(String)" : 1 , "setPortletCollection(PortletCollection)" : 1 , "setUserDataConstraint(UserDataConstraint)" : 1}},{ "className" : "org::exoplatform::services::portletcontainer::pci::ExoWindowID" , "selectors" : { "ExoWindowID()" : 5 , "ExoWindowID(String)" : 5 , "generatePersistenceId()" : 2 , "getConfigurationSource()" : 3 , "getPersistenceId()" : 3 , "getPortletApplicationName()" : 4 , "getPortletName()" : 5 , "getUniqueID()" : 6 , "setConfigurationSource(String)" : 2 , "setOwner(String)" : 5 , "setPersistenceId(String)" : 1 , "setPortletApplicationName(String)" : 5 , "setPortletName(String)" : 52 , "setUniqueID(String)" : 6}},{ "className" : "org::exoplatform::services::workflow::impl::FormImpl" , "selectors" : { "FormImpl(???)" : 1 , "getLocalisedString(String,Locale)" : 1}},{ "className" : "org::exoplatform::services::wsrp::producer::impl::helpers::WSRPConsumerRewriterPortletURLFactory" , "selectors" : { "WSRPConsumerRewriterPortletURLFactory(String,List,boolean,List,Enumeration,String,String,PersistentStateManager,String)" : 1}},{ "className" : "org::exoplatform::container::configuration::ConfigurationManagerImpl" , "selectors" : { "ConfigurationManagerImpl(???)" : 3 , "addConfiguration(Collection)" : 9 , "addConfiguration(String)" : 1 , "addConfiguration(URL)" : 2 , "getServiceConfiguration(String)" : 1 , "getURL(String)" : 4 , "processRemoveConfiguration()" : 5 , "removePrefix(String,String)" : 4 , "resolveSystemProperties(String)" : 1}},{ "className" : "javax::naming::directory::SearchControls" , "selectors" : { "SearchControls()" : 25 , "SearchControls(int,long,int,String[],boolean,boolean)" : 3 , "setDerefLinkFlag(boolean)" : 3 , "setReturningAttributes(String[])" : 9 , "setSearchScope(int)" : 26}},{ "className" : "org::exoplatform::services::wsrp::test::TestSomeScenarios" , "selectors" : { "testFirstConsumerScenario()::PortletContext" : 1 , "testFirstConsumerScenario()::ServiceDescriptionRequest" : 1}},{ "className" : "org::exoplatform::portlet::faces::taglib::ExoViewTag" , "selectors" : { "doAfterBody()::JspException" : 2 , "doStartTag()::JspException" : 1 , "getLocaleFromString(String)" : 2 , "setProperties(UIComponent)::UIViewRoot" : 1}},{ "className" : "org::exoplatform::services::wsrp::test::BaseTest" , "selectors" : { "BaseTest(String)" : 9 , "getMarkup(RegistrationContext,PortletContext)::MarkupRequest" : 1 , "getServiceDescription(String)::ServiceDescriptionRequest" : 1 , "resolveRegistrationContext(RegistrationContext)::RegistrationData" : 1 , "setUp()" : 2 , "setUp()::ClientData" : 1 , "setUp()::MarkupParams" : 1 , "setUp()::PersonName" : 1 , "setUp()::RegistrationData" : 1 , "setUp()::RuntimeContext" : 1 , "setUp()::Templates" : 1 , "setUp()::UserContext" : 1 , "setUp()::UserProfile" : 1 , "setUp()::WSRPServiceLocator" : 1}},{ "className" : "org::exoplatform::faces::core::component::UIForm::Field" , "selectors" : { "Field(String,String)" : 1 , "getName()" : 11 , "getValidator(???)" : 1 , "hasError()" : 2 , "isEditable()" : 3 , "setEditable(boolean)" : 3 , "setError(boolean)" : 5 , "setValidator(Class)" : 1}},{ "className" : "org::exoplatform::services::database::impl::ExoCachePlugin" , "selectors" : { "ExoCachePlugin(ExoCache)" : 1 , "clear()::CacheException" : 1 , "get(Object)::CacheException" : 1 , "put(Object,Object)::CacheException" : 1 , "remove(Object)::CacheException" : 1}},{ "className" : "org::exoplatform::portlets::monitor::portlet::component::UIPortletContainerMonitor" , "selectors" : { "getUIPortletApplicationMonitor()" : 1 , "getUIPortletMonitor()" : 1 , "showMonitor(UIExoComponentBase)" : 2}},{ "className" : "org::exoplatform::portlets::user::component::UIMembershipTypeForm" , "selectors" : { "addMembershipType()" : 1 , "getParent(???)" : 2 , "setMembershipType(String)" : 1}},{ "className" : "org::exoplatform::services::portletcontainer::pci::RenderOutput" , "selectors" : { "RenderOutput()" : 1 , "getContent()" : 23 , "getTitle()" : 17 , "isCacheHit()" : 1 , "setContent(char[])" : 1 , "setTitle(String)" : 3}},{ "className" : "javax::naming::NameClassPair" , "selectors" : { "NameClassPair(String,String)" : 4 , "getClassName()" : 18 , "getName()" : 77 , "isRelative()" : 1 , "setName(String)" : 1 , "toString()" : 1}},{ "className" : "org::exoplatform::services::jcr::impl::storage::filesystem::nodedata::FileNodeContainer" , "selectors" : { "FileNodeContainer(String,File)" : 1 , "cleanContent()" : 1 , "getContentNode(String)" : 1 , "getContentProperty(String)" : 3 , "getContentProps()" : 1 , "updateContent(Node)" : 2}},{ "className" : "org::exoplatform::services::organization::Group" , "selectors" : { "getDescription()" : 2 , "getGroupName()" : 17 , "getId()" : 51 , "getLabel()" : 2 , "getParentId()" : 7 , "setDescription(String)" : 3 , "setGroupName(String)" : 9 , "setLabel(String)" : 3}},{ "className" : "org::exoplatform::services::indexing::FileIndexerPlugin" , "selectors" : { "indexDirectory(String,String,String[],boolean)" : 1 , "reindexDirectory(String,String,String[],boolean)" : 1}},{ "className" : "org::exoplatform::services::portletcontainer::monitor::PortletContainerMonitor" , "selectors" : { "getPortletRuntimeDataMap()" : 2}},{ "className" : "org::exoplatform::services::threadpool::impl::Queue" , "selectors" : { "Queue()" : 1 , "get()" : 1 , "get(long)" : 2 , "put(Object)" : 1 , "put(Object,long)" : 1}},{ "className" : "com::capeclear::www::GlobalWeather_wsdl::GlobalWeatherStub" , "selectors" : { "GlobalWeatherStub(???)" : 4 , "GlobalWeatherStub(Service)::org" : 1 , "createCall()::org" : 1 , "getWeatherReport(String)::org" : 1 , "setPortName(???)" : 2}},{ "className" : "org::exoplatform::services::wsrp::testConsumer::TestPortletRegistry" , "selectors" : { "testAddPortlet()::PortletContext" : 1 , "testRemoveAll()::PortletContext" : 1}},{ "className" : "org::exoplatform::services::xml::querying::impl::xtas::TmpBean" , "selectors" : { "getE1()" : 2 , "getF2()" : 2 , "getProperty()" : 3}},{ "className" : "org::exoplatform::portal::filter::AdminRequestFilter::Backup" , "selectors" : { "Backup(SessionContainer,Object)" : 1}},{ "className" : "org::exoplatform::services::indexing::impl::IndexingServiceImpl::Command" , "selectors" : { "Command(???)" : 5}},{ "className" : "org::exoplatform::services::communication::sms::encoder::PictureFormatter" , "selectors" : { "PictureFormatter()" : 1 , "getInstance()" : 1}},{ "className" : "org::exoplatform::services::portletcontainer::pci::model::DisplayName" , "selectors" : { "DisplayName()" : 1 , "getDisplayName()" : 1 , "getLang()" : 1 , "setDisplayName(String)" : 1 , "setLang(String)" : 1}},{ "className" : "org::exoplatform::portlets::portletregistery::component::UIPortletList::CancelActionListener" , "selectors" : { "CancelActionListener()" : 1}},{ "className" : "org::exoplatform::services::communication::sms::model::Message" , "selectors" : { "addRecipient(Recipient)" : 1 , "addRecipient(String)" : 3 , "getContent()" : 1 , "getFormat()" : 8 , "getFrom()" : 1 , "getRecipients()" : 14 , "setContent(Object)" : 3 , "setFormat(MessageFormat)" : 3 , "setFrom(String)" : 3}},{ "className" : "org::exoplatform::services::indexing::SearchInput" , "selectors" : { "getQuery(???)" : 4 , "hasTerm()" : 2}},{ "className" : "org::exoplatform::services::portletcontainer::pci::LocalisedDescription" , "selectors" : { "LocalisedDescription(Locale,String)" : 2 , "getDescription()" : 2 , "getLocale()" : 2}},{ "className" : "javax::jcr::BinaryValue" , "selectors" : { "BinaryValue(InputStream)" : 4 , "BinaryValue(String)" : 5 , "BinaryValue(byte[])" : 3 , "getString()" : 4}},{ "className" : "org::exoplatform::services::organization::ldap::NewUserConfig" , "selectors" : { "getGroup()" : 1 , "isIgnoreUser(String)" : 1}},{ "className" : "org::exoplatform::test::web::Util" , "selectors" : { "findFormWithName(???)" : 2 , "findLink(???)" : 1 , "findLinkWithText(???)" : 1 , "findLinkWithURL(???)" : 2 , "findLinksWithText(???)" : 1 , "findLinksWithURL(???)" : 1}},{ "className" : "org::exoplatform::services::wsrp::producer::impl::helpers::CacheControlProxy" , "selectors" : { "CacheControlProxy(???)" : 1 , "isValid()" : 1}},{ "className" : "org::exoplatform::portlets::wsrp::component::UIProducerMenu" , "selectors" : { "decode(FacesContext)::UIComponent" : 2 , "getProducers()" : 3 , "init()" : 2}},{ "className" : "org::exoplatform::services::portal::model::Body" , "selectors" : { "Body()" : 2 , "getComponentId()" : 1 , "getComponentType()" : 1 , "setComponentId(String)" : 1 , "setComponentType(String)" : 3 , "softCloneObject()" : 1}},{ "className" : "org::exoplatform::services::wsrp::producer::impl::helpers::WSRPHttpServletResponse" , "selectors" : { "WSRPHttpServletResponse()" : 3}},{ "className" : "org::exoplatform::portlets::communication::forum::component::UICategoryForm" , "selectors" : { "UICategoryForm(ForumService)" : 1 , "getSibling(???)" : 1 , "setCategory(Category)" : 2}},{ "className" : "org::exoplatform::services::jcr::config::RepositoryConfigurationException" , "selectors" : { "RepositoryConfigurationException(String)" : 4}},{ "className" : "org::exoplatform::services::resources::impl::ResourceBundleDataImpl" , "selectors" : { "ResourceBundleDataImpl()" : 2 , "setData(String)" : 1}},{ "className" : "org::exoplatform::services::portletcontainer::test::portlet::PortletToTestPortletURL" , "selectors" : { "render(RenderRequest,RenderResponse)::PortletException" : 2}},{ "className" : "org::exoplatform::services::jcr::core::ItemLocation" , "selectors" : { "ItemLocation(String)" : 9 , "ItemLocation(String,String)" : 14 , "equals(Object)" : 1 , "getAncestorPath(int)" : 4 , "getDepth()" : 2 , "getName()" : 8 , "getParentPath()" : 9 , "getPath()" : 30}},{ "className" : "org::exoplatform::services::portletcontainer::imp::TestPortletMode" , "selectors" : { "testIgnoreCustomModesNotSupportedByPortal()::PortletMode" : 1 , "testNonPortletAccessWhenModeIsNotDefined()::PortletMode" : 1 , "testOtherMarkup()::PortletMode" : 4 , "testOtherModes()::PortletMode" : 6}},{ "className" : "org::exoplatform::portlets::portletregistery::component::UIPortletRole::CancelActionListener" , "selectors" : { "CancelActionListener()" : 1}},{ "className" : "org::exoplatform::services::portal::model::PageSet" , "selectors" : { "PageSet()" : 1 , "getPages()" : 4}},{ "className" : "javax::jcr::nodetype::ConstraintViolationException" , "selectors" : { "ConstraintViolationException(String)" : 35 , "ConstraintViolationException(String,Exception)" : 1}},{ "className" : "org::exoplatform::portlet::exomvc::config::Configure" , "selectors" : { "configure(Configuration)" : 1}},{ "className" : "org::exoplatform::services::portletcontainer::impl::PortletDataImp" , "selectors" : { "PortletDataImp(Portlet,UserDataConstraint,List)" : 1 , "getWrappedPortletTyped()" : 2}},{ "className" : "org::exoplatform::services::portletcontainer::impl::PortletApplicationsHolder" , "selectors" : { "getAllPortletMetaData()" : 1 , "getPortletApplication(String)" : 14 , "getPortletMetaData(String,String)" : 9 , "getPortletModes(String,String,String)" : 2 , "getPortletModes(String,String,String)::PortletMode" : 1 , "getRoles(String)" : 1 , "getWindowStates(String)" : 3 , "getWindowStates(String)::WindowState" : 1 , "isModeSuported(???)" : 2 , "isStateSupported(???)" : 2 , "registerPortletApplication(String,PortletApp,Collection)" : 1 , "removePortletApplication(String)" : 1}},{ "className" : "org::exoplatform::services::jcr::impl::storage::rdb::repository::data::ContainerRecord" , "selectors" : { "ContainerRecord()" : 2 , "getId()" : 1 , "setName(String)" : 2}},{ "className" : "org::exoplatform::portlets::user::component::UIListMembershipType" , "selectors" : { "getParent(???)" : 2 , "update()" : 3}},{ "className" : "org::exoplatform::services::database::impl::HibernateServiceImpl" , "selectors" : { "HibernateServiceImpl(DatabaseService,LogService)" : 2 , "closeSession()" : 1 , "configure(String,Map)" : 2 , "createTable(String)" : 1 , "createTables(Configuration)" : 1 , "setDialect(Configuration,String)" : 1}},{ "className" : "org::exoplatform::services::database::impl::TextClobType" , "selectors" : { "getRealStatement(PreparedStatement)::HibernateException" : 4 , "nullSafeGet(ResultSet,String,Object)::HibernateException" : 2 , "nullSafeSet(PreparedStatement,Object,int)::HibernateException" : 8 , "sqlTypes()" : 1}},{ "className" : "org::exoplatform::services::resources::impl::LocaleConfigImpl" , "selectors" : { "LocaleConfigImpl()" : 1}},{ "className" : "org::exoplatform::faces::context::PortletExternalContext" , "selectors" : { "getApplicationResourceBundle()" : 5}},{ "className" : "org::exoplatform::faces::core::event::UIComponentObserver" , "selectors" : { "onChange(UIExoComponent)" : 2}},{ "className" : "org::exoplatform::commons::utils::Formater" , "selectors" : { "Formater()" : 1 , "format(Date)" : 13 , "format(String)" : 16 , "format(String,Object[])" : 5 , "format(String,String)" : 1 , "getDefaultFormater()" : 4 , "getFormater(Locale)" : 2}},{ "className" : "org::exoplatform::services::communication::sms::test::TestSmsServiceCase" , "selectors" : { "createTestMessage()" : 1}},{ "className" : "org::exoplatform::services::portal::test::TestPortalConfigService" , "selectors" : { "assertNodeData(Node)" : 3 , "createUser(String)" : 2}},{ "className" : "org::exoplatform::portlets::communication::forum::component::UIWatchForm" , "selectors" : { "UIWatchForm(ForumService)" : 1 , "setWatcher(Watcher)" : 2}},{ "className" : "org::exoplatform::services::portletcontainer::impl::config::PortletContainer" , "selectors" : { "PortletContainer()" : 1 , "addCustomMode(CustomMode)" : 1 , "addCustomWindowState(CustomWindowState)" : 1 , "addProperties(Properties)" : 1 , "addSupportedContent(SupportedContent)" : 1 , "getCache()" : 2 , "getCustomMode()" : 3 , "getCustomWindowState()" : 3 , "getDelegatedBundle()" : 1 , "getGlobal()" : 4 , "getObjectPool()" : 2 , "getProperties()" : 2 , "getSharedSession()" : 1 , "getSupportedContent()" : 2 , "setCache(Cache)" : 1 , "setDelegatedBundle(DelegatedBundle)" : 1 , "setGlobal(Global)" : 1 , "setObjectPool(ObjectPool)" : 1 , "setSharedSession(SharedSession)" : 1}},{ "className" : "org::exoplatform::services::wsrp::producer::impl::JSR168ContainerProxyImpl" , "selectors" : { "getBundle(String,String,Locale)" : 3 , "getPortletDesciption(String,String)::PortletDescription" : 1 , "getResourceList(String)::ResourceList" : 1 , "getUserProfileItems(List)" : 1 , "setMarkupTypes(List,Collection,String)::MarkupType" : 1}},{ "className" : "org::exoplatform::portlets::content::explorer::component::UIChildrenInfo::NodeDescriptorDataHandler" , "selectors" : { "NodeDescriptorDataHandler()" : 1}},{ "className" : "org::exoplatform::services::portal::impl::converter::PortletConverter" , "selectors" : { "PortletConverter()" : 2}},{ "className" : "org::exoplatform::container::monitor::jvm::v15::MemoryInfo" , "selectors" : { "MemoryInfo()" : 1}},{ "className" : "org::exoplatform::faces::core::component::model::CollectionDataHandler" , "selectors" : { "setDatas(Collection)" : 4}},{ "className" : "org::exoplatform::text::template::xhtml::Column" , "selectors" : { "Column(String)" : 1 , "Column(String,String)" : 15 , "renderCell(XhtmlDataHandlerManager,ResourceBundle,Writer)" : 1 , "renderHeader(ResourceBundle,Writer)" : 1}},{ "className" : "org::exoplatform::faces::core::renderer::html::TextAreaRenderer" , "selectors" : { "TextAreaRenderer()" : 1}},{ "className" : "org::exoplatform::services::task::PeriodicTask" , "selectors" : { "run()" : 1}},{ "className" : "org::exoplatform::services::task::Task" , "selectors" : { "execute()" : 1 , "getDescription()" : 1 , "getName()" : 1 , "getPortalContainer()" : 1}},{ "className" : "org::exoplatform::portlets::content::display::component::UIContentEditor" , "selectors" : { "getSibling(???)" : 1 , "setContentConfig(ContentConfig)" : 1}},{ "className" : "org::exoplatform::services::organization::hibernate::NewUserConfig::JoinGroup" , "selectors" : { "getGroupId()" : 1 , "getMembership()" : 1}},{ "className" : "org::exoplatform::services::indexing::MultipleFieldSearchInput" , "selectors" : { "MultipleFieldSearchInput(List)" : 2 , "getQuery(Analyzer)::BooleanQuery" : 1 , "setTerm(String)" : 2}},{ "className" : "org::exoplatform::faces::core::component::UIForm::IntegerField" , "selectors" : { "IntegerField(String,String,int)" : 2 , "getIntValue()" : 1 , "setIntValue(int)" : 2}},{ "className" : "org::exoplatform::portal::session::PortalResources" , "selectors" : { "changeLocaleConfig(String,String)" : 2 , "getApplicationOwnerResource()" : 3 , "getApplicationResource()" : 4 , "getLocale()" : 2 , "getLocaleConfig()" : 6 , "getPortalResourceBundle()" : 1}},{ "className" : "org::exoplatform::services::communication::sms::encoder::CallerGroupGraphicFormatter" , "selectors" : { "CallerGroupGraphicFormatter()" : 2 , "getInstance()" : 1}},{ "className" : "org::exoplatform::services::communication::message::impl::ExoAuthenticator" , "selectors" : { "ExoAuthenticator(String,String)" : 1 , "ExoAuthenticator(String,String)::PasswordAuthentication" : 1}},{ "className" : "org::exoplatform::services::portletcontainer::pci::model::InitParam" , "selectors" : { "InitParam()" : 1 , "addDescription(Description)" : 1 , "getName()" : 2 , "getValue()" : 2 , "setName(String)" : 1 , "setValue(String)" : 1}},{ "className" : "org::exoplatform::portlets::nav::component::UIMenu" , "selectors" : { "getUIToolbarNav()" : 1 , "getUIToolbarPage()" : 1 , "getUIToolbarPortal()" : 1 , "getUIToolbarView()" : 1 , "isShowAdminButton()" : 1}},{ "className" : "org::exoplatform::services::jcr::storage::Container" , "selectors" : { "add(Node)" : 4 , "delete(String)" : 3 , "getChildren(String)" : 6 , "getNodeByPath(String)" : 24 , "update(Node)" : 2}},{ "className" : "javax::jcr::Workspace" , "selectors" : { "clone(String,String,String,boolean)" : 5 , "copy(String,String,boolean)" : 9 , "exportDocView(String,ContentHandler,boolean,boolean)" : 2 , "exportDocView(String,OutputStream,boolean,boolean)" : 3 , "exportSysView(String,ContentHandler,boolean,boolean)" : 2 , "exportSysView(String,OutputStream,boolean,boolean)" : 3 , "getNamespaceRegistry()" : 7 , "getTicket()" : 2 , "move(String,String)" : 11}},{ "className" : "org::exoplatform::services::xml::transform::impl::html::TidyTransformerImpl" , "selectors" : { "TidyTransformerImpl()" : 1 , "TidyTransformerImpl()::Tidy" : 1 , "initProps()" : 1 , "processNotNativeResult(ByteArrayOutputStream)" : 1}},{ "className" : "java::net::MalformedURLException" , "selectors" : { "MalformedURLException()" : 2 , "MalformedURLException(String)" : 54}},{ "className" : "org::exoplatform::portlets::content::explorer::component::UIFileContentEditor" , "selectors" : { "getAncestorOfType(???)" : 1}},{ "className" : "org::exoplatform::services::jcr::api::writing::AddPropertyTest" , "selectors" : { "initRepository()" : 2}},{ "className" : "org::exoplatform::services::communication::sms::model::RecipientImpl" , "selectors" : { "RecipientImpl(String)" : 2}},{ "className" : "org::exoplatform::services::portal::community::CommunityPortal" , "selectors" : { "CommunityPortal()" : 1 , "getDescription()" : 2 , "getGroupId()" : 5 , "getMembership()" : 3 , "getPortal()" : 5 , "getPriority()" : 4 , "setDescription(String)" : 1 , "setGroupId(String)" : 1 , "setMembership(String)" : 1 , "setPortal(String)" : 1 , "setPriority(int)" : 1}},{ "className" : "org::exoplatform::portlets::jmx::component::model::MBeanDomain" , "selectors" : { "MBeanDomain(String)" : 2 , "addObjectName(ObjectName)" : 3 , "findMBeanDomain(String)" : 2 , "findMBeanObjectname(String)" : 3 , "getDomainName()" : 2 , "getDomains()" : 2 , "getLabel()" : 1 , "getMBeanNames()" : 2 , "isSelect()" : 3 , "setSelect(boolean)" : 1}},{ "className" : "org::exoplatform::services::resources::impl::LocaleConfigServiceImpl" , "selectors" : { "parseConfiguration(InputStream)" : 1}},{ "className" : "org::exoplatform::portal::faces::component::UIPortal" , "selectors" : { "addMessage(???)" : 1 , "clearMessages()" : 1 , "findUIBody()" : 7 , "findUIBody(UIContainer)" : 5 , "getCurrentUIPage()" : 7 , "getEditablePortalConfigModel()" : 1 , "getMessages()" : 1 , "getOwner()" : 13 , "getPortalComponent(Class)" : 15 , "getPortalConfigModel()" : 3 , "getRootContainer()" : 5 , "getRootNode()" : 4 , "getSelectedNode()" : 7 , "getUserCss()" : 2 , "hasEditNavigationCapability()" : 1 , "hasEditPortalCapability()" : 1 , "hasMessage()" : 1 , "hasQueuEvent()" : 1 , "isDirty()" : 1 , "processDecodes(???)" : 1 , "registerListeners()" : 1 , "removeSelectedNode()" : 1 , "setBodyComponent(???)" : 19 , "setComponentDirty(boolean)" : 1 , "setLastBodyComponent()" : 5 , "setPortalEditMode()" : 1 , "setPortalEditNavigationMode()" : 1 , "setPortalEditPageMode()" : 1 , "setPortalViewlMode()" : 1 , "setQueueEvent(boolean)" : 2 , "setSelectedNode(Node)" : 7}},{ "className" : "org::exoplatform::services::xml::transform::impl::TransformerBase" , "selectors" : { "TransformerBase()" : 1 , "afterInitResult()" : 1 , "getResult()" : 5 , "internalTransform(Source)" : 1 , "isResultSupported(Result)" : 1 , "isSourceSupported(Source)" : 1 , "sourceAsInputStream(Source)" : 1 , "transformInputStream2Result(InputStream,Result)" : 1}},{ "className" : "org::exoplatform::services::portal::PageDescription" , "selectors" : { "getEditPermission()" : 1 , "getId()" : 1 , "getName()" : 1 , "getOwner()" : 1 , "getViewPermission()" : 1}},{ "className" : "org::exoplatform::services::portletcontainer::impl::portletAPIImp::pool::EmptyRequest" , "selectors" : { "EmptyRequest()" : 4}},{ "className" : "org::exoplatform::services::cache::SimpleExoCache" , "selectors" : { "SimpleExoCache(String,int)" : 1 , "SimpleExoCache(int)" : 2 , "get(Serializable)" : 3 , "put(Serializable,Object)" : 3 , "remove(Serializable)" : 4}},{ "className" : "org::exoplatform::services::wsrp::consumer::UserSessionMgr" , "selectors" : { "getWSRPBaseService(???)" : 2}},{ "className" : "org::exoplatform::portlets::weather::WeatherData" , "selectors" : { "WeatherData()" : 2 , "getDisplayedStationCode()" : 8 , "getNbStations()" : 4 , "getPreferences(???)" : 2 , "getPreferredStationCode()" : 3 , "getSearchStationCode()" : 3 , "getSearchStationName()" : 5 , "getStationsList()" : 8 , "isStationFound()" : 4 , "setDisplayedStationCode(String)" : 10 , "setNbStations(int)" : 7 , "setSearchStationCode(String)" : 5 , "setSearchStationName(String)" : 5 , "setStationFound(boolean)" : 7 , "setStationList(Station[])" : 3}},{ "className" : "org::exoplatform::services::xml::querying::impl::xtas::Address" , "selectors" : { "Address()" : 1 , "getCity()" : 2 , "toString()" : 1}},{ "className" : "org::exoplatform::services::xml::querying::ConfigException" , "selectors" : { "ConfigException(String)" : 3}},{ "className" : "org::exoplatform::services::jcr::impl::storage::rdb::container::data::StringValueRecord" , "selectors" : { "StringValueRecord()" : 2 , "StringValueRecord(String)" : 1 , "getValue()" : 1}},{ "className" : "org::exoplatform::commons::xhtml::BaseXHTMLBuilder" , "selectors" : { "BaseXHTMLBuilder(Writer)" : 1 , "TD(String)" : 4 , "a(String,String)" : 1 , "closeDIV()" : 1 , "closeTABLE()" : 1 , "closeTH()" : 4 , "closeTR()" : 2 , "getBaseURL()" : 5 , "link(Parameter[],String)" : 1 , "startDIV()" : 1 , "startTABLE(Attributes)" : 1 , "startTH()" : 4 , "startTR()" : 2 , "text(String)" : 4}},{ "className" : "org::exoplatform::services::wsrp::producer::impl::helpers::ProducerRewriterPortletURLImp" , "selectors" : { "ProducerRewriterPortletURLImp(String,String,List,boolean,List,Enumeration,String,String,PersistentStateManager,String)" : 1}},{ "className" : "org::exoplatform::services::communication::message::impl::BaseMailMessageProtocolPlugin" , "selectors" : { "BaseMailMessageProtocolPlugin(MessageService,MailService)" : 2}},{ "className" : "org::exoplatform::services::portletregistery::impl::hibernate::PortletRoleImpl" , "selectors" : { "PortletRoleImpl()" : 1 , "setId(String)" : 1 , "setPortletId(String)" : 1}},{ "className" : "org::exoplatform::services::resources::Query" , "selectors" : { "Query(String,String)" : 2 , "getLanguage()" : 1 , "getName()" : 1 , "setLanguage(String)" : 1 , "setName(String)" : 1}},{ "className" : "org::exoplatform::portlets::user::component::UICommunityPortalForm" , "selectors" : { "getAncestorOfType(???)" : 1 , "getSibling(???)" : 1 , "setCommunityPortal(CommunityPortal)" : 1}},{ "className" : "org::exoplatform::portlet::exomvc::Page" , "selectors" : { "getConfiguration()" : 3 , "getPageURL(???)" : 2 , "processAction(???)" : 1 , "render(???)" : 2 , "setConfiguration(Configuration)" : 4 , "setPageName(String)" : 4}},{ "className" : "org::exoplatform::services::jcr::impl::core::nodetype::nt::Content" , "selectors" : { "Content()" : 1}},{ "className" : "org::exoplatform::services::xml::querying::impl::xtas::ForbiddenOperationException" , "selectors" : { "ForbiddenOperationException(String)" : 1}},{ "className" : "org::exoplatform::services::jcr::impl::core::WorkspaceImpl" , "selectors" : { "WorkspaceImpl(String,Ticket)" : 1 , "copy(String,String)" : 1 , "copy(String,String,boolean)" : 1 , "getNamespaceRegistry()" : 4 , "getRecursively(NodeImpl,List,WorkspaceContainer)" : 4 , "getRepositoryManager()" : 2 , "getStrPropValue(PropertyImpl,boolean)" : 2 , "initNodeAsDocView(NodeImpl,XMLWriter,boolean,boolean)" : 3 , "initNodeAsSysView(NodeImpl,XMLWriter,boolean,boolean)" : 3 , "invokeHandler(byte[],ContentHandler)" : 2}},{ "className" : "org::exoplatform::services::portletcontainer::impl::portletAPIImp::helpers::SharedSessionWrapper" , "selectors" : { "SharedSessionWrapper(???)" : 1 , "emptySharedSessionWrapper()" : 1 , "fillSharedSessionWrapper(???)" : 1 , "init()" : 2 , "removeAttribute(String)::HttpSessionBindingEvent" : 1 , "setAttribute(String,Object)::HttpSessionBindingEvent" : 1 , "setLastAccessTime()" : 8}},{ "className" : "org::exoplatform::services::portletcontainer::impl::portletAPIImp::PortletRequestDispatcherImp" , "selectors" : { "PortletRequestDispatcherImp(???)" : 2 , "include(RenderRequest,RenderResponse)::HttpServletRequestWrapper" : 1 , "include(RenderRequest,RenderResponse)::HttpServletResponseWrapper" : 1}},{ "className" : "org::exoplatform::services::log::impl::ExoLog" , "selectors" : { "ExoLog(String,int)" : 1 , "addLogMessage(LogMessage)" : 10 , "getErrorBuffer()" : 1 , "getLevel()" : 2 , "getLogBuffer()" : 1 , "getLogCategory()" : 2 , "setLevel(int)" : 2}},{ "className" : "org::exoplatform::commons::utils::PageList" , "selectors" : { "PageList(int)" : 7 , "checkAndSetPage(int)" : 1 , "currentPage()" : 8 , "getAll()" : 11 , "getAvailable()" : 12 , "getAvailablePage()" : 3 , "getCurrentPage()" : 1 , "getFrom()" : 4 , "getPage(int)" : 4 , "getPageSize()" : 2 , "getTo()" : 4 , "populateCurrentPage(int)" : 2 , "setAvailablePage(int)" : 8 , "setPageSize(int)" : 3}},{ "className" : "org::exoplatform::commons::utils::MapResourceBundle" , "selectors" : { "MapResourceBundle(Locale)" : 2 , "MapResourceBundle(ResourceBundle,Locale)" : 2 , "add(String,Object)" : 3 , "initMap()" : 1 , "lookupKey(String,Pattern)" : 2 , "merge(ResourceBundle)" : 1 , "recursivedResolving(String,Pattern)" : 1 , "resolveDependencies()" : 2}},{ "className" : "org::exoplatform::services::communication::sms::provider::prodat::ProdatProviderImpl" , "selectors" : { "ProdatProviderImpl()" : 1}},{ "className" : "org::exoplatform::services::portletcontainer::impl::portletAPIImp::tags::NamespaceTag" , "selectors" : { "doStartTag()::JspException" : 1}},{ "className" : "org::exoplatform::faces::search::component::UISearcher" , "selectors" : { "UISearcher(IndexingService)" : 2 , "advancedSearch(List,List)" : 3 , "getSearcher()" : 2 , "init(IndexingService)" : 2 , "quickSearch(String,List)" : 1 , "showAdvancedSearch()" : 1 , "viewDocument(???)" : 1}},{ "className" : "org::exoplatform::portlets::content::explorer::component::ExplorerListener" , "selectors" : { "onAddChild(UIExplorer,NodeDescriptor)" : 1 , "onChange(UIExplorer,NodeDescriptor)" : 1 , "onModify(UIExplorer,NodeDescriptor)" : 1 , "onRemove(UIExplorer,NodeDescriptor)" : 1}},{ "className" : "org::exoplatform::portlets::resources::component::UIResource" , "selectors" : { "getParent(???)" : 1 , "setResourceBundleData(ResourceBundleData)" : 2}},{ "className" : "org::exoplatform::faces::search::component::UISearchBar" , "selectors" : { "UISearchBar()" : 5 , "getParent(???)" : 2 , "setSearchOptions(List)" : 5}},{ "className" : "org::exoplatform::services::jcr::impl::core::nodetype::NodeTypeImpl" , "selectors" : { "checkAddChildNode(String)" : 1 , "checkAddChildNode(String,String)" : 2 , "checkRemove(String)" : 1 , "checkSetProperty(String,Value)" : 1 , "checkValueConstraint(String,Value)" : 1 , "fillSupertypes(ArrayList,NodeType)" : 2 , "getChildNodeDef(String)" : 1 , "getChildNodeDefs()" : 10 , "getName()" : 2 , "getPropertyDef(String)" : 2 , "getPropertyDefs()" : 4 , "getSupertypes()" : 3 , "isSameOrSubType(NodeType,NodeType)" : 4}},{ "className" : "org::exoplatform::services::jcr::impl::storage::rdb::repository::RDBRepositoryManagerImpl" , "selectors" : { "addLocation(String,String,String,boolean)::StringType" : 3 , "addWorkspaceContainer(String)::StringType" : 1 , "deleteLocationByUUID(String,String)" : 1 , "deleteLocationByUUID(String,String)::StringType" : 2 , "getLocationByPath(String,String)" : 1 , "getLocationByPath(String,String)::StringType" : 2 , "getLocationByUUID(String,String)::StringType" : 2}},{ "className" : "com::capeclear::www::GlobalWeather_wsdl::GlobalWeather_ServiceLocator" , "selectors" : { "GlobalWeather_ServiceLocator()" : 1 , "getGlobalWeather()::ServiceException" : 1 , "getGlobalWeather(???)" : 1 , "getGlobalWeatherWSDDServiceName()" : 2 , "getPort(Class)::ServiceException" : 2 , "getPort(QName,Class)::org" : 1 , "getStationInfo()::ServiceException" : 1 , "getStationInfo(???)" : 1 , "getStationInfoWSDDServiceName()" : 2}},{ "className" : "org::exoplatform::services::communication::sms::provider::Operator" , "selectors" : { "getHost()" : 2 , "getMethod()" : 1 , "getPassword()" : 3 , "getPort()" : 2 , "getUsername()" : 3 , "setPassword(String)" : 3 , "setUsername(String)" : 3}},{ "className" : "org::exoplatform::services::organization::ldap::VLVUserPageList" , "selectors" : { "VLVUserPageList(LDAPService,int,String,String)" : 4 , "getAttribute(Attributes,String)" : 8 , "getResultSize()" : 2 , "getResultSize()::SortControl" : 1 , "getResultSize()::VirtualListViewControl" : 1 , "populateCurrentPage(int)::SortControl" : 1 , "populateCurrentPage(int)::VirtualListViewControl" : 1}},{ "className" : "org::exoplatform::services::jcr::config::WorkspaceEntry" , "selectors" : { "WorkspaceEntry(String,String,String)" : 7 , "WorkspaceEntry(String,String,boolean,String)" : 6 , "getContainerName()" : 2 , "getName()" : 6 , "getRepositoryName()" : 3 , "isBase()" : 2}},{ "className" : "org::exoplatform::commons::debug::ObjectDebuger" , "selectors" : { "asString(Object)" : 2 , "getClassName(Class)" : 1 , "printCollection(Map,Collection,StringBuffer,String)" : 4 , "printObject(Map,Object,StringBuffer,String)" : 3}},{ "className" : "org::exoplatform::services::portletcontainer::PortletContainerService" , "selectors" : { "getAllPortletMetaData()" : 6 , "getBundle(???)" : 1 , "getPortletPreference(Input)" : 1 , "getSupportedPortletModes()" : 2 , "getSupportedPortletModesWithDescriptions()" : 1 , "getSupportedWindowStates()" : 3 , "getSupportedWindowStatesWithDescriptions()" : 1 , "getWindowStates(String)" : 2 , "processAction(???)" : 2 , "render(???)" : 2 , "setPortletPreference(Input,Map)" : 1}},{ "className" : "org::exoplatform::services::organization::User" , "selectors" : { "getEmail()" : 14 , "getFirstName()" : 17 , "getFullName()" : 12 , "getLastLoginTime()" : 2 , "getLastName()" : 15 , "getPassword()" : 10 , "getUserName()" : 58 , "setCreatedDate(Date)" : 6 , "setEmail(String)" : 16 , "setFirstName(String)" : 18 , "setFullName(String)" : 1 , "setLastLoginTime(Date)" : 7 , "setLastName(String)" : 16 , "setPassword(String)" : 17 , "setUserName(String)" : 17}},{ "className" : "org::exoplatform::text::template::MapFormater" , "selectors" : { "MapFormater(String,String)" : 1 , "setValueFormater(ObjectFormater)" : 1}},{ "className" : "org::exoplatform::services::jcr::impl::core::NodesModificationManager" , "selectors" : { "NodesModificationManager(TicketImpl)" : 1 , "add(NodeImpl)" : 1 , "addNode(NodeChange)" : 1 , "addReference(String,String)" : 3 , "addValidationError(String,Exception)" : 8 , "commit(NodeData,boolean)" : 2 , "commitAddedNode(NodeChange)" : 2 , "commitDeletedNode(NodeChange)" : 3 , "commitRefAddedNode(NodeChange)" : 2 , "commitUpdatedNode(NodeChange)" : 2 , "delete(NodeImpl)" : 1 , "getAllDescendants(NodeImpl,List)" : 3 , "getChildren(String)" : 6 , "getNodeByPath(String)" : 21 , "getNodeByUUID(String)" : 1 , "getNodeChange(String)" : 7 , "getPaths(String)" : 4 , "getRepositoryManager()" : 7 , "getState(NodeImpl)" : 4 , "getWorkspaceContainer()" : 9 , "hasPersistedParent(NodeImpl)" : 1 , "processErrors(Node,Map)" : 2 , "rollback(NodeImpl)" : 1 , "update(NodeImpl)" : 2 , "updateTime(NodeData,String)" : 3 , "updateUUID(NodeData)" : 1 , "validate(Node,boolean)" : 1 , "validateMandatory(Node)" : 1}},{ "className" : "org::exoplatform::services::jcr::impl::core::ItemIterator" , "selectors" : { "nextItem()" : 1}},{ "className" : "org::exoplatform::services::backup::impl::ImportExportServiceImpl" , "selectors" : { "exportServiceData(String)" : 1 , "exportServiceData(String,ZipOutputStream)" : 1 , "exportUserData(String)" : 1 , "exportUserData(String,ZipOutputStream)" : 1 , "importServiceData(String)" : 1 , "importServiceData(String,ZipFile)" : 1 , "importUserData(String,ZipFile)" : 2 , "setDirectory(String)" : 1}},{ "className" : "org::exoplatform::services::portletcontainer::pci::Input" , "selectors" : { "Input()" : 4 , "getBaseURL()" : 2 , "getLocales()" : 2 , "getMarkup()" : 9 , "getPortletMode(???)" : 7 , "getPortletPreferencesPersister()" : 2 , "getPortletState()" : 1 , "getPortletURLFactory()" : 4 , "getUserAttributes()" : 1 , "getWindowID()" : 58 , "getWindowState(???)" : 3 , "isStateSaveOnClient()" : 4 , "setBaseURL(String)" : 5 , "setMarkup(String)" : 8 , "setPortletPreferencesPersister(PortletPreferencesPersister)" : 4 , "setPortletState(byte[])" : 2 , "setPortletURLFactory(PortletURLFactory)" : 1 , "setStateSaveOnClient(boolean)" : 1 , "setUserAttributes(Map)" : 6 , "setWindowID(WindowID)" : 10 , "setWindowState(???)" : 1}},{ "className" : "org::exoplatform::services::communication::message::Message" , "selectors" : { "addAttachment(Attachment)" : 1 , "getBCC()" : 1 , "getBody()" : 6 , "getCC()" : 1 , "getTo()" : 4 , "setBCC(String)" : 1 , "setBody(String)" : 4 , "setCC(String)" : 1 , "setTo(String)" : 3}},{ "className" : "org::exoplatform::services::portal::skin::SkinConfigService" , "selectors" : { "addConfiguration(InputStream)" : 2 , "getContainerDecorator(String)" : 3 , "getContainerDecoratorStyle(String,String)" : 1 , "getContainerDecorators()" : 2 , "getPageDecorator(String)" : 2 , "getPageDecoratorStyle(String,String)" : 1 , "getPageDecorators()" : 2 , "getPortalDecorator(String)" : 1 , "getPortalDecorators()" : 1 , "getPortletDecorator(String)" : 2 , "getPortletDecoratorStyle(String,String)" : 1 , "getPortletDecorators()" : 2 , "getPortletStyle(String,String)" : 3 , "getPortletStyles(String)" : 4}},{ "className" : "org::exoplatform::services::portletcontainer::filter::PortletFilterConfig" , "selectors" : { "getInitParameter(String)" : 1}},{ "className" : "org::exoplatform::services::wsrp::utils::Modes" , "selectors" : { "Modes(String)" : 4 , "equals(Object)" : 3 , "fromValue(String)" : 2 , "toString()" : 1}},{ "className" : "org::exoplatform::portlet::faces::context::FacesPortletContextFactoryImpl" , "selectors" : { "getFacesContext(Object,Object,Object,Lifecycle)::FacesException" : 1}},{ "className" : "org::exoplatform::services::xml::querying::impl::xtas::helper::XMLDataManagerFacade" , "selectors" : { "XMLDataManagerFacade()" : 1}},{ "className" : "org::exoplatform::xml::object::XMLNativeArray" , "selectors" : { "XMLNativeArray(Object)" : 1 , "decodeDoubleArray(String)" : 1 , "decodeIntArray(String)" : 1 , "decodeLongArray(String)" : 1 , "encodeDoubleArray(double[])" : 1 , "encodeIntArray(int[])" : 1 , "encodeLongArray(long[])" : 1 , "getValue()" : 1 , "isNativeArray(Class)" : 1 , "isNativeArray(Object)" : 2 , "setType(Object)" : 1}},{ "className" : "org::exoplatform::faces::application::ExoFacesMessage" , "selectors" : { "ExoFacesMessage(String)" : 37 , "ExoFacesMessage(String,Object[])" : 11 , "ExoFacesMessage(String,String,Object[])" : 2 , "getDetail(ResourceBundle)" : 1 , "getSeverity(???)" : 4 , "getSummary(ResourceBundle)" : 9}},{ "className" : "org::exoplatform::services::communication::sms::encoder::OperatorLogoFormatter" , "selectors" : { "getInstance()" : 1}},{ "className" : "org::exoplatform::services::communication::message::impl::AccountImpl" , "selectors" : { "AccountImpl()" : 1 , "getId()" : 4 , "setId(String)" : 1}},{ "className" : "org::exoplatform::services::jcr::impl::storage::filesystem::nodedata::BaseNodeContainer" , "selectors" : { "BaseNodeContainer()" : 1 , "BaseNodeContainer(String,String,File)" : 2 , "getJcrPath(String)" : 10 , "getParentRelPath(String)" : 2 , "getRootNode()" : 3 , "getRootProperty(String)" : 3 , "getRootProps()" : 1 , "parseRelPath(String)" : 11}},{ "className" : "javax::jcr::util::TraversingItemVisitor" , "selectors" : { "TraversingItemVisitor(boolean)" : 1 , "TraversingItemVisitor(boolean,int)" : 3 , "entering(Node,int)" : 2 , "entering(Property,int)" : 1 , "leaving(Node,int)" : 2 , "leaving(Property,int)" : 1}},{ "className" : "org::exoplatform::services::communication::sms::encoder::RingtoneFormatter" , "selectors" : { "RingtoneFormatter()" : 1 , "getInstance()" : 1}},{ "className" : "org::exoplatform::services::xml::querying::impl::xtas::ResourceInstruction" , "selectors" : { "ResourceInstruction(String,String,UniFormTree)" : 1}},{ "className" : "org::exoplatform::portlets::portletregistery::component::UIPortletCategoryForm::SaveActionListener" , "selectors" : { "SaveActionListener()" : 1}},{ "className" : "org::exoplatform::services::threadpool::impl::ThreadPoolServiceImpl::BlockedExecutionStrategy" , "selectors" : { "blockedAction(Runnable)" : 1}},{ "className" : "org::exoplatform::services::communication::forum::Topic" , "selectors" : { "getDescription()" : 2 , "getId()" : 17 , "getLastPostBy()" : 1 , "getLastPostDate()" : 3 , "getOwner()" : 2 , "getPostCount()" : 5 , "getTopic()" : 5 , "setDescription(String)" : 2 , "setModifiedBy(String)" : 2 , "setOwner(String)" : 2 , "setTopic(String)" : 2}},{ "className" : "org::exoplatform::services::wsrp::bind::WSRP_v1_Registration_Binding_SOAPImpl" , "selectors" : { "WSRP_v1_Registration_Binding_SOAPImpl()" : 3}},{ "className" : "org::exoplatform::services::wsrp::consumer::GroupSession" , "selectors" : { "getGroupID()" : 1 , "getPortletSession(String)" : 1}},{ "className" : "org::exoplatform::services::portal::log::impl::SessionLogPersister::SessionLogPersisterTask" , "selectors" : { "SessionLogPersisterTask(SessionMonitor,PortalLogService)" : 1}},{ "className" : "org::exoplatform::services::task::TaskService" , "selectors" : { "queueRepeatTask(Task)" : 2 , "queueTask(Task)" : 4}},{ "className" : "org::exoplatform::portal::faces::component::UIPagePreview" , "selectors" : { "getAncestorOfType(???)" : 1 , "getUIPage()" : 1 , "getUIToolbar(???)" : 1 , "setPage(UIPortal,String)" : 1}},{ "className" : "org::exoplatform::services::jcr::api::visiting::ItemVisitorTest::MockVisitor" , "selectors" : { "MockVisitor()" : 1}},{ "className" : "org::exoplatform::services::communication::sms::provider::SmsMethod" , "selectors" : { "SmsMethod(String)" : 2}},{ "className" : "org::exoplatform::services::workflow::impl::WorkflowServiceContainerImpl" , "selectors" : { "init()" : 2 , "init()::JbpmConfiguration" : 1 , "setDialect(Properties,String)" : 1}},{ "className" : "org::exoplatform::services::portletcontainer::impl::portletAPIImp::helpers::CustomResponseWrapper" , "selectors" : { "CustomResponseWrapper(???)" : 1 , "emptyResponseWrapper()" : 1 , "fillResponseWrapper(???)" : 1 , "flushBuffer()" : 2 , "setURLEncoder(URLEncoder)" : 2}},{ "className" : "org::exoplatform::test::web::validator::WellFormedXhtmlValidator" , "selectors" : { "WellFormedXhtmlValidator()" : 1 , "validate(???)" : 1 , "validate(WebResponse,ExoWebClient)::SAXReader" : 1}},{ "className" : "org::exoplatform::services::portletcontainer::filter::PortletFilterChain" , "selectors" : { "doFilter(???)" : 2}},{ "className" : "org::exoplatform::services::communication::message::impl::IMAPMessageProtocolPlugin" , "selectors" : { "getInboxFolderURLName(String,String,String)::URLName" : 1}},{ "className" : "org::exoplatform::portal::faces::component::UIContainer" , "selectors" : { "UIContainer(Container)" : 1 , "UIContainer(Container,String,String)" : 3 , "buildTreeModel(Container)" : 1 , "getAncestorOfType(???)" : 2 , "getContainerModel()" : 2 , "getDisplayTitle()" : 9 , "getEditableContainerModel()" : 1 , "getRendererType(???)" : 1 , "getSelectedComponent()" : 1 , "initChildren(List,String)" : 2 , "registerListeners()" : 3 , "setDisplayTitle(String)" : 4 , "setSelectedComponent(int)" : 1}},{ "className" : "com::capeclear::www::GlobalWeather_xsd::WeatherReport" , "selectors" : { "<Initializer>()::org" : 11 , "getExtremes()" : 5 , "getPhenomena()" : 5 , "getPrecipitation()" : 5 , "getPressure()" : 4 , "getSky()" : 5 , "getStation()" : 4 , "getTemperature()" : 5 , "getTimestamp()" : 5 , "getVisibility()" : 4 , "getWind()" : 5}},{ "className" : "org::exoplatform::services::communication::message::impl::MailUtil" , "selectors" : { "createMessage(???)" : 1 , "hasSystemFlag(???)" : 1}},{ "className" : "org::exoplatform::services::jcr::api::reading::ItemTest" , "selectors" : { "initRepository()" : 3}},{ "className" : "org::exoplatform::services::portletcontainer::impl::portletAPIImp::RenderRequestImp" , "selectors" : { "RenderRequestImp(???)" : 1 , "emptyRenderRequest()" : 1 , "fillRenderRequest(Map,boolean)" : 1 , "getPortletConfig(???)" : 1}},{ "className" : "org::exoplatform::text::template::Value" , "selectors" : { "Value(String)" : 3 , "getExpression()" : 6}},{ "className" : "org::exoplatform::services::portletcontainer::impl::portletAPIImp::PortletResponseImp" , "selectors" : { "emptyPortletResponse()" : 2 , "fillPortletResponse(???)" : 1 , "getLocale(???)" : 1 , "getOutput()" : 8 , "getOutputStream(???)" : 1 , "getWriter(???)" : 1}},{ "className" : "org::exoplatform::test::web::WebUnitMonitor" , "selectors" : { "WebUnitMonitor()" : 2 , "getAvgContentLength()" : 2 , "getAvgExecutionTime()" : 2 , "getCounter()" : 2 , "getErrorCounter()" : 2 , "getSumContentLength()" : 2 , "getXhtmlMalformedCounter()" : 2 , "log(long,int,boolean,boolean)" : 3 , "reset()" : 3}},{ "className" : "org::exoplatform::portlet::commons::servlet::BufferedServletResponse::RenderOutputStream" , "selectors" : { "RenderOutputStream(ByteArrayOutputStream)" : 1 , "closeBuffer()" : 1 , "flushBuffer()" : 1}},{ "className" : "org::exoplatform::portal::faces::component::UIBasicComponent" , "selectors" : { "broadcast(???)" : 1 , "buildTreeModel(Container)" : 2 , "changeLocale(ResourceBundle)" : 1 , "clearComponentModified()" : 4 , "encodeBegin(???)" : 7 , "encodeChildren(???)" : 7 , "encodeEnd(???)" : 7 , "getAncestorOfType(???)" : 3 , "getComponentMode()" : 3 , "getComponentModel()" : 6 , "getDecorator()" : 15 , "getDecoratorStyle(SkinConfigService,String,String)" : 1 , "getDefaultRendererType()" : 1 , "getFloat()" : 2 , "getIdPrefix()" : 2 , "getParent(???)" : 3 , "getRendererType(???)" : 1 , "hasComponentAdminRole()" : 7 , "initBasicComponent(Component,String)" : 7 , "removeChild(UIBasicComponent)" : 1 , "setComponentAdminRole(boolean)" : 6 , "setComponentDirty(boolean)" : 2 , "setComponentMode(int)" : 9 , "setComponentModified(boolean)" : 10 , "setCustomizedId(String)" : 1 , "setDecorator(String,String)" : 2 , "setFloat(short)" : 5 , "setId(String)" : 9 , "setRendererType(String)" : 4 , "updateChange()" : 3}},{ "className" : "org::exoplatform::container::RootContainerInitializer" , "selectors" : { "initialize(RootContainer)" : 1}},{ "className" : "org::exoplatform::portlets::jmx::component::UIMBean" , "selectors" : { "canExecute(MBeanOperationInfo)" : 1 , "getMBeanInfo()" : 1 , "getMBeanServer()" : 1 , "getObjectName()" : 1 , "getSibling(???)" : 1 , "setUIMBeanData(MBeanServer,ObjectName)" : 2}},{ "className" : "org::exoplatform::portlets::content::explorer::component::model::NodeDescriptor" , "selectors" : { "getChildren()" : 1 , "getCreatedDate()" : 1 , "getIcon()" : 2 , "getModifiedDate()" : 1 , "getName()" : 3 , "getNodeType()" : 4 , "getOwner()" : 2 , "getParentUri()" : 6 , "getUri()" : 19 , "isLeafNode()" : 8 , "isVersioning()" : 1 , "setChildren(List)" : 1}},{ "className" : "org::exoplatform::services::organization::ldap::MembershipHandler" , "selectors" : { "MembershipHandler(LDAPService,HibernateService)" : 1 , "addMembershipEventListener(MembershipEventListener)" : 1 , "createMembership(Membership)" : 2 , "createMembership(Membership,boolean)" : 2 , "createMembershipEntries(Collection)" : 1 , "findMembership(String)" : 1 , "findMembershipByUserGroupAndType(String,String,String)" : 2 , "findMembershipsByGroup(Group)" : 2 , "findMembershipsByUser(String)" : 2 , "findMembershipsByUserAndGroup(String,String)" : 2 , "linkMembership(String,Group,Membership)" : 1 , "removeMembership(String)" : 1 , "removeMembership(String,boolean)" : 3 , "saveMembership(Membership)" : 1}},{ "className" : "org::exoplatform::services::communication::sms::provider::SenderImpl" , "selectors" : { "SenderImpl(Provider)" : 3}},{ "className" : "org::exoplatform::services::xml::querying::impl::xtas::City" , "selectors" : { "City()" : 1 , "City(String,String,String)" : 1 , "getCountry()" : 1 , "getName()" : 1}},{ "className" : "org::exoplatform::services::organization::hibernate::MembershipTypeQueryHandler" , "selectors" : { "createMembershipType(MembershipType)" : 1 , "findMembershipType(String)" : 1 , "findMembershipTypes()" : 1 , "removeMembershipType(String)" : 1 , "removeMembershipTypeEntry(???)" : 1 , "saveMembershipType(MembershipType)" : 1}},{ "className" : "org::exoplatform::services::portletcontainer::impl::portletAPIImp::PortletConfigImp" , "selectors" : { "PortletConfigImp(???)" : 3}},{ "className" : "org::exoplatform::services::portletcontainer::impl::portletAPIImp::PortletAPIObjectFactory" , "selectors" : { "PortletAPIObjectFactory()" : 1 , "createPortletContext(???)" : 2 , "getInstance()" : 2}},{ "className" : "org::exoplatform::text::template::xhtml::Element" , "selectors" : { "add(Element)" : 32 , "getDataHandlerType()" : 1 , "optimize()" : 10 , "optimize(Element)" : 2 , "render(XhtmlDataHandlerManager,ResourceBundle,Writer)" : 6 , "resolveValueAsString(Value,DataHandler,ResourceBundle)" : 10 , "setCssClass(String)" : 11 , "setDataHandlerType(Class)" : 1 , "setFomater(ObjectFormater)" : 3}},{ "className" : "org::exoplatform::filter::AxisFilter" , "selectors" : { "getHibernateServiceContainer(PortalContainer)" : 1}},{ "className" : "org::exoplatform::portal::faces::listener::portal::NodeActionListener" , "selectors" : { "moveDown(Node)" : 1 , "moveUp(Node)" : 1}},{ "className" : "org::exoplatform::portlets::portletregistery::component::UIPortletInfo::EditActionListener" , "selectors" : { "EditActionListener()" : 1}},{ "className" : "org::exoplatform::services::portal::impl::PortalConfigDescriptionData" , "selectors" : { "setOwner(String)" : 2}},{ "className" : "org::exoplatform::services::wsrp::consumer::GroupSessionMgr" , "selectors" : { "getWSRPBaseService(???)" : 1}},{ "className" : "org::exoplatform::faces::core::component::UIForm::TextAreaField" , "selectors" : { "TextAreaField(String,String,String)" : 3}},{ "className" : "org::exoplatform::services::xml::querying::XMLWellFormedData" , "selectors" : { "getAsByteArray()" : 2 , "getAsDOM()" : 1}},{ "className" : "org::exoplatform::services::communication::message::Account" , "selectors" : { "getAccessRole()" : 1 , "getAccountName()" : 11 , "getId()" : 13 , "getOwner()" : 1 , "getOwnerName()" : 2 , "getProperty(String)" : 10 , "getProtocol()" : 6 , "getReplyToAddress()" : 4 , "getSignature()" : 1 , "setAccountName(String)" : 4 , "setOwner(String)" : 4 , "setOwnerName(String)" : 3 , "setProperty(String,String)" : 9 , "setProtocol(String)" : 6 , "setReplyToAddress(String)" : 3 , "setSignature(String)" : 1}},{ "className" : "org::exoplatform::portlets::portletregistery::component::UIPortletCategory" , "selectors" : { "getAncestorOfType(???)" : 2}},{ "className" : "org::exoplatform::services::wsrp::utils::Utils" , "selectors" : { "getLocalizedString(???)" : 7 , "getLocalizedString(String,String)::LocalizedString" : 1 , "getLocalizedString(String,String,String)::LocalizedString" : 1 , "getNamesString(???)" : 1 , "getNamesString(String,String)::NamedString" : 1}},{ "className" : "org::exoplatform::commons::utils::EnumIterator" , "selectors" : { "EnumIterator(Enumeration)" : 1}},{ "className" : "org::exoplatform::faces::core::component::UIStringInput" , "selectors" : { "UIStringInput(String,String)" : 94 , "UIStringInput(String,String,String)" : 1 , "addValidator(Class)" : 9 , "getText()" : 3 , "getTitle()" : 2 , "getType()" : 1 , "getValue()" : 108 , "setText(String)" : 23 , "setTitle(String)" : 2 , "setType(int)" : 2 , "setValue(String)" : 110}},{ "className" : "org::exoplatform::services::xml::querying::impl::xtas::InstructionCompiler" , "selectors" : { "InstructionCompiler(InputStream)" : 1 , "compile(String)" : 1}},{ "className" : "org::exoplatform::services::xml::querying::impl::xtas::Street" , "selectors" : { "Street(String,Integer)" : 3}},{ "className" : "org::exoplatform::services::xml::querying::impl::xtas::resource::ResourceDescriptor" , "selectors" : { "ResourceDescriptor()" : 1 , "getClassname()" : 1 , "getPrefix()" : 1 , "setClassname(String)" : 1 , "setDescription(String)" : 1 , "setName(String)" : 1 , "setPrefix(String)" : 1}},{ "className" : "org::exoplatform::services::xml::querying::impl::xtas::object::ObjectMarshallerFactory" , "selectors" : { "ObjectMarshallerFactory()" : 1 , "getInstance()" : 3 , "getMarshaller(int)" : 3}},{ "className" : "org::exoplatform::services::jcr::impl::core::nodetype::nt::Default" , "selectors" : { "org" : 3}},{ "className" : "org::exoplatform::services::indexing::BaseIndexerPlugin" , "selectors" : { "BaseIndexerPlugin(IndexingService)" : 3 , "createBaseDocument(String,String,String,String,String,String)::Document" : 1 , "getContentDescription(String,int)" : 3 , "getPluginIdentifier()" : 3 , "getSearcher()" : 2 , "getSearcher()::IndexSearcher" : 1 , "getSearcher()::Term" : 1 , "removeIndex()" : 3 , "removeIndex()::Term" : 1}},{ "className" : "org::exoplatform::portlets::nav::component::UIVisitedPages" , "selectors" : { "getNumberOfPages()" : 1}},{ "className" : "javax::jcr::nodetype::NodeType" , "selectors" : { "canAddChildNode(String)" : 1 , "canAddChildNode(String,String)" : 3 , "canSetProperty(String,Value)" : 1 , "checkRemoveItem(String)" : 1 , "getChildNodeDefs()" : 11 , "getDeclaredChildNodeDefs()" : 5 , "getDeclaredPropertyDefs()" : 4 , "getDeclaredSupertypes()" : 4 , "getName()" : 34 , "getPropertyDefs()" : 22 , "getSupertypes()" : 1 , "isMixin()" : 2}},{ "className" : "org::exoplatform::services::jcr::impl::core::nodetype::nt::Version" , "selectors" : { "Version()" : 1}},{ "className" : "org::exoplatform::test::web::Tasks" , "selectors" : { "Tasks(int,ExoWebClient)" : 1 , "getNextTask()" : 1 , "getUnfinishedTaskCounter()" : 2 , "reset()" : 1}},{ "className" : "javax::jcr::StringIterator" , "selectors" : { "nextString()" : 4}},{ "className" : "org::exoplatform::services::communication::sms::model::Messages" , "selectors" : { "addMessage()" : 3 , "errorOccured()" : 2 , "getEncoding()" : 1 , "getLogonStatus()" : 4 , "getMessage(int)" : 6 , "getReason()" : 1 , "hasErrorOccured()" : 4 , "iterator()" : 3 , "setEncoding(String)" : 1 , "setLogonStatus(LogonStatus)" : 2 , "setReason(String)" : 2}},{ "className" : "org::exoplatform::services::communication::sms::provider::Messenger" , "selectors" : { "service(SmsRequest,SmsResponse)" : 2}},{ "className" : "org::exoplatform::services::communication::forum::hibernate::WatcherNotifyListener" , "selectors" : { "send(List,String,String)" : 2}},{ "className" : "org::exoplatform::portlets::jmx::component::UIListMBean" , "selectors" : { "getAncestorOfType(???)" : 1 , "setMBeanServerDomain(MBeanServer,MBeanDomain)" : 3}},{ "className" : "javax::naming::ldap::InitialLdapContext" , "selectors" : { "InitialLdapContext(Hashtable<?,?>,Control[])" : 6}},{ "className" : "org::exoplatform::container::groovy::GroovyObject" , "selectors" : { "GroovyObject(String)" : 1 , "getGroovyResource()" : 2 , "getLoadTime()" : 1 , "getObject()" : 2 , "getType()" : 8 , "isReloadable()" : 1 , "setObject(Object)" : 5 , "setType(???)" : 2}},{ "className" : "org::exoplatform::faces::core::component::model::FormButton" , "selectors" : { "FormButton(String,String)" : 77 , "FormButton(String,String,short)" : 5 , "getAction()" : 2 , "getClazz()" : 3 , "getLabel()" : 2 , "setClass(String)" : 3}},{ "className" : "org::exoplatform::portlets::rss::component::UIRss" , "selectors" : { "getChannel()" : 1 , "loadChannel(String)" : 2}},{ "className" : "org::exoplatform::container::monitor::jvm::v14::JVMRuntimeInfoImpl" , "selectors" : { "getBootClassPath()" : 1 , "getBootClassPathSupported()" : 1 , "getClassPath()" : 1 , "getInputArguments()" : 1 , "getLibraryPath()" : 1 , "getManagementSpecVersion()" : 1 , "getName()" : 1 , "getSpecName()" : 1 , "getSpecVendor()" : 1 , "getSpecVersion()" : 1 , "getStartTime()" : 1 , "getSystemProperties()" : 1 , "getUptime()" : 1 , "getVmName()" : 1 , "getVmVendor()" : 1 , "getVmVersion()" : 1}},{ "className" : "org::exoplatform::services::communication::sms::adapter::Adapter" , "selectors" : { "getRequest()" : 2 , "getResponse()" : 1}},{ "className" : "org::exoplatform::services::communication::forum::hibernate::ForumImpl" , "selectors" : { "ForumImpl()" : 1 , "addPostCount(int)" : 2 , "addTopicCount(int)" : 2 , "getAllModerators()" : 1 , "getId()" : 4 , "setCategoryId(String)" : 1 , "setCreatedDate(Date)" : 1 , "setId(String)" : 1 , "setLastPostBy(String)" : 1 , "setLastPostDate(Date)" : 1 , "setModifiedBy(String)" : 1 , "setModifiedDate(Date)" : 2 , "setOwner(String)" : 1}},{ "className" : "org::exoplatform::portlets::communication::forum::component::UIViewCategories" , "selectors" : { "UIViewCategories(ForumService)" : 1 , "buildTree()" : 2}},{ "className" : "org::exoplatform::services::organization::ldap::MembershipTypeHandler" , "selectors" : { "createMembershipType(MembershipType)" : 2 , "findMembershipType(String)" : 1 , "findMembershipTypes()" : 1 , "removeMembershipType(String)" : 2 , "saveMembershipType(MembershipType)" : 1}},{ "className" : "org::exoplatform::services::portal::model::PortalConfig" , "selectors" : { "PortalConfig()" : 2 , "getEditPermission()" : 4 , "getLayout()" : 3 , "getLocale()" : 2 , "getMobilePortalLayout()" : 3 , "getOwner()" : 5 , "getViewPermission()" : 7 , "setEditPermission(String)" : 2 , "setLayout(Container)" : 2 , "setLocale(String)" : 3 , "setOwner(String)" : 3 , "setViewPermission(String)" : 3 , "softCloneObject()" : 2}},{ "className" : "org::exoplatform::portlets::user::component::UIAccountForm::ConfirmPasswordValidator" , "selectors" : { "validate(FacesContext,UIComponent,Object)::ValidatorException" : 1}},{ "className" : "org::exoplatform::services::resources::ResourceBundleDescription" , "selectors" : { "getId()" : 5 , "getLanguage()" : 2 , "getName()" : 2 , "setLanguage(String)" : 2 , "setName(String)" : 3}},{ "className" : "org::exoplatform::portlets::content::display::component::UIStaticContentTab" , "selectors" : { "UIStaticContentTab(ContentConfig)" : 1 , "resolveContent(String)" : 3}},{ "className" : "org::exoplatform::services::wsrp::consumer::PortletDriver" , "selectors" : { "getMarkup(???)" : 1 , "performBlockingInteraction(???)" : 1}},{ "className" : "javax::xml::transform::sax::SAXTransformerFactory" , "selectors" : { "newInstance()" : 15 , "newTemplatesHandler()" : 3 , "newTransformerHandler()" : 13 , "newTransformerHandler(Source)" : 8 , "newTransformerHandler(Templates)" : 5 , "newXMLFilter(Source)" : 9}},{ "className" : "org::exoplatform::services::portal::skin::impl::SkinConfigServiceImpl" , "selectors" : { "addDecorator(Map,List)" : 4 , "addPortletStyle(Map,PortletStyleConfig)" : 1 , "getContainerDecorator(String)" : 1 , "getDecorator(Map,String)" : 4 , "getPageDecorator(String)" : 1 , "getPortalDecorator(String)" : 1 , "getXStreamInstance()::XppDriver" : 1 , "searchStyle(Decorator,String)" : 4}},{ "className" : "org::exoplatform::services::communication::sms::model::MessageStatus" , "selectors" : { "MessageStatus(String)" : 5}},{ "className" : "org::exoplatform::faces::user::validator::ValidGroupValidator" , "selectors" : { "validate(FacesContext,UIComponent,Object)::ValidatorException" : 3}},{ "className" : "org::exoplatform::services::wsrp::utils::WindowStates" , "selectors" : { "WindowStates(String)" : 4 , "equals(Object)" : 3 , "fromValue(String)" : 2 , "toString()" : 1}},{ "className" : "org::exoplatform::test::web::unit::SubmitFormUnit::BasicParameter" , "selectors" : { "BasicParameter(String,String)" : 2}},{ "className" : "org::exoplatform::test::mocks::jsf::MockExternalContext" , "selectors" : { "MockExternalContext()" : 1 , "init(???)" : 2 , "reset()" : 1}},{ "className" : "org::exoplatform::services::wsrp::consumer::Consumer" , "selectors" : { "getPortletDriverRegistry()" : 2 , "getPortletRegistry()" : 3 , "getProducerRegistry()" : 7 , "getTemplateComposer()" : 1 , "getURLRewriter()" : 1 , "getUserRegistry()" : 3}},{ "className" : "org::exoplatform::services::portletcontainer::impl::config::CustomWindowState" , "selectors" : { "CustomWindowState()" : 1 , "addDescription(Description)" : 1 , "getDescription()" : 2 , "getName()" : 3 , "setName(String)" : 1}},{ "className" : "org::exoplatform::services::portletregistery::impl::hibernate::PortletCategoryImpl" , "selectors" : { "PortletCategoryImpl()" : 1 , "setCreatedDate(Date)" : 1 , "setId(String)" : 1 , "setModifiedDate(Date)" : 2}},{ "className" : "org::exoplatform::portlets::user::component::UIMembershipForm" , "selectors" : { "UIMembershipForm()" : 1 , "encodeChildren(???)" : 1 , "getParent(???)" : 1 , "populateCommon()" : 2 , "populateFormByGroup(String)" : 1 , "populateFormByUser(String)" : 2}},{ "className" : "org::exoplatform::portal::faces::listener::portlet::PortletActionListener" , "selectors" : { "copyRequestParameterMap(Map)" : 2 , "getPortletContainerService()" : 1}},{ "className" : "org::exoplatform::services::communication::sms::encoder::TextFormatter" , "selectors" : { "TextFormatter()" : 1 , "getInstance()" : 1}},{ "className" : "org::exoplatform::services::database::impl::DatabaseServiceImpl" , "selectors" : { "findDatasource(DataSourceConfig)" : 1 , "getDataSource(String)" : 1 , "getDatabaseType(DataSource)" : 1}},{ "className" : "org::exoplatform::portlets::content::explorer::component::UIChoiceLabel" , "selectors" : { "UIChoiceLabel()" : 1}},{ "className" : "org::exoplatform::services::wsrp::test::TestGetServiceDescriptionInterface" , "selectors" : { "getHelloWorldPortlet(String)::ServiceDescriptionRequest" : 1 , "testGetCustomModes()::ServiceDescriptionRequest" : 1 , "testGetCustomWindowStates()::ServiceDescriptionRequest" : 1 , "testGetSupportedLocales()::ServiceDescriptionRequest" : 1 , "testRequiresRegistration()::ServiceDescriptionRequest" : 1}},{ "className" : "org::exoplatform::services::portal::model::PageReference" , "selectors" : { "PageReference()" : 3 , "PageReference(PageReference)" : 1 , "getPageReference()" : 7 , "getType()" : 4 , "isVisible()" : 9 , "setPageReference(String)" : 4 , "setType(String)" : 3 , "setVisible(boolean)" : 4}},{ "className" : "org::exoplatform::services::threadpool::impl::ThreadPoolServiceImpl" , "selectors" : { "addThread(Runnable)" : 3 , "execute(Runnable)" : 1 , "getBlockedExecutionStrategy()" : 1 , "getMaxIdleTime()" : 1 , "getMaximumPoolSize()" : 3 , "getNormalPoolSize()" : 1 , "getPoolSize()" : 4 , "getTask()" : 1 , "getThreadFactory()" : 1 , "runWhenBlocked()" : 1 , "setMaximumPoolSize(int)" : 1 , "workerDone(Worker)" : 1}},{ "className" : "org::exoplatform::faces::core::component::model::HtmlFragment" , "selectors" : { "render(???)" : 2}},{ "className" : "org::exoplatform::services::wsrp::consumer::PortletSession" , "selectors" : { "getAttribute(???)" : 2 , "getPortletHandle()" : 1 , "getPortletWindowSession(String)" : 1 , "getSessionContext(???)" : 2 , "setAttribute(???)" : 2 , "setSessionContext(???)" : 1}},{ "className" : "org::exoplatform::portlets::wsrp::component::UIProducerNode" , "selectors" : { "hasProducer()" : 1}},{ "className" : "org::exoplatform::services::resources::ResourceBundleData" , "selectors" : { "getData()" : 2 , "setData(String)" : 4}},{ "className" : "org::exoplatform::services::threadpool::impl::ThreadFactoryIF" , "selectors" : { "createThread(Runnable)" : 1}},{ "className" : "org::exoplatform::portlets::monitor::portlet::component::UIPortletMenu" , "selectors" : { "UIPortletMenu(Collection)" : 1 , "getPortletApplications()" : 2 , "reset(Collection)" : 1}},{ "className" : "org::exoplatform::services::portal::impl::NewPortalConfig" , "selectors" : { "getTemplateLocation()" : 3 , "getTemplateUser()" : 1 , "isPredefinedUser(String)" : 1}},{ "className" : "org::exoplatform::services::wsrp::consumer::URLRewriter" , "selectors" : { "rewriteURLs(String,String)" : 2}},{ "className" : "org::exoplatform::portlets::jmx::component::UIOperation" , "selectors" : { "execute(String[])" : 1 , "getBaseURL(???)" : 1 , "getMBeanOperationInfo()" : 1 , "getParameter(String,String)" : 1 , "getResult()" : 1 , "setOperation(MBeanServer,ObjectName,MBeanOperationInfo)" : 1}},{ "className" : "org::exoplatform::portlets::communication::forum::component::UIPostForm" , "selectors" : { "UIPostForm(ForumService)" : 1 , "getAncestorOfType(???)" : 2 , "getSibling(???)" : 2 , "setEditPostInfo(Topic,Post)" : 1 , "setNewPostInfo(Topic)" : 1 , "setNewTopicInfo(Forum)" : 2 , "setQuotePostInfo(Topic,Post)" : 1}},{ "className" : "org::exoplatform::services::portal::skin::converter::StyleConverter" , "selectors" : { "StyleConverter()" : 1}},{ "className" : "org::exoplatform::commons::utils::ExoProperties" , "selectors" : { "ExoProperties()" : 1 , "ExoProperties(int)" : 1 , "addPropertiesFromText(String)" : 1 , "getProperty(String)" : 18 , "setProperty(String,String)" : 2 , "toText()" : 1}},{ "className" : "org::exoplatform::portlets::monitor::portlet::component::UIPortletMonitor" , "selectors" : { "UIPortletMonitor()" : 1 , "getPortletRuntimeData()" : 1 , "setPortletRuntimeData(PortletRuntimeData)" : 1}},{ "className" : "org::exoplatform::portlets::wsrp::component::UIOfferedPortlet" , "selectors" : { "populate(???)" : 1}},{ "className" : "org::exoplatform::services::wsrp::consumer::Producer" , "selectors" : { "deregister(???)" : 1 , "getDescription()" : 1 , "getID()" : 9 , "getMarkupInterfaceEndpoint()" : 1 , "getName()" : 4 , "getPortletDescription(???)" : 5 , "getPortletManagementInterface(???)" : 2 , "getPortletManagementInterfaceEndpoint()" : 1 , "getRegistrationContext(???)" : 11 , "getRegistrationData(???)" : 4 , "getRegistrationInterfaceEndpoint()" : 1 , "getServiceDescription(???)" : 7 , "getServiceDescriptionInterface(???)" : 1 , "getServiceDescriptionInterfaceEndpoint()" : 1 , "isPortletManagementInferfaceSupported()" : 1 , "isRegistrationInterfaceSupported()" : 1 , "isRegistrationRequired()" : 2 , "register(???)" : 2 , "setDescription(String)" : 2 , "setDesiredLocales(String[])" : 4 , "setID(String)" : 2 , "setMarkupInterfaceEndpoint(String)" : 1 , "setName(String)" : 2 , "setPortletManagementInterfaceEndpoint(String)" : 2 , "setRegistrationInterfaceEndpoint(String)" : 2 , "setServiceDescriptionInterfaceEndpoint(String)" : 2}},{ "className" : "org::exoplatform::container::monitor::jvm::OperatingSystemInfo" , "selectors" : { "createURL(String)" : 1}},{ "className" : "org::exoplatform::services::portal::model::Page" , "selectors" : { "Page()" : 2 , "getEditPermission()" : 6 , "getIcon()" : 4 , "getName()" : 7 , "getOwner()" : 11 , "getPageId()" : 2 , "getState()" : 4 , "getViewPermission()" : 7 , "setEditPermission(String)" : 3 , "setIcon(String)" : 3 , "setName(String)" : 3 , "setOwner(String)" : 3 , "setState(String)" : 3 , "setViewPermission(String)" : 3 , "softCloneObject()" : 2}},{ "className" : "org::exoplatform::services::wsrp::producer::impl::WSRPConfiguration" , "selectors" : { "init(ExoProperties)" : 1 , "isBlockingInteractionOptimized()" : 1 , "isDoesUrlTemplateProcessing()" : 4 , "isHasUserSpecificState()" : 1 , "isRegistrationRequired()" : 4 , "isSavePortletStateOnConsumer()" : 3 , "isSaveRegistrationStateOnConsumer()" : 6 , "isTemplatesStoredInSession()" : 2 , "isUserContextStoredInSession()" : 2 , "isUsesMethodGet()" : 1}},{ "className" : "org::exoplatform::services::portletcontainer::pci::model::Preference" , "selectors" : { "Preference()" : 9 , "addValue(String)" : 7 , "clear()" : 1 , "getName()" : 6 , "getValue(String)" : 1 , "getValues()" : 11 , "getValues(String,String[])" : 1 , "isReadOnly()" : 7 , "setName(String)" : 9 , "setReadOnly(String)" : 3 , "setReadOnly(boolean)" : 3 , "setValues(List)" : 1}},{ "className" : "org::exoplatform::services::xml::querying::impl::xtas::object::plugins::CastorMappedMarshaller" , "selectors" : { "createMapping(InputSource)" : 1 , "loadMapping(Object)::Mapping" : 1 , "marshal(Object)::Marshaller" : 1}},{ "className" : "org::exoplatform::services::xml::querying::impl::xtas::TestResource" , "selectors" : { "suite()::TestSuite" : 1}},{ "className" : "org::exoplatform::services::portletcontainer::impl::config::CustomMode" , "selectors" : { "CustomMode()" : 1 , "addDescription(Description)" : 1 , "getDescription()" : 2 , "getName()" : 3 , "setName(String)" : 1}},{ "className" : "org::exoplatform::portlets::user::component::UIViewUserInGroup::UserDataHandler" , "selectors" : { "UserDataHandler()" : 1}},{ "className" : "org::exoplatform::services::wsrp::bind::WSRP_v1_Markup_Binding_SOAPImpl" , "selectors" : { "WSRP_v1_Markup_Binding_SOAPImpl()" : 3}},{ "className" : "org::exoplatform::portlets::content::explorer::component::UIJCRNodeInfo" , "selectors" : { "getCurrentNode()" : 1}},{ "className" : "org::exoplatform::services::portletcontainer::impl::servlet::ServletWrapper" , "selectors" : { "service(HttpServletRequest,HttpServletResponse)::ServletException" : 1}},{ "className" : "org::exoplatform::services::portal::impl::converter::ExoPortletPreferencesConverter" , "selectors" : { "ExoPortletPreferencesConverter()" : 2}},{ "className" : "org::exoplatform::portlets::content::MimeTypeManager" , "selectors" : { "MimeTypeManager()" : 1 , "getDirectoryType()" : 2 , "getFileExtension(String)" : 1 , "getInstance()" : 5 , "getMimeTypeByOfFile(String)" : 3}},{ "className" : "org::exoplatform::services::grammar::wiki::impl::ParsingContext" , "selectors" : { "ParsingContext(ServiceConfiguration)" : 1 , "createToken(int,String,String)" : 34 , "getOutputBuffer()" : 11 , "getSubBuffer(int,int)" : 2 , "getSubstring(int,int)" : 5 , "getTokenHandlerManager()" : 14 , "nextToken(Token)" : 25 , "out(String)" : 11 , "out(Token)" : 6 , "readColonPrefixToken()" : 1 , "readCurlyBracePrefixToken()" : 1 , "readDashPrefixToken()" : 1 , "readDefaultToken()" : 1 , "readNewLinePrefixToken()" : 1 , "readSquareBracePrefixToken()" : 1 , "readStarPrefixToken()" : 1 , "readTildePrefixToken()" : 1 , "readUnderscorePrefixToken()" : 1 , "transform(String)" : 1}},{ "className" : "org::exoplatform::container::jmx::ExoContainerMBean" , "selectors" : { "ExoContainerMBean(Object)" : 1}},{ "className" : "javax::jcr::Item" , "selectors" : { "accept(ItemVisitor)" : 6 , "getAncestor(int)" : 10 , "getDepth()" : 2 , "getName()" : 106 , "getParent()" : 2 , "getParents()" : 2 , "getPath()" : 59 , "getPaths()" : 5 , "getTicket()" : 2 , "isIdentical(Item)" : 8 , "isNode()" : 3}},{ "className" : "org::exoplatform::portlets::user::component::UIGroupCommunityInfo::GroupChangeObserver" , "selectors" : { "GroupChangeObserver()" : 1}},{ "className" : "org::exoplatform::services::jcr::api::reading::NodeTest" , "selectors" : { "initRepository()" : 3}},{ "className" : "org::exoplatform::services::portletcontainer::PortletLifecycleListener" , "selectors" : { "postDeploy(???)" : 1 , "postUndeploy(???)" : 1 , "preDeploy(???)" : 1 , "preUndeploy(???)" : 1}},{ "className" : "org::exoplatform::services::jcr::impl::storage::rdb::container::data::NodeRecord" , "selectors" : { "NodeRecord()" : 2 , "getId()" : 3 , "getPath()" : 3 , "getProperties()" : 1 , "setParentId(Long)" : 2 , "setPath(String)" : 2 , "setProperties(Set)" : 3}},{ "className" : "org::exoplatform::services::wsrp::consumer::PortletDriverRegistry" , "selectors" : { "getPortletDriver(WSRPPortlet)" : 2}},{ "className" : "org::exoplatform::services::portletcontainer::impl::portletAPIImp::PortletRequestImp" , "selectors" : { "containsKey(Object)" : 2 , "fillPortletRequest(???)" : 1 , "getAttribute(String)" : 8 , "getAuthType()" : 1 , "getCharacterEncoding(???)" : 1 , "getContextPath()" : 1 , "getInput()" : 2 , "getInputStream(???)" : 1 , "getLocale()" : 1 , "getParameter(???)" : 1 , "getParameterMap(???)" : 1 , "getParameterNames(???)" : 2 , "getParameterValues(???)" : 1 , "getPortletSession(???)" : 2 , "getPortletSession(boolean)::HttpServletRequest" : 2 , "getPortletWindowInternal()" : 1 , "getProperties(String)::HttpServletRequest" : 1 , "getProperty(String)::HttpServletRequest" : 1 , "getPropertyNames()::HttpServletRequest" : 1 , "getReader(???)" : 1 , "getRemoteUser(???)" : 1 , "getResponseContentType()" : 1 , "getUserPrincipal(???)" : 1 , "init()" : 1 , "isRequestedSessionIdValid()::HttpServletRequest" : 2 , "isRoleDefinedInWebXML(String)" : 2 , "isUserInRole(String)" : 1 , "put(Object,Object)" : 1 , "removeAttribute(String)" : 1 , "setAttribute(String,Object)" : 5 , "setCharacterEncoding(???)" : 1}},{ "className" : "org::exoplatform::portlets::communication::sms::util::SmsPortletUtil" , "selectors" : { "getProvider(SmsService)" : 3}},{ "className" : "com::capeclear::www::GlobalWeather_xsd::Sky" , "selectors" : { "<Initializer>()::org" : 4 , "equals(Object)" : 1 , "getCeiling_altitude()" : 2 , "getLayers()" : 6 , "getString()" : 4 , "hashCode()" : 1}},{ "className" : "org::exoplatform::portlets::communication::message::renderer::html::MessagesRenderer" , "selectors" : { "resolveIcon(ResourceBundle,Message)" : 1}},{ "className" : "org::exoplatform::portlets::weather::component::UICommandButton" , "selectors" : { "getName()" : 3}},{ "className" : "org::exoplatform::services::communication::forum::hibernate::ForumExporter" , "selectors" : { "ForumExporter(???)" : 1 , "export()" : 1 , "export(String)" : 1 , "exportCategory(String,CategoryImpl)" : 1 , "exportForum(String,ForumImpl)" : 1 , "exportTopic(String,TopicImpl)" : 1}},{ "className" : "org::exoplatform::portal::faces::component::UIPageNodeForm" , "selectors" : { "getAncestorOfType(???)" : 2 , "returnReferencePage(String)" : 1 , "save(InformationProvider)" : 1 , "setEditingNavigationNode(Node)" : 2}},{ "className" : "java::lang::management::MemoryMXBean" , "selectors" : { "getHeapMemoryUsage()" : 5 , "getNonHeapMemoryUsage()" : 5 , "getObjectPendingFinalizationCount()" : 1 , "isVerbose()" : 1}},{ "className" : "org::exoplatform::services::portletcontainer::helper::URLEncoder" , "selectors" : { "encodeURL(String)" : 1}},{ "className" : "org::exoplatform::services::portal::PortalACL" , "selectors" : { "hasEditNodePermission(Node,String,String)" : 1 , "hasEditPagePermission(Page,String)" : 3 , "hasEditPortalPermission(PortalConfig,String)" : 1 , "hasViewPagePermission(Page,String)" : 3 , "hasViewPortalPermission(PortalConfig,String)" : 1}},{ "className" : "org::exoplatform::services::wsrp::AdminClient" , "selectors" : { "AdminClient()" : 1 , "AdminClient()::Service" : 1 , "getUsageInfo()" : 1 , "list()" : 1 , "process(InputStream)" : 4 , "process(Options,InputStream)::SOAPBodyElement" : 1 , "process(String)" : 1 , "process(String[])" : 1 , "process(String[])::Options" : 1 , "quit()" : 1}},{ "className" : "org::exoplatform::services::indexing::RangeFieldSearchInput" , "selectors" : { "RangeFieldSearchInput(String,Date,Date)" : 2 , "getQuery(Analyzer)::Term" : 2}},{ "className" : "org::exoplatform::portlets::jmx::component::UINavigator" , "selectors" : { "findComponent(???)" : 1 , "getDefaultUIMBeanServer()" : 1 , "getSibling(???)" : 1}},{ "className" : "org::exoplatform::services::portal::impl::PageData" , "selectors" : { "PageData(Page)" : 3 , "PageData(String)" : 1 , "getData()" : 1 , "getId(Page)" : 3 , "getPage()" : 2 , "setData(String)" : 1 , "setPage(Page)" : 1}},{ "className" : "org::exoplatform::services::portal::impl::converter::PreferenceConverter" , "selectors" : { "PreferenceConverter()" : 2}},{ "className" : "org::exoplatform::services::portal::impl::converter::NodeConfigConverter" , "selectors" : { "NodeConfigConverter()" : 1}},{ "className" : "javax::jcr::Node" , "selectors" : { "addExistingNode(String)" : 1 , "addMixin(String)" : 8 , "addNode(String)" : 23 , "addNode(String,String)" : 106 , "findProperties(Value)" : 3 , "findProperty(Value)" : 23 , "getDefinition()" : 3 , "getMixinNodeTypes()" : 9 , "getNode(String)" : 164 , "getNodes()" : 15 , "getNodes(String)" : 4 , "getPrimaryItem()" : 5 , "getPrimaryNodeType()" : 17 , "getProperties()" : 16 , "getProperties(String)" : 6 , "getProperty(String)" : 112 , "getUUID()" : 14 , "hasNode(String)" : 9 , "hasNodes()" : 3 , "hasProperties()" : 1 , "hasProperty(String)" : 4 , "isNodeType(String)" : 7 , "remove(String)" : 48 , "save(boolean)" : 23 , "setProperty(String,Calendar)" : 2 , "setProperty(String,InputStream)" : 2 , "setProperty(String,String)" : 32 , "setProperty(String,String,int)" : 4 , "setProperty(String,String[],int)" : 6 , "setProperty(String,Value)" : 49 , "setProperty(String,Value,int)" : 6 , "setProperty(String,Value[],int)" : 9 , "setProperty(String,boolean)" : 3 , "setProperty(String,double)" : 4 , "setProperty(String,long)" : 2}},{ "className" : "org::exoplatform::faces::core::component::UIHiddenInput" , "selectors" : { "encodeBegin(???)" : 1}},{ "className" : "org::exoplatform::faces::core::renderer::html::FormRenderer" , "selectors" : { "FormRenderer()" : 1 , "getNormalScript(String)" : 1}},{ "className" : "org::exoplatform::services::wsrp::producer::impl::helpers::WSRPHttpSession" , "selectors" : { "WSRPHttpSession(String,int)" : 2 , "getAttribute(String)" : 2 , "getId()" : 4 , "isInvalidated()" : 1 , "setAttribute(String,Object)" : 2 , "setLastAccessTime(long)" : 1}},{ "className" : "org::exoplatform::services::portletcontainer::impl::monitor::PortletMonitor" , "selectors" : { "brokePortlet(String,String)" : 2 , "destroy(String,String)" : 1 , "getCacheExpirationPeriod(String,String)" : 1 , "getPortletRuntimeData(String,String)" : 1 , "getPortletRuntimeDataMap()" : 3 , "getPortletVersionNumber(String)" : 1 , "init(String,String,int)" : 1 , "isAvailable(String,String)" : 1 , "isAvailable(String,String,long)" : 8 , "isBroken(String,String)" : 8 , "isDestroyed(String,String)" : 6 , "isInitialisationAllowed(String,String,long)" : 1 , "isInitialized(String,String)" : 6 , "register(String,String)" : 1 , "registerPortletApp(String)" : 1 , "setInitializationTime(String,String,long)" : 1 , "setLastAccessTime(String,String,long)" : 1 , "setLastFailureAccessTime(String,String,long)" : 1 , "setLastInitFailureAccessTime(String,String,long)" : 1 , "setUnavailabilityPeriod(String,String,int)" : 2}},{ "className" : "org::exoplatform::services::portal::impl::converter::PageSetConverter" , "selectors" : { "PageSetConverter()" : 1}},{ "className" : "org::exoplatform::services::jcr::core::NodeChange" , "selectors" : { "getNode()" : 26 , "getPath()" : 4 , "getState()" : 24 , "refreshNode(NodeData)" : 2 , "setState(int)" : 1}},{ "className" : "org::exoplatform::services::jcr::impl::util::SysNodeImporter" , "selectors" : { "SysNodeImporter(String,Ticket)" : 1 , "fillItems(String,InputStream,Ticket)" : 1 , "getType(String)" : 1}},{ "className" : "org::exoplatform::services::xml::querying::impl::xtas::TestQuery" , "selectors" : { "suite()::TestSuite" : 1}},{ "className" : "org::exoplatform::portal::session::ExoPortal" , "selectors" : { "getPortalMode()" : 1 , "getRootNode()" : 11 , "getSelectedNode()" : 6 , "hasEditNavigationCapability()" : 2 , "hasEditPortalCapability()" : 2 , "queueEvent(???)" : 2 , "setPortalMode(int)" : 4 , "setSelectedNode(Node)" : 2}},{ "className" : "org::exoplatform::services::wsrp::producer::impl::TransientStateManagerImpl" , "selectors" : { "getCacheControl(PortletData)::CacheControl" : 1}},{ "className" : "org::exoplatform::services::database::HibernateServiceContainer" , "selectors" : { "closeAllSessions()" : 4 , "getHibernateService(String)" : 2}},{ "className" : "org::exoplatform::faces::core::component::UIFormWithInformationProvider" , "selectors" : { "UIFormWithInformationProvider(String,String,String)" : 2 , "encodeBegin(???)" : 1 , "encodeEnd(???)" : 2}},{ "className" : "org::exoplatform::faces::core::component::UISimpleForm" , "selectors" : { "UISimpleForm(String,String,String)" : 43 , "add(UIHiddenInput)" : 15 , "addValidator(Class)" : 1 , "broadcast(???)" : 2 , "getBaseURL(???)" : 1 , "getFormName()" : 4 , "getHiddenInputs()" : 1 , "getMethod()" : 1 , "getMode()" : 1 , "getNormalScript()" : 1 , "getScript()" : 1 , "getUserAction()" : 1 , "hasError()" : 1 , "queueEvent(???)" : 1 , "setEnhancedScript(String,String,String)" : 1 , "setError(boolean)" : 1 , "setMode(short)" : 6 , "setUserAction(String)" : 2}},{ "className" : "org::exoplatform::portal::faces::renderer::html::portlet::PortletRenderer" , "selectors" : { "copyRequestParameterMap(Map)" : 1 , "getPortletContainerService()" : 1}},{ "className" : "org::exoplatform::portlets::wsrp::UIProducers" , "selectors" : { "UIProducers(???)" : 1 , "processAction(???)" : 1 , "render(???)" : 1}},{ "className" : "org::exoplatform::services::portal::community::CommunityNavigation" , "selectors" : { "CommunityNavigation()" : 1 , "getDescription()" : 2 , "getGroupId()" : 5 , "getMembership()" : 3 , "getNavigation()" : 4 , "setDescription(String)" : 1 , "setGroupId(String)" : 1 , "setMembership(String)" : 1 , "setNavigation(String)" : 1}},{ "className" : "org::exoplatform::xml::object::XMLObject" , "selectors" : { "XMLObject(Object)" : 7 , "addField(XMLField)" : 2 , "findFields(Map,Class)" : 2 , "getFieldIterator()" : 1 , "getFields(Class)" : 2 , "getObject(InputStream)" : 2 , "getXMLObject(InputStream)" : 7 , "setType(String)" : 1 , "toByteArray()" : 3 , "toByteArray(String)" : 4 , "toObject()" : 10 , "toXML(String)" : 1}},{ "className" : "org::exoplatform::test::mocks::jsf::MockResponseWriter" , "selectors" : { "MockResponseWriter(Writer)" : 2 , "closeStartIfNecessary()" : 7}},{ "className" : "org::exoplatform::services::communication::forum::ForumService" , "selectors" : { "addCategory(Category)" : 2 , "addForum(Category,Forum)" : 2 , "addPost(Topic,Post)" : 2 , "addTopic(Forum,Topic)" : 2 , "createCategoryInstance()" : 2 , "createForumInstance()" : 2 , "createPostInstance()" : 2 , "createTopicInstance()" : 2 , "createWatcher(Forum)" : 2 , "createWatcher(Topic)" : 2 , "getCategories()" : 4 , "getCategory(String)" : 3 , "getForum(String)" : 6 , "getForums(String)" : 4 , "getLastModifiedTime()" : 3 , "getPost(String)" : 2 , "getPosts(String)" : 4 , "getTopic(String)" : 7 , "getTopics(String)" : 5 , "getWatcher(Forum,String)" : 3 , "getWatcher(Topic,String)" : 3 , "removeCategory(String)" : 2 , "removeForum(String)" : 2 , "removePost(String)" : 1 , "removeTopic(String)" : 2 , "removeWatcher(Watcher)" : 2 , "saveWatcher(Watcher)" : 3 , "updateCategory(Category)" : 1 , "updateForum(Forum)" : 1 , "updatePost(Post)" : 1}},{ "className" : "org::exoplatform::services::communication::message::impl::MessageIndexerPluginImpl" , "selectors" : { "createMesasge(Account,MessageImpl)" : 1 , "moveMesasge(Account,String,MessageImpl)" : 1 , "moveMesasge(Account,String,MessageImpl)::Term" : 1 , "removeAccount(Account)" : 1 , "removeAccount(Account)::Term" : 1 , "removeFolder(Folder)" : 1 , "removeFolder(Folder)::Term" : 1 , "removeMessage(Message)" : 1 , "removeMessage(Message)::Term" : 1}},{ "className" : "org::exoplatform::faces::core::renderer::html::ChildrenRenderer" , "selectors" : { "ChildrenRenderer()" : 1}},{ "className" : "org::exoplatform::faces::core::component::model::Cell::Attribute" , "selectors" : { "Attribute(String,String)" : 1}},{ "className" : "org::exoplatform::portlets::exomvc::pojo::ListUserPage::ListUserBuilder" , "selectors" : { "ListUserBuilder(???)" : 1 , "createUsersBlock(List)" : 1}},{ "className" : "org::exoplatform::portlets::wsrp::GroupSessionImpl" , "selectors" : { "GroupSessionImpl(String,String)" : 1 , "addPortletSession(PortletSession)" : 1}},{ "className" : "org::exoplatform::services::jcr::impl::core::NodesStorage" , "selectors" : { "NodesStorage(RepositoryManager,WorkspaceContainer)" : 1 , "add(NodeImpl)" : 1 , "addReference(String,String)" : 1 , "getChangedReferencedPaths(String)" : 1 , "getChildren(String)" : 2 , "getChildrenChanges(String,boolean)" : 5 , "getKeys()" : 1 , "getNodeByPath(String)" : 2 , "getNodeByUUID(String)" : 1 , "getNodeChangeByPath(String)" : 4 , "remove(String)" : 7 , "setState(String,int)" : 7}},{ "className" : "org::exoplatform::test::web::unit::SubmitFormUnit::Parameter" , "selectors" : { "setWebFormValue(???)" : 1}},{ "className" : "org::exoplatform::xml::object::XMLValue" , "selectors" : { "XMLValue(Class,Object)" : 2}},{ "className" : "org::exoplatform::services::wsrp::producer::impl::ServiceDescriptionInterfaceImpl" , "selectors" : { "getCustomModeDescriptions(Collection)::ItemDescription" : 1 , "getCustomWindowStateDescriptions(Collection)::ItemDescription" : 1 , "getServiceDescription(RegistrationContext,String)::ModelDescription" : 1 , "getServiceDescription(RegistrationContext,String)::ResourceList" : 1 , "getServiceDescription(RegistrationContext,String)::ServiceDescription" : 1}},{ "className" : "org::exoplatform::services::portal::impl::PortalConfigServiceImpl" , "selectors" : { "getPage(String)" : 2 , "getPortalConfig(String)" : 4 , "getXStreamInstance()::XppDriver" : 1 , "getXStreamInstance(???)" : 7 , "initPredefinedTemplates(String)" : 1 , "invalidateCache(String)" : 1 , "savePage(Page)" : 1 , "savePortalConfig(PortalConfig)" : 1}},{ "className" : "org::exoplatform::services::wsrp::producer::impl::PortletManagementOperationsInterfaceImpl" , "selectors" : { "arrayContainsKey(String[],String)" : 1 , "clonePortlet(RegistrationContext,PortletContext,UserContext)::PortletContext" : 1 , "createNewPortletHandle(String)" : 2 , "destroyPortlets(RegistrationContext,String)::DestroyFailed" : 1 , "destroyPortlets(RegistrationContext,String)::DestroyPortletsResponse" : 1 , "getPortletDescription(RegistrationContext,PortletContext,UserContext,String)::PortletDescriptionResponse" : 1 , "getPortletProperties(RegistrationContext,PortletContext,UserContext,String)::Property" : 1 , "getPortletProperties(RegistrationContext,PortletContext,UserContext,String)::PropertyList" : 1 , "getPortletPropertyDescription(RegistrationContext,PortletContext,UserContext,String)::PortletPropertyDescriptionResponse" : 1}},{ "className" : "org::exoplatform::portal::faces::renderer::html::portal::PortalRenderer" , "selectors" : { "getMessage(UIPortal,ResourceBundle)" : 1 , "getProvider()" : 1}},{ "className" : "org::exoplatform::services::jcr::impl::storage::rdb::container::RDBWorkspaceContainerImpl" , "selectors" : { "RDBWorkspaceContainerImpl(String,String,String)" : 1 , "add(Node)::StringType" : 1 , "delete(String)::StringType" : 1 , "getChildren(String)::LongType" : 1 , "getChildren(String)::StringType" : 1 , "getNodeByPath(String)" : 1 , "getNodeByPath(String)::StringType" : 1 , "getProperty(String,PropertyRecord)" : 1 , "getPropertyRecord(PropertyImpl)" : 3 , "init(String,String)" : 1 , "init(String,String)::StringType" : 1 , "update(Node)::StringType" : 1}},{ "className" : "org::exoplatform::container::client::http::HttpClientType" , "selectors" : { "HttpClientType(String,String,String)" : 3 , "HttpClientType(String,String,String,String)" : 1 , "getName()" : 1 , "getPreferredMimeType()" : 2 , "getType()" : 1 , "getUserAgentPattern()" : 1}},{ "className" : "org::exoplatform::faces::core::component::UIFileUpload" , "selectors" : { "decode(FacesContext)::DiskFileUpload" : 1 , "getBaseURL(???)" : 1 , "getNumberOfField()" : 1 , "getUserInputs()" : 2 , "isShowCancel()" : 1 , "isShowHeader()" : 1 , "setNumberOfField(int)" : 1 , "setShowCancel(boolean)" : 1 , "setShowHeader(boolean)" : 1}},{ "className" : "org::exoplatform::services::indexing::impl::IndexingServiceImpl" , "selectors" : { "activateIndexerThread()" : 5 , "dequeue()" : 2 , "getIndexDatabaseLocation()" : 1 , "getSearcher()::IndexSearcher" : 1 , "runBatchCommand(List)" : 1}},{ "className" : "org::exoplatform::test::jvm15::Dummy" , "selectors" : { "Dummy()" : 9 , "empty()" : 1 , "setter(String)" : 1 , "setterSynchronized(String)" : 1}},{ "className" : "org::exoplatform::services::communication::forum::hibernate::ForumServiceContainerImpl" , "selectors" : { "createForumService(String)" : 1}},{ "className" : "org::exoplatform::services::config::impl::ConfigurationDataImpl" , "selectors" : { "ConfigurationDataImpl()" : 2 , "getData()" : 1 , "setData(String)" : 3 , "setServiceType(String)" : 1}},{ "className" : "org::exoplatform::services::portal::model::NodeVisitor" , "selectors" : { "visit(Node)" : 1}},{ "className" : "org::exoplatform::portal::faces::component::model::PortletCategoryData" , "selectors" : { "PortletCategoryData(PortletCategory,Collection)" : 1 , "findPortlet(String)" : 1 , "getPortletCategory()" : 5 , "getPortletCategoryName()" : 3 , "getPortlets()" : 1 , "isSelect()" : 3 , "reset(PortletCategory,Collection)" : 2 , "setSelect(boolean)" : 3}},{ "className" : "org::exoplatform::services::wsrp::consumer::impl::ProducerRegistryImpl" , "selectors" : { "load(String)" : 1 , "loadAll()" : 1 , "loadProducers()" : 1 , "remove(String)" : 1 , "removeAll()" : 1 , "save(Producer)" : 1}},{ "className" : "javax::xml::transform::Transformer" , "selectors" : { "clearParameters()" : 1 , "getErrorListener()" : 4 , "getOutputProperties()" : 3 , "getOutputProperty(String)" : 8 , "getParameter(String)" : 1 , "getURIResolver()" : 1 , "setErrorListener(ErrorListener)" : 7 , "setOutputProperties(Properties)" : 7 , "setOutputProperty(String,String)" : 84 , "setParameter(String,Object)" : 44 , "setURIResolver(URIResolver)" : 12 , "transform(Source,Result)" : 167}},{ "className" : "org::exoplatform::test::mocks::portlet::MockPortletSession" , "selectors" : { "MockPortletSession()" : 1}},{ "className" : "org::exoplatform::services::jcr::impl::util::NodeTypeRecognizer" , "selectors" : { "recognize(InputStream)" : 1}},{ "className" : "org::exoplatform::test::jvm15::TestMemthodInvokation" , "selectors" : { "directCall(int)" : 1 , "directSynchronizedCall(int)" : 1 , "emptyMethodCall(int)" : 1 , "newObject(int)" : 1 , "printInfo(String,int,long,long)" : 10 , "reflectionCall(String,int)" : 2 , "reflectionFastMethod(String,int)" : 1 , "reflectionMethodCall(String,int)" : 2 , "reflectionMethodCallCGLIB(String,int)" : 1 , "reflectionMethodCallCache(String,int)" : 2 , "singleInstruction(int)" : 1}},{ "className" : "org::exoplatform::test::mocks::servlet::MockPrincipal" , "selectors" : { "MockPrincipal()" : 1}},{ "className" : "org::exoplatform::services::grammar::wiki::impl::TokenHandler" , "selectors" : { "getHandleableTokenType()" : 1 , "handleToken(Token,Token,ParsingContext)" : 2 , "reinit(ParsingContext)" : 1}},{ "className" : "org::exoplatform::services::portletcontainer::event::MessageEvent" , "selectors" : { "getMessage()" : 2}},{ "className" : "org::exoplatform::services::communication::sms::model::Recipient" , "selectors" : { "getError()" : 2 , "getId()" : 4 , "getStatus()" : 12 , "getTo()" : 1 , "setError(String)" : 1 , "setStatus(MessageStatus)" : 4}},{ "className" : "org::exoplatform::services::portletcontainer::ExoPortletRequest" , "selectors" : { "getPortletSession(???)" : 1}},{ "className" : "org::exoplatform::container::monitor::SessionMonitor" , "selectors" : { "SessionMonitor(SessionMonitorListenerStack,String)" : 1 , "error(String,Throwable)" : 2 , "getAccessTime()" : 2 , "getActionCount()" : 3 , "getClientInfo()" : 8 , "getErrorCount()" : 3 , "getHistory()" : 4 , "getIPAddress()" : 3 , "getListeners()" : 1 , "getLiveTimeInMinute()" : 1 , "getLiveTimeInSecond()" : 1 , "getRemoteUser()" : 5 , "getSessionOwner()" : 3 , "log(ActionData)" : 5 , "setClientInfo(ClientInfo)" : 3}},{ "className" : "org::exoplatform::portlets::monitor::session::component::UILiveSessions" , "selectors" : { "getSibling(???)" : 1}},{ "className" : "org::exoplatform::services::jcr::impl::util::StringConverter" , "selectors" : { "normalizeChar(char,boolean)" : 1 , "normalizeString(String,boolean)" : 2}},{ "className" : "org::exoplatform::services::communication::sms::encoder::UnicodeFormatter" , "selectors" : { "UnicodeFormatter()" : 1 , "getInstance()" : 1}},{ "className" : "org::exoplatform::services::wsrp::producer::PersistentStateManager" , "selectors" : { "addConsumerConfiguredPortletHandle(???)" : 2 , "deregister(???)" : 1 , "getNavigationalSate(String)" : 1 , "isConsumerConfiguredPortlet(???)" : 5 , "isRegistered(???)" : 3 , "putNavigationalState(String,Map)" : 3 , "register(???)" : 2 , "removeConsumerConfiguredPortletHandle(???)" : 1}},{ "className" : "org::exoplatform::services::jcr::impl::storage::rdb::container::data::DoubleValueRecord" , "selectors" : { "DoubleValueRecord()" : 1 , "DoubleValueRecord(Double)" : 1 , "getValue()" : 1}},{ "className" : "org::exoplatform::services::jcr::api::visiting::ItemVisitorTest::MockVisitor2" , "selectors" : { "MockVisitor2()" : 1 , "getI()" : 2 , "getJ()" : 1 , "isInList(String)" : 1 , "isReached()" : 1}},{ "className" : "org::exoplatform::faces::core::component::UIForm" , "selectors" : { "UIForm(String)" : 7 , "addButton(Button)" : 9 , "addContainer(String)" : 8 , "addFieldValidator(Class)" : 3 , "addFormValidator(Class)" : 1 , "getActions()" : 1 , "getBaseURL(???)" : 1 , "getContainers()" : 1 , "getField(String)" : 1 , "getFormName()" : 3 , "getIntegerFieldValue(String)" : 2 , "getMapFields()" : 1 , "getStringField(String)" : 3 , "getStringFieldValue(String)" : 22 , "resetFields()" : 3 , "setIntegerFieldValue(String,int)" : 2 , "setStringFieldValue(String,String)" : 16}},{ "className" : "org::exoplatform::services::jcr::api::writing::ValueTest" , "selectors" : { "initRepository()" : 2}},{ "className" : "org::exoplatform::services::portletcontainer::pci::model::Filter" , "selectors" : { "Filter()" : 1 , "addInitParam(InitParam)" : 1 , "getFilterName()" : 1 , "setFilterClass(String)" : 1 , "setFilterName(String)" : 1}},{ "className" : "org::exoplatform::container::SessionContainer" , "selectors" : { "SessionContainer(PortalContainer,String,String)" : 1 , "endActionLifcycle()" : 7 , "getComponent(Class)" : 62 , "getComponentInstance(???)" : 3 , "getComponentInstanceOfType(???)" : 28 , "getId()" : 1 , "getInstance()" : 27 , "getMonitor()" : 23 , "getOwner()" : 8 , "registerComponentImplementation(???)" : 2 , "registerComponentInstance(???)" : 4 , "setInstance(SessionContainer)" : 3 , "setPortalName(String)" : 1 , "start(???)" : 1 , "startActionLifcycle()" : 7 , "stop()" : 2 , "unregisterComponent(???)" : 1}},{ "className" : "org::exoplatform::portlet::faces::component::UIExoViewRoot" , "selectors" : { "UIExoViewRoot(String)" : 1 , "getViewId(???)" : 1 , "isComponentView()" : 1 , "renderChildren(???)" : 1}},{ "className" : "org::exoplatform::services::grammar::converter::Text2HtmlConverter" , "selectors" : { "toHtml(char[],StringBuffer)" : 2}},{ "className" : "org::exoplatform::portlets::wsrp::WSRPConsumerPortlet" , "selectors" : { "<Initializer>()::PortletMode" : 1 , "createPortlet(PortletKey,String)" : 2 , "createPortlet(PortletKey,String)::org" : 1 , "fillUserProfile(PortletRequest)::PersonName" : 1 , "fillUserProfile(PortletRequest)::UserProfile" : 1 , "getClientData()::ClientData" : 1 , "getModes(Collection)" : 1 , "getPortlet(PortletKey,Map)" : 2 , "getPortletKey(Map)::PortletException" : 2 , "getProducer(String)" : 3 , "getUser(PortletRequest)::UserContext" : 1 , "getUserSession(PortletSession,String)" : 2 , "getWindowSession(PortletKey,WSRPPortlet,UserSessionMgr,String)" : 2 , "getWindowStates(Collection)" : 1 , "manageEnumeration()" : 2 , "wsrpProcessAction(ActionRequest,ActionResponse)::PortletException" : 1}},{ "className" : "org::exoplatform::services::communication::message::impl::BaseMessageProtocolPlugin" , "selectors" : { "BaseMessageProtocolPlugin(MessageService)" : 2 , "formatEmail(String)" : 1 , "saveSentMessage(Account,Message)" : 2}},{ "className" : "javax::jcr::NoSuchWorkspaceException" , "selectors" : { "NoSuchWorkspaceException(String)" : 2}},{ "className" : "org::exoplatform::portlets::communication::message::component::UIAdvancedSearch" , "selectors" : { "UIAdvancedSearch(MessageService,IndexingService)" : 1 , "changeAccount(UIAccount)" : 1 , "getAncestorOfType(???)" : 1}},{ "className" : "org::exoplatform::portlet::exomvc::config::GroovyResourceManager" , "selectors" : { "GroovyResourceManager(???)" : 1 , "destroy()" : 1 , "getGroovyManager()" : 2}},{ "className" : "org::exoplatform::portal::faces::component::UISearchForm" , "selectors" : { "UISearchForm()" : 1 , "getEditPermission()" : 1 , "getOwner()" : 1 , "getParent(???)" : 1 , "getViewPermission()" : 1 , "setEditPermission(String)" : 1 , "setOwner(String)" : 1 , "setViewPermission(String)" : 1}},{ "className" : "org::exoplatform::services::xml::querying::impl::xtas::Command" , "selectors" : { "Command(byte[])" : 1 , "getAsInputStream()" : 1 , "toString()" : 1}},{ "className" : "org::exoplatform::services::resources::LocaleConfig" , "selectors" : { "getLanguage()" : 6 , "getLocale()" : 1 , "getLocaleName()" : 3 , "getMergeResourceBundle(String[])" : 1 , "getOwnerResourceBundle(String)" : 3 , "getResourceBundle(String)" : 1 , "setDescription(String)" : 1 , "setInput(???)" : 3 , "setInputEncoding(String)" : 1 , "setLocale(String)" : 1 , "setOutput(???)" : 2 , "setOutputEncoding(String)" : 1}},{ "className" : "org::exoplatform::services::wsrp::consumer::adapters::WSRPBaseRequestAdapter" , "selectors" : { "getModes()" : 1 , "getWindowStates()" : 1 , "setCharacterEncodingSet(String[])" : 1 , "setClientData(???)" : 1 , "setLocales(String[])" : 1 , "setMimeTypes(String[])" : 1 , "setMode(String)" : 1 , "setModes(String[])" : 1 , "setNavigationalState(String)" : 2 , "setPortletInstanceKey(String)" : 1 , "setSessionID(String)" : 1 , "setUserAuthentication(String)" : 1 , "setWindowState(String)" : 1 , "setWindowStates(String[])" : 1}},{ "className" : "org::exoplatform::services::wsrp::consumer::adapters::WSRPMarkupRequestAdapter" , "selectors" : { "WSRPMarkupRequestAdapter()" : 1 , "setCachedMarkup(???)" : 1}},{ "className" : "org::exoplatform::services::communication::forum::hibernate::ForumIndexerPluginImpl" , "selectors" : { "createPost(Forum,PostImpl)" : 2 , "getObject(String,String)" : 3 , "indexForum(ForumService,Forum)" : 1 , "removeCategory(Category)" : 1 , "removeCategory(Category)::Term" : 1 , "removeForum(Forum)" : 1 , "removeForum(Forum)::Term" : 1 , "removePost(Post)" : 1 , "removePost(Post)::Term" : 1 , "removeTopic(Topic)" : 1 , "removeTopic(Topic)::Term" : 1 , "updatePost(Forum,PostImpl)" : 1 , "updatePost(Forum,PostImpl)::Term" : 1}},{ "className" : "org::exoplatform::services::wsrp::consumer::impl::URLGeneratorImpl" , "selectors" : { "computeParameters(StringBuffer,Map)" : 1 , "getURL(String,Map)" : 3 , "replaceName(String)" : 2 , "replaceValue(String)" : 1}},{ "className" : "org::exoplatform::test::web::unit::ClickLinkWithText" , "selectors" : { "ClickLinkWithText(String,String)" : 1 , "setTextLink(String)" : 1}},{ "className" : "org::exoplatform::services::indexing::Searcher" , "selectors" : { "Searcher(???)" : 2 , "createModuleQuery(List)::BooleanQuery" : 1 , "createModuleQuery(List)::Term" : 1 , "getLastSearchResult(???)" : 1 , "search(List)::BooleanQuery" : 1 , "search(List,List)" : 1 , "search(List,List)::BooleanQuery" : 1 , "search(SearchInput)" : 3 , "search(SearchInput)::BooleanQuery" : 1 , "search(SearchInput,List)" : 1 , "search(SearchInput,List)::BooleanQuery" : 1 , "setQueryModules(???)" : 1}},{ "className" : "javax::jcr::util::ISO8601" , "selectors" : { "format(Calendar)" : 1 , "parse(String)" : 4}},{ "className" : "org::exoplatform::portal::faces::component::UIPageForm" , "selectors" : { "getAncestorOfType(???)" : 1 , "setEditingPage(UIPage)" : 1}},{ "className" : "org::exoplatform::services::xml::querying::Statement" , "selectors" : { "getSourceId()" : 1}},{ "className" : "org::exoplatform::services::wsrp::test::TestWSRPSession" , "selectors" : { "testReleaseSession()::PortletContext" : 1 , "testReleaseSession()::RegistrationContext" : 1 , "testReleaseSession()::ReleaseSessionsRequest" : 1 , "testReleaseSession()::ServiceDescriptionRequest" : 1 , "testSession()::PortletContext" : 1 , "testSession()::RegistrationContext" : 1 , "testSession()::ServiceDescriptionRequest" : 1}},{ "className" : "org::exoplatform::services::resources::ResourceBundleService" , "selectors" : { "createResourceBundleDataInstance()" : 3 , "findResourceDescriptions(Query)" : 4 , "getResourceBundle(String,Locale)" : 11 , "getResourceBundle(String[],Locale)" : 2 , "getResourceBundleData(String)" : 2 , "removeResourceBundleData(String)" : 2 , "saveResourceBundle(ResourceBundleData)" : 4}},{ "className" : "org::exoplatform::portlets::content::explorer::component::UIContentViewer" , "selectors" : { "getContent()" : 3 , "getContentType()" : 1 , "setContent(String)" : 3 , "setContentType(String)" : 2}},{ "className" : "org::exoplatform::services::portletcontainer::impl::config::Properties" , "selectors" : { "Properties()" : 1 , "getName()" : 3 , "getValue()" : 2 , "setDescription(String)" : 1 , "setName(String)" : 1 , "setValue(String)" : 1}},{ "className" : "org::exoplatform::test::web::unit::WebUnit" , "selectors" : { "WebUnit(String,String)" : 9 , "checkConditions(???)" : 1 , "execute(???)" : 1 , "getActionDescription()" : 1 , "getBlockId()" : 5 , "getDescription()" : 2 , "getExtraInfo()" : 1 , "getMonitor()" : 3 , "getName()" : 2 , "getRealValue(ExoWebClient,String)" : 1 , "getUnitSummaryInXHTML()" : 1 , "log(long,int,boolean,boolean)" : 1 , "reset()" : 1 , "validate(???)" : 1}},{ "className" : "org::exoplatform::services::communication::message::MessageHeader" , "selectors" : { "addFlag(String)" : 12 , "getFlagsAsArray()" : 1 , "getFrom()" : 4 , "getId()" : 2 , "getReceivedDate()" : 2 , "getSubject()" : 5 , "hasFlag(String)" : 1 , "isNew()" : 2 , "removeFlag(String)" : 1 , "setFrom(String)" : 5 , "setReceivedDate(Date)" : 3 , "setSubject(String)" : 4}},{ "className" : "org::exoplatform::services::xml::transform::impl::trax::TRAXTransformerServiceImpl" , "selectors" : { "getXSLTemplates(Source)" : 1}},{ "className" : "org::exoplatform::faces::core::renderer::html::BorderDecorator" , "selectors" : { "BorderDecorator(String)" : 2}},{ "className" : "org::exoplatform::services::jcr::core::WorkspaceRegistry" , "selectors" : { "getWorkspace(String,String,Ticket)" : 1}},{ "className" : "org::exoplatform::services::portletcontainer::impl::PortletContainerConf" , "selectors" : { "getMajorVersion()" : 1 , "getMinorVersion()" : 1 , "getNbOfInstancesInPool()" : 1 , "getPortletContainerName()" : 1 , "getProperties()" : 1 , "getSupportedContent()" : 2 , "getSupportedPortletModes()" : 5 , "getSupportedPortletModes()::PortletMode" : 1 , "getSupportedPortletModesWithDescriptions()" : 1 , "getSupportedPortletModesWithDescriptions()::PortletMode" : 1 , "getSupportedWindowStates()" : 6 , "getSupportedWindowStates()::WindowState" : 1 , "getSupportedWindowStatesWithDescriptions()" : 1 , "getSupportedWindowStatesWithDescriptions()::WindowState" : 1 , "init()" : 1 , "isBundleLookupDelegated()" : 1 , "isSharedSessionEnable()" : 6 , "setCustomModesWithDescriptions(Collection)" : 1 , "setCustomStatesWithDescriptions(Collection)" : 1 , "setMajorVersion(int)" : 1 , "setMinorVersion(int)" : 1 , "setPortletContainerName(String)" : 1 , "setProperties(Map)" : 1}},{ "className" : "org::exoplatform::faces::core::renderer::html::FileUploadRenderer" , "selectors" : { "FileUploadRenderer()" : 1 , "getScript()" : 1}},{ "className" : "org::exoplatform::services::portletcontainer::impl::PortletContainerDispatcher" , "selectors" : { "getAllPortletMetaData()" : 1 , "getBundle(???)" : 1 , "getPortletModes(String,String,String)" : 1 , "getPortletPreference(Input)" : 1 , "getSupportedPortletModes()" : 1 , "getSupportedPortletModesWithDescriptions()" : 1 , "getSupportedWindowStates()" : 1 , "getSupportedWindowStatesWithDescriptions()" : 1 , "getWindowStates(String)" : 1 , "initTests()" : 2 , "isModeSuported(???)" : 1 , "isStateSupported(???)" : 1 , "processAction(???)" : 1 , "render(???)" : 1 , "setMajorVersion(int)" : 1 , "setMinorVersion(int)" : 1 , "setPortletContainerName(String)" : 1 , "setPortletPreference(Input,Map)" : 1 , "setProperties(Map)" : 1 , "setSupportedPortletModesWithDescriptions(Collection)" : 1 , "setSupportedWindowStatesWithDescriptions(Collection)" : 1}},{ "className" : "org::exoplatform::faces::core::component::UIForm::StringPasswordField" , "selectors" : { "StringPasswordField(String,String,String)" : 2}},{ "className" : "org::exoplatform::portlets::weather::component::UIWeatherEditPortlet::SelectStationListener" , "selectors" : { "SelectStationListener()" : 1}},{ "className" : "org::exoplatform::commons::exception::ExoMessageException" , "selectors" : { "ExoMessageException(String)" : 2 , "ExoMessageException(String,Object[])" : 10 , "getArguments()" : 1 , "getMessage(ResourceBundle)" : 1 , "getMessageKey()" : 1}},{ "className" : "org::exoplatform::services::workflow::WorkflowDefinitionService" , "selectors" : { "close()" : 2 , "deployProcessArchive(???)" : 2}},{ "className" : "org::exoplatform::services::wsrp::consumer::impl::ProducerData" , "selectors" : { "ProducerData()" : 1 , "getId()" : 1 , "getProducer()" : 2 , "setId(String)" : 1 , "setProducer(Producer)" : 2}},{ "className" : "org::exoplatform::container::client::http::ClientTypeMap" , "selectors" : { "ClientTypeMap()" : 1 , "addClientInfo(HttpClientType)" : 1 , "findClient(String)" : 1 , "getInstance()" : 1 , "loadClientsInfos()" : 1 , "loadClientsInfos()::SAXReader" : 1}},{ "className" : "org::exoplatform::faces::core::renderer::html::NodeTabbedPaneRenderer" , "selectors" : { "NodeTabbedPaneRenderer()" : 2}},{ "className" : "org::exoplatform::portlet::exomvc::XHTMLBuilder" , "selectors" : { "XHTMLBuilder(???)" : 1}},{ "className" : "org::exoplatform::services::xml::querying::helper::SimpleStatementHelper" , "selectors" : { "append(String,String,XMLData)" : 2 , "append(String,XMLData)" : 1 , "create(String,XMLWellFormedData)" : 1 , "delete(String)" : 1 , "delete(String,String)" : 1 , "delete(String,String,String)" : 1 , "drop(String)" : 1 , "select(String)" : 17 , "select(String,String)" : 5 , "select(String,String,String)" : 2 , "update(String,String,String,XMLData)" : 1 , "update(String,String,XMLData)" : 2}},{ "className" : "org::exoplatform::faces::core::event::FatalExceptionHandler" , "selectors" : { "FatalExceptionHandler()" : 1}},{ "className" : "org::exoplatform::faces::core::renderer::html::SimpleFormRenderer" , "selectors" : { "SimpleFormRenderer()" : 1 , "formatText(String)" : 1 , "getDefaultClass()" : 1 , "getScript(UISimpleForm)" : 1 , "renderFormButton(???)" : 1}},{ "className" : "org::exoplatform::container::SimpleComponentAdapterFactory" , "selectors" : { "SimpleComponentAdapterFactory()" : 1}},{ "className" : "org::exoplatform::services::grammar::converter::impl::Text2HtmlConverterImpl" , "selectors" : { "toHtml(char[])" : 1 , "toHtml(char[],StringBuffer)" : 1}},{ "className" : "org::exoplatform::portlet::exomvc::config::Configuration" , "selectors" : { "Configuration(???)" : 1 , "configure()" : 1 , "destroy()" : 1 , "getDefaultView()" : 1 , "getGroovyResourceManager()" : 1 , "getJSPResourceManager()" : 1 , "getPageConfig(???)" : 2 , "getVelocityResourceManager()" : 1}},{ "className" : "org::exoplatform::services::portletregistery::PortletRegisteryService" , "selectors" : { "addPortlet(PortletCategory,Portlet)" : 2 , "addPortletCategory(PortletCategory)" : 2 , "addPortletRole(Portlet,PortletRole)" : 1 , "clearPortletRoles(String)" : 1 , "clearRepository()" : 2 , "createPortletCategoryInstance()" : 2 , "createPortletInstance()" : 2 , "createPortletRoleInstance()" : 1 , "findPortletCategoryByName(String)" : 2 , "getPortlet(String)" : 5 , "getPortletCategories()" : 3 , "getPortletCategory(String)" : 2 , "getPortletRole(String)" : 8 , "getPortletRoles(String)" : 5 , "getPortlets(String)" : 4 , "importPortlets(Collection)" : 2 , "removePortlet(String)" : 2 , "removePortletCategory(String)" : 1 , "removePortletCategoryByName(String)" : 1 , "removePortletRole(String)" : 1 , "updatePortlet(Portlet)" : 1 , "updatePortletCategory(PortletCategory)" : 1 , "updatePortletRoles(String,Collection)" : 2}},{ "className" : "org::exoplatform::services::portletcontainer::pci::model::PortletInfo" , "selectors" : { "PortletInfo()" : 1 , "getKeywords()" : 2 , "getShortTitle()" : 2 , "getTitle()" : 3 , "setKeywords(String)" : 1 , "setShortTitle(String)" : 1 , "setTitle(String)" : 1}},{ "className" : "org::exoplatform::services::organization::Query" , "selectors" : { "Query()" : 5 , "getEmail()" : 10 , "getFirstName()" : 10 , "getFromLoginDate()" : 1 , "getLastName()" : 10 , "getToLoginDate()" : 1 , "getUserName()" : 10 , "setEmail(String)" : 2 , "setFirstName(String)" : 2 , "setFromLoginDate(Date)" : 1 , "setLastName(String)" : 2 , "setToLoginDate(Date)" : 1 , "setUserName(String)" : 2}},{ "className" : "org::exoplatform::portal::faces::component::UIPortletCategory" , "selectors" : { "UIPortletCategory()" : 1 , "getPortletCategoryData()" : 2 , "setPortletCategoryData(PortletCategoryData)" : 3}},{ "className" : "org::exoplatform::services::xml::querying::impl::xtas::Instruction" , "selectors" : { "Instruction(Instruction)" : 2 , "Instruction(String,String,UniFormTree)" : 2 , "compile()" : 1 , "execute(UniFormTree)" : 1 , "getAsString()" : 1 , "getType()" : 2 , "isAtResource()" : 2 , "isAtXml()" : 2 , "setContext(Object)" : 1}},{ "className" : "org::exoplatform::services::threadpool::impl::DefaultThreadFactory" , "selectors" : { "DefaultThreadFactory()" : 1}},{ "className" : "org::exoplatform::services::organization::hibernate::OrganizationConfig::Group" , "selectors" : { "getDescription()" : 1 , "getName()" : 1 , "getParentId()" : 1}},{ "className" : "org::exoplatform::services::backup::ExportLogger" , "selectors" : { "ExportLogger()" : 1 , "getTextSummary()" : 3 , "log(String)" : 2 , "log(String,Throwable)" : 2}},{ "className" : "org::exoplatform::services::portletcontainer::pci::model::CustomWindowState" , "selectors" : { "CustomWindowState()" : 1 , "addDescription(Description)" : 1 , "getWindowState()" : 2 , "setWindowState(String)" : 1}},{ "className" : "com::capeclear::www::GlobalWeather_xsd::Wind" , "selectors" : { "<Initializer>()::org" : 7 , "equals(Object)" : 1 , "getGust_speed()" : 2 , "getPrevailing_direction()" : 5 , "getPrevailing_speed()" : 3 , "getString()" : 4 , "getVarying_from_direction()" : 4 , "getVarying_to_direction()" : 4 , "hashCode()" : 1}},{ "className" : "org::exoplatform::portal::faces::listener::share::MoveActionListener" , "selectors" : { "moveDown(UIBasicComponent)" : 1 , "moveUp(UIBasicComponent)" : 1}},{ "className" : "org::exoplatform::services::log::LogUtil" , "selectors" : { "debug(String)" : 1 , "error(String)" : 1 , "getLog(???)" : 30 , "info(String)" : 1 , "setLevel(String,int,boolean)" : 8 , "warn(String)" : 1}},{ "className" : "org::exoplatform::services::portletcontainer::pci::PortletData" , "selectors" : { "getDescription()" : 1 , "getDescription(String)" : 1 , "getDisplayName()" : 1 , "getExpirationCache()" : 1 , "getPortletName()" : 1 , "getSupports()" : 5 , "getUserAttributes()" : 1 , "isCacheGlobal()" : 1 , "isSecure()" : 2}},{ "className" : "javax::xml::transform::sax::TemplatesHandler" , "selectors" : { "getSystemId()" : 1 , "getTemplates()" : 4 , "setSystemId(String)" : 1}},{ "className" : "org::exoplatform::services::portletcontainer::pci::ActionOutput" , "selectors" : { "ActionOutput()" : 1 , "getNextMode(???)" : 3 , "getNextState(???)" : 3 , "getPortletState()" : 1 , "getRenderParameters()" : 11 , "setNextMode(???)" : 2 , "setNextState(???)" : 2 , "setPortletState(byte[])" : 1 , "setRenderParameter(String,String)" : 1 , "setRenderParameters(Map)" : 1 , "setRenderParameters(String,String[])" : 1}},{ "className" : "org::exoplatform::services::portletcontainer::test::filter::LoggerFilter" , "selectors" : { "init(PortletFilterConfig)::PortletException" : 1}},{ "className" : "org::exoplatform::test::mocks::portlet::MockPortletFacesContext" , "selectors" : { "MockPortletFacesContext()" : 1}},{ "className" : "org::exoplatform::services::portal::Query" , "selectors" : { "Query(String,String,String)" : 4 , "getEditPermission()" : 2 , "getOwner()" : 2 , "getViewPermission()" : 2}},{ "className" : "org::exoplatform::services::portletcontainer::pci::model::UserDataConstraint" , "selectors" : { "UserDataConstraint()" : 1 , "addDescription(Description)" : 1 , "setTransportGuarantie(String)" : 1}},{ "className" : "org::exoplatform::xml::object::XMLCollection" , "selectors" : { "XMLCollection(Collection)" : 2 , "getCollection()" : 4 , "getIterator()" : 1 , "getXMLCollection(InputStream)" : 2 , "toByteArray(String)" : 1}},{ "className" : "org::exoplatform::services::portletcontainer::impl::monitor::PortletRuntimeDatasImpl" , "selectors" : { "PortletRuntimeDatasImpl(???)" : 1 , "getCachedData(String,boolean)" : 6 , "getLastFailureAccessTime()" : 1 , "getLastInitFailureAccessTime()" : 2 , "getUnavailabilityPeriod()" : 3 , "isAvailable(long)" : 3 , "isInitialisationAllowed(long)" : 1 , "logProcessActionRequest(long,long)" : 1 , "logRenderRequest(long,long,boolean)" : 1 , "removeCachedData(String,boolean)" : 1 , "setCacheExpirationPeriod(int)" : 2 , "setCachedData(String,CachedData,boolean)" : 5 , "setInitializationTime(long)" : 1 , "setInitialized(boolean)" : 1 , "setLastAccessTime(long)" : 1 , "setLastFailureAccessTime(long)" : 1 , "setUnavailabilityPeriod(long)" : 3 , "whenAvailable()" : 1}},{ "className" : "org::exoplatform::portlets::portletregistery::component::UIPortletCategory::AddPortletActionListener" , "selectors" : { "AddPortletActionListener()" : 1}},{ "className" : "org::exoplatform::services::organization::ldap::OrganizationServiceListenerImpl" , "selectors" : { "createGroups(OrganizationService)" : 1 , "createMembershipTypes(OrganizationService)" : 1 , "createUsers(OrganizationService)" : 1 , "initializeDirectory()" : 1}},{ "className" : "org::exoplatform::services::workflow::format::DefaultFormat" , "selectors" : { "DefaultFormat()" : 1}},{ "className" : "org::exoplatform::xml::object::XMLField" , "selectors" : { "XMLField(String,Class,Object)" : 2 , "getName()" : 4 , "setName(String)" : 1 , "toString()" : 1}},{ "className" : "org::exoplatform::services::jcr::impl::core::TicketImpl" , "selectors" : { "TicketImpl(RepositoryImpl,Credentials,String)" : 2 , "getContainer()" : 5 , "getNodeByAbsPath(String)" : 11 , "getNodesManager()" : 23 , "getRepository()" : 2 , "getRootNode()" : 11 , "getWorkspaceName()" : 1 , "importDocView(String,InputStream)" : 1 , "importSysView(String,InputStream)" : 1 , "save()" : 7}},{ "className" : "org::exoplatform::portlets::communication::message::component::UIMessageForm" , "selectors" : { "getSibling(???)" : 1 , "setFormData(Account,Message)" : 2}},{ "className" : "org::exoplatform::services::jcr::impl::util::EntityCollection" , "selectors" : { "EntityCollection()" : 1 , "EntityCollection(List)" : 9 , "add(Object)" : 1 , "addAll(Collection)" : 1 , "getList()" : 2 , "getSize()" : 1 , "hasNext()" : 1 , "nextProperty()" : 1 , "size()" : 13}},{ "className" : "org::exoplatform::services::communication::forum::hibernate::ForumImporter" , "selectors" : { "ForumImporter(???)" : 1 , "importData()" : 1}},{ "className" : "org::exoplatform::container::monitor::jvm::v15::JVMRuntimeInfoImpl" , "selectors" : { "getBootClassPath()" : 1 , "getBootClassPathSupported()" : 1 , "getClassPath()" : 1 , "getInputArguments()" : 1 , "getLibraryPath()" : 1 , "getManagementSpecVersion()" : 1 , "getName()" : 1 , "getSpecName()" : 1 , "getSpecVendor()" : 1 , "getSpecVersion()" : 1 , "getStartTime()" : 1 , "getSystemProperties()" : 1 , "getUptime()" : 1 , "getVmName()" : 1 , "getVmVendor()" : 1 , "getVmVersion()" : 1}},{ "className" : "org::exoplatform::services::portal::test::TestConverter" , "selectors" : { "setUp()::XppDriver" : 1}},{ "className" : "org::exoplatform::portlets::monitor::session::component::UILiveSessions::SessionContainerDataHandler" , "selectors" : { "SessionContainerDataHandler()" : 1}},{ "className" : "com::capeclear::www::GlobalWeather_xsd::Pressure" , "selectors" : { "<Initializer>()::org" : 6 , "equals(Object)" : 1 , "getAltimeter()" : 2 , "getDelta()" : 2 , "getDelta_hours()" : 2 , "getSlp()" : 2 , "getString()" : 4 , "hashCode()" : 1}},{ "className" : "org::exoplatform::test::mocks::portlet::MockPortletPreferences" , "selectors" : { "MockPortletPreferences()" : 1}},{ "className" : "org::exoplatform::services::jcr::impl::config::DummyConfig" , "selectors" : { "DummyConfig()" : 1}},{ "className" : "org::exoplatform::portlets::log::component::UILog" , "selectors" : { "UILog(LogService)" : 1 , "createUIComponents()" : 1 , "getLogBuffer()" : 1 , "getLogMessages(int,int)" : 3}},{ "className" : "org::exoplatform::services::portletcontainer::pci::model::PortletCollection" , "selectors" : { "PortletCollection()" : 1 , "addPortletName(String)" : 1 , "getPortletName()" : 3}},{ "className" : "org::exoplatform::portlets::weather::component::model::ImageCell" , "selectors" : { "ImageCell(String,String)" : 1}},{ "className" : "org::exoplatform::container::util::ContainerUtil" , "selectors" : { "getConfigurationURL(String)" : 9 , "populate(ExoContainer,ConfigurationManager)" : 4 , "populateGroovy(ExoContainer,ConfigurationManager)" : 1}},{ "className" : "org::exoplatform::services::portletcontainer::impl::config::ObjectPool" , "selectors" : { "ObjectPool()" : 1 , "getInstancesInPool()" : 2 , "setInstancesInPool(int)" : 1}},{ "className" : "org::exoplatform::services::xml::querying::impl::xtas::XMLInstruction" , "selectors" : { "XMLInstruction(String,String,UniFormTree)" : 1 , "getAsString()" : 1}},{ "className" : "org::exoplatform::services::wsrp::producer::impl::helpers::ConsumerRewriterPortletURLImp" , "selectors" : { "ConsumerRewriterPortletURLImp(String,String,List,boolean,List,Enumeration,String,String,PersistentStateManager,String)" : 1}},{ "className" : "org::exoplatform::services::wsrp::producer::PortletContainerProxy" , "selectors" : { "getAllPortletMetaData()" : 2 , "getPortletDesciption(???)" : 2 , "getPortletProperties(String,String)" : 1 , "getResourceList(???)" : 1 , "getSupportedPortletModesWithDescriptions()" : 1 , "getSupportedWindowStates()" : 2 , "getSupportedWindowStatesWithDescriptions()" : 1 , "getWindowStates(String)" : 2 , "isPortletOffered(String)" : 2 , "processAction(WSRPHttpServletRequest,WSRPHttpServletResponse,ActionInput)" : 1 , "render(WSRPHttpServletRequest,WSRPHttpServletResponse,RenderInput)" : 1 , "setPortletProperties(???)" : 1}},{ "className" : "com::capeclear::www::GlobalWeather_xsd::PhenomenonIntensity" , "selectors" : { "PhenomenonIntensity(String)" : 5 , "equals(Object)" : 1 , "fromValue(String)" : 2 , "hashCode()" : 1 , "toString()" : 1}},{ "className" : "org::exoplatform::commons::utils::IOUtil" , "selectors" : { "deserialize(byte[])" : 7 , "getFileContenntAsString(File)" : 1 , "getFileContenntAsString(String)" : 5 , "getFileContentAsBytes(String)" : 1 , "getStreamContentAsBytes(InputStream)" : 7 , "getStreamContentAsString(InputStream)" : 13 , "serialize(Object)" : 4}},{ "className" : "org::exoplatform::portlets::resources::component::UIListResources::ResourceDescriptionDataHandler" , "selectors" : { "ResourceDescriptionDataHandler()" : 1}},{ "className" : "org::exoplatform::portlets::weather::component::UIWeatherDetail" , "selectors" : { "UIWeatherDetail()" : 1 , "setIconSrc(String)" : 1 , "setStationDetail(String)" : 1 , "setTemperature(String)" : 1 , "setWind(String)" : 1 , "updateTree()" : 5}},{ "className" : "org::exoplatform::services::portletcontainer::pci::CustomModeWithDescription" , "selectors" : { "CustomModeWithDescription(???)" : 1 , "getDescriptions()" : 1 , "getPortletMode(???)" : 2}},{ "className" : "org::exoplatform::portlets::content::explorer::component::model::JCRNodeDescriptor" , "selectors" : { "JCRNodeDescriptor(String,Node)" : 2}},{ "className" : "org::exoplatform::services::jcr::impl::core::itemfilters::ItemFilter" , "selectors" : { "accept(Item)" : 2}},{ "className" : "org::exoplatform::services::security::jaas::BasicLoginModule" , "selectors" : { "clear()" : 2}},{ "className" : "org::exoplatform::services::database::impl::DatabaseServiceConfig" , "selectors" : { "getDatasource()" : 1}},{ "className" : "org::exoplatform::services::organization::hibernate::OrganizationConfig::User" , "selectors" : { "getEmail()" : 1 , "getFirstName()" : 1 , "getGroups()" : 1 , "getLastName()" : 1 , "getPassword()" : 1 , "getUserName()" : 2}},{ "className" : "org::exoplatform::portlets::communication::forum::ForumACL" , "selectors" : { "ForumACL(String)" : 1 , "getRemoteUser()" : 1 , "hasCreateTopicRole(Forum)" : 2 , "hasModeratorRole(Forum)" : 3 , "hasReplyTopicRole(Forum)" : 2 , "hasViewForumRole(Forum)" : 3}},{ "className" : "org::exoplatform::container::monitor::PortalMonitorListener" , "selectors" : { "onError(PortalMonitor,String,Throwable)" : 1 , "onStart(PortalMonitor)" : 1 , "onStop(PortalMonitor)" : 1}},{ "className" : "org::exoplatform::container::monitor::PortalMonitorListenerStack" , "selectors" : { "PortalMonitorListenerStack(int)" : 1 , "onError(PortalMonitor,String,Throwable)" : 1}},{ "className" : "org::exoplatform::services::workflow::test::BaseTest" , "selectors" : { "BaseTest(String)" : 2 , "deployProcess(String,String)::ArchiveBuilder" : 1 , "setUp()" : 2}},{ "className" : "org::exoplatform::services::xml::querying::impl::xtas::resource::plugins::XMLDBResource" , "selectors" : { "XMLDBResource()" : 1}},{ "className" : "org::exoplatform::services::jcr::api::namespaces::NamespaceRegistryTest" , "selectors" : { "init()" : 3}},{ "className" : "org::exoplatform::services::backup::ImportLogger" , "selectors" : { "ImportLogger()" : 1 , "getTextSummary()" : 4 , "log(String)" : 2 , "log(String,Throwable)" : 2}},{ "className" : "javax::jcr::nodetype::PropertyDef" , "selectors" : { "getDefaultValue()" : 1 , "getName()" : 22 , "getRequiredType()" : 8 , "getValueConstraint()" : 2 , "isAutoCreate()" : 1 , "isMultiple()" : 3 , "isPrimaryItem()" : 1 , "isReadOnly()" : 1}},{ "className" : "org::exoplatform::portlets::nav::component::UINavigation" , "selectors" : { "UINavigation(ResourceBundle)" : 5 , "getPreferedMimeType()" : 3 , "getSelectedNode()" : 1 , "setEditNavigationModeRenderer()" : 1 , "setEditPageModeRenderer()" : 1 , "setEditPortalModeRenderer()" : 1 , "setViewModeRenderer()" : 1}},{ "className" : "org::exoplatform::portlets::portletregistery::component::UIPortletRole" , "selectors" : { "getAvailableRoles()" : 1 , "getBaseURL(???)" : 1 , "getCurrentRoles()" : 1 , "setCurrentPortlet(Portlet)" : 1}},{ "className" : "org::exoplatform::services::database::impl::InMemoryDatabaseServiceImpl" , "selectors" : { "createDataSource(String)" : 2 , "createDataSource(String)::org" : 1}},{ "className" : "org::exoplatform::container::SessionContainerInitializer" , "selectors" : { "initialize(SessionContainer)" : 1}},{ "className" : "org::exoplatform::services::communication::message::impl::MessageServiceImpl" , "selectors" : { "createAccount(???)" : 2 , "createAccountInstance()" : 2 , "getAccounts(String)" : 1 , "getFolder(Account,String)" : 1 , "removeAccount(Account)" : 1 , "setIndexer(MessageIndexerPluginImpl)" : 1}},{ "className" : "org::exoplatform::portal::faces::component::UIPage" , "selectors" : { "UIPage()" : 2 , "UIPage(Page,String)" : 2 , "buildTreeModel(Container)" : 2 , "getEditPermission()" : 1 , "getEditablePageModel()" : 1 , "getMaximizedPortlet()" : 3 , "getOwner()" : 1 , "getPageModel()" : 6 , "getRendererType(???)" : 1 , "getViewPermission()" : 1 , "registerListeners()" : 1 , "setComponentDirty(boolean)" : 2 , "setComponentMode(int)" : 2 , "setError(String)" : 2 , "setMaximizedPortlet(UIPortlet)" : 3}},{ "className" : "org::exoplatform::portlet::exomvc::interceptor::Interceptor" , "selectors" : { "intercept(???)" : 2}},{ "className" : "org::exoplatform::services::jcr::api::writing::fs::TestValue" , "selectors" : { "initRepository()" : 1}},{ "className" : "org::exoplatform::services::wsrp::consumer::InteractionRequest" , "selectors" : { "getFormParameters(???)" : 1 , "getInteractionState()" : 1}},{ "className" : "org::exoplatform::services::portletcontainer::persistence::PortletPreferencesPersister" , "selectors" : { "getPortletPreferences(WindowID)" : 2 , "savePortletPreferences(WindowID,ExoPortletPreferences)" : 1}},{ "className" : "org::exoplatform::services::wsrp::exceptions::WSRPException" , "selectors" : { "WSRPException()" : 8 , "WSRPException(String)" : 26 , "WSRPException(String,Throwable)" : 29 , "getFault()" : 3}},{ "className" : "org::exoplatform::services::portletcontainer::test::portlet::PortletToTestIncomingRequestParam" , "selectors" : { "processAction(ActionRequest,ActionResponse)::PortletException" : 3 , "render(RenderRequest,RenderResponse)::PortletException" : 3}},{ "className" : "org::exoplatform::services::portletcontainer::pci::PortletURLFactory" , "selectors" : { "createPortletURL(???)" : 2}},{ "className" : "org::exoplatform::services::communication::sms::encoder::Formatter" , "selectors" : { "convert(Object)" : 1}},{ "className" : "org::exoplatform::services::portletcontainer::helper::BasePortletURL" , "selectors" : { "BasePortletURL(String,String,List,boolean,List,Enumeration)" : 4 , "getParameter(String)" : 2}},{ "className" : "org::exoplatform::services::portletcontainer::bundle::ResourceBundleDelegate" , "selectors" : { "lookupBundle(String,Locale)" : 1}},{ "className" : "org::exoplatform::services::portletregistery::impl::hibernate::PortletRegisteryServiceImpl" , "selectors" : { "createPortletCategoryInstance()" : 1 , "createPortletInstance()" : 1 , "createPortletRoleInstance()" : 2}},{ "className" : "org::exoplatform::portlets::portal::component::UIAvailablePortal" , "selectors" : { "refresh(Query)" : 2}},{ "className" : "org::exoplatform::services::portletcontainer::impl::portletAPIImp::PortletSessionImp" , "selectors" : { "PortletSessionImp()" : 1 , "fillPortletSession(???)" : 2 , "getAttribute(String,int)" : 1 , "getAttributeNames(int)" : 1 , "getSession(???)" : 4 , "isSessionValid()" : 3 , "removeAttribute(String,int)" : 1 , "setAttribute(String,Object,int)" : 1 , "setSession(???)" : 1}},{ "className" : "org::exoplatform::faces::user::component::UILogout" , "selectors" : { "getFacesContext(???)" : 1}},{ "className" : "org::exoplatform::services::portletcontainer::test::portlet::PortletWithUnavailableExceptionWhileInit2" , "selectors" : { "init(PortletConfig)::UnavailableException" : 1}},{ "className" : "org::exoplatform::xml::object::XMLKey" , "selectors" : { "XMLKey(Class,Object)" : 1}},{ "className" : "org::exoplatform::services::backup::ImportExportService" , "selectors" : { "addPlugin(ImportExportPlugin)" : 3 , "exportServiceData()" : 3 , "exportServiceData(String)" : 1 , "exportUserData()" : 2 , "getExportLogger()" : 3 , "getImportLogger()" : 4 , "getPlugins()" : 1 , "getServiceDataDirectory()" : 1 , "getUserDataDirectory()" : 1 , "importServiceData()" : 3 , "importServiceData(String)" : 1 , "importUserData()" : 1 , "importUserData(String)" : 3}},{ "className" : "org::exoplatform::portal::faces::component::CssStyleBuilderVisitor" , "selectors" : { "CssStyleBuilderVisitor(SkinConfigService)" : 1 , "addBasicComponentStyle(UIBasicComponent)" : 2 , "addPortletComponentStyle(UIPortlet)" : 1 , "getCSS()" : 1 , "getCSS(UIExoComponent)" : 4 , "traverse(UIExoComponent)" : 4 , "visit(UIExoComponent)" : 1}},{ "className" : "org::exoplatform::services::communication::forum::Post" , "selectors" : { "getId()" : 3 , "getMessage()" : 7 , "getModifiedDate()" : 1 , "getOwner()" : 1 , "getRemoteAddr()" : 1 , "getSubject()" : 7 , "setMessage(String)" : 2 , "setModifiedBy(String)" : 2 , "setOwner(String)" : 2 , "setRemoteAddr(String)" : 1 , "setSubject(String)" : 2}},{ "className" : "org::exoplatform::services::portletcontainer::test::portlet::Helper" , "selectors" : { "Helper()" : 1 , "getSomeText()" : 1}},{ "className" : "org::exoplatform::portlet::exomvc::config::JSPResourceManager" , "selectors" : { "JSPResourceManager(???)" : 1 , "dispatch(???)" : 1}},{ "className" : "org::exoplatform::services::communication::sms::impl::SmsServiceImpl" , "selectors" : { "SmsServiceImpl()" : 1 , "createMessage()" : 1 , "createMessages()" : 1 , "createProdatProvider(String,String)" : 1 , "createRecipient(String)" : 1 , "sendSms(Provider,Messages)" : 1}},{ "className" : "org::exoplatform::services::portletcontainer::impl::servlet::PortletApplicationListener" , "selectors" : { "contextInitialized(ServletContextEvent)::SAXReader" : 1}},{ "className" : "org::exoplatform::commons::map::ApplicationMap" , "selectors" : { "ApplicationMap(???)" : 1}},{ "className" : "org::exoplatform::services::jcr::RepositoryService" , "selectors" : { "getConfig()" : 1 , "getRepository()" : 6 , "getRepository(String)" : 72}},{ "className" : "org::exoplatform::services::security::jaas::JAASGroup" , "selectors" : { "JAASGroup(String)" : 1 , "getName()" : 3 , "members()" : 1 , "members()::MembersEnumeration" : 1}},{ "className" : "org::exoplatform::test::mocks::portlet::MockPortletConfig" , "selectors" : { "MockPortletConfig(???)" : 1}},{ "className" : "org::exoplatform::faces::user::component::UILogin" , "selectors" : { "getFacesContext(???)" : 1}},{ "className" : "org::exoplatform::services::portal::impl::XMLParser" , "selectors" : { "readBasicAttribute(Component,ExoXPPParser)" : 3 , "readBody(ExoXPPParser)" : 1 , "readContainer(ExoXPPParser)" : 1 , "readNode(ExoXPPParser)" : 1 , "readPortalConfig(ExoXPPParser)" : 1 , "readPortlet(ExoXPPParser)" : 1 , "readPortletPreferences(ExoXPPParser)" : 1 , "readPreference(ExoXPPParser)" : 1}},{ "className" : "org::exoplatform::portlets::communication::message::component::UIAccountForm" , "selectors" : { "changeProtocol(String)" : 3 , "getSibling(???)" : 1 , "setAccount(Account)" : 2}},{ "className" : "org::exoplatform::faces::core::renderer::html::StringInputRenderer" , "selectors" : { "StringInputRenderer()" : 1}},{ "className" : "org::exoplatform::services::xml::resolving::impl::simple::SimpleResolver" , "selectors" : { "SimpleResolver(String)" : 1}},{ "className" : "org::exoplatform::services::wsrp::test::TestPortletManagementInterface" , "selectors" : { "fillPortletContext(String)::PortletContext" : 1 , "testCloneAlreadyClonedPortlet()::ClonePortletRequest" : 1 , "testCloneAlreadyClonedPortlet()::GetPortletPropertiesRequest" : 1 , "testClonePortlet()::ClonePortletRequest" : 1 , "testClonePortletWithBadPortletHandle()::ClonePortletRequest" : 1 , "testClonePortletWithBadRegistrationHandle()::ClonePortletRequest" : 1 , "testClonePortletWithBadRegistrationHandle()::RegistrationContext" : 1 , "testDestroyNonClonedPortlet()::DestroyPortletsRequest" : 1 , "testDestroyPortlet()::ClonePortletRequest" : 1 , "testDestroyPortlet()::DestroyPortletsRequest" : 1 , "testGetPortletProperty()::ClonePortletRequest" : 1 , "testGetPortletProperty()::GetPortletPropertiesRequest" : 1 , "testSetPortletProperty()::ClonePortletRequest" : 1 , "testSetPortletProperty()::GetPortletPropertiesRequest" : 1 , "testSetPortletProperty()::Property" : 1 , "testSetPortletProperty()::PropertyList" : 1 , "testSetPortletProperty()::SetPortletPropertiesRequest" : 1 , "testWellKnownGetPortletProperty()::ClonePortletRequest" : 1 , "testWellKnownGetPortletProperty()::GetPortletPropertiesRequest" : 1}},{ "className" : "org::exoplatform::services::organization::hibernate::OrganizationConfig::MembershipType" , "selectors" : { "getDescription()" : 1 , "getType()" : 1}},{ "className" : "org::exoplatform::faces::user::component::UILanguageSelector" , "selectors" : { "encodeBegin(???)" : 1 , "encodeChildren(???)" : 1 , "encodeEnd(???)" : 1 , "getLocaleConfigs()" : 1}},{ "className" : "org::exoplatform::text::template::DataHandlerManager" , "selectors" : { "getDataHandler(Class)" : 1}},{ "className" : "org::exoplatform::services::jcr::api::removing::RemoveTest" , "selectors" : { "initRepository()" : 3}},{ "className" : "org::exoplatform::services::organization::OrganizationService" , "selectors" : { "addChild(Group,Group)" : 7 , "addListener(OrganizationServiceListener)" : 2 , "addMembershipEventListener(MembershipEventListener)" : 1 , "addUserEventListener(UserEventListener)" : 5 , "authenticate(String,String)" : 2 , "createGroup(Group)" : 7 , "createGroupInstance()" : 9 , "createMembership(Membership)" : 2 , "createMembershipInstance()" : 7 , "createMembershipType(MembershipType)" : 5 , "createMembershipTypeInstance()" : 5 , "createUser(User)" : 11 , "createUserInstance()" : 11 , "createUserProfileInstance()" : 1 , "findGroupById(String)" : 23 , "findGroupByMembership(String,String)" : 4 , "findGroups(Group)" : 8 , "findGroupsOfUser(String)" : 3 , "findMembershipType(String)" : 7 , "findMembershipTypes()" : 4 , "findMembershipsByUser(String)" : 6 , "findMembershipsByUserAndGroup(String,String)" : 6 , "findUserByName(String)" : 15 , "findUserProfileByName(String)" : 8 , "findUsers(Query)" : 4 , "findUsersByGroup(String)" : 1 , "getUserPageList(int)" : 7 , "linkMembership(String,Group,Membership)" : 7 , "removeGroup(Group)" : 7 , "removeMembership(String)" : 1 , "removeMembershipType(String)" : 3 , "removeUser(String)" : 8 , "saveGroup(Group)" : 2 , "saveMembershipType(MembershipType)" : 3 , "saveUser(User)" : 4 , "saveUserProfile(UserProfile)" : 3}},{ "className" : "org::exoplatform::services::security::SecurityService" , "selectors" : { "authenticate(String,String)" : 2 , "getLog(???)" : 1 , "getSubject(String)" : 2 , "removeSubject(String)" : 1 , "setUpAndCacheSubject(String,Subject)" : 1}},{ "className" : "org::exoplatform::commons::xhtml::Parameters" , "selectors" : { "toParameter(String)" : 1}},{ "className" : "org::exoplatform::portlet::faces::application::PortletFacesData" , "selectors" : { "<Initializer>()::PortletMode" : 2 , "PortletFacesData()" : 1 , "destroy(???)" : 1 , "getLastView(???)" : 1 , "getPortletFacesData(???)" : 3 , "restoreView(???)" : 1 , "saveView(???)" : 1 , "setLastView(???)" : 1}},{ "className" : "org::exoplatform::services::portletcontainer::pci::model::Portlet" , "selectors" : { "Portlet()" : 1 , "addDescription(Description)" : 1 , "addDisplayName(DisplayName)" : 1 , "addFilter(Filter)" : 1 , "addInitParam(InitParam)" : 1 , "addMessageListener(MessageListener)" : 1 , "addSecurityRoleRef(SecurityRoleRef)" : 1 , "addSupportedLocale(String)" : 1 , "addSupports(Supports)" : 1 , "getDescription()" : 2 , "getDescription(String)" : 1 , "getDisplayName()" : 1 , "getExpirationCache()" : 3 , "getFilter()" : 1 , "getGlobalCache()" : 1 , "getInitParam()" : 2 , "getMessageListener()" : 2 , "getPortletClass()" : 2 , "getPortletInfo()" : 2 , "getPortletName()" : 13 , "getPortletPreferences()" : 9 , "getResourceBundle()" : 1 , "getSecurityRoleRef()" : 2 , "getSupportedLocale()" : 1 , "getSupports()" : 9 , "setExpirationCache(String)" : 1 , "setGlobalCache(String)" : 1 , "setPortletClass(String)" : 1 , "setPortletInfo(PortletInfo)" : 1 , "setPortletName(String)" : 1 , "setPortletPreferences(ExoPortletPreferences)" : 1 , "setResourceBundle(String)" : 1}},{ "className" : "org::exoplatform::services::communication::forum::ForumEventListener" , "selectors" : { "ForumEventListener(ForumServiceContainer)" : 2 , "onDelete(List,XResources,Category)" : 1 , "onDelete(List,XResources,Forum)" : 1 , "onDelete(XResources,Category)" : 1 , "onDelete(XResources,Forum)" : 1 , "onDelete(XResources,Post)" : 1 , "onDelete(XResources,Topic)" : 1 , "onSave(List,XResources,Category)" : 1 , "onSave(List,XResources,Forum)" : 2 , "onSave(List,XResources,Post)" : 1 , "onSave(XResources,Category)" : 1 , "onSave(XResources,Forum)" : 1 , "onSave(XResources,Post)" : 1 , "onSave(XResources,Topic)" : 1}},{ "className" : "org::exoplatform::services::wsrp::consumer::ConsumerCapabilities" , "selectors" : { "getCharacterEncodingSet()" : 1 , "getMimeTypes()" : 1 , "getSupportedLocales()" : 2 , "getSupportedModes()" : 1 , "getSupportedWindowStates()" : 1 , "getUserAuthentication()" : 1 , "setCharacterEncodingSet(String[])" : 1 , "setConsumerAgent(String)" : 1 , "setMimeTypes(String[])" : 1 , "setSupportedLocales(String[])" : 1 , "setSupportedModes(String[])" : 1 , "setSupportedWindowStates(String[])" : 1 , "setUserAuthentication(String)" : 1}},{ "className" : "org::exoplatform::services::jcr::api::serialization::MockContentHandler" , "selectors" : { "MockContentHandler()" : 4}},{ "className" : "org::exoplatform::services::jcr::storage::RepositoryManager" , "selectors" : { "addLocation(String,String,String,boolean)" : 3 , "addWorkspaceContainer(String)" : 1 , "deleteLocationByPath(String,String)" : 1 , "deleteLocationByUUID(String,String)" : 1 , "generateUUID(NodeData)" : 1 , "getCurrentTime()" : 1 , "getLocationByPath(String,String)" : 1 , "getLocationByUUID(String,String)" : 4}},{ "className" : "org::exoplatform::services::jcr::impl::storage::filesystem::nodedata::DocViewNodeContainer" , "selectors" : { "DocViewNodeContainer(String,String)" : 1 , "cleanContent()" : 1 , "cleanNode(String)" : 1 , "getAppendSuffix()" : 1 , "getChildrenData(String)" : 3 , "getNodeData(String)" : 1 , "insertContent(NodeImpl,XMLWriter)" : 3 , "jcrToXPathChildren(String)" : 3 , "jcrToXPathNode(String)" : 2 , "updateContent(NodeImpl,XMLWriter)" : 1}},{ "className" : "org::exoplatform::portlets::weather::component::UIWeatherView" , "selectors" : { "UIWeatherView()" : 1 , "getSearchStationCode()" : 1 , "getSearchStationName()" : 1 , "getUIWeatherForm()" : 1 , "setContextPath(String)" : 1 , "setResources(ResourceBundle)" : 1 , "setSearchStationCode(String)" : 1 , "setSearchStationName(String)" : 1 , "setStationFound(boolean)" : 1 , "setWeatherReport(WeatherReport)" : 2 , "updateTree()" : 5}},{ "className" : "org::exoplatform::services::portal::model::NodeNavigation" , "selectors" : { "NodeNavigation()" : 1 , "getNode()" : 2 , "getOwner()" : 2 , "setNode(PageNode)" : 1 , "setOwner(String)" : 1}},{ "className" : "org::exoplatform::services::wsrp::producer::ServiceDescriptionInterface" , "selectors" : { "getServiceDescription(???)" : 1}},{ "className" : "org::exoplatform::container::jmx::MX4JComponentAdapterFactory" , "selectors" : { "MX4JComponentAdapterFactory()" : 2}},{ "className" : "org::exoplatform::services::portletcontainer::impl::portletAPIImp::PortletPreferencesImp" , "selectors" : { "PortletPreferencesImp(???)" : 5 , "discard()" : 1 , "fillCurrentPreferences()" : 1 , "getCurrentPreferences()" : 1 , "getMap()" : 1 , "isMethodCalledIsAction()" : 1 , "isReadOnly(String)" : 3 , "isStateChangeAuthorized()" : 1 , "isStateSaveOnClient()" : 1 , "mergeModifiedPreference()" : 4 , "reset(String)::ReadOnlyException" : 1 , "save(ExoPortletPreferences)" : 2 , "setCurrentPreferences(ExoPortletPreferences)" : 1 , "setMethodCalledIsAction(boolean)" : 6 , "setStateChangeAuthorized(boolean)" : 2 , "setStateSaveOnClient(boolean)" : 1 , "setValue(???)" : 1 , "setValue(String,String)::ReadOnlyException" : 1 , "setValues(String,String)::ReadOnlyException" : 1 , "store(???)" : 3}},{ "className" : "org::exoplatform::services::portletcontainer::impl::portletAPIImp::persistenceImp::DefaultPersistenceManager" , "selectors" : { "getWindow(Input,ExoPortletPreferences)" : 2}},{ "className" : "org::exoplatform::services::portal::PortalConfigDescription" , "selectors" : { "getEditPermission()" : 2 , "getOwner()" : 1 , "getViewPermission()" : 2}},{ "className" : "org::exoplatform::container::monitor::SessionMonitorListenerStack" , "selectors" : { "onError(SessionMonitor,String,Throwable)" : 1 , "onLog(SessionMonitor,ActionData)" : 1 , "onStop(SessionMonitor)" : 1}},{ "className" : "org::exoplatform::services::portletcontainer::impl::PortletApplicationRegisterImpl" , "selectors" : { "removeFilters(String,PortletApp)" : 1 , "removeMessageListeners(String,PortletApp)" : 1}},{ "className" : "org::exoplatform::portlets::user::component::UISearchUserForm" , "selectors" : { "getSibling(???)" : 1}},{ "className" : "org::exoplatform::services::security::impl::BasePrincipal" , "selectors" : { "BasePrincipal(String)" : 2 , "getName()" : 1}},{ "className" : "org::exoplatform::test::web::WorkerThread" , "selectors" : { "WorkerThread(ThreadGroup,String,Tasks)" : 1}},{ "className" : "org::exoplatform::services::wsrp::consumer::impl::URLRewriterImpl" , "selectors" : { "createParameterMap(String)" : 1 , "rewrite(String,StringBuffer,String)" : 1}},{ "className" : "org::exoplatform::services::communication::sms::util::SmsUtil" , "selectors" : { "encodeUnicodeHexEncoded(Object)" : 1 , "hasMobileNumberPrefix(String)" : 1 , "isAlpha(String)" : 2 , "prepareCellularNumber(String)" : 4 , "truncateMobileNumberPrefix(String)" : 1}},{ "className" : "org::exoplatform::services::portal::log::SessionLogDataDescription" , "selectors" : { "getAccessTime()" : 1 , "getActionCount()" : 1 , "getClientName()" : 1 , "getDuration()" : 1 , "getErrorCount()" : 1 , "getIPAddress()" : 1 , "getId()" : 2 , "getRemoteUser()" : 1 , "getSessionOwner()" : 1 , "setAccessTime(Date)" : 2 , "setActionCount(int)" : 1 , "setClientName(String)" : 1 , "setDuration(int)" : 1 , "setErrorCount(int)" : 1 , "setIPAddress(String)" : 1 , "setRemoteUser(String)" : 3 , "setSessionOwner(String)" : 1}},{ "className" : "org::exoplatform::services::wsrp::consumer::UserRegistry" , "selectors" : { "addUser(User)" : 5 , "getAllUsers()" : 2 , "getUser(String)" : 4 , "removeAllUsers()" : 1 , "removeUser(String)" : 1}},{ "className" : "org::exoplatform::portlets::communication::forum::component::UITopics" , "selectors" : { "UITopics(OrganizationService,ForumService,ForumACL)" : 1 , "getAncestorOfType(???)" : 3 , "getForum()" : 2 , "getSibling(???)" : 4 , "getUIPageIterator()" : 2 , "getUser()" : 5 , "hasCreateTopicRole()" : 2 , "hasNewPosts(Topic)" : 1 , "isModerator()" : 1 , "reload()" : 2 , "setForum(Forum)" : 1 , "visit(String)" : 2}},{ "className" : "org::exoplatform::services::portletcontainer::impl::config::XMLParser" , "selectors" : { "parse(InputStream)" : 2 , "readCache(ExoXPPParser)" : 1 , "readCustomMode(ExoXPPParser)" : 1 , "readCustomWindowState(ExoXPPParser)" : 1 , "readDelegatedBundle(ExoXPPParser)" : 1 , "readDescription(ExoXPPParser)" : 2 , "readGlobal(ExoXPPParser)" : 1 , "readObjectPool(ExoXPPParser)" : 1 , "readPortletContainer(ExoXPPParser)" : 1 , "readProperties(ExoXPPParser)" : 1 , "readSharedSession(ExoXPPParser)" : 1 , "readSupportedContent(ExoXPPParser)" : 1}},{ "className" : "org::exoplatform::container::configuration::Configuration" , "selectors" : { "Configuration()" : 3 , "addImportConfiguration(String)" : 1 , "addInitParam(ValuesParam)" : 1 , "addRemoveConfiguration(String)" : 1 , "addServiceConfiguration(ServiceConfiguration)" : 1 , "addURL(???)" : 2 , "buildSessionFactory(???)" : 1 , "generateSchemaCreationScript(???)" : 1 , "getGlobalParam()" : 1 , "getGroovyServiceConfigurationMap()" : 1 , "getGroovyServiceConfigurations()" : 1 , "getImportConfiguration()" : 1 , "getInitParam(String)" : 1 , "getProperties(???)" : 1 , "getRemoveConfiguration()" : 2 , "getServiceConfiguration(String)" : 1 , "getServiceConfigurationMap()" : 1 , "getServiceConfigurations()" : 1 , "mergeConfiguration(Configuration)" : 2 , "removeServiceConfiguration(String)" : 1 , "setProperty(???)" : 7}},{ "className" : "org::exoplatform::services::communication::message::impl::POP3MessageProtocolPlugin" , "selectors" : { "getInboxFolderURLName(String,String,String)::URLName" : 1}},{ "className" : "org::exoplatform::test::mocks::servlet::MockServletContext" , "selectors" : { "MockServletContext(String)" : 4 , "MockServletContext(String,String)" : 3 , "getAttribute(String)" : 1 , "getAttributeNames()" : 1 , "getInitParameterNames()" : 1 , "getLogBuffer()" : 3 , "getMimeType(String)" : 1 , "getRealPath(String)" : 1 , "getResource(String)" : 2 , "getResourceAsStream(String)" : 1 , "getResourcePaths(String)" : 1 , "removeAttribute(String)" : 1 , "setAttribute(String,Object)" : 1 , "setInitParameter(String,String)" : 3 , "setName(String)" : 1}},{ "className" : "org::exoplatform::services::xml::querying::impl::xtas::helper::SimpleStatementHelperImpl" , "selectors" : { "SimpleStatementHelperImpl()" : 1 , "append(String,String,String,XMLData)" : 2 , "delete(String,String,String)" : 2 , "select(String,String,String)" : 2 , "update(String,String,String,XMLData)" : 2}},{ "className" : "org::exoplatform::services::workflow::impl::WorkflowDefinitionServiceImpl" , "selectors" : { "WorkflowDefinitionServiceImpl(???)" : 1}},{ "className" : "org::exoplatform::faces::UIComponentFactory" , "selectors" : { "UIComponentFactory()" : 1 , "UIComponentFactory(ResourceBundle)" : 2 , "createComponent(Class)" : 2 , "createUIComponent(Class)" : 2 , "createUIComponent(Class,PortalContainer)" : 2 , "createUIComponent(String)" : 2 , "findBiggestConstructor(Class)" : 1}},{ "className" : "org::exoplatform::services::portletcontainer::test::portlet::PortletWithExceptionWhileProcessAction" , "selectors" : { "processAction(ActionRequest,ActionResponse)::PortletException" : 1}},{ "className" : "org::exoplatform::services::organization::ldap::GroupHandler" , "selectors" : { "GroupHandler(LDAPService,HibernateService)" : 1 , "addChild(Group,Group)" : 2 , "addChild(Group,Group,boolean)" : 2 , "addGroupEventListener(GroupEventListener)" : 1 , "createGroup(Group)" : 1 , "findGroupById(String)" : 1 , "findGroupByMembership(String,String)" : 1 , "findGroups(Group)" : 1 , "findGroupsOfUser(String)" : 1 , "removeGroup(Group)" : 1 , "saveGroup(Group)" : 1}},{ "className" : "org::exoplatform::services::portletcontainer::pci::model::XMLParser" , "selectors" : { "parse(InputStream)" : 6 , "readCustomPortletMode(ExoXPPParser)" : 1 , "readCustomWindowState(ExoXPPParser)" : 1 , "readDescription(ExoXPPParser)" : 7 , "readDisplayName(ExoXPPParser)" : 1 , "readFilter(ExoXPPParser)" : 1 , "readInitParam(ExoXPPParser)" : 2 , "readMessageListener(ExoXPPParser)" : 1 , "readPortlet(ExoXPPParser)" : 1 , "readPortletApp(ExoXPPParser)" : 1 , "readPortletCollection(ExoXPPParser)" : 1 , "readPortletInfo(ExoXPPParser)" : 1 , "readPortletPreferences(ExoXPPParser)" : 1 , "readPreference(ExoXPPParser)" : 1 , "readSecurityConstraint(ExoXPPParser)" : 1 , "readSecurityRoleRef(ExoXPPParser)" : 1 , "readSupports(ExoXPPParser)" : 1 , "readUserAttribute(ExoXPPParser)" : 1 , "readUserDataConstraint(ExoXPPParser)" : 1}},{ "className" : "org::exoplatform::commons::map::RequestParameterValuesMap" , "selectors" : { "RequestParameterValuesMap(???)" : 1}},{ "className" : "org::exoplatform::commons::utils::ExpressionUtil" , "selectors" : { "getExpressionValue(ResourceBundle,String)" : 24 , "getValue(ResourceBundle,String)" : 1 , "isDataBindingExpression(String)" : 2 , "isResourceBindingExpression(String)" : 4 , "removeBindingExpression(String)" : 2}},{ "className" : "org::exoplatform::services::organization::ldap::OrganizationConfig::User" , "selectors" : { "getEmail()" : 1 , "getFirstName()" : 1 , "getGroups()" : 1 , "getLastName()" : 1 , "getPassword()" : 1 , "getUserName()" : 2}},{ "className" : "org::exoplatform::portlet::exomvc::PageDecorator" , "selectors" : { "addPageDecorator(PageDecorator)" : 1 , "decorate(???)" : 2}},{ "className" : "org::exoplatform::faces::core::renderer::html::GridRenderer" , "selectors" : { "GridRenderer()" : 1}},{ "className" : "org::exoplatform::services::jcr::impl::util::DocNodeExporter" , "selectors" : { "export(Container,NodeImpl,XMLWriter,boolean,boolean)" : 1 , "getStrPropValue(PropertyImpl,boolean)" : 3}},{ "className" : "org::exoplatform::services::portal::model::Node" , "selectors" : { "addChild(Node)" : 1 , "findNode(String)" : 8 , "getChild(int)" : 16 , "getChildren()" : 3 , "getChildrenSize()" : 24 , "getEditPermission()" : 3 , "getIcon()" : 1 , "getLabel()" : 1 , "getName()" : 4 , "getPageReference()" : 2 , "getPageReference(String)" : 14 , "getParent()" : 4 , "getResolvedLabel()" : 19 , "getUri()" : 30 , "getViewPermission()" : 3 , "hasChild(String)" : 1 , "isSelectedPath()" : 10 , "isShare()" : 2 , "isVisible()" : 7 , "removeChild(String)" : 1 , "removePageReference(String)" : 1 , "setEditPermission(String)" : 1 , "setLabel(String)" : 1 , "setName(String)" : 1 , "setParent(Node)" : 1 , "setResolvedLabel(ResourceBundle)" : 1 , "setSelectedPath(boolean)" : 3 , "setUri(String)" : 1 , "setViewPermission(String)" : 1 , "setVisible(PortalACL,String,String)" : 1 , "visit(NodeVisitor)" : 1}},{ "className" : "org::exoplatform::services::portletcontainer::imp::TestPortletRequests" , "selectors" : { "testGetParameterXXMethods()::PortletMode" : 1 , "testHeadersFromProperty()::PortletMode" : 1 , "testIncomingRequestParameter()::PortletMode" : 1 , "testNonPropagationToRenderOfParametersReceivedInAction()::PortletMode" : 1 , "testResponseContentTypesMethods()::PortletMode" : 1 , "testSecurityMethods()::PortletMode" : 1}},{ "className" : "org::exoplatform::faces::core::renderer::html::ToolbarRenderer" , "selectors" : { "ToolbarRenderer()" : 1}},{ "className" : "org::exoplatform::services::organization::hibernate::OrganizationServiceImpl" , "selectors" : { "findUserByName(String)" : 1}},{ "className" : "org::exoplatform::portlets::portal::component::UIAvailablePortal::PortalDataHandler" , "selectors" : { "PortalDataHandler()" : 1}},{ "className" : "org::exoplatform::faces::FacesUtil" , "selectors" : { "createValueBinding(???)" : 2 , "getPortletPreferences(???)" : 5 , "getServletContext(???)" : 2 , "isValueReference(String)" : 2 , "resolveBoundValueBinding(???)" : 1 , "updateBoundValueBinding(???)" : 2}},{ "className" : "org::exoplatform::services::jcr::impl::core::nodetype::PropertyDefImpl" , "selectors" : { "PropertyDefImpl(String)" : 1 , "PropertyDefImpl(String,String,int,String,Value,boolean,boolean,int,boolean,boolean,boolean)" : 47 , "getName()" : 4}},{ "className" : "org::exoplatform::services::communication::forum::ForumServiceContainer" , "selectors" : { "addForumEventListener(ForumEventListener)" : 1 , "findForumService(String)" : 4 , "getForumOwners()" : 1}},{ "className" : "org::exoplatform::services::wsrp::test::TestPersistentStateManager" , "selectors" : { "testPersistentStateData()::RegistrationData" : 1}},{ "className" : "org::exoplatform::services::grammar::wiki::impl::TokenHandlerManager::ExtMap" , "selectors" : { "ExtMap()" : 1 , "put(TokenHandler)" : 1}},{ "className" : "javax::security::auth::callback::UnsupportedCallbackException" , "selectors" : { "UnsupportedCallbackException(Callback)" : 4 , "UnsupportedCallbackException(Callback,String)" : 7 , "getCallback()" : 2}},{ "className" : "org::exoplatform::services::wsrp::testConsumer::BaseTest" , "selectors" : { "createUser(String)" : 4 , "setUp()::PersonName" : 1 , "setUp()::RegistrationData" : 1 , "setUp()::UserContext" : 1 , "setUp()::UserProfile" : 1}},{ "className" : "org::exoplatform::services::jcr::impl::storage::rdb::container::data::PropertyRecord" , "selectors" : { "PropertyRecord()" : 2 , "getName()" : 1 , "getValues()" : 4 , "setName(String)" : 1 , "setValues(Set)" : 1}},{ "className" : "org::exoplatform::services::xml::querying::impl::xtas::TestQueryContent" , "selectors" : { "suite()::TestSuite" : 1}},{ "className" : "org::exoplatform::container::test::mocks::MockServiceB" , "selectors" : { "methodServiceB()" : 1}},{ "className" : "org::exoplatform::services::communication::forum::test::ForumServiceTestCase" , "selectors" : { "ForumServiceTestCase(String)" : 1 , "createCategory(String,String)" : 2 , "createForum(Category,String,String)" : 2 , "createPost(Topic,String,String)" : 2 , "createTopic(Forum,String,String)" : 2 , "runExportData()" : 1 , "runImportData()" : 1}},{ "className" : "org::exoplatform::portlets::communication::forum::component::UIAdvancedSearch" , "selectors" : { "UIAdvancedSearch(ForumService)" : 1 , "getAncestorOfType(???)" : 1}},{ "className" : "org::exoplatform::faces::core::component::InformationProvider" , "selectors" : { "addMessage(???)" : 50 , "clearMessages()" : 2 , "encodeChildren(???)" : 1 , "getMessages()" : 2 , "processValidators(???)" : 1 , "queueEvent(???)" : 1 , "setDisplayMessageType(int)" : 6}},{ "className" : "org::exoplatform::portlets::user::component::UIListUser::UserDataHandler" , "selectors" : { "UserDataHandler()" : 1}},{ "className" : "org::exoplatform::services::organization::UserEventListener" , "selectors" : { "postDelete(User,XResources)" : 2 , "postSave(User,boolean,XResources)" : 2 , "preDelete(User,XResources)" : 2 , "preSave(User,boolean,XResources)" : 2}},{ "className" : "org::exoplatform::services::wsrp::producer::impl::RegistrationOperationsInterfaceImp" , "selectors" : { "deregister(RegistrationContext)::ReturnAny" : 1 , "modifyRegistration(RegistrationContext,RegistrationData)::RegistrationState" : 1 , "register(RegistrationData)::RegistrationContext" : 1}},{ "className" : "org::exoplatform::container::RootContainer" , "selectors" : { "RootContainer()" : 1 , "createPortalContainer(???)" : 4 , "getComponent(Class)" : 5 , "getComponentInstance(???)" : 5 , "getComponentInstanceOfType(???)" : 22 , "getComponentInstancesOfType(???)" : 1 , "getInstance()" : 47 , "getOSEnvironment()" : 2 , "getPortalContainer(String)" : 17 , "getServerEnvironment()" : 3 , "registerComponentImplementation(???)" : 1 , "registerComponentInstance(???)" : 10 , "removePortalContainer(???)" : 1 , "start(???)" : 1 , "stop(???)" : 1 , "unregisterComponent(???)" : 3}},{ "className" : "org::exoplatform::services::portletcontainer::pci::model::ExoPortletPreferences" , "selectors" : { "ExoPortletPreferences()" : 9 , "addPreference(Preference)" : 2 , "getPreferencesValidator()" : 3 , "reset(java" : 1 , "setPreferencesValidator(String)" : 1 , "setValue(String,String)::ReadOnlyException" : 1 , "setValues(String,String)::ReadOnlyException" : 1}},{ "className" : "org::exoplatform::portal::faces::component::UIPageList::PageDescriptionHandler" , "selectors" : { "PageDescriptionHandler()" : 1}},{ "className" : "org::exoplatform::portlets::user::component::UIUserInfo" , "selectors" : { "changeUser(String)" : 1 , "getMemberships()" : 1 , "getSibling(???)" : 1 , "getUIAccountForm()" : 1 , "getUIMembershipForm()" : 1 , "hasAdminRole()" : 1 , "update()" : 2}},{ "className" : "org::exoplatform::services::xml::querying::impl::xtas::xml::DtdTracer" , "selectors" : { "DtdTracer()" : 1 , "getPublicId()" : 1 , "getSystemId()" : 1}},{ "className" : "org::exoplatform::faces::core::validator::EmailAddressValidator" , "selectors" : { "EmailAddressValidator()" : 1 , "validate(???)" : 1 , "validate(FacesContext,UIComponent,Object)::ValidatorException" : 2}},{ "className" : "org::exoplatform::commons::map::AbstractMap" , "selectors" : { "containsKey(Object)" : 1 , "getAttribute(String)" : 5 , "getAttributeNames()" : 4 , "put(Object,Object)" : 1 , "removeAttribute(String)" : 1 , "setAttribute(String,Object)" : 1}},{ "className" : "org::exoplatform::services::portletcontainer::impl::portletAPIImp::PortletURLImp" , "selectors" : { "PortletURLImp(String,String,List,boolean,List,Enumeration,String,WindowID)" : 2}},{ "className" : "org::exoplatform::faces::context::PortletFacesContext" , "selectors" : { "destroy()" : 1 , "getPortalFacesContext(???)" : 1}},{ "className" : "org::exoplatform::faces::core::component::UIExoComponentBase" , "selectors" : { "UIExoComponentBase()" : 1 , "addChild(Class)" : 50 , "findComponentById(String)" : 2 , "findRenderedComponentById(String)" : 1 , "getBaseURL()" : 1 , "getChildComponentOfType(Class)" : 44 , "getClazz()" : 24 , "getFamily()" : 1 , "setClazz(String)" : 15 , "setDecorator(Decorator)" : 2 , "setRenderedComponent(Class)" : 40 , "setRenderedComponent(String)" : 13 , "setRenderedSibling(Class)" : 1 , "setRendererType(String)" : 76}},{ "className" : "org::exoplatform::services::jcr::impl::core::nodetype::exo::JcrDocFile" , "selectors" : { "JcrDocFile()" : 1}},{ "className" : "sun::misc::BASE64Encoder" , "selectors" : { "BASE64Encoder()" : 10 , "sun" : 1}},{ "className" : "org::exoplatform::services::portal::skin::converter::SkinConfigConverter" , "selectors" : { "SkinConfigConverter()" : 1}},{ "className" : "org::exoplatform::container::groovy::GroovyManagerListener" , "selectors" : { "GroovyManagerListener()" : 1 , "load(GroovyObject)" : 1 , "load(List,GroovyObject)" : 1 , "reload(GroovyObject)" : 1 , "reload(List,GroovyObject)" : 1 , "unload(GroovyObject)" : 1 , "unload(List,GroovyObject)" : 1}},{ "className" : "org::exoplatform::services::jcr::impl::config::XMLConfig" , "selectors" : { "XMLConfig(XMLQueryingService)" : 1 , "XMLConfig(XMLQueryingService,InputStream)" : 1 , "init(InputStream)" : 3 , "selectNodes(String)" : 7}},{ "className" : "org::exoplatform::portlets::content::display::component::UIContentConfig" , "selectors" : { "getAllConfigs()" : 1 , "getBaseURL(???)" : 1 , "getSibling(???)" : 3 , "isModificationAllowed()" : 1 , "saveContentConfig(String,ContentConfig)" : 2 , "setModificationAllowed(boolean)" : 2 , "updateConfigs()" : 3}},{ "className" : "org::exoplatform::services::xml::querying::impl::xtas::QueryProcessorFactory" , "selectors" : { "QueryProcessorFactory()" : 1 , "getInstance()" : 1 , "getProcessor()" : 1}},{ "className" : "org::exoplatform::services::portletcontainer::event::MessageListener" , "selectors" : { "messageReceived(???)" : 1}},{ "className" : "org::exoplatform::text::template::xhtml::LinkColumn" , "selectors" : { "LinkColumn(String,String,String)" : 2 , "addParameter(String,String)" : 2}},{ "className" : "org::exoplatform::faces::search::renderer::html::SearchSummaryRenderer" , "selectors" : { "SearchSummaryRenderer()" : 1}},{ "className" : "org::exoplatform::services::portletcontainer::test::portlet::PortletToTestNonUsageOfUndefinedState" , "selectors" : { "render(RenderRequest,RenderResponse)::PortletException" : 1}},{ "className" : "org::exoplatform::services::jcr::impl::storage::inmemory::ContainerImpl" , "selectors" : { "ContainerImpl(String,String)" : 1}},{ "className" : "org::exoplatform::portlets::weather::component::UIWeatherViewPortlet::SearchStationListener" , "selectors" : { "SearchStationListener()" : 1}},{ "className" : "org::exoplatform::portlets::content::display::component::model::ContentConfig" , "selectors" : { "ContentConfig()" : 2 , "ContentConfig(String,String[])" : 2 , "getContent()" : 1 , "getEncoding()" : 5 , "getName()" : 5 , "getTitle()" : 6 , "getUri()" : 5 , "setContent(String)" : 1 , "setEncoding(String)" : 1 , "setName(String)" : 2 , "setTitle(String)" : 2 , "setUri(String)" : 2}},{ "className" : "java::lang::management::ManagementFactory" , "selectors" : { "getClassLoadingMXBean()" : 2 , "getCompilationMXBean()" : 2 , "getGarbageCollectorMXBeans()" : 5 , "getMemoryMXBean()" : 7 , "getMemoryManagerMXBeans()" : 2 , "getMemoryPoolMXBeans()" : 6 , "getOperatingSystemMXBean()" : 4 , "getPlatformMBeanServer()" : 32 , "getRuntimeMXBean()" : 8 , "getThreadMXBean()" : 20}},{ "className" : "org::exoplatform::portlets::wsrp::component::UIProducerInfo" , "selectors" : { "getProducerData()" : 1 , "setProducerData(ProducerData)" : 1}},{ "className" : "org::exoplatform::portlets::monitor::session::component::UISearchLogForm" , "selectors" : { "getSibling(???)" : 1}},{ "className" : "org::exoplatform::portlet::exomvc::MVCPortletFramework" , "selectors" : { "<Initializer>()::PortletMode" : 1}},{ "className" : "org::exoplatform::portlets::wsrp::component::model::ProducerData" , "selectors" : { "ProducerData(Producer)" : 1 , "getOfferedPortlet(???)" : 1 , "getOfferedPortlets(???)" : 1 , "getProducer()" : 1 , "getProducerName()" : 2 , "isSelect()" : 3 , "setSelect(boolean)" : 2}},{ "className" : "org::exoplatform::services::portletcontainer::PortletApplicationRegister" , "selectors" : { "addPortletLyfecycleListener(PortletLifecycleListener)" : 1 , "registerPortletApplication(???)" : 5 , "removePortletApplication(???)" : 5}},{ "className" : "org::exoplatform::services::communication::sms::encoder::RawBinaryUDHFormatter" , "selectors" : { "RawBinaryUDHFormatter()" : 1 , "getInstance()" : 1}},{ "className" : "org::exoplatform::services::organization::hibernate::MembershipQueryHandler" , "selectors" : { "addMembershipEventListener(MembershipEventListener)" : 1 , "createMembership(Membership)" : 1 , "createMembershipEntries(???)" : 2 , "findMembership(String)" : 1 , "findMembershipByUserGroupAndType(String,String,String)" : 1 , "findMembershipsByGroup(Group)" : 1 , "findMembershipsByUser(???)" : 1 , "findMembershipsByUser(String)" : 1 , "findMembershipsByUserAndGroup(String,String)" : 1 , "linkMembership(String,Group,Membership)" : 1 , "removeMembership(String)" : 1 , "removeMembershipEntriesOfGroup(???)" : 1 , "removeMembershipEntriesOfUser(???)" : 2 , "saveMembership(Membership)" : 1}},{ "className" : "org::exoplatform::faces::core::component::model::LinkColumn" , "selectors" : { "LinkColumn(String,String,String)" : 1 , "addParameter(Parameter[])" : 1}},{ "className" : "org::exoplatform::test::web::TestSuites" , "selectors" : { "TestSuites()" : 1 , "getCurrentWebUnit()" : 1 , "getCurrentWebUnitSuite()" : 1 , "getHtmlSummary()" : 1 , "getTextSummary()" : 1 , "nextUnit()" : 3 , "setSuites(List)" : 1 , "softClone()" : 1}},{ "className" : "org::exoplatform::container::configuration::ObjectParam::Property" , "selectors" : { "Property(String,String)" : 1}},{ "className" : "org::exoplatform::portlets::rss::component::Channel" , "selectors" : { "Channel()" : 1 , "getDescription()" : 1 , "getItems()" : 2 , "getItems(NodeList)" : 3 , "getLink()" : 1 , "getTitle()" : 2 , "getUpdateTime()" : 1 , "parse(String)" : 2 , "setChannelInfo(Channel,Document)" : 1 , "setDescription(String)" : 1 , "setItems(Channel,Document)" : 1 , "setItems(Item[])" : 1 , "setLink(String)" : 1 , "setTitle(String)" : 1 , "setUpdateTime(long)" : 1}},{ "className" : "org::exoplatform::services::xml::querying::XMLData" , "selectors" : { "getAsInputStream()" : 1 , "getAsString()" : 1 , "isEmpty()" : 2}},{ "className" : "org::exoplatform::services::wsrp::producer::TransientStateManager" , "selectors" : { "getCacheControl(???)" : 1 , "getTemplates(???)" : 1 , "releaseSession(String)" : 1 , "reolveUserContext(???)" : 2 , "resolveSession(String,String)" : 1 , "storeTemplates(???)" : 1 , "validateCache(String)" : 1}},{ "className" : "com::capeclear::www::GlobalWeather_xsd::PhenomenonType" , "selectors" : { "PhenomenonType(String)" : 29 , "equals(Object)" : 2 , "fromValue(String)" : 2 , "getValue()" : 1 , "hashCode()" : 2 , "toString()" : 1}},{ "className" : "org::exoplatform::portlets::portletregistery::component::UIPortletForm::UpdateActionListener" , "selectors" : { "UpdateActionListener()" : 1}},{ "className" : "org::exoplatform::portlets::portletregistery::component::UIPortletRole::RemoveRoleActionListener" , "selectors" : { "RemoveRoleActionListener()" : 1}},{ "className" : "org::exoplatform::container::PortalContainer::PortalGroovyObjectListener" , "selectors" : { "PortalGroovyObjectListener()" : 1}},{ "className" : "org::exoplatform::container::RootContainer::ShutdownThread" , "selectors" : { "ShutdownThread(RootContainer)" : 1}},{ "className" : "org::exoplatform::portlets::workflow::component::UITaskList" , "selectors" : { "getBaseURL(???)" : 1 , "getTaskList(String)" : 1}},{ "className" : "org::exoplatform::container::ExoContainer" , "selectors" : { "asObjectName(MBeanServer,Object)" : 1 , "createComponent(Class)" : 1 , "getComponentAdapterOfType(???)" : 1 , "getComponentAdaptersOfType(???)" : 1 , "getComponentInstancesOfType(???)" : 1 , "getGroovyManager()" : 1 , "getMBeanServer()" : 2 , "getSortedConstructors(Class)" : 1 , "printMBeanServer()" : 2 , "registerComponent(???)" : 1 , "registerComponentImplementation(???)" : 3 , "start(???)" : 1 , "stop(???)" : 2 , "unregisterComponent(???)" : 1}},{ "className" : "org::exoplatform::services::communication::forum::hibernate::ForumDependencyObjectManager" , "selectors" : { "onDelete(XResources,Forum)" : 1}},{ "className" : "org::exoplatform::portlets::user::component::UIAccountForm" , "selectors" : { "UIAccountForm()" : 1 , "customizeNewAccountForm()" : 1 , "customizeUpdateAccountForm()" : 2 , "encodeChildren(???)" : 1 , "setEditingUser(String)" : 1 , "setEditingUser(User)" : 2}},{ "className" : "org::exoplatform::services::task::impl::TaskServiceImpl::TaskThread" , "selectors" : { "TaskThread(long)" : 1}},{ "className" : "org::exoplatform::container::monitor::PortalMonitor" , "selectors" : { "PortalMonitor()" : 1 , "addListener(PortalMonitorListener)" : 1 , "averageExecutionTime()" : 1 , "error(String,Throwable)" : 4 , "getRequestCounter()" : 1 , "getRequestMonitorData()" : 1 , "log(ActionData)" : 1 , "maxExecutionTime()" : 1 , "minExecutionTime()" : 1}},{ "className" : "org::exoplatform::services::threadpool::impl::ThreadPoolServiceImpl::RunWhenBlocked" , "selectors" : { "RunWhenBlocked()" : 1}},{ "className" : "org::exoplatform::portlets::portletregistery::component::UIPortletCategory::EditActionListener" , "selectors" : { "EditActionListener()" : 1}},{ "className" : "org::exoplatform::services::wsrp::consumer::PortletWindowSession" , "selectors" : { "getCachedMarkup(???)" : 1 , "getNavigationalState()" : 1 , "getPortletSession()" : 4 , "setNavigationalState(String)" : 1 , "updateMarkupCache(???)" : 2}},{ "className" : "org::exoplatform::faces::core::event::MessageExceptionHandler" , "selectors" : { "MessageExceptionHandler()" : 1}},{ "className" : "org::exoplatform::container::configuration::XMLParser" , "selectors" : { "parse(InputStream)" : 2 , "readConfiguration(ExoXPPParser)" : 1 , "readGlobalInitParam(Configuration,ExoXPPParser)" : 1 , "readObjectParam(ExoXPPParser)" : 1 , "readPropertiesParam(ExoXPPParser)" : 1 , "readServiceConfiguration(ExoXPPParser)" : 1 , "readValueParam(ExoXPPParser)" : 1 , "readValuesParam(ExoXPPParser)" : 2}},{ "className" : "org::exoplatform::container::configuration::ConfigurationManager" , "selectors" : { "getGlobalInitParam(String)" : 1 , "getGroovyServiceConfigurations()" : 1 , "getInputStream(String)" : 11 , "getServiceConfiguration(Class)" : 32 , "getServiceConfiguration(String)" : 1 , "getServiceConfigurations()" : 1 , "isDefault(String)" : 1}},{ "className" : "javax::jcr::NamespaceException" , "selectors" : { "NamespaceException(String)" : 5 , "NamespaceException(String,Exception)" : 1}},{ "className" : "org::exoplatform::portlet::faces::lifecycle::ExoLifecycleFactory::LifecycleWrapper" , "selectors" : { "LifecycleWrapper(???)" : 2}},{ "className" : "org::exoplatform::services::communication::message::test::TestMessageService" , "selectors" : { "createAccount(String,String)" : 7 , "createFolder(String)" : 4 , "createMessage(String)" : 1 , "runMessageOperations(Account,Account,Message,long)" : 1}},{ "className" : "org::exoplatform::services::xml::querying::impl::xtas::EmployeeBean" , "selectors" : { "getAddress()" : 1}},{ "className" : "org::exoplatform::portlets::content::search::component::UIContentSearcher" , "selectors" : { "getSearcher()" : 1}},{ "className" : "org::exoplatform::services::xml::querying::impl::xtas::TestUniFormTree" , "selectors" : { "suite()::TestSuite" : 1}},{ "className" : "org::exoplatform::test::BasicTestCase" , "selectors" : { "BasicTestCase(String)" : 33 , "getDescription()" : 1 , "getTestNumber()" : 3 , "setTestNumber(int)" : 5}},{ "className" : "org::exoplatform::services::portletcontainer::filter::PortletFilter" , "selectors" : { "doFilter(???)" : 2}},{ "className" : "org::exoplatform::services::portal::community::CommunityConfigService" , "selectors" : { "addCommunityNavigation(CommunityNavigation)" : 1 , "addCommunityPortal(CommunityPortal)" : 1 , "findCommunityNavigation(String)" : 2 , "findCommunityPortal(String)" : 2 , "getCommunityNavigation(Group)" : 1 , "getCommunityPortal(Group)" : 1 , "removeCommunityNavigation(CommunityNavigation)" : 1 , "removeCommunityPortal(CommunityPortal)" : 1}},{ "className" : "org::exoplatform::services::wsrp::consumer::WSRPMarkupRequest" , "selectors" : { "getCachedMarkup(???)" : 1}},{ "className" : "org::exoplatform::services::communication::message::Attachment" , "selectors" : { "setContent(byte[])" : 1 , "setName(String)" : 1}},{ "className" : "org::exoplatform::services::portal::PortalConfigService" , "selectors" : { "createNodeInstance()" : 1 , "findAllPageDescriptions(Query)" : 4 , "findAllPortalConfigDescriptions(Query)" : 2 , "getNodeNavigation(String)" : 4 , "getPage(String)" : 6 , "getPortalACL()" : 6 , "getPortalConfig(String)" : 5 , "getPortalConfigAsXmlString(String)" : 1 , "getPredefinedTemplate(String,String)" : 1 , "getPredefinedTemplates(String)" : 1 , "removePage(String)" : 1 , "saveNodeNavigation(String,Node)" : 1 , "savePage(Page)" : 3 , "savePortalConfig(PortalConfig)" : 1}},{ "className" : "org::exoplatform::services::portal::model::PageNode" , "selectors" : { "PageNode()" : 2 , "getChildren()" : 5 , "getClonePageReference()" : 1 , "getDescription()" : 4 , "getEditPermission()" : 4 , "getIcon()" : 4 , "getLabel()" : 4 , "getName()" : 5 , "getPageReference()" : 3 , "getUri()" : 5 , "getViewPermission()" : 5 , "setDescription(String)" : 3 , "setEditPermission(String)" : 2 , "setIcon(String)" : 2 , "setLabel(String)" : 3 , "setName(String)" : 3 , "setPageReference(List)" : 1 , "setUri(String)" : 4 , "setViewPermission(String)" : 2}},{ "className" : "org::exoplatform::container::groovy::GroovyManager" , "selectors" : { "GroovyManager(URL)" : 1 , "addListener(GroovyManagerListener)" : 1 , "checkModifiedObjects()" : 1 , "createGroovyClassLoader()::GroovyClassLoader" : 1 , "getGroovyObject(String)" : 2 , "getGroovyObjectAsText(String)" : 1 , "getObject(String)" : 3 , "isDispose()" : 1 , "isObjectModified(GroovyObject)" : 1 , "reloadGroovyObjects()" : 2 , "removeAllListener()" : 1 , "setDispose(boolean)" : 2}},{ "className" : "org::exoplatform::container::monitor::jvm::J2EEServerInfo" , "selectors" : { "getServerHome()" : 2 , "getServerName()" : 1}},{ "className" : "org::exoplatform::services::jcr::core::NodeData" , "selectors" : { "addPermanentProperty(Property)" : 2 , "getPermanentProperty(String)" : 9 , "refresh(Node)" : 1}},{ "className" : "org::exoplatform::portlet::exomvc::config::Configuration::KeyComparator" , "selectors" : { "KeyComparator()" : 1}},{ "className" : "org::exoplatform::services::communication::sms::mock::MockSender" , "selectors" : { "MockSender(Provider)" : 1}},{ "className" : "java::lang::management::CompilationMXBean" , "selectors" : { "getName()" : 1 , "getTotalCompilationTime()" : 1 , "isCompilationTimeMonitoringSupported()" : 1}},{ "className" : "org::exoplatform::faces::core::event::ExoActionListener" , "selectors" : { "addInterceptor(ActionInterceptor)" : 40 , "canHandleAction(String)" : 1 , "execute(ExoActionEvent)" : 1 , "getActionName()" : 3 , "init()" : 1 , "postExecute(ExoActionEvent)" : 1 , "processAction(???)" : 1 , "processAction(ActionEvent)::AbortProcessingException" : 1 , "setActionToListen(String)" : 21}},{ "className" : "org::exoplatform::services::communication::forum::Category" , "selectors" : { "getCategoryName()" : 5 , "getCategoryOrder()" : 1 , "getDescription()" : 2 , "getId()" : 13 , "getModifiedBy()" : 1 , "getModifiedDate()" : 1 , "setCategoryName(String)" : 2 , "setCategoryOrder(int)" : 1 , "setDescription(String)" : 2}},{ "className" : "org::exoplatform::commons::map::RequestParameterMap" , "selectors" : { "RequestParameterMap(???)" : 2}},{ "className" : "org::exoplatform::services::security::impl::RolePrincipalImpl" , "selectors" : { "RolePrincipalImpl(String)" : 1}},{ "className" : "org::exoplatform::portlets::log::renderer::html::LogMessagesRenderer" , "selectors" : { "levelAsString(int)" : 1}},{ "className" : "org::exoplatform::xml::object::XMLBaseObject" , "selectors" : { "XMLBaseObject(Class,Object)" : 3 , "getObjectValue()" : 5 , "getValue()" : 4 , "setBoolean(Boolean)" : 1 , "setCollectiontValue(Collection)" : 1 , "setDate(Date)" : 1 , "setDouble(Double)" : 1 , "setFloat(Float)" : 1 , "setInt(Integer)" : 1 , "setLong(Long)" : 1 , "setMapValue(Map)" : 1 , "setNativeArrayValue(Object)" : 1 , "setObject(XMLObject)" : 2 , "setObjectValue(Object)" : 1 , "setString(String)" : 1 , "setType(Class)" : 1}},{ "className" : "org::exoplatform::services::portletcontainer::test::portlet::PortletWithPortletExceptionWhileInit" , "selectors" : { "init(PortletConfig)::PortletException" : 1}},{ "className" : "org::exoplatform::services::wsrp::consumer::impl::PortletDriverImpl" , "selectors" : { "PortletDriverImpl(WSRPPortlet)" : 1 , "checkInitCookie(UserSessionMgr)" : 3 , "clonePortlet(UserSessionMgr)::ClonePortletRequest" : 1 , "destroyPortlets(String,UserSessionMgr)::DestroyPortletsRequest" : 1 , "getInteractionParams(InteractionRequest)::InteractionParams" : 1 , "getMarkup(WSRPMarkupRequest,UserSessionMgr,String)::MarkupRequest" : 1 , "getMarkup(WSRPMarkupRequest,UserSessionMgr,String)::MarkupResponse" : 1 , "getMarkupParams(WSRPBaseRequest)::ClientData" : 1 , "getMarkupParams(WSRPBaseRequest)::MarkupParams" : 1 , "getPortlet()" : 10 , "getPortletDescription(UserSessionMgr,String)::PortletDescriptionRequest" : 1 , "getPortletProperties(String,UserSessionMgr)::GetPortletPropertiesRequest" : 1 , "getPortletPropertyDescription(UserSessionMgr)::PortletPropertyDescriptionRequest" : 1 , "getRuntimeContext(WSRPBaseRequest,String)::RuntimeContext" : 1 , "getRuntimeContext(WSRPBaseRequest,String)::Templates" : 1 , "getUserContext(UserSessionMgr)::UserContext" : 1 , "initCookie()" : 2 , "initCookie()::InitCookieRequest" : 1 , "performBlockingInteraction(InteractionRequest,UserSessionMgr,String)::BlockingInteractionRequest" : 1 , "releaseSessions(String,UserSessionMgr)::ReleaseSessionsRequest" : 1 , "resetInitCookie(UserSessionMgr)" : 2 , "setPortletProperties(PropertyList,UserSessionMgr)::SetPortletPropertiesRequest" : 1}},{ "className" : "javax::security::auth::callback::CallbackHandler" , "selectors" : { "handle(Callback[])" : 9}},{ "className" : "org::exoplatform::services::portletregistery::impl::hibernate::PortletImpl" , "selectors" : { "PortletImpl()" : 1 , "getId()" : 2 , "setCreatedDate(Date)" : 1 , "setId(String)" : 1 , "setModifiedDate(Date)" : 2 , "setPortletCategoryId(String)" : 1}},{ "className" : "org::exoplatform::portlets::content::explorer::component::UIFileNodeInfo" , "selectors" : { "getAncestorOfType(???)" : 1}},{ "className" : "org::exoplatform::test::mocks::portlet::MockPortletExternalContext" , "selectors" : { "MockPortletExternalContext()" : 1 , "getMockPortletConfig()" : 1 , "getMockPortletContext()" : 1 , "getPortletPreferences(???)" : 1}},{ "className" : "org::exoplatform::portlet::commons::servlet::BufferedServletResponse" , "selectors" : { "BufferedServletResponse(RenderResponseImp)" : 1 , "flushBuffer()" : 1 , "toByteArray()" : 1}},{ "className" : "org::exoplatform::portal::faces::component::UIContainerForm" , "selectors" : { "addNewContainer(UIBasicComponent)" : 1 , "getAncestorOfType(???)" : 1 , "setEditingContainer(UIContainer)" : 1}},{ "className" : "org::exoplatform::services::communication::sms::util::SortException" , "selectors" : { "SortException(Throwable)" : 3}},{ "className" : "org::exoplatform::portlets::weather::WeatherUtil" , "selectors" : { "WeatherUtil()" : 1 , "checkRequest(WeatherData)" : 2 , "getContextPath()" : 1 , "getInstance(UIPortlet)" : 2 , "getResources()" : 1 , "getWeatherReport(String)" : 1 , "isServiceAvailable()" : 2 , "isServiceInitialized()" : 3 , "setServiceAvailable(boolean)" : 2}},{ "className" : "org::exoplatform::services::portal::impl::converter::ContainerConverter" , "selectors" : { "ContainerConverter()" : 1}},{ "className" : "org::exoplatform::services::jcr::impl::core::nodetype::nt::Query" , "selectors" : { "Query()" : 1}},{ "className" : "org::exoplatform::portal::launcher::PortalContextListener" , "selectors" : { "customizeFaces()" : 1}},{ "className" : "org::exoplatform::test::web::ExoWebClient" , "selectors" : { "ExoWebClient(String,String)" : 2 , "ExoWebClient(String,String)::WebConversation" : 1 , "clone(String)" : 1 , "executeUnit(WebUnit)" : 1 , "getAttribute(String)" : 1 , "getHomePageURL()" : 1 , "getName()" : 1 , "getRoles()" : 3 , "reset()" : 1 , "run(TestSuites)" : 1 , "setHomePageURL(String)" : 1 , "setInterval(long)" : 1 , "setSuites(TestSuites)" : 2 , "setValidateWebUnit(boolean)" : 2 , "setValidateWellFormedXhtml(boolean)" : 2 , "setWebClient(???)" : 2}},{ "className" : "org::exoplatform::text::template::xhtml::LongTextPopupFormater" , "selectors" : { "LongTextPopupFormater(int)" : 1}},{ "className" : "org::exoplatform::portal::faces::component::UIPortlet" , "selectors" : { "<Initializer>()::PortletMode" : 3 , "UIPortlet(Portlet,String,String)" : 1 , "UIPortlet(String,String,String)" : 1 , "UIPortlet(String,String,String,String)" : 2 , "broadcast(???)" : 1 , "encodeBegin(???)" : 6 , "encodeChildren(???)" : 6 , "encodeEnd(???)" : 6 , "getAncestorOfType(???)" : 2 , "getDisplayTitle()" : 2 , "getEditablePortletModel()" : 2 , "getErrorMessage()" : 1 , "getHtmlSupportModes()" : 3 , "getPortletMode(???)" : 3 , "getPortletModel()" : 10 , "getRenderParameters()" : 1 , "getRendererType(???)" : 1 , "getUpdateCache()" : 1 , "getWindowId()" : 9 , "getWindowState(???)" : 5 , "hasError()" : 1 , "initPortlet(String,String,String,String)" : 1 , "initPortletModes(PortletData)" : 2 , "isNew()" : 1 , "registerListeners()" : 2 , "setComponentModified(boolean)" : 1 , "setDisplayTitle(String)" : 2 , "setPortletMode(???)" : 1 , "setPortletMode(String)" : 1 , "setRenderParameters(Map)" : 4 , "setUpdateCache(boolean)" : 7 , "setWindowState(???)" : 3}},{ "className" : "org::exoplatform::portlet::cocoon::CocoonPortlet" , "selectors" : { "doView(RenderRequest,RenderResponse)::HttpServletRequestWrapper" : 1 , "doView(RenderRequest,RenderResponse)::PortletException" : 1 , "getBaseURI()" : 1}},{ "className" : "org::exoplatform::services::indexing::IndexerPlugin" , "selectors" : { "getObject(String,String)" : 1 , "getObjectAsText(String,String)" : 1 , "getObjectAsXHTML(String,String)" : 2 , "getObjectAsXML(String,String)" : 1 , "getPluginIdentifier()" : 7 , "getSearcher()" : 2 , "reindex()" : 1 , "removeIndex()" : 1 , "resetSearcher()" : 1}},{ "className" : "org::exoplatform::services::portletcontainer::impl::portletAPIImp::helpers::SharedSessionUtil" , "selectors" : { "decodePortletSessionAttribute(String,String)" : 1 , "encodePortletSessionAttribute(String,String)" : 3 , "encodePortletSessionMetaDataAttribute(String,String)" : 8 , "isAttribute(String,String)" : 2 , "isMetaDataAttribute(String,String)" : 2}},{ "className" : "org::exoplatform::portlets::rss::component::Item" , "selectors" : { "Item()" : 1 , "getDescription()" : 2 , "getLink()" : 2 , "getTitle()" : 3 , "setDescription(String)" : 1 , "setLink(String)" : 1 , "setTitle(String)" : 1}},{ "className" : "org::exoplatform::services::portal::skin::converter::PortletStyleConfigConverter" , "selectors" : { "PortletStyleConfigConverter()" : 1}},{ "className" : "org::exoplatform::portal::portlet::struts::ExoStrutsPortlet" , "selectors" : { "doRender(RenderRequest,RenderResponse)::HttpServletRequestWrapper" : 1 , "doRender(RenderRequest,RenderResponse)::HttpServletResponseWrapper" : 1}},{ "className" : "org::exoplatform::services::portal::impl::PortalConfigData" , "selectors" : { "PortalConfigData(PortalConfig)" : 2 , "PortalConfigData(String)" : 2 , "getData()" : 1 , "getPortalConfig()" : 2 , "setData(String)" : 1 , "setPortalConfig(PortalConfig)" : 1}},{ "className" : "org::exoplatform::services::portletcontainer::impl::config::Global" , "selectors" : { "Global()" : 1 , "getDescription()" : 1 , "getMajorVersion()" : 2 , "getMinorVersion()" : 2 , "getName()" : 2 , "setDescription(String)" : 1 , "setMajorVersion(int)" : 1 , "setMinorVersion(int)" : 1 , "setName(String)" : 1}},{ "className" : "com::capeclear::www::GlobalWeather_wsdl::GlobalWeather_Port" , "selectors" : { "getWeatherReport(String)" : 1}},{ "className" : "org::exoplatform::services::jcr::impl::core::NodeImpl" , "selectors" : { "NodeImpl(NodeImpl)" : 4 , "NodeImpl(String,List)" : 7 , "NodeImpl(String,String)" : 4 , "addAutoCreatedItems(NodeType)" : 2 , "addExistingNode(String,String)" : 1 , "addNode(String)" : 1 , "addNode(String,String)" : 2 , "addPermanentProperty(Property)" : 2 , "createNode(NodeImpl,String,NodeType)" : 2 , "findNodeType(NodeImpl,String)" : 1 , "findPrimaryItem(NodeImpl)" : 2 , "findProperties(Value)" : 1 , "getDefinition()" : 2 , "getItems(ItemFilter)" : 1 , "getMixinNodeTypes()" : 2 , "getNode(String)" : 3 , "getNodes()" : 4 , "getParentToAddNodeTo(String)" : 2 , "getPaths()" : 1 , "getPermanentProperties()" : 5 , "getPermanentProperty(String)" : 13 , "getPrimaryNodeType()" : 13 , "getProperties()" : 8 , "getProperty(String)" : 3 , "getUUID()" : 1 , "hasNode(String)" : 1 , "hasSameOrSubtypeMixin(NodeTypeImpl)" : 1 , "refresh(Node)" : 1 , "removePermanentProperty(String)" : 2 , "retrieveChildNodes(ItemFilter)" : 3 , "retrieveProperties(ItemFilter)" : 5 , "setProperty(String,InputStream)" : 1 , "setProperty(String,Value)" : 1 , "setProperty(String,Value,int)" : 9 , "setProperty(String,Value[],int)" : 2 , "updateProperty(String,int,Value[])" : 8}},{ "className" : "org::exoplatform::faces::core::component::UIForm::SelectBoxField" , "selectors" : { "SelectBoxField(String,String,String,List)" : 1 , "getOptions()" : 1 , "setOptions(List)" : 1}},{ "className" : "com::capeclear::www::GlobalWeather_xsd::DirectionCompass" , "selectors" : { "DirectionCompass(String)" : 16 , "equals(Object)" : 1 , "fromValue(String)" : 2 , "hashCode()" : 1 , "toString()" : 1}},{ "className" : "org::exoplatform::container::configuration::ObjectParam" , "selectors" : { "ObjectParam()" : 1 , "addProperty(String,String)" : 1 , "getObject()" : 10 , "getValue(String)" : 4 , "populateBean()" : 1 , "populateBeanInArray(Object,String,String)" : 1 , "setType(String)" : 1}},{ "className" : "org::exoplatform::portlets::backup::component::UIImportData" , "selectors" : { "UIImportData(ImportExportService)" : 2 , "getBackupService()" : 2 , "getImportDatas()" : 1 , "getParent(???)" : 1 , "hasAdminRole()" : 1 , "populateImportData()" : 3 , "setDirectory(String)" : 2}},{ "className" : "org::exoplatform::services::security::impl::mock::MockCallbackHandler" , "selectors" : { "MockCallbackHandler(String,String)" : 1}},{ "className" : "org::exoplatform::services::wsrp::consumer::impl::ProducerImpl" , "selectors" : { "ProducerImpl()" : 2 , "getServiceDescription(String)::ServiceDescriptionRequest" : 1 , "init()" : 2 , "init()::WSRPServiceLocator" : 1 , "modifyRegistration(RegistrationData)::ModifyRegistrationRequest" : 1 , "updateServiceDescription()" : 3}},{ "className" : "org::exoplatform::services::portletcontainer::imp::TestMessageMechanism" , "selectors" : { "testSendMessage()::PortletMode" : 1}},{ "className" : "org::exoplatform::portlets::user::component::UIGroupExplorer" , "selectors" : { "changeGroup(String)" : 1 , "customizeGroupDetail()" : 1 , "getChildrenGroup()" : 1 , "getCurrentGroup()" : 5 , "getMemberOfTheCurrentGroup()" : 2 , "getParentGroup()" : 1 , "getSibling(???)" : 1 , "update()" : 2}},{ "className" : "org::exoplatform::services::portletcontainer::test::portlet::PortletToTestInvisibilityOfExtraParameters" , "selectors" : { "render(RenderRequest,RenderResponse)::PortletException" : 1}},{ "className" : "org::exoplatform::portlets::weather::component::UIWeatherEditPortlet::SearchStationListener" , "selectors" : { "SearchStationListener()" : 1}},{ "className" : "org::exoplatform::services::portal::impl::converter::PageConverter" , "selectors" : { "PageConverter()" : 1}},{ "className" : "org::exoplatform::services::xml::querying::impl::xtas::XMLConfig" , "selectors" : { "XMLConfig(String)" : 1 , "getInstance()" : 2 , "getResources()" : 1}},{ "className" : "org::exoplatform::portlets::nav::component::UIBreadcrumbs" , "selectors" : { "getBaseURL(???)" : 1}},{ "className" : "org::exoplatform::commons::exception::UniqueObjectException" , "selectors" : { "UniqueObjectException(String,Object[])" : 2 , "getExceptionDescription()" : 1}},{ "className" : "org::exoplatform::services::communication::sms::mock::MockProdatMessenger" , "selectors" : { "MockProdatMessenger(Provider)" : 1}},{ "className" : "org::exoplatform::services::jcr::impl::storage::rdb::repository::data::UUIDReference" , "selectors" : { "UUIDReference()" : 1 , "getRealPath()" : 3 , "getRefPaths()" : 2 , "getReferences()" : 1 , "getUuid()" : 1 , "setContainer(ContainerRecord)" : 1 , "setRealPath(String)" : 1 , "setReferences(Set)" : 2 , "setUuid(String)" : 1}},{ "className" : "org::xml::sax::helpers::XMLReaderFactory" , "selectors" : { "createXMLReader()" : 59 , "createXMLReader(String)" : 20}},{ "className" : "org::exoplatform::faces::core::renderer::html::PageListIteratorRenderer" , "selectors" : { "PageListIteratorRenderer()" : 1}},{ "className" : "org::exoplatform::services::indexing::impl::FileIndexerPluginImpl" , "selectors" : { "getObjectAsText(String,String)" : 1 , "indexDirectory(String,String,String[],boolean)" : 2 , "reindexDirectory(String,String,String[],boolean)::Term" : 1 , "traverse(File,FileFilter,String,String)" : 2}},{ "className" : "org::exoplatform::portlets::portletregistery::component::UIPortletInfo::DeleteActionListener" , "selectors" : { "DeleteActionListener()" : 1}},{ "className" : "org::exoplatform::container::client::http::HttpClientInfo" , "selectors" : { "HttpClientInfo(???)" : 3 , "getClientName()" : 1 , "getClientType()" : 2 , "getIpAddress()" : 1 , "getPreferredMimeType()" : 4 , "getRemoteUser()" : 1}},{ "className" : "org::exoplatform::services::portal::skin::model::SkinConfig" , "selectors" : { "SkinConfig()" : 1 , "getContainerDecorators()" : 1 , "getPageDecorators()" : 1 , "getPortalDecorators()" : 1 , "getPortletDecorators()" : 1 , "getPortletStyleConfig()" : 2 , "setContainerDecorators(List)" : 1 , "setPageDecorators(List)" : 1 , "setPortalDecorators(List)" : 1 , "setPortletDecorators(List)" : 1}},{ "className" : "org::exoplatform::commons::utils::ExoEnumeration" , "selectors" : { "ExoEnumeration(Iterator)" : 1}},{ "className" : "org::exoplatform::services::portletcontainer::pci::model::Util" , "selectors" : { "getDescription(String,List)" : 1}},{ "className" : "org::exoplatform::container::monitor::SessionMonitorListener" , "selectors" : { "SessionMonitorListener(SessionMonitorListenerStack)" : 2 , "onError(SessionMonitor,String,Throwable)" : 1 , "onLog(SessionMonitor,ActionData)" : 1 , "onStart(SessionMonitor)" : 1 , "onStop(SessionMonitor)" : 1}},{ "className" : "org::exoplatform::portlets::console::component::UIListCache::ExoCacheDataHandler" , "selectors" : { "ExoCacheDataHandler()" : 1}},{ "className" : "org::exoplatform::services::portal::impl::NodeImpl" , "selectors" : { "NodeImpl()" : 2 , "NodeImpl(Node,Node,int)" : 2 , "NodeImpl(PageNode,Node,int)" : 3 , "addChild(Node)" : 2 , "copyPageNode(PageNode)" : 2 , "getChild(int)" : 1 , "getChildrenSize()" : 1 , "isShare()" : 1 , "setLabel(String)" : 1 , "setParent(Node)" : 2 , "setShare(boolean)" : 2 , "setVisible(PortalACL,String,String)" : 1 , "visit(NodeVisitor)" : 1}},{ "className" : "org::exoplatform::portlets::resources::component::UISearchForm" , "selectors" : { "UISearchForm(boolean)" : 1 , "getParent(???)" : 2}},{ "className" : "org::exoplatform::services::log::impl::LogServiceImpl" , "selectors" : { "getDefaultLogLevel(String)" : 1}},{ "className" : "org::exoplatform::services::communication::sms::model::MessagesImpl" , "selectors" : { "MessagesImpl()" : 1 , "clear()" : 1 , "iterator()" : 1}},{ "className" : "org::exoplatform::services::portletcontainer::monitor::PortletRequestMonitorData" , "selectors" : { "PortletRequestMonitorData(long,long)" : 1 , "getActionRequestCounter()" : 1 , "getAvgActionExecutionTime()" : 1 , "getAvgRenderExecutionTime()" : 1 , "getCacheHitCounter()" : 1 , "getMaxActionExecutionTime()" : 1 , "getMaxRenderExecutionTime()" : 1 , "getMinActionExecutionTime()" : 1 , "getMinRenderExecutionTime()" : 1 , "getRenderRequestCounter()" : 1 , "logActionRequest(long)" : 1 , "logRenderRequest(long,boolean)" : 1 , "maxRange()" : 1 , "minRange()" : 1}},{ "className" : "org::exoplatform::faces::core::component::UIForm::Container" , "selectors" : { "Container(String)" : 1 , "add(Field)" : 24 , "getFields()" : 1 , "getLegend()" : 1}},{ "className" : "com::capeclear::www::GlobalWeather_wsdl::StationInfoStub" , "selectors" : { "StationInfoStub(???)" : 4 , "StationInfoStub(Service)::org" : 1 , "createCall()::org" : 1 , "getStation(String)::org" : 1 , "isValidCode(String)::org" : 1 , "listCountries()::org" : 1 , "searchByCode(String)::org" : 1 , "searchByCountry(String)::org" : 1 , "searchByName(String)::org" : 1 , "searchByRegion(String)::org" : 1 , "setPortName(???)" : 2}},{ "className" : "org::exoplatform::commons::utils::io::FileFilterByExtension" , "selectors" : { "FileFilterByExtension(String[],boolean)" : 1}},{ "className" : "org::exoplatform::services::xml::querying::impl::xtas::TestObjectMarshalling" , "selectors" : { "suite()::TestSuite" : 1}},{ "className" : "org::exoplatform::faces::core::renderer::html::DateInputRenderer" , "selectors" : { "DateInputRenderer()" : 1 , "buildMonthArray(ResourceBundle)" : 1 , "renderField(StringBuffer,UIDateInput,String,int,String[])" : 1 , "renderField(StringBuffer,UIDateInput,String,int,int,int)" : 2 , "renderImage(StringBuffer,String)" : 1 , "renderJavascript(StringBuffer,String,String,String)" : 1}},{ "className" : "org::exoplatform::container::SimpleComponentAdapter" , "selectors" : { "SimpleComponentAdapter(Object,Class)" : 1 , "getComponentImplementation()" : 1}},{ "className" : "org::exoplatform::faces::core::component::UIToolbar" , "selectors" : { "UIToolbar()" : 2 , "UIToolbar(String)" : 6 , "addLeftButton(Button)" : 12 , "addRightButton(Button)" : 9 , "getLeftButtons()" : 1 , "getRightButtons()" : 1}},{ "className" : "org::exoplatform::services::portletcontainer::pci::model::Supports" , "selectors" : { "Supports()" : 1 , "addPortletMode(String)" : 1 , "getMimeType()" : 10 , "getPortletMode()" : 9 , "setMimeType(String)" : 1}},{ "className" : "org::exoplatform::services::cms::impl::NewUserListener" , "selectors" : { "importInJCR(List,Collection,Node,String)" : 2 , "isUserPredefined(User)" : 1 , "makePath(Node,String)" : 2}},{ "className" : "org::exoplatform::services::xml::resolving::impl::xmlcommons::XMLCommonsResolvingServiceImpl" , "selectors" : { "XMLCommonsResolvingServiceImpl()" : 2 , "XMLCommonsResolvingServiceImpl()::CatalogManager" : 1 , "XMLCommonsResolvingServiceImpl()::CatalogResolver" : 2 , "getEntityResolver()" : 1 , "isLocallyResolvable(String)" : 1}},{ "className" : "org::exoplatform::test::mocks::servlet::MockServletResponse::ByteArrayServletOutputStream" , "selectors" : { "ByteArrayServletOutputStream(ByteArrayOutputStream)" : 1 , "close(???)" : 1 , "flush(???)" : 1}},{ "className" : "org::exoplatform::services::wsrp::test::TestPerformBlockingInteraction" , "selectors" : { "getPerformBlockingInteraction(RegistrationContext,PortletContext,InteractionParams)::BlockingInteractionRequest" : 1 , "testCloneBeforeWriteStateChange()::InteractionParams" : 1 , "testCloneBeforeWriteStateChange()::PortletContext" : 1 , "testReadOnlyStateChange()::InteractionParams" : 1 , "testReadOnlyStateChange()::PortletContext" : 1 , "testReadOnlyStateChange()::RegistrationContext" : 1 , "testSendRedirect()::InteractionParams" : 1 , "testSendRedirect()::PortletContext" : 1 , "testSendRedirect()::RegistrationContext" : 1 , "testSimplePerformBlockingInteraction()::InteractionParams" : 1 , "testSimplePerformBlockingInteraction()::NamedString" : 2 , "testSimplePerformBlockingInteraction()::PortletContext" : 1 , "testSimplePerformBlockingInteraction()::RegistrationContext" : 1 , "testStateSaveOnConsumer()::InteractionParams" : 1 , "testStateSaveOnConsumer()::PortletContext" : 1 , "testStateSaveOnConsumer()::PortletPreferences" : 1 , "testStateSaveOnConsumer()::RegistrationContext" : 1}},{ "className" : "org::exoplatform::services::wsrp::producer::impl::helpers::WSRPHttpServletRequest" , "selectors" : { "WSRPHttpServletRequest(???)" : 3 , "setParameter(String,String)" : 1}},{ "className" : "org::exoplatform::services::organization::hibernate::UserQueryHandler" , "selectors" : { "addUserEventListener(UserEventListener)" : 1 , "createUser(User)" : 1 , "createUserEntry(???)" : 1 , "findUserByName(???)" : 2 , "findUserByName(String)" : 1 , "findUsers(Query)" : 1 , "findUsersByGroup(String)" : 1 , "getUserEventListeners()" : 1 , "getUserPageList(int)" : 1 , "removeUser(String)" : 1 , "removeUserEntry(???)" : 1 , "saveUser(User)" : 1}},{ "className" : "org::exoplatform::portlet::faces::XHTMLRendererConfiguration" , "selectors" : { "confiure()" : 1}},{ "className" : "org::exoplatform::portal::faces::component::UIMobilePage" , "selectors" : { "getRendererType()" : 1}},{ "className" : "org::exoplatform::portlets::backup::component::UIExportData" , "selectors" : { "getImportersExporters()" : 1 , "hasAdminRole()" : 1}},{ "className" : "org::exoplatform::services::communication::forum::Forum" , "selectors" : { "getCategoryId()" : 1 , "getCreateTopicRole()" : 2 , "getDescription()" : 3 , "getForumName()" : 8 , "getForumOrder()" : 1 , "getId()" : 20 , "getLastPostBy()" : 1 , "getLastPostDate()" : 1 , "getModerators()" : 1 , "getModifiedBy()" : 1 , "getModifiedDate()" : 1 , "getPostCount()" : 5 , "getReplyTopicRole()" : 2 , "getTopicCount()" : 5 , "getViewForumRole()" : 3 , "isModerator(String)" : 1 , "setCreateTopicRole(String)" : 1 , "setDescription(String)" : 2 , "setForumName(String)" : 2 , "setForumOrder(int)" : 1 , "setModerators(String)" : 1 , "setReplyTopicRole(String)" : 1 , "setViewForumRole(String)" : 1}},{ "className" : "org::exoplatform::container::jmx::MX4JComponentAdapter" , "selectors" : { "MX4JComponentAdapter(Object,Class)" : 1}},{ "className" : "com::capeclear::www::GlobalWeather_xsd::Temperature" , "selectors" : { "<Initializer>()::org" : 5 , "equals(Object)" : 2 , "getAmbient()" : 3 , "getDewpoint()" : 2 , "getRelative_humidity()" : 2 , "getString()" : 4 , "hashCode()" : 2}},{ "className" : "org::exoplatform::portlets::content::MimeTypeManager::MimeType" , "selectors" : { "MimeType(String,String,String)" : 1 , "getIcon()" : 2 , "getMimeType()" : 3}},{ "className" : "org::exoplatform::portlets::jmx::renderer::html::OperationRenderer" , "selectors" : { "getScript()" : 1}},{ "className" : "org::exoplatform::services::wsrp::test::TestGetMarkup" , "selectors" : { "testGetMarkupForSeveralModes()::PortletContext" : 1 , "testGetMarkupForSeveralModes()::RegistrationContext" : 1 , "testGetMarkupForSeveralWindowStates()::PortletContext" : 1 , "testGetMarkupForSeveralWindowStates()::RegistrationContext" : 1 , "testGetMarkupOfAClonedPortlet()::ClonePortletRequest" : 1 , "testGetMarkupOfAClonedPortlet()::PortletContext" : 1 , "testGetMarkupOfAClonedPortlet()::Property" : 1 , "testGetMarkupOfAClonedPortlet()::PropertyList" : 1 , "testGetMarkupOfAClonedPortlet()::SetPortletPropertiesRequest" : 1 , "testGetMarkupWithRewrittenURLInIt()::PortletContext" : 1 , "testGetMarkupWithRewrittenURLInIt()::RegistrationContext" : 1}},{ "className" : "org::exoplatform::services::communication::sms::util::ClientHttpSocket" , "selectors" : { "ClientHttpSocket(String,int,String,String)" : 1 , "sendMessage(String)" : 1 , "sendMessage(String)::Header" : 1 , "sendMessage(String)::HttpClient" : 1 , "sendMessage(String)::NameValuePair" : 2 , "sendMessage(String)::PostMethod" : 1}},{ "className" : "org::exoplatform::portlets::indexing::component::UIListIndexer::IndexerPluginDataHandler" , "selectors" : { "IndexerPluginDataHandler()" : 1}},{ "className" : "org::exoplatform::services::config::impl::ConfigurationServiceImpl" , "selectors" : { "ConfigurationServiceImpl(ConfigurationManager,HibernateService)::XppDriver" : 1 , "loadDefaultConfig(Class)" : 1 , "saveServiceConfiguration(Class,Object)" : 1}},{ "className" : "org::exoplatform::faces::core::event::UniqueObjectExceptionHandler" , "selectors" : { "UniqueObjectExceptionHandler()" : 1}},{ "className" : "org::exoplatform::test::web::WebUnitSuite" , "selectors" : { "addWebUnit(WebUnit)" : 1 , "appendColumn(StringBuffer,String,int)" : 14 , "appendHtmlTextSummary(StringBuffer)" : 2 , "getStatus()" : 4 , "getTextSummary()" : 1 , "getWebUnits()" : 3 , "setStatus(int)" : 3}},{ "className" : "org::exoplatform::portlets::communication::message::component::UISelectAccount" , "selectors" : { "getSelectAccount()" : 1 , "getSibling(???)" : 1}},{ "className" : "org::exoplatform::container::client::MockClientInfo" , "selectors" : { "MockClientInfo()" : 1}},{ "className" : "java::lang::management::RuntimeMXBean" , "selectors" : { "getBootClassPath()" : 1 , "getClassPath()" : 1 , "getInputArguments()" : 2 , "getLibraryPath()" : 1 , "getManagementSpecVersion()" : 2 , "getName()" : 3 , "getSpecName()" : 2 , "getSpecVendor()" : 2 , "getSpecVersion()" : 2 , "getStartTime()" : 2 , "getSystemProperties()" : 1 , "getUptime()" : 3 , "getVmName()" : 2 , "getVmVendor()" : 2 , "getVmVersion()" : 3 , "isBootClassPathSupported()" : 1}},{ "className" : "org::exoplatform::portal::launcher::PortalContextListener::RestoreViewListener" , "selectors" : { "RestoreViewListener()" : 1}},{ "className" : "org::exoplatform::services::task::test::TestTaskService::MockTask" , "selectors" : { "MockTask(String)" : 2}},{ "className" : "org::exoplatform::services::wsrp::consumer::URLTemplateComposer" , "selectors" : { "createBlockingActionTemplate(String)" : 1 , "createDefaultTemplate(String)" : 1 , "createRenderTemplate(String)" : 1 , "createResourceTemplate(String)" : 1 , "createSecureBlockingActionTemplate(String)" : 1 , "createSecureDefaultTemplate(String)" : 1 , "createSecureRenderTemplate(String)" : 1 , "createSecureResourceTemplate(String)" : 1 , "getNamespacePrefix()" : 1 , "setHost(String)" : 1 , "setPort(int)" : 1}},{ "className" : "org::exoplatform::portlets::user::component::UIUserProfileSummary" , "selectors" : { "getUserInfoMap()" : 1 , "setUserProfile(String)" : 1 , "showBackButton()" : 1}},{ "className" : "org::exoplatform::portlets::jmx::renderer::html::JMXPortletRenderer" , "selectors" : { "encodeChildren(FacesContext,UIComponent)::UIComponent" : 1}},{ "className" : "com::capeclear::www::GlobalWeather_xsd::VisibilityQualifier" , "selectors" : { "VisibilityQualifier(String)" : 3 , "equals(Object)" : 1 , "fromValue(String)" : 2 , "hashCode()" : 1 , "toString()" : 1}},{ "className" : "org::exoplatform::services::portletcontainer::impl::portletAPIImp::pool::PortletObjectsWrapper" , "selectors" : { "PortletObjectsWrapper()" : 1 , "getActionRequest(???)" : 2 , "getActionResponse(???)" : 2 , "getCustomRequestWrapper()" : 2 , "getCustomResponseWrapper()" : 2 , "getPortletSession(???)" : 1 , "getRenderRequest(???)" : 2 , "getRenderResponse(???)" : 3 , "getSharedSessionWrapper()" : 2 , "setActionRequest(???)" : 1 , "setActionResponse(???)" : 1 , "setCustomRequestWrapper(CustomRequestWrapper)" : 1 , "setCustomResponseWrapper(CustomResponseWrapper)" : 1 , "setPortletSession(???)" : 1 , "setRenderRequest(???)" : 1 , "setRenderResponse(???)" : 1 , "setSharedSessionWrapper(SharedSessionWrapper)" : 1}},{ "className" : "org::exoplatform::services::jcr::impl::core::query::QueryManagerImpl" , "selectors" : { "QueryManagerImpl()" : 1 , "getInstance()" : 1 , "init(WorkspaceImpl)" : 1}},{ "className" : "org::exoplatform::faces::core::component::model::Cell" , "selectors" : { "Cell(Date)" : 2 , "Cell(String)" : 79 , "Cell(int)" : 2 , "addAlign(String)" : 49 , "addAttribute(String,String)" : 8 , "addClazz(String)" : 9 , "addColspan(String)" : 97 , "addHeight(String)" : 5 , "addStyle(String)" : 7 , "addValign(String)" : 1 , "addWidth(String)" : 10 , "render(???)" : 2 , "setValue(String)" : 26}},{ "className" : "org::exoplatform::services::portal::log::Query" , "selectors" : { "Query()" : 3 , "getClientType()" : 1 , "getError()" : 1 , "getFromDate()" : 1 , "getIPAddress()" : 1 , "getRemoteUser()" : 1 , "getSessionOwner()" : 1 , "getToDate()" : 1 , "setClientType(String)" : 2 , "setError(int)" : 1 , "setFromDate(Date)" : 1 , "setIPAddress(String)" : 2 , "setRemoteUser(String)" : 2 , "setSessionOwner(String)" : 2 , "setToDate(Date)" : 1}},{ "className" : "org::exoplatform::services::organization::ldap::UserProfileHandler" , "selectors" : { "addUserProfileEventListener(UserProfileEventListener)" : 1 , "findUserProfileByName(String)" : 1 , "findUserProfiles()" : 1 , "removeUserProfile(String)" : 1 , "removeUserProfileEntry(???)" : 1 , "saveUserProfile(UserProfile)" : 1}},{ "className" : "org::exoplatform::services::wsrp::consumer::adapters::PortletWindowSessionAdapter" , "selectors" : { "PortletWindowSessionAdapter()" : 1 , "setPortletSession(PortletSession)" : 1 , "setWindowID(String)" : 1}},{ "className" : "org::exoplatform::test::web::WebLoadRunner" , "selectors" : { "createGroovyObject(String)" : 1 , "createGroovyObject(String)::GroovyClassLoader" : 1 , "isRunning()" : 2 , "run(ExoWebClient)" : 1}},{ "className" : "org::exoplatform::portlets::content::explorer::component::UIExplorer" , "selectors" : { "broacastOnModify(NodeDescriptor)" : 1 , "broadcastOnAddChild(NodeDescriptor)" : 3 , "broadcastOnChange(NodeDescriptor)" : 1 , "broadcastOnRemove(NodeDescriptor)" : 1 , "changeNode(String)" : 1 , "getParentUri(String)" : 1 , "getSelectNode()" : 11 , "setSelectNode(NodeDescriptor)" : 2}},{ "className" : "org::exoplatform::xml::object::XMLEntry" , "selectors" : { "XMLEntry(Object,Object)" : 1 , "getKey()" : 3 , "getValue()" : 1}},{ "className" : "org::exoplatform::faces::core::renderer::html::PyramidTabBarRenderer" , "selectors" : { "PyramidTabBarRenderer()" : 1}},{ "className" : "org::exoplatform::test::web::unit::NewSessionUnit" , "selectors" : { "execute(WebResponse,WebTable,ExoWebClient)::GetMethodWebRequest" : 1 , "execute(WebResponse,WebTable,ExoWebClient)::WebConversation" : 1}},{ "className" : "org::exoplatform::services::jcr::impl::core::nodetype::nt::PropertyDefNT" , "selectors" : { "PropertyDefNT()" : 1}},{ "className" : "org::exoplatform::services::portal::log::SessionLogData" , "selectors" : { "getActionHistory()" : 1 , "setActionHistory(List)" : 2}},{ "className" : "org::exoplatform::services::wsrp::producer::PortletManagementOperationsInterface" , "selectors" : { "clonePortlet(???)" : 2 , "destroyPortlets(???)" : 1 , "getPortletDescription(???)" : 1 , "getPortletProperties(???)" : 1 , "getPortletPropertyDescription(???)" : 1 , "setPortletProperties(???)" : 1}},{ "className" : "org::exoplatform::services::xml::transform::html::HTMLTransformer" , "selectors" : { "getOutputProperties()" : 2 , "setOutputProperties(Properties)" : 1}},{ "className" : "org::exoplatform::services::communication::message::impl::MessageHeaderImpl" , "selectors" : { "getFlags()" : 2 , "getFolderId()" : 4 , "getFrom()" : 3 , "getId()" : 4 , "getMailMessageId()" : 1 , "getReceivedDate()" : 2 , "getSender()" : 1 , "getSubject()" : 2 , "hasFlag(String)" : 1 , "setFlags(String)" : 1 , "setFolderId(String)" : 3 , "setFrom(String)" : 1 , "setId(String)" : 1 , "setMailMessageId(String)" : 1 , "setReceivedDate(Date)" : 1 , "setSender(String)" : 1 , "setSubject(String)" : 1}},{ "className" : "org::exoplatform::container::monitor::RequestMonitorData" , "selectors" : { "RequestMonitorData(long,long)" : 1 , "averageExecutionTime()" : 1 , "getRequestCounter()" : 3 , "logRequest(long)" : 1 , "maxExecutionTime()" : 4 , "maxRange()" : 1 , "minExecutionTime()" : 4 , "minRange()" : 1 , "sumExecutionTime()" : 1}},{ "className" : "org::exoplatform::services::cache::impl::SimpleCacheService" , "selectors" : { "SimpleCacheService()" : 1}},{ "className" : "org::exoplatform::faces::user::renderer::html::LanguageSelectorRenderer" , "selectors" : { "LanguageSelectorRenderer()" : 1}},{ "className" : "org::exoplatform::services::xml::querying::impl::xtas::resource::Resource" , "selectors" : { "close()" : 2 , "create(XMLWellFormedData)" : 1 , "drop()" : 1 , "init(String)" : 1 , "load()" : 1 , "save(XMLWellFormedData)" : 1 , "setContext(Object)" : 3}},{ "className" : "org::exoplatform::services::threadpool::test::TestSimpleThreadPoolService::SimpleRunnable" , "selectors" : { "SimpleRunnable()" : 1}},{ "className" : "org::exoplatform::commons::map::InitParameterMap" , "selectors" : { "InitParameterMap(???)" : 1}},{ "className" : "org::exoplatform::services::resources::impl::ResourceBundleServiceImpl" , "selectors" : { "getResourceBundle(String,Locale,ClassLoader)" : 2 , "getResourceBundle(String[],Locale,ClassLoader)" : 1 , "getResourceBundleFromDb(String,ResourceBundle)" : 4 , "isPersistedResource(String)" : 1 , "loadDefaultResourceBundles(String,ClassLoader)" : 1 , "lookForDefaultResources(String)" : 1 , "saveResourceBundle(ResourceBundleData)" : 1}},{ "className" : "org::exoplatform::services::portletcontainer::impl::PortletApplicationProxy" , "selectors" : { "PortletApplicationProxy(PortletApplicationsHolder,PortletMonitor,LogService)::DefaultPicoContainer" : 1 , "destroy(String)" : 6 , "destroy(String)::javax" : 1 , "getPortlet(???)" : 16 , "getPortletClassName(String)" : 1 , "getPortletConfig(???)" : 1 , "getPortletNames()" : 1 , "getValidator(???)" : 2 , "getValidatorClassNames()" : 1 , "init(PortletMonitor,String,PortletContext)::PortletException" : 1 , "init(PortletMonitor,String,PortletContext)::UnavailableException" : 1 , "init(PortletMonitor,String,PortletContext)::javax" : 1 , "initMonitor(String[])" : 1 , "load()" : 1 , "loadAndRegisterClasses(String[])" : 1 , "loadAndRegisterClassesByKey(String[])" : 1 , "loadAndRegisterPortletClasses()" : 1 , "loadAndRegisterValidatorClasses()" : 1 , "registerPortlet(String)" : 2 , "registerPortletToMonitor(String)" : 2 , "releasePortlet(String)" : 2 , "setApplicationName(String)" : 1}},{ "className" : "org::exoplatform::services::communication::message::impl::MessageImpl" , "selectors" : { "MessageImpl()" : 4 , "addAttachment(Attachment)" : 1 , "cloneMessage()" : 1 , "getAttachment()" : 1 , "getBCC()" : 1 , "getBody()" : 2 , "getCC()" : 1 , "getTo()" : 2 , "setBCC(String)" : 1 , "setBody(String)" : 1 , "setCC(String)" : 1 , "setTo(String)" : 1}},{ "className" : "org::exoplatform::portlets::portletregistery::component::UIPortletCategory::DeleteActionListener" , "selectors" : { "DeleteActionListener()" : 1}},{ "className" : "org::exoplatform::services::portal::log::PortalLogService" , "selectors" : { "getSessionLogData(String)" : 1 , "getSessionLogDatas(Query)" : 1 , "saveSessionLogData(SessionLogData)" : 1}},{ "className" : "org::exoplatform::faces::core::component::UIFatalError" , "selectors" : { "UIFatalError(Throwable)" : 1 , "getStackTrace(Throwable)" : 1}},{ "className" : "org::exoplatform::services::grammar::wiki::impl::Token" , "selectors" : { "Token(int,int)" : 5 , "clone(Token)" : 4 , "getTokenImage(ParsingContext)" : 1 , "getTokenType()" : 1 , "hasAncestor(String)" : 5}},{ "className" : "org::exoplatform::faces::core::component::UIPageListIterator" , "selectors" : { "UIPageListIterator(PageListDataHandler)" : 10 , "encodeBegin(???)" : 3 , "getAvailable()" : 1 , "getAvailablePage()" : 1 , "getCurrentPage()" : 1 , "getFrom()" : 1 , "getObjectInCurrentPage()" : 1 , "getPageListDataHandler()" : 9 , "getTo()" : 1 , "setPageList(PageList)" : 18}},{ "className" : "org::exoplatform::services::wsrp::consumer::WSRPBaseRequest" , "selectors" : { "getMode()" : 1 , "getNavigationalState()" : 1 , "getPortletInstanceKey()" : 1 , "getSessionID()" : 1 , "getWindowState()" : 1}},{ "className" : "org::exoplatform::portlet::faces::component::UIPreferencesForm" , "selectors" : { "encodeBegin(???)" : 1 , "encodeChildren(???)" : 1 , "encodeEnd(???)" : 1}},{ "className" : "org::exoplatform::services::organization::hibernate::UserProfileQueryHandler" , "selectors" : { "addUserProfileEventListener(UserProfileEventListener)" : 1 , "createUserProfileEntry(???)" : 1 , "findUserProfileByName(???)" : 1 , "findUserProfileByName(String)" : 1 , "findUserProfiles()" : 1 , "removeUserProfile(String)" : 1 , "removeUserProfileEntry(???)" : 2 , "saveUserProfile(UserProfile)" : 1}},{ "className" : "org::exoplatform::portlets::jmx::renderer::html::ViewMBeanRenderer" , "selectors" : { "getDependencies(MBeanInfo)" : 1}},{ "className" : "org::exoplatform::faces::core::component::UIExoComponent" , "selectors" : { "canDecodeInvalidState()" : 1 , "decorate(???)" : 1 , "encodeBegin(???)" : 2 , "encodeChildren(???)" : 2 , "encodeEnd(???)" : 2 , "findComponentById(String)" : 1 , "getAncestorOfType(???)" : 2 , "getBaseURL()" : 3 , "getChildren()" : 90 , "getClazz()" : 2 , "getId()" : 58 , "getParent(???)" : 3 , "getTemplate()" : 1 , "isRendered()" : 11 , "processDecodes(???)" : 2 , "registerActionListener(UIExoComponent)" : 2 , "registerComponentObserver(UIExoComponent)" : 2 , "setId(String)" : 60 , "setRendered(boolean)" : 171 , "setRenderedComponent(String)" : 1 , "setRendererType(???)" : 1}},{ "className" : "org::exoplatform::services::backup::XMLObjectConverter" , "selectors" : { "getDataVersion()" : 1 , "traverse(XMLCollection)" : 3 , "traverse(XMLObject)" : 10 , "update(XMLObject)" : 1}},{ "className" : "javax::security::auth::callback::NameCallback" , "selectors" : { "NameCallback(String)" : 4 , "NameCallback(String,String)" : 1 , "getDefaultName()" : 1 , "getName()" : 6 , "setName(String)" : 6}},{ "className" : "org::exoplatform::services::threadpool::impl::ThreadPoolServiceImpl::WaitWhenBlocked" , "selectors" : { "WaitWhenBlocked()" : 1}},{ "className" : "org::exoplatform::portlets::wsrp::InitCookieImpl" , "selectors" : { "InitCookieImpl(String)" : 2 , "InitCookieImpl(String)::WSRPServiceLocator" : 1 , "getMarkupInterfaceURL()" : 1}},{ "className" : "org::exoplatform::services::communication::forum::hibernate::TopicImpl" , "selectors" : { "TopicImpl()" : 1 , "addPostCount(int)" : 2 , "getForumId()" : 3 , "getId()" : 3 , "setCreatedDate(Date)" : 1 , "setForumId(String)" : 1 , "setId(String)" : 1 , "setLastPostBy(String)" : 2 , "setLastPostDate(Date)" : 2 , "setModifiedDate(Date)" : 2}},{ "className" : "org::exoplatform::services::wsrp::producer::impl::helpers::ConsumerContext" , "selectors" : { "ConsumerContext(???)" : 1 , "addPortletHandle(String)" : 1 , "getRegistationData(???)" : 1 , "isPortletHandleRegistered(String)" : 1 , "removePortletHandle(String)" : 1}},{ "className" : "org::exoplatform::services::organization::hibernate::GroupQueryHandler" , "selectors" : { "addChild(Group,Group)" : 1 , "addGroupEventListener(GroupEventListener)" : 1 , "createGroup(Group)" : 1 , "findGroupById(String)" : 1 , "findGroupByMembership(String,String)" : 1 , "findGroups(Group)" : 1 , "findGroupsOfUser(String)" : 1 , "removeGroup(Group)" : 1 , "removeGroupEntry(???)" : 1 , "saveGroup(Group)" : 1}},{ "className" : "org::exoplatform::portlets::portletregistery::component::UIPortletInfo::AddRoleActionListener" , "selectors" : { "AddRoleActionListener()" : 1}},{ "className" : "org::exoplatform::services::portal::log::impl::SessionLogDataDescriptionImpl" , "selectors" : { "getId()" : 1 , "setId(String)" : 1}},{ "className" : "com::capeclear::www::GlobalWeather_xsd::Visibility" , "selectors" : { "<Initializer>()::org" : 4 , "equals(Object)" : 1 , "getDistance()" : 2 , "getQualifier()" : 4 , "getString()" : 4 , "hashCode()" : 1}},{ "className" : "org::exoplatform::portlets::resources::component::UIListResources" , "selectors" : { "getParent(???)" : 1 , "update()" : 2 , "update(String,String)" : 1}},{ "className" : "org::exoplatform::portlets::user::component::UIViewUserInGroup" , "selectors" : { "update()" : 1}},{ "className" : "org::exoplatform::portlets::communication::forum::component::UIForumSearcher" , "selectors" : { "UIForumSearcher(ForumService,IndexingService)" : 1}},{ "className" : "org::exoplatform::commons::xhtml::Parameter" , "selectors" : { "Parameter(String,String)" : 1}},{ "className" : "org::exoplatform::portlets::communication::forum::component::UIPosts" , "selectors" : { "UIPosts(WikiEngineService,OrganizationService,ForumService,ForumACL)" : 1 , "getAncestorOfType(???)" : 6 , "getForumName()" : 1 , "getOrganizationService()" : 1 , "getRemoteUser()" : 1 , "getSibling(???)" : 5 , "getUIPageIterator()" : 2 , "getWikiEngineService()" : 1 , "hasModeratorRole()" : 1 , "hasReplyTopicRole()" : 3 , "setUIPostsData(Forum,Topic)" : 2}},{ "className" : "org::exoplatform::services::portal::log::impl::SessionLogPersister::UpdateUserLastLoginTask" , "selectors" : { "UpdateUserLastLoginTask(OrganizationService,String)" : 1}},{ "className" : "org::exoplatform::services::jcr::impl::core::nodetype::nt::ChildNodeDef" , "selectors" : { "ChildNodeDef()" : 1}},{ "className" : "org::exoplatform::services::wsrp::consumer::adapters::InteractionRequestAdapter" , "selectors" : { "InteractionRequestAdapter()" : 1 , "setFormParameters(???)" : 1}},{ "className" : "org::exoplatform::faces::core::component::UITextArea" , "selectors" : { "UITextArea(String,String)" : 14 , "getCols()" : 2 , "getRows()" : 2 , "setCols(String)" : 1 , "setRows(String)" : 1}},{ "className" : "org::exoplatform::services::portal::skin::converter::DecoratorConverter" , "selectors" : { "DecoratorConverter()" : 1}},{ "className" : "org::exoplatform::services::cache::impl::MockExoCache" , "selectors" : { "MockExoCache()" : 1}},{ "className" : "org::exoplatform::faces::core::component::model::PageListDataHandler" , "selectors" : { "PageListDataHandler()" : 3 , "getAvailable()" : 2 , "getAvailablePage()" : 1 , "getCurrentPage()" : 1 , "getFrom()" : 2 , "getObjectInCurrentPage()" : 1 , "getObjectInPage(int)" : 2 , "getTo()" : 1 , "selectPage(int)" : 1 , "setPageList(PageList)" : 2}},{ "className" : "org::exoplatform::services::portletcontainer::impl::config::XMLSerializer" , "selectors" : { "toXML(ExoXMLSerializer,Cache)" : 1 , "toXML(ExoXMLSerializer,CustomMode)" : 1 , "toXML(ExoXMLSerializer,CustomWindowState)" : 1 , "toXML(ExoXMLSerializer,Description)" : 2 , "toXML(ExoXMLSerializer,Global)" : 1 , "toXML(ExoXMLSerializer,ObjectPool)" : 1 , "toXML(ExoXMLSerializer,PortletContainer)" : 1 , "toXML(ExoXMLSerializer,Properties)" : 1 , "toXML(PortletContainer)" : 1}},{ "className" : "org::exoplatform::portlets::weather::component::UIWeatherViewPortlet::SelectStationListener" , "selectors" : { "SelectStationListener()" : 1}},{ "className" : "org::exoplatform::portlets::user::component::UIUserProfile" , "selectors" : { "UIUserProfile()" : 1}},{ "className" : "org::exoplatform::services::portletcontainer::pci::model::CustomPortletMode" , "selectors" : { "CustomPortletMode()" : 1 , "addDescription(Description)" : 1 , "setPortletMode(String)" : 1}},{ "className" : "javax::xml::transform::Templates" , "selectors" : { "getOutputProperties()" : 5 , "newTransformer()" : 29}},{ "className" : "org::exoplatform::services::portletcontainer::monitor::PortletRuntimeData" , "selectors" : { "getCacheExpirationPeriod()" : 1 , "getCachedData(String,boolean)" : 3 , "getInitializationTime()" : 2 , "getLastAccessTime()" : 1 , "getLastFailureAccessTime()" : 1 , "getLastInitFailureAccessTime()" : 2 , "getPortletAppName()" : 2 , "getPortletName()" : 4 , "getPortletRequestMonitorData()" : 1 , "getUnavailabilityPeriod()" : 1 , "isDataCached(String,boolean)" : 1 , "isInitialized()" : 2 , "setLastInitFailureAccessTime(long)" : 1}},{ "className" : "org::exoplatform::portal::faces::component::UIPageBrowser" , "selectors" : { "getAncestorOfType(???)" : 1 , "getPortalConfigService()" : 3 , "goBack()" : 1 , "setReturnModule(String)" : 2 , "setSelectNodeReferencePage(String)" : 1}},{ "className" : "org::exoplatform::portlets::content::explorer::component::UIContentEditor" , "selectors" : { "getContent()" : 1 , "getContentType()" : 1 , "setContent(String)" : 1 , "setContentType(String)" : 1}},{ "className" : "org::exoplatform::services::wsrp::producer::impl::MarkupOperationsInterfaceImpl" , "selectors" : { "getMarkup(RegistrationContext,PortletContext,RuntimeContext,UserContext,MarkupParams)::MarkupContext" : 2 , "getMarkup(RegistrationContext,PortletContext,RuntimeContext,UserContext,MarkupParams)::MarkupResponse" : 2 , "getMarkup(RegistrationContext,PortletContext,RuntimeContext,UserContext,MarkupParams)::SessionContext" : 1 , "getMimeType(String[],PortletData)" : 1 , "initCookie(RegistrationContext)::ReturnAny" : 1 , "performBlockingInteraction(RegistrationContext,PortletContext,RuntimeContext,UserContext,MarkupParams,InteractionParams)::BlockingInteractionResponse" : 1 , "performBlockingInteraction(RegistrationContext,PortletContext,RuntimeContext,UserContext,MarkupParams,InteractionParams)::SessionContext" : 1 , "performBlockingInteraction(RegistrationContext,PortletContext,RuntimeContext,UserContext,MarkupParams,InteractionParams)::UpdateResponse" : 1 , "processMode(String)::PortletMode" : 1 , "processNavigationalState(String)" : 1 , "processWindowState(String)::WindowState" : 1 , "releaseSessions(RegistrationContext,String)::ReturnAny" : 1 , "resolveSession(String,String)" : 2}},{ "className" : "org::exoplatform::services::jcr::impl::core::nodetype::nt::VersionHistory" , "selectors" : { "VersionHistory()" : 1}},{ "className" : "org::exoplatform::services::workflow::impl::WorkflowExecutionServiceImpl" , "selectors" : { "WorkflowExecutionServiceImpl(???)" : 1}},{ "className" : "org::exoplatform::services::communication::message::impl::UserEventAccountListener" , "selectors" : { "createMailAccount(User,AccountListenerConfig)" : 1 , "createStandaloneAccount(User,AccountListenerConfig)" : 1}},{ "className" : "org::quartz::impl::jdbcjobstore::Semaphore" , "selectors" : { "obtainLock(Connection,String)" : 5 , "releaseLock(Connection,String)" : 1 , "requiresConnection()" : 2}},{ "className" : "org::quartz::VersionTest" , "selectors" : { "assertNonNegativeInteger(String)" : 4}},{ "className" : "org::quartz::utils::Key" , "selectors" : { "Key(String,String)" : 23 , "getGroup()" : 27 , "getName()" : 27}},{ "className" : "org::quartz::ee::jta::UserTransactionHelper::UserTransactionWithContext" , "selectors" : { "UserTransactionWithContext()" : 1 , "closeContext()" : 4}},{ "className" : "org::quartz::impl::SchedulerDetailsSetter" , "selectors" : { "set(Object,String,String)" : 2 , "setDetails(Object,String,String)" : 6}},{ "className" : "org::quartz::core::SchedulingContext" , "selectors" : { "SchedulingContext()" : 7 , "SchedulingContext(String)" : 30 , "setInstanceId(String)" : 8}},{ "className" : "org::quartz::SchedulerFactory" , "selectors" : { "getScheduler()" : 17}},{ "className" : "org::quartz::impl::jdbcjobstore::JobStoreSupport::VoidTransactionCallback" , "selectors" : { "execute(Connection)" : 2}},{ "className" : "org::quartz::examples::example13::ClusterExample" , "selectors" : { "ClusterExample()" : 1 , "cleanUp(Scheduler)" : 1 , "run(boolean,boolean)" : 1}},{ "className" : "org::quartz::core::jmx::TriggerSupport" , "selectors" : { "toCompositeData(Trigger)" : 3 , "toTabularData(Trigger[])" : 2}},{ "className" : "javax::management::openmbean::TabularData" , "selectors" : { "put(CompositeData)" : 1 , "putAll(CompositeData[])" : 8 , "size()" : 4 , "values()" : 7}},{ "className" : "org::quartz::simpl::SimpleThreadPool::WorkerThread" , "selectors" : { "WorkerThread(SimpleThreadPool,ThreadGroup,String,int,boolean)" : 1 , "WorkerThread(SimpleThreadPool,ThreadGroup,String,int,boolean,Runnable)" : 2 , "run(Runnable)" : 1 , "shutdown()" : 1}},{ "className" : "javax::xml::xpath::XPathFactory" , "selectors" : { "newInstance()" : 10 , "newInstance(String)" : 1 , "newXPath()" : 12}},{ "className" : "org::quartz::impl::jdbcjobstore::SimpleSemaphore" , "selectors" : { "SimpleSemaphore()" : 1 , "getThreadLocks()" : 3 , "isLockOwner(Connection,String)" : 2}},{ "className" : "org::quartz::impl::QuartzServer" , "selectors" : { "QuartzServer()" : 1 , "serve(SchedulerFactory,boolean)" : 2}},{ "className" : "org::quartz::jobs::ee::jms::JmsMessageFactory" , "selectors" : { "createMessage(???)" : 3}},{ "className" : "java::net::URLDecoder" , "selectors" : { "decode(String)" : 26 , "decode(String,String)" : 157}},{ "className" : "org::quartz::ObjectAlreadyExistsException" , "selectors" : { "ObjectAlreadyExistsException(JobDetail)" : 3 , "ObjectAlreadyExistsException(String)" : 2 , "ObjectAlreadyExistsException(Trigger)" : 4}},{ "className" : "org::quartz::core::SchedulerSignalerImpl" , "selectors" : { "SchedulerSignalerImpl(QuartzScheduler,QuartzSchedulerThread)" : 1}},{ "className" : "org::quartz::utils::DirtyFlagMap::DirtyFlagCollection" , "selectors" : { "DirtyFlagCollection(Collection)" : 2 , "getWrappedCollection()" : 1 , "size()" : 2}},{ "className" : "org::quartz::examples::example12::RemoteServerExample" , "selectors" : { "RemoteServerExample()" : 1 , "run()" : 1}},{ "className" : "org::quartz::core::SampledStatisticsImpl" , "selectors" : { "SampledStatisticsImpl(QuartzScheduler)" : 1 , "createSampledCounter(CounterConfig)" : 3}},{ "className" : "org::quartz::JobPersistenceException" , "selectors" : { "JobPersistenceException(String)" : 17 , "JobPersistenceException(String,Throwable)" : 62 , "JobPersistenceException(String,Throwable,int)" : 4}},{ "className" : "org::quartz::utils::DBConnectionManager" , "selectors" : { "DBConnectionManager()" : 1 , "addConnectionProvider(String,ConnectionProvider)" : 3 , "getConnection(String)" : 2 , "getInstance()" : 7 , "shutdown(String)" : 2}},{ "className" : "org::quartz::plugins::SchedulerPluginWithUserTransactionSupport" , "selectors" : { "getName()" : 5 , "getScheduler()" : 3 , "initialize(String,Scheduler)" : 1}},{ "className" : "org::quartz::ee::jmx::jboss::QuartzService" , "selectors" : { "rebind()" : 2 , "unbind(String)" : 2}},{ "className" : "org::quartz::JobDetail" , "selectors" : { "JobDetail()" : 5 , "JobDetail(String,String,Class)" : 47 , "JobDetail(String,String,Class,boolean,boolean,boolean)" : 1 , "addJobListener(String)" : 8 , "clone()" : 3 , "getDescription()" : 7 , "getFullName()" : 84 , "getGroup()" : 61 , "getJobClass()" : 12 , "getJobDataMap()" : 36 , "getJobListenerNames()" : 16 , "getKey()" : 1 , "getName()" : 63 , "isDurable()" : 14 , "isStateful()" : 13 , "isVolatile()" : 12 , "requestsRecovery()" : 9 , "setDescription(String)" : 3 , "setDurability(boolean)" : 8 , "setGroup(String)" : 5 , "setJobClass(Class)" : 5 , "setJobDataMap(JobDataMap)" : 4 , "setName(String)" : 5 , "setRequestsRecovery(boolean)" : 15 , "setVolatility(boolean)" : 4 , "validate()" : 1}},{ "className" : "java::text::ParseException" , "selectors" : { "ParseException(String,int)" : 263 , "getErrorOffset()" : 28 , "java" : 3}},{ "className" : "org::quartz::examples::example9::Job1Listener" , "selectors" : { "Job1Listener()" : 1}},{ "className" : "javax::management::MBeanNotificationInfo" , "selectors" : { "MBeanNotificationInfo(String[],String,String)" : 61 , "equals(Object)" : 10 , "getNotifTypes()" : 15 , "getNotifTypesString()" : 1 , "hashCode()" : 2 , "toString()" : 2}},{ "className" : "org::quartz::plugins::xml::XMLSchedulingDataProcessorPlugin" , "selectors" : { "buildJobTriggerName(String)" : 1 , "isFailOnFileNotFound()" : 1 , "processFile(JobFile)" : 2 , "processFile(String)" : 1}},{ "className" : "org::quartz::spi::SchedulerSignaler" , "selectors" : { "notifySchedulerListenersFinalized(Trigger)" : 2 , "notifyTriggerListenersMisfired(Trigger)" : 2 , "signalSchedulingChange(long)" : 8}},{ "className" : "org::quartz::ee::jta::UserTransactionHelper" , "selectors" : { "lookupUserTransaction(???)" : 2 , "returnUserTransaction(???)" : 3 , "setUserTxLocation(String)" : 1}},{ "className" : "org::quartz::ee::jmx::jboss::JBoss4RMIRemoteMBeanScheduler" , "selectors" : { "getContextProperties()" : 1}},{ "className" : "org::quartz::utils::counter::CounterImpl" , "selectors" : { "CounterImpl(long)" : 3 , "getAndSet(long)" : 1 , "getValue()" : 1}},{ "className" : "org::quartz::ValueSet" , "selectors" : { "ValueSet()" : 1}},{ "className" : "org::quartz::simpl::TriggerWrapper" , "selectors" : { "TriggerWrapper(Trigger)" : 1 , "getTrigger()" : 9 , "getTriggerNameKey(String,String)" : 7 , "getTriggerNameKey(Trigger)" : 4}},{ "className" : "org::quartz::SchedulerConfigException" , "selectors" : { "SchedulerConfigException(String)" : 9 , "SchedulerConfigException(String,Throwable)" : 11}},{ "className" : "org::quartz::impl::jdbcjobstore::oracle::weblogic::WebLogicOracleDelegate" , "selectors" : { "writeDataToBlob(ResultSet,int,byte[])::weblogic" : 1}},{ "className" : "javax::sql::XADataSource" , "selectors" : { "getXAConnection()" : 72 , "getXAConnection(String,String)" : 17}},{ "className" : "org::quartz::simpl::TriggerComparator" , "selectors" : { "TriggerComparator()" : 1}},{ "className" : "org::quartz::jobs::ee::jms::JmsJobException" , "selectors" : { "JmsJobException(String,Throwable)" : 3}},{ "className" : "org::quartz::ee::servlet::QuartzInitializerServlet" , "selectors" : { "init(ServletConfig)::ServletException" : 1}},{ "className" : "org::quartz::spi::ClassLoadHelper" , "selectors" : { "getClassLoader()" : 1 , "getResource(String)" : 4 , "getResourceAsStream(String)" : 4 , "initialize()" : 4 , "loadClass(String)" : 16}},{ "className" : "org::quartz::examples::example9::ListenerExample" , "selectors" : { "ListenerExample()" : 1 , "run()" : 1}},{ "className" : "org::quartz::utils::Pair" , "selectors" : { "Pair()" : 9 , "equals(Object)" : 4 , "getFirst()" : 4 , "getSecond()" : 4 , "setFirst(Object)" : 7 , "setSecond(Object)" : 8}},{ "className" : "org::quartz::utils::DirtyFlagMap::DirtyFlagMapEntrySet" , "selectors" : { "DirtyFlagMapEntrySet(Set)" : 1 , "iterator()" : 1 , "toArray(Object[])" : 1}},{ "className" : "org::quartz::core::SampledStatistics" , "selectors" : { "getJobsCompletedMostRecentSample()" : 1 , "getJobsExecutingMostRecentSample()" : 1 , "getJobsScheduledMostRecentSample()" : 1 , "shutdown()" : 1}},{ "className" : "org::quartz::utils::counter::sampled::SampledRateCounterConfig" , "selectors" : { "SampledRateCounterConfig(int,int,boolean)" : 1 , "SampledRateCounterConfig(int,int,boolean,long,long)" : 1}},{ "className" : "org::quartz::impl::jdbcjobstore::Util" , "selectors" : { "rtp(String,String)" : 4}},{ "className" : "org::quartz::jobs::NativeJob::StreamConsumer" , "selectors" : { "StreamConsumer(InputStream,String)" : 2}},{ "className" : "java::util::Collection" , "selectors" : { "add(E)" : 2405 , "addAll(Collection<? extends E>)" : 294 , "clear()" : 172 , "contains(???)" : 1 , "contains(Object)" : 1498 , "containsAll(Collection<?>)" : 64 , "equals(Object)" : 45 , "hashCode()" : 28 , "isEmpty()" : 607 , "iterator()" : 3491 , "iterator(???)" : 3 , "remove(Object)" : 218 , "removeAll(Collection<?>)" : 65 , "retainAll(Collection<?>)" : 48 , "size()" : 2387 , "size(???)" : 1 , "toArray()" : 220 , "toArray(T[])" : 317}},{ "className" : "org::quartz::impl::RemoteScheduler" , "selectors" : { "RemoteScheduler(SchedulingContext,String,String,int)" : 2 , "getRemoteScheduler()" : 45 , "getSchedulerInstanceId()" : 1 , "getSchedulerName()" : 3 , "invalidateHandleCreateException(String,Exception)" : 45 , "isInStandbyMode()" : 1 , "isShutdown()" : 1 , "isStarted()" : 1 , "triggerJob(String,String,JobDataMap)" : 1 , "triggerJobWithVolatileTrigger(String,String,JobDataMap)" : 1}},{ "className" : "org::quartz::examples::example5::MisfireExample" , "selectors" : { "MisfireExample()" : 1 , "run()" : 1}},{ "className" : "org::quartz::impl::jdbcjobstore::JobStoreSupport::ClusterManager" , "selectors" : { "ClusterManager()" : 1 , "initialize()" : 1 , "manage()" : 2 , "shutdown()" : 1}},{ "className" : "org::quartz::core::jmx::JobDetailSupport" , "selectors" : { "newJobDetail(CompositeData)" : 1 , "toCompositeData(JobDetail)" : 3 , "toTabularData(JobDetail[])" : 1}},{ "className" : "org::quartz::utils::JNDIConnectionProvider" , "selectors" : { "JNDIConnectionProvider(String,Properties,boolean)" : 1 , "init()" : 2 , "isAlwaysLookup()" : 3}},{ "className" : "org::quartz::simpl::JobWrapper" , "selectors" : { "JobWrapper(JobDetail)" : 1 , "getJobNameKey(JobDetail)" : 4 , "getJobNameKey(String,String)" : 8}},{ "className" : "org::quartz::TriggerListener" , "selectors" : { "getName()" : 10 , "triggerComplete(Trigger,JobExecutionContext,int)" : 2 , "triggerFired(Trigger,JobExecutionContext)" : 2 , "triggerMisfired(Trigger)" : 2 , "vetoJobExecution(Trigger,JobExecutionContext)" : 2}},{ "className" : "org::quartz::SchedulerContext" , "selectors" : { "SchedulerContext()" : 2}},{ "className" : "org::quartz::impl::calendar::HolidayCalendar" , "selectors" : { "isTimeIncluded(long)" : 1}},{ "className" : "org::quartz::jobs::ee::ejb::EJBInvokerJob" , "selectors" : { "getInitialContext(JobDataMap)" : 1}},{ "className" : "org::quartz::impl::jdbcjobstore::JobStoreSupport::MisfireHandler" , "selectors" : { "MisfireHandler()" : 1 , "initialize()" : 1 , "manage()" : 1 , "shutdown()" : 1}},{ "className" : "org::quartz::plugins::history::LoggingTriggerHistoryPlugin" , "selectors" : { "getTriggerCompleteMessage()" : 1 , "getTriggerFiredMessage()" : 1 , "getTriggerMisfiredMessage()" : 1}},{ "className" : "org::quartz::impl::SchedulerDetailsSetterTest" , "selectors" : { "makeIncompleteThreadPool()" : 1 , "makeIncompleteThreadPool()::ClassWriter" : 1 , "makeIncompleteThreadPool()::anonymous(ClassLoader)" : 1}},{ "className" : "org::quartz::utils::counter::Counter" , "selectors" : { "increment()" : 3}},{ "className" : "org::quartz::impl::jdbcjobstore::JobStoreSupport::RecoverMisfiredJobsResult" , "selectors" : { "RecoverMisfiredJobsResult(boolean,int,long)" : 2 , "getEarliestNewTime()" : 1 , "getProcessedMisfiredTriggerCount()" : 1 , "hasMoreMisfiredTriggers()" : 1}},{ "className" : "org::quartz::impl::calendar::WeeklyCalendar" , "selectors" : { "WeeklyCalendar(Calendar,TimeZone)" : 2 , "areAllDaysExcluded()" : 3 , "isDayExcluded(int)" : 10}},{ "className" : "org::quartz::spi::ThreadPool" , "selectors" : { "blockForAvailableThreads()" : 1 , "getPoolSize()" : 1 , "initialize()" : 3 , "runInThread(Runnable)" : 1 , "setInstanceName(String)" : 1 , "shutdown(boolean)" : 4}},{ "className" : "org::quartz::jobs::FileScanJob" , "selectors" : { "getLastModifiedDate(String)" : 1}},{ "className" : "org::quartz::core::ErrorLogger" , "selectors" : { "ErrorLogger()" : 1}},{ "className" : "org::quartz::utils::ConnectionProvider" , "selectors" : { "getConnection()" : 1 , "shutdown()" : 1}},{ "className" : "org::quartz::simpl::PropertySettingJobFactoryTest::TestBean" , "selectors" : { "TestBean()" : 9 , "getBooleanValue()" : 2 , "getByteValue()" : 2 , "getCharValue()" : 2 , "getDoubleValue()" : 2 , "getFloatValue()" : 2 , "getIntValue()" : 2 , "getLongValue()" : 2 , "getMapValue()" : 2 , "getShortValue()" : 2 , "getStringValue()" : 1 , "setMapValue(Map)" : 1}},{ "className" : "org::quartz::utils::counter::sampled::SampledCounter" , "selectors" : { "getAndReset()" : 3 , "getMostRecentSample()" : 3 , "shutdown()" : 2}},{ "className" : "org::quartz::examples::example2::SimpleTriggerExample" , "selectors" : { "SimpleTriggerExample()" : 1 , "run()" : 1}},{ "className" : "org::quartz::ee::jta::JTAJobRunShell" , "selectors" : { "JTAJobRunShell(JobRunShellFactory,Scheduler,SchedulingContext)" : 1 , "cleanupUserTransaction()" : 4}},{ "className" : "org::quartz::impl::jdbcjobstore::DBSemaphore" , "selectors" : { "DBSemaphore(String,String,String)" : 3 , "executeSQL(Connection,String,String)" : 1 , "getSQL()" : 2 , "getTablePrefix()" : 4 , "getThreadLocks()" : 3 , "isLockOwner(Connection,String)" : 2 , "setExpandedSQL()" : 2 , "setSQL(String)" : 3}},{ "className" : "org::quartz::JobExecutionContext" , "selectors" : { "JobExecutionContext(Scheduler,TriggerFiredBundle,Job)" : 1 , "getCalendar()" : 1 , "getFireTime()" : 2 , "getJobDetail()" : 62 , "getJobInstance()" : 4 , "getJobRunTime()" : 1 , "getMergedJobDataMap()" : 9 , "getNextFireTime()" : 2 , "getPreviousFireTime()" : 2 , "getRefireCount()" : 8 , "getResult()" : 1 , "getScheduledFireTime()" : 2 , "getScheduler()" : 7 , "getTrigger()" : 24 , "incrementRefireCount()" : 1 , "isRecovering()" : 4 , "setJobRunTime(long)" : 1 , "setResult(Object)" : 4}},{ "className" : "org::quartz::impl::jdbcjobstore::StdJDBCDelegate" , "selectors" : { "StdJDBCDelegate(???)" : 1 , "canUseProperties()" : 11 , "closeResultSet(ResultSet)" : 59 , "closeStatement(Statement)" : 114 , "convertFromProperty(Properties)" : 1 , "convertToProperty(Map)" : 1 , "deleteJobListeners(Connection,String,String)" : 3 , "deleteTriggerListeners(Connection,String,String)" : 3 , "getBoolean(ResultSet,String)" : 11 , "getBoolean(ResultSet,int)" : 2 , "getJobDetailFromBlob(ResultSet,String)" : 1 , "getKeyOfNonSerializableValue(Map)" : 1 , "getMapFromProperties(ResultSet)" : 3 , "getObjectFromBlob(ResultSet,String)" : 6 , "insertJobListener(Connection,JobDetail,String)" : 6 , "insertTriggerListener(Connection,Trigger,String)" : 6 , "rtp(String)" : 132 , "selectTrigger(Connection,String,String)" : 2 , "selectTriggerJobDataMap(Connection,String,String)" : 1 , "serializeJobData(JobDataMap)" : 18 , "serializeObject(Object)" : 8 , "serializeProperties(JobDataMap)" : 1 , "setBoolean(PreparedStatement,int,boolean)" : 40 , "setBytes(PreparedStatement,int,ByteArrayOutputStream)" : 7}},{ "className" : "org::quartz::CronTrigger" , "selectors" : { "CronTrigger()" : 3 , "CronTrigger(String,String)" : 2 , "CronTrigger(String,String,String)" : 2 , "CronTrigger(String,String,String,String,Date,Date,String)" : 1 , "CronTrigger(String,String,String,String,Date,Date,String,TimeZone)" : 4 , "CronTrigger(String,String,String,String,String)" : 7 , "clone()" : 2 , "getCronExpression()" : 10 , "getEndTime()" : 9 , "getFireTimeAfter(Date)" : 11 , "getNextFireTime()" : 1 , "getStartTime()" : 6 , "getTimeAfter(Date)" : 1 , "getTimeBefore(Date)" : 1 , "getTimeZone()" : 2 , "hasAdditionalProperties()" : 8 , "mayFireAgain()" : 1 , "setCronExpression(CronExpression)" : 1 , "setCronExpression(String)" : 7 , "setEndTime(Date)" : 2 , "setNextFireTime(Date)" : 3 , "setPreviousFireTime(Date)" : 1 , "setStartTime(Date)" : 9 , "setTimeZone(TimeZone)" : 7 , "willFireOn(Calendar,boolean)" : 1}},{ "className" : "org::quartz::core::ExecutingJobsManager" , "selectors" : { "ExecutingJobsManager()" : 1 , "getExecutingJobs()" : 1 , "getNumJobsCurrentlyExecuting()" : 1 , "getNumJobsFired()" : 1}},{ "className" : "org::quartz::SimpleTrigger" , "selectors" : { "SimpleTrigger()" : 10 , "SimpleTrigger(String,String)" : 2 , "SimpleTrigger(String,String,Date)" : 11 , "SimpleTrigger(String,String,Date,Date,int,long)" : 16 , "SimpleTrigger(String,String,String,String,Date,Date,int,long)" : 19 , "SimpleTrigger(String,String,int,long)" : 11 , "computeFirstFireTime(Calendar)" : 1 , "computeNumTimesFiredBetween(Date,Date)" : 3 , "getEndTime()" : 15 , "getFireTimeAfter(Date)" : 11 , "getFireTimeBefore(Date)" : 2 , "getNextFireTime()" : 12 , "getRepeatCount()" : 35 , "getRepeatInterval()" : 30 , "getStartTime()" : 10 , "getTimesTriggered()" : 5 , "hasAdditionalProperties()" : 8 , "mayFireAgain()" : 1 , "setEndTime(Date)" : 3 , "setNextFireTime(Date)" : 8 , "setPreviousFireTime(Date)" : 1 , "setRepeatCount(int)" : 10 , "setRepeatInterval(long)" : 7 , "setStartTime(Date)" : 21 , "setTimesTriggered(int)" : 4 , "updateAfterMisfire(Calendar)" : 1}},{ "className" : "org::quartz::impl::jdbcjobstore::NoSuchDelegateException" , "selectors" : { "NoSuchDelegateException(String)" : 5}},{ "className" : "org::quartz::impl::jdbcjobstore::StdRowLockSemaphore" , "selectors" : { "StdRowLockSemaphore(String,String)" : 1}},{ "className" : "org::quartz::utils::CircularLossyQueue" , "selectors" : { "depth()" : 3 , "getCurrentIndex()" : 2 , "getIndex(int)" : 2 , "peek()" : 1 , "push(T)" : 1 , "toArray(T[])" : 1}},{ "className" : "org::quartz::JobListener" , "selectors" : { "getName()" : 11 , "jobExecutionVetoed(JobExecutionContext)" : 2 , "jobToBeExecuted(JobExecutionContext)" : 2 , "jobWasExecuted(JobExecutionContext,JobExecutionException)" : 2}},{ "className" : "org::quartz::impl::jdbcjobstore::JTANonClusteredSemaphore" , "selectors" : { "getThreadLocks()" : 3 , "isLockOwner(Connection,String)" : 2 , "releaseLock(String,boolean)" : 2}},{ "className" : "org::quartz::plugins::management::ShutdownHookPlugin" , "selectors" : { "isCleanShutdown()" : 1}},{ "className" : "org::quartz::core::QuartzSchedulerResources" , "selectors" : { "QuartzSchedulerResources()" : 2 , "addSchedulerPlugin(SchedulerPlugin)" : 2 , "generateJMXObjectName(String,String)" : 2 , "getInstanceId()" : 3 , "getJMXExport()" : 2 , "getJMXObjectName()" : 2 , "getJobRunShellFactory()" : 1 , "getJobStore()" : 50 , "getMakeSchedulerThreadDaemon()" : 2 , "getName()" : 2 , "getRMIBindName()" : 2 , "getRMICreateRegistryStrategy()" : 2 , "getRMIRegistryHost()" : 4 , "getRMIRegistryPort()" : 6 , "getRMIServerPort()" : 2 , "getSchedulerPlugins()" : 2 , "getThreadName()" : 1 , "getThreadPool()" : 5 , "getUniqueIdentifier()" : 5 , "getUniqueIdentifier(String,String)" : 3 , "isInterruptJobsOnShutdown()" : 1 , "isInterruptJobsOnShutdownWithWait()" : 1 , "isRunUpdateCheck()" : 1 , "isThreadsInheritInitializersClassLoadContext()" : 1 , "setInstanceId(String)" : 2 , "setInterruptJobsOnShutdown(boolean)" : 1 , "setInterruptJobsOnShutdownWithWait(boolean)" : 1 , "setJMXExport(boolean)" : 1 , "setJMXObjectName(String)" : 1 , "setJobRunShellFactory(JobRunShellFactory)" : 2 , "setJobStore(JobStore)" : 2 , "setMakeSchedulerThreadDaemon(boolean)" : 1 , "setName(String)" : 2 , "setRMIBindName(String)" : 1 , "setRMICreateRegistryStrategy(String)" : 1 , "setRMIRegistryHost(String)" : 2 , "setRMIRegistryPort(int)" : 2 , "setRMIServerPort(int)" : 1 , "setRunUpdateCheck(boolean)" : 1 , "setThreadName(String)" : 2 , "setThreadPool(ThreadPool)" : 2 , "setThreadsInheritInitializersClassLoadContext(boolean)" : 1}},{ "className" : "org::quartz::impl::calendar::DailyCalendar" , "selectors" : { "DailyCalendar(String,String)" : 4 , "getInvertTimeRange()" : 1 , "getTimeRangeEndingTimeInMillis(long)" : 4 , "getTimeRangeStartingTimeInMillis(long)" : 4 , "isTimeIncluded(long)" : 1 , "setInvertTimeRange(boolean)" : 3 , "setTimeRange(Calendar,Calendar)" : 3 , "setTimeRange(String,String)" : 2 , "setTimeRange(int,int,int,int,int,int,int,int)" : 4 , "setTimeRange(long,long)" : 4 , "split(String,String)" : 2 , "toString()" : 5 , "validate(int,int,int,int)" : 2}},{ "className" : "org::quartz::impl::jdbcjobstore::FiredTriggerRecord" , "selectors" : { "FiredTriggerRecord()" : 3 , "getFireInstanceState()" : 6 , "getFireTimestamp()" : 2 , "getJobKey()" : 1 , "getPriority()" : 1 , "getTriggerKey()" : 1 , "isJobIsStateful()" : 2 , "isJobRequestsRecovery()" : 1 , "isTriggerIsVolatile()" : 1 , "setFireInstanceId(String)" : 3 , "setFireInstanceState(String)" : 3 , "setFireTimestamp(long)" : 3 , "setJobIsStateful(boolean)" : 3 , "setJobKey(Key)" : 3 , "setJobRequestsRecovery(boolean)" : 3 , "setPriority(int)" : 3 , "setSchedulerInstanceId(String)" : 3 , "setTriggerIsVolatile(boolean)" : 3 , "setTriggerKey(Key)" : 3}},{ "className" : "org::quartz::UnableToInterruptJobException" , "selectors" : { "UnableToInterruptJobException(String)" : 1 , "UnableToInterruptJobException(Throwable)" : 3}},{ "className" : "org::quartz::utils::PoolingConnectionProvider" , "selectors" : { "PoolingConnectionProvider(String,String,String,String,int,String)" : 1 , "initialize(String,String,String,String,int,String)" : 2 , "initialize(String,String,String,String,int,String)::BasicDataSource" : 1}},{ "className" : "org::quartz::jobs::ee::jms::JmsHelper" , "selectors" : { "closeResource(Object)" : 9 , "getInitialContext(JobDataMap)" : 3 , "getMessageFactory(String)" : 3 , "isDestinationSecure(JobDataMap)" : 3 , "useTransaction(JobDataMap)" : 3}},{ "className" : "org::quartz::simpl::ZeroSizeThreadPool" , "selectors" : { "shutdown(boolean)" : 1}},{ "className" : "org::quartz::impl::jdbcjobstore::AttributeRestoringConnectionInvocationHandler" , "selectors" : { "AttributeRestoringConnectionInvocationHandler(Connection)" : 1 , "close()" : 1 , "getWrappedConnection()" : 1 , "restoreOriginalAtributes()" : 2 , "setAutoCommit(boolean)" : 1 , "setTransactionIsolation(int)" : 1}},{ "className" : "org::quartz::core::JobRunShell::VetoedException" , "selectors" : { "VetoedException()" : 1}},{ "className" : "org::quartz::utils::UpdateChecker" , "selectors" : { "UpdateChecker()" : 2 , "buildParamsString()" : 1 , "buildUpdateCheckUrl()" : 1 , "checkForUpdate()" : 1 , "doCheck()" : 1 , "getClientId()" : 1 , "getProperty(String)" : 4 , "getQuartzVersion()" : 2 , "getUpdateProperties(URL)" : 1 , "getUptimeInSeconds()" : 1 , "notBlank(String)" : 4 , "run()" : 1 , "urlEncode(String)" : 8}},{ "className" : "javax::management::NotificationBroadcasterSupport" , "selectors" : { "NotificationBroadcasterSupport()" : 54 , "addNotificationListener(NotificationListener,NotificationFilter,Object)" : 90 , "createLogger()" : 1 , "getNotificationInfo()" : 11 , "removeNotificationListener(NotificationListener)" : 30 , "removeNotificationListener(NotificationListener,NotificationFilter,Object)" : 61 , "sendNotification(Notification)" : 83}},{ "className" : "org::quartz::impl::jdbcjobstore::JobStoreSupport::TransactionCallback" , "selectors" : { "execute(Connection)" : 2}},{ "className" : "org::quartz::jobs::ee::mail::SendMailJob" , "selectors" : { "createMailInfo()" : 1 , "getOptionalParm(JobDataMap,String)" : 4 , "getRequiredParm(JobDataMap,String,String)" : 5 , "populateMailInfo(JobDataMap,MailInfo)" : 1 , "prepareMimeMessage(MailInfo)::InternetAddress" : 2}},{ "className" : "org::quartz::impl::jdbcjobstore::WebLogicDelegate" , "selectors" : { "getObjectFromBlob(ResultSet,String)" : 1}},{ "className" : "org::quartz::utils::counter::sampled::SampledCounterConfig" , "selectors" : { "SampledCounterConfig(int,int,boolean,long)" : 2 , "getHistorySize()" : 1 , "getIntervalSecs()" : 1 , "isResetOnSample()" : 1}},{ "className" : "org::quartz::Calendar" , "selectors" : { "clone()" : 3 , "getNextIncludedTime(long)" : 4 , "isTimeIncluded(long)" : 22}},{ "className" : "org::quartz::Trigger" , "selectors" : { "Trigger()" : 4 , "Trigger(String,String)" : 5 , "Trigger(String,String,String,String)" : 6 , "addTriggerListener(String)" : 9 , "clearAllTriggerListeners()" : 1 , "clone()" : 12 , "compareTo(Object)" : 1 , "computeFirstFireTime(Calendar)" : 13 , "equals(Object)" : 1 , "executionComplete(JobExecutionContext,JobExecutionException)" : 2 , "getCalendarName()" : 31 , "getDescription()" : 11 , "getEndTime()" : 13 , "getFinalFireTime()" : 1 , "getFireInstanceId()" : 7 , "getFullJobName()" : 11 , "getFullName()" : 36 , "getGroup()" : 86 , "getJobDataMap()" : 31 , "getJobGroup()" : 38 , "getJobName()" : 38 , "getKey()" : 1 , "getMisfireInstruction()" : 14 , "getName()" : 88 , "getNextFireTime()" : 61 , "getPreviousFireTime()" : 24 , "getPriority()" : 10 , "getStartTime()" : 9 , "getTriggerListenerNames()" : 19 , "isVolatile()" : 15 , "removeTriggerListener(String)" : 1 , "setCalendarName(String)" : 8 , "setDescription(String)" : 5 , "setEndTime(Date)" : 1 , "setFireInstanceId(String)" : 2 , "setGroup(String)" : 4 , "setJobDataMap(JobDataMap)" : 8 , "setJobGroup(String)" : 6 , "setJobName(String)" : 11 , "setMisfireInstruction(int)" : 8 , "setName(String)" : 13 , "setPriority(int)" : 8 , "setStartTime(Date)" : 3 , "setVolatility(boolean)" : 9 , "triggered(Calendar)" : 7 , "updateAfterMisfire(Calendar)" : 2 , "updateWithNewCalendar(Calendar,long)" : 2 , "validate()" : 5 , "validateMisfireInstruction(int)" : 1}},{ "className" : "org::quartz::utils::counter::CounterManager" , "selectors" : { "createCounter(CounterConfig)" : 1 , "shutdown(boolean)" : 1}},{ "className" : "org::quartz::examples::example14::PriorityExample" , "selectors" : { "PriorityExample()" : 1 , "run()" : 1}},{ "className" : "org::quartz::Job" , "selectors" : { "execute(JobExecutionContext)" : 1}},{ "className" : "org::quartz::ee::jmx::jboss::QuartzServiceMBean" , "selectors" : { "getState(???)" : 1}},{ "className" : "org::quartz::impl::calendar::AnnualCalendar" , "selectors" : { "AnnualCalendar()" : 6 , "getDaysExcluded()" : 3 , "isDayExcluded(Calendar)" : 11 , "removeExcludedDay(Calendar,boolean)" : 2 , "setDayExcluded(Calendar,boolean)" : 13 , "setDaysExcluded(ArrayList)" : 1}},{ "className" : "org::quartz::examples::example15::ClusterExample" , "selectors" : { "ClusterExample()" : 1 , "cleanUp(Scheduler)" : 1 , "run(boolean,boolean)" : 1}},{ "className" : "org::quartz::Scheduler" , "selectors" : { "addCalendar(String,Calendar,boolean,boolean)" : 1 , "addGlobalJobListener(JobListener)" : 1 , "addGlobalTriggerListener(TriggerListener)" : 1 , "addJob(JobDetail,boolean)" : 9 , "addJobListener(JobListener)" : 1 , "addSchedulerListener(SchedulerListener)" : 1 , "deleteJob(String,String)" : 5 , "getCalendar(String)" : 1 , "getCalendarNames()" : 1 , "getContext()" : 3 , "getJobDetail(String,String)" : 1 , "getJobGroupNames()" : 3 , "getJobNames(String)" : 4 , "getMetaData()" : 11 , "getSchedulerInstanceId()" : 3 , "getSchedulerName()" : 8 , "getTrigger(String,String)" : 2 , "getTriggerGroupNames()" : 3 , "getTriggerNames(String)" : 4 , "getTriggersOfJob(String,String)" : 1 , "interrupt(String,String)" : 1 , "isShutdown()" : 1 , "removeSchedulerListener(SchedulerListener)" : 1 , "rescheduleJob(String,String,Trigger)" : 3 , "scheduleJob(JobDetail,Trigger)" : 35 , "scheduleJob(Trigger)" : 14 , "shutdown()" : 8 , "shutdown(boolean)" : 15 , "start()" : 22 , "startDelayed(int)" : 2 , "triggerJob(String,String)" : 2 , "triggerJobWithVolatileTrigger(String,String)" : 1 , "unscheduleJob(String,String)" : 5}},{ "className" : "org::quartz::impl::jdbcjobstore::JobStoreSupport" , "selectors" : { "acquireNextTrigger(Connection,SchedulingContext,long)" : 2 , "calcFailedIfAfter(SchedulerStateRecord)" : 1 , "calendarExists(Connection,String)" : 1 , "canUseProperties()" : 2 , "checkBlockedState(Connection,SchedulingContext,String,String,String)" : 2 , "cleanVolatileTriggerAndJobs()" : 1 , "cleanVolatileTriggerAndJobs(Connection)" : 1 , "cleanupConnection(Connection)" : 4 , "clearAndGetSignalSchedulingChangeOnTxCompletion()" : 1 , "closeConnection(Connection)" : 2 , "clusterCheckIn(Connection)" : 2 , "clusterRecover(Connection,List)" : 1 , "commitConnection(Connection)" : 4 , "deleteJobAndChildren(Connection,SchedulingContext,String,String)" : 2 , "deleteTriggerAndChildren(Connection,String,String)" : 3 , "doCheckin()" : 1 , "doRecoverMisfires()" : 1 , "doUpdateOfMisfiredTrigger(Connection,SchedulingContext,Trigger,boolean,String,boolean)" : 2 , "executeInLock(String,TransactionCallback)" : 6 , "executeInLock(String,VoidTransactionCallback)" : 14 , "executeInNonManagedTXLock(String,TransactionCallback)" : 5 , "executeInNonManagedTXLock(String,VoidTransactionCallback)" : 4 , "executeWithoutLock(TransactionCallback)" : 14 , "findFailedInstances(Connection)" : 2 , "findOrphanedFailedInstances(Connection,List)" : 1 , "getAttributeRestoringConnection(Connection)" : 2 , "getCalendarNames(Connection,SchedulingContext)" : 1 , "getClassLoadHelper()" : 5 , "getClusterCheckinInterval()" : 2 , "getConnection()" : 3 , "getDataSource()" : 5 , "getDbRetryInterval()" : 2 , "getDelegate()" : 107 , "getDoubleCheckLockMisfireHandler()" : 1 , "getFiredTriggerRecordId()" : 1 , "getInstanceId()" : 6 , "getJobGroupNames(Connection,SchedulingContext)" : 1 , "getJobNames(Connection,SchedulingContext,String)" : 3 , "getLockHandler()" : 10 , "getMakeThreadsDaemons()" : 2 , "getMaxMisfiresToHandleAtATime()" : 1 , "getMisfireThreshold()" : 6 , "getMisfireTime()" : 3 , "getNonManagedTXConnection()" : 4 , "getNumberOfCalendars(Connection,SchedulingContext)" : 1 , "getNumberOfJobs(Connection,SchedulingContext)" : 1 , "getNumberOfTriggers(Connection,SchedulingContext)" : 1 , "getPausedTriggerGroups(Connection,SchedulingContext)" : 1 , "getSelectWithLockSQL()" : 1 , "getTablePrefix()" : 2 , "getTriggerGroupNames(Connection,SchedulingContext)" : 3 , "getTriggerNames(Connection,SchedulingContext,String)" : 1 , "getTriggerState(Connection,SchedulingContext,String,String)" : 1 , "getTriggersForJob(Connection,SchedulingContext,String,String)" : 5 , "getUseDBLocks()" : 1 , "initialize(ClassLoadHelper,SchedulerSignaler)" : 2 , "isAcquireTriggersWithinLock()" : 1 , "isClustered()" : 5 , "isDontSetAutoCommitFalse()" : 1 , "isLockOnInsert()" : 4 , "isThreadsInheritInitializersClassLoadContext()" : 1 , "isTxIsolationLevelSerializable()" : 1 , "jobExists(Connection,String,String)" : 3 , "logWarnIfNonZero(int,String)" : 5 , "pauseAll(Connection,SchedulingContext)" : 1 , "pauseTrigger(Connection,SchedulingContext,String,String)" : 3 , "pauseTriggerGroup(Connection,SchedulingContext,String)" : 2 , "recoverJobs()" : 1 , "recoverJobs(Connection)" : 1 , "recoverMisfiredJobs(Connection,boolean)" : 2 , "releaseAcquiredTrigger(Connection,SchedulingContext,Trigger)" : 1 , "releaseLock(Connection,String,boolean)" : 5 , "removeCalendar(Connection,SchedulingContext,String)" : 1 , "removeJob(Connection,SchedulingContext,String,String,boolean)" : 2 , "removeTrigger(Connection,SchedulingContext,String,String)" : 6 , "replaceTrigger(Connection,SchedulingContext,String,String,Trigger)" : 1 , "resumeAll(Connection,SchedulingContext)" : 1 , "resumeTrigger(Connection,SchedulingContext,String,String)" : 4 , "resumeTriggerGroup(Connection,SchedulingContext,String)" : 2 , "retrieveCalendar(Connection,SchedulingContext,String)" : 3 , "retrieveJob(Connection,SchedulingContext,String,String)" : 2 , "retrieveTrigger(Connection,SchedulingContext,String,String)" : 2 , "retrieveTrigger(Connection,String,String)" : 3 , "rollbackConnection(Connection)" : 6 , "setDbRetryInterval(long)" : 1 , "setLockHandler(Semaphore)" : 3 , "setThreadsInheritInitializersClassLoadContext(boolean)" : 1 , "setUseDBLocks(boolean)" : 2 , "shutdown()" : 1 , "signalSchedulingChangeImmediately(long)" : 3 , "signalSchedulingChangeOnTxCompletion(long)" : 6 , "storeCalendar(Connection,SchedulingContext,String,Calendar,boolean,boolean)" : 1 , "storeJob(Connection,SchedulingContext,JobDetail,boolean)" : 2 , "storeTrigger(Connection,SchedulingContext,Trigger,JobDetail,boolean,String,boolean,boolean)" : 9 , "triggerExists(Connection,String,String)" : 1 , "triggerFired(Connection,SchedulingContext,Trigger)" : 1 , "triggeredJobComplete(Connection,SchedulingContext,Trigger,JobDetail,int)" : 1 , "updateMisfiredTrigger(Connection,SchedulingContext,String,String,String,boolean)" : 1}},{ "className" : "org::quartz::core::jmx::JobExecutionContextSupport" , "selectors" : { "determineCalendarName(JobExecutionContext)" : 1 , "toCompositeData(JobExecutionContext)" : 4 , "toTabularData(List<JobExecutionContext>)" : 1}},{ "className" : "org::quartz::utils::DirtyFlagMap::DirtyFlagSet" , "selectors" : { "DirtyFlagSet(Set)" : 2 , "getWrappedSet()" : 1}},{ "className" : "org::quartz::utils::counter::sampled::SampledCounterImpl" , "selectors" : { "SampledCounterImpl(SampledCounterConfig)" : 2 , "getAndReset()" : 1 , "getIntervalMillis()" : 2 , "getTimerTask()" : 1 , "recordSample()" : 2}},{ "className" : "org::quartz::spi::SchedulerPlugin" , "selectors" : { "initialize(String,Scheduler)" : 2 , "shutdown()" : 1 , "start()" : 1}},{ "className" : "org::quartz::spi::InstanceIdGenerator" , "selectors" : { "generateInstanceId()" : 1}},{ "className" : "org::quartz::impl::calendar::MonthlyCalendar" , "selectors" : { "MonthlyCalendar()" : 1 , "MonthlyCalendar(Calendar,TimeZone)" : 3 , "areAllDaysExcluded()" : 3 , "getNextIncludedTime(long)" : 1 , "isDayExcluded(int)" : 4 , "setDayExcluded(int,boolean)" : 1}},{ "className" : "org::quartz::core::jmx::JobDataMapSupport" , "selectors" : { "newJobDataMap(TabularData)" : 1 , "toCompositeData(String,String)" : 1 , "toTabularData(JobDataMap)" : 3}},{ "className" : "org::quartz::core::QuartzSchedulerMBeanImpl::Emitter" , "selectors" : { "Emitter()" : 1}},{ "className" : "org::quartz::utils::TriggerStatus" , "selectors" : { "TriggerStatus(String,Date)" : 1 , "getJobKey()" : 2 , "getNextFireTime()" : 4 , "getStatus()" : 2 , "setJobKey(Key)" : 1 , "setKey(Key)" : 1}},{ "className" : "org::quartz::core::JobRunShellFactory" , "selectors" : { "borrowJobRunShell()" : 1 , "initialize(Scheduler,SchedulingContext)" : 2 , "returnJobRunShell(JobRunShell)" : 1}},{ "className" : "org::quartz::core::QuartzSchedulerThread" , "selectors" : { "QuartzSchedulerThread(QuartzScheduler,QuartzSchedulerResources,SchedulingContext)" : 1 , "QuartzSchedulerThread(QuartzScheduler,QuartzSchedulerResources,SchedulingContext,boolean,int)" : 1 , "clearSignaledSchedulingChange()" : 2 , "errorTriggerRetryLoop(TriggerFiredBundle)" : 1 , "getDbFailureRetryInterval()" : 2 , "getRandomizedIdleWaitTime()" : 1 , "getSignaledNextFireTime()" : 2 , "halt()" : 1 , "isCandidateNewTimeEarlierWithinReason(long,boolean)" : 2 , "isPaused()" : 1 , "isScheduleChanged()" : 1 , "releaseIfScheduleChangedSignificantly(Trigger,long)" : 1 , "releaseTriggerRetryLoop(Trigger)" : 5 , "setDbFailureRetryInterval(long)" : 1 , "setIdleWaitTime(long)" : 1 , "signalSchedulingChange(long)" : 3 , "togglePause(boolean)" : 2}},{ "className" : "org::quartz::utils::PropertiesParser" , "selectors" : { "PropertiesParser(Properties)" : 5 , "getBooleanProperty(String)" : 6 , "getBooleanProperty(String,boolean)" : 7 , "getCharProperty(String,char)" : 1 , "getDoubleProperty(String)" : 1 , "getFloatProperty(String)" : 1 , "getIntArrayProperty(String,int[])" : 1 , "getIntProperty(String)" : 1 , "getIntProperty(String,int)" : 4 , "getLongProperty(String)" : 1 , "getLongProperty(String,long)" : 2 , "getPropertyGroup(String,boolean)" : 10 , "getPropertyGroup(String,boolean,String[])" : 4 , "getPropertyGroups(String)" : 4 , "getStringArrayProperty(String,String[])" : 1 , "getStringProperty(String)" : 32 , "getStringProperty(String,String)" : 21 , "getUnderlyingProperties()" : 2}},{ "className" : "java::rmi::registry::Registry" , "selectors" : { "bind(String,Remote)" : 4 , "list()" : 9 , "lookup(String)" : 6 , "rebind(String,Remote)" : 3 , "unbind(String)" : 5}},{ "className" : "org::quartz::impl::calendar::BaseCalendar" , "selectors" : { "BaseCalendar()" : 5 , "BaseCalendar(Calendar)" : 7 , "BaseCalendar(Calendar,TimeZone)" : 6 , "BaseCalendar(TimeZone)" : 3 , "clone()" : 7 , "createJavaCalendar()" : 3 , "createJavaCalendar(long)" : 9 , "getBaseCalendar()" : 21 , "getDescription()" : 6 , "getEndOfDayJavaCalendar(long)" : 2 , "getNextIncludedTime(long)" : 4 , "getStartOfDayJavaCalendar(long)" : 8 , "getTimeZone()" : 8 , "isTimeIncluded(long)" : 5 , "setBaseCalendar(Calendar)" : 2 , "setDescription(String)" : 2 , "setTimeZone(TimeZone)" : 2}},{ "className" : "java::lang::reflect::Proxy" , "selectors" : { "getInvocationHandler(Object)" : 24 , "getProxyClass(ClassLoader,Class<?>[])" : 13 , "isProxyClass(Class<?>)" : 57 , "newProxyInstance(ClassLoader,Class<?>[],InvocationHandler)" : 145}},{ "className" : "org::quartz::listeners::FilterAndBroadcastTriggerListener" , "selectors" : { "FilterAndBroadcastTriggerListener(String)" : 1 , "shouldDispatch(Trigger)" : 4}},{ "className" : "org::quartz::jobs::ee::mail::SendMailJob::MailInfo" , "selectors" : { "MailInfo()" : 1 , "getCc()" : 2 , "getContentType()" : 2 , "getFrom()" : 1 , "getMessage()" : 2 , "getReplyTo()" : 2 , "getSmtpHost()" : 1 , "getSubject()" : 2 , "getTo()" : 2 , "setCc(String)" : 1 , "setContentType(String)" : 1 , "setFrom(String)" : 1 , "setMessage(String)" : 1 , "setReplyTo(String)" : 1 , "setSmtpHost(String)" : 1 , "setSubject(String)" : 1 , "setTo(String)" : 1}},{ "className" : "org::quartz::impl::StdSchedulerFactory" , "selectors" : { "StdSchedulerFactory()" : 21 , "StdSchedulerFactory(Properties)" : 1 , "StdSchedulerFactory(String)" : 3 , "findClassloader()" : 2 , "getDefaultScheduler()" : 2 , "getScheduler()" : 7 , "getSchedulerName()" : 2 , "getSetMethod(String,PropertyDescriptor[])" : 1 , "initialize()" : 2 , "initialize(Properties)" : 5 , "initialize(String)" : 2 , "instantiate()" : 1 , "instantiate(QuartzSchedulerResources,QuartzScheduler)" : 1 , "loadClass(String)" : 1 , "overrideWithSysProps(Properties)" : 1 , "setBeanProps(Object,Properties)" : 10}},{ "className" : "org::quartz::spi::JobStore" , "selectors" : { "acquireNextTrigger(SchedulingContext,long)" : 10 , "getCalendarNames(SchedulingContext)" : 1 , "getJobGroupNames(SchedulingContext)" : 1 , "getJobNames(SchedulingContext,String)" : 1 , "getPausedTriggerGroups(SchedulingContext)" : 1 , "getTriggerGroupNames(SchedulingContext)" : 1 , "getTriggerNames(SchedulingContext,String)" : 1 , "getTriggerState(SchedulingContext,String,String)" : 6 , "getTriggersForJob(SchedulingContext,String,String)" : 1 , "initialize(ClassLoadHelper,SchedulerSignaler)" : 3 , "isClustered()" : 2 , "pauseAll(SchedulingContext)" : 1 , "pauseJob(SchedulingContext,String,String)" : 1 , "pauseJobGroup(SchedulingContext,String)" : 2 , "pauseTrigger(SchedulingContext,String,String)" : 2 , "pauseTriggerGroup(SchedulingContext,String)" : 1 , "releaseAcquiredTrigger(SchedulingContext,Trigger)" : 5 , "removeCalendar(SchedulingContext,String)" : 1 , "removeJob(SchedulingContext,String,String)" : 1 , "removeTrigger(SchedulingContext,String,String)" : 1 , "replaceTrigger(SchedulingContext,String,String,Trigger)" : 1 , "resumeAll(SchedulingContext)" : 1 , "resumeJob(SchedulingContext,String,String)" : 1 , "resumeJobGroup(SchedulingContext,String)" : 1 , "resumeTrigger(SchedulingContext,String,String)" : 2 , "resumeTriggerGroup(SchedulingContext,String)" : 1 , "retrieveCalendar(SchedulingContext,String)" : 4 , "retrieveJob(SchedulingContext,String,String)" : 1 , "retrieveTrigger(SchedulingContext,String,String)" : 4 , "schedulerStarted()" : 1 , "setInstanceId(String)" : 1 , "setInstanceName(String)" : 1 , "shutdown()" : 1 , "storeCalendar(SchedulingContext,String,Calendar,boolean,boolean)" : 1 , "storeJob(SchedulingContext,JobDetail,boolean)" : 5 , "storeJobAndTrigger(SchedulingContext,JobDetail,Trigger)" : 1 , "storeTrigger(SchedulingContext,Trigger,boolean)" : 11 , "supportsPersistence()" : 2 , "triggerFired(SchedulingContext,Trigger)" : 1 , "triggeredJobComplete(SchedulingContext,Trigger,JobDetail,int)" : 5}},{ "className" : "org::quartz::CronExpression" , "selectors" : { "CronExpression(String)" : 18 , "addToSet(int,int,int,int)" : 15 , "buildExpression(String)" : 2 , "checkNext(int,String,int,int)" : 1 , "clone()" : 2 , "findNextWhiteSpace(int,String)" : 1 , "getCronExpression()" : 6 , "getDayOfWeekNumber(String)" : 2 , "getExpressionSetSummary(Set)" : 7 , "getExpressionSummary()" : 1 , "getFinalFireTime()" : 1 , "getLastDayOfMonth(int,int)" : 8 , "getMonthNumber(String)" : 2 , "getNextInvalidTimeAfter(Date)" : 1 , "getNextValidTimeAfter(Date)" : 1 , "getNumericValue(String,int)" : 1 , "getSet(int)" : 7 , "getTimeAfter(Date)" : 4 , "getTimeBefore(Date)" : 1 , "getTimeZone()" : 12 , "getValue(int,String,int)" : 4 , "isLeapYear(int)" : 1 , "isSatisfiedBy(Date)" : 6 , "setCalendarHour(Calendar,int)" : 2 , "setTimeZone(TimeZone)" : 6 , "skipWhiteSpace(int,String)" : 1 , "storeExpressionVals(int,String,int)" : 2}},{ "className" : "org::quartz::impl::jdbcjobstore::PointbaseDelegate" , "selectors" : { "getObjectFromBlob(ResultSet,String)" : 1}},{ "className" : "org::quartz::examples::example6::JobExceptionExample" , "selectors" : { "JobExceptionExample()" : 1 , "run()" : 1}},{ "className" : "java::util::concurrent::CountDownLatch" , "selectors" : { "CountDownLatch(int)" : 127 , "await()" : 87 , "await(long,TimeUnit)" : 50 , "countDown()" : 140 , "getCount()" : 17}},{ "className" : "org::quartz::core::JobRunShell" , "selectors" : { "JobRunShell(JobRunShellFactory,Scheduler,SchedulingContext)" : 2 , "begin()" : 1 , "complete(boolean)" : 3 , "completeTriggerRetryLoop(Trigger,JobDetail,int)" : 1 , "initialize(QuartzScheduler,TriggerFiredBundle)" : 1 , "notifyJobListenersComplete(JobExecutionContext,JobExecutionException)" : 1 , "notifyListenersBeginning(JobExecutionContext)" : 1 , "notifyTriggerListenersComplete(JobExecutionContext,int)" : 1 , "passivate()" : 3 , "requestShutdown()" : 1 , "vetoedJobRetryLoop(Trigger,JobDetail,int)" : 1}},{ "className" : "org::quartz::SerializationTestSupport" , "selectors" : { "deserialize(String,Class)" : 1 , "getSerializedFileName(String,Class)" : 2 , "getTargetObject()" : 2 , "getVersions()" : 2 , "verifyMatch(Object,Object)" : 1}},{ "className" : "org::quartz::simpl::SimpleThreadPool" , "selectors" : { "SimpleThreadPool(int,int)" : 2 , "clearFromBusyWorkersList(WorkerThread)" : 1 , "createWorkerThreads(int)" : 1 , "getThreadCount()" : 1 , "getThreadNamePrefix()" : 1 , "getThreadPriority()" : 3 , "initialize()" : 1 , "isMakeThreadsDaemons()" : 3 , "isThreadsInheritContextClassLoaderOfInitializingThread()" : 2 , "isThreadsInheritGroupOfInitializingThread()" : 1 , "makeAvailable(WorkerThread)" : 1 , "setInstanceId(String)" : 1 , "setInstanceName(String)" : 1 , "setThreadCount(int)" : 1 , "setThreadNamePrefix(String)" : 1 , "setThreadPriority(int)" : 1 , "setThreadsInheritContextClassLoaderOfInitializingThread(boolean)" : 1 , "shutdown(boolean)" : 1}},{ "className" : "org::quartz::utils::DirtyFlagMap" , "selectors" : { "DirtyFlagMap()" : 13 , "DirtyFlagMap(int)" : 1 , "DirtyFlagMap(int,float)" : 1 , "clear()" : 4 , "clearDirtyFlag()" : 14 , "clone()" : 3 , "containsKey(Object)" : 9 , "containsValue(Object)" : 3 , "entrySet()" : 7 , "get(Object)" : 35 , "getWrappedMap()" : 5 , "isDirty()" : 30 , "keySet()" : 4 , "put(Object,Object)" : 26 , "remove(Object)" : 5 , "size()" : 13 , "values()" : 1}},{ "className" : "org::quartz::simpl::RAMJobStore" , "selectors" : { "RAMJobStore()" : 3 , "applyMisfire(TriggerWrapper)" : 2 , "getFiredTriggerRecordId()" : 1 , "getJobNames(SchedulingContext,String)" : 2 , "getMisfireThreshold()" : 3 , "getTriggerGroupNames(SchedulingContext)" : 2 , "getTriggerNames(SchedulingContext,String)" : 2 , "getTriggerWrappersForCalendar(String)" : 1 , "getTriggerWrappersForJob(String,String)" : 3 , "getTriggersForJob(SchedulingContext,String,String)" : 6 , "pauseTrigger(SchedulingContext,String,String)" : 3 , "pauseTriggerGroup(SchedulingContext,String)" : 1 , "removeJob(SchedulingContext,String,String)" : 1 , "removeTrigger(SchedulingContext,String,String)" : 3 , "removeTrigger(SchedulingContext,String,String,boolean)" : 2 , "resumeTrigger(SchedulingContext,String,String)" : 3 , "resumeTriggerGroup(SchedulingContext,String)" : 1 , "retrieveCalendar(SchedulingContext,String)" : 2 , "retrieveJob(SchedulingContext,String,String)" : 2 , "setAllTriggersOfJobToState(String,String,int)" : 2 , "setInstanceId(String)" : 1 , "setInstanceName(String)" : 1 , "storeJob(SchedulingContext,JobDetail,boolean)" : 1 , "storeTrigger(SchedulingContext,Trigger,boolean)" : 3}},{ "className" : "org::quartz::NthIncludedDayTrigger" , "selectors" : { "NthIncludedDayTrigger()" : 4 , "NthIncludedDayTrigger(String,String)" : 4 , "computeFirstFireTime(Calendar)" : 2 , "getEndTime()" : 1 , "getFireAtTime()" : 5 , "getFireTimeAfter(Date)" : 9 , "getIntervalType()" : 2 , "getMonthlyFireTimeAfter(Date)" : 1 , "getN()" : 2 , "getNextFireCutoffInterval()" : 2 , "getNextFireTime()" : 1 , "getStartTime()" : 2 , "getTimeZone()" : 9 , "getWeeklyFireTimeAfter(Date)" : 1 , "getYearlyFireTimeAfter(Date)" : 1 , "mayFireAgain()" : 1 , "setFireAtTime(String)" : 18 , "setIntervalType(int)" : 6 , "setN(int)" : 6 , "setNextFireCutoffInterval(int)" : 1 , "setStartTime(Date)" : 6 , "setTimeZone(TimeZone)" : 2}},{ "className" : "org::quartz::ee::jta::JTAJobRunShellFactory" , "selectors" : { "JTAJobRunShellFactory()" : 1}},{ "className" : "java::lang::IncompatibleClassChangeError" , "selectors" : { "IncompatibleClassChangeError(String)" : 7}},{ "className" : "org::quartz::xml::ValidationException" , "selectors" : { "ValidationException()" : 1 , "ValidationException(String)" : 1 , "ValidationException(String,Collection<Exception>)" : 1 , "getValidationExceptions()" : 2}},{ "className" : "org::quartz::core::jmx::QuartzSchedulerMBean" , "selectors" : { "setSampledStatisticsEnabled(boolean)" : 1}},{ "className" : "javax::xml::parsers::DocumentBuilder" , "selectors" : { "getDOMImplementation()" : 9 , "newDocument()" : 113 , "parse(File)" : 36 , "parse(InputSource)" : 100 , "parse(InputStream)" : 98 , "parse(String)" : 31 , "reset()" : 1 , "setEntityResolver(EntityResolver)" : 24 , "setErrorHandler(ErrorHandler)" : 34}},{ "className" : "org::quartz::SchedulerListener" , "selectors" : { "jobAdded(JobDetail)" : 2 , "jobDeleted(String,String)" : 2 , "jobScheduled(Trigger)" : 2 , "jobUnscheduled(String,String)" : 2 , "jobsPaused(String,String)" : 2 , "jobsResumed(String,String)" : 2 , "schedulerError(String,SchedulerException)" : 2 , "schedulerInStandbyMode()" : 2 , "schedulerShutdown()" : 2 , "schedulerShuttingdown()" : 2 , "schedulerStarted()" : 2 , "triggerFinalized(Trigger)" : 2 , "triggersPaused(String,String)" : 2 , "triggersResumed(String,String)" : 2}},{ "className" : "org::quartz::utils::counter::CounterConfig" , "selectors" : { "CounterConfig(long)" : 1 , "createCounter()" : 1 , "getInitialValue()" : 1}},{ "className" : "org::quartz::simpl::ThreadContextClassLoadHelper" , "selectors" : { "ThreadContextClassLoadHelper()" : 1 , "getClassLoader()" : 3}},{ "className" : "org::quartz::utils::DirtyFlagMap::DirtyFlagMapEntry" , "selectors" : { "DirtyFlagMapEntry(Entry)" : 1}},{ "className" : "org::quartz::impl::jdbcjobstore::JobStoreCMT" , "selectors" : { "getNonManagedTXDataSource()" : 5 , "isDontSetNonManagedTXConnectionAutoCommitFalse()" : 1 , "isTxIsolationLevelReadCommitted()" : 1}},{ "className" : "org::quartz::simpl::SimpleJobFactory" , "selectors" : { "SimpleJobFactory()" : 1 , "newJob(TriggerFiredBundle)" : 1}},{ "className" : "org::quartz::utils::DirtyFlagMap::DirtyFlagIterator" , "selectors" : { "DirtyFlagIterator(Iterator)" : 2 , "next()" : 1}},{ "className" : "org::quartz::spi::JobFactory" , "selectors" : { "newJob(TriggerFiredBundle)" : 1}},{ "className" : "org::quartz::simpl::LoadingLoaderClassLoadHelper" , "selectors" : { "LoadingLoaderClassLoadHelper()" : 1 , "getClassLoader()" : 3}},{ "className" : "org::quartz::examples::example7::InterruptExample" , "selectors" : { "InterruptExample()" : 1 , "run()" : 1}},{ "className" : "org::quartz::utils::counter::CounterManagerImpl" , "selectors" : { "CounterManagerImpl(Timer)" : 1}},{ "className" : "org::quartz::plugins::history::LoggingJobHistoryPlugin" , "selectors" : { "getJobFailedMessage()" : 1 , "getJobSuccessMessage()" : 1 , "getJobToBeFiredMessage()" : 1 , "getJobWasVetoedMessage()" : 1}},{ "className" : "org::quartz::impl::jdbcjobstore::PostgreSQLDelegate" , "selectors" : { "getObjectFromBlob(ResultSet,String)" : 1}},{ "className" : "org::quartz::SchedulerMetaData" , "selectors" : { "SchedulerMetaData(String,String,Class,boolean,boolean,boolean,boolean,Date,int,Class,boolean,boolean,Class,int,String)" : 4 , "getJobStoreClass()" : 1 , "getNumberOfJobsExecuted()" : 12 , "getRunningSince()" : 2 , "getSchedulerClass()" : 1 , "getSchedulerInstanceId()" : 1 , "getSchedulerName()" : 1 , "getSummary()" : 1 , "getThreadPoolClass()" : 1 , "getThreadPoolSize()" : 1 , "getVersion()" : 1 , "isInStandbyMode()" : 1 , "isJobStoreClustered()" : 1 , "isJobStoreSupportsPersistence()" : 2 , "isSchedulerRemote()" : 1 , "isShutdown()" : 1 , "toString()" : 1}},{ "className" : "org::quartz::core::QuartzSchedulerMBeanImpl" , "selectors" : { "QuartzSchedulerMBeanImpl(QuartzScheduler)" : 1 , "getJobsCompletedMostRecentSample()" : 1 , "getJobsExecutedMostRecentSample()" : 1 , "getJobsScheduledMostRecentSample()" : 1 , "getName()" : 1 , "getNotificationInfo()" : 1 , "sendNotification(String)" : 3 , "sendNotification(String,Object)" : 13 , "sendNotification(String,Object,String)" : 3}},{ "className" : "org::quartz::examples::example11::LoadExample" , "selectors" : { "LoadExample(int)" : 1 , "run()" : 1}},{ "className" : "org::quartz::utils::StringKeyDirtyFlagMap" , "selectors" : { "StringKeyDirtyFlagMap(int)" : 2 , "containsTransientData()" : 1 , "getAllowsTransientData()" : 4 , "getBoolean(String)" : 1 , "getDouble(String)" : 1 , "getFloat(String)" : 1 , "getInt(String)" : 8 , "getKeys()" : 3 , "getLong(String)" : 5 , "getString(String)" : 46 , "put(Object,Object)" : 15 , "put(String,String)" : 48 , "put(String,char)" : 1 , "put(String,int)" : 6 , "put(String,long)" : 4 , "putAll(Map)" : 6}},{ "className" : "java::util::TreeSet" , "selectors" : { "TreeSet()" : 231 , "TreeSet(Collection<? extends E>)" : 32 , "TreeSet(Comparator<? super E>)" : 54 , "TreeSet(SortedSet<E>)" : 5 , "TreeSet<String>()" : 3 , "add(E)" : 376 , "addAll(Collection<? extends E>)" : 50 , "clear()" : 14 , "clone()" : 4 , "contains(Object)" : 46 , "descendingIterator()" : 1 , "first()" : 47 , "headSet(E)" : 5 , "isEmpty()" : 11 , "iterator()" : 116 , "java" : 11 , "last()" : 15 , "remove(Object)" : 57 , "size()" : 113 , "subSet(E,E)" : 1 , "tailSet(E)" : 12}},{ "className" : "org::quartz::examples::example13::SimpleRecoveryJob" , "selectors" : { "SimpleRecoveryJob()" : 2}},{ "className" : "org::quartz::simpl::CascadingClassLoadHelper" , "selectors" : { "CascadingClassLoadHelper()" : 2}},{ "className" : "org::quartz::impl::RemoteMBeanScheduler" , "selectors" : { "getAttribute(String)" : 5 , "getAttributes(String[])" : 1 , "getSchedulerName()" : 2 , "getSchedulerObjectName()" : 3 , "initialize()" : 1 , "invoke(String,Object[],String[])" : 43 , "isStarted()" : 1 , "setSchedulerObjectName(String)" : 1 , "setSchedulingContext(SchedulingContext)" : 1 , "toBoolean(boolean)" : 4 , "triggerJob(String,String,JobDataMap)" : 1 , "triggerJobWithVolatileTrigger(String,String,JobDataMap)" : 1}},{ "className" : "org::quartz::examples::example8::CalendarExample" , "selectors" : { "CalendarExample()" : 1 , "run()" : 1}},{ "className" : "org::quartz::impl::StdScheduler" , "selectors" : { "StdScheduler(QuartzScheduler,SchedulingContext)" : 2 , "getSchedulerInstanceId()" : 1 , "getSchedulerName()" : 1 , "isInStandbyMode()" : 1 , "isShutdown()" : 1 , "isStarted()" : 1 , "triggerJob(String,String,JobDataMap)" : 1 , "triggerJobWithVolatileTrigger(String,String,JobDataMap)" : 1}},{ "className" : "java::util::concurrent::atomic::AtomicReference<T>" , "selectors" : { "AtomicReference()" : 15 , "AtomicReference(V)" : 4}},{ "className" : "org::quartz::examples::example10::PlugInExample" , "selectors" : { "PlugInExample()" : 1 , "run()" : 1}},{ "className" : "org::quartz::jobs::ee::jmx::JMXInvokerJob" , "selectors" : { "invoke(String,String,Object[],String[])" : 1 , "split(String,String)" : 2}},{ "className" : "org::quartz::jobs::FileScanListener" , "selectors" : { "fileUpdated(String)" : 1}},{ "className" : "org::quartz::TriggerUtils" , "selectors" : { "computeFireTimes(Trigger,Calendar,int)" : 9 , "getDSTSavings(TimeZone)" : 1 , "getDateOf(int,int,int,int,int)" : 1 , "getEvenMinuteDate(Date)" : 1 , "getNextGivenSecondDate(Date,int)" : 5 , "getOffset(long,TimeZone)" : 2 , "makeDailyTrigger(int,int)" : 1 , "makeHourlyTrigger(String,int,int)" : 1 , "makeHourlyTrigger(int,int)" : 3 , "makeImmediateTrigger(int,long)" : 1 , "makeMinutelyTrigger(String,int,int)" : 1 , "makeMinutelyTrigger(int,int)" : 3 , "makeMonthlyTrigger(int,int,int)" : 1 , "makeSecondlyTrigger(String,int,int)" : 1 , "makeSecondlyTrigger(int,int)" : 3 , "makeWeeklyTrigger(int,int,int)" : 1 , "setTriggerIdentity(Trigger,String,String)" : 1 , "validateDayOfMonth(int)" : 3 , "validateDayOfWeek(int)" : 1 , "validateHour(int)" : 6 , "validateMinute(int)" : 6 , "validateMonth(int)" : 2 , "validateSecond(int)" : 3 , "validateYear(int)" : 1}},{ "className" : "org::quartz::InterruptableJob" , "selectors" : { "interrupt()" : 2}},{ "className" : "org::quartz::core::NullSampledStatisticsImpl" , "selectors" : { "NullSampledStatisticsImpl()" : 1}},{ "className" : "org::quartz::impl::StdJobRunShellFactory" , "selectors" : { "StdJobRunShellFactory()" : 2}},{ "className" : "org::quartz::simpl::InitThreadContextClassLoadHelper" , "selectors" : { "InitThreadContextClassLoadHelper()" : 1}},{ "className" : "org::quartz::core::RemotableQuartzScheduler" , "selectors" : { "addCalendar(SchedulingContext,String,Calendar,boolean,boolean)" : 1 , "addJob(SchedulingContext,JobDetail,boolean)" : 1 , "deleteCalendar(SchedulingContext,String)" : 1 , "deleteJob(SchedulingContext,String,String)" : 1 , "getCalendar(SchedulingContext,String)" : 1 , "getCalendarNames(SchedulingContext)" : 1 , "getCurrentlyExecutingJobs()" : 1 , "getJobDetail(SchedulingContext,String,String)" : 1 , "getJobGroupNames(SchedulingContext)" : 1 , "getJobNames(SchedulingContext,String)" : 1 , "getJobStoreClass()" : 1 , "getPausedTriggerGroups(SchedulingContext)" : 1 , "getSchedulerContext()" : 1 , "getSchedulerInstanceId()" : 1 , "getSchedulerName()" : 1 , "getThreadPoolClass()" : 1 , "getThreadPoolSize()" : 1 , "getTrigger(SchedulingContext,String,String)" : 1 , "getTriggerGroupNames(SchedulingContext)" : 1 , "getTriggerNames(SchedulingContext,String)" : 1 , "getTriggerState(SchedulingContext,String,String)" : 1 , "getTriggersOfJob(SchedulingContext,String,String)" : 1 , "getVersion()" : 1 , "interrupt(SchedulingContext,String,String)" : 1 , "isClustered()" : 1 , "isInStandbyMode()" : 1 , "isShutdown()" : 1 , "numJobsExecuted()" : 1 , "pauseAll(SchedulingContext)" : 1 , "pauseJob(SchedulingContext,String,String)" : 1 , "pauseJobGroup(SchedulingContext,String)" : 1 , "pauseTrigger(SchedulingContext,String,String)" : 1 , "pauseTriggerGroup(SchedulingContext,String)" : 1 , "rescheduleJob(SchedulingContext,String,String,Trigger)" : 1 , "resumeAll(SchedulingContext)" : 1 , "resumeJob(SchedulingContext,String,String)" : 1 , "resumeJobGroup(SchedulingContext,String)" : 1 , "resumeTrigger(SchedulingContext,String,String)" : 1 , "resumeTriggerGroup(SchedulingContext,String)" : 1 , "runningSince()" : 2 , "scheduleJob(SchedulingContext,JobDetail,Trigger)" : 1 , "scheduleJob(SchedulingContext,Trigger)" : 1 , "shutdown()" : 1 , "shutdown(boolean)" : 1 , "standby()" : 1 , "start()" : 1 , "startDelayed(int)" : 1 , "supportsPersistence()" : 1 , "triggerJob(SchedulingContext,String,String,JobDataMap)" : 1 , "triggerJobWithVolatileTrigger(SchedulingContext,String,String,JobDataMap)" : 1 , "unscheduleJob(SchedulingContext,String,String)" : 1}},{ "className" : "org::quartz::impl::jdbcjobstore::SchedulerStateRecord" , "selectors" : { "SchedulerStateRecord()" : 2 , "getCheckinInterval()" : 1 , "getCheckinTimestamp()" : 1 , "getSchedulerInstanceId()" : 9 , "setCheckinInterval(long)" : 1 , "setCheckinTimestamp(long)" : 1 , "setSchedulerInstanceId(String)" : 2}},{ "className" : "org::quartz::JobExecutionException" , "selectors" : { "JobExecutionException()" : 1 , "JobExecutionException(String)" : 5 , "JobExecutionException(String,Throwable,boolean)" : 4 , "JobExecutionException(Throwable)" : 14 , "JobExecutionException(Throwable,boolean)" : 1 , "refireImmediately()" : 4 , "setRefireImmediately(boolean)" : 1 , "setUnscheduleAllTriggers(boolean)" : 1 , "unscheduleAllTriggers()" : 4 , "unscheduleFiringTrigger()" : 4}},{ "className" : "org::quartz::plugins::xml::XMLSchedulingDataProcessorPlugin::JobFile" , "selectors" : { "JobFile(String)" : 1 , "getFileBasename()" : 1 , "getFileFound()" : 1 , "getFileName()" : 9 , "initialize()" : 1}},{ "className" : "org::quartz::listeners::BroadcastSchedulerListener" , "selectors" : { "BroadcastSchedulerListener()" : 1}},{ "className" : "org::quartz::examples::example1::SimpleExample" , "selectors" : { "SimpleExample()" : 1 , "run()" : 1}},{ "className" : "org::quartz::impl::calendar::CalendarComparator" , "selectors" : { "CalendarComparator()" : 1}},{ "className" : "java::lang::System" , "selectors" : { "arraycopy(Object,int,Object,int,int)" : 6588 , "clearProperty(String)" : 62 , "currentTimeMillis()" : 7333 , "exit(int)" : 1605 , "gc()" : 272 , "getProperties()" : 344 , "getProperty(String)" : 3657 , "getProperty(String,String)" : 840 , "getSecurityManager()" : 215 , "getenv()" : 15 , "getenv(String)" : 63 , "identityHashCode(Object)" : 234 , "load(String)" : 10 , "loadLibrary(String)" : 12 , "mapLibraryName(String)" : 7 , "nanoTime()" : 156 , "runFinalization()" : 38 , "runFinalizersOnExit(boolean)" : 2 , "setErr(PrintStream)" : 112 , "setIn(InputStream)" : 7 , "setOut(PrintStream)" : 218 , "setProperties(Properties)" : 33 , "setProperty(String,String)" : 756 , "setSecurityManager(SecurityManager)" : 34}},{ "className" : "org::quartz::utils::counter::sampled::TimeStampedCounterValue" , "selectors" : { "TimeStampedCounterValue(long,long)" : 1 , "getCounterValue()" : 3}},{ "className" : "org::quartz::simpl::RAMJobStoreTest::SampleSignaler" , "selectors" : { "SampleSignaler()" : 1}},{ "className" : "org::quartz::impl::jdbcjobstore::MSSQLDelegate" , "selectors" : { "getObjectFromBlob(ResultSet,String)" : 1}},{ "className" : "org::quartz::JobDataMap" , "selectors" : { "JobDataMap()" : 21 , "JobDataMap(Map)" : 6 , "getBooleanValue(String)" : 2 , "getBooleanValueFromString(String)" : 1 , "getDoubleValueFromString(String)" : 1 , "getFloatValueFromString(String)" : 1 , "getIntFromString(String)" : 1 , "getLongValueFromString(String)" : 1}},{ "className" : "org::quartz::impl::calendar::CronCalendar" , "selectors" : { "CronCalendar(Calendar,String,TimeZone)" : 2 , "isTimeIncluded(long)" : 1}},{ "className" : "org::quartz::utils::DirtyFlagMap::DirtyFlagMapEntryIterator" , "selectors" : { "DirtyFlagMapEntryIterator(Iterator)" : 1}},{ "className" : "org::quartz::impl::SchedulerDetailsSetterTest::MyThreadPool" , "selectors" : { "MyThreadPool()" : 1}},{ "className" : "org::quartz::impl::jdbcjobstore::DriverDelegate" , "selectors" : { "calendarExists(Connection,String)" : 1 , "calendarIsReferenced(Connection,String)" : 1 , "countMisfiredTriggersInStates(Connection,String,String,long)" : 1 , "deleteBlobTrigger(Connection,String,String)" : 1 , "deleteCalendar(Connection,String)" : 1 , "deleteCronTrigger(Connection,String,String)" : 1 , "deleteFiredTrigger(Connection,String)" : 3 , "deleteFiredTriggers(Connection)" : 1 , "deleteFiredTriggers(Connection,String)" : 1 , "deleteJobDetail(Connection,String,String)" : 1 , "deleteJobListeners(Connection,String,String)" : 1 , "deletePausedTriggerGroup(Connection,String)" : 2 , "deleteSchedulerState(Connection,String)" : 1 , "deleteSimpleTrigger(Connection,String,String)" : 1 , "deleteTrigger(Connection,String,String)" : 1 , "deleteTriggerListeners(Connection,String,String)" : 1 , "deleteVolatileFiredTriggers(Connection)" : 1 , "insertBlobTrigger(Connection,Trigger)" : 1 , "insertCalendar(Connection,String,Calendar)" : 1 , "insertCronTrigger(Connection,CronTrigger)" : 1 , "insertFiredTrigger(Connection,Trigger,String,JobDetail)" : 2 , "insertJobDetail(Connection,JobDetail)" : 1 , "insertPausedTriggerGroup(Connection,String)" : 3 , "insertSchedulerState(Connection,String,long,long)" : 1 , "insertSimpleTrigger(Connection,SimpleTrigger)" : 1 , "insertTrigger(Connection,Trigger,String,JobDetail)" : 1 , "isTriggerGroupPaused(Connection,String)" : 4 , "jobExists(Connection,String,String)" : 1 , "selectCalendar(Connection,String)" : 1 , "selectCalendars(Connection)" : 1 , "selectFiredTriggerInstanceNames(Connection)" : 1 , "selectFiredTriggerRecords(Connection,String,String)" : 1 , "selectFiredTriggerRecordsByJob(Connection,String,String)" : 1 , "selectInstancesFiredTriggerRecords(Connection,String)" : 1 , "selectJobDetail(Connection,String,String,ClassLoadHelper)" : 2 , "selectJobForTrigger(Connection,String,String,ClassLoadHelper)" : 2 , "selectJobGroups(Connection)" : 1 , "selectJobListeners(Connection,String,String)" : 1 , "selectJobsInGroup(Connection,String)" : 1 , "selectMisfiredTriggersInStates(Connection,String,String,long,int,List)" : 1 , "selectNumCalendars(Connection)" : 1 , "selectNumJobs(Connection)" : 1 , "selectNumTriggers(Connection)" : 1 , "selectNumTriggersForJob(Connection,String,String)" : 1 , "selectPausedTriggerGroups(Connection)" : 1 , "selectSchedulerStateRecords(Connection,String)" : 1 , "selectTrigger(Connection,String,String)" : 1 , "selectTriggerGroups(Connection)" : 1 , "selectTriggerJobDataMap(Connection,String,String)" : 1 , "selectTriggerListeners(Connection,String,String)" : 1 , "selectTriggerNamesForJob(Connection,String,String)" : 1 , "selectTriggerState(Connection,String,String)" : 4 , "selectTriggerStatus(Connection,String,String)" : 2 , "selectTriggerToAcquire(Connection,long,long)" : 1 , "selectTriggersForCalendar(Connection,String)" : 1 , "selectTriggersForJob(Connection,String,String)" : 1 , "selectTriggersForRecoveringJobs(Connection)" : 1 , "selectTriggersInGroup(Connection,String)" : 2 , "selectTriggersInState(Connection,String)" : 1 , "selectVolatileJobs(Connection)" : 1 , "selectVolatileTriggers(Connection)" : 1 , "triggerExists(Connection,String,String)" : 1 , "updateBlobTrigger(Connection,Trigger)" : 1 , "updateCalendar(Connection,String,Calendar)" : 1 , "updateCronTrigger(Connection,CronTrigger)" : 1 , "updateJobData(Connection,JobDetail)" : 1 , "updateJobDetail(Connection,JobDetail)" : 1 , "updateSchedulerState(Connection,String,long)" : 1 , "updateSimpleTrigger(Connection,SimpleTrigger)" : 1 , "updateTrigger(Connection,Trigger,String,JobDetail)" : 1 , "updateTriggerGroupStateFromOtherState(Connection,String,String,String)" : 1 , "updateTriggerGroupStateFromOtherStates(Connection,String,String,String,String,String)" : 1 , "updateTriggerState(Connection,String,String,String)" : 5 , "updateTriggerStateFromOtherState(Connection,String,String,String,String)" : 5 , "updateTriggerStatesForJob(Connection,String,String,String)" : 2 , "updateTriggerStatesForJobFromOtherState(Connection,String,String,String,String)" : 9 , "updateTriggerStatesFromOtherStates(Connection,String,String,String)" : 2}},{ "className" : "org::quartz::core::QuartzScheduler" , "selectors" : { "QuartzScheduler(QuartzSchedulerResources,SchedulingContext,long,long)" : 2 , "addCalendar(SchedulingContext,String,Calendar,boolean,boolean)" : 1 , "addGlobalJobListener(JobListener)" : 5 , "addGlobalTriggerListener(TriggerListener)" : 2 , "addJob(SchedulingContext,JobDetail,boolean)" : 2 , "addJobListener(JobListener)" : 1 , "addNoGCObject(Object)" : 3 , "addSchedulerListener(SchedulerListener)" : 4 , "addTriggerListener(TriggerListener)" : 1 , "bind()" : 1 , "buildJobListenerList(String[])" : 3 , "buildTriggerListenerList(String[])" : 3 , "deleteCalendar(SchedulingContext,String)" : 2 , "deleteJob(SchedulingContext,String,String)" : 2 , "getCalendar(SchedulingContext,String)" : 1 , "getCalendarNames(SchedulingContext)" : 2 , "getCurrentlyExecutingJobs()" : 4 , "getGlobalJobListener(String)" : 1 , "getGlobalJobListeners()" : 2 , "getGlobalTriggerListener(String)" : 1 , "getGlobalTriggerListeners()" : 2 , "getJobDetail(SchedulingContext,String,String)" : 4 , "getJobFactory()" : 1 , "getJobGroupNames(SchedulingContext)" : 3 , "getJobListener(String)" : 2 , "getJobListenerNames()" : 1 , "getJobNames(SchedulingContext,String)" : 3 , "getJobStoreClass()" : 3 , "getLog(???)" : 1 , "getPausedTriggerGroups(SchedulingContext)" : 2 , "getSchedulerContext()" : 1 , "getSchedulerInstanceId()" : 3 , "getSchedulerListeners()" : 15 , "getSchedulerName()" : 4 , "getSchedulerSignaler()" : 2 , "getSchedulerThreadGroup()" : 1 , "getThreadPoolClass()" : 3 , "getThreadPoolSize()" : 3 , "getTrigger(SchedulingContext,String,String)" : 4 , "getTriggerGroupNames(SchedulingContext)" : 3 , "getTriggerListener(String)" : 2 , "getTriggerListenerNames()" : 1 , "getTriggerNames(SchedulingContext,String)" : 3 , "getTriggerState(SchedulingContext,String,String)" : 2 , "getTriggersOfJob(SchedulingContext,String,String)" : 3 , "getVersion()" : 6 , "getVersionIteration()" : 4 , "getVersionMajor()" : 4 , "getVersionMinor()" : 4 , "initialize()" : 2 , "interrupt(SchedulingContext,String,String)" : 2 , "isClustered()" : 2 , "isInStandbyMode()" : 4 , "isShutdown()" : 4 , "isSignalOnSchedulingChange()" : 1 , "isStarted()" : 1 , "newTriggerId()" : 4 , "notifyJobListenersToBeExecuted(JobExecutionContext)" : 1 , "notifyJobListenersWasExecuted(JobExecutionContext,JobExecutionException)" : 1 , "notifyJobListenersWasVetoed(JobExecutionContext)" : 1 , "notifyJobStoreJobComplete(SchedulingContext,Trigger,JobDetail,int)" : 2 , "notifyJobStoreJobVetoed(SchedulingContext,Trigger,JobDetail,int)" : 2 , "notifySchedulerListenersError(String,SchedulerException)" : 25 , "notifySchedulerListenersFinalized(Trigger)" : 2 , "notifySchedulerListenersInStandbyMode()" : 1 , "notifySchedulerListenersJobAdded(JobDetail)" : 1 , "notifySchedulerListenersJobDeleted(String,String)" : 1 , "notifySchedulerListenersPausedJob(String,String)" : 2 , "notifySchedulerListenersPausedTrigger(String,String)" : 3 , "notifySchedulerListenersResumedJob(String,String)" : 2 , "notifySchedulerListenersResumedTrigger(String,String)" : 3 , "notifySchedulerListenersSchduled(Trigger)" : 5 , "notifySchedulerListenersShutdown()" : 1 , "notifySchedulerListenersShuttingdown()" : 1 , "notifySchedulerListenersStarted()" : 1 , "notifySchedulerListenersUnscheduled(String,String)" : 2 , "notifySchedulerThread(long)" : 18 , "notifyTriggerListenersComplete(JobExecutionContext,int)" : 1 , "notifyTriggerListenersFired(JobExecutionContext)" : 1 , "notifyTriggerListenersMisfired(Trigger)" : 1 , "numJobsExecuted()" : 2 , "pauseAll(SchedulingContext)" : 2 , "pauseJob(SchedulingContext,String,String)" : 2 , "pauseJobGroup(SchedulingContext,String)" : 2 , "pauseTrigger(SchedulingContext,String,String)" : 2 , "pauseTriggerGroup(SchedulingContext,String)" : 2 , "registerJMX()" : 1 , "removeGlobalJobListener(String)" : 2 , "removeGlobalTriggerListener(String)" : 1 , "removeJobListener(String)" : 1 , "removeSchedulerListener(SchedulerListener)" : 2 , "removeTriggerListener(String)" : 1 , "rescheduleJob(SchedulingContext,String,String,Trigger)" : 1 , "resumeAll(SchedulingContext)" : 2 , "resumeJob(SchedulingContext,String,String)" : 2 , "resumeJobGroup(SchedulingContext,String)" : 2 , "resumeTrigger(SchedulingContext,String,String)" : 2 , "resumeTriggerGroup(SchedulingContext,String)" : 2 , "runningSince()" : 4 , "scheduleJob(SchedulingContext,JobDetail,Trigger)" : 2 , "scheduleJob(SchedulingContext,Trigger)" : 1 , "scheduleUpdateCheck()" : 1 , "setJobFactory(JobFactory)" : 2 , "shutdown()" : 2 , "shutdown(boolean)" : 5 , "shutdownPlugins()" : 1 , "standby()" : 3 , "start()" : 3 , "startDelayed(int)" : 1 , "startPlugins()" : 1 , "supportsPersistence()" : 2 , "triggerJob(SchedulingContext,String,String,JobDataMap)" : 2 , "triggerJobWithVolatileTrigger(SchedulingContext,String,String,JobDataMap)" : 2 , "unBind()" : 1 , "unregisterJMX()" : 1 , "unscheduleJob(SchedulingContext,String,String)" : 3 , "validateState()" : 30}},{ "className" : "org::quartz::listeners::FilterAndBroadcastJobListener" , "selectors" : { "FilterAndBroadcastJobListener(String)" : 1 , "shouldDispatch(JobExecutionContext)" : 3}},{ "className" : "org::quartz::spi::TriggerFiredBundle" , "selectors" : { "TriggerFiredBundle(JobDetail,Trigger,Calendar,boolean,Date,Date,Date,Date)" : 2 , "getCalendar()" : 1 , "getFireTime()" : 1 , "getJobDetail()" : 8 , "getNextFireTime()" : 1 , "getPrevFireTime()" : 1 , "getScheduledFireTime()" : 1 , "getTrigger()" : 4 , "isRecovering()" : 1}},{ "className" : "java::util::Timer" , "selectors" : { "Timer()" : 33 , "Timer(String)" : 6 , "Timer(String,boolean)" : 9 , "Timer(boolean)" : 28 , "cancel()" : 46 , "schedule(TimerTask,Date)" : 4 , "schedule(TimerTask,Date,long)" : 4 , "schedule(TimerTask,long)" : 20 , "schedule(TimerTask,long,long)" : 41 , "scheduleAtFixedRate(TimerTask,long,long)" : 15}},{ "className" : "org::quartz::DateIntervalTrigger" , "selectors" : { "DateIntervalTrigger()" : 11 , "DateIntervalTrigger(String,String,Date,Date,IntervalUnit,int)" : 2 , "DateIntervalTrigger(String,String,IntervalUnit,int)" : 1 , "getEndTime()" : 6 , "getFinalFireTime()" : 2 , "getFireTimeAfter(Date)" : 8 , "getFireTimeAfter(Date,boolean)" : 2 , "getNextFireTime()" : 1 , "getRepeatInterval()" : 17 , "getRepeatIntervalUnit()" : 14 , "getStartTime()" : 4 , "mayFireAgain()" : 1 , "setEndTime(Date)" : 4 , "setNextFireTime(Date)" : 2 , "setRepeatInterval(int)" : 13 , "setRepeatIntervalUnit(IntervalUnit)" : 13 , "setStartTime(Date)" : 13}},{ "className" : "org::quartz::impl::DirectSchedulerFactory" , "selectors" : { "DirectSchedulerFactory()" : 1 , "createRemoteScheduler(String,String,String,String,int)" : 1 , "createRemoteScheduler(String,String,String,int)" : 1 , "createScheduler(String,String,ThreadPool,JobStore)" : 1 , "createScheduler(String,String,ThreadPool,JobStore,Map,String,int,long,long)" : 2 , "createScheduler(String,String,ThreadPool,JobStore,String,int,long,long)" : 1 , "createScheduler(ThreadPool,JobStore)" : 2 , "createVolatileScheduler(int)" : 1 , "getInstance()" : 3 , "getScheduler(String)" : 2}},{ "className" : "org::quartz::TestCronExpression" , "selectors" : { "TestCronExpression(String)" : 1 , "getSetPublic(int)" : 1}},{ "className" : "org::quartz::simpl::SimpleClassLoadHelper" , "selectors" : { "SimpleClassLoadHelper()" : 1 , "getClassLoader()" : 2}},{ "className" : "org::quartz::SchedulerException" , "selectors" : { "SchedulerException(String)" : 22 , "SchedulerException(String,Throwable)" : 56 , "SchedulerException(String,Throwable,int)" : 1 , "SchedulerException(String,int)" : 69 , "SchedulerException(Throwable)" : 6 , "getErrorCode()" : 2 , "getUnderlyingException()" : 1 , "setErrorCode(int)" : 35}},{ "className" : "org::quartz::xml::XMLSchedulingDataProcessor" , "selectors" : { "XMLSchedulingDataProcessor(ClassLoadHelper)" : 1 , "addJobGroupToNeverDelete(String)" : 1 , "addJobToSchedule(JobDetail)" : 1 , "addTriggerGroupToNeverDelete(String)" : 1 , "addTriggerToSchedule(Trigger)" : 1 , "addValidationException(SAXException)" : 3 , "buildTriggersByFQJobNameMap(List<Trigger>)" : 1 , "clearValidationExceptions()" : 1 , "executePreProcessCommands(Scheduler)" : 2 , "getBoolean(XPath,String,Document)" : 2 , "getInputStream(String)" : 1 , "getLoadedJobs()" : 1 , "getLoadedTriggers()" : 1 , "getSystemIdForFileName(String)" : 2 , "getTrimmedToNullString(XPath,String,Node)" : 29 , "getURL(String)" : 1 , "initDocumentParser()" : 1 , "isIgnoreDuplicates()" : 5 , "isOverWriteExistingData()" : 5 , "maybeThrowValidationException()" : 2 , "prepForProcessing()" : 2 , "process(InputSource)" : 2 , "processFile(String)" : 1 , "processFile(String,String)" : 2 , "processFileAndScheduleJobs(String,Scheduler)" : 1 , "processFileAndScheduleJobs(String,String,Scheduler)" : 2 , "resolveSchemaSource()" : 1 , "scheduleJobs(Scheduler)" : 2 , "setIgnoreDuplicates(boolean)" : 2 , "setOverWriteExistingData(boolean)" : 2}},{ "className" : "org::quartz::impl::jdbcjobstore::JTANonClusteredSemaphore::SemaphoreSynchronization" , "selectors" : { "SemaphoreSynchronization(String)" : 1}},{ "className" : "org::quartz::utils::CircularLossyQueue<T>" , "selectors" : { "CircularLossyQueue(int)" : 1}},{ "className" : "org::quartz::simpl::PropertySettingJobFactory" , "selectors" : { "PropertySettingJobFactory()" : 1 , "getSetMethod(String,PropertyDescriptor[])" : 1 , "handleError(String)" : 3 , "handleError(String,Exception)" : 6 , "isThrowIfPropertyNotFound()" : 1 , "isWarnIfPropertyNotFound()" : 1 , "setBeanProps(Object,JobDataMap)" : 10 , "setThrowIfPropertyNotFound(boolean)" : 1}},{ "className" : "org::quartz::impl::jdbcjobstore::oracle::OracleDelegate" , "selectors" : { "getObjectFromBlob(ResultSet,String)" : 1 , "writeDataToBlob(ResultSet,int,byte[])" : 8 , "writeDataToBlob(ResultSet,int,byte[])::oracle" : 1}},{ "className" : "org::quartz::impl::SchedulerRepository" , "selectors" : { "SchedulerRepository()" : 1 , "bind(Scheduler)" : 5 , "getInstance()" : 13 , "lookup(String)" : 3 , "lookupAll()" : 2 , "remove(String)" : 6}},{ "className" : "org::quartz::examples::example12::RemoteClientExample" , "selectors" : { "RemoteClientExample()" : 1 , "run()" : 1}},{ "className" : "org::argouml::language::java::reveng::classfile::ParserUtils::ArrayTypeSignatureLexer" , "selectors" : { "ArrayTypeSignatureLexer(String)" : 1}},{ "className" : "org::argouml::core::propertypanels::ui::UMLAssociationRoleBaseComboBoxModel" , "selectors" : { "UMLAssociationRoleBaseComboBoxModel(String,Object)" : 1}},{ "className" : "org::argouml::ui::cmd::ActionFind" , "selectors" : { "ActionFind()" : 3}},{ "className" : "org::argouml::cognitive::UnresolvableException" , "selectors" : { "UnresolvableException(String)" : 5}},{ "className" : "org::argouml::cognitive::Translator" , "selectors" : { "localize(String)" : 139 , "messageFormat(String,Object[])" : 1 , "setTranslator(AbstractCognitiveTranslator)" : 1}},{ "className" : "org::argouml::model::DeleteInstanceEvent" , "selectors" : { "DeleteInstanceEvent(Object,String,Object,Object,EventObject)" : 2}},{ "className" : "org::argouml::core::propertypanels::ui::UMLSubmachineStateComboBoxModel::ActionSetSubmachineStateSubmachine" , "selectors" : { "ActionSetSubmachineStateSubmachine()" : 1}},{ "className" : "java::util::EventObject" , "selectors" : { "EventObject(Object)" : 254 , "getSource()" : 2109 , "toString()" : 10}},{ "className" : "org::argouml::cognitive::ui::PriorityNode" , "selectors" : { "PriorityNode(String,int)" : 3 , "getName()" : 1 , "getPriority()" : 8 , "getPriorityList()" : 6}},{ "className" : "org::argouml::language::csharp::importer::csparser::collections::NodeCollection" , "selectors" : { "ToSource(StringBuilder)" : 44}},{ "className" : "org::argouml::uml::cognitive::checklist::Init" , "selectors" : { "createChecklists()" : 1 , "init()" : 1 , "newCheckItem(String,String,Checklist)" : 200}},{ "className" : "org::argouml::core::propertypanels::model::GetterSetterManagerImpl::TagDefinitionGetterSetter" , "selectors" : { "TagDefinitionGetterSetter()" : 1 , "getOptions(Object,Collection<Class<?>>)" : 1}},{ "className" : "org::argouml::model::InvalidElementException" , "selectors" : { "InvalidElementException(String)" : 369 , "InvalidElementException(String,Throwable)" : 1}},{ "className" : "org::argouml::model::ConcurrencyKind" , "selectors" : { "getConcurrent()" : 6 , "getGuarded()" : 11 , "getSequential()" : 10}},{ "className" : "org::argouml::uml::reveng::SettingsTypes::Setting" , "selectors" : { "getLabel()" : 5}},{ "className" : "org::argouml::uml::ui::ActionDeploymentDiagram" , "selectors" : { "ActionDeploymentDiagram()" : 8 , "createToolBar(???)" : 1}},{ "className" : "org::argouml::uml::ui::foundation::core::ActionSetGeneralizableElementLeaf" , "selectors" : { "ActionSetGeneralizableElementLeaf()" : 1 , "getInstance()" : 1}},{ "className" : "org::argouml::core::propertypanels::ui::RowSelector::MoveDownAction" , "selectors" : { "MoveDownAction()" : 1}},{ "className" : "org::argouml::application::SubsystemUtility" , "selectors" : { "initSubsystem(InitSubsystem)" : 18}},{ "className" : "org::argouml::core::propertypanels::model::GetterSetterManagerImpl::MethodGetterSetter" , "selectors" : { "MethodGetterSetter()" : 1 , "getOptions(Object,Collection<Class<?>>)" : 1}},{ "className" : "org::argouml::uml::diagram::ui::RadioAction" , "selectors" : { "RadioAction(Action)" : 97 , "getAction()" : 2}},{ "className" : "org::argouml::core::propertypanels::ui::UMLTransitionTriggerComboBoxModel" , "selectors" : { "UMLTransitionTriggerComboBoxModel(String,Object)" : 1 , "getSelectedModelElement()" : 2}},{ "className" : "org::argouml::model::DummyModelCommand" , "selectors" : { "DummyModelCommand()" : 76}},{ "className" : "org::argouml::language::php::PHPDocumentor::Tag" , "selectors" : { "Tag(String)" : 5 , "getContent()" : 4 , "getName()" : 2 , "getTag()" : 4 , "setContent(String)" : 1}},{ "className" : "org::argouml::persistence::ZargoFilePersister::SubInputStream" , "selectors" : { "SubInputStream(ZipInputStream)" : 1 , "close()" : 1 , "getNextEntry()" : 1}},{ "className" : "org::argouml::uml::diagram::ui::SPFigEdgeModelElement" , "selectors" : { "SPFigEdgeModelElement()::ColorRenderer" : 1}},{ "className" : "org::argouml::uml::reveng::Import::ConfigPanelExtension" , "selectors" : { "ConfigPanelExtension(List<Setting>)" : 1 , "createGridBagConstraints(boolean,boolean,boolean)" : 10 , "createGridBagConstraintsFinal()" : 2}},{ "className" : "org::argouml::uml::ui::behavior::common_behavior::ActionNewUninterpretedAction" , "selectors" : { "ActionNewUninterpretedAction()" : 1 , "getButtonInstance()" : 3}},{ "className" : "org::argouml::core::propertypanels::model::GetterSetterManagerImpl::ExtensionPointGetterSetter" , "selectors" : { "ExtensionPointGetterSetter()" : 1 , "getOptions(Object,Collection<Class<?>>)" : 1}},{ "className" : "org::argouml::uml::ui::ActionGenerateProjectCode" , "selectors" : { "ActionGenerateProjectCode()" : 2 , "isCodeRelevantClassifier(Object)" : 1}},{ "className" : "org::argouml::model::euml::NotYetImplementedException" , "selectors" : { "NotYetImplementedException()" : 211}},{ "className" : "com::nwalsh::xalan::Callout" , "selectors" : { "Callout(int,Element,int,int,int)" : 3 , "getArea()" : 4 , "getCallout()" : 6 , "getColumn()" : 9 , "getLine()" : 7}},{ "className" : "org::argouml::language::java::reveng::ParseStateException" , "selectors" : { "ParseStateException(String)" : 2}},{ "className" : "org::argouml::core::propertypanels::model::GetterSetterManagerImpl::BaseClassGetterSetter::RemoveCommand" , "selectors" : { "RemoveCommand(Object,Object)" : 1}},{ "className" : "org::argouml::core::propertypanels::ui::UMLCollaborationRepresentedClassifierComboBoxModel::ActionSetRepresentedClassifierCollaboration" , "selectors" : { "ActionSetRepresentedClassifierCollaboration()" : 1}},{ "className" : "org::argouml::uml::ui::behavior::common_behavior::ActionNewCreateAction" , "selectors" : { "ActionNewCreateAction()" : 1 , "getButtonInstance()" : 3}},{ "className" : "org::argouml::cognitive::ui::WizStepCue" , "selectors" : { "WizStepCue(Wizard,String)" : 2}},{ "className" : "org::argouml::uml::ui::foundation::extension_mechanisms::ActionNewTagDefinition" , "selectors" : { "ActionNewTagDefinition()" : 2}},{ "className" : "org::argouml::language::java::reveng::classfile::ParserUtils::Token" , "selectors" : { "Token(int,String)" : 36 , "getType()" : 3 , "getValue()" : 8}},{ "className" : "org::argouml::profile::ResourceModelLoader" , "selectors" : { "ResourceModelLoader()" : 2 , "ResourceModelLoader(Class)" : 2}},{ "className" : "org::argouml::profile::ProfileReference" , "selectors" : { "ProfileReference(String,URL)" : 6 , "getPath()" : 11 , "getPublicReference()" : 6}},{ "className" : "org::argouml::uml::diagram::ui::ActionEdgesDisplay" , "selectors" : { "ActionEdgesDisplay(boolean,String)" : 2 , "getHideEdges()" : 2 , "getShowEdges()" : 2}},{ "className" : "org::argouml::uml::diagram::ui::UMLDiagramHomeModelComboBoxModel" , "selectors" : { "UMLDiagramHomeModelComboBoxModel()" : 1 , "getSelectedModelElement()" : 2}},{ "className" : "org::argouml::sequence2::diagram::SequenceDiagramFactory" , "selectors" : { "SequenceDiagramFactory()" : 1}},{ "className" : "org::argouml::core::propertypanels::model::GetterSetterManagerImpl::ResidentElementGetterSetter" , "selectors" : { "ResidentElementGetterSetter()" : 1 , "getOptions(Object,Collection<Class<?>>)" : 1}},{ "className" : "javax::swing::Icon" , "selectors" : { "getIconHeight()" : 80 , "getIconWidth()" : 92 , "paintIcon(Component,Graphics,int,int)" : 49}},{ "className" : "org::argouml::profile::internal::ocl::CrOCL" , "selectors" : { "CrOCL(String,String,String,Integer,List<Decision>,List<String>,String)" : 19 , "getOCL()" : 1}},{ "className" : "org::argouml::language::csharp::importer::csparser::nodes::expressions::InvocationExpression" , "selectors" : { "InvocationExpression(PrimaryExpression,ExpressionList)" : 1}},{ "className" : "org::argouml::ui::UndoableAction" , "selectors" : { "UndoableAction()" : 10 , "UndoableAction(String)" : 13 , "UndoableAction(String,Icon)" : 96 , "actionPerformed(ActionEvent)" : 150}},{ "className" : "org::argouml::util::logging::SimpleTimer::SimpleTimerEnumeration" , "selectors" : { "SimpleTimerEnumeration()" : 1}},{ "className" : "org::argouml::model::euml::CopyHelperEUMLImpl" , "selectors" : { "CopyHelperEUMLImpl(EUMLModelImplementation)" : 1 , "copy(???)" : 4}},{ "className" : "org::argouml::taskmgmt::ProgressEvent" , "selectors" : { "ProgressEvent(Object,long,long)" : 1 , "getLength()" : 1 , "getPosition()" : 2}},{ "className" : "org::argouml::uml::cognitive::critics::CrNameConfusion" , "selectors" : { "CrNameConfusion()" : 1 , "computeOffenders(Object)" : 3 , "confusable(String,String)" : 1 , "countDiffs(String,String)" : 1 , "strip(String)" : 2}},{ "className" : "org::argouml::profile::internal::ui::PropPanelCritic" , "selectors" : { "PropPanelCritic(Object)" : 1 , "colToString(Collection)" : 2 , "setCritic(Critic)" : 1}},{ "className" : "org::argouml::language::cpp::reveng::MemberModeler" , "selectors" : { "MemberModeler(Object,Object,ProfileCpp)" : 4 , "finish()" : 1 , "getOwner()" : 8 , "getProfile()" : 2 , "getType()" : 2 , "setType(Object)" : 3}},{ "className" : "org::argouml::sequence2::diagram::FigDestroy" , "selectors" : { "FigDestroy(Object,Rectangle,DiagramSettings)" : 1 , "createCross(Rectangle)" : 1 , "createCross(Rectangle)::FigLine" : 2}},{ "className" : "javax::swing::event::ChangeListener" , "selectors" : { "stateChanged(ChangeEvent)" : 58}},{ "className" : "org::argouml::model::mdr::CollectionHelper" , "selectors" : { "update(Collection,Collection)" : 10}},{ "className" : "org::argouml::core::propertypanels::ui::UMLTextArea" , "selectors" : { "UMLTextArea(UMLPlainTextDocument)" : 2}},{ "className" : "org::argouml::model::NotImplementedException" , "selectors" : { "NotImplementedException()" : 28 , "NotImplementedException(String)" : 54}},{ "className" : "org::argouml::uml::ui::TabSrc::DefaultPredicate" , "selectors" : { "DefaultPredicate()" : 1}},{ "className" : "org::argouml::cognitive::ui::WizStepConfirm" , "selectors" : { "WizStepConfirm()" : 1 , "WizStepConfirm(Wizard,String)" : 1}},{ "className" : "javax::swing::RootPaneContainer" , "selectors" : { "getContentPane()" : 11 , "getGlassPane()" : 3 , "getRootPane()" : 1 , "setGlassPane(Component)" : 1}},{ "className" : "org::argouml::uml::diagram::ui::PropPanelDiagram" , "selectors" : { "PropPanelDiagram(String,ImageIcon)" : 11 , "getHomeModelSelector()" : 1}},{ "className" : "org::argouml::language::java::reveng::classfile::SimpleByteLexer" , "selectors" : { "SimpleByteLexer(InputStream)" : 1 , "nextToken()::TokenStreamIOException" : 1}},{ "className" : "org::argouml::uml::diagram::state::ui::SelectionState" , "selectors" : { "SelectionState(???)" : 4 , "setIncomingButtonEnabled(boolean)" : 2 , "setOutgoingButtonEnabled(boolean)" : 3}},{ "className" : "org::argouml::language::csharp::importer::csparser::collections::NodeCollection<T>" , "selectors" : { "NodeCollection()" : 66}},{ "className" : "org::argouml::profile::ProfileException" , "selectors" : { "ProfileException(String)" : 5 , "ProfileException(String,Throwable)" : 9 , "ProfileException(Throwable)" : 2}},{ "className" : "org::argouml::language::csharp::importer::csparser::statements::LocalDeclarationStatement" , "selectors" : { "LocalDeclarationStatement()" : 2}},{ "className" : "org::argouml::ocl::OCLUtil" , "selectors" : { "getContextString(Object)" : 2 , "getInnerMostEnclosingNamespace(Object)" : 4}},{ "className" : "org::argouml::model::UUIDManager" , "selectors" : { "UUIDManager()" : 1 , "getInstance()" : 4 , "getNewUUID()" : 4}},{ "className" : "org::argouml::core::propertypanels::ui::UMLModelElementNameDocument" , "selectors" : { "UMLModelElementNameDocument(String,Object)" : 1}},{ "className" : "org::argouml::ui::CmdCreateNode" , "selectors" : { "CmdCreateNode(Object,String)" : 28 , "makeNode()" : 2 , "putToolTip(String)" : 1}},{ "className" : "org::argouml::uml::diagram::ui::FigAssociationEndAnnotation" , "selectors" : { "<Initializer>()::ArrowHeadGreater" : 3 , "FigAssociationEndAnnotation(FigEdgeModelElement,Object,DiagramSettings)" : 2 , "getArrowType()" : 1 , "getRole()" : 5}},{ "className" : "org::argouml::uml::diagram::Relocatable" , "selectors" : { "getClassAndModelID(???)" : 1 , "getRelocationCandidates(Object)" : 1 , "initialize(???)" : 1 , "isRelocationAllowed(Object)" : 5 , "relocate(Object)" : 2}},{ "className" : "org::argouml::language::csharp::importer::csparser::statements::BlockStatement" , "selectors" : { "BlockStatement()" : 20 , "ToSource(StringBuilder)" : 14 , "isHasBraces()" : 2 , "setHasBraces(boolean)" : 1}},{ "className" : "org::argouml::notation::providers::uml::NotationUtilityUml::PropertySpecialString" , "selectors" : { "PropertySpecialString(String,PropertyOperation)" : 10 , "invoke(Object,String,String)" : 1}},{ "className" : "org::argouml::uml::ui::foundation::core::ActionSetGeneralizableElementAbstract" , "selectors" : { "ActionSetGeneralizableElementAbstract()" : 1 , "getInstance()" : 1}},{ "className" : "org::argouml::uml::reveng::idl::OuterClassifierContext" , "selectors" : { "OuterClassifierContext(Context,Object,Object,String)" : 1 , "get(String,boolean)" : 2}},{ "className" : "org::argouml::uml::reveng::ImportInterface::ImportException" , "selectors" : { "ImportException(String)" : 4 , "ImportException(String,Throwable)" : 10 , "ImportException(Throwable)" : 4}},{ "className" : "org::argouml::core::propertypanels::model::GetterSetterManagerImpl::BaseClassGetterSetter::AddCommand" , "selectors" : { "AddCommand(Object)" : 1 , "getSelected()" : 1 , "initMetaClasses()" : 1}},{ "className" : "org::argouml::notation::providers::uml::AbstractMessageNotationUml::MsgPtr" , "selectors" : { "MsgPtr()" : 4}},{ "className" : "org::argouml::uml::diagram::DiagramUtils" , "selectors" : { "getActiveDiagram()" : 33}},{ "className" : "org::argouml::uml::diagram::ui::ActionSetAddAssociationClassMode" , "selectors" : { "ActionSetAddAssociationClassMode(String)" : 1}},{ "className" : "org::argouml::persistence::SaveException" , "selectors" : { "SaveException(String)" : 7 , "SaveException(String,Throwable)" : 13 , "SaveException(Throwable)" : 14}},{ "className" : "org::argouml::language::csharp::importer::csparser::members::ParamDeclNode" , "selectors" : { "ParamDeclNode()" : 2 , "ToSource(StringBuilder)" : 7}},{ "className" : "org::argouml::language::php::PHPDocumentor::ParamList" , "selectors" : { "ParamList()" : 1}},{ "className" : "org::argouml::language::csharp::importer::csparser::nodes::expressions::TypeNode" , "selectors" : { "ToSource(StringBuilder)" : 19 , "TypeNode(IdentifierExpression)" : 4}},{ "className" : "org::argouml::uml::cognitive::critics::CrNodeInsideElement" , "selectors" : { "CrNodeInsideElement()" : 1 , "computeOffenders(UMLDeploymentDiagram)" : 3}},{ "className" : "org::argouml::notation::ui::InitNotationUI" , "selectors" : { "InitNotationUI()" : 1}},{ "className" : "org::argouml::language::cpp::profile::NormalProfileCpp" , "selectors" : { "NormalProfileCpp()" : 1 , "getProfileModels()" : 2}},{ "className" : "org::argouml::kernel::ProjectMember" , "selectors" : { "getType()" : 9 , "getZipName()" : 4 , "repair()" : 1}},{ "className" : "org::argouml::notation::providers::java::InitNotationJava" , "selectors" : { "InitNotationJava()" : 1}},{ "className" : "org::argouml::uml::ui::foundation::core::ActionAddClientDependencyAction" , "selectors" : { "ActionAddClientDependencyAction()" : 1 , "getSelected()" : 1}},{ "className" : "org::argouml::uml::ui::behavior::use_cases::ActionNewUseCaseExtensionPoint" , "selectors" : { "ActionNewUseCaseExtensionPoint()" : 1}},{ "className" : "org::argouml::language::csharp::importer::csparser::collections::Stack" , "selectors" : { "Stack()" : 1 , "peek()" : 8 , "pop()" : 22 , "push(E)" : 42}},{ "className" : "org::argouml::cognitive::checklist::Checklist" , "selectors" : { "Checklist()" : 12}},{ "className" : "org::argouml::uml::ui::AbstractActionNewModelElement" , "selectors" : { "AbstractActionNewModelElement()" : 18 , "AbstractActionNewModelElement(String)" : 17 , "getTarget()" : 33 , "setTarget(Object)" : 16}},{ "className" : "org::argouml::kernel::DefaultUndoManager::RedoStack" , "selectors" : { "RedoStack()" : 1 , "clear()" : 2 , "pop()" : 1 , "push(Interaction)" : 1}},{ "className" : "org::xml::sax::SAXException" , "selectors" : { "SAXException()" : 3 , "SAXException(Exception)" : 125 , "SAXException(String)" : 389 , "SAXException(String,Exception)" : 84 , "getCause()" : 6 , "getException()" : 84 , "getMessage()" : 220 , "org" : 134 , "toString()" : 40}},{ "className" : "org::argouml::ui::ProjectSettingsDialog" , "selectors" : { "ProjectSettingsDialog()" : 2 , "handleCancel()" : 2 , "handleOpen()" : 2 , "handleRefresh()" : 1 , "handleResetToDefault()" : 1 , "handleSave()" : 2 , "showDialog()" : 2 , "showDialog(JPanel)" : 1}},{ "className" : "org::argouml::persistence::MemberFilePersister" , "selectors" : { "getMainTag()" : 2 , "load(Project,InputSource)" : 4 , "load(Project,InputStream)" : 2 , "save(ProjectMember,OutputStream)" : 5}},{ "className" : "org::argouml::activity2::diagram::FigNamedConcavePentagon" , "selectors" : { "FigNamedConcavePentagon(Object,Rectangle,Color,Color,Object,DiagramSettings)" : 1 , "createBorder(Rectangle,Color,Color)" : 1}},{ "className" : "org::argouml::uml::diagram::static_structure::ui::InitClassDiagram" , "selectors" : { "InitClassDiagram()" : 1}},{ "className" : "org::argouml::persistence::PersistenceException" , "selectors" : { "PersistenceException(String)" : 2 , "PersistenceException(String,Throwable)" : 2 , "PersistenceException(Throwable)" : 2}},{ "className" : "org::argouml::transformer::SimpleStateTransformer::SimpleStateToCompositeState" , "selectors" : { "SimpleStateToCompositeState(Project,Object)" : 1 , "actionPerformed(ActionEvent)::LayerPerspective" : 1 , "getNodePresentationFor(Layer,Object)::FigNode" : 1}},{ "className" : "org::argouml::ui::explorer::rules::GoUseCaseToExtensionPoint" , "selectors" : { "GoUseCaseToExtensionPoint()" : 3}},{ "className" : "org::argouml::application::events::ArgoDiagramAppearanceEventListener" , "selectors" : { "diagramFontChanged(ArgoDiagramAppearanceEvent)" : 1}},{ "className" : "org::argouml::application::events::ArgoHelpEventListener" , "selectors" : { "helpChanged(ArgoHelpEvent)" : 1 , "helpRemoved(ArgoHelpEvent)" : 1}},{ "className" : "org::argouml::language::java::profile::ModelUtils" , "selectors" : { "findTypeInModel(String,Object)" : 3}},{ "className" : "org::argouml::language::csharp::importer::csparser::util::StringUtil" , "selectors" : { "removeChar(String,char[])" : 5}},{ "className" : "org::argouml::uml::diagram::DiagramAppearance" , "selectors" : { "DiagramAppearance()" : 1 , "getConfiguredFontName()" : 3 , "getInstance()" : 3 , "getStandardFont()" : 1}},{ "className" : "org::argouml::model::AggregationKind" , "selectors" : { "getAggregate()" : 19 , "getComposite()" : 22 , "getNone()" : 28}},{ "className" : "org::argouml::notation2::NotatedItem" , "selectors" : { "getMetaType()" : 3 , "getNotationLanguage()" : 1 , "getNotationType()" : 2 , "getOwner()" : 4 , "notationTextChanged(NotationTextEvent)" : 2}},{ "className" : "org::argouml::core::propertypanels::ui::RowSelector::DeleteAction" , "selectors" : { "DeleteAction()" : 1 , "actionPerformed(ActionEvent)::FigTextEditor" : 1}},{ "className" : "org::argouml::model::OrderingKind" , "selectors" : { "getOrdered()" : 4 , "getUnordered()" : 2}},{ "className" : "org::argouml::core::propertypanels::ui::RowSelector::CommandAction" , "selectors" : { "CommandAction(Command)" : 2 , "CommandAction(Command,String,Icon)" : 2}},{ "className" : "org::argouml::uml::reveng::ConfigPanelExtension" , "selectors" : { "createGridBagConstraints(boolean,boolean,boolean)" : 12 , "createGridBagConstraintsFinal()" : 1 , "getAttribute()" : 1 , "getDatatype()" : 1}},{ "className" : "javax::swing::plaf::FontUIResource" , "selectors" : { "FontUIResource(Font)" : 25 , "FontUIResource(String,int,int)" : 50}},{ "className" : "java::awt::datatransfer::UnsupportedFlavorException" , "selectors" : { "UnsupportedFlavorException(DataFlavor)" : 24 , "java" : 1}},{ "className" : "org::argouml::uml::diagram::static_structure::ui::FigPackage::HideStereotypeAction" , "selectors" : { "HideStereotypeAction()" : 1}},{ "className" : "org::argouml::application::api::Argo" , "selectors" : { "getDirectory()" : 2 , "getEncoding()" : 16}},{ "className" : "org::argouml::swingext::UpArrowIcon" , "selectors" : { "UpArrowIcon()" : 9 , "getIconHeight()" : 1 , "getIconWidth()" : 1}},{ "className" : "org::argouml::uml::ui::TabDocumentation" , "selectors" : { "TabDocumentation()" : 1 , "disableTextArea(JTextArea)" : 2 , "shouldBeEnabled(Object)" : 1 , "shouldBeEnabled(Object)::Fig" : 1}},{ "className" : "org::argouml::uml::diagram::static_structure::layout::ClassdiagramInheritanceEdge" , "selectors" : { "getCenterHigh()" : 1 , "getCenterLow()" : 1 , "getDownGap()" : 4 , "getOffset()" : 3 , "getVerticalOffset()" : 1 , "setOffset(int)" : 1}},{ "className" : "org::argouml::ui::explorer::rules::GoProjectToModel" , "selectors" : { "GoProjectToModel()" : 8}},{ "className" : "org::argouml::uml::diagram::state::ui::FigStateVertex" , "selectors" : { "FigStateVertex(Object,Rectangle,DiagramSettings)" : 12 , "getCircleGravityPoints()" : 2 , "redrawEnclosedFigs()" : 3 , "setEnclosingFig(???)" : 1 , "textEditStarted(???)" : 1 , "textEdited(???)" : 1}},{ "className" : "org::argouml::language::csharp::importer::csparser::statements::ThrowNode" , "selectors" : { "ThrowNode()" : 1}},{ "className" : "org::argouml::model::DirectionKind" , "selectors" : { "getInOutParameter()" : 11 , "getInParameter()" : 11 , "getOutParameter()" : 10 , "getReturnParameter()" : 7}},{ "className" : "java::awt::event::ActionListener" , "selectors" : { "actionPerformed(???)" : 1 , "actionPerformed(ActionEvent)" : 166}},{ "className" : "org::argouml::uml::ui::ActionSetSourcePath" , "selectors" : { "ActionSetSourcePath()" : 1 , "getNewDirectory()" : 1}},{ "className" : "org::argouml::uml::ui::ActionOpenProject" , "selectors" : { "ActionOpenProject()" : 3 , "doCommand(String)" : 1}},{ "className" : "org::argouml::ui::explorer::rules::GoModelElementToContents" , "selectors" : { "GoModelElementToContents()" : 2}},{ "className" : "org::argouml::profile::internal::ocl::CompositeModelInterpreter" , "selectors" : { "addModelInterpreter(ModelInterpreter)" : 3}},{ "className" : "org::argouml::cognitive::ui::GoListToDecisionsToItems" , "selectors" : { "GoListToDecisionsToItems()" : 2 , "getChildCountCond(Object,boolean)" : 2 , "getDecisionList()" : 3 , "hasChildren(Object)" : 1}},{ "className" : "org::argouml::ui::SettingsTabEnvironment" , "selectors" : { "SettingsTabEnvironment()" : 1 , "buildPanel()" : 1 , "buildPanel()::LabelledLayout" : 1 , "handleSettingsTabRefresh()" : 1}},{ "className" : "org::argouml::uml::diagram::PathContainer" , "selectors" : { "isPathVisible()" : 3 , "setFig(???)" : 1 , "setPathVisible(boolean)" : 3}},{ "className" : "org::argouml::application::events::ArgoEvent" , "selectors" : { "ArgoEvent(int,Object)" : 6 , "getEventEndRange()" : 1 , "getEventStartRange()" : 4 , "getEventType()" : 26}},{ "className" : "org::argouml::ui::ProjectBrowser::WindowCloser" , "selectors" : { "WindowCloser()" : 1}},{ "className" : "org::argouml::model::mdr::AbstractUmlModelFactoryMDR" , "selectors" : { "initialize(Object)" : 107}},{ "className" : "org::argouml::kernel::Command" , "selectors" : { "execute()" : 7 , "isRedoable()" : 1 , "isUndoable()" : 2 , "undo()" : 1}},{ "className" : "org::argouml::uml::diagram::ui::ModeLabelDrag" , "selectors" : { "ModeLabelDrag()" : 1 , "ModeLabelDrag(???)" : 1 , "mousePressed(MouseEvent)::FigEdge" : 1}},{ "className" : "org::argouml::model::mdr::XmiReference" , "selectors" : { "XmiReference(String,String)" : 1 , "getSystemId()" : 6 , "getXmiId()" : 5}},{ "className" : "org::argouml::activity2::diagram::FigNamedRect" , "selectors" : { "FigNamedRect(Object,Rectangle,Color,Color,Object,DiagramSettings)" : 1 , "createBorder(Rectangle,Color,Color)" : 1}},{ "className" : "org::argouml::application::events::ArgoHelpEvent" , "selectors" : { "ArgoHelpEvent(int,Object,String)" : 24 , "getHelpText()" : 2}},{ "className" : "org::argouml::uml::diagram::ui::ActionCompartmentDisplay" , "selectors" : { "ActionCompartmentDisplay(boolean,String,int)" : 10 , "getActions()" : 3}},{ "className" : "org::argouml::uml::diagram::static_structure::ui::SelectionClass::ModeCreateEdgeAndNodeWithComposition" , "selectors" : { "ModeCreateEdgeAndNodeWithComposition(???)" : 1}},{ "className" : "org::argouml::persistence::ProjectFileView" , "selectors" : { "ProjectFileView()" : 1 , "getInstance()" : 6}},{ "className" : "org::argouml::notation::providers::uml::ObjectFlowStateTypeNotationUml" , "selectors" : { "parseObjectFlowState1(Object,String)" : 1 , "toString(Object)" : 1}},{ "className" : "javax::swing::ButtonGroup" , "selectors" : { "ButtonGroup()" : 195 , "add(AbstractButton)" : 609 , "getElements()" : 17 , "getSelection()" : 21 , "javax" : 59 , "remove(AbstractButton)" : 4 , "setSelected(ButtonModel,boolean)" : 11}},{ "className" : "org::argouml::language::java::reveng::classfile::ShortAST" , "selectors" : { "setShortValue(short)" : 1}},{ "className" : "org::argouml::application::events::ArgoStatusEvent" , "selectors" : { "ArgoStatusEvent(int,Object,String)" : 6 , "getText()" : 4}},{ "className" : "org::argouml::core::propertypanels::ui::OldScrollList" , "selectors" : { "OldScrollList(DefaultListModel)" : 1 , "OldScrollList(ListModel,int)" : 1}},{ "className" : "org::argouml::configuration::ConfigurationKey" , "selectors" : { "getKey()" : 18 , "isChangedProperty(PropertyChangeEvent)" : 2}},{ "className" : "org::argouml::core::propertypanels::ui::UMLCollaborationRepresentedOperationComboBoxModel" , "selectors" : { "UMLCollaborationRepresentedOperationComboBoxModel(String,Object)" : 1}},{ "className" : "org::argouml::uml::diagram::collaboration::ui::CollabDiagramRenderer" , "selectors" : { "CollabDiagramRenderer()" : 1 , "getFigEdgeFor(GraphModel,Layer,Object,Map)::LayerPerspective" : 1 , "getFigNodeFor(GraphModel,Layer,Object,Map)::LayerPerspective" : 1}},{ "className" : "org::argouml::uml::cognitive::ProjectMemberTodoList" , "selectors" : { "ProjectMemberTodoList(String,Project)" : 5}},{ "className" : "org::argouml::uml::diagram::ui::ActionAddAssociationRole" , "selectors" : { "ActionAddAssociationRole(Object,boolean,String)" : 5 , "ActionAddAssociationRole(Object,boolean,String,String)" : 1}},{ "className" : "org::argouml::language::csharp::importer::csparser::main::Token" , "selectors" : { "Token(int)" : 56 , "Token(int,int)" : 9}},{ "className" : "org::argouml::core::propertypanels::ui::UMLClassifierParameterListModel" , "selectors" : { "getModelElements()" : 1}},{ "className" : "org::argouml::activity2::diagram::CreateDiagramElementAction" , "selectors" : { "CreateDiagramElementAction(Object,String,String,BaseDiagram)" : 1}},{ "className" : "org::argouml::configuration::ConfigurationFactory" , "selectors" : { "ConfigurationFactory()" : 1 , "getInstance()" : 1}},{ "className" : "org::argouml::uml::ui::UMLEditableComboBox::UMLComboBoxEditor" , "selectors" : { "UMLComboBoxEditor(boolean)" : 1 , "setShowIcon(boolean)" : 1}},{ "className" : "org::argouml::util::ChildGenerator" , "selectors" : { "childIterator(Object)" : 3}},{ "className" : "org::argouml::uml::diagram::static_structure::ui::FigInterface" , "selectors" : { "FigInterface(Object,Rectangle,DiagramSettings)" : 3 , "getEnclosingFig(???)" : 1 , "initialize(Rectangle)" : 1}},{ "className" : "org::argouml::ui::explorer::rules::GoNamespaceToDiagram" , "selectors" : { "GoNamespaceToDiagram()" : 4}},{ "className" : "org::argouml::model::euml::RunnableClass" , "selectors" : { "getParams()" : 94}},{ "className" : "org::argouml::core::propertypanels::model::GetterSetterManagerImpl::QualifierGetterSetter" , "selectors" : { "QualifierGetterSetter()" : 1 , "getOptions(Object,Collection<Class<?>>)" : 1}},{ "className" : "org::argouml::uml::cognitive::critics::CrCircularAssocClass" , "selectors" : { "CrCircularAssocClass()" : 1}},{ "className" : "org::argouml::ui::explorer::ExplorerTree::ExplorerTreeSelectionListener" , "selectors" : { "ExplorerTreeSelectionListener()" : 1}},{ "className" : "org::argouml::uml::diagram::static_structure::ui::SelectionComment" , "selectors" : { "SelectionComment(???)" : 1}},{ "className" : "org::argouml::uml::ui::foundation::core::ActionSetParameterDirectionKind" , "selectors" : { "ActionSetParameterDirectionKind()" : 1 , "getInstance()" : 1}},{ "className" : "java::util::HashSet<T>" , "selectors" : { "HashSet()" : 2504 , "HashSet(Collection<? extends E>)" : 374 , "HashSet(int)" : 171 , "HashSet(int,float)" : 7 , "addClassAndMethod(???)" : 4 , "open(???)" : 1 , "setLayoutData(???)" : 1}},{ "className" : "org::argouml::ui::explorer::PerspectiveConfigurator::OkListener" , "selectors" : { "OkListener()" : 1}},{ "className" : "org::argouml::model::mdr::XmiWriterMDRImpl" , "selectors" : { "XmiWriterMDRImpl(MDRModelImplementation,Object,OutputStream,String)" : 1 , "XmiWriterMDRImpl(MDRModelImplementation,Object,String)" : 1 , "XmiWriterMDRImpl(MDRModelImplementation,Object,String)::OutputConfig" : 1 , "write()::RefObject" : 1}},{ "className" : "org::argouml::uml::ui::foundation::core::ActionAddAssociationSpecification" , "selectors" : { "ActionAddAssociationSpecification()" : 1 , "getInstance()" : 1}},{ "className" : "org::argouml::uml::ui::UMLStimulusActionTextField" , "selectors" : { "update()" : 3}},{ "className" : "org::argouml::util::logging::SimpleTimer" , "selectors" : { "SimpleTimer()" : 1 , "mark()" : 2 , "mark(String)" : 17 , "result()" : 2}},{ "className" : "org::argouml::persistence::XmiFilePersister" , "selectors" : { "XmiFilePersister()" : 1 , "getExtension()" : 2 , "parseXmiExtensions(Project)" : 2 , "writeProject(Project,OutputStream,ProgressMgr)" : 1}},{ "className" : "org::argouml::model::UmlException" , "selectors" : { "UmlException(String)" : 10 , "UmlException(String,Throwable)" : 3 , "UmlException(Throwable)" : 8}},{ "className" : "org::argouml::notation::providers::StateBodyNotation" , "selectors" : { "StateBodyNotation(Object)" : 1}},{ "className" : "org::argouml::core::propertypanels::model::GetterSetterManager::OptionGetterSetter" , "selectors" : { "getOptions(Object,Collection<Class<?>>)" : 1 , "setOptions(Collection)" : 5}},{ "className" : "org::argouml::uml::ui::foundation::core::UMLOperationConcurrencyRadioButtonPanel" , "selectors" : { "getCommands()" : 1}},{ "className" : "org::argouml::language::csharp::importer::csparser::nodes::expressions::BaseNode" , "selectors" : { "AddTab(StringBuilder)" : 1 , "NewLine(StringBuilder)" : 68 , "ToSource(StringBuilder)" : 34 , "TraceModifiers(long,StringBuilder)" : 17}},{ "className" : "org::argouml::ui::GUIProjectSettingsTabInterface" , "selectors" : { "setProject(Project)" : 1}},{ "className" : "org::argouml::ui::explorer::rules::GoProjectToStateMachine" , "selectors" : { "GoProjectToStateMachine()" : 3}},{ "className" : "org::argouml::uml::cognitive::critics::CrUselessInterface" , "selectors" : { "CrUselessInterface()" : 1}},{ "className" : "org::argouml::uml::diagram::state::ui::ButtonActionNewChangeEvent" , "selectors" : { "ButtonActionNewChangeEvent()" : 3}},{ "className" : "org::argouml::ui::explorer::rules::OperationsNode" , "selectors" : { "OperationsNode(Object)" : 1 , "getParent()" : 2}},{ "className" : "org::argouml::util::PredicateStringMatch" , "selectors" : { "PredicateStringMatch(String[],int)" : 1 , "create(String)" : 3}},{ "className" : "org::argouml::core::propertypanels::ui::Ordered" , "selectors" : { "getModelElements()" : 1}},{ "className" : "org::argouml::uml::diagram::state::ui::ButtonActionNewCallEvent" , "selectors" : { "ButtonActionNewCallEvent()" : 3}},{ "className" : "org::argouml::uml::ui::behavior::common_behavior::ActionNewActionSequence" , "selectors" : { "ActionNewActionSequence()" : 1 , "getButtonInstance()" : 3}},{ "className" : "org::argouml::util::Predicate" , "selectors" : { "evaluate(Object)" : 7}},{ "className" : "org::argouml::model::euml::ChangeCommand" , "selectors" : { "ChangeCommand(EUMLModelImplementation,Runnable,String)" : 34 , "ChangeCommand(EUMLModelImplementation,Runnable,String,Object[])" : 44 , "isValid(String,Object[])" : 2 , "setObjects(Object[])" : 25 , "setObjects(Object[])::NotificationImpl" : 1}},{ "className" : "org::argouml::cognitive::ui::ToDoByOffender" , "selectors" : { "ToDoByOffender()" : 1}},{ "className" : "org::argouml::ui::explorer::rules::GoSignalToReception" , "selectors" : { "GoSignalToReception()" : 2}},{ "className" : "org::argouml::uml::ui::behavior::common_behavior::ActionNewCallAction" , "selectors" : { "ActionNewCallAction()" : 1 , "getButtonInstance()" : 3}},{ "className" : "org::argouml::uml::cognitive::critics::CrObjectWithoutComponent" , "selectors" : { "CrObjectWithoutComponent()" : 1 , "computeOffenders(UMLDeploymentDiagram)" : 3}},{ "className" : "org::argouml::uml::cognitive::critics::WizCueCards" , "selectors" : { "addCue(String)" : 5 , "getNumSteps()" : 2}},{ "className" : "org::argouml::model::XmiWriter" , "selectors" : { "write()" : 3}},{ "className" : "org::argouml::core::propertypanels::ui::UMLStructuralFeatureTypeComboBoxModel::ActionSetStructuralFeatureType" , "selectors" : { "ActionSetStructuralFeatureType()" : 1}},{ "className" : "org::argouml::profile::internal::ui::ProfilePropPanelFactory" , "selectors" : { "ProfilePropPanelFactory()" : 1}},{ "className" : "org::argouml::notation::NotationProviderFactory2" , "selectors" : { "NotationProviderFactory2()" : 1 , "addNotationProvider(int,NotationName,Class)" : 29 , "getInstance()" : 21 , "getNotationProvider(int,Object,NotationName)" : 4 , "getNotationProvider(int,Object,NotationRenderer,NotationName)" : 12 , "getNotationProviderClass(int,NotationName)" : 1 , "removeNotation(NotationName)" : 1 , "setDefaultNotation(NotationName)" : 1}},{ "className" : "org::argouml::ui::ZoomSliderButton::MyMouseListener" , "selectors" : { "MyMouseListener()" : 1}},{ "className" : "org::argouml::uml::ui::foundation::core::ActionSetClassActive" , "selectors" : { "ActionSetClassActive()" : 1 , "getInstance()" : 1}},{ "className" : "org::argouml::core::propertypanels::ui::UMLExpressionBodyField" , "selectors" : { "UMLExpressionBodyField(UMLExpressionModel,boolean)" : 2 , "update()" : 2}},{ "className" : "org::argouml::core::propertypanels::model::GetterSetterManagerImpl::DeferrableEventGetterSetter" , "selectors" : { "DeferrableEventGetterSetter()" : 1 , "getOptions(Object,Collection<Class<?>>)" : 1}},{ "className" : "org::argouml::uml::cognitive::critics::ClClassName" , "selectors" : { "ClClassName()" : 1 , "getTheInstance()" : 9}},{ "className" : "org::argouml::profile::ProfileModelLoader" , "selectors" : { "loadModel(ProfileReference)" : 4}},{ "className" : "org::argouml::language::java::reveng::Context" , "selectors" : { "Context(Context)" : 3 , "findClass(String,boolean)" : 2 , "findClassOnUserClasspath(String,boolean)" : 1 , "get(String,boolean,Profile)" : 10 , "getContext()" : 7 , "getJavaName(Object)" : 3}},{ "className" : "org::argouml::uml::cognitive::critics::CrInstanceWithoutClassifier" , "selectors" : { "CrInstanceWithoutClassifier()" : 1 , "computeOffenders(UMLDeploymentDiagram)" : 3}},{ "className" : "org::argouml::uml::reveng::Setting::PathListSelection" , "selectors" : { "PathListSelection(String,String,List<String>)" : 1}},{ "className" : "org::argouml::uml::ui::UMLTextArea2" , "selectors" : { "UMLTextArea2(UMLDocument)" : 4}},{ "className" : "org::argouml::uml::diagram::state::StateDiagramGraphModel" , "selectors" : { "StateDiagramGraphModel()" : 3 , "addEdge(Object)" : 3 , "canAddEdge(Object)" : 3 , "canAddNode(Object)" : 4 , "fireNodeAdded(???)" : 2 , "getMachine()" : 6 , "isRemoveFromDiagramAllowed(Collection)::Fig" : 1 , "setMachine(Object)" : 5}},{ "className" : "org::argouml::language::php::PHPDocumentor::StaticTag" , "selectors" : { "StaticTag()" : 1}},{ "className" : "org::argouml::language::php::PHPDocumentor::ParamTag" , "selectors" : { "ParamTag()" : 1 , "setContent(String)" : 1 , "setDescription(String)" : 1 , "setType(String)" : 2}},{ "className" : "java::awt::dnd::DropTargetDragEvent" , "selectors" : { "acceptDrag(int)" : 29 , "getCurrentDataFlavors()" : 8 , "getDropAction()" : 20 , "getLocation()" : 23 , "getTransferable()" : 1 , "isDataFlavorSupported(DataFlavor)" : 7 , "rejectDrag()" : 30}},{ "className" : "org::argouml::language::csharp::importer::csparser::types::StructNode" , "selectors" : { "StructNode()" : 1}},{ "className" : "org::argouml::language::csharp::importer::csparser::nodes::expressions::IdentifierExpression" , "selectors" : { "IdentifierExpression()" : 2 , "IdentifierExpression(String[])" : 4 , "ToSource(StringBuilder)" : 22}},{ "className" : "org::argouml::uml::diagram::activity::ui::FigPartition::SelectionPartition" , "selectors" : { "SelectionPartition(FigPartition)" : 1 , "setHandleBox(FigPartition,int,int,int,int)" : 4 , "updateHandleBox()" : 3}},{ "className" : "org::argouml::language::java::reveng::classfile::PackageContext" , "selectors" : { "PackageContext(Context,Object)" : 3 , "get(String,boolean)" : 2 , "setGeneratedTag(Object)" : 1}},{ "className" : "org::argouml::util::KeyEventUtils" , "selectors" : { "formatKeyStroke(KeyStroke)" : 5 , "getKeyText(int)" : 3 , "getModifiersText(int)" : 2 , "isActionEvent(KeyEvent)" : 1}},{ "className" : "org::argouml::uml::ui::behavior::common_behavior::ActionNewAction" , "selectors" : { "ActionNewAction()" : 8 , "actionPerformed(ActionEvent)" : 8 , "createAction()" : 1}},{ "className" : "org::argouml::ui::cmd::ActionExit" , "selectors" : { "ActionExit()" : 2 , "createToolBar(???)" : 1 , "doCommand(String)" : 1}},{ "className" : "org::argouml::language::java::reveng::classfile::ParserUtils::FormalTypeParameterLexer" , "selectors" : { "FormalTypeParameterLexer(String)" : 3 , "parse()" : 3}},{ "className" : "org::argouml::core::propertypanels::model::GetterSetterManagerImpl::OwnerScopeGetterSetter" , "selectors" : { "OwnerScopeGetterSetter()" : 1}},{ "className" : "org::argouml::uml::cognitive::critics::CrFinalSubclassed" , "selectors" : { "CrFinalSubclassed()" : 1}},{ "className" : "org::argouml::uml::ui::UMLModelElementCommentDocument" , "selectors" : { "UMLModelElementCommentDocument(boolean)" : 2}},{ "className" : "org::argouml::language::cpp::generator::AssociationEndHandler" , "selectors" : { "AssociationEndHandler(Object)" : 1 , "post()" : 1 , "pre()" : 1}},{ "className" : "org::argouml::uml::UUIDHelper" , "selectors" : { "getUUID(Object)" : 5 , "getUUID(Object)::Fig" : 1}},{ "className" : "javax::swing::event::ListDataEvent" , "selectors" : { "ListDataEvent(Object,int,int,int)" : 11 , "getIndex0()" : 16 , "getIndex1()" : 13}},{ "className" : "org::argouml::notation::providers::ClassifierRoleNotation" , "selectors" : { "ClassifierRoleNotation(Object)" : 1}},{ "className" : "org::argouml::core::propertypanels::model::GetterSetterManagerImpl::SubvertexGetterSetter::NewPseudoStateCommand" , "selectors" : { "NewPseudoStateCommand(Object,Object)" : 7}},{ "className" : "org::argouml::uml::diagram::deployment::ui::SelectionComponentInstance" , "selectors" : { "SelectionComponentInstance(???)" : 1 , "hideButtons(???)" : 1}},{ "className" : "org::argouml::ui::cmd::ShortcutChangedEvent" , "selectors" : { "ShortcutChangedEvent(Object,KeyStroke)" : 1 , "getKeyStroke()" : 2}},{ "className" : "org::argouml::uml::reveng::Import::ImportFileChooser" , "selectors" : { "ImportFileChooser(Import,String)" : 1 , "initChooser()" : 4}},{ "className" : "org::argouml::language::csharp::importer::csparser::main::Test" , "selectors" : { "parseFile()" : 1}},{ "className" : "org::argouml::ui::explorer::rules::GoLinkToStimuli" , "selectors" : { "GoLinkToStimuli()" : 2}},{ "className" : "com::nwalsh::xalan::FormatUnicodeCallout" , "selectors" : { "FormatUnicodeCallout(String,int,int,boolean)" : 1}},{ "className" : "org::argouml::core::propertypanels::ui::UMLTemplateParameterParameterComboBoxModel" , "selectors" : { "UMLTemplateParameterParameterComboBoxModel(Object)" : 1 , "getSelectedModelElement()" : 1}},{ "className" : "org::argouml::core::propertypanels::model::GetterSetterManagerImpl::InternalTransitionGetterSetter" , "selectors" : { "InternalTransitionGetterSetter()" : 1 , "getOptions(Object,Collection<Class<?>>)" : 1}},{ "className" : "org::argouml::notation::providers::NotationUtilityProviders" , "selectors" : { "addListenersForAction(NotationProvider,Object)" : 5 , "addListenersForEvent(NotationProvider,Object)" : 1 , "addListenersForTransition(NotationProvider,Object)" : 2}},{ "className" : "org::argouml::kernel::DelayedChangeNotify" , "selectors" : { "DelayedChangeNotify(DelayedVChangeListener,PropertyChangeEvent)" : 5}},{ "className" : "org::argouml::uml::reveng::FileImportUtils" , "selectors" : { "getList(File,boolean,SuffixFilter[],ProgressMonitor)" : 1 , "matchesSuffix(Object,SuffixFilter[])" : 6}},{ "className" : "org::argouml::profile::internal::ocl::uml14::ModelAccessModelInterpreter" , "selectors" : { "ModelAccessModelInterpreter()" : 1 , "internalOcl(Object,Map<String,Object>,String)" : 24}},{ "className" : "org::argouml::util::JavaRuntimeUtility" , "selectors" : { "getJreVersion()" : 1 , "isJre5()" : 1 , "isJreSupported()" : 1}},{ "className" : "java::awt::event::ItemEvent" , "selectors" : { "ItemEvent(ItemSelectable,int,Object,int)" : 18 , "getItem()" : 74 , "getItemSelectable()" : 17 , "getStateChange()" : 147}},{ "className" : "org::argouml::core::propertypanels::ui::Seperator" , "selectors" : { "Seperator()" : 1}},{ "className" : "org::argouml::uml::cognitive::critics::WizMEName" , "selectors" : { "doAction(int)" : 2 , "getInstructions()" : 1 , "makePanel(int)" : 3 , "setInstructions(String)" : 10 , "setMustEdit(boolean)" : 2 , "setSuggestion(String)" : 10}},{ "className" : "org::argouml::uml::util::PathComparator" , "selectors" : { "PathComparator()" : 10 , "comparePaths(Object,Object)" : 1}},{ "className" : "org::argouml::language::java::reveng::classfile::ParserUtils::FieldTypeSignatureLexer" , "selectors" : { "FieldTypeSignatureLexer(String)" : 5 , "parse()" : 4}},{ "className" : "org::argouml::core::propertypanels::ui::ScrollList" , "selectors" : { "getList()" : 5}},{ "className" : "org::argouml::uml::ui::PropPanel::GroupPanel" , "selectors" : { "GroupPanel(String)" : 1 , "GroupPanel(String)::GridLayout2" : 1}},{ "className" : "org::argouml::ui::cmd::NavigateTargetBackAction" , "selectors" : { "NavigateTargetBackAction()" : 2}},{ "className" : "org::argouml::language::java::reveng::classfile::ParserUtils::AbstractLexer" , "selectors" : { "AbstractLexer(String)" : 12 , "balancedBracketPosition(String,char,char)" : 5 , "firstIndexNotInside(char,char,char,String)" : 3 , "getRest()" : 17 , "parse()" : 2}},{ "className" : "org::argouml::uml::ui::ActionClassDiagram" , "selectors" : { "ActionClassDiagram()" : 9 , "isValidNamespace(Object)" : 2}},{ "className" : "org::argouml::model::PseudostateKind" , "selectors" : { "getChoice()" : 13 , "getDeepHistory()" : 12 , "getEntryPoint()" : 2 , "getExitPoint()" : 2 , "getFork()" : 13 , "getInitial()" : 19 , "getJoin()" : 13 , "getJunction()" : 13 , "getShallowHistory()" : 12}},{ "className" : "org::argouml::language::csharp::importer::csparser::interfaces::ISourceCode" , "selectors" : { "ToSource(StringBuilder)" : 1}},{ "className" : "org::argouml::ui::explorer::DnDExplorerTree::ArgoDropTargetListener" , "selectors" : { "ArgoDropTargetListener()" : 1 , "isDragAcceptable(DropTargetDragEvent)" : 2 , "isDropAcceptable(DropTargetDropEvent)" : 1}},{ "className" : "org::argouml::core::propertypanels::model::GetterSetterManagerImpl::ActionGetterSetter" , "selectors" : { "ActionGetterSetter()" : 1 , "getOptions(Object,Collection<Class<?>>)" : 1}},{ "className" : "org::argouml::language::csharp::importer::csparser::enums::TokenID" , "selectors" : { "getFieldName(int)" : 2}},{ "className" : "org::argouml::ui::cmd::ZoomActionProxy" , "selectors" : { "ZoomActionProxy(double)" : 5}},{ "className" : "java::beans::PropertyVetoException" , "selectors" : { "PropertyVetoException(String,PropertyChangeEvent)" : 6 , "getPropertyChangeEvent()" : 3}},{ "className" : "org::argouml::uml::generator::Language" , "selectors" : { "Language(String,String,Icon)" : 4 , "getName()" : 9 , "getTitle()" : 1}},{ "className" : "org::argouml::core::propertypanels::model::GetterSetterManagerImpl::RootGetterSetter" , "selectors" : { "RootGetterSetter()" : 1}},{ "className" : "org::argouml::language::csharp::importer::csparser::members::EventNode" , "selectors" : { "EventNode()" : 1}},{ "className" : "org::argouml::uml::diagram::ui::ActionSetAddAssociationMode" , "selectors" : { "ActionSetAddAssociationMode(Object,boolean,String)" : 14}},{ "className" : "org::argouml::ui::StylePanelFigNodeModelElement" , "selectors" : { "StylePanelFigNodeModelElement()" : 6 , "StylePanelFigNodeModelElement()::ColorRenderer" : 2 , "addToDisplayPane(JCheckBox)" : 9 , "itemStateChanged(ItemEvent)" : 6 , "refresh()" : 6}},{ "className" : "org::argouml::uml::diagram::ui::FigAssociation::EndDecoration" , "selectors" : { "EndDecoration(Object,DiagramSettings,int,int,int,int)" : 1 , "getArrowType()" : 2 , "getMult()" : 10 , "getOwner()" : 6 , "getRole()" : 8 , "initNotationProviders()" : 2 , "renderingChanged()" : 2}},{ "className" : "java::util::Observable" , "selectors" : { "Observable()" : 4 , "addObserver(Observer)" : 78 , "countObservers()" : 5 , "deleteObserver(Observer)" : 8 , "deleteObservers()" : 2 , "notifyObservers()" : 9 , "notifyObservers(Object)" : 18 , "setChanged()" : 22}},{ "className" : "org::argouml::uml::diagram::ui::ActionNavigability" , "selectors" : { "ActionNavigability(String,Object,Object,int)" : 1 , "getDescription(Object,Object,int)" : 1 , "newActionNavigability(Object,Object,int)" : 3}},{ "className" : "org::argouml::notation::providers::ExtensionPointNotation" , "selectors" : { "ExtensionPointNotation(Object)" : 1}},{ "className" : "org::argouml::util::PredicateType" , "selectors" : { "PredicateType(Class[])" : 3 , "PredicateType(Class[],int)" : 4 , "toString()" : 1}},{ "className" : "javax::swing::Action" , "selectors" : { "addPropertyChangeListener(PropertyChangeListener)" : 14 , "getValue(String)" : 158 , "isEnabled()" : 22 , "putValue(String,Object)" : 71 , "removePropertyChangeListener(PropertyChangeListener)" : 8 , "setEnabled(boolean)" : 293}},{ "className" : "org::argouml::core::propertypanels::model::GetterSetterManager::GetterSetter" , "selectors" : { "get(Object,Class<?>)" : 1 , "set(Object,Object)" : 1}},{ "className" : "org::argouml::notation::providers::java::AssociationEndNameNotationJava" , "selectors" : { "toString(Object,boolean)" : 1}},{ "className" : "org::argouml::uml::ui::ActionNavigateUpPreviousDown" , "selectors" : { "getFamily(Object)" : 1 , "getParent(Object)" : 1}},{ "className" : "org::argouml::core::propertypanels::ui::UMLAssociationLinkListModel" , "selectors" : { "UMLAssociationLinkListModel(Object)" : 1}},{ "className" : "org::argouml::persistence::OldModelMemberFilePersister" , "selectors" : { "OldModelMemberFilePersister()" : 1}},{ "className" : "org::argouml::application::events::ArgoProfileEvent" , "selectors" : { "ArgoProfileEvent(int,Object)" : 2}},{ "className" : "javax::swing::plaf::ColorUIResource" , "selectors" : { "ColorUIResource(Color)" : 78 , "ColorUIResource(int)" : 9 , "ColorUIResource(int,int,int)" : 132 , "javax" : 4}},{ "className" : "org::argouml::uml::reveng::SettingsTypes::UserString" , "selectors" : { "getDefaultString()" : 1 , "setUserString(String)" : 1}},{ "className" : "org::argouml::uml::diagram::deployment::DeploymentDiagramGraphModel" , "selectors" : { "DeploymentDiagramGraphModel()" : 1 , "addEdge(Object)" : 6 , "canAddEdge(Object)" : 8 , "canAddNode(Object)" : 1}},{ "className" : "java::util::EnumMap<T>" , "selectors" : { "EnumMap(Class<K>)" : 22}},{ "className" : "org::argouml::uml::diagram::ui::AbstractActionCheckBoxMenuItem" , "selectors" : { "AbstractActionCheckBoxMenuItem(String)" : 4 , "toggleValueOfTarget(Object)" : 1 , "valueOfTarget(Object)" : 1}},{ "className" : "org::argouml::uml::reveng::Setting" , "selectors" : { "Setting(String)" : 3 , "Setting(String,String)" : 2}},{ "className" : "org::argouml::taskmgmt::ProgressMonitor" , "selectors" : { "close()" : 2 , "isCanceled()" : 13 , "notifyMessage(String,String,String)" : 6 , "notifyNullAction()" : 1 , "setMaximumProgress(int)" : 7 , "updateMainTask(String)" : 7 , "updateProgress(int)" : 15 , "updateSubTask(String)" : 13}},{ "className" : "org::argouml::model::XmiReferenceRuntimeException" , "selectors" : { "XmiReferenceRuntimeException(String,Throwable)" : 2 , "getReference()" : 2}},{ "className" : "org::argouml::activity2::diagram::FigNamedConcavePentagon::Poly" , "selectors" : { "Poly()" : 1 , "setPolygon(???)" : 1}},{ "className" : "org::argouml::application::helpers::ApplicationVersion" , "selectors" : { "getStableVersion()" : 2 , "getVersion()" : 9 , "init(String,String)" : 1}},{ "className" : "org::argouml::ui::ArgoToolbarManager::ToolbarManagerMenuItemAction" , "selectors" : { "ToolbarManagerMenuItemAction(String,Object)" : 1 , "getKey()" : 1 , "getToolbars()" : 2}},{ "className" : "org::argouml::ui::explorer::rules::GoStatemachineToDiagram" , "selectors" : { "GoStatemachineToDiagram()" : 4}},{ "className" : "org::argouml::language::java::reveng::classfile::ClassifierNotFoundException" , "selectors" : { "ClassifierNotFoundException(String)" : 1}},{ "className" : "org::argouml::cognitive::ToDoListEvent" , "selectors" : { "ToDoListEvent(List<ToDoItem>)" : 3 , "getToDoItemList()" : 21}},{ "className" : "org::argouml::uml::diagram::deployment::ui::FigNodeInstance" , "selectors" : { "FigNodeInstance(Object,Rectangle,DiagramSettings)" : 2 , "getEnclosingFig(???)" : 1}},{ "className" : "org::argouml::uml::ui::behavior::common_behavior::ActionNewReturnAction" , "selectors" : { "ActionNewReturnAction()" : 1 , "getButtonInstance()" : 3}},{ "className" : "org::argouml::ui::JasonsBigTheme" , "selectors" : { "JasonsBigTheme()" : 1}},{ "className" : "org::argouml::uml::ui::PropPanel::TargettableButton" , "selectors" : { "TargettableButton(Action)" : 1}},{ "className" : "org::argouml::uml::diagram::state::ui::FigShallowHistoryState" , "selectors" : { "FigShallowHistoryState(Object,Rectangle,DiagramSettings)" : 3}},{ "className" : "org::argouml::uml::cognitive::critics::ClAttributeCompartment" , "selectors" : { "ClAttributeCompartment()" : 1 , "getTheInstance()" : 4}},{ "className" : "org::argouml::persistence::ZipFilePersister" , "selectors" : { "ZipFilePersister()" : 1 , "openZipStreamAt(URL,String)" : 1}},{ "className" : "org::argouml::language::csharp::importer::csparser::nodes::expressions::RefNode" , "selectors" : { "RefNode(ExpressionNode)" : 1}},{ "className" : "org::argouml::ui::TransferableModelElements" , "selectors" : { "TransferableModelElements(Collection)" : 1}},{ "className" : "org::argouml::uml::cognitive::critics::AbstractCrTooMany" , "selectors" : { "getThreshold()" : 7 , "setThreshold(int)" : 7}},{ "className" : "org::argouml::language::cpp::reveng::TypedefModeler" , "selectors" : { "TypedefModeler(Object,Object,ProfileCpp)" : 1 , "directDeclarator(String)" : 1}},{ "className" : "org::argouml::uml::cognitive::critics::CrInvalidJoinTriggerOrGuard" , "selectors" : { "CrInvalidJoinTriggerOrGuard()" : 1}},{ "className" : "org::argouml::language::csharp::importer::csparser::nodes::expressions::TypeOfExpression" , "selectors" : { "TypeOfExpression(ExpressionNode)" : 1}},{ "className" : "org::argouml::uml::ui::TabStereotype::SelectedListSelectionListener" , "selectors" : { "SelectedListSelectionListener()" : 1}},{ "className" : "org::argouml::uml::cognitive::UMLDecision" , "selectors" : { "UMLDecision(String,int)" : 16}},{ "className" : "org::argouml::model::VisibilityKind" , "selectors" : { "getPackage()" : 16 , "getPrivate()" : 22 , "getProtected()" : 19 , "getPublic()" : 26}},{ "className" : "org::argouml::core::propertypanels::model::GetterSetterManagerImpl::OwnedElementGetterSetter" , "selectors" : { "OwnedElementGetterSetter()" : 1 , "getOptions(Object,Collection<Class<?>>)" : 1}},{ "className" : "org::argouml::util::osdep::StartBrowser" , "selectors" : { "openUrl(String)" : 3 , "openUrl(URL)" : 1}},{ "className" : "org::argouml::core::propertypanels::ui::UMLClassifierRoleAvailableContentsListModel" , "selectors" : { "UMLClassifierRoleAvailableContentsListModel(Object)" : 1 , "buildModelList()" : 1 , "setTarget(Object)" : 1}},{ "className" : "org::argouml::ui::explorer::rules::GoCriticsToCritic" , "selectors" : { "GoCriticsToCritic()" : 8}},{ "className" : "org::argouml::ui::cmd::ActionGotoDiagram" , "selectors" : { "ActionGotoDiagram()" : 2}},{ "className" : "org::argouml::uml::ui::foundation::core::ActionSetBehavioralFeatureQuery" , "selectors" : { "ActionSetBehavioralFeatureQuery()" : 1 , "getInstance()" : 1}},{ "className" : "org::argouml::notation::providers::uml::ActionStateNotationUml" , "selectors" : { "toString(Object)" : 1}},{ "className" : "java::awt::Cursor" , "selectors" : { "Cursor(int)" : 83 , "getDefaultCursor()" : 89 , "getPredefinedCursor(int)" : 372 , "getType()" : 8}},{ "className" : "org::argouml::language::csharp::importer::bridge::ModifierMap" , "selectors" : { "getUmlModifierForVisibility(long)" : 6}},{ "className" : "org::argouml::cognitive::ui::ToDoItemAction" , "selectors" : { "ToDoItemAction(String,boolean)" : 2 , "getRememberedTarget()" : 3 , "isEnabled(Object)" : 1 , "updateEnabled(Object)" : 2}},{ "className" : "javax::swing::UIManager::LookAndFeelInfo" , "selectors" : { "LookAndFeelInfo(String,String)" : 1 , "UIManager" : 2 , "getClassName()" : 30 , "getName()" : 31}},{ "className" : "org::argouml::language::csharp::importer::csparser::types::EnumNode" , "selectors" : { "EnumNode()" : 2}},{ "className" : "org::argouml::uml::cognitive::critics::WizAddConstructor" , "selectors" : { "getCreateStereotype(Object)" : 1 , "setInstructions(String)" : 1}},{ "className" : "org::argouml::core::propertypanels::ui::UMLTagDefinitionTypedValuesListModel" , "selectors" : { "UMLTagDefinitionTypedValuesListModel(Object)" : 1}},{ "className" : "org::argouml::ui::SplashPanel" , "selectors" : { "SplashPanel(String)" : 2 , "getImage()" : 5}},{ "className" : "org::argouml::model::DataTypesFactory" , "selectors" : { "createActionExpression(String,String)" : 8 , "createBooleanExpression(String,String)" : 16 , "createExpression(String,String)" : 11 , "createIterationExpression(String,String)" : 3 , "createMultiplicity(String)" : 1 , "createProcedureExpression(String,String)" : 3 , "createTimeExpression(String,String)" : 4}},{ "className" : "org::argouml::uml::cognitive::critics::CrNoAssociations" , "selectors" : { "CrNoAssociations()" : 1 , "findAssociation(Object,int)" : 4}},{ "className" : "org::argouml::ui::ProgressMonitorWindow" , "selectors" : { "ProgressMonitorWindow(Frame,String)" : 2 , "updateProgress(int)" : 4}},{ "className" : "org::argouml::sequence2::diagram::ActionAddClassifierRole" , "selectors" : { "ActionAddClassifierRole()" : 1}},{ "className" : "org::argouml::language::java::reveng::PackageContext" , "selectors" : { "PackageContext(Context,Object)" : 5 , "get(String,boolean,Profile)" : 1 , "setGeneratedTag(Object)" : 1}},{ "className" : "org::argouml::core::propertypanels::ui::RowSelector::MovedModelElement" , "selectors" : { "MovedModelElement()" : 1 , "getElement()" : 6 , "setElement(Object)" : 5}},{ "className" : "org::argouml::profile::DefaultTypeStrategy" , "selectors" : { "getDefaultAttributeType()" : 2 , "getDefaultParameterType()" : 2 , "getDefaultReturnType()" : 2}},{ "className" : "org::argouml::cognitive::critics::SnoozeOrder" , "selectors" : { "SnoozeOrder()" : 1 , "getNow()" : 3 , "getSnoozed()" : 2 , "nextInterval(long)" : 1 , "snooze()" : 2 , "unsnooze()" : 2}},{ "className" : "org::argouml::ui::SwingWorker::ThreadVar" , "selectors" : { "ThreadVar(Thread)" : 1 , "clear()" : 2 , "get()" : 4}},{ "className" : "org::argouml::language::cpp::notation::NotationModuleCpp" , "selectors" : { "getNotationProviderFactory()" : 2 , "loadIcon()" : 1}},{ "className" : "org::argouml::ui::explorer::rules::GoMessageToAction" , "selectors" : { "GoMessageToAction()" : 2}},{ "className" : "org::argouml::activity2::diagram::FigNamedRect::Rect" , "selectors" : { "Rect(int,int,int,int,Color,Color)" : 1}},{ "className" : "org::argouml::model::AbstractActivityGraphsHelperDecorator" , "selectors" : { "AbstractActivityGraphsHelperDecorator(ActivityGraphsHelper)" : 1}},{ "className" : "org::argouml::language::php::PHPDocumentor::DocBlock" , "selectors" : { "DocBlock()" : 7 , "addTag(int,String)" : 1 , "disableTag(int)" : 8 , "enableTag(int)" : 20 , "setDefaultDescription(String)" : 4 , "setDescription(String)" : 5 , "setTag(Object)" : 1 , "setTag(String,String)" : 1 , "setTag(int,String)" : 36 , "setTags(Iterator)" : 6 , "toString(String)" : 2 , "wrapDescription(String,int)" : 1}},{ "className" : "org::argouml::uml::cognitive::critics::CrNoOperations" , "selectors" : { "CrNoOperations()" : 1 , "findInstanceOperationInInherited(Object,int)" : 2}},{ "className" : "org::argouml::profile::internal::ocl::uml14::Bag" , "selectors" : { "count(E)" : 3}},{ "className" : "org::argouml::ui::explorer::rules::GoProjectToProfileConfiguration" , "selectors" : { "GoProjectToProfileConfiguration()" : 8}},{ "className" : "org::argouml::language::csharp::importer::csparser::nodes::expressions::ConstantExpression" , "selectors" : { "ConstantExpression()" : 1 , "ToSource(StringBuilder)" : 2}},{ "className" : "org::argouml::ui::explorer::rules::GoOperationToCollaborationDiagram" , "selectors" : { "GoOperationToCollaborationDiagram()" : 1}},{ "className" : "org::argouml::ui::explorer::rules::AssociationsNode" , "selectors" : { "AssociationsNode(Object)" : 1 , "getParent()" : 2}},{ "className" : "org::argouml::model::euml::ChangeableKindEUMLImpl" , "selectors" : { "ChangeableKindEUMLImpl()" : 1 , "getChangeable()" : 1 , "getFrozen()" : 1}},{ "className" : "org::argouml::core::propertypanels::ui::UMLComboBox" , "selectors" : { "UMLComboBox(UMLComboBoxModel)" : 16 , "UMLComboBox(UMLComboBoxModel,boolean)" : 4 , "actionPerformed(ActionEvent)" : 1 , "doIt(ActionEvent)" : 1 , "getTarget()" : 18 , "removeNotify()" : 1}},{ "className" : "org::argouml::model::UmlHelper" , "selectors" : { "addListenersToModel(Object)" : 4 , "deleteCollection(Collection)" : 35 , "getDestination(Object)" : 5 , "getSource(Object)" : 5 , "isMovable(Object)" : 4 , "move(Object,Object,Direction)" : 5}},{ "className" : "org::argouml::uml::diagram::ui::ArgoFigGroup" , "selectors" : { "ArgoFigGroup(Object,DiagramSettings)" : 8 , "addFig(???)" : 2 , "calcBounds(???)" : 1 , "getProject()" : 3 , "getSettings()" : 9 , "removeFromDiagram(???)" : 1 , "renderingChanged()" : 4 , "setFillColor(???)" : 1 , "setFilled(???)" : 1 , "setLineColor(???)" : 1 , "setLineWidth(???)" : 1 , "setVisible(???)" : 1}},{ "className" : "org::argouml::uml::reveng::SettingsTypes::UniqueSelection" , "selectors" : { "getDefaultSelection()" : 1 , "getOptions()" : 1 , "getSelection()" : 4 , "setSelection(int)" : 1}},{ "className" : "org::argouml::uml::cognitive::critics::WizAssocComposite" , "selectors" : { "buildOptions()" : 1 , "getTriggerAssociation()" : 2}},{ "className" : "org::argouml::uml::diagram::use_case::UseCaseDiagramGraphModel" , "selectors" : { "UseCaseDiagramGraphModel()" : 1 , "addEdge(Object)" : 5 , "canAddEdge(Object)" : 6 , "canAddNode(Object)" : 1}},{ "className" : "org::argouml::ui::cmd::ActionSelectAll" , "selectors" : { "ActionSelectAll()" : 2 , "ActionSelectAll(String)" : 1}},{ "className" : "org::argouml::ui::SettingsTabSql::TableModelDomainMappings" , "selectors" : { "TableModelDomainMappings(Class)" : 1 , "getRowCount()" : 1 , "newElement(Object,Object)" : 3}},{ "className" : "org::argouml::model::mdr::UmlHelperMDRImpl" , "selectors" : { "UmlHelperMDRImpl(MDRModelImplementation)" : 1 , "newPosition(int,int,Direction)" : 11}},{ "className" : "org::argouml::ui::explorer::rules::GoStateToEntry" , "selectors" : { "GoStateToEntry()" : 2}},{ "className" : "org::argouml::notation::ui::NotationComboBox" , "selectors" : { "NotationComboBox()" : 2 , "refresh()" : 2}},{ "className" : "org::argouml::util::PredicateTrue" , "selectors" : { "PredicateTrue()" : 1 , "getInstance()" : 7}},{ "className" : "org::argouml::core::propertypanels::ui::SingleListFactory" , "selectors" : { "SingleListFactory()" : 1 , "createComponent(Object,String,List<Class<?>>)" : 1}},{ "className" : "org::argouml::core::propertypanels::ui::UMLComboBoxNavigator" , "selectors" : { "UMLComboBoxNavigator(String,UMLComboBox)" : 17 , "setButtonEnabled(Object)" : 3}},{ "className" : "org::argouml::model::AssociationChangeListener" , "selectors" : { "elementAdded(AddAssociationEvent)" : 1 , "elementRemoved(RemoveAssociationEvent)" : 1}},{ "className" : "org::argouml::deployment2::diagram::DeploymentDiagramGraphModel" , "selectors" : { "DeploymentDiagramGraphModel()" : 2}},{ "className" : "org::argouml::ui::explorer::rules::GoTransitiontoEffect" , "selectors" : { "GoTransitiontoEffect()" : 3}},{ "className" : "org::argouml::cognitive::Highlightable" , "selectors" : { "setHighlight(boolean)" : 6}},{ "className" : "javax::swing::tree::TreeModel" , "selectors" : { "addTreeModelListener(TreeModelListener)" : 8 , "getChild(Object,int)" : 15 , "getChildCount(Object)" : 20 , "getIndexOfChild(Object,Object)" : 1 , "getRoot()" : 59 , "isLeaf(Object)" : 9 , "removeTreeModelListener(TreeModelListener)" : 3}},{ "className" : "org::argouml::notation::providers::CallStateNotation" , "selectors" : { "CallStateNotation(Object)" : 1}},{ "className" : "org::argouml::uml::diagram::static_structure::ui::SelectionEnumeration" , "selectors" : { "SelectionEnumeration(???)" : 1}},{ "className" : "org::argouml::uml::generator::GeneratorManager" , "selectors" : { "GeneratorManager()" : 1 , "addGenerator(Language,CodeGenerator)" : 5 , "findLanguage(String)" : 3 , "getCodePath(Object)" : 4 , "getGenerator(Language)" : 4 , "getInstance()" : 15 , "getLanguages()" : 3 , "removeGenerator(Language)" : 6}},{ "className" : "org::argouml::core::propertypanels::ui::UMLCallEventOperationComboBoxModel::SetAction" , "selectors" : { "SetAction()" : 1}},{ "className" : "org::argouml::language::ui::LanguageComboBox" , "selectors" : { "LanguageComboBox()" : 1 , "refresh()" : 4}},{ "className" : "org::argouml::util::ArgoDialog" , "selectors" : { "ArgoDialog(String,boolean)" : 5 , "ArgoDialog(String,int,boolean)" : 12 , "actionPerformed(???)" : 5 , "init()" : 2 , "nameButton(AbstractButton,String)" : 22 , "nameButtons()" : 3 , "setFrame(Frame)" : 1 , "setVisible(???)" : 3}},{ "className" : "org::argouml::language::php::PHPDocumentor::BooleanTag" , "selectors" : { "BooleanTag(String)" : 3 , "setContent(boolean)" : 3}},{ "className" : "org::argouml::uml::cognitive::critics::CrCompInstanceWithoutNode" , "selectors" : { "CrCompInstanceWithoutNode()" : 1 , "computeOffenders(UMLDeploymentDiagram)" : 3}},{ "className" : "org::argouml::language::csharp::importer::csparser::main::Lexer" , "selectors" : { "Lexer(BufferedInputStream,String)" : 2 , "lex()" : 2 , "removeGenerics(String)" : 1}},{ "className" : "org::argouml::notation::InitNotation" , "selectors" : { "InitNotation()" : 1}},{ "className" : "org::argouml::core::propertypanels::model::GetterSetterManagerImpl::ClassifierGetterSetter::RemoveCommand" , "selectors" : { "RemoveCommand(Object,Object)" : 1}},{ "className" : "org::argouml::model::AbstractStateMachinesHelperDecorator" , "selectors" : { "AbstractStateMachinesHelperDecorator(StateMachinesHelper)" : 1}},{ "className" : "org::argouml::model::ScopeKind" , "selectors" : { "getClassifier()" : 3 , "getInstance()" : 2}},{ "className" : "org::argouml::core::propertypanels::model::GetterSetterManagerImpl::BaseGetterSetter::AddCommand" , "selectors" : { "AddCommand(Object)" : 1}},{ "className" : "org::argouml::ui::explorer::rules::GoEnumerationToLiterals" , "selectors" : { "GoEnumerationToLiterals()" : 2}},{ "className" : "org::argouml::core::propertypanels::ui::UMLMetaClassComboBoxModel" , "selectors" : { "UMLMetaClassComboBoxModel(String,Object)" : 1 , "getMetaClassNames()" : 2}},{ "className" : "org::argouml::util::ToolBarUtility" , "selectors" : { "addItemsToToolBar(JToolBar,Object[])" : 1 , "buildPopupToolBoxButton(Object,boolean)::PopupToolBoxButton" : 2 , "manageDefault(Object[],String)" : 15}},{ "className" : "org::argouml::ui::explorer::rules::GoClassifierToStructuralFeature" , "selectors" : { "GoClassifierToStructuralFeature()" : 3}},{ "className" : "org::argouml::cognitive::ui::ActionResolve" , "selectors" : { "ActionResolve()" : 1}},{ "className" : "org::argouml::persistence::PrivateHandler::NameVal" , "selectors" : { "NameVal(String,String)" : 1 , "getName()" : 2 , "getValue()" : 3}},{ "className" : "org::argouml::uml::ui::ActionSequenceDiagram" , "selectors" : { "ActionSequenceDiagram()" : 8}},{ "className" : "org::argouml::model::XmiReferenceException" , "selectors" : { "getReference()" : 1 , "org" : 1}},{ "className" : "org::argouml::uml::diagram::ui::ActionModifierAbstract" , "selectors" : { "ActionModifierAbstract(Object)" : 1 , "valueOfTarget(Object)" : 1}},{ "className" : "org::argouml::uml::diagram::deployment::ui::AbstractFigComponent" , "selectors" : { "AbstractFigComponent(Object,Rectangle,DiagramSettings)" : 2 , "clone()" : 1 , "getFigs(???)" : 1 , "initFigs()" : 1 , "initFigs()::FigRect" : 3 , "setBigPort(???)" : 1 , "setEnclosingFig(???)" : 6 , "setLineColor(Color)" : 1 , "setNameFig(???)" : 1 , "updateListeners(Object,Object)" : 2}},{ "className" : "javax::swing::border::EmptyBorder" , "selectors" : { "EmptyBorder(Insets)" : 6 , "EmptyBorder(int,int,int,int)" : 387 , "javax" : 1}},{ "className" : "javax::swing::border::EtchedBorder" , "selectors" : { "EtchedBorder()" : 36 , "EtchedBorder(int)" : 16 , "getHighlightColor(Component)" : 1 , "getShadowColor(Component)" : 1 , "javax" : 5}},{ "className" : "org::argouml::cognitive::DesignGoalsCM" , "selectors" : { "DesignGoalsCM()" : 1}},{ "className" : "java::util::EmptyStackException" , "selectors" : { "EmptyStackException()" : 18}},{ "className" : "org::argouml::ui::ActionProjectSettings" , "selectors" : { "ActionProjectSettings()" : 7}},{ "className" : "org::argouml::core::propertypanels::ui::NavigateNextAction" , "selectors" : { "NavigateNextAction(Object)" : 1}},{ "className" : "org::argouml::core::propertypanels::ui::UMLLinkAssociationComboBoxModel" , "selectors" : { "UMLLinkAssociationComboBoxModel(String,Object)" : 1}},{ "className" : "org::argouml::language::java::reveng::classfile::ParserUtils::ClassTypeSignatureLexer" , "selectors" : { "ClassTypeSignatureLexer(String)" : 6 , "parse()" : 5}},{ "className" : "org::argouml::notation::providers::ObjectFlowStateStateNotation" , "selectors" : { "ObjectFlowStateStateNotation(Object)" : 1}},{ "className" : "org::argouml::uml::generator::TempFileUtils" , "selectors" : { "createTempDir()" : 7 , "deleteDir(File)" : 7 , "readAllFiles(File)" : 4 , "readFileNames(File)" : 5 , "traverseDir(File,FileAction)" : 4}},{ "className" : "org::argouml::cognitive::ui::WizStepTextField" , "selectors" : { "WizStepTextField()" : 1 , "WizStepTextField(Wizard,String,String,String)" : 5 , "getText()" : 7}},{ "className" : "org::argouml::ui::SettingsTabAppearance" , "selectors" : { "SettingsTabAppearance()" : 1 , "buildPanel()" : 1 , "buildPanel()::LabelledLayout" : 1 , "setMetalThemeState()" : 2}},{ "className" : "org::argouml::deployment2::diagram::FigNode::FigCube" , "selectors" : { "FigCube(int,int,int,int,int)" : 1 , "setFilled(???)" : 1 , "setLineWidth(???)" : 1}},{ "className" : "org::argouml::kernel::DefaultUndoManager::UndoStack" , "selectors" : { "UndoStack()" : 1 , "clear()" : 1 , "pop()" : 1 , "push(Interaction)" : 2}},{ "className" : "org::argouml::uml::reveng::SettingsTypes::BooleanSelection" , "selectors" : { "isSelected()" : 1 , "setSelected(boolean)" : 1}},{ "className" : "org::argouml::uml::ui::ActionActivityDiagram" , "selectors" : { "ActionActivityDiagram()" : 8 , "getContext(Object)" : 1}},{ "className" : "org::argouml::core::propertypanels::ui::UMLComponentInstanceClassifierComboBoxModel::ActionSet" , "selectors" : { "ActionSet()" : 1}},{ "className" : "org::argouml::activity2::diagram::ActivityDiagramGraphModel" , "selectors" : { "ActivityDiagramGraphModel()" : 1}},{ "className" : "org::argouml::persistence::AbstractFilePersister::ProgressMgr" , "selectors" : { "ProgressMgr()" : 7 , "fireProgressEvent(long)" : 2 , "getNumberOfPhases()" : 1 , "nextPhase()" : 22 , "setNumberOfPhases(int)" : 8}},{ "className" : "org::argouml::moduleloader::ModuleInterface" , "selectors" : { "disable()" : 1 , "enable()" : 1 , "getInfo(int)" : 3 , "getName()" : 11}},{ "className" : "org::argouml::cognitive::ui::WizStepChoice" , "selectors" : { "WizStepChoice(Wizard,String,List<String>)" : 5 , "getSelectedIndex()" : 9}},{ "className" : "org::argouml::notation::ui::SettingsTabNotation" , "selectors" : { "SettingsTabNotation(int)" : 2 , "buildPanel()" : 1 , "createCheckBox(String)" : 9 , "createLabel(String)" : 1 , "getBoolean(ConfigurationKey)" : 10 , "handleSettingsTabRefresh()" : 2}},{ "className" : "org::argouml::uml::diagram::static_structure::ui::FigFeature" , "selectors" : { "FigFeature(Object,Rectangle,DiagramSettings)" : 2 , "propertyChange(PropertyChangeEvent)" : 1 , "removeFromDiagram()" : 1 , "updateOwnerScope(boolean)" : 2}},{ "className" : "org::argouml::configuration::Configuration" , "selectors" : { "addListener(ConfigurationKey,PropertyChangeListener)" : 15 , "getBoolean(ConfigurationKey)" : 9 , "getBoolean(ConfigurationKey,boolean)" : 32 , "getDouble(ConfigurationKey,double)" : 1 , "getFactory()" : 2 , "getInteger(ConfigurationKey)" : 3 , "getInteger(ConfigurationKey,int)" : 20 , "getString(ConfigurationKey)" : 44 , "getString(ConfigurationKey,String)" : 20 , "load()" : 1 , "makeKey(String)" : 8 , "makeKey(String,String)" : 39 , "makeKey(String,String,String)" : 35 , "makeKey(String,String,String,String)" : 4 , "makeKey(String,String,String,String,String)" : 12 , "removeKey(ConfigurationKey)" : 1 , "save()" : 2 , "save(boolean)" : 1 , "setBoolean(ConfigurationKey,boolean)" : 26 , "setInteger(ConfigurationKey,int)" : 23 , "setString(ConfigurationKey,String)" : 42}},{ "className" : "org::argouml::core::propertypanels::ui::UMLObjectFlowStateParameterListModel::ActionAddOFSParameter" , "selectors" : { "ActionAddOFSParameter()" : 1 , "getType(Object)" : 1}},{ "className" : "org::argouml::ui::cmd::ActionNewProfile" , "selectors" : { "ActionNewProfile()" : 2}},{ "className" : "org::argouml::uml::ui::UMLEditableComboBox" , "selectors" : { "UMLEditableComboBox(UMLComboBoxModel2,Action,boolean)" : 1 , "doOnEdit(Object)" : 2}},{ "className" : "org::argouml::state2::diagram::UMLStateDiagram" , "selectors" : { "UMLStateDiagram(String,Object)" : 1 , "createGraphModel()" : 1 , "getEdgeAction(Object)" : 1 , "getLabel(Object)" : 2 , "getLabelName()" : 1 , "getNodeAction(Object)" : 2 , "getPseudoAction(Object)" : 9 , "initialize(Object)" : 1 , "initialize(Object)::LayerPerspectiveMutable" : 1}},{ "className" : "org::argouml::uml::ui::behavior::state_machines::ActionNewSignalEvent" , "selectors" : { "ActionNewSignalEvent()" : 1 , "getSingleton()" : 3}},{ "className" : "org::argouml::persistence::XmiFormatException" , "selectors" : { "XmiFormatException(String,Throwable)" : 1 , "XmiFormatException(Throwable)" : 2}},{ "className" : "org::argouml::cognitive::ui::GoalsDialog" , "selectors" : { "GoalsDialog()" : 2 , "initMainPanel()" : 1 , "setVisible(???)" : 2}},{ "className" : "org::argouml::uml::cognitive::critics::CrOperNameConflict" , "selectors" : { "CrOperNameConflict()" : 1 , "signaturesMatch(Object,Object)" : 1}},{ "className" : "org::argouml::ocl::ArgoFacade" , "selectors" : { "ArgoFacade(Object)" : 4 , "getClassifier(String)::OclTypeException" : 1}},{ "className" : "org::argouml::profile::internal::ocl::uml14::OclType" , "selectors" : { "OclType(String)" : 4 , "getName()" : 2}},{ "className" : "org::argouml::ui::explorer::ActionPerspectiveConfig" , "selectors" : { "ActionPerspectiveConfig()" : 3 , "createToolBar(???)" : 1}},{ "className" : "org::argouml::uml::ui::AbstractActionRemoveElement" , "selectors" : { "AbstractActionRemoveElement()" : 1 , "AbstractActionRemoveElement(String)" : 7 , "getObjectToRemove()" : 13 , "getTarget()" : 7 , "isEnabled()" : 2 , "setObjectToRemove(Object)" : 5 , "setTarget(Object)" : 2}},{ "className" : "org::argouml::ui::ActionSettings" , "selectors" : { "ActionSettings()" : 2 , "actionPerformed(ActionEvent)" : 1}},{ "className" : "org::argouml::ui::explorer::rules::GoNodeToResidentComponent" , "selectors" : { "GoNodeToResidentComponent()" : 2}},{ "className" : "org::argouml::model::UmlChangeEvent" , "selectors" : { "UmlChangeEvent(Object,String,Object,Object,EventObject)" : 4 , "toString()" : 3}},{ "className" : "org::argouml::pattern::cognitive::critics::CrSingletonViolatedMissingStaticAttr" , "selectors" : { "CrSingletonViolatedMissingStaticAttr()" : 1}},{ "className" : "org::argouml::model::euml::ConcurrencyKindEUMLImpl" , "selectors" : { "ConcurrencyKindEUMLImpl()" : 1}},{ "className" : "org::argouml::model::ModelCommand" , "selectors" : { "execute()" : 2 , "isRedoable()" : 1 , "isUndoable()" : 1 , "undo()" : 1}},{ "className" : "org::argouml::application::LoadModules" , "selectors" : { "LoadModules()" : 1 , "huntForInternalModules()" : 1}},{ "className" : "org::argouml::ui::explorer::PerspectiveConfigurator::MoveDownListener" , "selectors" : { "MoveDownListener()" : 1}},{ "className" : "org::argouml::uml::cognitive::critics::WizOperName" , "selectors" : { "findNamespace(Object,Object)" : 2 , "getOptions()" : 1 , "setPossibleConstructor(boolean)" : 1}},{ "className" : "org::argouml::ui::explorer::rules::GoNamespaceToClassifierAndPackage" , "selectors" : { "GoNamespaceToClassifierAndPackage()" : 2}},{ "className" : "org::argouml::ui::cmd::PrintManager" , "selectors" : { "<Initializer>()::PrintAction" : 1 , "PrintManager()" : 1 , "getInstance()" : 3 , "print()" : 2 , "showPageSetupDialog()" : 1}},{ "className" : "org::argouml::ui::MenuBarFactory" , "selectors" : { "createApplicationMenuBar()" : 1}},{ "className" : "org::argouml::core::propertypanels::ui::UMLValueSpecificationPanel" , "selectors" : { "UMLValueSpecificationPanel(UMLValueSpecificationModel,String)" : 1 , "createField(String)" : 2 , "selectDefaultVS()" : 1 , "uiSelect()" : 1}},{ "className" : "org::argouml::cognitive::ui::ToDoByDecision" , "selectors" : { "ToDoByDecision()" : 1}},{ "className" : "org::argouml::uml::ui::ActionSaveProject" , "selectors" : { "ActionSaveProject()" : 1 , "ActionSaveProject(String,Icon)" : 1 , "internalSetEnabled(boolean)" : 1}},{ "className" : "org::argouml::language::php::PHPDocumentor::AuthorTag" , "selectors" : { "AuthorTag()" : 1 , "setEmail(String)" : 2 , "setName(String)" : 3}},{ "className" : "org::argouml::profile::internal::ocl::uml14::Uml14ModelInterpreter" , "selectors" : { "Uml14ModelInterpreter()" : 3 , "colToString(Collection)" : 1 , "toString(Object)" : 1}},{ "className" : "org::argouml::uml::diagram::deployment::ui::SelectionNodeInstance" , "selectors" : { "SelectionNodeInstance(???)" : 1}},{ "className" : "org::argouml::language::csharp::importer::csparser::structural::CompilationUnitNode" , "selectors" : { "CompilationUnitNode()" : 1 , "ToSource(StringBuilder)" : 1}},{ "className" : "org::argouml::model::AttributeChangeEvent" , "selectors" : { "AttributeChangeEvent(Object,String,Object,Object,EventObject)" : 9}},{ "className" : "org::argouml::ui::TabToDoTarget" , "selectors" : { "setTarget(Object)" : 3}},{ "className" : "org::argouml::uml::reveng::ui::ImportClasspathDialog::AddListener" , "selectors" : { "AddListener()" : 1}},{ "className" : "org::argouml::ui::explorer::rules::GoClassifierToCollaboration" , "selectors" : { "GoClassifierToCollaboration()" : 2}},{ "className" : "org::argouml::kernel::ProjectImpl::NamePCL" , "selectors" : { "NamePCL()" : 1}},{ "className" : "org::argouml::uml::cognitive::critics::CrUnnavigableAssoc" , "selectors" : { "CrUnnavigableAssoc()" : 1}},{ "className" : "org::argouml::uml::reveng::Import::SelectedLanguageListener" , "selectors" : { "SelectedLanguageListener(JTabbedPane)" : 1 , "updateTabbedPane()" : 1}},{ "className" : "org::argouml::uml::diagram::ui::FigDependency" , "selectors" : { "FigDependency(Object,DiagramSettings)" : 7 , "constructFigs()" : 1 , "createEndArrow()::ArrowHeadGreater" : 1 , "getDestPortFig(???)" : 1 , "getFig(???)" : 1 , "getSourcePortFig(???)" : 1 , "setDestFigNode(???)" : 1 , "setDestPortFig(???)" : 1 , "setSourceFigNode(???)" : 1 , "setSourcePortFig(???)" : 1}},{ "className" : "org::argouml::persistence::OldZargoFilePersister" , "selectors" : { "OldZargoFilePersister()" : 1}},{ "className" : "org::argouml::uml::cognitive::critics::CrMultipleShallowHistoryStates" , "selectors" : { "CrMultipleShallowHistoryStates()" : 1 , "computeOffenders(Object)" : 2}},{ "className" : "org::argouml::uml::reveng::idl::ParameterDeclaration" , "selectors" : { "getName()" : 2 , "getType()" : 1}},{ "className" : "org::argouml::uml::diagram::state::ui::ActionCreatePseudostate" , "selectors" : { "ActionCreatePseudostate(Object,String)" : 11}},{ "className" : "org::argouml::uml::diagram::ui::FigAssociationClass" , "selectors" : { "FigAssociationClass(DiagramEdgeSettings,DiagramSettings)" : 2 , "FigAssociationClass(DiagramEdgeSettings,DiagramSettings)::FigPoly" : 1 , "calcBounds(???)" : 1 , "getAssociationClass()" : 17 , "getFigEdgeAssociationClass()" : 2 , "removePathItem(???)" : 1}},{ "className" : "org::argouml::uml::diagram::ui::ActionStereotypeView" , "selectors" : { "ActionStereotypeView(FigNodeModelElement,String,int)" : 3 , "updateSelection()" : 2}},{ "className" : "org::argouml::core::propertypanels::ui::AbstractActionAddModelElement" , "selectors" : { "doIt(Collection)" : 1 , "getChoices()" : 2 , "getDialogTitle()" : 1 , "getSelected()" : 1 , "isExclusive()" : 1 , "isMultiSelect()" : 1}},{ "className" : "org::argouml::uml::diagram::ui::ActionRemoveFromDiagram" , "selectors" : { "ActionRemoveFromDiagram(String)" : 2}},{ "className" : "org::argouml::model::ModelCommandCreationObserver" , "selectors" : { "execute(ModelCommand)" : 1}},{ "className" : "org::argouml::ui::explorer::rules::GoModelToNode" , "selectors" : { "GoModelToNode()" : 2}},{ "className" : "org::argouml::application::helpers::ResourceLoader" , "selectors" : { "addResourceExtension(String)" : 2 , "addResourceLocation(String)" : 8 , "containsExtension(String)" : 1 , "containsLocation(String)" : 1 , "isInCache(String)" : 1 , "lookupIconResource(String)" : 12 , "lookupIconResource(String,String)" : 2 , "lookupIconResource(String,String,ClassLoader)" : 2 , "lookupIconUrl(String,ClassLoader)" : 2 , "toJavaIdentifier(String)" : 1}},{ "className" : "org::argouml::application::events::ArgoEventPump::Pair" , "selectors" : { "Pair(int,ArgoEventListener)" : 2 , "equals(Object)" : 1 , "getEventType()" : 3 , "getListener()" : 2}},{ "className" : "org::argouml::uml::diagram::ui::DnDJGraph" , "selectors" : { "DnDJGraph()" : 1 , "makeDropTarget()" : 5}},{ "className" : "org::argouml::language::php::PHPDocumentor::SimpleTag" , "selectors" : { "SimpleTag(String)" : 7}},{ "className" : "org::argouml::uml::ui::UMLUserInterfaceContainer" , "selectors" : { "getTarget()" : 3}},{ "className" : "com::nwalsh::saxon::Table" , "selectors" : { "convertLength(String)" : 4 , "correctRoundingError(String[])" : 2 , "initializeHash()" : 2}},{ "className" : "org::argouml::notation::providers::AssociationNameNotation" , "selectors" : { "AssociationNameNotation(Object)" : 2 , "initialiseListener(Object)" : 1}},{ "className" : "org::argouml::uml::diagram::static_structure::ui::SelectionSignal" , "selectors" : { "SelectionSignal(???)" : 1}},{ "className" : "org::argouml::cognitive::ui::KnowledgeTypeNode" , "selectors" : { "KnowledgeTypeNode(String)" : 11 , "getName()" : 8 , "getTypeList()" : 6}},{ "className" : "org::argouml::core::propertypanels::ui::UMLTransitionTriggerComboBoxModel::SetAction" , "selectors" : { "SetAction()" : 1}},{ "className" : "org::argouml::language::java::reveng::JavaParseException" , "selectors" : { "JavaParseException(String)" : 2}},{ "className" : "org::argouml::util::TokenSep" , "selectors" : { "TokenSep(String)" : 1 , "addChar(char)" : 1 , "getNext()" : 2 , "getString()" : 2 , "length()" : 3 , "reset()" : 1 , "setNext(TokenSep)" : 1}},{ "className" : "org::argouml::uml::cognitive::critics::CrOppEndConflict" , "selectors" : { "CrOppEndConflict()" : 1}},{ "className" : "org::argouml::core::propertypanels::ui::UMLOFSStateListModel::ActionAddOFSState" , "selectors" : { "ActionAddOFSState()" : 1 , "getType(Object)" : 1 , "removeTopStateFrom(Collection)" : 1}},{ "className" : "java::awt::datatransfer::Clipboard" , "selectors" : { "Clipboard(String)" : 2 , "addFlavorListener(FlavorListener)" : 1 , "getContents(Object)" : 28 , "getData(DataFlavor)" : 2 , "setContents(Transferable,ClipboardOwner)" : 53}},{ "className" : "org::argouml::ui::cmd::ActionShowXMLDump" , "selectors" : { "ActionShowXMLDump()" : 2 , "init(JDialog)" : 1}},{ "className" : "org::argouml::uml::cognitive::critics::CrInvalidHistory" , "selectors" : { "CrInvalidHistory()" : 1}},{ "className" : "org::argouml::activity2::diagram::FigNamedRRect" , "selectors" : { "FigNamedRRect(Object,Rectangle,Color,Color,Object,DiagramSettings)" : 1 , "createBorder(Rectangle,Color,Color)" : 1}},{ "className" : "org::argouml::core::propertypanels::ui::UMLInitialValueExpressionModel" , "selectors" : { "UMLInitialValueExpressionModel(Object)" : 1}},{ "className" : "org::argouml::model::Model" , "selectors" : { "execute(ModelCommand)" : 81 , "getActivityGraphsFactory()" : 5 , "getActivityGraphsHelper()" : 14 , "getAggregationKind()" : 69 , "getChangeableKind()" : 14 , "getCollaborationsFactory()" : 20 , "getCollaborationsHelper()" : 40 , "getCommonBehaviorFactory()" : 42 , "getCommonBehaviorHelper()" : 86 , "getConcurrencyKind()" : 27 , "getCopyHelper()" : 2 , "getCoreFactory()" : 125 , "getCoreHelper()" : 529 , "getDataTypesFactory()" : 43 , "getDataTypesHelper()" : 41 , "getDiagramInterchangeModel()" : 14 , "getDirectionKind()" : 39 , "getExtensionMechanismsFactory()" : 35 , "getExtensionMechanismsHelper()" : 90 , "getFacade()" : 5124 , "getMessageSort()" : 12 , "getMetaTypes()" : 544 , "getModelCommandCreationObserver()" : 1 , "getModelManagementFactory()" : 19 , "getModelManagementHelper()" : 142 , "getOrderingKind()" : 6 , "getPseudostateKind()" : 93 , "getPump()" : 165 , "getScopeKind()" : 5 , "getStateMachinesFactory()" : 51 , "getStateMachinesHelper()" : 113 , "getUmlFactory()" : 99 , "getUmlHelper()" : 18 , "getUseCasesFactory()" : 11 , "getUseCasesHelper()" : 15 , "getVisibilityKind()" : 83 , "getXmiReader()" : 7 , "getXmiWriter(Object,OutputStream,String)" : 3 , "initialise(String)" : 1 , "setImplementation(ModelImplementation)" : 1 , "setModelCommandCreationObserver(ModelCommandCreationObserver)" : 1}},{ "className" : "org::argouml::ui::ProjectActions" , "selectors" : { "ProjectActions()" : 1 , "determineRemoveEnabled()" : 3 , "getInstance()" : 7 , "getRedoAction()" : 1 , "getRemoveFromDiagramAction()" : 5 , "getUndoAction()" : 1 , "jumpToDiagramShowing(List)" : 2 , "setTarget(Object)" : 7}},{ "className" : "org::argouml::ui::explorer::rules::GoProjectToRoots" , "selectors" : { "GoProjectToRoots()" : 4}},{ "className" : "org::argouml::uml::diagram::ui::ActionAddExistingNodes" , "selectors" : { "ActionAddExistingNodes(String,Collection)" : 1}},{ "className" : "org::argouml::ui::targetmanager::TargetManager::TargetRemover" , "selectors" : { "TargetRemover()" : 1}},{ "className" : "org::argouml::uml::ui::ActionPaste" , "selectors" : { "ActionPaste()" : 1 , "getInstance()" : 12 , "isSystemClipBoardEmpty()" : 1}},{ "className" : "org::argouml::ui::targetmanager::TargetManager::HistoryRemover" , "selectors" : { "HistoryRemover()" : 1}},{ "className" : "org::argouml::language::java::reveng::classfile::ParserUtils::ThrowsSignatureLexer" , "selectors" : { "ThrowsSignatureLexer(String)" : 2 , "parse()" : 2}},{ "className" : "org::argouml::ui::explorer::rules::GoDiagramToEdge" , "selectors" : { "GoDiagramToEdge()" : 2 , "getChildren(Object)::Diagram" : 1}},{ "className" : "org::argouml::language::csharp::importer::CSharpImport" , "selectors" : { "doImportPass(Project,Collection,ImportSettings,ProgressMonitor,int,int)" : 1 , "getSuffixFilters()" : 1 , "init()" : 1 , "parseElements(Project,ImportSettings,ProgressMonitor,int,int)" : 1 , "parseFile(Project,File,ImportSettings,int)" : 1}},{ "className" : "org::argouml::ui::explorer::rules::GoProfileToCritics" , "selectors" : { "GoProfileToCritics()" : 8}},{ "className" : "org::argouml::cognitive::CompoundCritic" , "selectors" : { "CompoundCritic()" : 1 , "CompoundCritic(Critic,Critic)" : 5 , "CompoundCritic(Critic,Critic,Critic)" : 1 , "getCriticList()" : 2}},{ "className" : "com::nwalsh::xalan::FormatCallout" , "selectors" : { "areaLabel(Element)" : 4 , "formatCallout(???)" : 2}},{ "className" : "org::argouml::core::propertypanels::ui::UMLMultiplicityPanel" , "selectors" : { "UMLMultiplicityPanel(String,Object)" : 1 , "getTarget()" : 3}},{ "className" : "org::argouml::uml::ui::UMLModelElementTaggedValueProxy" , "selectors" : { "setTarget(Object)" : 3 , "setTarget(Object)::Fig" : 1}},{ "className" : "org::argouml::core::propertypanels::ui::UMLAssociationEndTypeComboBoxModel::ActionSetAssociationEndType" , "selectors" : { "ActionSetAssociationEndType()" : 1}},{ "className" : "org::argouml::uml::diagram::static_structure::ui::FigSubsystem" , "selectors" : { "FigSubsystem(Object,Rectangle,DiagramSettings)" : 1 , "constructFigs()" : 1 , "constructFigs()::FigPoly" : 1}},{ "className" : "org::argouml::language::sql::ColumnDefinition" , "selectors" : { "ColumnDefinition()" : 2 , "getDatatype()" : 2 , "getName()" : 5 , "getNullable()" : 2 , "setDatatype(String)" : 1 , "setName(String)" : 1 , "setNullable(Boolean)" : 5}},{ "className" : "org::argouml::persistence::TodoListMemberFilePersister" , "selectors" : { "TodoListMemberFilePersister()" : 1 , "load(Project,InputSource)" : 2}},{ "className" : "org::argouml::core::propertypanels::ui::UMLTextField" , "selectors" : { "UMLTextField(UMLPlainTextDocument)" : 1}},{ "className" : "org::argouml::model::UseCasesFactory" , "selectors" : { "buildActor(Object,Object)" : 1 , "buildExtensionPoint(Object)" : 6 , "createActor()" : 2 , "createExtensionPoint()" : 1 , "createUseCase()" : 3}},{ "className" : "org::argouml::ui::explorer::rules::IncomingDependencyNode" , "selectors" : { "IncomingDependencyNode(Object)" : 1 , "getParent()" : 2}},{ "className" : "org::argouml::ui::Clarifier" , "selectors" : { "hit(int,int)" : 4 , "setFig(???)" : 8 , "setToDoItem(ToDoItem)" : 8}},{ "className" : "org::argouml::ui::explorer::rules::GoStereotypeToTagDefinition" , "selectors" : { "GoStereotypeToTagDefinition()" : 2}},{ "className" : "org::argouml::core::propertypanels::ui::UMLStubStateComboBoxModel" , "selectors" : { "UMLStubStateComboBoxModel(String,Object)" : 1 , "isValidElement(Object)" : 1}},{ "className" : "org::argouml::uml::cognitive::critics::CrDupParamName" , "selectors" : { "CrDupParamName()" : 1}},{ "className" : "org::argouml::uml::generator::ui::ClassGenerationDialog" , "selectors" : { "ClassGenerationDialog(List<Object>)" : 2 , "ClassGenerationDialog(List<Object>,boolean)" : 2 , "buildLanguages()" : 1 , "doBrowse()" : 1 , "getClasspathEntries()" : 1 , "saveLanguage(Object,Language)" : 1 , "setClassTableColumnWidths()" : 1 , "setVisible(???)" : 3}},{ "className" : "org::argouml::uml::diagram::layout::Layouter" , "selectors" : { "layout()" : 1}},{ "className" : "org::argouml::uml::generator::TempFileUtils::FileAction" , "selectors" : { "act(File)" : 2}},{ "className" : "org::argouml::cognitive::ui::ActionGoToCritique" , "selectors" : { "ActionGoToCritique(ToDoItem)" : 4}},{ "className" : "org::argouml::ui::explorer::rules::GoProfileToModel" , "selectors" : { "GoProfileToModel()" : 8}},{ "className" : "org::argouml::persistence::OffenderXMLHelper" , "selectors" : { "OffenderXMLHelper(String)" : 1}},{ "className" : "org::argouml::uml::diagram::ui::FigUsage" , "selectors" : { "FigUsage(Object,DiagramSettings)" : 1}},{ "className" : "org::argouml::uml::diagram::activity::ui::ActionCreatePartition" , "selectors" : { "ActionCreatePartition(Object)" : 1}},{ "className" : "org::argouml::language::csharp::importer::csparser::nodes::expressions::ConditionalExpression" , "selectors" : { "ConditionalExpression(ExpressionNode,ExpressionNode,ExpressionNode)" : 1}},{ "className" : "org::argouml::uml::ProjectMemberModel" , "selectors" : { "ProjectMemberModel(Object,Project)" : 1 , "getModel()" : 2 , "setModel(Object)" : 1}},{ "className" : "org::argouml::core::propertypanels::ui::UMLGuardTransitionListModel" , "selectors" : { "UMLGuardTransitionListModel(Object,String)" : 1}},{ "className" : "org::argouml::core::propertypanels::ui::UMLObjectFlowStateParameterListModel::ActionNewOFSParameter" , "selectors" : { "ActionNewOFSParameter()" : 1 , "getType(Object)" : 1}},{ "className" : "org::argouml::uml::reveng::ImportSettings" , "selectors" : { "getImportLevel()" : 3 , "getInputSourceEncoding()" : 1}},{ "className" : "org::argouml::uml::cognitive::critics::CrWrongLinkEnds" , "selectors" : { "CrWrongLinkEnds()" : 1 , "computeOffenders(UMLDeploymentDiagram)" : 3}},{ "className" : "org::argouml::ui::cmd::ActionSystemInfo" , "selectors" : { "ActionSystemInfo()" : 2}},{ "className" : "org::argouml::ui::explorer::rules::PerspectiveRule" , "selectors" : { "getChildren(Object)" : 1 , "getDependencies(Object)" : 1}},{ "className" : "org::argouml::uml::diagram::ui::ActionStereotypeViewTextual" , "selectors" : { "ActionStereotypeViewTextual(FigNodeModelElement)" : 1}},{ "className" : "org::w3c::dom::traversal::NodeIterator" , "selectors" : { "detach()" : 1 , "nextNode()" : 16 , "previousNode()" : 1}},{ "className" : "org::argouml::language::csharp::importer::csparser::nodes::expressions::primitive::IntegralPrimitive" , "selectors" : { "IntegralPrimitive(String,IntegralType)" : 4}},{ "className" : "org::argouml::language::csharp::importer::csparser::nodes::expressions::BinaryExpression" , "selectors" : { "BinaryExpression(int)" : 1 , "init()" : 4}},{ "className" : "org::argouml::core::propertypanels::ui::UMLGeneralizationChildListModel" , "selectors" : { "UMLGeneralizationChildListModel(Object,String)" : 1}},{ "className" : "org::argouml::language::java::reveng::classfile::ParserUtils::TypeSignatureLexer" , "selectors" : { "TypeSignatureLexer(String)" : 4 , "parse()" : 4}},{ "className" : "org::argouml::uml::ui::foundation::core::ActionSetGeneralizableElementRoot" , "selectors" : { "ActionSetGeneralizableElementRoot()" : 1 , "getInstance()" : 1}},{ "className" : "org::argouml::uml::ui::UMLTextField2" , "selectors" : { "UMLTextField2(UMLDocument)" : 3}},{ "className" : "org::argouml::profile::init::InitProfileSubsystem" , "selectors" : { "InitProfileSubsystem()" : 1 , "init()" : 1}},{ "className" : "org::argouml::uml::diagram::static_structure::ui::SelectionInterface" , "selectors" : { "SelectionInterface(???)" : 1}},{ "className" : "org::argouml::application::events::ArgoNotationEvent" , "selectors" : { "ArgoNotationEvent(int,Object)" : 3}},{ "className" : "org::argouml::ui::targetmanager::TargetEvent" , "selectors" : { "TargetEvent(Object,String,Object[],Object[])" : 3 , "getAddedTargetCollection()" : 1 , "getAddedTargets()" : 2 , "getNewTarget()" : 68 , "getNewTargets()" : 4 , "getOldTargets()" : 2 , "getRemovedTargetCollection()" : 1 , "getRemovedTargets()" : 1}},{ "className" : "org::argouml::uml::diagram::ui::ActionSetMode" , "selectors" : { "ActionSetMode(Class,String)" : 3 , "ActionSetMode(Class,String,Object,String)" : 27 , "ActionSetMode(Class,String,String)" : 8 , "putIcon(String)" : 4 , "putToolTip(String)" : 5}},{ "className" : "org::argouml::ui::cmd::CmdSetPreferredSize" , "selectors" : { "CmdSetPreferredSize()" : 2}},{ "className" : "org::argouml::activity2::diagram::DiagramElementBuilder" , "selectors" : { "buildDiagramElement(FigBaseNode,String,Object,DiagramSettings)" : 2}},{ "className" : "org::argouml::uml::diagram::DiagramSettings" , "selectors" : { "DiagramSettings()" : 2 , "DiagramSettings(DiagramSettings)" : 2 , "getDefaultShadowWidth()" : 5 , "getDefaultStereotypeView()" : 3 , "getDefaultStereotypeViewInt()" : 3 , "getFont(int)" : 11 , "getFontBold()" : 3 , "getFontBoldItalic()" : 3 , "getFontItalic()" : 3 , "getFontName()" : 5 , "getFontPlain()" : 7 , "getFontSize()" : 5 , "getNotationSettings()" : 9 , "initFromConfiguration()" : 1 , "isShowBidirectionalArrows()" : 5 , "isShowBoldNames()" : 6 , "notifyOfChangedSettings()" : 3 , "recomputeFonts()" : 3 , "setDefaultShadowWidth(int)" : 5 , "setDefaultStereotypeView(StereotypeStyle)" : 1 , "setDefaultStereotypeView(int)" : 6 , "setFontName(String)" : 4 , "setFontSize(int)" : 4 , "setShowBidirectionalArrows(boolean)" : 5 , "setShowBoldNames(boolean)" : 3}},{ "className" : "org::argouml::model::euml::ExtensionMechanismsFactoryEUMLImpl" , "selectors" : { "ExtensionMechanismsFactoryEUMLImpl(EUMLModelImplementation)" : 1 , "createStereotype(???)" : 1 , "createTagDefinition()" : 1}},{ "className" : "org::argouml::uml::ui::foundation::core::ActionAddSupplierDependencyAction" , "selectors" : { "ActionAddSupplierDependencyAction()" : 1 , "getSelected()" : 1}},{ "className" : "org::argouml::profile::internal::ocl::LambdaEvaluator" , "selectors" : { "evaluate(Map<String,Object>,Object)" : 8}},{ "className" : "org::argouml::uml::diagram::ui::ImageSelection" , "selectors" : { "ImageSelection(Image)" : 1 , "isDataFlavorSupported(DataFlavor)" : 1}},{ "className" : "org::argouml::uml::diagram::ui::TabDiagram" , "selectors" : { "TabDiagram()" : 2 , "TabDiagram(String)" : 1 , "clone()::ToolBarFactory" : 1 , "getTarget()" : 1 , "select(Object[])" : 2 , "select(Object[])::Fig" : 1 , "select(Object[])::Vector" : 1 , "setNewTargets(TargetEvent)" : 3 , "setTarget(Object)" : 4 , "setToolBar(JToolBar)" : 3}},{ "className" : "org::argouml::core::propertypanels::ui::UMLExpressionPanel" , "selectors" : { "UMLExpressionPanel(UMLExpressionModel,String)" : 7}},{ "className" : "org::argouml::uml::diagram::static_structure::layout::ClassdiagramNoteEdge" , "selectors" : { "ClassdiagramNoteEdge(???)" : 1}},{ "className" : "org::argouml::uml::diagram::ui::FigSingleLineText" , "selectors" : { "FigSingleLineText(Object,Rectangle,DiagramSettings,boolean)" : 6 , "FigSingleLineText(Object,Rectangle,DiagramSettings,boolean,String)" : 2 , "FigSingleLineText(Object,Rectangle,DiagramSettings,boolean,String[])" : 4 , "FigSingleLineText(Rectangle,DiagramSettings,boolean)" : 2 , "addModelListener()" : 1 , "initialize()" : 1 , "propertyChange(PropertyChangeEvent)" : 2 , "removeFromDiagram()" : 1 , "renderingChanged()" : 1 , "setEditable(???)" : 1 , "setFilled(boolean)" : 2 , "setLineWidth(???)" : 4 , "setText()" : 5 , "setTextColor(???)" : 1 , "setTextFilled(???)" : 1 , "updateLayout(UmlChangeEvent)" : 1}},{ "className" : "org::argouml::uml::diagram::ui::ArgoFigUtil" , "selectors" : { "addChildDimensions(???)" : 3 , "addChildWidth(???)" : 1 , "getProject(ArgoFig)" : 5 , "markPosition(???)" : 5 , "markPosition(FigEdge,int,int,int,int,Color)::FigCircle" : 2 , "markPosition(FigEdge,int,int,int,int,Color)::FigRect" : 1}},{ "className" : "org::argouml::uml::reveng::ui::ImportStatusScreen" , "selectors" : { "ImportStatusScreen(Frame,String,String)" : 2 , "close()" : 3 , "isComplete()" : 2 , "notifyMessage(String,String,String)" : 1}},{ "className" : "org::argouml::core::propertypanels::ui::UMLMultiplicityPanel::MultiplicityComboBoxModel" , "selectors" : { "MultiplicityComboBoxModel(Object,String)" : 1 , "addElement(Object)" : 3 , "getAction()" : 1 , "isValidElement(Object)" : 1}},{ "className" : "org::argouml::core::propertypanels::model::GetterSetterManagerImpl::MessageGetterSetter" , "selectors" : { "MessageGetterSetter()" : 1 , "getOptions(Object,Collection<Class<?>>)" : 1}},{ "className" : "org::argouml::ui::cmd::ActionPrint" , "selectors" : { "ActionPrint()" : 3}},{ "className" : "org::argouml::core::propertypanels::ui::UMLActivityGraphPartitionListModel" , "selectors" : { "UMLActivityGraphPartitionListModel(Object)" : 1}},{ "className" : "org::argouml::uml::diagram::DiagramSettings::StereotypeStyle" , "selectors" : { "getEnum(int)" : 3 , "values()" : 1}},{ "className" : "org::argouml::gefext::ArgoFigSpline" , "selectors" : { "ArgoFigSpline(int,int)" : 1}},{ "className" : "org::argouml::cognitive::ui::WizStep" , "selectors" : { "WizStep()" : 1 , "actionPerformed(ActionEvent)" : 1 , "doBack()" : 1 , "doFinsh()" : 1 , "doHelp()" : 1 , "doNext()" : 1 , "enableButtons()" : 3 , "getMainPanel()" : 38 , "getWizard()" : 6 , "getWizardIcon()" : 5 , "insertUpdate(DocumentEvent)" : 1 , "setMnemonic(JButton,String)" : 4 , "setTarget(Object)" : 12 , "updateTabToDo()" : 3}},{ "className" : "org::argouml::uml::diagram::ui::ActionAddStereotype" , "selectors" : { "buildString(Object)" : 2}},{ "className" : "com::nwalsh::saxon::Callout" , "selectors" : { "Callout(int,Element,int,int)" : 3 , "getArea()" : 3 , "getCallout()" : 5 , "getColumn()" : 9 , "getLine()" : 7}},{ "className" : "org::argouml::ui::explorer::rules::GoSummaryToOutgoingDependency" , "selectors" : { "GoSummaryToOutgoingDependency()" : 2}},{ "className" : "org::argouml::uml::ui::behavior::state_machines::ActionNewTimeEvent" , "selectors" : { "ActionNewTimeEvent()" : 1 , "getSingleton()" : 3}},{ "className" : "org::argouml::uml::cognitive::critics::CrMultipleDeepHistoryStates" , "selectors" : { "CrMultipleDeepHistoryStates()" : 1 , "computeOffenders(Object)" : 2}},{ "className" : "org::argouml::configuration::IConfigurationFactory" , "selectors" : { "getConfigurationHandler()" : 2}},{ "className" : "org::argouml::uml::cognitive::critics::CrReservedName" , "selectors" : { "CrReservedName()" : 1 , "CrReservedName(List<String>)" : 2 , "isBuiltin(String)" : 1}},{ "className" : "org::argouml::core::propertypanels::model::GetterSetterManagerImpl::AssociationGetterSetter" , "selectors" : { "AssociationGetterSetter()" : 1 , "getOptions(Object,Collection<Class<?>>)" : 1}},{ "className" : "org::argouml::ui::explorer::PerspectiveConfigurator::LibraryListSelectionListener" , "selectors" : { "LibraryListSelectionListener()" : 1}},{ "className" : "org::argouml::ui::explorer::ExplorerPopup::OrderedMenuItem" , "selectors" : { "OrderedMenuItem(Action)" : 3}},{ "className" : "org::argouml::core::propertypanels::ui::UMLPartitionContentListModel::ActionAddPartitionContent" , "selectors" : { "ActionAddPartitionContent()" : 1}},{ "className" : "org::argouml::ui::explorer::PerspectiveComboBox" , "selectors" : { "PerspectiveComboBox()" : 1}},{ "className" : "org::argouml::core::propertypanels::ui::UMLLinkConnectionListModel" , "selectors" : { "getModelElements()" : 2}},{ "className" : "org::argouml::uml::diagram::activity::ui::SelectionCallState" , "selectors" : { "SelectionCallState(???)" : 1}},{ "className" : "javax::swing::plaf::metal::MetalIconFactory" , "selectors" : { "getInternalFrameCloseIcon(int)" : 1 , "getTreeFolderIcon()" : 5}},{ "className" : "org::argouml::profile::FigNodeStrategy" , "selectors" : { "getIconForStereotype(Object)" : 5}},{ "className" : "org::argouml::uml::ui::TabConstraints::ConstraintModel::CR" , "selectors" : { "CR(Object,int)" : 7 , "CR(int)" : 1 , "setName(String,EditingUtilities)::anonymous(DepthFirstAdapter)" : 2}},{ "className" : "org::argouml::uml::diagram::VisibilityContainer" , "selectors" : { "isVisibilityVisible()" : 2 , "setLineColor(???)" : 1 , "setVisibilityVisible(boolean)" : 3}},{ "className" : "org::argouml::profile::FileModelLoader" , "selectors" : { "FileModelLoader()" : 1 , "loadModel(ProfileReference)" : 1}},{ "className" : "org::argouml::core::propertypanels::ui::UMLValueSpecificationValueFieldOpaqueExpression" , "selectors" : { "updateFields()" : 1 , "updateModel()" : 3}},{ "className" : "org::argouml::ui::explorer::rules::GoClassifierToInstance" , "selectors" : { "GoClassifierToInstance()" : 2}},{ "className" : "org::argouml::util::osdep::OsUtil" , "selectors" : { "isMac()" : 1 , "isMacOSX()" : 4 , "isWin32()" : 1}},{ "className" : "org::argouml::model::mdr::ModelManagementFactoryMDRImpl" , "selectors" : { "ModelManagementFactoryMDRImpl(MDRModelImplementation)" : 1 , "copyPackage(Object,Object)::Namespace" : 1 , "createModel(???)" : 1 , "createPackage(???)" : 1 , "createSubsystem()" : 1 , "deleteElementImport(Object)" : 1 , "deleteModel(Object)" : 1 , "deletePackage(Object)" : 1 , "deleteSubsystem(Object)" : 1}},{ "className" : "java::awt::datatransfer::Transferable" , "selectors" : { "getTransferData(DataFlavor)" : 94 , "getTransferDataFlavors()" : 35 , "isDataFlavorSupported(DataFlavor)" : 32}},{ "className" : "org::argouml::uml::diagram::static_structure::ui::FigStereotypeDeclaration" , "selectors" : { "FigStereotypeDeclaration(Object,Rectangle,DiagramSettings)" : 1 , "constructFigs(Rectangle)" : 1}},{ "className" : "org::argouml::cognitive::ui::ActionNewToDoItem" , "selectors" : { "ActionNewToDoItem()" : 1}},{ "className" : "org::argouml::uml::DocumentationManager" , "selectors" : { "appendComment(StringBuffer,String,String,int)" : 2 , "defaultFor(Object,String)" : 1 , "getComments(Object)" : 2 , "getComments(Object,String,String,String)" : 2 , "getDocs(Object,String)" : 3 , "getDocs(Object,String,String,String,String)" : 2 , "hasDocs(Object)" : 3}},{ "className" : "org::argouml::core::propertypanels::ui::RowSelector::MoveTopAction" , "selectors" : { "MoveTopAction()" : 1}},{ "className" : "org::argouml::profile::UserDefinedProfile::FigNodeDescriptor" , "selectors" : { "FigNodeDescriptor()" : 1}},{ "className" : "org::argouml::ui::explorer::rules::GoProfileConfigurationToProfile" , "selectors" : { "GoProfileConfigurationToProfile()" : 8}},{ "className" : "org::argouml::state2::diagram::StateDiagramGraphModel" , "selectors" : { "StateDiagramGraphModel()" : 3 , "setHomeModel(Object)" : 1}},{ "className" : "org::argouml::language::cpp::reveng::CtorModeler" , "selectors" : { "CtorModeler(Object,Object,Object,boolean,ProfileCpp)" : 1}},{ "className" : "org::argouml::model::euml::OrderingKindEUMLImpl" , "selectors" : { "OrderingKindEUMLImpl()" : 1 , "getOrdered()" : 1 , "getUnordered()" : 1}},{ "className" : "org::argouml::core::propertypanels::ui::UMLValueSpecificationValueFieldLiteralString" , "selectors" : { "updateModel()" : 3}},{ "className" : "org::argouml::uml::util::namespace::StringNamespaceElement" , "selectors" : { "StringNamespaceElement(String)" : 3}},{ "className" : "org::argouml::notation2::NotationLanguage" , "selectors" : { "createNotationText(NotatedItem)" : 1}},{ "className" : "org::argouml::uml::ui::UMLExpressionModel2" , "selectors" : { "UMLExpressionModel2(UMLUserInterfaceContainer,String)" : 6 , "getBody()" : 1 , "getContainer()" : 4 , "getExpression()" : 2 , "getLanguage()" : 1 , "newExpression()" : 1 , "setBody(String)" : 3 , "setExpression(Object)" : 1 , "setExpression(String,String)" : 2 , "setLanguage(String)" : 3 , "setTarget(Object)" : 3 , "setTarget(Object)::Fig" : 1 , "targetChanged()" : 2}},{ "className" : "org::argouml::util::ThreadUtils" , "selectors" : { "checkIfInterrupted()" : 8}},{ "className" : "org::argouml::core::propertypanels::ui::ScrollListImpl" , "selectors" : { "ScrollListImpl(ListModel,int)" : 1 , "ScrollListImpl(SimpleListModel)" : 1}},{ "className" : "org::argouml::uml::ui::foundation::core::ActionSetAssociationEndNavigable" , "selectors" : { "ActionSetAssociationEndNavigable()" : 1 , "getInstance()" : 1}},{ "className" : "java::awt::event::MouseEvent" , "selectors" : { "MouseEvent(Component,int,long,int,int,int,int,boolean)" : 14 , "MouseEvent(Component,int,long,int,int,int,int,boolean,int)" : 3 , "getButton()" : 101 , "getClickCount()" : 236 , "getPoint()" : 361 , "getX()" : 610 , "getY()" : 575 , "isPopupTrigger()" : 129 , "translatePoint(int,int)" : 5}},{ "className" : "org::argouml::i18n::Translator" , "selectors" : { "addClassLoader(ClassLoader)" : 2 , "getLocales()" : 1 , "getName(String)" : 1 , "getSystemDefaultLocale()" : 1 , "init(String)" : 3 , "initInternal(String)" : 1 , "loadBundle(String)" : 1 , "localize(String)" : 1112 , "localize(String,Object[])" : 42 , "messageFormat(String,Object[])" : 48 , "setLocale(Locale)" : 3 , "setLocale(String)" : 3}},{ "className" : "org::argouml::uml::cognitive::critics::CrNoOutgoingTransitions" , "selectors" : { "CrNoOutgoingTransitions()" : 1 , "isSomeSubvertexOf(Object,Object)" : 2}},{ "className" : "org::argouml::core::propertypanels::ui::UMLDefaultValueExpressionModel" , "selectors" : { "UMLDefaultValueExpressionModel(Object)" : 1}},{ "className" : "org::argouml::ui::cmd::NavigateTargetForwardAction" , "selectors" : { "NavigateTargetForwardAction()" : 2}},{ "className" : "org::argouml::model::Facade" , "selectors" : { "equalsPseudostateKind(Object,Object)" : 23 , "getAction(Object)" : 27 , "getActions(Object)" : 6 , "getActivatedMessages(Object)" : 4 , "getActivator(Object)" : 18 , "getActivityGraph(Object)" : 3 , "getActualArguments(Object)" : 6 , "getAddition(Object)" : 4 , "getAggregation(Object)" : 2 , "getAggregation1(Object)" : 5 , "getAggregation2(Object)" : 1 , "getAlias(Object)" : 2 , "getAnnotatedElements(Object)" : 7 , "getArguments(Object)" : 2 , "getAssociatedClasses(Object)" : 1 , "getAssociation(Object)" : 64 , "getAssociationEnd(Object,Object)" : 3 , "getAssociationEnds(Object)" : 52 , "getAssociationRoles(Object)" : 2 , "getAssociations(Object)" : 1 , "getAttributes(Object)" : 23 , "getBase(Object)" : 21 , "getBaseClasses(Object)" : 7 , "getBases(Object)" : 18 , "getBehavioralFeature(Object)" : 7 , "getBehaviors(Object)" : 11 , "getBinding(Object)" : 1 , "getBody(Object)" : 71 , "getBound(Object)" : 3 , "getChangeExpression(Object)" : 4 , "getChangeability(Object)" : 9 , "getChildren(Object)" : 2 , "getClassifier(Object)" : 11 , "getClassifiers(Object)" : 18 , "getClientDependencies(Object)" : 24 , "getClients(Object)" : 14 , "getCollaborations(Object)" : 5 , "getComments(Object)" : 4 , "getCommunicationConnection(Object)" : 1 , "getComponentInstance(Object)" : 8 , "getConcurrency(Object)" : 12 , "getCondition(Object)" : 3 , "getConnections(Object)" : 83 , "getConstrainedElements(Object)" : 3 , "getConstrainingElements(Object)" : 2 , "getConstraints(Object)" : 7 , "getContainer(Object)" : 38 , "getContents(Object)" : 4 , "getContext(Object)" : 20 , "getContexts(Object)" : 5 , "getCreateActions(Object)" : 2 , "getDataValue(Object)" : 2 , "getDefaultElement(Object)" : 2 , "getDefaultValue(Object)" : 7 , "getDeferrableEvents(Object)" : 6 , "getDeployedComponents(Object)" : 3 , "getDeploymentLocations(Object)" : 5 , "getDiscriminator(Object)" : 4 , "getDispatchAction(Object)" : 3 , "getDoActivity(Object)" : 11 , "getEffect(Object)" : 9 , "getElementImports(Object)" : 1 , "getElementImports2(Object)" : 2 , "getElementResidences(Object)" : 10 , "getEntry(Object)" : 19 , "getEnumeration(Object)" : 5 , "getEnumerationLiterals(Object)" : 10 , "getExit(Object)" : 11 , "getExpression(Object)" : 27 , "getExtendedElements(Object)" : 3 , "getExtenders(Object)" : 1 , "getExtends(Object)" : 7 , "getExtension(Object)" : 4 , "getExtensionPoints(Object)" : 12 , "getFeatures(Object)" : 27 , "getGeneral(Object)" : 23 , "getGeneralization(Object,Object)" : 3 , "getGeneralizations(Object)" : 28 , "getGuard(Object)" : 13 , "getImportedElement(Object)" : 1 , "getImportedElements(Object)" : 4 , "getInStates(Object)" : 8 , "getIncluders(Object)" : 1 , "getIncludes(Object)" : 6 , "getIncomings(Object)" : 14 , "getInitialValue(Object)" : 8 , "getInnerContainingModel(Object)" : 3 , "getInstance(Object)" : 10 , "getInstances(Object)" : 1 , "getInteraction(Object)" : 12 , "getInteractions(Object)" : 4 , "getInternalTransitions(Object)" : 12 , "getKind(Object)" : 50 , "getLifeline(Object)" : 4 , "getLink(Object)" : 1 , "getLinkEnds(Object)" : 7 , "getLinks(Object)" : 2 , "getLocation(Object)" : 4 , "getLower(Object)" : 9 , "getMessages(Object)" : 7 , "getMetatypeNames()" : 1 , "getMethods(Object)" : 4 , "getModelElement(Object)" : 8 , "getModelElementAssociated(Object)" : 1 , "getModelElementContainer(Object)" : 18 , "getModelElementContents(Object)" : 7 , "getMultiplicity(Object)" : 25 , "getName(Object)" : 540 , "getNamespace(Object)" : 174 , "getNextEnd(Object)" : 4 , "getNodeInstance(Object)" : 3 , "getOperation(Object)" : 16 , "getOperations(Object)" : 27 , "getOperationsAndReceptions(Object)" : 3 , "getOrdering(Object)" : 6 , "getOtherAssociationEnds(Object)" : 6 , "getOutgoings(Object)" : 18 , "getOwnedElements(Object)" : 30 , "getOwner(Object)" : 58 , "getPackage(Object)" : 2 , "getParameter(Object)" : 6 , "getParameters(Object)" : 39 , "getParametersList(Object)" : 3 , "getPartitions(Object)" : 2 , "getPowertype(Object)" : 4 , "getPowertypeRanges(Object)" : 3 , "getPredecessors(Object)" : 10 , "getQualifiers(Object)" : 3 , "getRaisedExceptions(Object)" : 1 , "getRaisedSignals(Object)" : 4 , "getReceivedMessages(Object)" : 4 , "getReceivedStimuli(Object)" : 1 , "getReceiver(Object)" : 15 , "getReceptions(Object)" : 4 , "getRecurrence(Object)" : 4 , "getReferenceState(Object)" : 6 , "getReferenceValue(Object)" : 2 , "getRepresentedClassifier(Object)" : 7 , "getRepresentedOperation(Object)" : 6 , "getResident(Object)" : 5 , "getResidentElements(Object)" : 8 , "getResidents(Object)" : 3 , "getRoot(Object)" : 15 , "getRootElements()" : 3 , "getScript(Object)" : 14 , "getSender(Object)" : 13 , "getSentMessages(Object)" : 5 , "getSentStimuli(Object)" : 1 , "getSignal(Object)" : 7 , "getSource(Object)" : 16 , "getSourceFlows(Object)" : 2 , "getSources(Object)" : 1 , "getSpecializations(Object)" : 20 , "getSpecific(Object)" : 12 , "getSpecification(Object)" : 7 , "getSpecifications(Object)" : 9 , "getState(Object)" : 2 , "getStateMachine(Object)" : 10 , "getStereotypes(Object)" : 44 , "getStimuli(Object)" : 3 , "getStructuralFeatures(Object)" : 4 , "getSubmachine(Object)" : 22 , "getSubmachineStates(Object)" : 2 , "getSubvertices(Object)" : 15 , "getSuccessors(Object)" : 9 , "getSupplierDependencies(Object)" : 20 , "getSuppliers(Object)" : 23 , "getTag(Object)" : 9 , "getTagDefinition(Object)" : 4 , "getTagDefinitions(Object)" : 10 , "getTagOfTag(Object)" : 13 , "getTaggedValue(Object,String)" : 42 , "getTaggedValueValue(Object,String)" : 21 , "getTaggedValues(Object)" : 18 , "getTaggedValuesCollection(Object)" : 19 , "getTarget(Object)" : 15 , "getTargetFlows(Object)" : 2 , "getTargetScope(Object)" : 5 , "getTargets(Object)" : 1 , "getTemplate(Object)" : 2 , "getTemplateParameters(Object)" : 6 , "getTipString(Object)" : 2 , "getTop(Object)" : 18 , "getTransition(Object)" : 5 , "getTransitions(Object)" : 7 , "getTrigger(Object)" : 13 , "getTriggers(Object)" : 1 , "getType(Object)" : 151 , "getTypedValues(Object)" : 3 , "getUMLClassName(Object)" : 12 , "getUUID(Object)" : 2 , "getUmlVersion()" : 82 , "getUpper(Object)" : 22 , "getUseCase(Object)" : 3 , "getValue(Object)" : 9 , "getValueOfTag(Object)" : 38 , "getValueOfTag(Object,Object)" : 2 , "getVisibility(Object)" : 21 , "getWhen(Object)" : 4 , "hasReturnParameterDirectionKind(Object)" : 1 , "isA(String,Object)" : 3 , "isAASynchCallMessage(Object)" : 1 , "isAASynchSignalMessage(Object)" : 1 , "isAAbstraction(Object)" : 13 , "isAAcceptEventAction(Object)" : 1 , "isAAction(Object)" : 6 , "isAActionSequence(Object)" : 2 , "isAActionState(Object)" : 6 , "isAActivityEdge(Object)" : 2 , "isAActivityGraph(Object)" : 8 , "isAActivityNode(Object)" : 2 , "isAActor(Object)" : 14 , "isAAppliedProfileElement(Object)" : 2 , "isAArgument(Object)" : 1 , "isAArtifact(Object)" : 1 , "isAAssociation(Object)" : 46 , "isAAssociationClass(Object)" : 15 , "isAAssociationEnd(Object)" : 39 , "isAAssociationEndRole(Object)" : 1 , "isAAssociationRole(Object)" : 20 , "isAAttribute(Object)" : 32 , "isABehavioralFeature(Object)" : 15 , "isABinding(Object)" : 1 , "isACallAction(Object)" : 18 , "isACallEvent(Object)" : 10 , "isACallState(Object)" : 2 , "isAChangeEvent(Object)" : 8 , "isAClass(Object)" : 96 , "isAClassifier(Object)" : 134 , "isAClassifierInState(Object)" : 13 , "isAClassifierRole(Object)" : 20 , "isACollaboration(Object)" : 11 , "isAComment(Object)" : 48 , "isAComponent(Object)" : 25 , "isAComponentInstance(Object)" : 15 , "isAComponentRealization(Object)" : 1 , "isACompositeState(Object)" : 16 , "isAConcurrentRegion(Object)" : 4 , "isAConnector(Object)" : 4 , "isAConnectorEnd(Object)" : 2 , "isAConstraint(Object)" : 7 , "isACreateMessage(Object)" : 1 , "isADataType(Object)" : 11 , "isADataValue(Object)" : 1 , "isADeleteMessage(Object)" : 1 , "isADependency(Object)" : 19 , "isADirectedRelationship(Object)" : 1 , "isAElement(Object)" : 7 , "isAElementImport(Object)" : 5 , "isAElementResidence(Object)" : 4 , "isAEnumeration(Object)" : 14 , "isAEnumerationLiteral(Object)" : 6 , "isAEvent(Object)" : 8 , "isAException(Object)" : 7 , "isAExpression(Object)" : 11 , "isAExtend(Object)" : 5 , "isAExtension(Object)" : 1 , "isAExtensionPoint(Object)" : 3 , "isAFeature(Object)" : 19 , "isAFinalState(Object)" : 11 , "isAFlow(Object)" : 3 , "isAGeneralizableElement(Object)" : 19 , "isAGeneralization(Object)" : 21 , "isAGuard(Object)" : 2 , "isAInclude(Object)" : 3 , "isAInstance(Object)" : 12 , "isAInstanceSpecification(Object)" : 3 , "isAInteraction(Object)" : 4 , "isAInterface(Object)" : 61 , "isALifeline(Object)" : 1 , "isALink(Object)" : 17 , "isAMessage(Object)" : 24 , "isAMethod(Object)" : 5 , "isAModel(Object)" : 39 , "isAModelElement(Object)" : 121 , "isAMultiplicity(Object)" : 5 , "isANamedElement(Object)" : 12 , "isANamespace(Object)" : 72 , "isANaryAssociation(Object)" : 8 , "isANode(Object)" : 21 , "isANodeInstance(Object)" : 12 , "isAObject(Object)" : 13 , "isAObjectFlowState(Object)" : 17 , "isAObjectNode(Object)" : 1 , "isAOperation(Object)" : 78 , "isAPackage(Object)" : 53 , "isAPackageImport(Object)" : 2 , "isAParameter(Object)" : 16 , "isAPartition(Object)" : 6 , "isAPort(Object)" : 1 , "isAProfile(Object)" : 11 , "isAProfileApplication(Object)" : 1 , "isAProperty(Object)" : 2 , "isAPseudostate(Object)" : 40 , "isAPseudostateKind(Object)" : 1 , "isAReception(Object)" : 20 , "isARelationship(Object)" : 5 , "isAReplyMessage(Object)" : 1 , "isASendAction(Object)" : 4 , "isASendSignalAction(Object)" : 1 , "isASignal(Object)" : 12 , "isASignalEvent(Object)" : 7 , "isASimpleState(Object)" : 2 , "isAState(Object)" : 36 , "isAStateMachine(Object)" : 21 , "isAStateVertex(Object)" : 23 , "isAStereotype(Object)" : 28 , "isAStimulus(Object)" : 2 , "isAStructuralFeature(Object)" : 7 , "isAStubState(Object)" : 3 , "isASubactivityState(Object)" : 1 , "isASubmachineState(Object)" : 14 , "isASubsystem(Object)" : 4 , "isASynchCallMessage(Object)" : 1 , "isASynchState(Object)" : 4 , "isATagDefinition(Object)" : 5 , "isATaggedValue(Object)" : 9 , "isATemplateArgument(Object)" : 1 , "isATemplateParameter(Object)" : 4 , "isATimeEvent(Object)" : 7 , "isATransition(Object)" : 45 , "isAUMLElement(Object)" : 78 , "isAUsage(Object)" : 2 , "isAUseCase(Object)" : 24 , "isAVertex(Object)" : 1 , "isAVisibilityKind(Object)" : 6 , "isAbstract(Object)" : 42 , "isActive(Object)" : 6 , "isAggregate(Object)" : 2 , "isAsynchronous(Object)" : 3 , "isComposite(Object)" : 3 , "isConcurrent(Object)" : 2 , "isConstructor(Object)" : 5 , "isFrozen(Object)" : 1 , "isInitialized(Object)" : 1 , "isLeaf(Object)" : 22 , "isNavigable(Object)" : 21 , "isPackage(Object)" : 4 , "isPrimaryObject(Object)" : 7 , "isPrivate(Object)" : 9 , "isProtected(Object)" : 8 , "isPublic(Object)" : 11 , "isQuery(Object)" : 7 , "isReadOnly(Object)" : 12 , "isRealize(Object)" : 2 , "isReturn(Object)" : 15 , "isRoot(Object)" : 10 , "isSingleton(Object)" : 3 , "isSpecification(Object)" : 2 , "isStatic(Object)" : 25 , "isStereotype(Object,String)" : 5 , "isSynch(Object)" : 2 , "isTop(Object)" : 5 , "isType(Object)" : 4 , "isUtility(Object)" : 6 , "lookupIn(Object,String)" : 33 , "toString(Object)" : 25}},{ "className" : "org::argouml::uml::cognitive::critics::WizBreakCircularComp" , "selectors" : { "canFinish()" : 1 , "getOptions1()" : 1 , "getOptions2()" : 1}},{ "className" : "org::argouml::ui::explorer::rules::GoGeneralizableElementToSpecialized" , "selectors" : { "GoGeneralizableElementToSpecialized()" : 2}},{ "className" : "org::argouml::cognitive::ControlMech" , "selectors" : { "isRelevant(Critic,Designer)" : 3}},{ "className" : "org::argouml::language::php::PHPDocumentor::AccessTag" , "selectors" : { "AccessTag()" : 1 , "setPrivate()" : 1 , "setProtected()" : 1 , "setPublic()" : 1}},{ "className" : "org::argouml::cognitive::critics::WizardItem" , "selectors" : { "changed()" : 3}},{ "className" : "org::argouml::core::propertypanels::ui::UMLStateVertexContainerListModel" , "selectors" : { "UMLStateVertexContainerListModel(Object,String)" : 1}},{ "className" : "org::argouml::core::propertypanels::ui::Expandable" , "selectors" : { "getExpansion()" : 1 , "isExpandable()" : 1 , "isExpanded()" : 2 , "setExpanded(boolean)" : 1}},{ "className" : "org::argouml::core::propertypanels::ui::UMLMessageSenderListModel" , "selectors" : { "UMLMessageSenderListModel(Object,String)" : 1}},{ "className" : "org::argouml::language::cpp::reveng::CppImport::ModelerInvocationHandler" , "selectors" : { "ModelerInvocationHandler(Modeler)" : 1}},{ "className" : "java::awt::Point" , "selectors" : { "Point()" : 107 , "Point(Point)" : 41 , "Point(int,int)" : 886 , "equals(Object)" : 29 , "getX()" : 120 , "getY()" : 114 , "java" : 7 , "move(int,int)" : 2 , "setLocation(Point)" : 13 , "setLocation(double,double)" : 7 , "setLocation(int,int)" : 18 , "toString()" : 4 , "translate(int,int)" : 32}},{ "className" : "org::argouml::uml::reveng::idl::Context" , "selectors" : { "Context(Context)" : 3 , "get(String)" : 5 , "get(String,boolean)" : 3 , "getContext()" : 6 , "getInterface(String)" : 2 , "getJavaName(Object)" : 3}},{ "className" : "org::argouml::language::php::generator::NameGenerator" , "selectors" : { "generate(Object,int)" : 7 , "generateAttributeName(Object,int)" : 1 , "generateClassifierName(Object)" : 4 , "generateFilename(Object,String,int)" : 2 , "generateFilename(Object,int)" : 5 , "generateOperationName(Object,int)" : 1 , "generatePackageName(Object)" : 7 , "generatePackagePath(Object)" : 1}},{ "className" : "org::argouml::uml::diagram::ui::ActionModifierActive" , "selectors" : { "ActionModifierActive(Object)" : 1 , "valueOfTarget(Object)" : 1}},{ "className" : "org::argouml::ui::explorer::rules::GoCollaborationToInteraction" , "selectors" : { "GoCollaborationToInteraction()" : 2}},{ "className" : "org::argouml::uml::ui::ActionGenerateAll" , "selectors" : { "ActionGenerateAll()" : 2 , "addCollection(Collection,Collection)" : 2}},{ "className" : "org::argouml::moduleloader::SettingsTabModules" , "selectors" : { "SettingsTabModules()" : 1 , "getTabPanel()::LabelledLayout" : 1}},{ "className" : "org::argouml::uml::diagram::deployment::ui::FigComponentInstance" , "selectors" : { "FigComponentInstance(Object,Rectangle,DiagramSettings)" : 2 , "getEnclosingFig(???)" : 2}},{ "className" : "org::argouml::model::ActivityGraphsHelper" , "selectors" : { "addContent(Object,Object)" : 2 , "addInState(Object,Object)" : 1 , "addParameter(Object,Object)" : 2 , "findClassifierByName(Object,String)" : 2 , "findStateByName(Object,String)" : 3 , "isAddingActivityGraphAllowed(Object)" : 2 , "removeContent(Object,Object)" : 2 , "removeParameter(Object,Object)" : 2 , "setContents(Object,Collection)" : 2 , "setInStates(Object,Collection)" : 4 , "setParameters(Object,Collection)" : 2 , "setSynch(Object,boolean)" : 3}},{ "className" : "org::argouml::uml::cognitive::critics::CrIllegalName" , "selectors" : { "CrIllegalName()" : 1}},{ "className" : "org::argouml::ui::explorer::rules::GoStateToOutgoingTrans" , "selectors" : { "GoStateToOutgoingTrans()" : 3}},{ "className" : "org::argouml::ui::explorer::ExplorerTree::ExplorerMouseListener" , "selectors" : { "ExplorerMouseListener(JTree)" : 1 , "myDoubleClick()" : 1 , "showPopupMenu(MouseEvent)" : 3}},{ "className" : "org::argouml::uml::cognitive::critics::CrNodeInstanceInsideElement" , "selectors" : { "CrNodeInstanceInsideElement()" : 1 , "computeOffenders(UMLDeploymentDiagram)" : 3}},{ "className" : "com::nwalsh::saxon::UnwrapLinksEmitter" , "selectors" : { "UnwrapLinksEmitter(???)" : 1 , "getResultTreeFragment(???)" : 1 , "tryAgain()" : 1}},{ "className" : "org::argouml::model::euml::CollaborationsHelperEUMLImpl" , "selectors" : { "CollaborationsHelperEUMLImpl(EUMLModelImplementation)" : 1 , "setMessageSort(Object,Object)" : 1}},{ "className" : "org::argouml::activity2::diagram::FigNameCompartment" , "selectors" : { "FigNameCompartment(Object,Rectangle,DiagramSettings)" : 1}},{ "className" : "org::argouml::uml::diagram::ui::ArgoEditor" , "selectors" : { "setupRenderingHints()" : 2}},{ "className" : "org::argouml::core::propertypanels::model::GetterSetterManagerImpl::SynchGetterSetter" , "selectors" : { "SynchGetterSetter()" : 1}},{ "className" : "org::argouml::notation2::NotationManager" , "selectors" : { "NotationManager()" : 1 , "addListener(NotatedItem)" : 1 , "addNotationLanguage(NotationLanguage)" : 1 , "getInstance()" : 2}},{ "className" : "org::argouml::uml::ui::behavior::state_machines::ActionNewEvent" , "selectors" : { "ActionNewEvent()" : 4 , "createEvent(Object)" : 1 , "getAction(String,Object)" : 1}},{ "className" : "org::argouml::language::cpp::generator::Section" , "selectors" : { "Section()" : 1 , "generateBottom(String,String)" : 2 , "generateTop(String,String)" : 2 , "getUseSect()" : 3 , "setUseSect(int)" : 2}},{ "className" : "org::argouml::uml::diagram::ui::ActionVisibilityPrivate" , "selectors" : { "ActionVisibilityPrivate(Object)" : 1 , "valueOfTarget(Object)" : 1}},{ "className" : "org::argouml::ui::explorer::ExplorerPopup::ActionCreateAssociationRole" , "selectors" : { "ActionCreateAssociationRole(Object,List)" : 1}},{ "className" : "org::argouml::ui::explorer::rules::GoBehavioralFeatureToStateMachine" , "selectors" : { "GoBehavioralFeatureToStateMachine()" : 2}},{ "className" : "org::argouml::uml::diagram::static_structure::ui::FigEnumerationLiteral" , "selectors" : { "FigEnumerationLiteral(Object,Rectangle,DiagramSettings)" : 1}},{ "className" : "org::argouml::uml::CommentEdge" , "selectors" : { "CommentEdge()" : 1 , "CommentEdge(Object,Object)" : 3 , "delete()" : 1 , "getAnnotatedElement()" : 1 , "getComment()" : 1 , "getDestination()" : 12 , "getSource()" : 12 , "getUUID()" : 1 , "setAnnotatedElement(Object)" : 2 , "setComment(Object)" : 2}},{ "className" : "org::argouml::core::propertypanels::ui::UMLOFSStateListModel" , "selectors" : { "UMLOFSStateListModel(Object)" : 1}},{ "className" : "org::argouml::uml::ui::SaveGraphicsManager::FileFilterChangedListener" , "selectors" : { "FileFilterChangedListener(JFileChooser,String)" : 1}},{ "className" : "org::argouml::notation::SDNotationSettings" , "selectors" : { "SDNotationSettings()" : 1 , "isShowSequenceNumbers()" : 1 , "setShowSequenceNumbers(boolean)" : 3}},{ "className" : "org::argouml::uml::reveng::idl::PackageContext" , "selectors" : { "PackageContext(Context,Object)" : 5 , "get(String)" : 1 , "get(String,boolean)" : 2 , "setGeneratedTag(Object)" : 2}},{ "className" : "org::argouml::ui::ArgoStatusBar" , "selectors" : { "ArgoStatusBar()" : 1 , "showStatusOnSwingThread(String)" : 7}},{ "className" : "org::argouml::uml::diagram::static_structure::ui::FigModel" , "selectors" : { "FigModel(Object,Rectangle,DiagramSettings)" : 1 , "constructFigs()" : 1 , "constructFigs()::FigPoly" : 1}},{ "className" : "org::argouml::core::propertypanels::ui::UMLValueSpecificationValueField" , "selectors" : { "UMLValueSpecificationValueField(UMLValueSpecificationModel,boolean)" : 3 , "buildPanel()" : 1 , "getComponent()" : 1 , "getModel()" : 8 , "updateFields()" : 1}},{ "className" : "org::argouml::uml::diagram::ui::ActionVisibilityPublic" , "selectors" : { "ActionVisibilityPublic(Object)" : 1 , "valueOfTarget(Object)" : 1}},{ "className" : "org::argouml::core::propertypanels::model::GetterSetterManagerImpl::EntryActionGetterSetter" , "selectors" : { "EntryActionGetterSetter()" : 1 , "getOptions(Object,Collection<Class<?>>)" : 1}},{ "className" : "org::argouml::model::euml::RootContainerAdapter" , "selectors" : { "RootContainerAdapter(ModelEventPumpEUMLImpl)" : 1 , "clearHeldEvents()" : 2 , "removeAllAdapters()" : 1 , "removeAllAdapters()::ArrayList" : 1 , "setDeliverEvents(boolean)" : 2 , "setHoldEvents(boolean)" : 6 , "setRootContainer(???)" : 1}},{ "className" : "org::argouml::ui::ZoomSliderButton" , "selectors" : { "ZoomSliderButton()" : 1 , "createPopupComponent()" : 1 , "createToolBar(???)" : 1 , "handleSliderValueChange()" : 1 , "handleTextEntry()" : 2 , "showPopup()" : 2 , "updateCurrentValueLabel()" : 3}},{ "className" : "org::argouml::uml::diagram::activity::ui::FigActionState" , "selectors" : { "FigActionState(Object,Rectangle,DiagramSettings)" : 4 , "clone()" : 1 , "createBigPortFig()::FigRRect" : 1 , "getFigs(???)" : 1 , "initializeActionState()" : 1 , "initializeActionState()::FigRRect" : 1 , "setBigPort(???)" : 1 , "setNameFig(???)" : 1 , "setStandardBounds(int,int,int,int)::FigRRect" : 1}},{ "className" : "org::argouml::language::csharp::importer::csparser::statements::ReturnStatement" , "selectors" : { "ReturnStatement()" : 1}},{ "className" : "org::argouml::model::euml::UmlFactoryEUMLImpl" , "selectors" : { "UmlFactoryEUMLImpl(EUMLModelImplementation)" : 1 , "buildNode(Object)" : 1 , "buildNode(Object,Object,String)" : 2 , "buildValidConnectionMap()" : 1 , "buildValidContainmentMap()" : 1 , "delete(Object)" : 1 , "deleteExtent(Object)::EObject" : 1 , "getExtentElements(String)" : 1 , "isConnectionValid(Object,Object,Object,boolean)" : 1 , "isRemoved(Object)::Element" : 1}},{ "className" : "org::argouml::ui::explorer::PerspectiveConfigurator::ResetListener" , "selectors" : { "ResetListener()" : 1}},{ "className" : "org::argouml::model::CommonBehaviorHelper" , "selectors" : { "addAction(Object,Object)" : 3 , "addAction(Object,int,Object)" : 1 , "addActualArgument(Object,Object)" : 5 , "addActualArgument(Object,int,Object)" : 1 , "addClassifier(Object,Object)" : 2 , "addStimulus(Object,Object)" : 1 , "getActionOwner(Object)" : 1 , "getDestination(Object)" : 4 , "getInstantiation(Object)" : 4 , "getSource(Object)" : 4 , "removeAction(Object,Object)" : 1 , "removeActualArgument(Object,Object)" : 2 , "removeClassifier(Object,Object)" : 2 , "removeContext(Object,Object)" : 2 , "removeReception(Object,Object)" : 2 , "setActualArguments(Object,List)" : 1 , "setAsynchronous(Object,boolean)" : 9 , "setClassifiers(Object,Collection)" : 7 , "setCommunicationLink(Object,Object)" : 2 , "setComponentInstance(Object,Object)" : 7 , "setContexts(Object,Collection)" : 3 , "setDispatchAction(Object,Object)" : 1 , "setInstance(Object,Object)" : 1 , "setInstantiation(Object,Object)" : 3 , "setNodeInstance(Object,Object)" : 3 , "setOperation(Object,Object)" : 9 , "setReceiver(Object,Object)" : 4 , "setReception(Object,Collection)" : 2 , "setRecurrence(Object,Object)" : 5 , "setScript(Object,Object)" : 10 , "setSender(Object,Object)" : 1 , "setSignal(Object,Object)" : 4 , "setSpecification(Object,String)" : 3 , "setTarget(Object,Object)" : 5 , "setTransition(Object,Object)" : 2 , "setValue(Object,Object)" : 7}},{ "className" : "org::argouml::uml::diagram::static_structure::ui::FigOperation" , "selectors" : { "FigOperation(Object,Rectangle,DiagramSettings)" : 1}},{ "className" : "org::argouml::uml::diagram::ui::ActionAddAllClassesFromModel" , "selectors" : { "ActionAddAllClassesFromModel(String,Object)" : 1}},{ "className" : "org::argouml::uml::ui::foundation::core::ActionSetFeatureOwnerScope" , "selectors" : { "ActionSetFeatureOwnerScope()" : 1}},{ "className" : "org::argouml::uml::diagram::ui::FigEnumLiteralsCompartment" , "selectors" : { "FigEnumLiteralsCompartment(Object,Rectangle,DiagramSettings)" : 1}},{ "className" : "org::argouml::uml::reveng::Setting::UniqueSelection" , "selectors" : { "UniqueSelection(String,List<String>,int)" : 2 , "isOption(int)" : 2}},{ "className" : "org::argouml::sequence2::diagram::ModePlaceClassifierRole" , "selectors" : { "ModePlaceClassifierRole(???)" : 2 , "postProcessing()" : 2}},{ "className" : "org::argouml::uml::diagram::ui::AbstractActionRadioMenuItem" , "selectors" : { "AbstractActionRadioMenuItem(String,boolean)" : 5 , "toggleValueOfTarget(Object)" : 1 , "valueOfTarget(Object)" : 1}},{ "className" : "org::argouml::gefext::ArgoFigInk" , "selectors" : { "ArgoFigInk(int,int)" : 1}},{ "className" : "org::argouml::notation::NotationName" , "selectors" : { "getConfigurationValue()" : 10 , "getIcon()" : 2 , "getTitle()" : 2 , "sameNotationAs(NotationName)" : 1}},{ "className" : "org::argouml::model::StateMachinesHelper" , "selectors" : { "addDeferrableEvent(Object,Object)" : 5 , "addSubvertex(Object,Object)" : 2 , "findNamespaceForEvent(Object,Object)" : 7 , "findOperationByName(Object,String)" : 3 , "getAllPossibleStatemachines(Object,Object)" : 2 , "getAllPossibleSubvertices(Object)" : 2 , "getAllSubStates(Object)" : 3 , "getDestination(Object)" : 3 , "getOutgoingStates(Object)" : 2 , "getPath(Object)" : 4 , "getRegions(Object)" : 10 , "getSource(Object)" : 3 , "getStateMachine(Object)" : 8 , "getStatebyName(String,Object)" : 7 , "getTop(Object)" : 4 , "getTransitions(Object,boolean)" : 3 , "isAddingStatemachineAllowed(Object)" : 3 , "isTopState(Object)" : 4 , "removeDeferrableEvent(Object,Object)" : 5 , "removeSubvertex(Object,Object)" : 1 , "setBound(Object,int)" : 5 , "setChangeExpression(Object,Object)" : 4 , "setConcurrent(Object,boolean)" : 2 , "setContainer(Object,Object)" : 5 , "setContext(Object,Object)" : 3 , "setDoActivity(Object,Object)" : 6 , "setEffect(Object,Object)" : 4 , "setEntry(Object,Object)" : 8 , "setEventAsTrigger(Object,Object)" : 7 , "setExit(Object,Object)" : 6 , "setExpression(Object,Object)" : 7 , "setGuard(Object,Object)" : 1 , "setInternalTransitions(Object,Collection)" : 4 , "setReferenceState(Object,String)" : 5 , "setSource(Object,Object)" : 5 , "setState(Object,Object)" : 1 , "setStateMachine(Object,Object)" : 2 , "setStatemachineAsSubmachine(Object,Object)" : 2 , "setSubvertices(Object,Collection)" : 1 , "setTrigger(Object,Object)" : 4 , "setWhen(Object,Object)" : 5}},{ "className" : "org::argouml::ui::explorer::PerspectiveConfigurator::RemovePerspectiveListener" , "selectors" : { "RemovePerspectiveListener()" : 1}},{ "className" : "org::argouml::ui::MenuBar2" , "selectors" : { "MenuBar2()" : 1}},{ "className" : "org::argouml::gefext::ArgoFigRect" , "selectors" : { "ArgoFigRect(int,int,int,int)" : 1}},{ "className" : "org::argouml::uml::ui::UMLListCellRenderer2" , "selectors" : { "UMLListCellRenderer2(boolean)" : 7 , "UMLListCellRenderer2(boolean,boolean)" : 2 , "getListCellRendererComponent(JList,Object,int,boolean,boolean)" : 1 , "getName(Object)" : 2 , "makeText(Object)" : 8 , "makeTypeName(Object)" : 2}},{ "className" : "org::argouml::util::ToolBarUtility::PopupActionsListener" , "selectors" : { "PopupActionsListener(ConfigurationKey)" : 1}},{ "className" : "org::argouml::uml::cognitive::critics::CrNavFromInterface" , "selectors" : { "CrNavFromInterface()" : 1}},{ "className" : "org::argouml::persistence::FigEdgeHandler" , "selectors" : { "addObject(Object)::FigEdgePoly" : 1 , "addObject(Object)::FigPoly" : 1 , "getFigEdge(???)" : 3 , "org" : 1}},{ "className" : "org::argouml::uml::diagram::ui::ActionSetPath" , "selectors" : { "ActionSetPath(boolean)" : 2 , "getActions()" : 1}},{ "className" : "org::argouml::core::propertypanels::model::GetterSetterManagerImpl::AddModelElementCommand" , "selectors" : { "AddModelElementCommand(Object)" : 7 , "doIt(Collection)" : 1 , "getChoices()" : 1 , "getDialogTitle()" : 1 , "getSelected()" : 1 , "getTarget()" : 19 , "isExclusive()" : 1 , "isMultiSelect()" : 1}},{ "className" : "org::argouml::core::propertypanels::model::GetterSetterManagerImpl::BaseGetterSetter" , "selectors" : { "BaseGetterSetter()" : 1 , "getOptions(Object,Collection<Class<?>>)" : 1}},{ "className" : "org::argouml::profile::internal::ocl::uml14::CollectionsModelInterpreter" , "selectors" : { "CollectionsModelInterpreter()" : 1 , "cloneCollection(Collection)" : 7 , "doForAll(Map<String,Object>,Collection,List<String>,Object,LambdaEvaluator)" : 2}},{ "className" : "org::argouml::persistence::AbstractFilePersister" , "selectors" : { "copyFile(File,File)" : 2 , "createTempFile(File)" : 5 , "doSave(Project,File)" : 1 , "getDesc()" : 1 , "getExtension()" : 11 , "getExtension(File)" : 1 , "getExtension(String)" : 1 , "getMemberFilePersister(ProjectMember)" : 3 , "getMemberFilePersister(String)" : 3 , "hasAnIcon()" : 1 , "isFileExtensionApplicable(String)" : 3 , "isLoadEnabled()" : 1 , "isSaveEnabled()" : 1 , "newPersister(Class<? extends MemberFilePersister>)" : 2 , "postSave(Project,File)" : 1 , "preSave(Project,File)" : 1 , "registerPersister(Class,String,Class<? extends MemberFilePersister>)" : 4}},{ "className" : "org::argouml::uml::diagram::deployment::ui::FigMNode" , "selectors" : { "FigMNode(Object,Rectangle,DiagramSettings)" : 2 , "getEnclosingFig(???)" : 1}},{ "className" : "org::argouml::ui::targetmanager::TargetManager" , "selectors" : { "TargetManager()" : 1 , "addTarget(Object)" : 2 , "addTargetListener(TargetListener)" : 15 , "cleanHistory()" : 2 , "determineModelTarget(Object)" : 3 , "determineModelTarget(Object)::Fig" : 1 , "endTargetTransaction()" : 4 , "fireTargetAdded(TargetEvent)" : 1 , "fireTargetRemoved(TargetEvent)" : 1 , "fireTargetSet(TargetEvent)" : 1 , "getFigTarget(???)" : 2 , "getInstance()" : 235 , "getModelTarget()" : 55 , "getModelTargets()" : 4 , "getOwner(Object)" : 4 , "getOwner(Object)::Fig" : 2 , "getOwnerAndAllFigs(Object)" : 1 , "getOwnerAndAllFigs(Object)::Fig" : 2 , "getSingleModelTarget()" : 6 , "getSingleTarget()" : 4 , "getTarget()" : 35 , "getTargets()" : 40 , "internalOnSetTarget(String,Object[])" : 4 , "isInTargetTransaction()" : 4 , "navigateBackPossible()" : 1 , "navigateBackward()" : 1 , "navigateForward()" : 1 , "navigateForwardPossible()" : 1 , "removeTarget(Object)" : 3 , "setTarget(Object)" : 69 , "setTargets(Collection)" : 3 , "startTargetTransaction()" : 4}},{ "className" : "org::argouml::notation::providers::uml::StateBodyNotationUml::ModelElementInfoList::InfoItem" , "selectors" : { "InfoItem(Object)" : 2 , "InfoItem(Object,boolean)" : 1 , "getGenerated()" : 1 , "getUmlObject()" : 2 , "isRetained()" : 1 , "retain()" : 1}},{ "className" : "org::argouml::notation::providers::java::NotationUtilityJava" , "selectors" : { "generateAbstract(Object)" : 2 , "generateChangeability(Object)" : 2 , "generateClassifierRef(Object)" : 4 , "generateExpression(Object)" : 2 , "generateLeaf(Object)" : 2 , "generateParameter(Object)" : 1 , "generatePath(Object)" : 2 , "generateScope(Object)" : 2 , "generateUninterpreted(String)" : 1 , "generateVisibility(Object)" : 5}},{ "className" : "org::argouml::cognitive::AbstractCognitiveTranslator" , "selectors" : { "i18nlocalize(String)" : 1 , "i18nmessageFormat(String,Object[])" : 1}},{ "className" : "org::argouml::uml::diagram::collaboration::ui::PropPanelUMLCollaborationDiagram" , "selectors" : { "PropPanelUMLCollaborationDiagram()" : 1}},{ "className" : "org::argouml::ui::MenuBar14" , "selectors" : { "MenuBar14()" : 1}},{ "className" : "org::argouml::cognitive::ui::GoListToPosterToItem" , "selectors" : { "GoListToPosterToItem()" : 2 , "getChildCount(Object)" : 1 , "getChildrenList(Object)" : 3}},{ "className" : "org::argouml::util::PredicateEquals" , "selectors" : { "PredicateEquals(Object)" : 1}},{ "className" : "org::argouml::ui::explorer::rules::GoDiagramToNode" , "selectors" : { "GoDiagramToNode()" : 2 , "getChildren(Object)::Diagram" : 1}},{ "className" : "org::argouml::ui::cmd::SettingsTabShortcuts" , "selectors" : { "SettingsTabShortcuts()" : 1 , "checkShortcutAlreadyAssigned(KeyStroke)" : 2 , "enableFields(boolean)" : 2 , "getActionAlreadyAssigned(KeyStroke)" : 3 , "resetKeyStrokeConflict()" : 3 , "setKeyStrokeValue(KeyStroke)" : 4 , "setTarget(Object)" : 1}},{ "className" : "org::argouml::ui::ArgoToolbarManager" , "selectors" : { "ArgoToolbarManager()" : 1 , "getConfiguredToolbarAppearance(String)" : 1 , "getInstance()" : 5 , "getMenu()" : 5 , "getPopupMenu()" : 3 , "registerNew(Object,JToolBar,int)" : 2 , "registerToolbar(Object,JToolBar,int)" : 4}},{ "className" : "org::argouml::language::cpp::profile::DefaultTypeStrategyCpp" , "selectors" : { "DefaultTypeStrategyCpp(Collection)" : 1 , "getDefaultType(String)" : 3}},{ "className" : "org::argouml::uml::cognitive::ChildGenSearch" , "selectors" : { "ChildGenSearch()" : 1}},{ "className" : "org::argouml::ui::explorer::ExplorerPopup::ActionAddExistingRelatedNode" , "selectors" : { "ActionAddExistingRelatedNode(String,Object)" : 1}},{ "className" : "org::argouml::application::events::ArgoGeneratorEvent" , "selectors" : { "ArgoGeneratorEvent(int,Object)" : 2}},{ "className" : "org::argouml::uml::cognitive::critics::CrDupRoleNames" , "selectors" : { "CrDupRoleNames()" : 1}},{ "className" : "org::argouml::cognitive::ui::GoListToPriorityToItem" , "selectors" : { "GoListToPriorityToItem()" : 2 , "getChildCount(Object)" : 1}},{ "className" : "org::argouml::language::php::PHPDocumentor::AbstractTag" , "selectors" : { "AbstractTag()" : 1}},{ "className" : "org::argouml::model::RemoveAssociationEvent" , "selectors" : { "RemoveAssociationEvent(Object,String,Object,Object,Object,EventObject)" : 3}},{ "className" : "org::argouml::uml::diagram::ui::FigNameWithAbstractAndBold" , "selectors" : { "FigNameWithAbstractAndBold(Object,Rectangle,DiagramSettings,boolean)" : 1}},{ "className" : "org::argouml::notation::providers::ActionStateNotation" , "selectors" : { "ActionStateNotation(Object)" : 1}},{ "className" : "org::argouml::uml::cognitive::critics::CrNameConflictAC" , "selectors" : { "CrNameConflictAC()" : 1}},{ "className" : "org::argouml::persistence::OpenException" , "selectors" : { "OpenException(String)" : 4 , "OpenException(String,Throwable)" : 3 , "OpenException(Throwable)" : 26}},{ "className" : "org::argouml::uml::generator::CodeGenerator" , "selectors" : { "generate(Collection,boolean)" : 1 , "generateFiles(Collection,String,boolean)" : 2}},{ "className" : "org::argouml::activity2::diagram::DiagramElement" , "selectors" : { "getBounds()" : 5 , "getMinimumSize()" : 2 , "setBounds(Rectangle)" : 7}},{ "className" : "org::argouml::ui::explorer::PerspectiveConfigurator::RenameDocumentListener" , "selectors" : { "RenameDocumentListener()" : 1 , "update()" : 3}},{ "className" : "javax::xml::transform::URIResolver" , "selectors" : { "resolve(String,String)" : 9}},{ "className" : "org::argouml::ui::explorer::rules::GoSummaryToAttribute" , "selectors" : { "GoSummaryToAttribute()" : 2}},{ "className" : "org::argouml::uml::diagram::static_structure::ui::FigClassifierBox" , "selectors" : { "FigClassifierBox(Object,Rectangle,DiagramSettings)" : 4 , "buildAddMenu()" : 1 , "buildModifierPopUp()" : 1 , "classNameAndBounds()" : 2 , "clone()" : 1 , "getDefaultBounds()" : 1 , "getPopUpActions(MouseEvent)" : 1 , "renderingChanged()" : 4 , "setEnclosingFig(???)" : 5 , "updateCompartment(Object)" : 5}},{ "className" : "org::argouml::uml::ui::behavior::state_machines::ActionNewChangeEvent" , "selectors" : { "ActionNewChangeEvent()" : 1 , "getSingleton()" : 3}},{ "className" : "org::argouml::language::cpp::notation::ModelElementNameNotationCpp" , "selectors" : { "toString(Object)" : 1}},{ "className" : "org::argouml::profile::internal::ocl::OclInterpreter" , "selectors" : { "OclInterpreter(String,ModelInterpreter)" : 1 , "OclInterpreter(String,ModelInterpreter)::Lexer" : 1 , "OclInterpreter(String,ModelInterpreter)::OclParser" : 353 , "applicable(Object)" : 1 , "check(Object)" : 1 , "getCriticizedDesignMaterials()" : 1 , "getTriggers()" : 1}},{ "className" : "org::argouml::language::java::reveng::classfile::ParserUtils::ClassSignatureLexer" , "selectors" : { "ClassSignatureLexer(String)" : 2 , "parse()" : 2}},{ "className" : "org::argouml::core::propertypanels::ui::UMLSearchableComboBox" , "selectors" : { "UMLSearchableComboBox(UMLComboBoxModel,Action)" : 1 , "UMLSearchableComboBox(UMLComboBoxModel,Action,boolean)" : 4 , "search(Object)" : 2}},{ "className" : "org::argouml::uml::cognitive::critics::CrNoTriggerOrGuard" , "selectors" : { "CrNoTriggerOrGuard()" : 1}},{ "className" : "org::argouml::ui::cmd::ActionPageSetup" , "selectors" : { "ActionPageSetup()" : 2}},{ "className" : "javax::swing::plaf::metal::MetalTreeUI" , "selectors" : { "MetalTreeUI()" : 1}},{ "className" : "org::argouml::language::csharp::importer::csparser::structural::AttributeArgumentNode" , "selectors" : { "AttributeArgumentNode()" : 1 , "ToSource(StringBuilder)" : 1}},{ "className" : "org::argouml::cognitive::ui::TabToDo" , "selectors" : { "TabToDo()" : 1 , "TabToDo()::BorderSplitPane" : 1 , "TabToDo()::ToolBarFactory" : 1 , "incrementNumHushes()" : 1 , "setTarget(Object)" : 5 , "setTargetInternal(Object)" : 3 , "showDescription()" : 1 , "showStep(JPanel)" : 2 , "updateActionsEnabled(Object)" : 1}},{ "className" : "org::argouml::language::csharp::importer::csparser::statements::TryStatement" , "selectors" : { "TryStatement()" : 1}},{ "className" : "org::argouml::language::csharp::importer::csparser::structural::AttributeNode" , "selectors" : { "AttributeNode()" : 2}},{ "className" : "org::argouml::uml::ui::foundation::core::ActionSetModelElementVisibility" , "selectors" : { "ActionSetModelElementVisibility()" : 1 , "getInstance()" : 1}},{ "className" : "org::argouml::uml::ui::UMLTreeCellRenderer" , "selectors" : { "UMLTreeCellRenderer()" : 2 , "getTreeCellRendererComponent(JTree,Object,boolean,boolean,boolean,int,boolean)" : 2}},{ "className" : "org::argouml::core::propertypanels::ui::UMLClassifierRoleAvailableFeaturesListModel" , "selectors" : { "UMLClassifierRoleAvailableFeaturesListModel(Object)" : 1 , "buildModelList()" : 1 , "setTarget(Object)" : 1}},{ "className" : "org::argouml::ocl::ArgoAny" , "selectors" : { "ArgoAny(Object)" : 4 , "equals(Object)" : 1 , "internalNavigateParameterized(String,Type,boolean)::OclTypeException" : 3 , "navigateQualified(String,Type)::OclTypeException" : 4 , "navigateQualified(String,Type)::tudresden" : 2 , "toString()" : 3}},{ "className" : "org::argouml::notation2::NameUmlNotation" , "selectors" : { "NameUmlNotation(NotatedItem)" : 1}},{ "className" : "org::argouml::uml::ui::foundation::core::ActionAddOperation" , "selectors" : { "ActionAddOperation()" : 1 , "getTargetFollower()" : 2 , "getTargetFollower()::anonymous(TargetListener)" : 3 , "shouldBeEnabled()" : 2}},{ "className" : "org::argouml::kernel::ActionList::DummyAction" , "selectors" : { "DummyAction(String)" : 1 , "DummyAction(String,Icon)" : 1}},{ "className" : "org::argouml::uml::ui::behavior::common_behavior::ActionNewTerminateAction" , "selectors" : { "ActionNewTerminateAction()" : 1 , "getButtonInstance()" : 3}},{ "className" : "org::argouml::uml::diagram::collaboration::ui::FigMessageGroup" , "selectors" : { "FigMessageGroup(Object,DiagramSettings)" : 1 , "addFig(???)" : 1 , "calcBounds()" : 1 , "damage(???)" : 1 , "updateArrows()" : 2 , "updateFigPositions()" : 1}},{ "className" : "org::argouml::language::csharp::importer::csparser::preprocessornodes::PPDefineNode" , "selectors" : { "PPDefineNode(IdentifierExpression)" : 2}},{ "className" : "org::argouml::core::propertypanels::model::GetterSetterManagerImpl::TemplateParameterGetterSetter" , "selectors" : { "TemplateParameterGetterSetter()" : 1 , "getOptions(Object,Collection<Class<?>>)" : 1}},{ "className" : "java::awt::dnd::DropTargetEvent" , "selectors" : { "getDropTargetContext()" : 26}},{ "className" : "org::argouml::model::mdr::UndoCoreHelperDecorator::StringSetter" , "selectors" : { "set(String)" : 4}},{ "className" : "org::argouml::uml::ui::UMLModelElementListModel2" , "selectors" : { "UMLModelElementListModel2(String)" : 3 , "addAll(Collection)" : 1 , "addElement(Object)" : 4 , "addOtherModelEventListeners(Object)" : 1 , "buildModelList()" : 1 , "contains(Object)" : 3 , "fireIntervalAdded(Object,int,int)" : 2 , "getChangedElement(PropertyChangeEvent)" : 8 , "getMetaType()" : 1 , "getTarget()" : 9 , "isValidElement(Object)" : 2 , "isValidEvent(PropertyChangeEvent)" : 2 , "rebuildModelList()" : 2 , "removeOtherModelEventListeners(Object)" : 1 , "setAllElements(Collection)" : 2 , "setTarget(Object)" : 3 , "setTarget(Object)::Fig" : 1}},{ "className" : "org::argouml::cognitive::ui::ActionOpenGoals" , "selectors" : { "ActionOpenGoals()" : 2}},{ "className" : "org::argouml::model::ModelEventPump" , "selectors" : { "addClassModelEventListener(PropertyChangeListener,Object,String)" : 10 , "addClassModelEventListener(PropertyChangeListener,Object,String[])" : 3 , "addModelEventListener(PropertyChangeListener,Object)" : 14 , "addModelEventListener(PropertyChangeListener,Object,String)" : 36 , "addModelEventListener(PropertyChangeListener,Object,String[])" : 9 , "addModelEventListener(UmlChangeListener,Object,String)" : 6 , "addModelEventListener(UmlChangeListener,Object,String[])" : 3 , "flushModelEvents()" : 6 , "removeClassModelEventListener(PropertyChangeListener,Object,String)" : 4 , "removeModelEventListener(PropertyChangeListener,Object)" : 19 , "removeModelEventListener(PropertyChangeListener,Object,String)" : 31 , "removeModelEventListener(PropertyChangeListener,Object,String[])" : 8 , "removeModelEventListener(UmlChangeListener,Object,String)" : 3 , "removeModelEventListener(UmlChangeListener,Object,String[])" : 3 , "startPumpingEvents()" : 6 , "stopPumpingEvents()" : 6}},{ "className" : "org::argouml::language::csharp::generator::Section" , "selectors" : { "Section()" : 1 , "generate(String,String)" : 1 , "getSectionId(String)" : 3 , "read(String)" : 1 , "write(String,String)" : 1}},{ "className" : "org::argouml::core::propertypanels::ui::ExpressionModel" , "selectors" : { "ExpressionModel(String,Class<?>,Object,GetterSetterManager)" : 1 , "getBody()" : 1 , "getExpression()" : 6 , "getLanguage()" : 1 , "newExpression(String,String)" : 1 , "setBody(String)" : 3 , "setExpression(Object)" : 1 , "setExpression(String,String)" : 2 , "setLanguage(String)" : 3}},{ "className" : "org::argouml::uml::util::SortedListModel" , "selectors" : { "SortedListModel()" : 1 , "addAll(Collection)" : 3 , "getElementAt(int)" : 1 , "getSize()" : 1 , "indexOf(Object)" : 2 , "remove(Object)" : 1 , "removeAll(Collection)" : 2}},{ "className" : "org::argouml::ui::ProjectSettingsTabProfile::ProfileFileFilter" , "selectors" : { "ProfileFileFilter()" : 1}},{ "className" : "org::argouml::uml::diagram::ui::FigAssociationEnd" , "selectors" : { "FigAssociationEnd(Object,DiagramSettings)" : 2 , "initNotationArguments()" : 2 , "initializeNotationProvidersInternal(Object)" : 2 , "setDestFigNode(???)" : 1 , "setDestPortFig(???)" : 1 , "setSourceFigNode(???)" : 1 , "setSourcePortFig(???)" : 1}},{ "className" : "org::argouml::language::cpp::reveng::XtorModeler" , "selectors" : { "XtorModeler(Object,Object,Object,String,boolean,ProfileCpp)" : 2 , "getStereotype(Object,String)" : 1 , "isTheXtor(Object)" : 3 , "setName(String)" : 2}},{ "className" : "org::argouml::moduleloader::InitModuleLoader" , "selectors" : { "InitModuleLoader()" : 1}},{ "className" : "org::argouml::ui::explorer::rules::GoStateToInternalTrans" , "selectors" : { "GoStateToInternalTrans()" : 2}},{ "className" : "org::argouml::activity2::diagram::FigBaseNode" , "selectors" : { "FigBaseNode(Object,Rectangle,DiagramSettings)" : 2 , "calcBounds()::FigGroup" : 1 , "getFillColor(???)" : 4 , "getLineColor(???)" : 4 , "getMinimumSize()" : 1 , "getX(???)" : 2 , "positionChildren()" : 1 , "setDisplayState(FigBasePresentation)" : 4 , "setLayer(???)" : 1}},{ "className" : "org::argouml::model::mdr::UseCasesFactoryMDRImpl" , "selectors" : { "UseCasesFactoryMDRImpl(MDRModelImplementation)" : 1 , "buildActor(Object,Object)::Actor" : 1 , "buildExtend(???)" : 1 , "buildInclude(???)" : 1 , "createActor(???)" : 1 , "createUseCase(???)" : 1 , "deleteActor(Object)" : 1 , "deleteExtend(Object)" : 1 , "deleteExtend(Object)::Extend" : 1 , "deleteExtensionPoint(Object)" : 1 , "deleteExtensionPoint(Object)::org" : 1 , "deleteInclude(Object)" : 1 , "deleteUseCase(Object)" : 1 , "deleteUseCase(Object)::org" : 2 , "deleteUseCaseInstance(Object)" : 1}},{ "className" : "org::argouml::kernel::DefaultUndoManager::InteractionStack" , "selectors" : { "InteractionStack(String,String,String,String)" : 2 , "fireLabel()" : 2 , "getLabel()" : 1 , "pop()" : 2 , "push(Interaction)" : 2}},{ "className" : "org::argouml::persistence::DiagramMemberFilePersister" , "selectors" : { "DiagramMemberFilePersister()" : 1 , "addTranslation(String,String)" : 1 , "load(Project,InputSource)" : 2}},{ "className" : "org::argouml::ui::explorer::TreeModelUMLEventListener" , "selectors" : { "modelElementAdded(Object)" : 2 , "modelElementChanged(Object)" : 3 , "modelElementRemoved(Object)" : 2 , "structureChanged()" : 3}},{ "className" : "org::argouml::uml::diagram::static_structure::ui::ClassDiagramPropPanelFactory" , "selectors" : { "ClassDiagramPropPanelFactory()" : 1}},{ "className" : "org::argouml::uml::diagram::ui::FigSingleLineTextWithNotation" , "selectors" : { "FigSingleLineTextWithNotation(Object,Rectangle,DiagramSettings,boolean)" : 1 , "FigSingleLineTextWithNotation(Object,Rectangle,DiagramSettings,boolean,String[])" : 3 , "getBounds(???)" : 1 , "getNotationProvider()" : 6 , "getNotationProviderType()" : 1 , "getNotationSettings()" : 5 , "getOwner(NotationProvider)" : 15 , "initNotationProviders()" : 7 , "removeFromDiagram()" : 1 , "renderingChanged()" : 4 , "setBotMargin(???)" : 2 , "setBounds(???)" : 1 , "setText()" : 11 , "showHelp(String)" : 1 , "startTextEditor(???)" : 1 , "textEditStarted()" : 7 , "textEdited()" : 7}},{ "className" : "org::argouml::uml::ui::ActionSaveGraphics" , "selectors" : { "ActionSaveGraphics()" : 2 , "doSave(File,String,boolean)" : 2 , "trySave()" : 1 , "trySave()::Diagram" : 1 , "updateStatus(String)" : 2}},{ "className" : "org::argouml::ui::cmd::ActionHelp" , "selectors" : { "ActionHelp()" : 2}},{ "className" : "org::argouml::core::propertypanels::ui::UMLCollaborationConstrainingElementListModel" , "selectors" : { "UMLCollaborationConstrainingElementListModel(Object)" : 1}},{ "className" : "org::argouml::core::propertypanels::ui::UMLStateMachineTopListModel" , "selectors" : { "UMLStateMachineTopListModel(Object)" : 1}},{ "className" : "org::argouml::ui::explorer::rules::GoModelToCollaboration" , "selectors" : { "GoModelToCollaboration()" : 1}},{ "className" : "org::argouml::ui::explorer::rules::GoNamespaceToOwnedElements" , "selectors" : { "GoNamespaceToOwnedElements()" : 2}},{ "className" : "org::argouml::uml::ui::UMLRadioButtonPanel" , "selectors" : { "UMLRadioButtonPanel(String,List<String[]>,String,Action,boolean)" : 5 , "UMLRadioButtonPanel(boolean,String,List<String[]>,String,Action,boolean)" : 1 , "buildModel()" : 2 , "getTarget()" : 13 , "setButtons(List<String[]>,Action)" : 1 , "setPropertySetName(String)" : 1 , "setSelected(String)" : 26 , "setTarget(Object)" : 3 , "setTarget(Object)::Fig" : 1}},{ "className" : "org::argouml::profile::ProfileManager" , "selectors" : { "addSearchPathDirectory(String)" : 2 , "addToDefaultProfiles(Profile)" : 1 , "applyConfiguration(ProfileConfiguration)" : 1 , "getDefaultProfiles()" : 5 , "getProfileForClass(String)" : 1 , "getRegisteredProfiles()" : 5 , "getSearchPathDirectories()" : 6 , "getUMLProfile()" : 3 , "lookForRegisteredProfile(String)" : 4 , "refreshRegisteredProfiles()" : 2 , "registerProfile(Profile)" : 5 , "removeFromDefaultProfiles(Profile)" : 1 , "removeProfile(Profile)" : 3 , "removeSearchPathDirectory(String)" : 1}},{ "className" : "org::argouml::swingext::GlassPane" , "selectors" : { "GlassPane(Component)" : 1 , "mount(Component,boolean)" : 1 , "setActiveComponent(Component)" : 1 , "setVisible(boolean)" : 2}},{ "className" : "org::argouml::transformer::EventTransformer::EventTransformerAction" , "selectors" : { "EventTransformerAction(String,Project,Object)" : 4 , "buildEvent(String,String,Object,Object)" : 1 , "getName()" : 1 , "getText()" : 1}},{ "className" : "org::argouml::uml::ui::UMLModelElementStereotypeListModel" , "selectors" : { "UMLModelElementStereotypeListModel()" : 1 , "getCheckItem(Action)" : 1}},{ "className" : "org::argouml::ui::explorer::ExplorerTree::ExplorerTreeExpansionListener" , "selectors" : { "ExplorerTreeExpansionListener()" : 1}},{ "className" : "org::argouml::ui::cmd::ShortcutField" , "selectors" : { "ShortcutField(String,int)" : 1 , "ShortcutField(String,int)::anonymous(KeyListener)" : 1 , "addShortcutChangedListener(ShortcutChangedListener)" : 1 , "fireShortcutChangedEvent(String)" : 1}},{ "className" : "org::argouml::transformer::EventTransformer::EventToCallEvent" , "selectors" : { "EventToCallEvent(Project,Object)" : 1}},{ "className" : "org::argouml::state2::diagram::StateDiagramFactory" , "selectors" : { "StateDiagramFactory()" : 1}},{ "className" : "org::argouml::uml::cognitive::critics::WizNavigable" , "selectors" : { "getOptions()" : 1}},{ "className" : "org::argouml::language::php::PHPDocumentor::SubpackageTag" , "selectors" : { "SubpackageTag()" : 1}},{ "className" : "org::argouml::ui::explorer::ExplorerPerspective" , "selectors" : { "ExplorerPerspective(String)" : 13 , "addRule(PerspectiveRule)" : 124 , "getList()" : 5 , "makeNamedClone(String)" : 1 , "removeRule(PerspectiveRule)" : 1 , "setName(String)" : 2 , "toString()" : 2}},{ "className" : "org::argouml::uml::diagram::static_structure::ui::SelectionStereotype" , "selectors" : { "SelectionStereotype(???)" : 1}},{ "className" : "com::nwalsh::saxon::CalloutEmitter" , "selectors" : { "CalloutEmitter(???)" : 1 , "addCallout(int,Node,int)" : 2 , "formatPad(int)" : 1 , "getResultTreeFragment(???)" : 1 , "setupCallouts(NodeList)" : 1 , "skipThisElement(int)" : 1}},{ "className" : "org::argouml::uml::ui::ActionRevertToSaved" , "selectors" : { "ActionRevertToSaved()" : 2}},{ "className" : "org::argouml::ui::explorer::rules::GoBehavioralFeatureToStateDiagram" , "selectors" : { "GoBehavioralFeatureToStateDiagram()" : 1}},{ "className" : "org::argouml::ui::explorer::rules::GoOperationToSequenceDiagram" , "selectors" : { "GoOperationToSequenceDiagram()" : 2}},{ "className" : "org::argouml::util::QuotedStringSeparator" , "selectors" : { "QuotedStringSeparator(char,char)" : 2 , "QuotedStringSeparator(char,char,char)" : 1}},{ "className" : "org::argouml::model::euml::CommonBehaviorHelperEUMLImpl" , "selectors" : { "CommonBehaviorHelperEUMLImpl(EUMLModelImplementation)" : 1 , "setClassifiers(Object,Collection)::InstanceSpecification" : 3}},{ "className" : "org::argouml::model::euml::ActivityGraphsHelperEUMLImpl" , "selectors" : { "ActivityGraphsHelperEUMLImpl(EUMLModelImplementation)" : 1}},{ "className" : "javax::swing::BoxLayout" , "selectors" : { "BoxLayout(Container,int)" : 197 , "javax" : 3 , "maximumLayoutSize(Container)" : 1 , "minimumLayoutSize(Container)" : 1}},{ "className" : "org::argouml::uml::diagram::ui::ModeAddToDiagram" , "selectors" : { "ModeAddToDiagram(Collection<Object>,String)" : 3}},{ "className" : "java::beans::PropertyChangeEvent" , "selectors" : { "PropertyChangeEvent(Object,String,Object,Object)" : 40 , "getNewValue()" : 378 , "getOldValue()" : 165 , "getPropertyName()" : 743}},{ "className" : "org::argouml::model::AbstractModelEventPump" , "selectors" : { "AbstractModelEventPump()" : 1 , "addClassModelEventListener(PropertyChangeListener,Object,String[])" : 1 , "addModelEventListener(PropertyChangeListener,Object,String[])" : 1 , "removeClassModelEventListener(PropertyChangeListener,Object,String[])" : 1 , "removeModelEventListener(PropertyChangeListener,Object,String[])" : 1}},{ "className" : "org::argouml::uml::GenDescendantClasses" , "selectors" : { "GenDescendantClasses()" : 1 , "accumulateDescendants(Object,Collection)" : 2 , "gen(Object)" : 1 , "getSINGLETON()" : 1}},{ "className" : "org::argouml::uml::diagram::ui::FigGeneralization" , "selectors" : { "FigGeneralization(Object,DiagramSettings)" : 4 , "addListener(Object)" : 2 , "fixup(Object)" : 1 , "initialize()" : 1 , "initialize()::ArrowHeadTriangle" : 1 , "updateDiscriminatorText()" : 2}},{ "className" : "org::argouml::language::java::reveng::classfile::ParserUtils::TypeVariableSignatureLexer" , "selectors" : { "TypeVariableSignatureLexer(String)" : 2 , "parse()" : 1}},{ "className" : "org::argouml::uml::diagram::deployment::ui::PropPanelUMLDeploymentDiagram" , "selectors" : { "PropPanelUMLDeploymentDiagram()" : 1}},{ "className" : "org::argouml::uml::GenAncestorClasses" , "selectors" : { "accumulateAncestors(Object,Collection)" : 2}},{ "className" : "org::argouml::language::csharp::importer::csparser::statements::WhileStatement" , "selectors" : { "WhileStatement()" : 1}},{ "className" : "org::argouml::uml::diagram::ui::FigRole" , "selectors" : { "FigRole(Object,DiagramSettings)" : 1}},{ "className" : "org::argouml::model::AbstractUmlHelperDecorator" , "selectors" : { "AbstractUmlHelperDecorator(UmlHelper)" : 1}},{ "className" : "org::argouml::core::propertypanels::ui::CheckBox::SetAction" , "selectors" : { "SetAction(GetterSetterManager,Object,String)" : 1}},{ "className" : "org::argouml::ui::ActionCreateContainedModelElement" , "selectors" : { "ActionCreateContainedModelElement(Object,Object)" : 10 , "ActionCreateContainedModelElement(Object,Object,String)" : 3 , "ActionCreateContainedModelElement(Object,Object,String,String)" : 1}},{ "className" : "org::argouml::transformer::EventTransformer::EventToSignalEvent" , "selectors" : { "EventToSignalEvent(Project,Object)" : 1}},{ "className" : "org::argouml::language::csharp::importer::csparser::nodes::expressions::primitive::StringPrimitive" , "selectors" : { "StringPrimitive(String)" : 1}},{ "className" : "org::argouml::uml::ui::foundation::core::ActionSetOperationConcurrencyKind" , "selectors" : { "ActionSetOperationConcurrencyKind()" : 1 , "getInstance()" : 1}},{ "className" : "org::argouml::uml::diagram::state::ui::FigFinalState" , "selectors" : { "FigFinalState(Object,Rectangle,DiagramSettings)" : 4 , "getFigs(???)" : 1 , "getLineWidth()" : 3 , "initFigs(Rectangle)" : 1 , "initFigs(Rectangle)::FigCircle" : 2 , "setBigPort(???)" : 1}},{ "className" : "org::argouml::ui::explorer::rules::GoStateToIncomingTrans" , "selectors" : { "GoStateToIncomingTrans()" : 3}},{ "className" : "org::argouml::ui::cmd::ShortcutChangedListener" , "selectors" : { "shortcutChange(ShortcutChangedEvent)" : 1}},{ "className" : "org::argouml::uml::ui::behavior::state_machines::ActionNewStubState" , "selectors" : { "ActionNewStubState()" : 1}},{ "className" : "org::argouml::language::csharp::importer::csparser::statements::CaseNode" , "selectors" : { "CaseNode()" : 1 , "ToSource(StringBuilder)" : 1}},{ "className" : "org::argouml::uml::cognitive::critics::CrNoInstanceVariables" , "selectors" : { "CrNoInstanceVariables()" : 1 , "findChangeableInstanceAttributeInInherited(Object,int)" : 2}},{ "className" : "org::argouml::language::csharp::importer::csparser::nodes::expressions::ObjectCreationExpression" , "selectors" : { "ObjectCreationExpression(ExpressionNode,ExpressionList)" : 1}},{ "className" : "org::argouml::ui::explorer::rules::GoSummaryToInheritance" , "selectors" : { "GoSummaryToInheritance()" : 2}},{ "className" : "org::argouml::ui::explorer::TypeThenNameOrder" , "selectors" : { "TypeThenNameOrder()" : 2}},{ "className" : "org::argouml::core::propertypanels::model::CheckBoxData" , "selectors" : { "CheckBoxData(Class<?>,String)" : 1 , "getLabel()" : 1 , "getPropertyName()" : 1 , "getType()" : 1}},{ "className" : "org::argouml::kernel::ProjectFactory" , "selectors" : { "ProjectFactory()" : 1 , "createProject()" : 2 , "createProject(URI)" : 2 , "getInstance()" : 4}},{ "className" : "org::argouml::uml::diagram::collaboration::ui::FigAssociationRole" , "selectors" : { "FigAssociationRole(DiagramEdgeSettings,DiagramSettings)" : 1 , "addMessage(FigMessage)" : 1}},{ "className" : "org::argouml::application::api::InitSubsystem" , "selectors" : { "getDetailsTabs()" : 1 , "getProjectSettingsTabs()" : 1 , "getSettingsTabs()" : 1 , "init()" : 1}},{ "className" : "org::argouml::uml::generator::GeneratorHelper" , "selectors" : { "generate(Language,Collection,boolean)" : 1 , "generate(Language,Object,boolean)" : 1 , "makeLanguage(String,Icon)" : 3 , "makeLanguage(String,String,Icon)" : 5}},{ "className" : "org::argouml::uml::ui::foundation::core::ActionAddAttribute" , "selectors" : { "ActionAddAttribute()" : 1 , "getTargetFollower()" : 2 , "getTargetFollower()::anonymous(TargetListener)" : 3 , "shouldBeEnabled()" : 2}},{ "className" : "org::argouml::core::propertypanels::ui::UMLStructuralFeatureTypeComboBoxModel" , "selectors" : { "UMLStructuralFeatureTypeComboBoxModel(String,Object)" : 3 , "getSelectedModelElement()" : 1}},{ "className" : "org::argouml::ui::explorer::rules::GoStateMachineToState" , "selectors" : { "GoStateMachineToState()" : 3}},{ "className" : "org::argouml::uml::diagram::ui::SelectionRerouteEdge" , "selectors" : { "SelectionRerouteEdge(FigEdgeModelElement)" : 2 , "dragHandle(???)" : 1 , "mousePressed(MouseEvent)" : 1 , "mousePressed(MouseEvent)::FigEdge" : 2}},{ "className" : "org::argouml::ui::explorer::rules::GoTransitionToGuard" , "selectors" : { "GoTransitionToGuard()" : 3}},{ "className" : "org::argouml::core::propertypanels::model::Named" , "selectors" : { "getName()" : 2}},{ "className" : "org::argouml::language::cpp::profile::BaseProfile" , "selectors" : { "BaseProfile(Collection<Object>)" : 1 , "BaseProfile(Collection<Object>,Object)" : 2 , "applyStereotype(String,Object)" : 7 , "applyTaggedValue(String,Object,String)" : 1 , "applyTaggedValue(String,String,Object,String)" : 10 , "assertModelElementContainedInModels(Object)" : 4 , "findDataType(String,Object)" : 2 , "getBuiltIn(String)" : 1 , "getCppStereotypeInModel(String)" : 8 , "getEditableModels()" : 1 , "getModels()" : 1 , "getStereotype(Object,String)" : 2 , "getTagDefinition(String)" : 5 , "getTagDefinition(String,String)" : 8 , "initBuiltInTypes()" : 1 , "isBuiltIn(String)" : 2 , "loadProfileModels()" : 2 , "trimAndEnsureOneSpaceOnlyBetweenTokens(String)" : 1}},{ "className" : "org::argouml::uml::ui::behavior::collaborations::ActionNewActionForMessage" , "selectors" : { "ActionNewActionForMessage()" : 1}},{ "className" : "org::argouml::uml::diagram::activity::ui::FigPool" , "selectors" : { "FigPool(Rectangle,DiagramSettings)" : 1 , "getEnclosedFigs(???)" : 2 , "getFigs(???)" : 1 , "getWidth(???)" : 2 , "initialize(Rectangle)" : 1 , "setBigPort(???)" : 1 , "setBounds(???)" : 1 , "setWidth(???)" : 2}},{ "className" : "org::argouml::language::csharp::importer::csparser::types::ClassNode" , "selectors" : { "ClassNode()" : 1 , "WriteLocalSource(StringBuilder,String)" : 2}},{ "className" : "org::argouml::core::propertypanels::ui::UMLObjectFlowStateParameterListModel::ActionRemoveOFSParameter" , "selectors" : { "ActionRemoveOFSParameter()" : 1}},{ "className" : "javax::swing::event::CaretEvent" , "selectors" : { "CaretEvent(Object)" : 3 , "getDot()" : 33 , "getMark()" : 5}},{ "className" : "org::argouml::core::propertypanels::model::GetterSetterManagerImpl::ConcurrencyGetterSetter" , "selectors" : { "ConcurrencyGetterSetter()" : 1}},{ "className" : "org::argouml::core::propertypanels::ui::NavigateSiblingAction" , "selectors" : { "NavigateSiblingAction(Object,String)" : 2 , "getAllSiblings()" : 2 , "getTargetSibling()" : 2}},{ "className" : "org::argouml::uml::ui::AbstractActionAddModelElement2" , "selectors" : { "AbstractActionAddModelElement2()" : 18 , "doIt(Collection)" : 1 , "getChoices()" : 2 , "getDialogTitle()" : 1 , "getSelected()" : 1 , "getTarget()" : 61 , "isExclusive()" : 1 , "isMultiSelect()" : 1 , "setMultiSelect(boolean)" : 9 , "setTarget(Object)" : 4}},{ "className" : "org::argouml::cognitive::Decision" , "selectors" : { "Decision(String,int)" : 3 , "getName()" : 5 , "getPriority()" : 6 , "setPriority(int)" : 2}},{ "className" : "org::argouml::language::java::reveng::OuterClassifierContext" , "selectors" : { "OuterClassifierContext(Context,Object,Object,String)" : 2 , "get(String,boolean)" : 1 , "get(String,boolean,Profile)" : 2}},{ "className" : "org::argouml::uml::ui::behavior::common_behavior::ActionNewSendAction" , "selectors" : { "ActionNewSendAction()" : 1 , "getButtonInstance()" : 3}},{ "className" : "org::argouml::core::propertypanels::model::GetterSetterManagerImpl::NavigableGetterSetter" , "selectors" : { "NavigableGetterSetter()" : 2}},{ "className" : "org::argouml::moduleloader::ModuleStatus" , "selectors" : { "ModuleStatus()" : 1 , "isEnabled()" : 6 , "isSelected()" : 6 , "setDisabled()" : 1 , "setEnabled()" : 1 , "setSelected()" : 2 , "setSelected(boolean)" : 1 , "setUnselect()" : 1}},{ "className" : "org::argouml::ui::TabText" , "selectors" : { "TabText(String,boolean)" : 2 , "TabText(String,boolean)::ToolBarFactory" : 1 , "doGenerateText()" : 2 , "genText(Object)" : 1 , "getTarget()" : 10 , "getToolbar()" : 4 , "parseText(String)" : 3 , "setEditable(boolean)" : 1 , "setShouldBeEnabled(boolean)" : 3 , "setTarget(Object)" : 6 , "shouldBeEnabled()" : 1}},{ "className" : "org::argouml::language::java::reveng::classfile::ByteTokenStream" , "selectors" : { "release(int)" : 1 , "rewind(int)" : 1 , "seek(int)" : 1}},{ "className" : "java::util::StringTokenizer" , "selectors" : { "StringTokenizer(String)" : 295 , "StringTokenizer(String,String)" : 1328 , "StringTokenizer(String,String,boolean)" : 202 , "countTokens()" : 348 , "hasMoreElements()" : 117 , "hasMoreTokens()" : 1628 , "java" : 41 , "nextElement()" : 59 , "nextToken()" : 2902 , "nextToken(String)" : 46}},{ "className" : "org::argouml::core::propertypanels::ui::UMLComponentInstanceClassifierComboBoxModel" , "selectors" : { "UMLComponentInstanceClassifierComboBoxModel(String,Object)" : 1}},{ "className" : "org::argouml::uml::cognitive::critics::CrMissingAttrName" , "selectors" : { "CrMissingAttrName()" : 1}},{ "className" : "org::argouml::uml::diagram::use_case::ui::FigExtensionPoint" , "selectors" : { "FigExtensionPoint(Object,Rectangle,DiagramSettings)" : 1}},{ "className" : "org::argouml::uml::ui::SourcePathController" , "selectors" : { "deleteSourcePath(Object)" : 1 , "getAllModelElementsWithSourcePath()" : 1 , "getSourcePath(Object)" : 1 , "getSourcePathSettings()" : 1 , "setSourcePath(SourcePathTableModel)" : 1}},{ "className" : "org::argouml::model::IllegalModelElementConnectionException" , "selectors" : { "IllegalModelElementConnectionException(String)" : 4}},{ "className" : "org::argouml::profile::UserDefinedProfile::NullProfileManager" , "selectors" : { "NullProfileManager()" : 1}},{ "className" : "org::argouml::notation::providers::AttributeNotation" , "selectors" : { "AttributeNotation(Object)" : 3}},{ "className" : "org::argouml::notation::providers::uml::ComponentInstanceNotationUml" , "selectors" : { "toString(Object)" : 1}},{ "className" : "org::argouml::ui::explorer::ExplorerTree::ExplorerTargetListener" , "selectors" : { "ExplorerTargetListener()" : 1 , "setTargets(Object[])" : 1 , "targetRemoved(TargetEvent)::Fig" : 1}},{ "className" : "org::argouml::ui::SettingsTabLayout" , "selectors" : { "createProperty(String,String,Class)::Property" : 1 , "makeKey(Class)" : 3}},{ "className" : "org::argouml::ui::SettingsTabPreferences" , "selectors" : { "SettingsTabPreferences()" : 1 , "buildPanel()" : 1 , "handleSettingsTabRefresh()" : 1}},{ "className" : "org::argouml::ui::explorer::rules::GoModelElementToComment" , "selectors" : { "GoModelElementToComment()" : 2}},{ "className" : "org::argouml::core::propertypanels::ui::UMLStateVertexOutgoingListModel" , "selectors" : { "UMLStateVertexOutgoingListModel(Object)" : 1}},{ "className" : "org::argouml::core::propertypanels::ui::UMLExtensionPointUseCaseListModel" , "selectors" : { "UMLExtensionPointUseCaseListModel(Object,String)" : 1}},{ "className" : "org::argouml::ui::GResolution" , "selectors" : { "GResolution(int,String)" : 3 , "getResolution()" : 2}},{ "className" : "javax::swing::event::TreeExpansionEvent" , "selectors" : { "getPath()" : 16}},{ "className" : "org::argouml::uml::diagram::activity::ui::ActivityDiagramPropPanelFactory" , "selectors" : { "ActivityDiagramPropPanelFactory()" : 1}},{ "className" : "org::argouml::cognitive::ui::ToDoByPoster" , "selectors" : { "ToDoByPoster()" : 1}},{ "className" : "org::argouml::ui::StatusBar" , "selectors" : { "StatusBar()" : 2 , "incProgress(int)" : 2 , "progress(ProgressEvent)" : 1 , "setMaximumProgress(int)" : 1 , "showProgress(int)" : 2 , "showStatus(String)" : 11 , "updateMainTask(String)" : 1 , "updateProgress(int)" : 1 , "updateSubTask(String)" : 1}},{ "className" : "org::argouml::uml::ui::PropPanelFactoryManager" , "selectors" : { "addPropPanelFactory(PropPanelFactory)" : 12 , "getFactories()" : 1 , "removePropPanelFactory(PropPanelFactory)" : 5}},{ "className" : "org::argouml::language::csharp::importer::csparser::nodes::expressions::ArrayInitializerExpression" , "selectors" : { "ArrayInitializerExpression()" : 2 , "ToSource(StringBuilder)" : 1}},{ "className" : "org::argouml::ui::explorer::rules::AttributesNode" , "selectors" : { "AttributesNode(Object)" : 1 , "getParent()" : 2}},{ "className" : "org::argouml::core::propertypanels::ui::UMLParameterBehavioralFeatListModel" , "selectors" : { "UMLParameterBehavioralFeatListModel(Object,String)" : 2}},{ "className" : "org::argouml::model::mdr::Registry<T>" , "selectors" : { "Registry()" : 2}},{ "className" : "org::argouml::uml::ui::UMLPlainTextDocument" , "selectors" : { "UMLPlainTextDocument(String)" : 11 , "getEventName()" : 4 , "getProperty()" : 3 , "getTarget()" : 31 , "insertString(int,String,AttributeSet)" : 2 , "isFiring()" : 2 , "propertyChange(PropertyChangeEvent)" : 1 , "remove(int,int)" : 1 , "setEventName(String)" : 1 , "setFiring(boolean)" : 4 , "setProperty(String)" : 1 , "setPropertyInternal(String)" : 2 , "setTarget(Object)" : 6 , "setTarget(Object)::Fig" : 1 , "updateText(String)" : 2}},{ "className" : "org::argouml::uml::cognitive::critics::CrNoGuard" , "selectors" : { "CrNoGuard()" : 1}},{ "className" : "org::argouml::util::ArgoFrame" , "selectors" : { "getFrame()" : 41 , "setFrame(Frame)" : 4}},{ "className" : "org::argouml::ui::explorer::rules::GoSubmachineStateToStateMachine" , "selectors" : { "GoSubmachineStateToStateMachine()" : 2}},{ "className" : "org::argouml::notation::NotationSettings" , "selectors" : { "NotationSettings()" : 3 , "NotationSettings(NotationSettings)" : 2 , "getDefaultSettings()" : 13 , "getNotationLanguage()" : 17 , "initializeDefaultSettings()" : 1 , "isFullyHandleStereotypes()" : 4 , "isShowAssociationNames()" : 6 , "isShowInitialValues()" : 6 , "isShowMultiplicities()" : 6 , "isShowPaths()" : 8 , "isShowProperties()" : 8 , "isShowSingularMultiplicities()" : 6 , "isShowTypes()" : 7 , "isShowVisibilities()" : 13 , "isUseGuillemets()" : 16 , "setFullyHandleStereotypes(boolean)" : 1 , "setNotationLanguage(String)" : 4 , "setShowAssociationNames(boolean)" : 6 , "setShowInitialValues(boolean)" : 6 , "setShowMultiplicities(boolean)" : 6 , "setShowPaths(boolean)" : 3 , "setShowProperties(boolean)" : 6 , "setShowSingularMultiplicities(boolean)" : 6 , "setShowTypes(boolean)" : 6 , "setShowVisibilities(boolean)" : 7 , "setUseGuillemets(boolean)" : 4}},{ "className" : "org::argouml::ui::explorer::rules::AbstractPerspectiveRule" , "selectors" : { "AbstractPerspectiveRule()" : 2 , "getRuleName()" : 1 , "toString()" : 1}},{ "className" : "org::argouml::ui::HeapMonitor" , "selectors" : { "HeapMonitor()" : 1 , "updateStats()" : 2}},{ "className" : "org::argouml::uml::ui::TabStyle" , "selectors" : { "TabStyle()" : 1 , "TabStyle(String,String[])" : 1 , "addTargetListener(TargetListener)" : 1 , "findPanelFor(Class)" : 2 , "fireTargetAdded(TargetEvent)" : 1 , "fireTargetRemoved(TargetEvent)" : 1 , "fireTargetSet(TargetEvent)" : 1 , "loadClass(String)" : 1 , "panelClassFor(Class)" : 1 , "removeTargetListener(TargetListener)" : 2 , "setTarget(Object)" : 4 , "setTarget(Object)::FigEdge" : 2}},{ "className" : "org::argouml::language::csharp::importer::csparser::members::InterfaceIndexerNode" , "selectors" : { "InterfaceIndexerNode()" : 1}},{ "className" : "org::argouml::uml::cognitive::critics::CrAssocNameConflict" , "selectors" : { "CrAssocNameConflict()" : 1 , "computeOffenders(Object)" : 3 , "getAllTypes(Object)" : 2}},{ "className" : "org::argouml::uml::diagram::ui::DiagramNameDocument" , "selectors" : { "DiagramNameDocument(JTextField)" : 1 , "setTarget(Object)" : 4 , "update(DocumentEvent)" : 3}},{ "className" : "org::argouml::swingext::JLinkButton" , "selectors" : { "JLinkButton()" : 5 , "JLinkButton(String,Icon,URL)" : 1 , "getActiveLinkColor()" : 1 , "getDisabledLinkColor()" : 2 , "getLinkBehavior()" : 1 , "getLinkColor()" : 1 , "getVisitedLinkColor()" : 1 , "isLinkVisited()" : 1 , "setLinkURL(URL)" : 1 , "setupToolTipText()" : 1}},{ "className" : "org::argouml::uml::cognitive::critics::CrObjectWithoutClassifier" , "selectors" : { "computeOffenders(UMLDeploymentDiagram)" : 3}},{ "className" : "org::argouml::uml::diagram::static_structure::ui::FigClass" , "selectors" : { "FigClass(Object,Rectangle,DiagramSettings)" : 4 , "constructFigs(Rectangle)" : 1 , "getEnclosingFig(???)" : 2 , "getFigs(???)" : 1 , "getNextVisibleFeature(FigGroup,FigText,int)::FigText" : 1 , "getPreviousVisibleFeature(FigGroup,FigText,int)::FigText" : 1}},{ "className" : "org::argouml::uml::diagram::state::ui::FigRegion" , "selectors" : { "FigRegion(Object)" : 1 , "getMinimumSize()" : 2 , "setBounds(???)" : 1}},{ "className" : "org::argouml::core::propertypanels::ui::UMLModelElementClientDependencyListModel" , "selectors" : { "UMLModelElementClientDependencyListModel(Object)" : 1}},{ "className" : "org::argouml::model::mdr::UmlFactoryMDRImpl" , "selectors" : { "UmlFactoryMDRImpl(MDRModelImplementation)" : 1 , "buildNode(Object)" : 1 , "buildNode(Object,Object,String)" : 2 , "buildNode(Object,Object,String)::Namespace" : 2 , "buildValidConnectionMap()" : 1 , "buildValidContainmentMap()" : 1 , "delete(Object)::RefObject" : 1 , "deleteAction(Object)" : 1 , "deleteExtent(Object)::RefObject" : 1 , "getActivityGraphs()" : 12 , "getCollaborations()" : 10 , "getCommonBehavior()" : 29 , "getCore()" : 63 , "getExtensionMechanisms()" : 4 , "getExtentPackages(String)" : 1 , "getModelManagement()" : 7 , "getStateMachines()" : 23 , "getUseCases()" : 10 , "isConnectionValid(Object,Object,Object,boolean)" : 1 , "isRemoved(Object)::RefObject" : 1 , "setNewAction(Object,Action,String)::ActionSequence" : 1 , "setNewAction(Object,Action,String)::State" : 3 , "setNewAction(Object,Action,String)::Transition" : 1 , "setNewDeferrableEvent(State,Event)::RefObject" : 1 , "setNewDeferrableEvent(State,Event)::State" : 1}},{ "className" : "org::argouml::uml::ui::ActionAddDiagram" , "selectors" : { "ActionAddDiagram(String)" : 3 , "actionPerformed(ActionEvent)" : 1 , "createDiagram(Object)" : 1 , "createDiagram(Object,DiagramSettings)" : 1 , "findNamespace()" : 2 , "isValidNamespace(Object)" : 1}},{ "className" : "org::argouml::uml::diagram::UmlDiagramRenderer" , "selectors" : { "getNodePresentationFor(Layer,Object)::FigNode" : 1}},{ "className" : "org::argouml::notation::providers::TransitionNotation" , "selectors" : { "TransitionNotation(Object)" : 1}},{ "className" : "org::argouml::uml::cognitive::critics::CrUnconventionalOperName" , "selectors" : { "CrUnconventionalOperName()" : 1 , "candidateForConstructor(Object)" : 1 , "computeOffenders(Object)" : 2 , "computeSuggestion(String)" : 1}},{ "className" : "org::argouml::uml::diagram::ui::ActionNavigateUpFromDiagram" , "selectors" : { "ActionNavigateUpFromDiagram()" : 1 , "navigateTo(Object)" : 1}},{ "className" : "org::argouml::core::propertypanels::ui::RowSelector::AddAction" , "selectors" : { "AddAction(Command)" : 1}},{ "className" : "org::argouml::ui::ContextActionFactory" , "selectors" : { "createContextPopupActions(Object)" : 1}},{ "className" : "org::argouml::activity2::diagram::FigNotation" , "selectors" : { "FigNotation(Object,Rectangle,DiagramSettings,NotationType)" : 3 , "getHeight(???)" : 1 , "getMinimumSize()" : 2 , "setBold(boolean)" : 1 , "setItalic(boolean)" : 1 , "setLineWidth(int)" : 1 , "setText(String)" : 1 , "setUnderline(boolean)" : 1}},{ "className" : "org::argouml::uml::ui::SavePNGAction2" , "selectors" : { "SavePNGAction2(String)" : 1}},{ "className" : "org::argouml::uml::diagram::ui::FigAbstraction" , "selectors" : { "FigAbstraction(Object,DiagramSettings)" : 2 , "createEndArrow()::ArrowHeadTriangle" : 1}},{ "className" : "org::argouml::model::euml::EUMLModelImplementation" , "selectors" : { "getActivityGraphsFactory()" : 4 , "getChangeableKind()" : 2 , "getCollaborationsFactory()" : 3 , "getCommonBehaviorFactory()" : 6 , "getCopyHelper()" : 4 , "getCoreFactory()" : 22 , "getCoreHelper()" : 15 , "getDataTypesHelper()" : 1 , "getEditingDomain(???)" : 36 , "getExtensionMechanismsFactory()" : 2 , "getExtensionMechanismsHelper()" : 1 , "getFacade()" : 10 , "getMetaTypes()" : 4 , "getModelEventPump()" : 14 , "getModelManagementFactory()" : 6 , "getModelManagementHelper()" : 10 , "getOrderingKind()" : 2 , "getReadOnlyMap(???)" : 2 , "getStateMachinesFactory()" : 7 , "getStateMachinesHelper()" : 2 , "getUmlFactory()" : 1 , "getUseCasesFactory()" : 5 , "initializeEditingDomain()" : 1 , "initializeEditingDomain()::EcoreItemProviderAdapterFactory" : 1 , "initializeEditingDomain()::UMLItemProviderAdapterFactory" : 1 , "initializeEditingDomain()::UMLReflectiveItemProviderAdapterFactory" : 1 , "initializeEditingDomain()::UMLResourceItemProviderAdapterFactory" : 1 , "unloadResource(???)" : 1}},{ "className" : "org::argouml::uml::diagram::ui::FigMultiLineTextWithBold" , "selectors" : { "FigMultiLineTextWithBold(Object,Rectangle,DiagramSettings,boolean)" : 1}},{ "className" : "org::argouml::uml::ui::ActionRemoveTaggedValue" , "selectors" : { "ActionRemoveTaggedValue(JTable)" : 1}},{ "className" : "org::argouml::ui::targetmanager::TargetListener" , "selectors" : { "targetAdded(TargetEvent)" : 5 , "targetRemoved(TargetEvent)" : 5 , "targetSet(TargetEvent)" : 6}},{ "className" : "org::argouml::uml::diagram::static_structure::ui::FigEdgeNote" , "selectors" : { "FigEdgeNote(Object,DiagramSettings)" : 7 , "addElementListener(Object)" : 2 , "getDestination()" : 1 , "getSource()" : 1 , "modelChanged(PropertyChangeEvent)" : 1 , "removeElementListener(Object)" : 3 , "removeFromDiagram()" : 2}},{ "className" : "org::argouml::language::java::reveng::classfile::ByteToken" , "selectors" : { "ByteToken(int)" : 2 , "ByteToken(int,byte)" : 1 , "setValue(byte)" : 1}},{ "className" : "org::argouml::uml::ui::ActionRemoveModelElement" , "selectors" : { "ActionRemoveModelElement()" : 1}},{ "className" : "org::argouml::ui::explorer::rules::GoCompositeStateToSubvertex" , "selectors" : { "GoCompositeStateToSubvertex()" : 3}},{ "className" : "org::argouml::ocl::CriticOclEvaluator" , "selectors" : { "CriticOclEvaluator()" : 1 , "evalToString(???)" : 2 , "getInstance()" : 2}},{ "className" : "org::argouml::ui::SettingsTabSql" , "selectors" : { "SettingsTabSql()" : 1 , "getElementForRow(int)" : 3 , "updateMappings()" : 2}},{ "className" : "org::argouml::core::propertypanels::ui::SwingUIFactory" , "selectors" : { "SwingUIFactory()" : 1 , "addControl(JPanel,String,JComponent,Object)" : 10 , "addCreateButtons(Object,JToolBar,Collection<Class<?>>)" : 2 , "buildCheckBox(JPanel,Object,CheckBoxData)" : 1 , "buildCheckGroup(JPanel,Object,ControlData)" : 1 , "buildComboPanel(JPanel,Object,ControlData)" : 1 , "buildList(JPanel,Object,ControlData)" : 1 , "buildOptionBox(JPanel,Object,ControlData)" : 1 , "buildSingleRow(JPanel,Object,ControlData)" : 1 , "buildTextArea(JPanel,Object,ControlData)" : 1 , "buildTextboxPanel(JPanel,Object,ControlData)" : 1 , "createControl(Object,JPanel,ControlData)" : 1 , "createGUI(Object,JPanel)" : 1 , "createLabel(Object,PanelData,JPanel)" : 1 , "createLabel(Object,PanelData,JPanel)::ToolBarFactory" : 1}},{ "className" : "org::argouml::core::propertypanels::ui::UMLMessageActivatorComboBox" , "selectors" : { "UMLMessageActivatorComboBox(UMLComboBoxModel,Action)" : 1}},{ "className" : "org::argouml::ui::cmd::LastRecentlyUsedMenuList" , "selectors" : { "LastRecentlyUsedMenuList(JMenu)" : 1 , "addEntry(String)" : 1 , "addEventHandler(String,int)" : 3}},{ "className" : "org::argouml::uml::ui::UMLLinkMouseListener" , "selectors" : { "UMLLinkMouseListener(JList)" : 2 , "UMLLinkMouseListener(JList,int)" : 1}},{ "className" : "org::argouml::ui::explorer::rules::GoClassifierToSequenceDiagram" , "selectors" : { "GoClassifierToSequenceDiagram()" : 2}},{ "className" : "org::argouml::language::csharp::importer::csparser::types::InterfaceNode" , "selectors" : { "InterfaceNode()" : 1}},{ "className" : "org::argouml::uml::diagram::UMLMutableGraphSupport" , "selectors" : { "UMLMutableGraphSupport()" : 2 , "addNodeRelatedEdges(Object)" : 5 , "buildCommentConnection(Object,Object)" : 1 , "buildConnection(Object,Object,Object,Object,Object,Object,Object)" : 2 , "canAddEdge(Object)" : 3 , "canAddNode(Object)" : 2 , "canChangeConnectedNode(???)" : 1 , "canConnect(Object,Object)" : 1 , "changeConnectedNode(???)" : 1 , "connect(Object,Object,Object)" : 2 , "containsNode(Object)" : 27 , "getDestPort(Object)" : 3 , "getDiDiagram()" : 2 , "getEdges()" : 8 , "getHomeModel()" : 11 , "getNodes()" : 9 , "getProject()" : 2 , "getSourcePort(Object)" : 3 , "isConnectionValid(Object,Object,Object)" : 2 , "isRemoveFromDiagramAllowed(Collection)" : 2 , "removeEdge(Object)" : 9 , "removeNode(Object)" : 14 , "setDiDiagram(DiDiagram)" : 1 , "setHomeModel(Object)" : 10 , "setProject(Project)" : 1}},{ "className" : "org::argouml::ui::explorer::PerspectiveConfigurator" , "selectors" : { "PerspectiveConfigurator()" : 1 , "doAddRule()" : 2 , "doRemoveRule()" : 2 , "loadLibrary()" : 4 , "loadPerspectives()" : 1 , "makeButtons()" : 1 , "makeLayout()" : 1 , "makeListeners()" : 1 , "makeLists()" : 1 , "setVisible(???)" : 1 , "sortJListModel(JList)" : 2 , "updateLibLabel()" : 1 , "updatePersLabel()" : 5 , "updateRuleLabel()" : 5}},{ "className" : "org::argouml::core::propertypanels::model::GetterSetterManagerImpl::GuardGetterSetter" , "selectors" : { "GuardGetterSetter()" : 1 , "getOptions(Object,Collection<Class<?>>)" : 1}},{ "className" : "org::argouml::ui::explorer::ExplorerEventAdaptor" , "selectors" : { "ExplorerEventAdaptor()" : 1 , "getInstance()" : 7 , "modelChanged(UmlChangeEvent)" : 1 , "modelElementAdded(Object)" : 2 , "modelElementChanged(Object)" : 2 , "setTreeModelUMLEventListener(TreeModelUMLEventListener)" : 1 , "structureChanged()" : 4}},{ "className" : "org::argouml::language::java::reveng::classfile::ParserUtils::SimpleClassTypeSignatureLexer" , "selectors" : { "SimpleClassTypeSignatureLexer(String)" : 2 , "parse()" : 2}},{ "className" : "org::argouml::ui::cmd::SettingsTabShortcuts::ShortcutTableModel" , "selectors" : { "ShortcutTableModel()" : 2}},{ "className" : "org::argouml::uml::ui::behavior::state_machines::ActionNewGuard" , "selectors" : { "ActionNewGuard()" : 1}},{ "className" : "org::argouml::sequence2::diagram::FigClassifierRole" , "selectors" : { "FigClassifierRole(Object,Rectangle,DiagramSettings)" : 1 , "createActivations()" : 12 , "getFigEdges(???)" : 1 , "getFigMessages()" : 3 , "getFirstCreateFigMessage()" : 2 , "getHeight(???)" : 2 , "getMinimumSize()" : 1 , "getWidth(???)" : 2 , "getX(???)" : 2 , "getY(???)" : 1 , "initialize()" : 1 , "positionHead(FigMessage)" : 4 , "setLineWidth(int)" : 1 , "updateHeadOffset()" : 1 , "updateMinimumHeight()" : 1}},{ "className" : "com::nwalsh::saxon::LineCountEmitter" , "selectors" : { "LineCountEmitter()" : 1 , "lineCount()" : 1}},{ "className" : "org::argouml::persistence::InterruptedIOException" , "selectors" : { "InterruptedIOException(InterruptedException)" : 1}},{ "className" : "org::argouml::core::propertypanels::model::GetterSetterManagerImpl::ChangeabilityGetterSetter" , "selectors" : { "ChangeabilityGetterSetter()" : 1}},{ "className" : "org::argouml::uml::ui::ActionUseCaseDiagram" , "selectors" : { "ActionUseCaseDiagram()" : 8}},{ "className" : "org::argouml::uml::reveng::ImportInterface" , "selectors" : { "getImportSettings()" : 1 , "getSuffixFilters()" : 4 , "parseFiles(Project,Collection<File>,ImportSettings,ProgressMonitor)" : 1}},{ "className" : "org::argouml::uml::ui::behavior::common_behavior::ActionNewDestroyAction" , "selectors" : { "ActionNewDestroyAction()" : 1 , "getButtonInstance()" : 3}},{ "className" : "org::argouml::language::csharp::importer::csparser::main::FeatureNotSupportedException" , "selectors" : { "FeatureNotSupportedException(String)" : 1}},{ "className" : "org::argouml::language::cpp::reveng::AttributeModeler" , "selectors" : { "AttributeModeler(Object,Object,Object,ProfileCpp)" : 1 , "finish()" : 1 , "getAttribute()" : 5 , "removeAttributeIfDuplicate()" : 1}},{ "className" : "org::argouml::sequence2::SequenceDiagramPropPanelFactory" , "selectors" : { "SequenceDiagramPropPanelFactory()" : 1}},{ "className" : "org::argouml::language::java::reveng::ClassifierContext" , "selectors" : { "ClassifierContext(Context,Object)" : 1}},{ "className" : "org::argouml::language::csharp::importer::csparser::statements::SwitchStatement" , "selectors" : { "SwitchStatement()" : 1}},{ "className" : "javax::swing::event::ChangeEvent" , "selectors" : { "ChangeEvent(Object)" : 79}},{ "className" : "org::argouml::ui::NavigatorPane" , "selectors" : { "NavigatorPane(SplashScreen)" : 1 , "NavigatorPane(SplashScreen,ProgressMonitor)" : 2 , "NavigatorPane(SplashScreen,ProgressMonitor)::ToolBarFactory" : 2}},{ "className" : "org::argouml::uml::ui::AbstractActionNavigate" , "selectors" : { "AbstractActionNavigate(String,boolean)" : 5 , "isEnabled()" : 3 , "navigateTo(Object)" : 2}},{ "className" : "org::argouml::model::StateMachinesFactory" , "selectors" : { "buildCallEvent(Object)" : 3 , "buildCallEvent(Object,String,Object)" : 2 , "buildChangeEvent(Object)" : 2 , "buildChangeEvent(String,Object)" : 4 , "buildCompositeState(Object)" : 5 , "buildCompositeStateOnStateMachine(Object)" : 2 , "buildFinalState(Object)" : 2 , "buildGuard(Object)" : 3 , "buildInternalTransition(Object)" : 3 , "buildPseudoState(Object)" : 3 , "buildSignalEvent(Object)" : 3 , "buildSignalEvent(String,Object)" : 4 , "buildSimpleState(Object)" : 2 , "buildStateMachine(Object)" : 1 , "buildStubState(Object)" : 2 , "buildSubmachineState(Object)" : 2 , "buildSynchState(Object)" : 2 , "buildTimeEvent(Object)" : 2 , "buildTimeEvent(String,Object)" : 4 , "buildTransition(Object,Object)" : 2 , "createCallEvent()" : 1 , "createChangeEvent()" : 1 , "createGuard()" : 1 , "createSignalEvent()" : 1 , "createSimpleState()" : 1 , "createStateMachine()" : 1 , "createTimeEvent()" : 1}},{ "className" : "org::argouml::language::csharp::importer::csparser::statements::ForEachStatement" , "selectors" : { "ForEachStatement()" : 1}},{ "className" : "org::argouml::core::propertypanels::model::GetterSetterManagerImpl::BaseGetterSetter::RemoveCommand" , "selectors" : { "RemoveCommand(Object,Object)" : 1}},{ "className" : "org::argouml::ui::explorer::PerspectiveConfigurator::RuleListMouseListener" , "selectors" : { "RuleListMouseListener()" : 2}},{ "className" : "org::argouml::kernel::Project" , "selectors" : { "addMember(Object)" : 22 , "addSearchPath(String)" : 1 , "findAllPresentationsFor(Object)" : 2 , "findFigsForMember(???)" : 4 , "findType(String)" : 2 , "findType(String,boolean)" : 3 , "findTypeInDefaultModel(String)" : 1 , "findTypeInModel(String,Object)" : 1 , "getActiveDiagram()" : 2 , "getAuthoremail()" : 1 , "getAuthorname()" : 1 , "getDefaultAttributeType()" : 2 , "getDefaultParameterType()" : 1 , "getDefaultReturnType()" : 7 , "getDefaults()" : 4 , "getDescription()" : 1 , "getDiagram(String)" : 3 , "getDiagramCount()" : 2 , "getDiagramList()" : 30 , "getInitialTarget()" : 2 , "getMembers()" : 13 , "getModel()" : 20 , "getModels()" : 8 , "getName()" : 10 , "getPresentationCountFor(Object)" : 1 , "getProfileConfiguration()" : 24 , "getProjectSettings()" : 32 , "getProjectType()" : 1 , "getRoot()" : 15 , "getRoots()" : 8 , "getURI()" : 18 , "getUUIDRefs()" : 1 , "getUndoManager()" : 11 , "getUri()" : 1 , "getUserDefinedModelList()" : 24 , "getVersion()" : 1 , "isInTrash(Object)" : 1 , "isValidDiagramName(String)" : 1 , "moveToTrash(Object)" : 25 , "postLoad()" : 2 , "postSave()" : 1 , "preSave()" : 1 , "remove()" : 3 , "repair()" : 1 , "setActiveDiagram(ArgoDiagram)" : 5 , "setAuthoremail(String)" : 2 , "setAuthorname(String)" : 2 , "setCurrentNamespace(Object)" : 3 , "setDescription(String)" : 2 , "setDirty(boolean)" : 3 , "setFile(File)" : 3 , "setHistoryFile(String)" : 1 , "setPersistenceVersion(int)" : 3 , "setProfileConfiguration(ProfileConfiguration)" : 2 , "setProjectType(int)" : 1 , "setRoot(Object)" : 2 , "setRoots(Collection)" : 4 , "setSavedDiagramName(String)" : 1 , "setUUIDRefs(Map<String,Object>)" : 3 , "setUri(URI)" : 1 , "setVersion(String)" : 4 , "updateRoots()" : 2}},{ "className" : "org::argouml::application::events::ArgoDiagramAppearanceEvent" , "selectors" : { "ArgoDiagramAppearanceEvent(int,Object)" : 2}},{ "className" : "org::argouml::model::AddAssociationEvent" , "selectors" : { "AddAssociationEvent(Object,String,Object,Object,Object,EventObject)" : 5}},{ "className" : "org::argouml::ui::MultiEditorPane" , "selectors" : { "<Initializer>()::ModeDragScrollFactory" : 1 , "<Initializer>()::ModePopupFactory" : 1 , "<Initializer>()::ModeSelectFactory" : 1 , "MultiEditorPane()" : 1 , "enableTabs(Object)" : 1 , "getIndexOfNamedTab(String)" : 1 , "myDoubleClick(int)" : 1 , "mySingleClick(int)" : 1 , "setTarget(Object)" : 4}},{ "className" : "org::argouml::gefext::DeferredBufferedImage" , "selectors" : { "DeferredBufferedImage(???)" : 2 , "computeRaster(Rectangle)" : 1 , "getData(Rectangle)" : 2 , "getHeight()" : 1 , "getMinTileX()" : 2 , "getMinTileY()" : 3 , "getNumXTiles()" : 1 , "getNumYTiles()" : 1 , "isRasterValid(Rectangle)" : 1 , "offsetWindow(Rectangle)" : 1}},{ "className" : "org::argouml::core::propertypanels::ui::UMLCommentBodyDocument" , "selectors" : { "UMLCommentBodyDocument(String,Object)" : 1}},{ "className" : "org::argouml::uml::diagram::ui::CompartmentFigText" , "selectors" : { "CompartmentFigText(Object,Rectangle,DiagramSettings)" : 3 , "CompartmentFigText(Object,Rectangle,DiagramSettings,String[])" : 1 , "removeFromDiagram()" : 1 , "removeFromDiagram()::FigGroup" : 1 , "setTextFilled(???)" : 1 , "startTextEditor(???)" : 1}},{ "className" : "org::argouml::uml::ActionAddStereotype" , "selectors" : { "ActionAddStereotype(Collection<Object>,Object)" : 1 , "ActionAddStereotype(Object,Object)" : 1 , "buildString(Object)" : 4}},{ "className" : "java::awt::event::ComponentListener" , "selectors" : { "setOrientation(???)" : 1}},{ "className" : "org::argouml::uml::diagram::state::ui::FigJunctionState" , "selectors" : { "FigJunctionState(Object,Rectangle,DiagramSettings)" : 4 , "createBigPortFig()::FigDiamond" : 1 , "getFigs(???)" : 1 , "initFigs()" : 1 , "initFigs()::FigDiamond" : 1 , "setBigPort(???)" : 1}},{ "className" : "org::argouml::ui::explorer::rules::GoModelElementToContainedLostElements" , "selectors" : { "GoModelElementToContainedLostElements()" : 2}},{ "className" : "org::argouml::core::propertypanels::model::GetterSetterManagerImpl::ArgumentGetterSetter" , "selectors" : { "ArgumentGetterSetter()" : 1 , "getOptions(Object,Collection<Class<?>>)" : 1}},{ "className" : "org::argouml::ui::ChildGenSearch" , "selectors" : { "ChildGenSearch()" : 1}},{ "className" : "org::argouml::model::UseCasesHelper" , "selectors" : { "addExtend(Object,Object)" : 1 , "addExtensionPoint(Object,Object)" : 2 , "addExtensionPoint(Object,int,Object)" : 1 , "addInclude(Object,Object)" : 1 , "getAllActors(Object)" : 1 , "getAllUseCases(Object)" : 1 , "getExtendedUseCases(Object)" : 1 , "getExtends(Object,Object)" : 1 , "getIncludedUseCases(Object)" : 1 , "getIncludes(Object,Object)" : 1 , "getSpecificationPath(Object)" : 2 , "removeExtend(Object,Object)" : 1 , "removeExtensionPoint(Object,Object)" : 1 , "removeInclude(Object,Object)" : 1 , "setAddition(Object,Object)" : 1 , "setBase(Object,Object)" : 1 , "setCondition(Object,Object)" : 4 , "setExtension(Object,Object)" : 1 , "setExtensionPoints(Object,Collection)" : 4 , "setIncludes(Object,Collection)" : 1 , "setLocation(Object,String)" : 8 , "setUseCase(Object,Object)" : 1}},{ "className" : "org::argouml::uml::ui::UMLTaggedValueCheckBox" , "selectors" : { "UMLTaggedValueCheckBox(String)" : 2}},{ "className" : "org::argouml::core::propertypanels::ui::LabelledLayout" , "selectors" : { "LabelledLayout()" : 2 , "calculateHeight(int,int,int,Component)" : 1 , "getChildHeight(Component)" : 1 , "getMaximumWidth(Component)" : 2 , "getMinimumHeight(Component)" : 3 , "getPreferredHeight(Component)" : 2 , "getSectionCount(Container)" : 1 , "getSectionWidth(Container,int)" : 1 , "getSeparator()" : 1 , "getUsableWidth(Container)" : 1 , "isResizable(Component)" : 1 , "layoutSection(Container,int,int,ArrayList,int)" : 2}},{ "className" : "org::argouml::model::mdr::ExtensionMechanismsHelperMDRImpl" , "selectors" : { "ExtensionMechanismsHelperMDRImpl(MDRModelImplementation)" : 1 , "addBaseClass(Object,Object)::Stereotype" : 2 , "addExtendedElement(Object,Object)::ModelElement" : 1 , "addTaggedValue(Object,Object)::ModelElement" : 1 , "getStereotype(Collection,Object)::Stereotype" : 2 , "getStereotype(Object,Object)::ModelElement" : 1 , "getStereotype(Object,Object)::Stereotype" : 1 , "getStereotypes(Object)::Namespace" : 1 , "isStereotype(Object,String,String)" : 1 , "isStereotypeInh(Object,String,String)" : 1 , "removeBaseClass(Object,Object)::Stereotype" : 2 , "removeTaggedValue(Object,Object)::ModelElement" : 1 , "setDataValues(Object,String[])" : 1 , "setIcon(Object,Object)::Stereotype" : 1 , "setTagType(Object,String)::TagDefinition" : 1 , "setType(Object,Object)::TaggedValue" : 1}},{ "className" : "org::argouml::util::CollectionUtil" , "selectors" : { "getFirstItem(Collection)" : 1 , "getFirstItemOrNull(Collection)" : 1 , "indexOf(Collection,Object)" : 1}},{ "className" : "org::argouml::uml::diagram::ui::FigTextGroup" , "selectors" : { "FigTextGroup(Object,DiagramSettings)" : 7 , "addFig(???)" : 12 , "calcBounds()" : 7 , "mouseClicked(MouseEvent)::FigText" : 1 , "propertyChange(???)" : 1 , "removeFromDiagram()" : 1 , "updateFigTexts()" : 2}},{ "className" : "org::argouml::ui::explorer::rules::GoTransitionToSource" , "selectors" : { "GoTransitionToSource()" : 2}},{ "className" : "org::argouml::uml::diagram::ui::PathItemPlacement" , "selectors" : { "PathItemPlacement(???)" : 19 , "applyOffset(double,int,Point)" : 4 , "computeVector(Point)" : 1 , "getAnchorPosition()" : 3 , "getPathDistance()" : 2 , "getPoint()" : 1 , "getPosition()" : 1 , "getPosition(Point)" : 2 , "getRectLineIntersection(Rectangle,Point,Point)" : 1 , "getSlope()" : 2 , "getSlope(Point,Point)" : 2 , "intersection(Line2D,Line2D)" : 4 , "intersects(Point[],Point,Dimension)" : 3 , "setAbsoluteOffset(Point)" : 1 , "setAnchor(int,int)" : 2 , "setAnchorOffset(int)" : 1 , "setAnchorPercent(int)" : 1 , "setDisplacementAngle(double)" : 1 , "setDisplacementAngle(int)" : 2 , "setDisplacementDistance(int)" : 3 , "setDisplacementVector(double,int)" : 1 , "setDisplacementVector(int,int)" : 1}},{ "className" : "org::argouml::model::ChangeableKind" , "selectors" : { "getAddOnly()" : 7 , "getChangeable()" : 3 , "getFrozen()" : 4}},{ "className" : "org::argouml::ui::explorer::PerspectiveConfigurator::RenameListener" , "selectors" : { "RenameListener()" : 1}},{ "className" : "org::argouml::uml::diagram::collaboration::ui::ActionAddClassifierRole" , "selectors" : { "ActionAddClassifierRole()" : 1}},{ "className" : "org::argouml::ui::SystemInfoDialog::ClipboardObserver" , "selectors" : { "ClipboardObserver()" : 1}},{ "className" : "org::argouml::uml::cognitive::critics::CrTooManyAttr" , "selectors" : { "CrTooManyAttr()" : 1}},{ "className" : "org::argouml::core::propertypanels::ui::UMLMultiplicityPanel::MultiplicityCheckBox" , "selectors" : { "MultiplicityCheckBox(Object)" : 1}},{ "className" : "org::argouml::notation::Notation" , "selectors" : { "Notation()" : 1 , "findNotation(String)" : 20 , "getAvailableNotations()" : 3 , "getConfiguredNotation()" : 4 , "makeNotation(String,String,Icon)" : 4 , "removeNotation(NotationName)" : 1 , "setDefaultNotation(NotationName)" : 1}},{ "className" : "org::argouml::cognitive::ui::GoListToOffenderToItem" , "selectors" : { "GoListToOffenderToItem()" : 2 , "getChildrenList(Object)" : 3}},{ "className" : "org::argouml::model::euml::MetaTypesEUMLImpl" , "selectors" : { "MetaTypesEUMLImpl(EUMLModelImplementation)" : 1 , "getName(Object)" : 3}},{ "className" : "org::argouml::uml::diagram::ui::FigClassAssociationClass" , "selectors" : { "FigClassAssociationClass(Object,Rectangle,DiagramSettings)" : 2 , "addPropertyChangeListener(???)" : 1 , "damage(???)" : 1 , "getHeight(???)" : 1 , "getWidth(???)" : 1 , "removePropertyChangeListener(???)" : 1 , "setLineColor(???)" : 1 , "setLocation(???)" : 2}},{ "className" : "org::argouml::cognitive::ui::ToDoPane" , "selectors" : { "ToDoPane()" : 2 , "buildPerspectives()" : 1 , "formatCountLabel(int)" : 2 , "getSelectedObject()" : 4 , "myDoubleClick(int,TreePath)" : 1 , "mySingleClick(int,TreePath)" : 1 , "selectItem(ToDoItem)" : 2 , "setCurPerspective(TreeModel)" : 2 , "setPerspectives(List<ToDoPerspective>)" : 1 , "setRoot(ToDoList)" : 1 , "swingInvoke(Runnable)" : 4 , "updateCountLabel()" : 3 , "updateTree()" : 3}},{ "className" : "org::argouml::uml::diagram::ui::FigNodeAssociation" , "selectors" : { "FigNodeAssociation(Object,Rectangle,DiagramSettings)" : 1 , "createBigPortFig()::FigDiamond" : 1 , "getFigs(???)" : 1 , "getHeight(???)" : 2 , "getWidth(???)" : 1 , "initFigs()" : 1 , "initFigs()::FigDiamond" : 1 , "reduceToBinary()" : 1 , "setBigPort(???)" : 1 , "setLocation(???)" : 1 , "setNameFig(???)" : 1 , "updateEdges(???)" : 1}},{ "className" : "org::argouml::uml::diagram::static_structure::layout::ClassdiagramAssociationEdge" , "selectors" : { "ClassdiagramAssociationEdge(???)" : 1}},{ "className" : "org::argouml::uml::diagram::ui::FigCompartment::FigSeparator" , "selectors" : { "FigSeparator(int,int,int,int)" : 1 , "setLineWidth(int)" : 1}},{ "className" : "org::argouml::uml::ui::ActionDeleteModelElements" , "selectors" : { "ActionDeleteModelElements()" : 7 , "actionPerformed(ActionEvent)::Fig" : 1 , "actionPerformed(ActionEvent)::FigTextEditor" : 1 , "getTargetFollower()" : 4 , "getTargetFollower()::anonymous(TargetListener)" : 3 , "shouldBeEnabled()" : 4 , "sureRemove(Object)" : 3 , "sureRemove(Object)::Fig" : 2 , "sureRemoveModelElement(Object)" : 2}},{ "className" : "org::argouml::core::propertypanels::model::GetterSetterManagerImpl::QueryGetterSetter" , "selectors" : { "QueryGetterSetter()" : 1}},{ "className" : "org::argouml::uml::diagram::ui::ActionAddMessage" , "selectors" : { "ActionAddMessage()" : 1 , "addMessage(Object)" : 1 , "getTargetFollower()" : 1 , "getTargetFollower()::anonymous(TargetListener)" : 3 , "shouldBeEnabled()" : 2}},{ "className" : "org::argouml::ui::TabResults" , "selectors" : { "TabResults()" : 1 , "TabResults(boolean)" : 2 , "depthFirst(Object,ArgoDiagram)" : 2 , "doDoubleClick()" : 2 , "myDoubleClick(Object)" : 3 , "run()" : 1 , "selectResult(int)" : 2 , "setGenerator(ChildGenerator)" : 1 , "setPredicate(PredicateSearch)" : 1 , "setResults(List,List)" : 3 , "setRoot(Object)" : 1}},{ "className" : "org::argouml::ui::explorer::rules::InheritanceNode" , "selectors" : { "InheritanceNode(Object)" : 1 , "getParent()" : 5}},{ "className" : "java::awt::Image" , "selectors" : { "flush()" : 79 , "getGraphics()" : 83 , "getHeight(ImageObserver)" : 253 , "getScaledInstance(int,int,int)" : 65 , "getSource()" : 43 , "getWidth(ImageObserver)" : 254}},{ "className" : "org::argouml::profile::UserDefinedProfile::UserDefinedFigNodeStrategy" , "selectors" : { "UserDefinedFigNodeStrategy()" : 1 , "addDesrciptor(FigNodeDescriptor)" : 1}},{ "className" : "org::argouml::uml::cognitive::critics::CrInvalidInitial" , "selectors" : { "CrInvalidInitial()" : 1}},{ "className" : "org::argouml::uml::reveng::ImportClassLoader" , "selectors" : { "ImportClassLoader(URL[])" : 2 , "addFile(File)" : 2 , "getInstance()" : 7 , "getInstance(URL[])" : 2 , "getURLs(String)" : 2 , "saveUserPath()" : 1 , "setPath(String)" : 1 , "toString()" : 1}},{ "className" : "org::argouml::application::api::CommandLineInterface" , "selectors" : { "doCommand(String)" : 1}},{ "className" : "org::argouml::model::mdr::XmiReferenceProviderImpl" , "selectors" : { "XmiReferenceProviderImpl(Map<String,XmiReference>)" : 1 , "getReference(RefObject)::XMIReferenceProvider" : 2}},{ "className" : "org::argouml::uml::diagram::ui::ActionModifierRoot" , "selectors" : { "ActionModifierRoot(Object)" : 1 , "valueOfTarget(Object)" : 1}},{ "className" : "org::argouml::language::java::profile::ProfileJava" , "selectors" : { "getFallbackModel()" : 1 , "getModel()" : 4}},{ "className" : "org::argouml::uml::diagram::ui::SelectionMoveClarifiers" , "selectors" : { "SelectionMoveClarifiers(???)" : 1}},{ "className" : "org::argouml::cognitive::ToDoListListener" , "selectors" : { "toDoItemsAdded(ToDoListEvent)" : 2 , "toDoItemsChanged(ToDoListEvent)" : 2 , "toDoItemsRemoved(ToDoListEvent)" : 2 , "toDoListChanged(ToDoListEvent)" : 1}},{ "className" : "org::argouml::ui::cmd::ShortcutMgr" , "selectors" : { "<Initializer>()::ZoomAction" : 1 , "assignAccelerator(JMenuItem,String)" : 79 , "decodeKeyStroke(String)" : 5 , "decodeModifier(String)" : 1 , "getActionDefaultName(AbstractAction)" : 1 , "getDuplicate(KeyStroke)" : 1 , "getShortcuts()" : 2 , "putDefaultShortcut(String,KeyStroke,AbstractAction)" : 67 , "putDefaultShortcut(String,KeyStroke,AbstractAction,String)" : 1 , "saveShortcuts(ActionWrapper[])" : 1}},{ "className" : "org::argouml::uml::ui::foundation::core::ActionSetElementOwnershipSpecification" , "selectors" : { "ActionSetElementOwnershipSpecification()" : 1}},{ "className" : "org::argouml::uml::diagram::state::ui::ButtonActionNewSignalEvent" , "selectors" : { "ButtonActionNewSignalEvent()" : 3}},{ "className" : "org::argouml::uml::diagram::ui::FigProfileIcon" , "selectors" : { "FigProfileIcon(DiagramSettings,Image,String)" : 1 , "FigProfileIcon(DiagramSettings,Image,String)::FigImage" : 1 , "getBounds(???)" : 1 , "getLabelFig(???)" : 1 , "getX(???)" : 1 , "getY(???)" : 1 , "setBounds(???)" : 1 , "setLocation(???)" : 1 , "setOwner(???)" : 1}},{ "className" : "org::argouml::core::propertypanels::ui::UMLEditableComboBox::UMLComboBoxEditor" , "selectors" : { "UMLComboBoxEditor(boolean)" : 1 , "setShowIcon(boolean)" : 1}},{ "className" : "org::argouml::profile::internal::DependencyResolver" , "selectors" : { "DependencyResolver(DependencyChecker<T>)" : 1 , "internalResolve(Collection<T>)" : 2 , "items2Msg(String,Collection<T>)" : 2 , "resolve()" : 1 , "resolve(Collection<T>)" : 2}},{ "className" : "org::argouml::cognitive::DecisionModel" , "selectors" : { "DecisionModel()" : 1 , "findDecision(String)" : 2 , "getDecisionList()" : 5 , "setDecisionPriority(String,int)" : 2 , "startConsidering(Decision)" : 16}},{ "className" : "org::argouml::uml::diagram::static_structure::ui::FigPackage::ShowVisibilityAction" , "selectors" : { "ShowVisibilityAction()" : 1}},{ "className" : "javax::swing::event::EventListenerList" , "selectors" : { "EventListenerList()" : 120 , "add(Class<T>,T)" : 152 , "getListenerCount()" : 21 , "getListenerCount(Class<?>)" : 4 , "getListenerList()" : 196 , "getListeners(Class<T>)" : 59 , "javax" : 6 , "remove(Class<T>,T)" : 115}},{ "className" : "org::argouml::core::propertypanels::ui::UMLDependencyClientListModel" , "selectors" : { "UMLDependencyClientListModel(Object)" : 1}},{ "className" : "org::argouml::uml::cognitive::critics::CrUnconventionalClassName" , "selectors" : { "CrUnconventionalClassName()" : 1 , "computeSuggestion(String)" : 1}},{ "className" : "org::argouml::uml::ui::behavior::common_behavior::ActionAddCreateActionInstantiation" , "selectors" : { "ActionAddCreateActionInstantiation()" : 1}},{ "className" : "org::argouml::core::propertypanels::model::GetterSetterManagerImpl::ParameterDirectionGetterSetter" , "selectors" : { "ParameterDirectionGetterSetter()" : 1}},{ "className" : "org::argouml::uml::cognitive::critics::UMLWizard" , "selectors" : { "UMLWizard()" : 4 , "getModelElement()" : 10 , "getSuggestion()" : 4 , "offerSuggestion()" : 4 , "setSuggestion(String)" : 4}},{ "className" : "org::argouml::uml::diagram::SequenceDiagram" , "selectors" : { "getCollaboration()" : 2}},{ "className" : "org::argouml::ui::explorer::WeakExplorerNode" , "selectors" : { "subsumes(Object)" : 1}},{ "className" : "org::argouml::profile::internal::DependencyChecker" , "selectors" : { "check(T)" : 1}},{ "className" : "org::argouml::ui::ShadowComboBox" , "selectors" : { "ShadowComboBox()" : 1}},{ "className" : "org::argouml::core::propertypanels::ui::UMLExtensionPointLocationDocument" , "selectors" : { "UMLExtensionPointLocationDocument(String,Object)" : 1}},{ "className" : "org::argouml::uml::cognitive::critics::CrUnconventionalPackName" , "selectors" : { "CrUnconventionalPackName()" : 1 , "computeSuggestion(String)" : 1}},{ "className" : "org::argouml::model::mdr::UndoCoreHelperDecorator::ObjectSetter" , "selectors" : { "set(Object)" : 2}},{ "className" : "org::argouml::language::php::PHPDocumentor::PackageTag" , "selectors" : { "PackageTag()" : 1}},{ "className" : "org::argouml::ui::explorer::rules::GoPackageToClass" , "selectors" : { "GoPackageToClass()" : 2}},{ "className" : "javax::swing::AbstractListModel" , "selectors" : { "AbstractListModel()" : 5 , "addListDataListener(ListDataListener)" : 9 , "fireContentsChanged(Object,int,int)" : 31 , "fireIntervalAdded(Object,int,int)" : 21 , "fireIntervalRemoved(Object,int,int)" : 22 , "removeListDataListener(ListDataListener)" : 4}},{ "className" : "org::argouml::ui::TableModelCodeCreators" , "selectors" : { "TableModelCodeCreators()" : 2 , "getRowCount()" : 1}},{ "className" : "org::argouml::state2::diagram::FigVertex::FigBody" , "selectors" : { "FigBody(int,int,int,int)" : 1 , "setText(???)" : 2}},{ "className" : "org::argouml::ui::LookAndFeelMgr" , "selectors" : { "LookAndFeelMgr()" : 1 , "getAvailableLookAndFeelNames()" : 1 , "getAvailableThemeNames()" : 1 , "getCurrentLookAndFeel()" : 4 , "getCurrentLookAndFeelName()" : 1 , "getCurrentThemeClassName()" : 3 , "getCurrentThemeName()" : 1 , "getInstance()" : 37 , "getLookAndFeelFromName(String)" : 2 , "getMetalTheme(String)" : 2 , "getStandardFont()" : 27 , "getThemeClassNameFromArg(String)" : 1 , "getThemeFromName(String)" : 1 , "initializeLookAndFeel()" : 1 , "isThemeCompatibleLookAndFeel(String)" : 2 , "printThemeArgs()" : 1 , "setCurrentLAFAndThemeByName(String,String)" : 1 , "setCurrentTheme(String)" : 2 , "setLookAndFeel(String)" : 1 , "setTheme(MetalTheme)" : 2}},{ "className" : "org::argouml::notation::providers::uml::StateBodyNotationUml" , "selectors" : { "buildNewCallAction(String)" : 3 , "delete(Object)" : 4 , "parseStateBody(Object,String)" : 1 , "parseStateDoAction(Object,String)" : 1 , "parseStateEntryAction(Object,String)" : 1 , "parseStateExitAction(Object,String)" : 1 , "updateAction(Object,String)" : 3}},{ "className" : "org::argouml::core::propertypanels::model::GetterSetterManagerImpl::FeatureGetterSetter" , "selectors" : { "FeatureGetterSetter()" : 2 , "getOptions(Object,Collection<Class<?>>)" : 1}},{ "className" : "org::argouml::ui::explorer::ActionManageProfiles" , "selectors" : { "ActionManageProfiles()" : 1}},{ "className" : "org::argouml::kernel::AbstractProjectMember" , "selectors" : { "AbstractProjectMember(String,Project)" : 5 , "getType()" : 1 , "getZipFileExtension()" : 6 , "getZipName()" : 1 , "makeUniqueName(String)" : 1 , "remove()" : 6}},{ "className" : "org::argouml::activity2::diagram::ActivityDiagramFactory" , "selectors" : { "ActivityDiagramFactory()" : 1}},{ "className" : "org::argouml::transformer::EventTransformer::EventToChangeEvent" , "selectors" : { "EventToChangeEvent(Project,Object)" : 1}},{ "className" : "org::argouml::model::ModelManagementFactory" , "selectors" : { "buildElementImport(Object,Object)" : 1 , "buildPackage(String)" : 6 , "copyPackage(Object,Object)" : 1 , "createModel()" : 3 , "createPackage()" : 3 , "createProfile()" : 3 , "getRootModel()" : 3 , "setRootModel(Object)" : 2}},{ "className" : "org::argouml::notation::providers::ComponentInstanceNotation" , "selectors" : { "ComponentInstanceNotation(Object)" : 1}},{ "className" : "org::argouml::transformer::TransformerManager" , "selectors" : { "TransformerManager()" : 1 , "addTransformer(Transformer)" : 2 , "getInstance()" : 4 , "getTransformers()" : 2}},{ "className" : "org::argouml::uml::ui::TabConstraints" , "selectors" : { "TabConstraints()" : 1 , "TabConstraints()::OCLEditor" : 1 , "getOclToolbar()" : 3 , "setTarget(Object)" : 3 , "setTarget(Object)::Fig" : 1 , "setTargetInternal(Object)" : 2 , "setToolbarFloatable(boolean)" : 1 , "setToolbarRollover(boolean)" : 1 , "shouldBeEnabled(Object)::Fig" : 1}},{ "className" : "org::argouml::language::csharp::importer::csparser::nodes::expressions::BaseAccessExpression" , "selectors" : { "BaseAccessExpression(ExpressionList)" : 1 , "BaseAccessExpression(IdentifierExpression)" : 1}},{ "className" : "org::argouml::language::php::generator::Section" , "selectors" : { "Section()" : 1 , "generate(String,String)" : 2}},{ "className" : "org::argouml::core::propertypanels::ui::UMLEventParameterListModel" , "selectors" : { "getModelElements()" : 2}},{ "className" : "org::argouml::pattern::cognitive::critics::CrSingletonViolatedOnlyPrivateConstructors" , "selectors" : { "CrSingletonViolatedOnlyPrivateConstructors()" : 1}},{ "className" : "org::argouml::moduleloader::ModuleLoader2::JarFileFilter" , "selectors" : { "JarFileFilter()" : 1}},{ "className" : "org::argouml::uml::diagram::ui::StereotypeStyled" , "selectors" : { "getStereotypeStyle()" : 1 , "setStereotypeStyle(StereotypeStyle)" : 1}},{ "className" : "org::argouml::uml::reveng::idl::ClassifierNotFoundException" , "selectors" : { "ClassifierNotFoundException(String)" : 1}},{ "className" : "com::nwalsh::saxon::FormatGraphicCallout" , "selectors" : { "FormatGraphicCallout(???)" : 1}},{ "className" : "org::argouml::language::csharp::importer::csparser::nodes::expressions::UnaryExpression" , "selectors" : { "UnaryExpression(int)" : 1 , "UnaryExpression(int,ExpressionNode)" : 2}},{ "className" : "org::argouml::profile::UserDefinedProfileHelper" , "selectors" : { "createUserDefinedProfileFileChooser()" : 1 , "getFileList(File[])" : 2 , "getList(File)" : 1}},{ "className" : "org::argouml::core::propertypanels::ui::UMLMutableLinkedList" , "selectors" : { "UMLMutableLinkedList(DefaultListModel,AbstractActionAddModelElement2,AbstractActionNewModelElement,AbstractActionRemoveElement)" : 5 , "UMLMutableLinkedList(UMLModelElementListModel,JPopupMenu,boolean)" : 1 , "getPopupMenu()" : 5 , "initActions()" : 3 , "isAdd()" : 2 , "isDelete()" : 4 , "isNew()" : 3 , "setAddAction(AbstractActionAddModelElement2)" : 1 , "setNewAction(AbstractActionNewModelElement)" : 1 , "setPopupMenu(JPopupMenu)" : 1}},{ "className" : "org::argouml::ui::explorer::PerspectiveConfigurator::MoveUpListener" , "selectors" : { "MoveUpListener()" : 1}},{ "className" : "org::argouml::uml::ui::TabStereotype::AddRemoveListener" , "selectors" : { "AddRemoveListener()" : 2}},{ "className" : "org::argouml::core::propertypanels::ui::ExpressionBodyField" , "selectors" : { "ExpressionBodyField(ExpressionModel)" : 1}},{ "className" : "org::argouml::ui::TreeModelSupport" , "selectors" : { "TreeModelSupport(String)" : 1 , "fireTreeNodesChanged(Object,Object[],int[],Object[])" : 6 , "fireTreeNodesInserted(Object,Object[],int[],Object[])" : 6 , "fireTreeStructureChanged(Object,Object[])" : 1 , "fireTreeStructureChanged(Object,Object[],int[],Object[])" : 1 , "fireTreeStructureChanged(Object[])" : 6}},{ "className" : "org::argouml::profile::internal::ocl::EvaluateInvariant" , "selectors" : { "EvaluateInvariant(Object,ModelInterpreter)" : 1 , "caseAConstraint(AConstraint)::PConstraintBody" : 1 , "isOK()" : 1}},{ "className" : "org::argouml::core::propertypanels::ui::ListFactory" , "selectors" : { "ListFactory()" : 1 , "createComponent(Object,String,List<Class<?>>)" : 1}},{ "className" : "org::argouml::uml::diagram::activity::ui::ModePlacePartition" , "selectors" : { "ModePlacePartition(???)" : 1}},{ "className" : "org::argouml::core::propertypanels::model::GetterSetterManagerImpl::ElementImportGetterSetter::RemoveElementImportCommand" , "selectors" : { "RemoveElementImportCommand(Object,Object)" : 1}},{ "className" : "org::argouml::ui::explorer::ExplorerPopup" , "selectors" : { "ExplorerPopup(Object,MouseEvent)" : 1 , "addCreateModelElementAction(Set<JMenuItem>,Object,String)" : 7 , "addMenuItemForBothEndsOf(Object)" : 1 , "buildDirectionalCreateMenuItem(Object,Object,Object,String,JMenu)" : 2 , "initMenuCreateDiagrams()" : 1 , "initMenuCreateModelElements()" : 1 , "initMenuCreateModuleActions()" : 1 , "menuLocalize(String)" : 17 , "recursiveAdd(MenuElement,Action)" : 3}},{ "className" : "org::argouml::core::propertypanels::model::GetterSetterManagerImpl::RegionGetterSetter" , "selectors" : { "RegionGetterSetter()" : 1 , "getOptions(Object,Collection<Class<?>>)" : 1}},{ "className" : "org::argouml::uml::ui::UMLDeprecatedCheckBox" , "selectors" : { "UMLDeprecatedCheckBox()" : 1}},{ "className" : "org::argouml::uml::cognitive::critics::CrMultipleInitialStates" , "selectors" : { "CrMultipleInitialStates()" : 1 , "computeOffenders(Object)" : 2}},{ "className" : "org::argouml::ui::explorer::rules::GoModelElementToBehavior" , "selectors" : { "GoModelElementToBehavior()" : 2}},{ "className" : "javax::swing::plaf::ComboBoxUI" , "selectors" : { "setPopupVisible(JComboBox,boolean)" : 2}},{ "className" : "org::argouml::uml::diagram::ui::ActionSetDiagramHomeModel" , "selectors" : { "ActionSetDiagramHomeModel()" : 1}},{ "className" : "org::argouml::uml::ui::TabStereotype" , "selectors" : { "TabStereotype()" : 1 , "doAddStereotype()" : 1 , "doRemoveStereotype()" : 1 , "makePanel()" : 1 , "shouldBeEnabled(Object)" : 1 , "shouldBeEnabled(Object)::Fig" : 1}},{ "className" : "org::argouml::language::sql::ForeignKeyDefinition" , "selectors" : { "ForeignKeyDefinition()" : 1 , "addColumnDefinition(ColumnDefinition)" : 1 , "addReferencesColumn(ColumnDefinition)" : 1 , "getColumnNames()" : 5 , "getForeignKeyName()" : 2 , "getReferencesColumnNames()" : 2 , "getReferencesLower()" : 2 , "getReferencesTableName()" : 3 , "getTable()" : 1 , "getTableName()" : 4 , "getUpper()" : 1 , "setForeignKeyName(String)" : 1 , "setLower(int)" : 1 , "setReferencesLower(int)" : 1 , "setReferencesTable(TableDefinition)" : 1 , "setReferencesUpper(int)" : 1 , "setTable(TableDefinition)" : 1 , "setUpper(int)" : 1}},{ "className" : "org::argouml::persistence::XmlFilePersister" , "selectors" : { "XmlFilePersister()" : 1}},{ "className" : "org::argouml::uml::diagram::static_structure::ui::SelectionException" , "selectors" : { "SelectionException(???)" : 1}},{ "className" : "org::argouml::uml::ui::TabStereotype::AvailableListSelectionListener" , "selectors" : { "AvailableListSelectionListener()" : 1}},{ "className" : "org::argouml::ui::cmd::ActionWrapper" , "selectors" : { "ActionWrapper(String,KeyStroke,KeyStroke,AbstractAction,String)" : 1 , "getActionInstance()" : 3 , "getActionName()" : 11 , "getCurrentShortcut()" : 17 , "getDefaultShortcut()" : 7 , "getKey()" : 6 , "setCurrentShortcut(KeyStroke)" : 3}},{ "className" : "org::argouml::ui::StylePanelFig" , "selectors" : { "StylePanelFig()" : 3 , "StylePanelFig()::ColorRenderer" : 2 , "StylePanelFig(String)" : 1 , "getBBoxField()" : 4 , "getBBoxLabel()" : 2 , "getCustomItemName()" : 2 , "getFillField()" : 8 , "getFillLabel()" : 1 , "getLineField()" : 5 , "getLineLabel()" : 2 , "handleCustomColor(JComboBox,String,Color)" : 3 , "hasEditableBoundingBox(boolean)" : 3 , "initChoices()" : 2 , "itemStateChanged(ItemEvent)" : 2 , "parseBBox()" : 4 , "refresh()" : 3 , "setTargetBBox()" : 3 , "setTargetFill()" : 1 , "setTargetLine()" : 1}},{ "className" : "java::awt::event::ComponentEvent" , "selectors" : { "ComponentEvent(Component,int)" : 2 , "getComponent()" : 153}},{ "className" : "org::argouml::core::propertypanels::ui::UMLMultiplicityPanel::MultiplicityComboBox" , "selectors" : { "MultiplicityComboBox(MultiplicityComboBoxModel,Action)" : 1}},{ "className" : "org::argouml::sequence2::diagram::ActionSetAddMessageMode" , "selectors" : { "ActionSetAddMessageMode(Object,String)" : 5}},{ "className" : "org::argouml::application::api::AbstractArgoJPanel" , "selectors" : { "AbstractArgoJPanel()" : 1 , "AbstractArgoJPanel(String)" : 12 , "AbstractArgoJPanel(String,boolean)" : 4 , "clone()" : 1 , "getIcon()" : 1 , "getTitle()" : 6 , "setIcon(Icon)" : 9 , "setOrientation(???)" : 1 , "setTitle(String)" : 3 , "spawn()" : 2}},{ "className" : "org::argouml::language::csharp::importer::csparser::statements::FinallyNode" , "selectors" : { "FinallyNode()" : 1 , "ToSource(StringBuilder)" : 1}},{ "className" : "org::argouml::language::java::generator::GeneratorJava" , "selectors" : { "generate(Object)" : 1 , "generateAbstractness(Object)" : 1 , "generateAction(Object)" : 4 , "generateActionState(Object)" : 1 , "generateArtifactImports(Object)" : 2 , "generateAscEndName(Object)" : 1 , "generateAssociation(Object)" : 1 , "generateAssociationEnd(Object)" : 2 , "generateAssociationFrom(Object,Object)" : 1 , "generateAttribute(Object,boolean)" : 2 , "generateChangability(Object)" : 1 , "generateChangeability(Object)" : 1 , "generateClassList(Collection)" : 1 , "generateClassifier(Object)" : 3 , "generateClassifierBody(Object)" : 1 , "generateClassifierEnd(Object)" : 2 , "generateClassifierRef(Object)" : 8 , "generateClassifierStart(Object)" : 1 , "generateConcurrency(Object)" : 1 , "generateConstraintEnrichedDocComment(Object,Object)" : 1 , "generateConstraintEnrichedDocComment(Object,boolean,String)" : 5 , "generateConstraintEnrichedDocComment(Object,boolean,String)::TagExtractor" : 2 , "generateCoreAssociationEnd(Object)" : 1 , "generateCoreAttribute(Object)" : 1 , "generateDefaultReturnStatement(Object)" : 2 , "generateEnumerationLiteral(Object,boolean,char)" : 1 , "generateEvent(Object)" : 2 , "generateExpression(Object)" : 7 , "generateExtensionPoint(Object)" : 1 , "generateFile(Object,String)" : 2 , "generateFiles(Collection,String,boolean)" : 1 , "generateGeneralization(Collection)" : 1 , "generateGuard(Object)" : 2 , "generateHeader(Object,String,String)" : 1 , "generateImportType(Object,String)" : 7 , "generateImports(Object,String)" : 1 , "generateMessage(Object)" : 1 , "generateMethodBody(Object)" : 1 , "generateMultiplicity(Object)" : 1 , "generateName(String)" : 17 , "generateOperation(Object,boolean)" : 2 , "generatePackage(Object)" : 1 , "generateParameter(Object)" : 2 , "generateScope(Object)" : 2 , "generateSpecification(Object)" : 1 , "generateState(Object)" : 1 , "generateStereotype(Object)" : 1 , "generateTaggedValue(Object)" : 2 , "generateTaggedValues(Object)" : 5 , "generateTransition(Object)" : 1 , "generateUninterpreted(String)" : 3 , "generateVisibility(Object)" : 5 , "getPackageName(Object)" : 4 , "isCollection(Object)" : 1}},{ "className" : "org::argouml::language::java::reveng::classfile::ParserUtils::MethodTypeSignatureLexer" , "selectors" : { "MethodTypeSignatureLexer(String)" : 1 , "parse()" : 1}},{ "className" : "org::argouml::core::propertypanels::ui::UMLAssociationAssociationRoleListModel" , "selectors" : { "UMLAssociationAssociationRoleListModel(Object)" : 1}},{ "className" : "org::argouml::core::propertypanels::ui::UMLStereotypeBaseClassListModel::ActionAddStereotypeBaseClass" , "selectors" : { "ActionAddStereotypeBaseClass()" : 1 , "getSelected()" : 1 , "initMetaClasses()" : 1}},{ "className" : "org::argouml::core::propertypanels::ui::UMLSignalComboBoxModel" , "selectors" : { "UMLSignalComboBoxModel(String,Object)" : 1}},{ "className" : "org::argouml::uml::diagram::use_case::ui::SelectionUseCase" , "selectors" : { "SelectionUseCase(???)" : 1}},{ "className" : "org::argouml::model::ModelManagementHelper" , "selectors" : { "getAllBehavioralFeatures(Object)" : 2 , "getAllContents(Object)" : 2 , "getAllImportedElements(Object)" : 2 , "getAllModelElementsOfKind(Object,Object)" : 62 , "getAllModelElementsOfKindWithModel(Object,Object)" : 17 , "getAllNamespaces(Object)" : 1 , "getAllPossibleImports(Object)" : 2 , "getAllSurroundingNamespaces(Object)" : 3 , "getElement(List<String>,Object)" : 3 , "getPathList(Object)" : 5 , "getRootElements(Object)" : 1 , "isCyclicOwnership(Object,Object)" : 1 , "isReadOnly(Object)" : 51 , "removeImportedElement(Object,Object)" : 2 , "setImportedElements(Object,Collection)" : 2 , "setSpecification(Object,boolean)" : 1}},{ "className" : "org::argouml::uml::diagram::state::ui::FigSynchState" , "selectors" : { "FigSynchState(Object,Rectangle,DiagramSettings)" : 2 , "createBigPortFig()::FigCircle" : 1 , "getFigs(???)" : 1 , "initFigs()" : 1 , "initFigs()::FigCircle" : 1 , "initFigs()::FigText" : 1 , "setBigPort(???)" : 1}},{ "className" : "org::argouml::ui::targetmanager::TargettableModelView" , "selectors" : { "getTargettableModel()" : 1}},{ "className" : "org::argouml::uml::cognitive::critics::CrCircularComposition" , "selectors" : { "CrCircularComposition()" : 1 , "computeOffenders(Object)" : 2}},{ "className" : "org::argouml::uml::diagram::ui::ModeLabelDragFactory" , "selectors" : { "ModeLabelDragFactory()" : 1}},{ "className" : "org::argouml::model::mdr::ExtensionMechanismsFactoryMDRImpl" , "selectors" : { "ExtensionMechanismsFactoryMDRImpl(MDRModelImplementation)" : 1 , "copyTaggedValues(Object,Object)::ModelElement" : 2 , "createStereotype()" : 1 , "createTagDefinition()" : 2 , "deleteStereotype(Object)" : 1 , "deleteStereotype(Object)::Stereotype" : 2 , "deleteTagDefinition(Object)" : 1 , "deleteTagDefinition(Object)::org" : 1 , "deleteTaggedValue(Object)" : 1}},{ "className" : "org::argouml::persistence::MultitypeFileFilter" , "selectors" : { "MultitypeFileFilter()" : 1 , "add(AbstractFilePersister)" : 2}},{ "className" : "org::argouml::uml::ui::LabelledLayout" , "selectors" : { "LabelledLayout()" : 1 , "calculateHeight(int,int,int,Component)" : 1 , "getChildHeight(Component)" : 2 , "getMaximumWidth(Component)" : 2 , "getMinimumHeight(Component)" : 5 , "getPreferredHeight(Component)" : 5 , "getPreferredWidth(Component)" : 3 , "getSectionCount(Container)" : 1 , "getSectionWidth(Container,int)" : 1 , "getSeparator()" : 2 , "getUsableWidth(Container)" : 1 , "isResizable(Component)" : 1 , "layoutSection(Container,int,int,ArrayList,int)" : 2 , "setHgap(int)" : 1}},{ "className" : "org::argouml::ui::explorer::rules::GoStateToDownstream" , "selectors" : { "GoStateToDownstream()" : 1}},{ "className" : "org::argouml::activity2::diagram::ModePlaceDiagramElement" , "selectors" : { "ModePlaceDiagramElement(BaseDiagram,Object,String,String)" : 1 , "mouseDragged(MouseEvent)" : 1 , "mouseDragged(MouseEvent)::Fig" : 1 , "mouseMoved(MouseEvent)" : 1 , "paint(Graphics)::Fig" : 1}},{ "className" : "org::argouml::configuration::ConfigurationKeyImpl" , "selectors" : { "ConfigurationKeyImpl(ConfigurationKey,String)" : 1 , "ConfigurationKeyImpl(String)" : 1 , "ConfigurationKeyImpl(String,String)" : 1 , "ConfigurationKeyImpl(String,String,String)" : 1 , "ConfigurationKeyImpl(String,String,String,String)" : 1 , "ConfigurationKeyImpl(String,String,String,String,String)" : 1}},{ "className" : "org::argouml::uml::diagram::static_structure::layout::ClassdiagramLayouter::NodeRow" , "selectors" : { "NodeRow(int)" : 2 , "addNode(ClassdiagramNode)" : 3 , "adjustRowNodes()" : 1 , "doSplit(int,int)" : 1 , "getWidth(int)" : 3 , "setRowNumber(int)" : 1}},{ "className" : "org::argouml::ui::explorer::rules::GoSummaryToOperation" , "selectors" : { "GoSummaryToOperation()" : 2}},{ "className" : "org::argouml::uml::diagram::state::ui::FigDeepHistoryState" , "selectors" : { "FigDeepHistoryState(Object,Rectangle,DiagramSettings)" : 3}},{ "className" : "org::argouml::core::propertypanels::ui::UMLModelElementStereotypeListModel" , "selectors" : { "getCheckItem(Action)" : 1}},{ "className" : "org::argouml::core::propertypanels::ui::UMLStateMachineTransitionListModel" , "selectors" : { "UMLStateMachineTransitionListModel(Object)" : 1}},{ "className" : "org::argouml::profile::internal::ProfileUML" , "selectors" : { "ProfileUML()" : 1 , "getDefaultTypeStrategy()::anonymous(DefaultTypeStrategy)" : 2 , "getModel()" : 2 , "loadWellFormednessRules()" : 1}},{ "className" : "org::argouml::uml::diagram::static_structure::layout::ClassdiagramRealizationEdge" , "selectors" : { "ClassdiagramRealizationEdge(???)" : 1}},{ "className" : "org::argouml::ui::explorer::ExplorerPopup::ActionCreateAssociation" , "selectors" : { "ActionCreateAssociation(Object,List)" : 1}},{ "className" : "org::argouml::core::propertypanels::ui::UMLGeneralizationPowertypeComboBoxModel" , "selectors" : { "UMLGeneralizationPowertypeComboBoxModel(String,Object)" : 1 , "getSelectedModelElement()" : 1}},{ "className" : "org::argouml::model::euml::ModelManagementFactoryEUMLImpl" , "selectors" : { "ModelManagementFactoryEUMLImpl(EUMLModelImplementation)" : 1 , "createModel(???)" : 1 , "createPackage(???)" : 1 , "createProfile(???)" : 1 , "createSubsystem()" : 1 , "getRootModel(???)" : 2}},{ "className" : "org::argouml::ocl::OCLEvaluator" , "selectors" : { "OCLEvaluator()" : 2 , "evalToString(???)" : 2 , "value2String(Object)" : 3}},{ "className" : "org::argouml::language::csharp::importer::csparser::members::AccessorNode" , "selectors" : { "AccessorNode()" : 1 , "ToSource(StringBuilder)" : 4}},{ "className" : "org::argouml::cognitive::critics::ui::ActionOpenCritics" , "selectors" : { "ActionOpenCritics()" : 2}},{ "className" : "org::argouml::notation::providers::uml::CallStateNotationUml" , "selectors" : { "parseCallState(Object,String)" : 1 , "toString(Object)" : 1}},{ "className" : "org::argouml::core::propertypanels::ui::UMLValueSpecificationValueFieldLiteralBoolean" , "selectors" : { "isToCheck()" : 2 , "updateModel()" : 2}},{ "className" : "org::argouml::cognitive::ui::ToDoPerspective" , "selectors" : { "ToDoPerspective(String)" : 6 , "addFlatChildren(Object)" : 2 , "calcFlatChildren()" : 1 , "getChild(Object,int)" : 2 , "getChildCount(Object)" : 2 , "getIndexOfChild(Object,Object)" : 13}},{ "className" : "org::argouml::uml::diagram::deployment::ui::FigComponent" , "selectors" : { "FigComponent(Object,Rectangle,DiagramSettings)" : 3 , "getEnclosingFig(???)" : 2}},{ "className" : "org::argouml::language::java::cognitive::critics::InitJavaCritics" , "selectors" : { "InitJavaCritics()" : 1 , "init()" : 1}},{ "className" : "org::argouml::transformer::TransformerAction" , "selectors" : { "TransformerAction(String)" : 1 , "TransformerAction(String,Project,Object)" : 2 , "getProject()" : 1 , "getSource()" : 35}},{ "className" : "com::nwalsh::saxon::ImageIntrinsics" , "selectors" : { "parseBox(String)" : 2}},{ "className" : "org::argouml::cognitive::ui::DesignIssuesDialog" , "selectors" : { "DesignIssuesDialog()" : 2 , "getValueText(int)" : 2 , "initMainPanel()" : 1 , "setVisible(???)" : 2}},{ "className" : "org::argouml::ui::ActionImportXMI" , "selectors" : { "ActionImportXMI()" : 2}},{ "className" : "org::argouml::ui::explorer::ExplorerTreeModel::ExplorerUpdater" , "selectors" : { "ExplorerUpdater()" : 1 , "schedule()" : 2 , "schedule(ExplorerTreeNode)" : 1}},{ "className" : "org::argouml::notation::providers::java::ModelElementNameNotationJava" , "selectors" : { "isValidJavaClassName(String)" : 1 , "parseModelElement(Object,String)" : 2}},{ "className" : "org::argouml::model::mdr::Registry" , "selectors" : { "getMatches(String,String)" : 2 , "lookupRemoveItem(Map<String,List<T>>,String,T)" : 2 , "register(T,String,String[])" : 3 , "unregister(T,String,String[])" : 4}},{ "className" : "org::argouml::uml::cognitive::critics::CrClassWithoutComponent" , "selectors" : { "CrClassWithoutComponent()" : 1 , "computeOffenders(UMLDeploymentDiagram)" : 3}},{ "className" : "org::argouml::uml::PredicateSearch" , "selectors" : { "PredicateSearch(Predicate,Predicate,Predicate,Predicate)" : 1 , "evaluate(Object)" : 1 , "matchDiagram(ArgoDiagram)" : 1 , "matchDiagram(String)" : 2}},{ "className" : "org::argouml::kernel::ProjectManager" , "selectors" : { "ProjectManager()" : 1 , "addProject(Project)" : 1 , "addPropertyChangeListener(PropertyChangeListener)" : 3 , "applyProfileConfiguration(Project,Object)" : 2 , "createClassDiagram(Project)" : 2 , "createDefaultDiagrams(Project)" : 1 , "createDefaultModel(Project)" : 1 , "createDefaultProfile(Project)" : 1 , "createTodoList(Project)" : 2 , "firePropertyChanged(String,Object,Object)" : 4 , "getCurrentProject()" : 158 , "getManager()" : 193 , "getOpenProjects()" : 3 , "isSaveActionEnabled()" : 1 , "makeEmptyProfileProject()" : 1 , "makeEmptyProfileProject(boolean)" : 1 , "makeEmptyProject()" : 3 , "makeEmptyProject(boolean)" : 2 , "notifyProjectAdded(Project,Project)" : 1 , "removeProject(Project)" : 2 , "setCurrentProject(Project)" : 5 , "setSaveAction(Action)" : 3 , "setSaveEnabled(boolean)" : 8 , "updateRoots()" : 13}},{ "className" : "org::argouml::core::propertypanels::ui::UMLStateMachineSubmachineStateListModel" , "selectors" : { "UMLStateMachineSubmachineStateListModel(Object)" : 1}},{ "className" : "org::argouml::uml::ui::ActionGenerationSettings" , "selectors" : { "ActionGenerationSettings()" : 2}},{ "className" : "org::argouml::uml::diagram::state::PredIsFinalState" , "selectors" : { "PredIsFinalState()" : 1}},{ "className" : "org::argouml::language::php::PHPDocumentor::VersionTag" , "selectors" : { "VersionTag()" : 1}},{ "className" : "org::argouml::uml::diagram::ui::FigExtensionPointsCompartment" , "selectors" : { "FigExtensionPointsCompartment(Object,Rectangle,DiagramSettings)" : 1 , "getSeparatorFig(???)" : 1 , "isVisible(???)" : 1}},{ "className" : "org::argouml::model::mdr::UndoCoreHelperDecorator" , "selectors" : { "UndoCoreHelperDecorator(CoreHelper)" : 1 , "createCommand(BooleanSetter,boolean,boolean)" : 8 , "createCommand(ObjectSetter,Object,Object)" : 12 , "createCommand(StringSetter,String,String)" : 3 , "setMultiplicity(Object,String)" : 1}},{ "className" : "org::argouml::notation::providers::uml::EnumerationLiteralNotationUml" , "selectors" : { "parseEnumerationLiteral(String,Object)" : 2 , "parseEnumerationLiteralFig(Object,Object,String)" : 1 , "toString(Object,boolean)" : 1}},{ "className" : "org::argouml::uml::cognitive::critics::ProfileCodeGeneration" , "selectors" : { "ProfileCodeGeneration(ProfileGoodPractices)" : 1 , "loadCritics()" : 1}},{ "className" : "org::argouml::uml::ui::behavior::common_behavior::ActionSetActionAsynchronous" , "selectors" : { "ActionSetActionAsynchronous()" : 1 , "getInstance()" : 1}},{ "className" : "org::argouml::language::java::reveng::classfile::OuterClassifierContext" , "selectors" : { "OuterClassifierContext(Context,Object,Object,String)" : 1 , "get(String,boolean)" : 2}},{ "className" : "java::awt::event::ItemListener" , "selectors" : { "actionPerformed(???)" : 1 , "itemStateChanged(ItemEvent)" : 5}},{ "className" : "org::argouml::configuration::ConfigurationHandler" , "selectors" : { "ConfigurationHandler(boolean)" : 2 , "addListener(ConfigurationKey,PropertyChangeListener)" : 1 , "addListener(PropertyChangeListener)" : 1 , "getBoolean(ConfigurationKey,boolean)" : 1 , "getDefaultPath()" : 3 , "getDouble(ConfigurationKey,double)" : 1 , "getInteger(ConfigurationKey,int)" : 1 , "getString(ConfigurationKey,String)" : 1 , "getValue(String,String)" : 7 , "load(File)" : 2 , "load(URL)" : 1 , "loadDefault()" : 2 , "loadFile(File)" : 1 , "loadIfNecessary()" : 5 , "loadURL(URL)" : 1 , "loadUnspecified()" : 1 , "remove(String)" : 1 , "removeListener(ConfigurationKey,PropertyChangeListener)" : 1 , "removeListener(PropertyChangeListener)" : 1 , "saveDefault(boolean)" : 2 , "saveFile(File)" : 3 , "saveURL(URL)" : 2 , "setBoolean(ConfigurationKey,boolean)" : 1 , "setDouble(ConfigurationKey,double)" : 1 , "setInteger(ConfigurationKey,int)" : 1 , "setString(ConfigurationKey,String)" : 1 , "setValue(String,String)" : 1 , "workerSetValue(ConfigurationKey,String)" : 4}},{ "className" : "org::argouml::model::AssociationChangeEvent" , "selectors" : { "AssociationChangeEvent(Object,String,Object,Object,Object,EventObject)" : 2 , "getChangedValue()" : 10}},{ "className" : "org::argouml::profile::CoreProfileReference" , "selectors" : { "CoreProfileReference(String)" : 3 , "setProfileDirectory(String)" : 1}},{ "className" : "org::argouml::uml::cognitive::critics::CrWrongDepEnds" , "selectors" : { "computeOffenders(UMLDeploymentDiagram)" : 3}},{ "className" : "org::argouml::core::propertypanels::ui::SimpleListModel" , "selectors" : { "SimpleListModel(String,List<Class<?>>,Object,GetterSetterManager)" : 2 , "build()" : 3 , "getAddCommand()" : 2 , "getAdditionalCommands()" : 1 , "getMetaType()" : 2 , "getMetaTypes()" : 1 , "getPropertyName()" : 1 , "getRemoveCommand(Object)" : 1 , "getUmlElement()" : 2 , "removeModelEventListener()" : 1}},{ "className" : "org::argouml::profile::internal::ocl::ComputeTriggers" , "selectors" : { "ComputeTriggers()" : 1 , "getTriggers()" : 1}},{ "className" : "org::argouml::uml::cognitive::critics::CrComponentInstanceWithoutClassifier" , "selectors" : { "computeOffenders(UMLDeploymentDiagram)" : 3}},{ "className" : "org::argouml::cognitive::Critic" , "selectors" : { "addControlRec(String,Object)" : 4 , "addKnowledgeType(String)" : 8 , "addSupportedDecision(Decision)" : 117 , "addSupportedGoal(Goal)" : 2 , "addTrigger(String)" : 105 , "beActive()" : 1 , "beInactive()" : 1 , "containsKnowledgeType(String)" : 1 , "critique(Object,Designer)" : 1 , "defaultMoreInfoURL()" : 1 , "getControlRec(String)" : 2 , "getCriticCategory()" : 1 , "getCriticKey()" : 5 , "getCriticName()" : 4 , "getCriticizedDesignMaterials()" : 3 , "getDescription(ListSet,Designer)" : 3 , "getDescriptionTemplate()" : 2 , "getHeadline()" : 8 , "getHeadline(ListSet,Designer)" : 1 , "getHeadline(Object,Designer)" : 2 , "getKnowledgeTypes()" : 2 , "getMoreInfoURL()" : 3 , "getMoreInfoURL(ListSet,Designer)" : 4 , "getPriority()" : 4 , "getPriority(ListSet,Designer)" : 3 , "getSupportedDecisions()" : 3 , "getWizardClass(ToDoItem)" : 1 , "initWizard(Wizard)" : 1 , "isActive()" : 30 , "isEnabled()" : 3 , "isRelevantToDecisions(Designer)" : 1 , "isRelevantToGoals(Designer)" : 1 , "isSnoozed()" : 1 , "makeWizard(ToDoItem)" : 3 , "matchReason(long)" : 1 , "postItem(ToDoItem,Object,Designer)" : 2 , "predicate(Object,Designer)" : 4 , "reasonCodeFor(String)" : 2 , "setDescription(String)" : 4 , "setEnabled(boolean)" : 6 , "setHeadline(String)" : 4 , "setKnowledgeTypes(String)" : 43 , "setKnowledgeTypes(String,String)" : 3 , "setMoreInfoURL(String)" : 2 , "setPriority(int)" : 13 , "snoozeOrder()" : 4 , "supports(Decision)" : 1 , "supports(Goal)" : 1 , "toDoItem(Object,Designer)" : 3 , "unsnooze()" : 1}},{ "className" : "org::argouml::uml::diagram::ui::UMLDiagram" , "selectors" : { "UMLDiagram()" : 9 , "UMLDiagram(Object)" : 5 , "createNaryAssociationNode(Object,Rectangle,DiagramSettings)" : 3 , "deselectAllTools()" : 2 , "doesAccept(Object)" : 12 , "drop(Object,Point)" : 10 , "getActions()" : 2 , "getCommentActions()" : 1 , "getGraphModel(???)" : 1 , "getInstructions(Object)" : 5 , "getJToolBar()" : 2 , "getLabelName()" : 3 , "getManipulateActions()" : 1 , "getModePlace(???)" : 1 , "getNewDiagramName()" : 7 , "getSelectedAction()" : 1 , "getShapeActions()" : 1 , "getShapePopupActions()" : 1 , "getUmlActions()" : 1 , "initToolBar()" : 1 , "initToolBar()::ToolBarFactory" : 1 , "initialize(Object)" : 1 , "makeCreateAssociationAction(Object,boolean,String)" : 6 , "makeCreateAssociationClassAction(String)" : 1 , "makeCreateAssociationEndAction(String)" : 1 , "makeCreateDependencyAction(Class,Object,String)" : 3 , "makeCreateEdgeAction(Object,String)" : 2 , "makeCreateGeneralizationAction()" : 1 , "makeCreateNodeAction(Object,String)" : 11 , "setSelectedAction(Action)" : 2}},{ "className" : "org::argouml::uml::diagram::static_structure::ui::FigPackage" , "selectors" : { "FigPackage(Object,Rectangle,DiagramSettings)" : 4 , "createClassDiagram(Object,String,Project)" : 1 , "doStereotype(boolean)" : 2 , "doVisibility(boolean)" : 2 , "getLineWidth()" : 3 , "getMinimumSize()" : 2 , "initialize()" : 1 , "isStereotypeVisible()" : 4 , "isVisibilityVisible()" : 1 , "setLineColor(Color)" : 1 , "setLineWidth(int)" : 1}},{ "className" : "org::argouml::core::propertypanels::ui::UMLCollaborationRepresentedOperationComboBoxModel::ActionSetRepresentedOperationCollaboration" , "selectors" : { "ActionSetRepresentedOperationCollaboration()" : 1}},{ "className" : "org::argouml::uml::cognitive::critics::ProfileGoodPractices" , "selectors" : { "ProfileGoodPractices()" : 1 , "getCrMissingClassName()" : 1 , "loadCritics()" : 1}},{ "className" : "org::argouml::uml::cognitive::critics::CrInterfaceWithoutComponent" , "selectors" : { "CrInterfaceWithoutComponent()" : 1 , "computeOffenders(UMLDeploymentDiagram)" : 3}},{ "className" : "org::argouml::language::csharp::importer::csparser::members::ConstantNode" , "selectors" : { "ConstantNode()" : 1}},{ "className" : "org::argouml::core::propertypanels::ui::UMLAssociationEndAssociationListModel" , "selectors" : { "UMLAssociationEndAssociationListModel(Object,String)" : 1}},{ "className" : "com::nwalsh::xalan::Params" , "selectors" : { "getBoolean(???)" : 3 , "getInt(???)" : 6 , "getString(???)" : 8 , "getString(ExpressionContext,String)::QName" : 1}},{ "className" : "org::argouml::ui::DetailsPane" , "selectors" : { "DetailsPane(???)" : 1 , "addTab(JPanel,boolean)" : 1 , "addTargetListener(TargetListener)" : 2 , "enableTabs(Object)" : 2 , "fireTargetAdded(TargetEvent)" : 1 , "fireTargetRemoved(TargetEvent)" : 1 , "fireTargetSet(TargetEvent)" : 1 , "getIndexOfNamedTab(String)" : 1 , "getTab(Class<? extends AbstractArgoJPanel>)" : 1 , "getTabProps()" : 2 , "hasTabs()" : 1 , "loadTabs(String)" : 1 , "myDoubleClick(int)" : 1 , "mySingleClick(int)" : 1 , "removeTargetListener(TargetListener)" : 3 , "selectPropsTab(Object)" : 2 , "setTarget(Object,boolean)" : 4 , "setToDoItem(Object)" : 1}},{ "className" : "org::argouml::notation2::UmlNotationLanguage" , "selectors" : { "UmlNotationLanguage()" : 1}},{ "className" : "org::argouml::language::sql::TableDefinition" , "selectors" : { "TableDefinition()" : 1 , "addColumnDefinition(ColumnDefinition)" : 1 , "addPrimaryKeyField(String)" : 1 , "getColumnDefinition(String)" : 3 , "getColumnDefinitions()" : 2 , "getName()" : 4 , "getPrimaryKeyFields()" : 3 , "setName(String)" : 1}},{ "className" : "org::argouml::uml::diagram::static_structure::ui::UMLClassDiagram" , "selectors" : { "UMLClassDiagram(Object)" : 1 , "getActionAggregation()" : 1 , "getActionAssociation()" : 1 , "getActionAssociationClass()" : 2 , "getActionAssociationEnd()" : 2 , "getActionClass()" : 2 , "getActionComposition()" : 1 , "getActionDataType()" : 1 , "getActionDependency()" : 1 , "getActionEnumeration()" : 1 , "getActionException()" : 1 , "getActionGeneralization()" : 2 , "getActionInstanceSpecification()" : 1 , "getActionInterface()" : 2 , "getActionModel()" : 1 , "getActionPackage()" : 2 , "getActionPermission()" : 1 , "getActionRealization()" : 2 , "getActionSignal()" : 1 , "getActionStereotype()" : 1 , "getActionSubsystem()" : 1 , "getActionUniAggregation()" : 1 , "getActionUniAssociation()" : 1 , "getActionUniComposition()" : 1 , "getActionUsage()" : 1 , "getAggregationActions()" : 2 , "getAssociationActions()" : 2 , "getCompositionActions()" : 2 , "getDataTypeActions()" : 2 , "getDependencyActions()" : 2 , "getNodePresentationFor(Layer,Object)::FigNode" : 1 , "getPackageActions()" : 2 , "setNamespace(Object)" : 1 , "setNamespace(Object)::LayerPerspectiveMutable" : 1}},{ "className" : "org::argouml::language::sql::DomainMapper" , "selectors" : { "DomainMapper()" : 1 , "clear(Class)" : 1 , "getDatatype(Class,String)" : 1 , "getDomainMap()" : 1 , "getMappingsFor(Class)" : 4 , "getMappingsFor(String)" : 2 , "load()" : 4 , "readMappings(Map<String,String>,NodeList)" : 1 , "save()" : 1 , "setDatatype(Class,String,String)" : 1 , "writeMappings(Writer,Map<String,String>)" : 1}},{ "className" : "org::argouml::uml::diagram::ui::ArgoFigText" , "selectors" : { "ArgoFigText(Object,Rectangle,DiagramSettings,boolean)" : 7 , "calcBounds(???)" : 1 , "deleteFromModel()" : 2 , "getFigFontStyle()" : 3 , "getProject()" : 2 , "getSettings()" : 7 , "isStartEditingKey(???)" : 1 , "mouseClicked(???)" : 4 , "removeFromDiagram(???)" : 1 , "renderingChanged()" : 3 , "setEditable(???)" : 1 , "setFillColor(???)" : 1 , "setFilled(???)" : 4 , "setLineWidth(???)" : 2 , "setOwner(Object)" : 1 , "setText(???)" : 5 , "updateFont()" : 2}},{ "className" : "org::argouml::cognitive::Designer" , "selectors" : { "Designer()" : 1 , "clearCritiquing()" : 4 , "critiqueASAP(Object,String)" : 1 , "disableCritiquing()" : 5 , "enableCritiquing()" : 6 , "firePropertyChange(String,Object,Object)" : 2 , "getAgency()" : 1 , "getAutoCritique()" : 3 , "getDecisionModel()" : 21 , "getDesignerName()" : 1 , "getGoalList()" : 3 , "getGoalModel()" : 2 , "getToDoList()" : 60 , "inform(ToDoItem)" : 1 , "setAutoCritique(boolean)" : 3 , "setChildGenerator(???)" : 1 , "setClarifier(Icon)" : 1 , "setCritiquingRoot(Object)" : 1 , "setDesignerName(String)" : 1 , "setSaveAction(Action)" : 1 , "setUserWorking(boolean)" : 1 , "spawnCritiquer(Object)" : 1 , "theDesigner()" : 94}},{ "className" : "org::argouml::uml::diagram::static_structure::ui::SelectionDataType" , "selectors" : { "SelectionDataType(???)" : 1}},{ "className" : "org::argouml::notation::providers::AssociationEndNameNotation" , "selectors" : { "AssociationEndNameNotation(Object)" : 2}},{ "className" : "org::argouml::ui::ArgoJMenu" , "selectors" : { "ArgoJMenu(String)" : 22 , "addCheckItem(Action)" : 7 , "addRadioItem(Action)" : 7 , "localize(JMenuItem,String)" : 1}},{ "className" : "org::argouml::core::propertypanels::model::GetterSetterManagerImpl::BaseClassGetterSetter" , "selectors" : { "BaseClassGetterSetter()" : 1 , "getOptions(Object,Collection<Class<?>>)" : 1}},{ "className" : "org::argouml::core::propertypanels::ui::UMLModelElementListModel" , "selectors" : { "UMLModelElementListModel()" : 2 , "UMLModelElementListModel(String)" : 62 , "UMLModelElementListModel(String,Object)" : 1 , "UMLModelElementListModel(String,Object,AbstractActionAddModelElement2)" : 6 , "UMLModelElementListModel(String,Object,AbstractActionAddModelElement2,AbstractActionNewModelElement,AbstractActionRemoveElement)" : 1 , "UMLModelElementListModel(String,Object,AbstractActionAddModelElement2,AbstractActionRemoveElement)" : 3 , "UMLModelElementListModel(String,Object,boolean)" : 1 , "UMLModelElementListModel(String,boolean,boolean)" : 1 , "addAll(Collection)" : 6 , "addElement(Object)" : 37 , "addOtherModelEventListeners(Object)" : 2 , "buildModelList()" : 1 , "buildPopup(JPopupMenu,int)" : 3 , "contains(Object)" : 4 , "fireIntervalAdded(Object,int,int)" : 4 , "getAddAction()" : 3 , "getChangedElement(PropertyChangeEvent)" : 16 , "getMetaType()" : 1 , "getNewAction()" : 3 , "getNewActions()" : 1 , "getRemoveAction()" : 3 , "getTarget()" : 214 , "hasPopup()" : 1 , "isShowIcon()" : 1 , "isShowPath()" : 1 , "isValidElement(Object)" : 2 , "isValidEvent(PropertyChangeEvent)" : 1 , "propertyChange(PropertyChangeEvent)" : 2 , "rebuildModelList()" : 1 , "removeModelEventListener()" : 1 , "removeOtherModelEventListeners(Object)" : 1 , "setAllElements(Collection)" : 43 , "setBuildingModel(boolean)" : 4 , "setListTarget(Object)" : 2 , "setTarget(Object)" : 59}},{ "className" : "org::argouml::uml::cognitive::critics::WizAddOperation" , "selectors" : { "setInstructions(String)" : 1}},{ "className" : "org::argouml::uml::StereotypeUtility" , "selectors" : { "addAllUniqueModelElementsFrom(Set<Object>,Set<List>,Collection<Object>)" : 4 , "dealWithStereotypes(Object,String,boolean)" : 4 , "dealWithStereotypes(Object,StringBuilder,boolean)" : 5 , "findStereotype(Object,Object,String)" : 1 , "findStereotypeContained(Object,Object,String)" : 2 , "getAllProfilePackages(Object)" : 1 , "getApplicableStereotypes(Object,Collection<Object>)" : 1 , "getApplicableStereotypesInNamespace(Object,Set<List>,Set<Object>,Object)" : 1 , "getApplyStereotypeActions(Collection)" : 2 , "getApplyStereotypeActions(Object)" : 2 , "getAvailableStereotypes(Collection)" : 1 , "getAvailableStereotypes(Object)" : 4 , "getStereotype(Object,String)" : 2 , "getTopLevelStereotypes(Collection<Object>)" : 1}},{ "className" : "org::argouml::notation::providers::ObjectNotation" , "selectors" : { "ObjectNotation(Object)" : 1}},{ "className" : "org::argouml::notation::providers::uml::NotationUtilityUml::PropertyOperation" , "selectors" : { "found(Object,String)" : 1}},{ "className" : "org::argouml::model::mdr::MDRModelImplementation" , "selectors" : { "<Initializer>()::HashMap" : 1 , "MDRModelImplementation(???)" : 1 , "addSearchPath(String)" : 1 , "cleanExtents()" : 1 , "createDefaultExtent(???)" : 1 , "createExtent(???)" : 1 , "createExtent(String,boolean)::Extent" : 1 , "deleteExtent(???)" : 4 , "getActivityGraphsFactory()" : 1 , "getCollaborationsFactory()" : 1 , "getCollaborationsHelper()" : 1 , "getCommonBehaviorFactory()" : 4 , "getCommonBehaviorHelper()" : 2 , "getCoreFactory()" : 9 , "getCoreHelper()" : 38 , "getDataTypesFactory()" : 3 , "getDataTypesFactoryInternal()" : 8 , "getDataTypesHelper()" : 1 , "getExtensionMechanismsFactory()" : 9 , "getExtensionMechanismsHelper()" : 8 , "getExtent(???)" : 1 , "getFacade()" : 42 , "getIdToObject()" : 1 , "getMetaTypes()" : 19 , "getModelEventPump()" : 2 , "getModelManagementFactory()" : 4 , "getModelManagementHelper()" : 13 , "getModelPackage(???)" : 7 , "getObjectToId()" : 3 , "getPublic2SystemIds()" : 3 , "getRepository(???)" : 10 , "getSearchPath()" : 2 , "getStateMachinesFactory()" : 2 , "getStateMachinesHelper()" : 5 , "getUmlFactory()" : 19 , "getUmlHelper()" : 34 , "getUmlPackage(???)" : 41 , "getUseCasesFactory()" : 3 , "initializeM2()" : 1 , "isReadOnly(Object)" : 2 , "removeElement(String)" : 1 , "removeElement(String)::RefObject" : 2 , "removeSearchPath(String)" : 1}},{ "className" : "org::argouml::profile::internal::ocl::ComputeDesignMaterials" , "selectors" : { "ComputeDesignMaterials()" : 1 , "getCriticizedDesignMaterials()" : 1}},{ "className" : "org::argouml::profile::Profile" , "selectors" : { "Profile()" : 2 , "addProfileDependency(Profile)" : 3 , "addProfileDependency(String)" : 4 , "getCritics()" : 10 , "getDefaultTypeStrategy()" : 2 , "getDependencies()" : 5 , "getDisplayName()" : 11 , "getFigureStrategy()" : 2 , "getFormatingStrategy()" : 3 , "getLoadedPackages()" : 1 , "getProfileIdentifier()" : 4 , "getProfilePackages()" : 15 , "setCritics(Set<Critic>)" : 6 , "toString()" : 1}},{ "className" : "org::argouml::model::mdr::DataTypesFactoryMDRImpl" , "selectors" : { "DataTypesFactoryMDRImpl(MDRModelImplementation)" : 1 , "boundToString(int)" : 3 , "createMultiplicityInternal(???)" : 8 , "stringToBound(String)" : 2}},{ "className" : "org::argouml::ui::explorer::PerspectiveConfigurator::RuleListener" , "selectors" : { "RuleListener()" : 2}},{ "className" : "org::argouml::model::mdr::CopyHelper" , "selectors" : { "CopyHelper(MDRModelImplementation)" : 1 , "copy(Object,Object)" : 1 , "fullCopy(Object,Object)" : 1 , "fullCopy(Object,Object)::Namespace" : 1}},{ "className" : "org::argouml::uml::diagram::state::ui::SelectionVertex" , "selectors" : { "SelectionVertex(???)" : 1}},{ "className" : "org::argouml::uml::diagram::activity::ui::FigPartition" , "selectors" : { "FigPartition(Object,Rectangle,DiagramSettings)" : 1 , "appendToPool(Object)" : 1 , "createBigPortFig()::FigRect" : 1 , "getBounds(???)" : 1 , "getFigPool()" : 6 , "getFigs(???)" : 1 , "getHeight(???)" : 1 , "getMinimumSize()" : 1 , "getWidth(???)" : 3 , "getX(???)" : 2 , "getY(???)" : 1 , "initFigs()" : 1 , "initFigs()::FigLine" : 5 , "setBigPort(???)" : 1 , "setFilled(boolean)" : 1 , "setNameFig(???)" : 1 , "setNextPartition(FigPartition)" : 5 , "setPreviousPartition(FigPartition)" : 4 , "translateWithContents(int)" : 1}},{ "className" : "org::argouml::core::propertypanels::ui::ScrollListFactory" , "selectors" : { "create(DefaultListModel)" : 1}},{ "className" : "org::argouml::uml::cognitive::critics::CrSubclassReference" , "selectors" : { "CrSubclassReference()" : 1 , "computeOffenders(Object)" : 3}},{ "className" : "org::argouml::uml::diagram::ui::FigNodeModelElement" , "selectors" : { "FigNodeModelElement(Object,Rectangle,DiagramSettings)" : 22 , "addElementListener(Object)" : 6 , "addElementListener(Object,String)" : 5 , "addElementListener(Object,String[])" : 1 , "addElementListeners(Set<Object[]>)" : 1 , "addEnclosedFig(???)" : 2 , "addFig(???)" : 1 , "addFigEdge(???)" : 1 , "allowRemoveFromDiagram(boolean)" : 3 , "buildModifierPopUp(int)" : 9 , "buildShowPopUp()" : 4 , "buildVisibilityPopUp()" : 3 , "calcBounds()" : 44 , "classNameAndBounds()" : 3 , "clone()" : 27 , "constructFigs()" : 1 , "createBigPortFig()::FigRect" : 1 , "createStereotypeFig()" : 1 , "deepHitPort(???)" : 1 , "deleteFromModel()::Fig" : 1 , "determineDefaultPathVisible()" : 1 , "displace(int,int)" : 2 , "enableSizeChecking(boolean)" : 16 , "forceRepaintShadow(???)" : 1 , "formatEvent(PropertyChangeEvent)" : 2 , "getBigPort(???)" : 2 , "getEnclosingFig(???)" : 2 , "getFigs(???)" : 1 , "getMinimumSize()" : 2 , "getName()" : 4 , "getNameBounds()" : 4 , "getNameFig(???)" : 1 , "getNameFigFontStyle()" : 1 , "getNotationProviderType()" : 2 , "getNotationSettings()" : 31 , "getPopUpActions(MouseEvent)" : 12 , "getPopUpActions(MouseEvent)::Fig" : 1 , "getPopupAddOffset()" : 18 , "getPracticalView()" : 2 , "getProject()" : 5 , "getSettings()" : 27 , "getStereotypeCount()" : 1 , "getStereotypeFig()" : 119 , "getStereotypeView()" : 6 , "hit(Rectangle)" : 1 , "hitClarifier(int,int)" : 2 , "initNotationProviders(Object)" : 5 , "isCheckSize()" : 3 , "isPartlyOwner(Fig,Object)::FigGroup" : 1 , "isPathVisible()" : 2 , "isReadOnly()" : 5 , "isReadyToEdit()" : 1 , "isSingleTarget()" : 1 , "modelChanged(PropertyChangeEvent)" : 15 , "mouseClicked(MouseEvent)" : 3 , "mouseClicked(MouseEvent)::FigGroup" : 1 , "notationRenderingChanged(NotationProvider,String)" : 4 , "paint(???)" : 1 , "placeString()" : 4 , "propertyChange(PropertyChangeEvent)" : 2 , "removeAllElementListeners()" : 1 , "removeElementListener(Object)" : 10 , "removeElementListeners(Set<Object[]>)" : 2 , "removeEnclosedFig(???)" : 1 , "removeFigEdge(???)" : 1 , "removeFromDiagram()" : 3 , "removeFromDiagramImpl()" : 11 , "renderingChanged()" : 24 , "setBigPort(???)" : 1 , "setDiElement(DiElement)" : 2 , "setEditable(boolean)" : 11 , "setEnclosingFig(???)" : 12 , "setFillColor(???)" : 2 , "setFilled(???)" : 3 , "setLineWidth(int)" : 4 , "setLocation(???)" : 1 , "setOwner(Object)" : 1 , "setPathVisible(boolean)" : 1 , "setShadowSizeFriend(???)" : 1 , "setStandardBounds(int,int,int,int)" : 1 , "setStereotypeStyle(StereotypeStyle)" : 1 , "setStereotypeView(int)" : 1 , "setSuppressCalcBounds(boolean)" : 16 , "setVisible(boolean)" : 1 , "showHelp(String)" : 10 , "stereotypeChanged(UmlChangeEvent)" : 1 , "superTranslate(???)" : 1 , "textEditStarted(???)" : 3 , "textEdited(???)" : 3 , "translate(???)" : 1 , "updateBounds()" : 11 , "updateElementListeners(Set<Object[]>)" : 8 , "updateFont()" : 6 , "updateLayout(UmlChangeEvent)" : 6 , "updateListeners(Object,Object)" : 6 , "updateNameText()" : 9 , "updateSmallIcons(int)" : 2 , "updateStereotypeIcon()" : 2 , "updateStereotypeIcon()::Fig" : 2 , "updateStereotypeText()" : 6}},{ "className" : "org::argouml::uml::diagram::state::PredIsStartState" , "selectors" : { "PredIsStartState()" : 1}},{ "className" : "org::argouml::uml::cognitive::critics::CrZeroLengthEdge" , "selectors" : { "CrZeroLengthEdge()" : 1}},{ "className" : "org::argouml::deployment2::diagram::UMLDeploymentDiagram" , "selectors" : { "UMLDeploymentDiagram(String,Object)" : 1 , "createGraphModel()" : 1 , "getAssociationAction(Object,boolean)" : 2 , "getAssociationActions()" : 1 , "getAssociationActions(Object)" : 3 , "getEdgeAction(Object)" : 4 , "getLabel(Object)" : 2 , "getLabelName()" : 1 , "getNodeAction(Object)" : 4 , "initialize(Object)" : 1 , "initialize(Object)::LayerPerspectiveMutable" : 1}},{ "className" : "org::argouml::ui::JasonsHugeTheme" , "selectors" : { "JasonsHugeTheme()" : 1}},{ "className" : "org::argouml::language::csharp::importer::csparser::members::IndexerNode" , "selectors" : { "IndexerNode()" : 1}},{ "className" : "org::argouml::cognitive::Designer::EmptyChildGenerator" , "selectors" : { "EmptyChildGenerator()" : 1}},{ "className" : "org::argouml::uml::diagram::ui::ModeCreateGraphEdge" , "selectors" : { "getMetaType()" : 2 , "isConnectionValid(???)" : 1 , "mouseReleased(MouseEvent)::FigPoly" : 1}},{ "className" : "org::argouml::language::java::cognitive::critics::CrReservedNameJava" , "selectors" : { "getJavaNames()" : 1}},{ "className" : "org::argouml::application::PostLoad" , "selectors" : { "PostLoad(List<Runnable>)" : 1}},{ "className" : "org::argouml::core::propertypanels::ui::UMLValueSpecificationValueFieldOpaqueExpressionDialog" , "selectors" : { "UMLValueSpecificationValueFieldOpaqueExpressionDialog(UMLValueSpecificationModel,int)" : 1 , "buildBoutonPanel()" : 1 , "buildFirstPanel()" : 1 , "buildLanguagePanel()" : 1 , "getEmptyLanguage(String[])" : 1 , "isUniqueLanguage(String[],String)" : 1 , "setVisible(???)" : 1 , "updateFields()" : 9}},{ "className" : "org::argouml::uml::diagram::static_structure::ui::FigEnumeration" , "selectors" : { "FigEnumeration(Object,Rectangle,DiagramSettings)" : 1}},{ "className" : "org::argouml::uml::ui::UMLAddDialog" , "selectors" : { "UMLAddDialog(List,List,String,ListCellRenderer,boolean,boolean)" : 1 , "UMLAddDialog(List,List,String,boolean,boolean)" : 3 , "addSelection()" : 1 , "cancel()" : 2 , "constructListModel(List)" : 2 , "getChoices()" : 1 , "getSelected()" : 3 , "getSelectedChoices()" : 1 , "ok()" : 1 , "removeSelection()" : 1 , "showDialog(Component)" : 3 , "update()" : 3}},{ "className" : "org::argouml::uml::diagram::deployment::ui::CubePortFigRect" , "selectors" : { "CubePortFigRect(int,int,int,int,int)" : 1}},{ "className" : "org::argouml::ui::SwingWorker" , "selectors" : { "SwingWorker()" : 1 , "SwingWorker(String)" : 3 , "activateGlassPane()" : 1 , "construct(ProgressMonitor)" : 1 , "deactivateGlassPane()" : 1 , "doConstruct()" : 1 , "finished()" : 3 , "getGlassPane()" : 4 , "getValue()" : 1 , "initProgressMonitorWindow()" : 1 , "interrupt()" : 1 , "setGlassPane(GlassPane)" : 1 , "setValue(Object)" : 1 , "start()" : 2}},{ "className" : "java::awt::event::KeyListener" , "selectors" : { "computeRouteImpl(???)" : 1 , "damage(???)" : 1 , "deleteFromModel(???)" : 1 , "getPopUpActions(???)" : 1 , "hit(???)" : 1 , "keyPressed(KeyEvent)" : 8 , "keyReleased(KeyEvent)" : 9 , "keyTyped(KeyEvent)" : 8 , "propertyChange(???)" : 1 , "removeFromDiagram(???)" : 2 , "setFig(???)" : 1 , "setLayer(???)" : 1 , "setLineColor(???)" : 2 , "setLineWidth(???)" : 1 , "setOwner(???)" : 1}},{ "className" : "org::argouml::uml::diagram::static_structure::ui::FigComment" , "selectors" : { "FigComment(Object,Rectangle,DiagramSettings)" : 11 , "createBigPortFig()::FigRect" : 1 , "getBody()" : 1 , "getMinimumSize()" : 3 , "initialize()" : 1 , "initialize()::FigPoly" : 2 , "retrieveBody()" : 1 , "storeBody(String)" : 2 , "updateBody()" : 1}},{ "className" : "org::argouml::uml::cognitive::critics::ClOperationCompartment" , "selectors" : { "ClOperationCompartment()" : 1 , "getTheInstance()" : 2}},{ "className" : "org::argouml::util::IItemUID" , "selectors" : { "getItemUID()" : 1 , "removeFromDiagram(???)" : 1 , "setDestFigNode(???)" : 1 , "setFig(???)" : 1 , "setItemUID(ItemUID)" : 4 , "setOwner(???)" : 2 , "setSourceFigNode(???)" : 1}},{ "className" : "org::argouml::model::euml::CommandStackImpl" , "selectors" : { "canRedo()" : 1 , "canUndo()" : 1}},{ "className" : "org::argouml::core::propertypanels::ui::NavigatePreviousAction" , "selectors" : { "NavigatePreviousAction(Object)" : 1}},{ "className" : "org::argouml::ui::explorer::ExplorerTree::ExplorerTreeWillExpandListener" , "selectors" : { "ExplorerTreeWillExpandListener()" : 1}},{ "className" : "org::argouml::notation::providers::ObjectFlowStateTypeNotation" , "selectors" : { "ObjectFlowStateTypeNotation(Object)" : 1}},{ "className" : "org::argouml::uml::cognitive::critics::CrMissingOperName" , "selectors" : { "CrMissingOperName()" : 1}},{ "className" : "org::argouml::language::cpp::generator::Inline" , "selectors" : { "getDefaultDefaultStyle()" : 1 , "getDefaultStyle()" : 1 , "getInlineKeyword4Declaration()" : 1 , "getInlineOperationModifierType(Object)" : 3 , "getStyleLabels()" : 1 , "isMethodBodyInsideClass()" : 1 , "isMethodBodyOutsideClass()" : 2 , "setDefaultStyle(int)" : 2 , "values()" : 1}},{ "className" : "org::argouml::uml::reveng::idl::JavaParseException" , "selectors" : { "JavaParseException(String)" : 2}},{ "className" : "org::argouml::uml::ui::TabTaggedValuesModel" , "selectors" : { "TabTaggedValuesModel()" : 1 , "addRow(Object[])" : 2 , "getFromCollection(Collection,int)" : 3 , "removeRow(int)" : 2 , "setTarget(Object)" : 2}},{ "className" : "org::argouml::ui::ExceptionDialog" , "selectors" : { "ExceptionDialog(Frame,String,String,String)" : 7 , "ExceptionDialog(Frame,String,Throwable)" : 3 , "ExceptionDialog(Frame,String,Throwable,boolean)" : 1 , "ExceptionDialog(Frame,Throwable)" : 1 , "copyActionPerformed(ActionEvent)" : 1 , "disposeDialog()" : 2 , "formatException(String,Throwable,boolean)" : 3 , "linkEvent(HyperlinkEvent)" : 1}},{ "className" : "org::argouml::uml::ui::UMLLinkedListCellRenderer" , "selectors" : { "UMLLinkedListCellRenderer(boolean,boolean)" : 2}},{ "className" : "org::argouml::core::propertypanels::ui::UMLSynchStateBoundDocument" , "selectors" : { "UMLSynchStateBoundDocument(String,Object)" : 1}},{ "className" : "org::argouml::ui::explorer::PerspectiveConfigurator::PerspectiveListSelectionListener" , "selectors" : { "PerspectiveListSelectionListener()" : 1}},{ "className" : "org::argouml::uml::ui::ActionBooleanTaggedValue" , "selectors" : { "ActionBooleanTaggedValue(String)" : 1}},{ "className" : "org::argouml::core::propertypanels::ui::XmlPropertyPanel" , "selectors" : { "XmlPropertyPanel()" : 1}},{ "className" : "org::argouml::uml::diagram::ui::ActionList" , "selectors" : { "ActionList(List<? extends E>,boolean)" : 2 , "add(E)" : 11 , "add(int,E)" : 9 , "isUmlMutator(Object)" : 5 , "trimMenu(JMenu)" : 4}},{ "className" : "org::argouml::util::Tools" , "selectors" : { "getComponentVersionInfo(StringBuffer,String)" : 2 , "getVersionInfo()" : 2 , "logVersionInfo()" : 1}},{ "className" : "org::argouml::ui::ShadowComboBox::ShadowFig" , "selectors" : { "ShadowFig()" : 1 , "getHeight(???)" : 1 , "getWidth(???)" : 1 , "paint(???)" : 1 , "setLocation(???)" : 1 , "setName(String)" : 1 , "setShadowSize(int)" : 1}},{ "className" : "org::argouml::ui::ActionExportXMI" , "selectors" : { "ActionExportXMI()" : 2}},{ "className" : "org::argouml::model::CommonBehaviorFactory" , "selectors" : { "buildAction(Object)" : 1 , "buildCallAction(Object,String)" : 1 , "buildReception(Object)" : 2 , "buildSignal(Object)" : 2 , "buildUninterpretedAction(Object)" : 1 , "createActionSequence()" : 2 , "createArgument()" : 4 , "createCallAction()" : 8 , "createComponentInstance()" : 1 , "createCreateAction()" : 3 , "createDestroyAction()" : 3 , "createException()" : 2 , "createNodeInstance()" : 1 , "createObject()" : 1 , "createReception()" : 1 , "createReturnAction()" : 3 , "createSendAction()" : 3 , "createSignal()" : 2 , "createTerminateAction()" : 2 , "createUninterpretedAction()" : 2}},{ "className" : "org::argouml::ui::cmd::ActionAdjustPageBreaks" , "selectors" : { "ActionAdjustPageBreaks()" : 2 , "ActionAdjustPageBreaks(String)" : 1}},{ "className" : "java::awt::Dimension" , "selectors" : { "Dimension()" : 63 , "Dimension(Dimension)" : 16 , "Dimension(int,int)" : 1915 , "equals(Object)" : 10 , "getHeight()" : 190 , "getWidth()" : 212 , "hashCode()" : 1 , "java" : 1183 , "processEvent(???)" : 1 , "setSize(Dimension)" : 5 , "setSize(double,double)" : 29 , "setSize(int,int)" : 14 , "showOptionDialog(???)" : 1}},{ "className" : "org::argouml::model::euml::VisibilityKindEUMLImpl" , "selectors" : { "VisibilityKindEUMLImpl()" : 1}},{ "className" : "org::argouml::profile::internal::ocl::uml14::OclAPIModelInterpreter" , "selectors" : { "OclAPIModelInterpreter()" : 1}},{ "className" : "org::argouml::core::propertypanels::model::GetterSetterManagerImpl::LiteralGetterSetter" , "selectors" : { "LiteralGetterSetter()" : 1 , "getOptions(Object,Collection<Class<?>>)" : 1}},{ "className" : "org::argouml::model::UmlFactory" , "selectors" : { "buildConnection(Object,Object,Object,Object,Object,Object,Object)" : 9 , "buildNode(Object)" : 2 , "buildNode(Object,Object)" : 9 , "buildNode(Object,Object,String,Defaults)" : 4 , "delete(Object)" : 62 , "deleteExtent(Object)" : 2 , "getExtentElements(String)" : 1 , "getExtentPackages(String)" : 1 , "isConnectionType(Object)" : 1 , "isConnectionValid(Object,Object,Object,boolean)" : 3 , "isContainmentValid(Object,Object)" : 11 , "isRemoved(Object)" : 13}},{ "className" : "org::argouml::core::propertypanels::ui::UMLTemplateParameterTemplateListModel" , "selectors" : { "UMLTemplateParameterTemplateListModel(Object,String)" : 1}},{ "className" : "org::argouml::ui::GUI" , "selectors" : { "GUI()" : 1 , "addProjectSettingsTab(GUISettingsTabInterface)" : 3 , "addSettingsTab(GUISettingsTabInterface)" : 9 , "getInstance()" : 8 , "getProjectSettingsTabs()" : 2 , "getSettingsTabs()" : 1}},{ "className" : "org::argouml::ui::explorer::rules::GoStateToExit" , "selectors" : { "GoStateToExit()" : 2}},{ "className" : "org::argouml::sequence2::diagram::FigMessageComparator" , "selectors" : { "FigMessageComparator()" : 2}},{ "className" : "org::argouml::ui::explorer::rules::GoStimulusToAction" , "selectors" : { "GoStimulusToAction()" : 2}},{ "className" : "org::argouml::taskmgmt::ProgressListener" , "selectors" : { "progress(ProgressEvent)" : 1}},{ "className" : "org::argouml::core::propertypanels::ui::UMLActionSequenceActionListModel" , "selectors" : { "getModelElements()" : 1}},{ "className" : "org::argouml::core::propertypanels::model::GetterSetterManagerImpl::Addable" , "selectors" : { "getAddCommand(Object)" : 1}},{ "className" : "org::argouml::uml::diagram::ui::FigPermission" , "selectors" : { "FigPermission(Object,DiagramSettings)" : 1}},{ "className" : "org::argouml::sequence2::diagram::SelectionClassifierRole" , "selectors" : { "SelectionClassifierRole(???)" : 1}},{ "className" : "org::argouml::language::csharp::importer::csparser::nodes::expressions::primitive::VoidPrimitive" , "selectors" : { "VoidPrimitive()" : 1}},{ "className" : "org::argouml::model::AbstractUseCasesHelperDecorator" , "selectors" : { "AbstractUseCasesHelperDecorator(UseCasesHelper)" : 1}},{ "className" : "org::argouml::uml::diagram::ui::ActionAddNote" , "selectors" : { "ActionAddNote()" : 4}},{ "className" : "org::argouml::uml::diagram::static_structure::layout::ClassdiagramModelElementFactory" , "selectors" : { "ClassdiagramModelElementFactory()" : 1 , "getInstance(Object)" : 1}},{ "className" : "org::argouml::model::ActivityGraphsFactory" , "selectors" : { "buildActivityGraph(Object)" : 1 , "buildClassifierInState(Object,Collection)" : 2 , "createActionState()" : 1 , "createCallState()" : 1}},{ "className" : "org::argouml::uml::diagram::DiagramFactoryInterface2" , "selectors" : { "createDiagram(Object,String,DiagramSettings)" : 1}},{ "className" : "org::argouml::uml::cognitive::critics::CrForkOutgoingTransition" , "selectors" : { "CrForkOutgoingTransition()" : 1}},{ "className" : "org::argouml::ui::explorer::rules::GoClassToAssociatedClass" , "selectors" : { "GoClassToAssociatedClass()" : 2}},{ "className" : "org::argouml::core::propertypanels::model::GetterSetterManager" , "selectors" : { "contains(String)" : 5 , "create(String,String,String)" : 1 , "get(Object,String,Class<?>)" : 3 , "getAddCommand(String,Object)" : 1 , "getAdditionalCommands(String,Object)" : 1 , "getGetterSetter(Class<?>)" : 5 , "getMetaType(String)" : 1 , "getOptions(Object,String,Collection<Class<?>>)" : 3 , "getRemoveCommand(String,Object,Object)" : 1 , "isFullBuildOnly(String)" : 1 , "set(Object,Object,String)" : 3}},{ "className" : "org::argouml::core::propertypanels::ui::UMLUseCaseExtendListModel" , "selectors" : { "UMLUseCaseExtendListModel(Object)" : 1}},{ "className" : "org::argouml::core::propertypanels::ui::RowSelector::MoveBottomAction" , "selectors" : { "MoveBottomAction()" : 1}},{ "className" : "org::argouml::language::java::reveng::classfile::ParserUtils::FieldDescriptorLexer" , "selectors" : { "FieldDescriptorLexer(String)" : 3 , "parse()" : 4}},{ "className" : "org::argouml::uml::diagram::deployment::ui::UMLDeploymentDiagram" , "selectors" : { "UMLDeploymentDiagram()" : 1 , "UMLDeploymentDiagram(Object)" : 1 , "createGraphModel()" : 2 , "getActionAggregation()" : 1 , "getActionAssociation()" : 1 , "getActionComposition()" : 1 , "getActionMAbstraction()" : 1 , "getActionMComponent()" : 1 , "getActionMComponentInstance()" : 1 , "getActionMDependency()" : 1 , "getActionMGeneralization()" : 1 , "getActionMLink()" : 1 , "getActionMNode()" : 1 , "getActionMNodeInstance()" : 1 , "getActionMObject()" : 1 , "getActionUniAggregation()" : 1 , "getActionUniAssociation()" : 1 , "getActionUniComposition()" : 1 , "getAssociationActions()" : 1 , "getLayer(???)" : 13 , "setNamespace(Object)" : 2 , "setNamespace(Object)::LayerPerspectiveMutable" : 1}},{ "className" : "org::argouml::ui::StylePanel" , "selectors" : { "StylePanel(String)" : 2 , "StylePanel(String)::LabelledLayout" : 1 , "addSeperator()" : 1 , "getTarget()" : 2 , "insertUpdate(DocumentEvent)" : 2 , "refresh()" : 2 , "refresh(PropertyChangeEvent)" : 1 , "setTarget(Object)" : 5}},{ "className" : "org::argouml::uml::diagram::ui::ActionSetAddCommentLinkMode" , "selectors" : { "ActionSetAddCommentLinkMode()" : 1}},{ "className" : "org::argouml::model::mdr::StateMachinesHelperMDRImpl" , "selectors" : { "StateMachinesHelperMDRImpl(MDRModelImplementation)" : 1 , "addDeferrableEvent(Object,Object)::State" : 1 , "addSubvertex(Object,Object)::StateVertex" : 1 , "addTransition(Object,Object)" : 2 , "addTransition(Object,Object)::State" : 1 , "findOperationByName(Object,String)::BehavioralFeature" : 1 , "getAllPossibleSubvertices(Object)::CompositeState" : 1 , "getDestination(Object)::Transition" : 1 , "getRegions(Object)::NotImplementedException" : 1 , "getSource(Object)::Transition" : 1 , "getStateMachine(Object)" : 2 , "getTop(Object)::StateMachine" : 1 , "getTransitions(Object,boolean)::State" : 1 , "getTransitions(Object,boolean)::StateMachine" : 2 , "removeDeferrableEvent(Object,Object)::State" : 1 , "removeSubvertex(Object,Object)::CompositeState" : 1 , "removeTransition(Object,Object)" : 1 , "removeTransition(Object,Object)::State" : 1 , "setBound(Object,int)::SynchState" : 1 , "setChangeExpression(Object,Object)::ChangeEvent" : 2 , "setConcurrent(Object,boolean)::CompositeState" : 1 , "setContainer(Object,Object)::StateVertex" : 1 , "setContext(Object,Object)::StateMachine" : 1 , "setDoActivity(Object,Object)::State" : 1 , "setEffect(Object,Object)::Transition" : 1 , "setEntry(Object,Object)::State" : 1 , "setEventAsTrigger(Object,Object)::Transition" : 1 , "setExit(Object,Object)::State" : 1 , "setExpression(Object,Object)::Guard" : 2 , "setGuard(Object,Object)::Transition" : 1 , "setReferenceState(Object,String)::StubState" : 1 , "setSource(Object,Object)::Transition" : 1 , "setStateMachine(Object,Object)::State" : 1 , "setStateMachine(Object,Object)::Transition" : 1 , "setSubvertices(Object,Collection)::CompositeState" : 2 , "setTrigger(Object,Object)::Transition" : 1 , "setWhen(Object,Object)::TimeEvent" : 2}},{ "className" : "org::argouml::activity2::diagram::FigBaseEdge" , "selectors" : { "FigBaseEdge(Object,DiagramSettings)" : 1}},{ "className" : "org::argouml::uml::diagram::ui::AddExistingNodeCommand" , "selectors" : { "execute()::ModePlace" : 1}},{ "className" : "org::argouml::model::euml::StateMachinesFactoryEUMLImpl" , "selectors" : { "StateMachinesFactoryEUMLImpl(EUMLModelImplementation)" : 1 , "buildTransition(Object,Object)" : 1 , "buildTransition(Object,Object)::Vertex" : 1 , "buildTransition(Object,Object,Object)" : 1 , "createCompositeState()" : 1 , "createPseudostate()" : 1 , "createStateMachine()" : 1 , "createStubState()" : 1 , "createSubmachineState()" : 1 , "createSynchState()" : 1 , "createTransition(???)" : 1}},{ "className" : "org::argouml::uml::diagram::state::ui::FigVertex" , "selectors" : { "createBigPortFig()::FigRRect" : 1 , "getBottomMargin()" : 2 , "getLeftMargin()" : 7 , "getMinimumSize()" : 1 , "getRightMargin()" : 3 , "getTopMargin()" : 5 , "getTrapRects()::Fig" : 1 , "initialize()" : 1 , "renderingChanged()" : 1 , "setEnclosingFig(Fig)::Fig" : 1}},{ "className" : "org::argouml::deployment2::diagram::FigNode" , "selectors" : { "FigNode(Object,Rectangle,DiagramSettings)" : 1 , "addConnector(???)" : 1 , "getLeftMargin()" : 4 , "getRightMargin()" : 2 , "getTopMargin()" : 1 , "initialize()" : 1 , "removeConnector(???)" : 1}},{ "className" : "org::argouml::cognitive::ui::ActionSnooze" , "selectors" : { "ActionSnooze()" : 1}},{ "className" : "org::argouml::language::csharp::importer::csparser::nodes::expressions::UncheckedExpression" , "selectors" : { "UncheckedExpression(ExpressionNode)" : 1}},{ "className" : "org::argouml::uml::reveng::SettingsTypes::PathListSelection" , "selectors" : { "getDefaultPathList()" : 1 , "getPathList()" : 1 , "setPathList(List<String>)" : 1}},{ "className" : "org::argouml::cognitive::ui::AbstractGoList2" , "selectors" : { "getPredicate()" : 2 , "setListPredicate(Predicate)" : 1}},{ "className" : "org::argouml::state2::diagram::FigVertex" , "selectors" : { "FigVertex(Object,Rectangle,DiagramSettings)" : 1 , "addConnector(???)" : 2 , "createBigPortFig()::FigRRect" : 1 , "getBottomMargin()" : 2 , "getLeftMargin()" : 7 , "getMinimumSize()" : 2 , "getRightMargin()" : 3 , "getTopMargin()" : 5 , "initialize()" : 1 , "removeConnector(???)" : 2 , "renderingChanged()" : 1 , "setEnclosingFig(Fig)::Fig" : 1}},{ "className" : "org::argouml::uml::ui::behavior::activity_graphs::ActionAddEventAsTrigger" , "selectors" : { "ActionAddEventAsTrigger()" : 1}},{ "className" : "org::argouml::activity2::diagram::FigNamedPentagon::Poly" , "selectors" : { "Poly()" : 1 , "setPolygon(???)" : 1}},{ "className" : "org::argouml::model::DataTypesHelper" , "selectors" : { "createValueSpecification(Object,String)" : 2 , "equalsCHOICEKind(Object)" : 2 , "equalsDeepHistoryKind(Object)" : 2 , "equalsFORKKind(Object)" : 2 , "equalsINITIALKind(Object)" : 3 , "equalsJOINKind(Object)" : 2 , "equalsJUNCTIONKind(Object)" : 2 , "equalsShallowHistoryKind(Object)" : 2 , "getBody(Object)" : 13 , "getLanguage(Object)" : 14 , "getValueSpecificationValues(Object)" : 2 , "getValueSpecifications()" : 2 , "modifyValueSpecification(Object,Object[])" : 2 , "multiplicityToString(Object)" : 4 , "setBody(Object,String)" : 6 , "setLanguage(Object,String)" : 4}},{ "className" : "org::argouml::application::events::ArgoNotationEventListener" , "selectors" : { "notationAdded(ArgoNotationEvent)" : 1 , "notationChanged(ArgoNotationEvent)" : 1 , "notationProviderAdded(ArgoNotationEvent)" : 1 , "notationProviderRemoved(ArgoNotationEvent)" : 1 , "notationRemoved(ArgoNotationEvent)" : 1}},{ "className" : "org::argouml::uml::diagram::collaboration::ui::FigClassifierRole" , "selectors" : { "FigClassifierRole(Object,Rectangle,DiagramSettings)" : 3 , "createBigPortFig()::FigRect" : 1 , "getFigs(???)" : 1 , "getMinimumSize()" : 2 , "initClassifierRoleFigs()" : 1 , "initClassifierRoleFigs()::FigRect" : 1 , "setBigPort(???)" : 1 , "setNameFig(???)" : 1}},{ "className" : "org::argouml::ui::SplashScreen" , "selectors" : { "SplashScreen()" : 1 , "SplashScreen(String)" : 1 , "getStatusBar()" : 8 , "isPaintCalled()" : 1 , "showStatus(String)" : 3 , "updateProgress(int)" : 3}},{ "className" : "org::argouml::uml::diagram::ui::FigCompartment" , "selectors" : { "FigCompartment(Object,Rectangle,DiagramSettings)" : 4 , "constructFigs(int,int,int,int)" : 1 , "createFigText(Object,Rectangle,DiagramSettings)" : 1 , "createModelElement()" : 2 , "findCompartmentFig(List<CompartmentFigText>,Object)" : 1 , "getBounds(???)" : 4 , "getCompartmentType()" : 4 , "getElementFigs()" : 1 , "getFigs(???)" : 3 , "getMinimumSize()" : 4 , "getSeparatorFig(???)" : 1 , "getUmlCollection()" : 1 , "hitFig(???)" : 1 , "isFilled()" : 1 , "isVisible(???)" : 17 , "populate()" : 9 , "setBounds(???)" : 2 , "setEditOnRedraw(boolean)" : 1 , "setExternalSeparatorFigBounds(Rectangle)" : 2 , "setVisible(boolean)" : 2}},{ "className" : "org::argouml::model::mdr::ModelEventPumpMDRImpl" , "selectors" : { "ModelEventPumpMDRImpl(???)" : 2 , "change(MDRChangeEvent)::InstanceEvent" : 1 , "change(MDRChangeEvent)::RefBaseObject" : 1 , "decrementEvents()" : 2 , "fire(UmlChangeEvent)" : 1 , "fire(UmlChangeEvent)::RefBaseObject" : 3 , "flushModelEvents()" : 1 , "formatArray(String[])" : 4 , "formatElement(Object)" : 4 , "formatElement(Object)::RefBaseObject" : 1 , "getClassName(Object)" : 3 , "getDebugDescription(String)" : 1 , "mapPropertyName(Map<String,Collection<String>>,String,String)" : 2 , "mapPropertyName(String)" : 4 , "newDebugNode(String)" : 3 , "plannedChange(MDRChangeEvent)::AttributeEvent" : 1 , "plannedChange(MDRChangeEvent)::InstanceEvent" : 2 , "registerClassEvent(PropertyChangeListener,Object,String[])" : 1 , "registerModelEvent(PropertyChangeListener,Object,String[])" : 2 , "registerModelEvent(PropertyChangeListener,Object,String[])::RefBaseObject" : 2 , "startPumpingEvents()" : 1 , "stopPumpingEvents()" : 1 , "unregisterClassEvent(PropertyChangeListener,Object,String[])" : 1 , "unregisterModelEvent(PropertyChangeListener,Object,String[])" : 2 , "unregisterModelEvent(PropertyChangeListener,Object,String[])::RefBaseObject" : 1 , "verifyAttributeNames(String,String[])" : 3}},{ "className" : "org::argouml::uml::ui::UMLEditableComboBox::UMLComboBoxEditor::UMLImagePanel" , "selectors" : { "UMLImagePanel(JTextField,boolean)" : 1 , "addActionListener(ActionListener)" : 1 , "getText()" : 1 , "removeActionListener(ActionListener)" : 1 , "setIcon(Icon)" : 1}},{ "className" : "org::argouml::uml::ui::UMLSearchableComboBox" , "selectors" : { "UMLSearchableComboBox(UMLComboBoxModel2,Action,boolean)" : 1 , "search(Object)" : 1}},{ "className" : "org::argouml::uml::ui::UMLCheckBox2" , "selectors" : { "UMLCheckBox2(String,Action,String)" : 13 , "buildModel()" : 2 , "getTarget()" : 36 , "setTarget(Object)" : 3 , "setTarget(Object)::Fig" : 1}},{ "className" : "org::argouml::uml::diagram::ui::ModeCreateAssociationClass" , "selectors" : { "buildInActiveLayer(???)" : 1 , "buildParts(Editor,FigAssociationClass,Layer)::LayerPerspective" : 1}},{ "className" : "org::argouml::core::propertypanels::ui::UMLTransitionStatemachineListModel" , "selectors" : { "UMLTransitionStatemachineListModel(Object,String)" : 1}},{ "className" : "org::argouml::profile::internal::ocl::OclExpressionEvaluator" , "selectors" : { "evaluate(Map<String,Object>,ModelInterpreter,String)" : 2}},{ "className" : "org::argouml::uml::cognitive::critics::CrDisambigClassName" , "selectors" : { "CrDisambigClassName()" : 1}},{ "className" : "org::argouml::language::cpp::reveng::OperationModeler" , "selectors" : { "OperationModeler(Object,Object,Object,boolean,ProfileCpp)" : 2 , "buildOperation(Object,Object)" : 1 , "declarationSpecifiers(List)" : 1 , "equalParameter(Object,Object)" : 1 , "equalParameters(Object,Object)" : 2 , "equalTaggedValues(Collection,Collection)" : 2 , "finish()" : 2 , "getOperation()" : 8 , "hasNonLeafBaseOperation(Object,Object)" : 2 , "isIgnorable()" : 7 , "removeOperationIfDuplicate(Object)" : 1 , "setDefinedInClass()" : 2 , "setReturnType()" : 1 , "setType(Object)" : 1}},{ "className" : "org::argouml::cognitive::Poster" , "selectors" : { "canFixIt(ToDoItem)" : 1 , "containsKnowledgeType(String)" : 1 , "expand(String,ListSet)" : 2 , "fixIt(ToDoItem,Object)" : 1 , "getClarifier()" : 1 , "snooze()" : 1 , "stillValid(ToDoItem,Designer)" : 1 , "supports(Decision)" : 4 , "supports(Goal)" : 4}},{ "className" : "org::argouml::application::StartCritics" , "selectors" : { "StartCritics()" : 1}},{ "className" : "org::argouml::model::euml::PseudostateKindEUMLImpl" , "selectors" : { "PseudostateKindEUMLImpl()" : 1}},{ "className" : "org::argouml::notation::NotationNameImpl" , "selectors" : { "NotationNameImpl(String,String,Icon)" : 4 , "findNotation(String)" : 6 , "fireEvent(int,NotationName)" : 1 , "getAvailableNotations()" : 1 , "getConfigurationValue()" : 1 , "getNotationNameString(String,String)" : 4 , "getTitle()" : 1 , "makeNotation(String,String,Icon)" : 1 , "removeNotation(NotationName)" : 1}},{ "className" : "org::argouml::uml::diagram::ui::FigKeyword" , "selectors" : { "FigKeyword(String,Rectangle,DiagramSettings)" : 1 , "initialize()" : 1 , "setText(String)" : 2}},{ "className" : "org::argouml::profile::internal::ocl::ModelInterpreter" , "selectors" : { "getBuiltInSymbol(String)" : 2 , "invokeFeature(Map<String,Object>,Object,String,String,Object[])" : 3}},{ "className" : "org::argouml::language::java::reveng::classfile::ClassifierContext" , "selectors" : { "ClassifierContext(Context,Object)" : 1 , "get(String,boolean)" : 2}},{ "className" : "org::argouml::ui::explorer::ExplorerTree" , "selectors" : { "ExplorerTree()" : 1 , "addTargetsInternal(Object[])" : 2 , "addTargetsInternal(Object[])::Fig" : 1 , "refreshSelection()" : 1 , "selectChildren(ExplorerTreeModel,ExplorerTreeNode,Set)" : 2 , "selectVisible(Object)" : 1 , "setSelection(Object[])" : 3}},{ "className" : "org::argouml::core::propertypanels::ui::UMLEditableComboBox::UMLComboBoxEditor::UMLImagePanel" , "selectors" : { "UMLImagePanel(JTextField,boolean)" : 1 , "addActionListener(ActionListener)" : 1 , "getText()" : 1 , "removeActionListener(ActionListener)" : 1 , "setIcon(Icon)" : 1}},{ "className" : "org::argouml::language::cpp::generator::GeneratorCpp" , "selectors" : { "GeneratorCpp()" : 1 , "addDependency(Object,boolean)" : 8 , "addUserHeaders(Object,boolean)" : 1 , "checkGenerateOperationBody(Object)" : 1 , "checkInclude4UsageIndirection(boolean,String)" : 1 , "checkIncludeNeeded4Element(Object)" : 6 , "cleanupGenerator()" : 4 , "createDirectoriesPathname(Object,String)" : 2 , "endFileGeneration()" : 3 , "findTagValues(Object,String)" : 5 , "generate(Collection,boolean)" : 1 , "generateAbstractness(Object)" : 1 , "generateAllParts(StringBuffer[])" : 4 , "generateAssociationEnd(Object)" : 1 , "generateAssociationFrom(Object,Object,StringBuffer[])" : 1 , "generateAttribute(Object,boolean)" : 2 , "generateAttributeParameterModifier(Object)" : 7 , "generateAttributeParameterModifier(Object,String)" : 2 , "generateClassifier(Object)" : 2 , "generateClassifierBody(Object)" : 1 , "generateClassifierBodyAssociations(Object,StringBuffer)" : 1 , "generateClassifierBodyAttributes(Object,StringBuffer)" : 1 , "generateClassifierBodyOperations(Object,StringBuffer)" : 1 , "generateClassifierBodyTaggedAccess4Attributes(Object,StringBuffer,StringBuffer,StringBuffer)" : 1 , "generateClassifierBodyTypedefs(Object,StringBuffer)" : 1 , "generateClassifierDestructor(Object,StringBuffer)" : 1 , "generateClassifierEnd(Object)" : 1 , "generateClassifierInnerClasses(Object,StringBuffer)" : 1 , "generateClassifierNameAndAncestors(Object)" : 2 , "generateClassifierRef(Object)" : 8 , "generateClassifierStart(Object)" : 1 , "generateConstAttributeParameterModifier(Object)" : 1 , "generateConstraintEnrichedDocComment(Object,Object)" : 2 , "generateCpp(Object)" : 1 , "generateDefaultReturnStatement(Object)" : 2 , "generateDocComment4Tag(String)" : 1 , "generateFileAsString(Object,String)" : 4 , "generateFilesForElem(Object,String,boolean)" : 2 , "generateFooter()" : 1 , "generateGeneralization(Collection)" : 1 , "generateGlobalTypedefs(Object)" : 1 , "generateH(Object)" : 1 , "generateHeader(Object)" : 1 , "generateHeaderPackageEnd()" : 2 , "generateHeaderPackageEndSingle(Object)" : 2 , "generateHeaderPackageStart(Object)" : 2 , "generateHeaderPackageStartSingle(Object)" : 2 , "generateHeaderTop(String)" : 1 , "generateIncludes(StringBuffer)" : 1 , "generateInlinedMethodsOutsideClass(Object)" : 1 , "generateMethodBody(Object)" : 2 , "generateMultiplicity(Object,String,Object,String)" : 2 , "generateNameWithPkgSelection(Object)" : 6 , "generateNameWithPkgSelection(Object,Object)" : 1 , "generateOperation(Object,boolean)" : 3 , "generateOperationChangeability(Object)" : 1 , "generateOperationNameAndTestForConstructor(Object,StringBuffer)" : 1 , "generateOperationPrefix(Object)" : 1 , "generateOperationSuffix(Object)" : 1 , "generatePackageAbsoluteName(Object)" : 1 , "generateParameter(Object)" : 1 , "generateParameterChangeability(Object)" : 1 , "generatePath(Object)" : 1 , "generatePredeclare(StringBuffer)" : 1 , "generateRelativePackage(Object,Object,String)" : 8 , "generateScope(Object)" : 2 , "generateSectionBottom(Object,String)" : 1 , "generateSectionTop(Object,String)" : 1 , "generateSingleAttributeGet(Object,StringBuffer)" : 3 , "generateSingleAttributeSet(Object,StringBuffer)" : 3 , "generateSpecification(Object)" : 1 , "generateStructuralFeatureChangeability(Object)" : 1 , "generateTaggedValue(Object,int)" : 1 , "generateTaggedValues(Object,int)" : 11 , "generateUninterpreted(String)" : 1 , "generateVisibility(Object)" : 1 , "getAttributeModifierType(Object)" : 2 , "getConstAttributeModifierType(Object)" : 1 , "getDate()" : 1 , "getDefaultInlineStyle()" : 1 , "getFileExtension()" : 3 , "getIndent()" : 1 , "getInstance()" : 6 , "getNamespaceWithoutModel(Object)" : 9 , "getUseSect()" : 1 , "getVisibilityPart(Object)" : 4 , "getYear()" : 1 , "indentString(String,int)" : 1 , "isAInnerClass(Object)" : 2 , "isDestructor(Object)" : 2 , "isDocCommentTag(String)" : 2 , "isHeaderGuardGUID()" : 1 , "isHeaderGuardUpperCase()" : 1 , "isLfBeforeCurly()" : 1 , "isVerboseDocs()" : 1 , "loadConfig()" : 1 , "replaceToken(StringBuffer,String,String)" : 5 , "setDefaultInlineStyle(int)" : 1 , "setHeaderGuardGUID(boolean)" : 1 , "setHeaderGuardUpperCase(boolean)" : 1 , "setIndent(int)" : 1 , "setLfBeforeCurly(boolean)" : 1 , "setUseSect(int)" : 1 , "setVerboseDocs(boolean)" : 1 , "setupGenerator(Object)" : 1 , "startFileGeneration()" : 3 , "writeTemplate(Object,String,BufferedWriter)" : 1}},{ "className" : "org::argouml::util::MyTokenizer" , "selectors" : { "MyTokenizer(String,String)" : 7 , "MyTokenizer(String,String,Collection)" : 4 , "MyTokenizer(String,String,CustomSeparator)" : 2 , "getTokenIndex()" : 56 , "hasMoreTokens()" : 17 , "nextToken()" : 25 , "parseDelimString(String)" : 3 , "putToken(String)" : 4}},{ "className" : "org::argouml::ui::explorer::rules::GoStateMachineToTransition" , "selectors" : { "GoStateMachineToTransition()" : 2}},{ "className" : "org::argouml::language::csharp::importer::csparser::nodes::expressions::primitive::BooleanPrimitive" , "selectors" : { "BooleanPrimitive(boolean)" : 2}},{ "className" : "org::argouml::uml::diagram::GraphChangeAdapter" , "selectors" : { "GraphChangeAdapter()" : 1 , "createDiagram(Class,Object)" : 1 , "createElement(???)" : 2 , "edgeAdded(GraphEvent)::Fig" : 2 , "edgeRemoved(GraphEvent)::Fig" : 2 , "getInstance()" : 5 , "graphChanged(GraphEvent)::Fig" : 2 , "nodeAdded(GraphEvent)::Fig" : 2 , "nodeRemoved(GraphEvent)::Fig" : 2 , "removeDiagram(DiDiagram)" : 1}},{ "className" : "org::argouml::uml::TMResults" , "selectors" : { "TMResults()" : 1 , "TMResults(boolean)" : 1 , "setTarget(List,List)" : 3}},{ "className" : "org::argouml::language::java::reveng::Modeller" , "selectors" : { "Modeller(Object,Profile,boolean,boolean,String)" : 4 , "addAnonymousClass(String,boolean)" : 1 , "addAttribute(short,String,String,String,String,boolean)" : 2 , "addClass(String,short,List<String>,String,List<String>,String,boolean)" : 3 , "addClassifier(Object,String,short,String,List<String>)" : 3 , "addDocumentationTag(Object,String)" : 5 , "addImport(String,boolean)" : 1 , "addInterface(String,short,List<String>,List<String>,String,boolean)" : 1 , "addInterfaces(Object,List<String>,boolean)" : 2 , "addJavadocTagContents(Object,String,String[])" : 2 , "addOperation(short,List<String>,String,String,List<ParameterDeclaration>,String,boolean)" : 1 , "addStereotypes(Object)" : 1 , "addTypeParameters(Object,List<String>)" : 2 , "buildAttribute(Object,Object,String)" : 1 , "buildDirectedAssociation(String,Object,Object)" : 2 , "buildImport(Object,Object)" : 2 , "buildInParameter(Object,Object,String)" : 1 , "buildParameter(Object,Object,String)" : 2 , "buildReturnParameter(Object,Object)" : 1 , "buildTaggedValue(Object,String,String[])" : 5 , "cleanModelElement(Object)" : 1 , "clearLocalVariableDeclarations()" : 1 , "clearMethodCalls()" : 1 , "getAbstraction(Object,Object)" : 1 , "getAssociationEnd(String,Object)" : 1 , "getAttribute(String)" : 1 , "getClass(Object,String)" : 1 , "getClassifierName(String)" : 15 , "getContext(String)" : 7 , "getGeneralization(Object,Object,Object)" : 4 , "getLevel()" : 6 , "getLocalVariableDeclarations()" : 2 , "getMethod(String)" : 1 , "getMethodCalls()" : 1 , "getNewElements()" : 2 , "getOperation(String)" : 1 , "getPackage(String,boolean)" : 13 , "getPackageName(String)" : 13 , "getRelativePackageName(String)" : 3 , "getStereotype(Object,String,String)" : 1 , "getTaggedValue(Object,String)" : 1 , "getUML1Stereotype(String)" : 5 , "isAEnumeration(Object)" : 1 , "logError(String,String)" : 13 , "makeAbstractionName(Object,Object)" : 1 , "makeAssociationName(Object,Object)" : 1 , "makeDependencyName(Object,Object)" : 1 , "makeFromToName(Object,Object)" : 3 , "makeFromToName(String,String)" : 1 , "removeTrailingSlash(String)" : 2 , "searchPackageInModel(String,boolean)" : 2 , "setAttribute(String,Object)" : 1 , "setOwnerScope(Object,short)" : 2 , "setVisibility(Object,short)" : 5 , "stripVarargAndGenerics(String)" : 3 , "warnClassifierNotFound(String,String)" : 7}},{ "className" : "org::argouml::application::events::ArgoEventPump" , "selectors" : { "ArgoEventPump()" : 1 , "addListener(int,ArgoEventListener)" : 7 , "doAddListener(int,ArgoEventListener)" : 2 , "doFireEvent(ArgoEvent)" : 1 , "doRemoveListener(int,ArgoEventListener)" : 2 , "fireDiagramAppearanceEventInternal(ArgoDiagramAppearanceEvent,ArgoDiagramAppearanceEventListener)" : 2 , "fireEvent(ArgoEvent)" : 39 , "fireNotationEventInternal(ArgoNotationEvent,ArgoNotationEventListener)" : 2 , "handleFireDiagramAppearanceEvent(ArgoDiagramAppearanceEvent,ArgoDiagramAppearanceEventListener)" : 1 , "handleFireEvent(ArgoEvent,ArgoEventListener)" : 2 , "handleFireGeneratorEvent(ArgoGeneratorEvent,ArgoGeneratorEventListener)" : 1 , "handleFireHelpEvent(ArgoHelpEvent,ArgoHelpEventListener)" : 2 , "handleFireNotationEvent(ArgoNotationEvent,ArgoNotationEventListener)" : 2 , "handleFireProfileEvent(ArgoProfileEvent,ArgoProfileEventListener)" : 1 , "handleFireStatusEvent(ArgoStatusEvent,ArgoStatusEventListener)" : 2 , "removeListener(ArgoEventListener)" : 1 , "removeListener(int,ArgoEventListener)" : 1}},{ "className" : "org::argouml::ocl::OCLExpander" , "selectors" : { "OCLExpander(Map)" : 2 , "expand(???)" : 2}},{ "className" : "org::argouml::profile::init::ProfileLoader::JarFileFilter" , "selectors" : { "JarFileFilter()" : 1}},{ "className" : "org::argouml::uml::ui::behavior::state_machines::ActionNewCompositeState" , "selectors" : { "ActionNewCompositeState()" : 1}},{ "className" : "org::argouml::ui::cmd::ActionAdjustSnap" , "selectors" : { "ActionAdjustSnap(int,String)" : 4 , "actionPerformed(ActionEvent)::GuideGrid" : 1 , "createAdjustSnapActions()" : 3 , "init()" : 1 , "setGroup(ButtonGroup)" : 1}},{ "className" : "org::argouml::activity2::diagram::FigNamedPentagon" , "selectors" : { "FigNamedPentagon(Object,Rectangle,Color,Color,Object,DiagramSettings)" : 1 , "createBorder(Rectangle,Color,Color)" : 1}},{ "className" : "org::argouml::language::csharp::importer::csparser::members::DestructorNode" , "selectors" : { "DestructorNode()" : 1}},{ "className" : "org::argouml::uml::cognitive::critics::CrInvalidBranch" , "selectors" : { "CrInvalidBranch()" : 1}},{ "className" : "org::argouml::core::propertypanels::ui::RowSelector::RemoveAction" , "selectors" : { "RemoveAction(JList,SimpleListModel)" : 1}},{ "className" : "org::argouml::cognitive::checklist::CheckItem" , "selectors" : { "CheckItem(String,String)" : 3 , "CheckItem(String,String,String,Predicate)" : 1 , "expand(String,Object)" : 1 , "getDescription()" : 4 , "getDescription(Object)" : 1 , "setCategory(String)" : 1 , "setDescription(String)" : 1 , "setMoreInfoURL(String)" : 1 , "toString()" : 1}},{ "className" : "org::argouml::ui::PerspectiveSupport" , "selectors" : { "PerspectiveSupport(String)" : 2 , "addSubTreeModel(TreeModel)" : 6 , "getGoRuleList()" : 4 , "getName()" : 2 , "registerRule(TreeModel)" : 6}},{ "className" : "org::argouml::uml::diagram::deployment::ui::AbstractFigNode" , "selectors" : { "AbstractFigNode(Object,Rectangle,DiagramSettings)" : 2 , "clone()" : 1 , "getFigs(???)" : 1 , "initFigs()" : 1 , "initFigs()::FigCube" : 1 , "setBigPort(???)" : 1 , "setEnclosingFig(???)" : 3 , "setLineColor(Color)" : 1 , "setNameFig(???)" : 1 , "updateListeners(Object,Object)" : 1}},{ "className" : "org::argouml::uml::cognitive::critics::CrInvalidJoin" , "selectors" : { "CrInvalidJoin()" : 1}},{ "className" : "org::argouml::uml::cognitive::critics::CrDisambigStateName" , "selectors" : { "CrDisambigStateName()" : 1}},{ "className" : "org::argouml::uml::cognitive::critics::CrNodesOverlap" , "selectors" : { "CrNodesOverlap()" : 1}},{ "className" : "org::argouml::uml::diagram::static_structure::ClassDiagramGraphModel" , "selectors" : { "ClassDiagramGraphModel()" : 3 , "addEdge(Object)" : 5 , "addNode(Object)" : 2 , "addNodeRelatedEdges(Object)" : 1 , "canAddEdge(Object)" : 6 , "canAddNode(Object)" : 3 , "rerouteAssociation(Object,Object,Object,boolean)" : 1 , "rerouteDependency(Object,Object,Object,boolean)" : 1 , "rerouteGeneralization(Object,Object,Object,boolean)" : 1 , "rerouteLink(Object,Object,Object,boolean)" : 1}},{ "className" : "org::argouml::profile::internal::FormatingStrategyUML" , "selectors" : { "FormatingStrategyUML()" : 1 , "buildPath(StringBuffer,Object,String)" : 2 , "defaultAssocEndName(Object,Object)" : 2 , "defaultAssocName(Object,Object)" : 1 , "defaultGeneralizationName(Object,Object)" : 1 , "defaultName(Object,Object)" : 2 , "ensureFirstCharLowerCase(String)" : 1 , "formatElement(Object,Object)" : 4 , "getElementSeparator()" : 1 , "getEmptyCollection()" : 1 , "getPathSeparator()" : 1}},{ "className" : "org::argouml::core::propertypanels::model::GetterSetterManagerImpl::ReceptionGetterSetter::RemoveCommand" , "selectors" : { "RemoveCommand(Object,Object)" : 1}},{ "className" : "org::argouml::model::euml::XmiReaderEUMLImpl" , "selectors" : { "XmiReaderEUMLImpl(EUMLModelImplementation)" : 1 , "isUML14(Resource)::AnyType" : 1}},{ "className" : "org::argouml::uml::diagram::ui::ActionAddConcurrentRegion" , "selectors" : { "ActionAddConcurrentRegion()" : 2}},{ "className" : "org::argouml::language::csharp::importer::csparser::statements::UsingStatement" , "selectors" : { "UsingStatement()" : 1}},{ "className" : "org::argouml::moduleloader::SettingsTabModules::ModuleTableModel" , "selectors" : { "ModuleTableModel()" : 2}},{ "className" : "org::argouml::model::XmiReader" , "selectors" : { "addSearchPath(String)" : 3 , "getSearchPath()" : 1 , "getTagName()" : 1 , "getXMIUUIDToObjectMap()" : 1 , "parse(InputSource,boolean)" : 4 , "removeSearchPath(String)" : 1 , "setIgnoredElements(String[])" : 2}},{ "className" : "org::argouml::language::java::reveng::JavaImport" , "selectors" : { "buildErrorString(File)" : 2 , "doImportPass(Project,Collection<File>,ImportSettings,ProgressMonitor,int,int)" : 3 , "getJavaProfile(Project)" : 1 , "getSuffixFilters()" : 1 , "parseFile(Project,File,ImportSettings,int)" : 1 , "parseFile(Project,File,ImportSettings,int)::ANTLRReaderStream" : 1 , "parseFile(Project,File,ImportSettings,int)::JavaParser" : 1 , "updateImportClassloader()" : 1}},{ "className" : "org::argouml::ui::explorer::rules::GoSummaryToAssociation" , "selectors" : { "GoSummaryToAssociation()" : 2}},{ "className" : "org::argouml::uml::diagram::ui::ActionStereotypeViewSmallIcon" , "selectors" : { "ActionStereotypeViewSmallIcon(FigNodeModelElement)" : 1}},{ "className" : "org::argouml::uml::diagram::use_case::ui::InitUseCaseDiagram" , "selectors" : { "InitUseCaseDiagram()" : 1}},{ "className" : "org::argouml::ui::explorer::rules::GoComponentToResidentModelElement" , "selectors" : { "GoComponentToResidentModelElement()" : 2}},{ "className" : "org::argouml::language::csharp::importer::csparser::interfaces::IType" , "selectors" : { "ToSource(StringBuilder)" : 2}},{ "className" : "org::argouml::uml::cognitive::critics::CrUML" , "selectors" : { "CrUML()" : 1 , "getClassSimpleName()" : 2 , "getDefaultSuggestion()" : 7 , "getInstructions()" : 13 , "getLocalizedString(String)" : 3 , "getLocalizedString(String,String)" : 3 , "predicate(Object,Designer)" : 6 , "predicate2(Object,Designer)" : 1 , "setResource(String)" : 1 , "setupHeadAndDesc()" : 99}},{ "className" : "org::argouml::language::php::PHPDocumentor" , "selectors" : { "PHPDocumentor(Object)" : 8 , "PHPDocumentor(Object,int)" : 2 , "create(Object)" : 2 , "create(Object,int)" : 2 , "createAttribute(Object)" : 2 , "createClassifier(Object)" : 2 , "createFile(Object)" : 1 , "createInclude(Object)" : 1 , "createOperation(Object)" : 2 , "createPackage(Object)" : 2 , "createUnknown(Object)" : 1 , "setFilename(String)" : 1 , "toString()" : 6 , "toString(String)" : 5 , "updateFile(Object)" : 1}},{ "className" : "org::argouml::profile::ProfileFacade" , "selectors" : { "applyConfiguration(ProfileConfiguration)" : 1 , "getManager()" : 37 , "isInitiated()" : 2 , "notInitialized(String)" : 1 , "register(Profile)" : 2 , "remove(Profile)" : 2 , "removeAllProfiles()" : 1 , "reset()" : 1 , "setManager(ProfileManager)" : 1}},{ "className" : "org::argouml::moduleloader::DetailsTabProvider" , "selectors" : { "getDetailsTabs()" : 1}},{ "className" : "org::argouml::model::mdr::UndoCoreHelperDecorator::BooleanSetter" , "selectors" : { "set(boolean)" : 2}},{ "className" : "org::argouml::language::cpp::profile::ProfileModule" , "selectors" : { "register(Profile)" : 1 , "remove(Profile)" : 1}},{ "className" : "org::argouml::core::propertypanels::ui::UMLExpressionExpressionModel" , "selectors" : { "UMLExpressionExpressionModel(Object)" : 1}},{ "className" : "org::argouml::core::propertypanels::ui::UMLMessageInteractionListModel" , "selectors" : { "UMLMessageInteractionListModel(Object,String)" : 1}},{ "className" : "org::argouml::ui::explorer::ExplorerTreeModel" , "selectors" : { "ExplorerTreeModel(Object,ExplorerTree)" : 1 , "addNodesToMap(ExplorerTreeNode)" : 2 , "addToMap(Object,ExplorerTreeNode)" : 2 , "collectChildren(Object,List,Set)" : 1 , "findNodes(Object)" : 1 , "getNodeUpdater()" : 1 , "insertNodeInto(MutableTreeNode,MutableTreeNode,int)" : 2 , "mergeChildren(ExplorerTreeNode,List,List)" : 1 , "prepareAddRemoveSets(List,List)" : 1 , "removeFromMap(Object,ExplorerTreeNode)" : 1 , "removeNodeFromParent(MutableTreeNode)" : 2 , "removeNodesFromMap(ExplorerTreeNode)" : 2 , "reorderChildren(ExplorerTreeNode)" : 1 , "structureChanged()" : 1 , "traverseModified(TreeNode,Object)" : 4 , "updateChildren(TreePath)" : 4}},{ "className" : "org::argouml::uml::ui::ActionCopy" , "selectors" : { "ActionCopy()" : 1 , "actionPerformed(ActionEvent)::CmdCopy" : 1 , "getInstance()" : 5 , "isSystemClipBoardEmpty()" : 1}},{ "className" : "org::argouml::sequence2::diagram::SelectionMessage" , "selectors" : { "SelectionMessage(FigEdgeModelElement)" : 1 , "handleMovement()" : 2}},{ "className" : "javax::swing::event::TreeModelListener" , "selectors" : { "treeNodesChanged(TreeModelEvent)" : 14 , "treeNodesInserted(TreeModelEvent)" : 11 , "treeNodesRemoved(TreeModelEvent)" : 11 , "treeStructureChanged(TreeModelEvent)" : 17}},{ "className" : "org::argouml::persistence::XMLTokenTableBase" , "selectors" : { "XMLTokenTableBase(int)" : 3 , "addToken(String,Integer)" : 43 , "contains(String)" : 1 , "setupTokens()" : 1 , "toToken(String,boolean)" : 6}},{ "className" : "java::io::BufferedInputStream" , "selectors" : { "BufferedInputStream(InputStream)" : 531 , "BufferedInputStream(InputStream,int)" : 112 , "available()" : 11 , "close()" : 125 , "java" : 12 , "mark(int)" : 33 , "markSupported()" : 1 , "read()" : 41 , "read(byte[],int,int)" : 31 , "reset()" : 36 , "skip(long)" : 8}},{ "className" : "org::argouml::core::propertypanels::model::GetterSetterManagerImpl::LeafGetterSetter" , "selectors" : { "LeafGetterSetter()" : 1}},{ "className" : "org::argouml::ui::explorer::rules::GoCollaborationToDiagram" , "selectors" : { "GoCollaborationToDiagram()" : 2}},{ "className" : "org::argouml::profile::internal::ocl::InvalidOclException" , "selectors" : { "InvalidOclException(String)" : 2}},{ "className" : "org::argouml::core::propertypanels::ui::UMLModelElementNamespaceComboBoxModel::SetAction" , "selectors" : { "SetAction()" : 1}},{ "className" : "org::argouml::core::propertypanels::ui::UMLExpressionModel" , "selectors" : { "UMLExpressionModel(Object,String)" : 8 , "addChangeListener(ChangeListener)" : 1 , "fireStateChanged()" : 1 , "getBody()" : 1 , "getExpression()" : 5 , "getLanguage()" : 1 , "getTarget()" : 17 , "newExpression(String,String)" : 1 , "removeChangeListener(ChangeListener)" : 1 , "setBody(String)" : 3 , "setExpression(Object)" : 1 , "setExpression(String,String)" : 2 , "setLanguage(String)" : 3 , "startListeningForModelChanges()" : 2 , "stopListeningForModelChanges()" : 1}},{ "className" : "org::argouml::model::CollaborationsFactory" , "selectors" : { "buildAssociationRole(Object,Object)" : 2 , "buildClassifierRole(Object)" : 3 , "buildCollaboration(Object)" : 2 , "buildCollaboration(Object,Object)" : 3 , "buildInteraction(Object)" : 2 , "buildLifeline(Object)" : 2 , "buildMessage(Object,Object)" : 4 , "createClassifierRole()" : 1 , "createCollaboration()" : 1}},{ "className" : "org::argouml::uml::diagram::activity::ui::ActivityDiagramRenderer" , "selectors" : { "ActivityDiagramRenderer()" : 1 , "getFigNodeFor(GraphModel,Layer,Object,Map)::LayerPerspective" : 1}},{ "className" : "org::argouml::core::propertypanels::ui::UMLIncludeListModel" , "selectors" : { "UMLIncludeListModel(String)" : 2 , "buildModelList()" : 2}},{ "className" : "org::argouml::deployment2::DeploymentDiagramPropPanelFactory::PropPanelUMLDeploymentDiagram" , "selectors" : { "PropPanelUMLDeploymentDiagram()" : 1}},{ "className" : "org::argouml::cognitive::critics::ui::TableModelCritics" , "selectors" : { "TableModelCritics(boolean)" : 1 , "getCriticAtRow(int)" : 1 , "listToString(List)" : 2 , "setAdvanced(boolean)" : 1}},{ "className" : "org::argouml::uml::diagram::ui::SelectionNodeClarifiers2" , "selectors" : { "createEdgeAbove(???)" : 1 , "dragHandle(???)" : 1 , "getButton()" : 5 , "getIcons()" : 2 , "getInstructions(int)" : 2 , "getNewEdgeType(int)" : 4 , "getNewNodeType(int)" : 1 , "hitHandle(???)" : 1 , "isDraggableHandle(int)" : 1 , "isEdgePostProcessRequested()" : 2 , "isReverseEdge(int)" : 2 , "mouseEntered(???)" : 1 , "mouseReleased(???)" : 1 , "paint(Graphics)" : 1 , "paintButtons(Graphics)" : 1 , "postProcessEdge2(Object)" : 1}},{ "className" : "org::argouml::ui::explorer::DnDExplorerTree::DnDTreeSelectionListener" , "selectors" : { "DnDTreeSelectionListener()" : 1}},{ "className" : "org::argouml::uml::ui::UMLStereotypeList" , "selectors" : { "UMLStereotypeList(ListModel)" : 2 , "UMLStereotypeList(ListModel,boolean)" : 1 , "UMLStereotypeList(ListModel,boolean,boolean)" : 1}},{ "className" : "org::argouml::uml::ui::UMLExpressionBodyField" , "selectors" : { "update()" : 2}},{ "className" : "org::argouml::uml::diagram::deployment::ui::DeploymentDiagramRenderer" , "selectors" : { "DeploymentDiagramRenderer()" : 2 , "getFigEdgeFor(GraphModel,Layer,Object,Map)::LayerPerspective" : 1 , "getFigNodeFor(GraphModel,Layer,Object,Map)::LayerPerspective" : 1}},{ "className" : "org::argouml::language::java::ui::ActionRESequenceDiagramForOperation" , "selectors" : { "ActionRESequenceDiagramForOperation()" : 1 , "buildSequenceDiagram(Object)" : 1}},{ "className" : "org::argouml::core::propertypanels::ui::UMLLinkedList" , "selectors" : { "UMLLinkedList(ListModel,ListCellRenderer)" : 1 , "UMLLinkedList(ListModel,boolean)" : 3 , "UMLLinkedList(ListModel,boolean,boolean)" : 5 , "getTarget()" : 10 , "hasPopup()" : 2 , "showPopup(MouseEvent)" : 3}},{ "className" : "org::argouml::uml::diagram::state::ui::FigVertex::FigBody" , "selectors" : { "FigBody(int,int,int,int)" : 1 , "setText(???)" : 2}},{ "className" : "org::argouml::core::propertypanels::model::GetterSetterManagerImpl::SenderGetterSetter" , "selectors" : { "SenderGetterSetter()" : 1 , "getOptions(Object,Collection<Class<?>>)" : 1}},{ "className" : "org::argouml::uml::diagram::ui::FigOrdering" , "selectors" : { "FigOrdering(Object,DiagramSettings)" : 1 , "getOrderingName(Object)" : 1 , "setText()" : 2}},{ "className" : "org::argouml::model::euml::ModelEventPumpEUMLImpl" , "selectors" : { "ModelEventPumpEUMLImpl(EUMLModelImplementation)" : 1 , "ModelEventPumpEUMLImpl(EUMLModelImplementation)::anonymous(CommandStackListener)" : 1 , "addElementForDeleteEventIgnore(???)" : 4 , "addListeners(List<EventListener>,Object,String,Map<Object,List<Listener>>)" : 2 , "addModelEventListener(PropertyChangeListener,Object,String[])" : 1 , "fireEvent(???)" : 2 , "fireEvent(Object,Object,Object,int,String,EReference)::EventAndListeners" : 9 , "getListeners(Object)" : 1 , "getListeners(Object,String)" : 9 , "getRootContainer()" : 8 , "isDeleteEventRequired(Object)" : 1 , "mapPropertyName(String)" : 3 , "newDebugNode(String)" : 1 , "notifyChanged(???)" : 3 , "notifyChanged(Notification)::EReference" : 1 , "registerListener(Object,EventListener,String[],Map<Object,List<Listener>>)" : 3 , "removeModelEventListener(PropertyChangeListener,Object,String[])" : 1 , "setRootContainer(???)" : 1 , "startPumpingEvents()" : 2 , "stopPumpingEvents()" : 2 , "unregisterListener(Object,EventListener,String[],Map<Object,List<Listener>>)" : 3}},{ "className" : "org::argouml::kernel::MemberList" , "selectors" : { "MemberList()" : 1 , "buildOrderedMemberList()" : 3 , "removeDiagram(ArgoDiagram)" : 1 , "setTodoList(AbstractProjectMember)" : 2 , "size()" : 3}},{ "className" : "org::argouml::uml::diagram::static_structure::ui::SelectionCompartmentText" , "selectors" : { "SelectionCompartmentText(???)" : 1}},{ "className" : "org::argouml::core::propertypanels::model::GetterSetterManagerImpl::AggregationGetterSetter" , "selectors" : { "AggregationGetterSetter()" : 1}},{ "className" : "org::argouml::ui::explorer::rules::GoAssocRoleToMessages" , "selectors" : { "GoAssocRoleToMessages()" : 1}},{ "className" : "org::argouml::sequence2::diagram::FigLifeLine" , "selectors" : { "FigLifeLine(Object,Rectangle,DiagramSettings)" : 1 , "addActivations(List<FigActivation>)" : 2 , "clearActivations()" : 1 , "createActivationFig(Object,int,int,int,int,DiagramSettings,FigMessage)" : 3 , "createActivations(List<FigMessage>)" : 1 , "createStackedActivations(List<FigMessage>)" : 1 , "createStandardActivations(List<FigMessage>)" : 1 , "getLineWidth(???)" : 1 , "getY(???)" : 1 , "hasIncomingCallActionFirst(List<FigMessage>)" : 1 , "initialize(int,int)" : 1 , "initialize(int,int)::FigLine" : 1 , "initialize(int,int)::FigRect" : 1 , "isIncoming(FigMessage)" : 1 , "isOutgoing(FigMessage)" : 1 , "isSameClassifierRoles(FigMessage,FigMessage)" : 1 , "setBounds(???)" : 1 , "setFillColor(???)" : 1}},{ "className" : "org::argouml::uml::cognitive::critics::CrConstructorNeeded" , "selectors" : { "CrConstructorNeeded()" : 1}},{ "className" : "org::argouml::core::propertypanels::ui::UMLCommentAnnotatedElementListModel" , "selectors" : { "UMLCommentAnnotatedElementListModel(Object)" : 1}},{ "className" : "org::argouml::model::euml::MessageSortEUMLImpl" , "selectors" : { "MessageSortEUMLImpl()" : 1}},{ "className" : "org::argouml::uml::cognitive::critics::CrTooManyOper" , "selectors" : { "CrTooManyOper()" : 1}},{ "className" : "org::argouml::core::propertypanels::ui::UMLSubmachineStateComboBoxModel" , "selectors" : { "UMLSubmachineStateComboBoxModel(String,Object)" : 1}},{ "className" : "org::argouml::uml::diagram::collaboration::ui::InitCollaborationDiagram" , "selectors" : { "InitCollaborationDiagram()" : 1}},{ "className" : "org::argouml::uml::util::namespace::StringNamespace" , "selectors" : { "StringNamespace()" : 1 , "StringNamespace(NamespaceElement[],String)" : 1 , "StringNamespace(String)" : 4 , "StringNamespace(String[],String)" : 1 , "iterator()" : 1 , "parse(Class)" : 1 , "parse(String,String)" : 2 , "peekNamespaceElement()" : 1 , "popNamespaceElement()" : 2 , "pushNamespaceElement(NamespaceElement)" : 3 , "pushNamespaceElement(String)" : 2 , "toString()" : 2 , "toString(String)" : 3}},{ "className" : "org::argouml::uml::ui::PropPanel" , "selectors" : { "PropPanel(String,ImageIcon)" : 4 , "addAction(Action)" : 2 , "addField(String,Component)" : 18 , "buildToolbar()" : 1 , "buildToolbar()::ToolBarFactory" : 1 , "collectTargetListenerActions()" : 1 , "collectTargetListeners(Container)" : 6 , "createLabelFor(String,Component)" : 3 , "fireTargetAdded(TargetEvent)" : 1 , "fireTargetRemoved(TargetEvent)" : 1 , "fireTargetSet(TargetEvent)" : 2 , "getActions()" : 1 , "getDisplayNamespace()" : 2 , "getModelElement()" : 1 , "getProfile()" : 3 , "getTarget()" : 6 , "getTitleLabel()" : 1 , "lookupIcon(String)" : 10 , "setButtonPanelSize(int)" : 1 , "setOrientation(???)" : 1 , "setTarget(Object)" : 4 , "setTarget(Object)::Fig" : 1 , "setTitleLabel(JLabel)" : 2 , "shouldBeEnabled(Object)::Fig" : 1}},{ "className" : "org::argouml::ui::GotoDialog" , "selectors" : { "GotoDialog()" : 1}},{ "className" : "org::argouml::profile::internal::ocl::ContextApplicable" , "selectors" : { "ContextApplicable(Object)" : 1 , "isApplicable()" : 1}},{ "className" : "org::argouml::kernel::DefaultUndoManager" , "selectors" : { "DefaultUndoManager()" : 1 , "DefaultUndoManager(Project)" : 1 , "addCommand(Command)" : 1 , "fire(String,Object)" : 13}},{ "className" : "org::argouml::persistence::XMLElement" , "selectors" : { "XMLElement(String,Attributes)" : 1 , "addText(char[],int,int)" : 1 , "getAttribute(String)" : 4 , "getAttributeName(int)" : 1 , "getAttributeValue(int)" : 1 , "getName()" : 17 , "getNumAttributes()" : 1 , "getText()" : 30 , "resetText()" : 1 , "setAttributes(Attributes)" : 1 , "setName(String)" : 1}},{ "className" : "org::argouml::cognitive::ui::WizStepManyTextFields" , "selectors" : { "WizStepManyTextFields(Wizard,String,List)" : 1 , "getStringList()" : 1}},{ "className" : "org::argouml::kernel::AbstractCommand" , "selectors" : { "execute()" : 1}},{ "className" : "org::argouml::core::propertypanels::ui::UMLTimeExpressionModel" , "selectors" : { "UMLTimeExpressionModel(Object)" : 1}},{ "className" : "org::argouml::language::csharp::importer::csparser::members::FieldNode" , "selectors" : { "FieldNode()" : 3}},{ "className" : "org::argouml::core::propertypanels::model::IconIdentifiable" , "selectors" : { "getIcon()" : 2}},{ "className" : "org::argouml::uml::diagram::collaboration::ui::UMLCollaborationDiagram" , "selectors" : { "UMLCollaborationDiagram()" : 1 , "UMLCollaborationDiagram(Object)" : 1 , "createGraphModel()" : 2 , "getActionAggregation()" : 1 , "getActionAssociation()" : 2 , "getActionClassifierRole()" : 2 , "getActionComposition()" : 1 , "getActionDepend()" : 2 , "getActionGeneralize()" : 2 , "getActionMessage()" : 2 , "getActionUniAggregation()" : 1 , "getActionUniAssociation()" : 1 , "getActionUniComposition()" : 1 , "getAssociationActions()" : 1 , "makeNewCR(Object)" : 2 , "makeNewFigCR(Object,Point)" : 4 , "setNamespace(Object)" : 1 , "setNamespace(Object)::LayerPerspectiveMutable" : 1}},{ "className" : "org::argouml::uml::cognitive::critics::CrOppEndVsAttr" , "selectors" : { "CrOppEndVsAttr()" : 1}},{ "className" : "org::argouml::language::cpp::reveng::ModelerImpl::BaseSpecifierModeler" , "selectors" : { "BaseSpecifierModeler()" : 1 , "baseSpecifier(String,boolean)" : 1 , "finish()" : 1}},{ "className" : "org::argouml::uml::diagram::state::ui::StateDiagramPropPanelFactory" , "selectors" : { "StateDiagramPropPanelFactory()" : 1}},{ "className" : "javax::swing::JRadioButton" , "selectors" : { "JRadioButton()" : 45 , "JRadioButton(Action)" : 2 , "JRadioButton(Icon)" : 2 , "JRadioButton(String)" : 226 , "JRadioButton(String,Icon)" : 1 , "JRadioButton(String,boolean)" : 27 , "javax" : 93}},{ "className" : "org::argouml::core::propertypanels::model::GetterSetterManagerImpl::DoActivityActionGetterSetter" , "selectors" : { "DoActivityActionGetterSetter()" : 1 , "getOptions(Object,Collection<Class<?>>)" : 1}},{ "className" : "org::argouml::ui::DisplayTextTree" , "selectors" : { "DisplayTextTree()" : 2 , "convertValueToText(Object,boolean,boolean,boolean,int,boolean)" : 1 , "formatExtensionPoint(Object)" : 1 , "formatTaggedValueLabel(Object)" : 1 , "formatTransitionLabel(Object)" : 1 , "generateStereotype(Collection<Object>)" : 1 , "getExpandedPaths()" : 3 , "getModelElementDisplayName(Object)" : 3 , "getNotationSettings()" : 3 , "reexpand()" : 1 , "setModel(TreeModel)" : 1 , "setShowStereotype(boolean)" : 2}},{ "className" : "org::argouml::activity2::diagram::ActivityDiagramRenderer" , "selectors" : { "ActivityDiagramRenderer()" : 1 , "getFigEdgeFor(GraphModel,Layer,Object,Map)::LayerPerspective" : 1 , "getFigNodeFor(GraphModel,Layer,Object,Map)::LayerPerspective" : 1}},{ "className" : "java::util::Dictionary" , "selectors" : { "elements()" : 2 , "get(Object)" : 32 , "keys()" : 5 , "put(K,V)" : 12 , "remove(Object)" : 1 , "size()" : 4}},{ "className" : "org::argouml::ui::explorer::ExplorerTreeNode" , "selectors" : { "ExplorerTreeNode(Object,ExplorerTreeModel)" : 4 , "ExplorerTreeNode(Object,ExplorerTreeModel)::Diagram" : 1 , "getPending()" : 1 , "nodeModified(Object)" : 1 , "remove()" : 3 , "setModifySet(Set)" : 1 , "setPending(boolean)" : 2}},{ "className" : "org::argouml::notation::providers::java::OperationNotationJava" , "selectors" : { "generateAbstractness(Object)" : 1 , "generateConcurrency(Object)" : 1 , "toString(Object)" : 1}},{ "className" : "org::argouml::model::ExtensionMechanismsHelper" , "selectors" : { "addBaseClass(Object,Object)" : 6 , "addCopyStereotype(Object,Object)" : 2 , "addExtendedElement(Object,Object)" : 1 , "addTaggedValue(Object,Object)" : 24 , "applyProfile(Object,Object)" : 3 , "getAllPossibleStereotypes(Collection,Object)" : 5 , "getCommonTaggedValueTypes()" : 4 , "getMetaModelName(Object)" : 1 , "getStereotype(Collection,Object)" : 3 , "getStereotype(Object,Object)" : 1 , "getStereotypes(Collection)" : 2 , "getStereotypes(Object)" : 4 , "hasStereotype(Object,String)" : 19 , "isStereotype(Object,String,String)" : 1 , "isStereotypeInh(Object,String,String)" : 5 , "isValidStereotype(Object,Object)" : 5 , "makeProfileApplicable(Object)" : 2 , "removeBaseClass(Object,Object)" : 5 , "removeTaggedValue(Object,Object)" : 3 , "setDataValues(Object,String[])" : 9 , "setIcon(Object,Object)" : 1 , "setTagType(Object,String)" : 1 , "setTaggedValue(Object,Collection)" : 1 , "setTaggedValue(Object,Object,Object)" : 2 , "setType(Object,Object)" : 6 , "setValueOfTag(Object,String)" : 8 , "unapplyProfile(Object,Object)" : 2}},{ "className" : "org::argouml::uml::diagram::ArgoDiagramImpl" , "selectors" : { "ArgoDiagramImpl()" : 1 , "constructorInit()" : 3 , "damage()" : 5 , "damage()::Editor" : 1 , "getDiagramSettings()" : 15 , "getNamespace()" : 13 , "getNodes()" : 1 , "getOwner()" : 3 , "getProject()" : 11 , "remove()::ArrayList" : 1 , "renderingChanged()" : 2 , "repair()::ArrayList" : 2 , "setModelElementNamespace(Object,Object)" : 1 , "setName(String)" : 15 , "setNamespace(Object)" : 15 , "setProject(Project)" : 1}},{ "className" : "org::argouml::model::mdr::CommonBehaviorFactoryMDRImpl" , "selectors" : { "CommonBehaviorFactoryMDRImpl(MDRModelImplementation)" : 1 , "buildAction(Object)::Message" : 1 , "buildLink(???)" : 1 , "buildSignal(Object)::Reception" : 1 , "buildSignal(Object)::SendAction" : 1 , "buildSignal(Object)::SignalEvent" : 1 , "buildSignal(Object)::UmlPackage" : 1 , "buildSignalInt(Object)::ModelElement" : 1 , "buildUninterpretedAction(Object)::ActionState" : 1 , "createComponentInstance(???)" : 1 , "createException(???)" : 1 , "createNodeInstance(???)" : 1 , "createObject(???)" : 1 , "createSignal(???)" : 1 , "deleteAction(Object)" : 1 , "deleteAction(Object)::org" : 2 , "deleteActionSequence(Object)" : 1 , "deleteAttributeLink(Object)" : 1 , "deleteCallAction(Object)" : 1 , "deleteComponentInstance(Object)" : 1 , "deleteCreateAction(Object)" : 1 , "deleteDataValue(Object)" : 1 , "deleteDestroyAction(Object)" : 1 , "deleteException(Object)" : 1 , "deleteInstance(Object)" : 1 , "deleteInstance(Object)::Instance" : 2 , "deleteInstance(Object)::UmlPackage" : 2 , "deleteInstance(Object)::org" : 2 , "deleteLink(Object)" : 1 , "deleteLinkEnd(Object)" : 1 , "deleteLinkEnd(Object)::LinkEnd" : 1 , "deleteLinkObject(Object)" : 1 , "deleteNodeInstance(Object)" : 1 , "deleteObject(Object)" : 1 , "deleteReception(Object)" : 1 , "deleteReturnAction(Object)" : 1 , "deleteSendAction(Object)" : 1 , "deleteSignal(Object)" : 1 , "deleteSignal(Object)::org" : 2 , "deleteStimulus(Object)" : 1 , "deleteStimulus(Object)::org" : 1 , "deleteSubsystemInstance(Object)" : 1 , "deleteTerminateAction(Object)" : 1 , "deleteUninterpretedAction(Object)" : 1}},{ "className" : "org::argouml::uml::diagram::use_case::ui::FigActor" , "selectors" : { "FigActor(Object,Rectangle,DiagramSettings)" : 4 , "constructFigs(Rectangle)" : 1 , "constructFigs(Rectangle)::FigCircle" : 1 , "constructFigs(Rectangle)::FigLine" : 4 , "getGravityPoints()::FigLine" : 12 , "getMinimumSize()" : 1 , "setFillColor(Color)" : 1 , "setFilled(boolean)" : 1 , "setLineWidth(int)" : 1}},{ "className" : "org::argouml::core::propertypanels::ui::UMLCallActionOperationComboBoxModel::SetActionOperationAction" , "selectors" : { "SetActionOperationAction()" : 1}},{ "className" : "org::argouml::ui::SettingsTabUser" , "selectors" : { "SettingsTabUser()" : 1 , "buildPanel()" : 1 , "handleSettingsTabRefresh()" : 1}},{ "className" : "org::argouml::profile::FormatingStrategy" , "selectors" : { "formatCollection(Iterator,Object)" : 1 , "formatElement(Object,Object)" : 2}},{ "className" : "org::argouml::uml::diagram::use_case::ui::FigActor::ActorPortFigRect" , "selectors" : { "ActorPortFigRect(???)" : 1}},{ "className" : "org::argouml::core::propertypanels::ui::UMLActivityGraphContextComboBoxModel::ActionSetContext" , "selectors" : { "ActionSetContext()" : 1}},{ "className" : "org::argouml::sequence2::diagram::FigMessage" , "selectors" : { "FigMessage(Object,DiagramSettings)" : 1 , "buildOperationMenu()" : 1 , "convertToArc()" : 2 , "determineActivator()" : 1 , "getAction()" : 6 , "getDestFigNode(???)" : 13 , "getFig(???)" : 3 , "getFinalY()" : 8 , "getFirstPoint(???)" : 12 , "getNotationSettings()" : 2 , "getPoints(???)" : 2 , "getPolygon(???)" : 1 , "getReceiverOperations()" : 1 , "getSourceFigNode(???)" : 10 , "getStartY()" : 2 , "getY(???)" : 4 , "initialize()" : 1 , "isCreateMessage()" : 5 , "isDeleteMessage()" : 1 , "isReplyMessage()" : 7 , "isSelfMessage()" : 15 , "isSynchCallMessage()" : 7 , "setDestFigNode(???)" : 1 , "setDestPortFig(???)" : 1 , "setPoints(???)" : 1 , "setPolygon(???)" : 1 , "setSourceFigNode(???)" : 1 , "setSourcePortFig(???)" : 1 , "translate(int,int)" : 2 , "translateEdge(???)" : 2 , "updateActivations()" : 1 , "updateArrow()" : 3 , "updateArrow()::ArrowHeadGreater" : 1 , "updateArrow()::ArrowHeadTriangle" : 1}},{ "className" : "org::argouml::uml::cognitive::critics::CrInterfaceOperOnly" , "selectors" : { "CrInterfaceOperOnly()" : 1}},{ "className" : "org::argouml::ui::explorer::ExplorerPopup::OrderedMenu" , "selectors" : { "OrderedMenu(String)" : 1}},{ "className" : "org::argouml::language::java::reveng::ParseState" , "selectors" : { "ParseState(Object,Object)" : 1 , "ParseState(ParseState,Object,Object)" : 2 , "addClassifierContext(Object)" : 1 , "addPackageContext(Object)" : 2 , "anonymousClass()" : 1 , "feature(Object)" : 3 , "getArtifact()" : 8 , "getAttribute(String)" : 1 , "getClassifier()" : 16 , "getContext()" : 1 , "getMethod(String)" : 1 , "getOperation(String)" : 1 , "innerClassifier(Object)" : 2 , "outerClassifier()" : 2 , "removeObsoleteFeatures()" : 1 , "removeObsoleteInnerClasses()" : 1 , "setArtifact(Object)" : 3}},{ "className" : "org::argouml::uml::ui::ActionStateDiagram" , "selectors" : { "ActionStateDiagram()" : 8 , "buildMachine(Object,Object)" : 1 , "getTarget(Object)" : 1 , "hasNoDiagramYet(Object)" : 1}},{ "className" : "org::argouml::uml::diagram::ui::ActionSaveDiagramToClipboard" , "selectors" : { "ActionSaveDiagramToClipboard()" : 2 , "getImage()" : 1}},{ "className" : "org::argouml::core::propertypanels::model::ControlData" , "selectors" : { "ControlData(String,String,String)" : 1 , "addCheckbox(CheckBoxData)" : 1 , "addType(Class<?>)" : 1 , "getCheckboxes()" : 1 , "getControlType()" : 9 , "getLabel()" : 5 , "getPropertyName()" : 38 , "getType()" : 3 , "getTypes()" : 3}},{ "className" : "org::argouml::ui::explorer::rules::GoOperationToCollaboration" , "selectors" : { "GoOperationToCollaboration()" : 2}},{ "className" : "org::argouml::util::CustomSeparator" , "selectors" : { "CustomSeparator(char)" : 3 , "addChar(char)" : 1 , "endChar(char)" : 1 , "getPeekCount()" : 1 , "hasFreePart()" : 1 , "reset()" : 4 , "tokenLength()" : 5}},{ "className" : "org::argouml::core::propertypanels::model::GetterSetterManagerImpl::ReceptionGetterSetter" , "selectors" : { "ReceptionGetterSetter()" : 1 , "getOptions(Object,Collection<Class<?>>)" : 1}},{ "className" : "org::argouml::model::mdr::MessageSortMDRImpl" , "selectors" : { "MessageSortMDRImpl()" : 1}},{ "className" : "org::argouml::core::propertypanels::ui::UMLStateVertexIncomingListModel" , "selectors" : { "UMLStateVertexIncomingListModel(Object)" : 1}},{ "className" : "org::argouml::notation::providers::uml::StateBodyNotationUml::ModelElementInfoList" , "selectors" : { "ModelElementInfoList(Collection)" : 1 , "add(Object,boolean)" : 1 , "checkRetain(String)" : 1 , "finalisedList()" : 1}},{ "className" : "org::argouml::model::MetaTypes" , "selectors" : { "getAbstraction()" : 7 , "getAcceptEventAction()" : 1 , "getAction()" : 6 , "getActionSequence()" : 1 , "getActionState()" : 4 , "getActivity()" : 3 , "getActivityParameterNode()" : 1 , "getActor()" : 9 , "getAllMetaTypes()" : 1 , "getArgument()" : 2 , "getArtifact()" : 1 , "getAssociation()" : 19 , "getAssociationClass()" : 14 , "getAssociationEnd()" : 9 , "getAssociationEndRole()" : 2 , "getAssociationRole()" : 8 , "getAttribute()" : 42 , "getBehavioralFeature()" : 2 , "getCallAction()" : 1 , "getCallBehaviorAction()" : 1 , "getCallEvent()" : 3 , "getCallState()" : 3 , "getCentralBufferNode()" : 1 , "getChangeEvent()" : 3 , "getClassifier()" : 34 , "getClassifierRole()" : 6 , "getCollaboration()" : 4 , "getComment()" : 5 , "getComponent()" : 9 , "getComponentInstance()" : 3 , "getComponentRealization()" : 2 , "getCompositeState()" : 7 , "getConnector()" : 1 , "getConstraint()" : 2 , "getControlFlow()" : 1 , "getCreateAction()" : 1 , "getCreateObjectAction()" : 1 , "getDataStoreNode()" : 1 , "getDataType()" : 11 , "getDataValue()" : 1 , "getDependency()" : 14 , "getDestroyAction()" : 1 , "getDestroyObjectAction()" : 1 , "getElementImport()" : 1 , "getElementResidence()" : 1 , "getEnumeration()" : 5 , "getEnumerationLiteral()" : 14 , "getEvent()" : 6 , "getException()" : 5 , "getExpansionNode()" : 1 , "getExtend()" : 5 , "getExtensionPoint()" : 9 , "getFinalState()" : 6 , "getGeneralizableElement()" : 3 , "getGeneralization()" : 23 , "getGuard()" : 3 , "getInclude()" : 5 , "getInputPin()" : 1 , "getInstance()" : 3 , "getInstanceSpecification()" : 2 , "getInteraction()" : 1 , "getInterface()" : 21 , "getLifeline()" : 1 , "getLink()" : 9 , "getMessage()" : 4 , "getMethod()" : 3 , "getModel()" : 4 , "getModelElement()" : 8 , "getName(Object)" : 28 , "getNamespace()" : 13 , "getNode()" : 8 , "getNodeInstance()" : 4 , "getObject()" : 6 , "getObjectFlow()" : 1 , "getObjectFlowState()" : 2 , "getOperation()" : 41 , "getOutputPin()" : 1 , "getPackage()" : 10 , "getPackageImport()" : 5 , "getParameter()" : 8 , "getPartition()" : 4 , "getPort()" : 3 , "getProfile()" : 1 , "getProperty()" : 2 , "getPseudostate()" : 14 , "getReception()" : 5 , "getRegion()" : 11 , "getReturnAction()" : 1 , "getSendAction()" : 1 , "getSendSignalAction()" : 1 , "getSignal()" : 13 , "getSignalEvent()" : 3 , "getSimpleState()" : 6 , "getState()" : 12 , "getStateMachine()" : 4 , "getStateVertex()" : 6 , "getStereotype()" : 7 , "getStubState()" : 4 , "getSubactivityState()" : 3 , "getSubmachineState()" : 4 , "getSubsystem()" : 3 , "getSynchState()" : 5 , "getTagDefinition()" : 10 , "getTaggedValue()" : 1 , "getTemplateArgument()" : 1 , "getTemplateParameter()" : 3 , "getTerminateAction()" : 2 , "getTimeEvent()" : 3 , "getTransition()" : 22 , "getUMLClass()" : 33 , "getUninterpretedAction()" : 1 , "getUsage()" : 5 , "getUseCase()" : 8}},{ "className" : "org::argouml::model::mdr::ActivityGraphsHelperMDRImpl" , "selectors" : { "ActivityGraphsHelperMDRImpl()" : 1 , "addInState(Object,Object)::ClassifierInState" : 1 , "addParameter(Object,Object)::ObjectFlowState" : 1 , "findClassifierByName(Object,String)::ObjectFlowState" : 1 , "removeParameter(Object,Object)::ObjectFlowState" : 1 , "setParameters(Object,Collection)::ObjectFlowState" : 1 , "setSynch(Object,boolean)::ObjectFlowState" : 1}},{ "className" : "org::argouml::profile::internal::ocl::DefaultOclEvaluator" , "selectors" : { "DefaultOclEvaluator()" : 2 , "evaluate(Map<String,Object>,ModelInterpreter,String)::Lexer" : 1 , "getInstance()" : 1}},{ "className" : "org::argouml::ui::explorer::rules::GoProjectToCollaboration" , "selectors" : { "GoProjectToCollaboration()" : 1}},{ "className" : "org::argouml::model::euml::ModelManagementHelperEUMLImpl" , "selectors" : { "ModelManagementHelperEUMLImpl(EUMLModelImplementation)" : 1 , "getAllContents(Object)::Classifier" : 1 , "getAllContents(Object)::Namespace" : 1 , "getAllContents(Object)::org" : 2 , "getAllModelElementsOfKind(Object,Object)" : 13 , "getAllModelElementsOfKind(Object,Object)::Namespace" : 1 , "getAllSurroundingNamespaces(Object)::NamedElement" : 1 , "getContents(Object)::Namespace" : 2 , "getContents(Object)::org" : 1 , "getElement(List<String>,Object)" : 1 , "getRootElements(Object)::EObject" : 1}},{ "className" : "org::argouml::uml::diagram::static_structure::ui::PackagePortFigRect" , "selectors" : { "PackagePortFigRect(int,int,int,int,int,int)" : 1 , "setFilled(boolean)" : 1 , "setLineWidth(???)" : 1}},{ "className" : "org::argouml::uml::cognitive::UMLToDoItem" , "selectors" : { "UMLToDoItem(Critic,ListSet,Designer)" : 24 , "UMLToDoItem(Critic,Object,Designer)" : 1 , "UMLToDoItem(Poster,String,int,String,String,ListSet)" : 1 , "deselect()" : 1 , "getOffenders()" : 3 , "select()" : 1}},{ "className" : "org::argouml::notation::providers::uml::ObjectNotationUml" , "selectors" : { "toString(Object)" : 1}},{ "className" : "org::argouml::activity2::diagram::FigComposite" , "selectors" : { "FigComposite(Object,DiagramSettings)" : 3 , "calcBounds()" : 2 , "calcBounds()::FigGroup" : 1 , "getBottomMargin()" : 1 , "getDiagramSettings()" : 1 , "getLeftMargin()" : 4 , "getRightMargin()" : 2 , "getTopMargin()" : 3 , "positionChildren()" : 1}},{ "className" : "org::argouml::cognitive::ToDoList" , "selectors" : { "ToDoList()" : 1 , "addE(ToDoItem)" : 1 , "addElement(ToDoItem)" : 3 , "addOffenders(ListSet)" : 1 , "addPosters(Poster)" : 1 , "addResolvedCritic(ResolvedCritic)" : 2 , "addToDoListListener(ToDoListListener)" : 1 , "elementListForOffender(Object)" : 10 , "explicitlyResolve(ToDoItem,String)" : 1 , "fireToDoItemAdded(ToDoItem)" : 1 , "fireToDoItemChanged(ToDoItem)" : 1 , "fireToDoItemRemoved(ToDoItem)" : 2 , "fireToDoItemsAdded(List<ToDoItem>)" : 1 , "fireToDoItemsRemoved(List<ToDoItem>)" : 4 , "forceValidityCheck(List<ToDoItem>)" : 2 , "getOffenders()" : 4 , "getPosters()" : 4 , "getResolvedItems()" : 1 , "getToDoItemList()" : 19 , "isPaused()" : 1 , "notifyObservers(Object)" : 1 , "notifyObservers(String,Object)" : 2 , "pause()" : 1 , "recomputeAllOffenders()" : 4 , "recomputeAllPosters()" : 4 , "removeAll(ToDoList)" : 1 , "removeAllElements()" : 1 , "removeE(ToDoItem)" : 4 , "resolve(ToDoItem)" : 2 , "resume()" : 1 , "setPaused(boolean)" : 2 , "size()" : 1 , "spawnValidityChecker(Designer)" : 1}},{ "className" : "org::argouml::uml::diagram::state::ui::FigJoinState" , "selectors" : { "FigJoinState(Object,Rectangle,DiagramSettings)" : 4 , "createBigPortFig()::FigRect" : 1 , "getFigs(???)" : 1 , "initFigs()" : 1 , "initFigs()::FigRect" : 1 , "setBigPort(???)" : 1}},{ "className" : "org::argouml::pattern::cognitive::critics::InitPatternCritics" , "selectors" : { "InitPatternCritics()" : 1}},{ "className" : "com::nwalsh::xalan::Table" , "selectors" : { "adjustColumnWidths(ExpressionContext,NodeIterator)::DOMBuilder" : 1 , "convertLength(String)" : 4 , "copyAttributes(Element)" : 1 , "correctRoundingError(String[])" : 2 , "initializeHash()" : 2}},{ "className" : "org::argouml::model::DiagramInterchangeModel" , "selectors" : { "createDiagram(Class,Object)" : 1 , "createElement(DiDiagram,Object)" : 1 , "deleteDiagram(DiDiagram)" : 1 , "deleteElement(DiElement)" : 1 , "edgeAdded(Object,Object)" : 1 , "edgeRemoved(Object,Object)" : 1 , "graphChanged(Object,Object)" : 1 , "nodeAdded(Object,Object)" : 1 , "nodeRemoved(Object,Object)" : 1}},{ "className" : "org::argouml::language::sql::GeneratorSql" , "selectors" : { "GeneratorSql()" : 1 , "generateCode(Collection)" : 1 , "generateFiles(Collection,String,boolean)" : 1 , "getDomainMapper()" : 6 , "getFkDef(Object,Object,Object)" : 1 , "getForeignKeyDefinitions(Object)" : 1 , "getInstance()" : 10 , "getSqlCodeCreators()" : 2 , "getTableDefinition(Object)" : 1 , "loadSqlCodeCreators()" : 1 , "setNullable(TableDefinition,List<String>,boolean)" : 2 , "setSqlCodeCreator(SqlCodeCreator)" : 1 , "writeFile(String,String)" : 1}},{ "className" : "org::argouml::uml::ui::foundation::extension_mechanisms::ActionNewStereotype" , "selectors" : { "ActionNewStereotype()" : 1 , "actionPerformed(ActionEvent)::Fig" : 1}},{ "className" : "org::argouml::ui::ProjectSettingsTabProfile" , "selectors" : { "ProjectSettingsTabProfile()" : 1 , "buildDialog()" : 4 , "createProfileList()" : 2 , "getActiveDependents(Profile)" : 1 , "getAvailableDependents(Profile)" : 1 , "getAvailableProfiles()" : 1 , "getFileChooser()" : 1 , "getUsedProfiles()" : 2 , "refreshLists()" : 2}},{ "className" : "org::argouml::notation2::NotationTextEvent" , "selectors" : { "getText()" : 1 , "isBold()" : 1 , "isItalic()" : 1 , "isUnderlined()" : 1}},{ "className" : "org::argouml::uml::diagram::ProjectMemberDiagram" , "selectors" : { "ProjectMemberDiagram(ArgoDiagram,Project)" : 1 , "getDiagram()" : 2 , "setDiagram(ArgoDiagram)" : 1}},{ "className" : "org::argouml::core::propertypanels::ui::UMLAssociationEndTypeComboBoxModel" , "selectors" : { "UMLAssociationEndTypeComboBoxModel(String,Object)" : 1}},{ "className" : "org::argouml::model::euml::CommonBehaviorFactoryEUMLImpl" , "selectors" : { "CommonBehaviorFactoryEUMLImpl(EUMLModelImplementation)" : 1 , "buildLink(Object,Object)" : 1 , "createException()" : 1 , "createNodeInstance()" : 1 , "createObject()" : 1 , "createReception()" : 1 , "createSignal(???)" : 1}},{ "className" : "org::argouml::core::propertypanels::ui::UMLCollaborationInteractionListModel" , "selectors" : { "UMLCollaborationInteractionListModel(Object,String)" : 1}},{ "className" : "org::argouml::uml::cognitive::critics::CrNonAggDataType" , "selectors" : { "CrNonAggDataType()" : 1}},{ "className" : "org::argouml::language::csharp::importer::csparser::nodes::expressions::MemberAccessExpression" , "selectors" : { "MemberAccessExpression(IMemberAccessible,IdentifierExpression)" : 1}},{ "className" : "org::argouml::uml::diagram::deployment::ui::DeploymentDiagramPropPanelFactory" , "selectors" : { "DeploymentDiagramPropPanelFactory()" : 1}},{ "className" : "org::argouml::uml::diagram::static_structure::layout::ClassdiagramGeneralizationEdge" , "selectors" : { "ClassdiagramGeneralizationEdge(???)" : 1}},{ "className" : "org::argouml::core::propertypanels::model::GetterSetterManagerImpl::ParameterGetterSetter" , "selectors" : { "ParameterGetterSetter()" : 1 , "getOptions(Object,Collection<Class<?>>)" : 1}},{ "className" : "org::argouml::ui::explorer::rules::GoModelToBaseElements" , "selectors" : { "GoModelToBaseElements()" : 2}},{ "className" : "org::argouml::kernel::DelayedVChangeListener" , "selectors" : { "delayedVetoableChange(PropertyChangeEvent)" : 1}},{ "className" : "org::argouml::uml::diagram::state::ui::FigSubmachineState" , "selectors" : { "FigSubmachineState(Object,Rectangle,DiagramSettings)" : 2 , "generateSubmachine(Object)" : 2 , "getFigs(???)" : 1 , "getInitialHeight()" : 5 , "getInitialWidth()" : 8 , "getInitialX()" : 8 , "getInitialY()" : 10 , "initFigs()" : 1 , "initFigs()::FigLine" : 1 , "initFigs()::FigRRect" : 3 , "setBigPort(???)" : 1 , "setInternal(???)" : 1 , "setNameFig(???)" : 1 , "updateInclude()" : 2 , "updateListeners(Object,Object)" : 2 , "updateListenersX(Object,Object)" : 1}},{ "className" : "org::argouml::uml::diagram::activity::ui::FigObjectFlowState" , "selectors" : { "FigObjectFlowState(Object,Rectangle,DiagramSettings)" : 1 , "getFigs(???)" : 1 , "initFigs(Rectangle)" : 1 , "initFigs(Rectangle)::FigRect" : 1 , "renderingChanged()" : 2 , "setBigPort(???)" : 1 , "setNameFig(???)" : 1 , "updateListeners(Object,Object)" : 1 , "updateStateText()" : 1}},{ "className" : "org::argouml::notation::providers::uml::NodeInstanceNotationUml" , "selectors" : { "toString(Object)" : 1}},{ "className" : "org::argouml::uml::diagram::activity::layout::ActivityDiagramLayouter" , "selectors" : { "ActivityDiagramLayouter(ArgoDiagram)" : 1 , "placeNodes(List,Object,int)" : 2}},{ "className" : "org::argouml::language::java::cognitive::critics::CrMultipleInheritance" , "selectors" : { "CrMultipleInheritance()" : 1}},{ "className" : "org::argouml::uml::generator::AbstractSection" , "selectors" : { "getSectId(String)" : 4 , "read(String)" : 2 , "write(String,String,boolean)" : 3}},{ "className" : "org::argouml::notation::providers::uml::ObjectFlowStateStateNotationUml" , "selectors" : { "delete(Object)" : 1 , "parseObjectFlowState2(Object,String)" : 1 , "toString(Object)" : 1}},{ "className" : "org::argouml::core::propertypanels::model::GetterSetterManagerImpl::ResidentElementGetterSetter::RemoveCommand" , "selectors" : { "RemoveCommand(Object,Object)" : 1}},{ "className" : "org::argouml::language::csharp::importer::csparser::nodes::expressions::ParenthesizedExpression" , "selectors" : { "ParenthesizedExpression()" : 1 , "ParenthesizedExpression(ExpressionNode)" : 1}},{ "className" : "org::argouml::notation::providers::uml::ModelElementNameNotationUml" , "selectors" : { "generateVisibility(Object)" : 1 , "toString(Object,boolean,boolean,boolean,boolean)" : 1}},{ "className" : "org::argouml::sequence2::diagram::UMLSequenceDiagram" , "selectors" : { "UMLSequenceDiagram()" : 1 , "UMLSequenceDiagram(Object)" : 2 , "getCollaboration()" : 1 , "getMessageActions(List)" : 1 , "makeNewCR(Object)" : 1 , "makeNewFigCR(Object,Point)" : 2}},{ "className" : "org::argouml::model::euml::CoreFactoryEUMLImpl" , "selectors" : { "CoreFactoryEUMLImpl(EUMLModelImplementation)" : 1 , "buildAbstraction(String,Object,Object)::NamedElement" : 1 , "buildAbstraction(String,Object,Object)::anonymous(RunnableClass)" : 1 , "buildAssociation(???)" : 1 , "buildAssociation(Object,Boolean,Object,Object,Boolean,Object,String)::Type" : 1 , "buildAssociation(Object,Boolean,Object,Object,Boolean,Object,String)::anonymous(RunnableClass)" : 1 , "buildAssociationClass(???)" : 1 , "buildAssociationClass(Object,Object)::Type" : 1 , "buildAssociationClass(Object,Object)::anonymous(RunnableClass)" : 1 , "buildAssociationEnd(???)" : 2 , "buildAssociationEndInternal(Association,String,Type,Integer,Stereotype,Boolean,Boolean,AggregationKind,Object,VisibilityKind)::Association" : 1 , "buildClass(???)" : 1 , "buildClass(String,Object)::anonymous(RunnableClass)" : 2 , "buildComment(Object,Object)::anonymous(RunnableClass)" : 1 , "buildComponentRealization(???)" : 1 , "buildComponentRealization(Object,Object)::NamedElement" : 1 , "buildComponentRealization(Object,Object)::anonymous(RunnableClass)" : 1 , "buildConstraint(Object)::Element" : 1 , "buildDataType(String,Object)::anonymous(RunnableClass)" : 2 , "buildDependency(???)" : 1 , "buildDependency(Object,Object)::NamedElement" : 1 , "buildDependency(Object,Object)::anonymous(RunnableClass)" : 1 , "buildEnumeration(String,Object)::anonymous(RunnableClass)" : 2 , "buildGeneralization(???)" : 1 , "buildInterface(???)" : 1 , "buildInterface(String,Object)::anonymous(RunnableClass)" : 2 , "buildManifestation(Object)::PackageableElement" : 1 , "buildPackageImport(???)" : 1 , "buildParameter(Object,Object)::anonymous(RunnableClass)" : 2 , "buildRealization(???)" : 1 , "buildRealization(Object,Object,Object)::anonymous(RunnableClass)" : 1 , "buildUsage(???)" : 1 , "buildUsage(Object,Object)::NamedElement" : 1 , "buildUsage(Object,Object)::anonymous(RunnableClass)" : 1 , "createAttribute(???)" : 2 , "createComment(???)" : 1 , "createComponent(???)" : 1 , "createDataType(???)" : 1 , "createEnumeration(???)" : 1 , "createEnumerationLiteral(???)" : 1 , "createNode(???)" : 1 , "createOperation(???)" : 1 , "createParameter(???)" : 1}},{ "className" : "org::argouml::ui::SystemInfoDialog" , "selectors" : { "SystemInfoDialog(boolean)" : 1 , "copyActionPerformed(ActionEvent)" : 1 , "getInfo()" : 2 , "getSize(???)" : 1 , "runGCActionPerformed(ActionEvent)" : 1 , "setLocationRelativeTo(???)" : 1 , "setSize(???)" : 2 , "setVisible(???)" : 1 , "updateInfo()" : 3}},{ "className" : "org::argouml::uml::diagram::ui::Clarifiable" , "selectors" : { "paintClarifiers(Graphics)" : 3}},{ "className" : "org::argouml::core::propertypanels::ui::UMLGeneralizationParentListModel" , "selectors" : { "UMLGeneralizationParentListModel(Object,String)" : 1}},{ "className" : "org::argouml::core::propertypanels::ui::UMLCallActionOperationComboBoxModel" , "selectors" : { "UMLCallActionOperationComboBoxModel(String,Object)" : 1}},{ "className" : "org::argouml::notation::providers::ModelElementNameNotation" , "selectors" : { "ModelElementNameNotation(Object)" : 3}},{ "className" : "org::argouml::ui::explorer::rules::GoClassToSummary" , "selectors" : { "GoClassToSummary()" : 2 , "hasIncomingDependencies(Object)" : 1 , "hasInheritance(Object)" : 1 , "hasOutGoingDependencies(Object)" : 1}},{ "className" : "org::argouml::notation::providers::uml::AssociationEndNameNotationUml" , "selectors" : { "dealWithDerived(Object,boolean)" : 1 , "parseAssociationEnd(Object,String)" : 1 , "toString(Object,boolean,boolean)" : 1}},{ "className" : "org::argouml::uml::cognitive::critics::ChildGenUML" , "selectors" : { "ChildGenUML()" : 1 , "gen2(Object)" : 1 , "gen2(Object)::Diagram" : 1}},{ "className" : "org::argouml::uml::ui::UMLUserInterfaceComponent" , "selectors" : { "targetChanged()" : 1 , "targetReasserted()" : 1}},{ "className" : "org::argouml::uml::diagram::static_structure::ui::PropPanelUMLClassDiagram" , "selectors" : { "PropPanelUMLClassDiagram()" : 1}},{ "className" : "org::argouml::uml::diagram::state::ui::ButtonActionNewEffect" , "selectors" : { "createEvent(Object)" : 1 , "getIconName()" : 1 , "getKeyName()" : 2 , "isEnabled()" : 1}},{ "className" : "org::argouml::core::propertypanels::model::GetterSetterManagerImpl::ResidentElementGetterSetter::AddCommand" , "selectors" : { "AddCommand(Object)" : 1}},{ "className" : "org::argouml::profile::internal::ProfileManagerImpl" , "selectors" : { "ProfileManagerImpl()" : 1 , "addToDefaultProfiles(Profile)" : 4 , "createUserDefinedProfilesDependencyResolver()" : 1 , "findUserDefinedProfile(File)" : 2 , "getProfileForClass(String)" : 1 , "getRegisteredProfiles()" : 1 , "loadDefaultProfilesfromConfiguration()" : 2 , "loadDirectoriesFromConfiguration()" : 1 , "loadProfiles(List<File>)" : 1 , "lookForRegisteredProfile(String)" : 1 , "refreshRegisteredProfiles()" : 1 , "registerProfileInternal(Profile)" : 7 , "updateDefaultProfilesConfiguration()" : 2 , "updateSearchDirectoriesConfiguration()" : 2}},{ "className" : "org::argouml::uml::ui::SourcePathDialog::SelectionListener" , "selectors" : { "SelectionListener()" : 1}},{ "className" : "org::argouml::model::euml::CollaborationsFactoryEUMLImpl" , "selectors" : { "CollaborationsFactoryEUMLImpl(EUMLModelImplementation)" : 1 , "buildAssociationRole(Object,Object,Object,Object,Boolean)" : 1 , "buildAssociationRole(Object,Object,Object,Object,boolean)" : 2 , "buildCollaboration(Object)::Element" : 1 , "createClassifierRole()" : 1 , "createLifeline(???)" : 1}},{ "className" : "org::argouml::core::propertypanels::ui::UMLSignalContextListModel::ActionRemoveContextSignal" , "selectors" : { "ActionRemoveContextSignal()" : 1}},{ "className" : "org::argouml::core::propertypanels::model::GetterSetterManagerImpl::AbstractGetterSetter" , "selectors" : { "AbstractGetterSetter()" : 1}},{ "className" : "org::argouml::cognitive::Offender" , "selectors" : { "inform(ToDoItem)" : 1}},{ "className" : "org::argouml::uml::cognitive::critics::CrSeqInstanceWithoutClassifier" , "selectors" : { "computeOffenders(ArgoDiagram)" : 3}},{ "className" : "org::argouml::cognitive::ui::AddToDoItemDialog" , "selectors" : { "AddToDoItemDialog(ListCellRenderer)" : 1 , "doAdd()" : 1 , "setVisible(???)" : 1}},{ "className" : "org::argouml::uml::diagram::static_structure::ui::FigSignal" , "selectors" : { "FigSignal(Object,Rectangle,DiagramSettings)" : 2 , "constructFigs(Rectangle)" : 1}},{ "className" : "org::argouml::language::csharp::importer::csparser::members::InterfacePropertyNode" , "selectors" : { "InterfacePropertyNode()" : 1}},{ "className" : "org::argouml::uml::cognitive::critics::CrClassMustBeAbstract" , "selectors" : { "CrClassMustBeAbstract()" : 1}},{ "className" : "org::argouml::uml::ui::ActionLayout" , "selectors" : { "ActionLayout()" : 1}},{ "className" : "org::argouml::language::csharp::importer::csparser::structural::NamespaceNode" , "selectors" : { "NamespaceNode()" : 2 , "ToSource(StringBuilder)" : 1}},{ "className" : "org::argouml::language::php::generator::ModulePHP4" , "selectors" : { "ModulePHP4(int)" : 2 , "getInfo(int)" : 3 , "getName()" : 1 , "logModuleInfo()" : 1 , "logModuleInfo(int)" : 1}},{ "className" : "org::argouml::profile::internal::ocl::EvaluateExpression" , "selectors" : { "EvaluateExpression(Map<String,Object>,ModelInterpreter)" : 1 , "EvaluateExpression(Object,ModelInterpreter)" : 1 , "asBoolean(Object,Object)" : 12 , "asInteger(Object,Object)" : 17 , "caseAActualParameterList(AActualParameterList)::PActualParameterListTail" : 1 , "caseAFeatureCallParameters(AFeatureCallParameters)::AActualParameterList" : 1 , "caseAFeatureCallParameters(AFeatureCallParameters)::anonymous(LambdaEvaluator)" : 1 , "caseAListExpressionListOrRangeTail(AListExpressionListOrRangeTail)::PExpressionListTail" : 1 , "caseAStandardDeclarator(AStandardDeclarator)::ADeclaratorTail" : 1 , "caseAStandardDeclarator(AStandardDeclarator)::PDeclaratorTail" : 1 , "error(Object)" : 8 , "errorNotType(Object,String,Object)" : 2 , "getValue()" : 2 , "loadState(Object)" : 1 , "reset(Map<String,Object>,ModelInterpreter)" : 2 , "reset(Object,ModelInterpreter)" : 2 , "runFeatureCall(Object,Object,Object,List)" : 2 , "saveState()" : 1}},{ "className" : "org::argouml::uml::diagram::static_structure::ui::FigAttribute" , "selectors" : { "FigAttribute(Object,Rectangle,DiagramSettings)" : 1}},{ "className" : "org::argouml::language::csharp::importer::csparser::nodes::expressions::CheckedExpression" , "selectors" : { "CheckedExpression(ExpressionNode)" : 1}},{ "className" : "org::argouml::language::sql::ModelValidator" , "selectors" : { "ModelValidator()" : 1 , "validate(Collection)" : 1 , "validateAssociation(Object)" : 1 , "validateAssociations(Object)" : 1 , "validateFkAttribute(Object,Object)" : 1 , "validateFkAttributes(Object)" : 1 , "validateFkConsistence(Object,Object,int)" : 1 , "validatePrimaryKey(Object)" : 1 , "validateRelation(Object)" : 1}},{ "className" : "org::argouml::sequence2::diagram::SequenceDiagramGraphModel" , "selectors" : { "SequenceDiagramGraphModel()" : 1 , "addEdge(Object)" : 2 , "canAddEdge(Object)" : 1 , "canAddNode(Object)" : 1 , "connectMessage(Object,Object,Object)" : 2 , "createMessage1(Object,Object,Object)" : 1 , "createMessage2(Object,Object,Object)" : 1 , "getCollaboration()" : 5 , "getInteraction()" : 2 , "getOwner()" : 1 , "setCollaboration(Object)" : 3}},{ "className" : "org::argouml::sequence2::diagram::ModeBroomMessages" , "selectors" : { "getAllFigMessages()" : 1 , "getAllFigMessagesDownward(int)" : 1}},{ "className" : "org::argouml::sequence2::diagram::SequenceDiagramRenderer" , "selectors" : { "SequenceDiagramRenderer()" : 1 , "getFigEdgeFor(GraphModel,Layer,Object,Map)::LayerPerspective" : 1 , "getFigNodeFor(GraphModel,Layer,Object,Map)::LayerPerspective" : 1}},{ "className" : "org::argouml::uml::diagram::state::ui::FigState" , "selectors" : { "FigState(Object,Rectangle,DiagramSettings)" : 4 , "createBigPortFig()::FigRRect" : 1 , "getEnclosedFigs(???)" : 1 , "getInitialHeight()" : 2 , "getInitialWidth()" : 3 , "getInitialX()" : 3 , "getInitialY()" : 4 , "initializeState()" : 1 , "initializeState()::FigText" : 1 , "modelChanged(PropertyChangeEvent)" : 2 , "renderingChanged()" : 3}},{ "className" : "org::argouml::uml::diagram::state::ui::FigCompositeState" , "selectors" : { "FigCompositeState(Object,Rectangle,DiagramSettings)" : 3 , "addEnclosedFig(???)" : 1 , "getBounds(???)" : 2 , "getEnclosedFigs()::TreeMap" : 3 , "getEnclosedFigs()::Vector" : 1 , "getEnclosedFigs(???)" : 1 , "getFigs(???)" : 1 , "getInitialHeight()" : 2 , "getInitialWidth()" : 2 , "getInitialX()" : 2 , "getInitialY()" : 3 , "initFigs()" : 1 , "initFigs()::FigRRect" : 1 , "isConcurrent()" : 3 , "setBigPort(???)" : 1 , "setBounds(???)" : 2 , "setCompositeStateHeight(int)" : 1 , "setInternal(???)" : 1 , "setNameFig(???)" : 1}},{ "className" : "org::argouml::ui::SettingsDialog" , "selectors" : { "SettingsDialog()" : 1 , "handleCancel()" : 2 , "handleOpen()" : 2 , "handleRefresh()" : 1 , "handleSave()" : 2}},{ "className" : "org::argouml::ui::cmd::GenericArgoMenuBar" , "selectors" : { "addFileSaved(String)" : 1 , "getCreateDiagramMenu()" : 16 , "getCreateDiagramToolbar()" : 22 , "getEditToolbar()" : 4 , "getEditToolbar()::ToolBarFactory" : 1 , "getFileToolbar()" : 4 , "getViewToolbar()" : 4 , "getViewToolbar()::ToolBarFactory" : 1 , "initActions()" : 1 , "initAlignMenu(JMenu)" : 1 , "initDistributeMenu(JMenu)" : 1 , "initMenuArrange()" : 1 , "initMenuCreate()" : 3 , "initMenuCreate()::ToolBarFactory" : 1 , "initMenuCritique()" : 1 , "initMenuEdit()" : 1 , "initMenuFile()" : 1 , "initMenuFile()::ToolBarFactory" : 1 , "initMenuGeneration()" : 1 , "initMenuHelp()" : 1 , "initMenuTools()" : 1 , "initMenuView()" : 1 , "initMenus()" : 1 , "initModulesActions()" : 1 , "initModulesMenus()" : 1 , "initModulesUI()" : 1 , "initReorderMenu(JMenu)" : 1 , "menuLocalize(String)" : 14 , "prepareKey(String)" : 7 , "registerForMacEvents()" : 1 , "setMnemonic(JMenuItem,String)" : 94 , "setTarget()" : 4}},{ "className" : "org::argouml::uml::diagram::ui::StatusBarAdapter" , "selectors" : { "StatusBarAdapter()" : 1}},{ "className" : "org::argouml::uml::ui::SaveGraphicsManager" , "selectors" : { "SaveGraphicsManager()" : 1 , "adjustDrawingArea(Rectangle)" : 2 , "fixExtension(String)" : 1 , "getDefaultSuffix()" : 4 , "getFilterFromFileName(String)" : 2 , "getInstance()" : 8 , "getSaveActionBySuffix(???)" : 2 , "getSaveActionBySuffix(String)::SaveGIFAction" : 1 , "getSaveActionBySuffix(String)::SavePSAction" : 1 , "getSaveActionBySuffix(String)::SaveSVGAction" : 1 , "getSettingsList()" : 1 , "setDefaultFilter(SuffixFilter)" : 2 , "setDefaultFilterBySuffix(String)" : 1 , "setFileChooserFilters(JFileChooser,String)" : 1}},{ "className" : "org::argouml::cognitive::checklist::ui::TableModelChecklist" , "selectors" : { "TableModelChecklist(TabChecklist)" : 1 , "setTarget(Object)" : 1}},{ "className" : "org::argouml::persistence::SAXParserBase" , "selectors" : { "SAXParserBase()" : 1 , "createXmlElement(String,Attributes)" : 1 , "getJarResource(String)" : 1 , "handleEndElement(XMLElement)" : 1 , "handleStartElement(XMLElement)" : 1 , "isElementOfInterest(String)" : 2 , "parse(InputSource)" : 4 , "parse(Reader)" : 2}},{ "className" : "org::argouml::core::propertypanels::ui::UMLStateMachineContextComboBoxModel::ActionSetContextStateMachine" , "selectors" : { "ActionSetContextStateMachine()" : 1}},{ "className" : "org::argouml::core::propertypanels::model::GetterSetterManagerImpl::TargetScopeGetterSetter" , "selectors" : { "TargetScopeGetterSetter()" : 1}},{ "className" : "org::argouml::core::propertypanels::ui::NavigateUpAction" , "selectors" : { "NavigateUpAction(Object)" : 1}},{ "className" : "org::argouml::kernel::ProjectImpl" , "selectors" : { "ProjectImpl()" : 2 , "ProjectImpl(int)" : 3 , "ProjectImpl(int,URI)" : 1 , "addDiagram(ArgoDiagram)" : 1 , "addDiagramMember(ArgoDiagram)" : 1 , "addMember(Object)" : 1 , "addModel(Object)" : 2 , "addModelInternal(Object)" : 1 , "addModelMember(Object)" : 2 , "addSearchPath(String)" : 1 , "addTodoMember(ProjectMemberTodoList)" : 1 , "checkProfileFor(Object,Object)" : 1 , "emptyTrashCan()" : 1 , "findType(String,boolean)" : 1 , "findTypeInDefaultModel(String)" : 1 , "findTypeInModel(String,Object)" : 1 , "getCurrentNamespace()" : 1 , "getDiagram(String)" : 1 , "getDiagramCount()" : 1 , "getModel()" : 1 , "getProfileConfiguration()" : 2 , "getRoot()" : 1 , "isValidDiagramName(String)" : 1 , "moveToTrash(Object)" : 1 , "removeDiagram(ArgoDiagram)" : 1 , "removeProjectMemberDiagram(ArgoDiagram)" : 1 , "setCurrentNamespace(Object)" : 1 , "setProfileConfiguration(ProfileConfiguration)" : 1 , "setRoot(Object)" : 3 , "setSaveEnabled(boolean)" : 6 , "trashInternal(Object)" : 2 , "trashInternal(Object)::Fig" : 1}},{ "className" : "org::argouml::model::mdr::XmiReferenceResolverImpl" , "selectors" : { "XmiReferenceResolverImpl(???)" : 1 , "clearIdMaps()" : 1 , "findModelUrlOnClasspath(String)" : 1 , "findModuleURL(String)" : 1 , "fixupURL(String)" : 2 , "getIdToObjectMap()" : 2 , "getIdToObjectMaps()" : 2 , "getSuffix(String)" : 2 , "getValidURL(String)" : 3}},{ "className" : "org::argouml::uml::diagram::DiagramElementSettings" , "selectors" : { "DiagramElementSettings(Object)" : 1 , "getOwner()" : 1}},{ "className" : "org::argouml::cognitive::checklist::ui::TabChecklist" , "selectors" : { "TabChecklist()" : 1 , "findTarget(Object)" : 2 , "resizeColumns()" : 3 , "setTarget(Object)" : 3 , "setTargetInternal(Object)" : 3}},{ "className" : "org::argouml::persistence::ResolvedCriticXMLHelper" , "selectors" : { "ResolvedCriticXMLHelper(ResolvedCritic)" : 1}},{ "className" : "org::argouml::ui::ProjectBrowser" , "selectors" : { "ProjectBrowser(String,SplashScreen,boolean,JPanel)" : 2 , "addFileSaved(File)" : 3 , "addKeyboardFocusListener()" : 1 , "addPanel(Component,Position)" : 4 , "askConfirmationAndSave()" : 5 , "assemblePanels()" : 1 , "assemblePanels()::DockBorderLayout" : 1 , "buildTitleWithCurrentProjectName()" : 1 , "clearDialogs()" : 3 , "createDetailsPanes()" : 1 , "createPanels(SplashScreen,JPanel)" : 1 , "createPanels(SplashScreen,JPanel)::BorderSplitPane" : 1 , "determineRemoveEnabled()" : 1 , "exit()" : 2 , "getAppName()" : 2 , "getDetailsPane()" : 1 , "getEditorPane()" : 2 , "getInstance()" : 40 , "getJMenuBar()" : 1 , "getNewFile()" : 1 , "getSaveAction()" : 4 , "getSavedDimensions(ConfigurationKey,ConfigurationKey)" : 4 , "getSavedHeight(ConfigurationKey)" : 3 , "getSavedWidth(ConfigurationKey)" : 3 , "getStatusBar()" : 1 , "getTab(Class)" : 1 , "getTodoPane()" : 1 , "isFileReadonly(File)" : 2 , "loadProject(File,boolean,ProgressMonitor)" : 3 , "loadProject2(File,boolean,ProgressMonitor)" : 2 , "loadProjectWithProgressMonitor(File,boolean)" : 4 , "makeInstance(SplashScreen,boolean,JPanel)" : 1 , "reportError(ProgressMonitor,String,String,boolean)" : 2 , "reportError(ProgressMonitor,String,boolean)" : 6 , "reportError(ProgressMonitor,String,boolean,Throwable)" : 6 , "restorePanelSizes()" : 1 , "saveScreenConfiguration()" : 1 , "setAppName(String)" : 1 , "setApplicationIcon()" : 1 , "setToDoItem(Object)" : 1 , "showSaveIndicator()" : 1 , "targetChanged(Object)" : 3 , "testSimulateErrors()" : 1 , "tryExit()" : 3 , "trySave(File,ProgressMonitor,Project)" : 2 , "trySave(boolean)" : 2 , "trySave(boolean,boolean)" : 2 , "trySave(boolean,boolean,boolean)" : 2 , "trySaveWithProgressMonitor(boolean,File,boolean)" : 3 , "updateStatus(String)" : 2}},{ "className" : "org::argouml::cognitive::ui::GoListToGoalsToItems" , "selectors" : { "GoListToGoalsToItems()" : 2 , "getChildCount(Object)" : 1 , "getGoalList()" : 3}},{ "className" : "org::argouml::uml::ui::foundation::core::ActionSetChangeability" , "selectors" : { "ActionSetChangeability()" : 1 , "getInstance()" : 2}},{ "className" : "org::argouml::core::propertypanels::ui::ActionNewAction" , "selectors" : { "createAction()" : 1}},{ "className" : "org::argouml::ui::cmd::ActionAdjustGrid" , "selectors" : { "ActionAdjustGrid(Map<String,Comparable>,String)" : 1 , "buildGridAction(String,int,boolean,boolean,String,int)" : 5 , "createAdjustGridActions(boolean)" : 3 , "init()" : 1 , "setGroup(ButtonGroup)" : 1}},{ "className" : "org::argouml::model::CoreFactory" , "selectors" : { "buildAbstraction(String,Object,Object)" : 2 , "buildAssociation(Object,boolean,Object,boolean,String)" : 2 , "buildAttribute2(Object,Object)" : 6 , "buildClass()" : 2 , "buildClass(Object)" : 4 , "buildClass(String)" : 2 , "buildClass(String,Object)" : 22 , "buildComment(Object,Object)" : 1 , "buildConstraint(Object)" : 1 , "buildConstraint(String,Object)" : 1 , "buildDataType(String,Object)" : 7 , "buildDependency(Object,Object)" : 4 , "buildElementResidence(Object,Object)" : 2 , "buildEnumeration(String,Object)" : 2 , "buildEnumerationLiteral(String,Object)" : 3 , "buildGeneralization(Object,Object)" : 3 , "buildInterface()" : 1 , "buildInterface(String,Object)" : 12 , "buildManifestation(Object)" : 1 , "buildMethod(String)" : 2 , "buildOperation(Object,Object)" : 3 , "buildOperation2(Object,Object,String)" : 6 , "buildParameter(Object,Object)" : 9 , "buildRealization(Object,Object,Object)" : 1 , "buildTemplateParameter(Object,Object,Object)" : 2 , "copyClass(Object,Object)" : 1 , "copyDataType(Object,Object)" : 1 , "copyFeature(Object,Object)" : 1 , "copyInterface(Object,Object)" : 1 , "createArtifact()" : 1 , "createClass()" : 5 , "createComment()" : 1 , "createComponent()" : 3 , "createConstraint()" : 4 , "createElementResidence()" : 2 , "createEnumeration()" : 1 , "createEnumerationLiteral()" : 1 , "createInterface()" : 4 , "createNode()" : 1 , "createParameter()" : 2}},{ "className" : "org::argouml::core::propertypanels::model::PanelData" , "selectors" : { "PanelData(Class<?>,String,Collection<Class<?>>,Collection<Class<?>>,boolean)" : 1 , "addControlData(ControlData)" : 1 , "getNewChildElements()" : 1 , "getNewSiblingElements()" : 1 , "getProperties()" : 1 , "isSiblingNavigation()" : 1}},{ "className" : "org::argouml::language::csharp::importer::csparser::collections::TokenCollection" , "selectors" : { "TokenCollection()" : 1}},{ "className" : "org::argouml::core::propertypanels::ui::UMLGeneralizableElementSpecializationListModel" , "selectors" : { "UMLGeneralizableElementSpecializationListModel(Object)" : 1}},{ "className" : "org::argouml::uml::diagram::activity::ui::PropPanelUMLActivityDiagram" , "selectors" : { "PropPanelUMLActivityDiagram()" : 1}},{ "className" : "org::argouml::uml::ui::SaveGraphicsManager::FileFilterChangedListener::Anonymous1" , "selectors" : { "Anonymous1(String)" : 1}},{ "className" : "org::argouml::language::php::PHPDocumentor::SeeTag" , "selectors" : { "SeeTag()" : 1}},{ "className" : "org::argouml::persistence::PrivateHandler" , "selectors" : { "PrivateHandler(???)" : 1 , "getItemUID(String)" : 3 , "gotElement(String)::FigGroupHandler" : 1 , "splitNameVal(String)" : 1}},{ "className" : "org::argouml::persistence::XmlInputStream" , "selectors" : { "XmlInputStream(InputStream,String,long,long)" : 1 , "isLastTag(int)" : 1 , "isNameTerminator(char)" : 2 , "read()" : 1 , "readAttributes()" : 1 , "realClose()" : 1 , "realRead()" : 12 , "reopen(String)" : 2 , "skipToTag()" : 2}},{ "className" : "org::argouml::profile::UserProfileReference" , "selectors" : { "UserProfileReference(String)" : 1 , "UserProfileReference(String,URL)" : 2}},{ "className" : "org::argouml::model::euml::UmlHelperEUMLImpl" , "selectors" : { "UmlHelperEUMLImpl(EUMLModelImplementation)" : 1 , "getDestination(Object)::ActivityEdge" : 1 , "getSource(Object)::ActivityEdge" : 1 , "newPosition(int,int,Direction)" : 7}},{ "className" : "org::argouml::uml::ui::SourcePathTableModel" , "selectors" : { "SourcePathTableModel(SourcePathController)" : 1 , "getMEName(int)" : 1 , "getMESourcePath(int)" : 1 , "getMEType(int)" : 1 , "getModelElement(int)" : 2}},{ "className" : "org::argouml::profile::internal::ModelUtils" , "selectors" : { "findTypeInModel(String,Object)" : 1}},{ "className" : "org::argouml::uml::reveng::idl::ParseState" , "selectors" : { "ParseState(Object,Object)" : 1 , "ParseState(ParseState,Object,Object)" : 1 , "addClassifierContext(Object)" : 1 , "addComponent(Object)" : 2 , "addPackageContext(Object)" : 2 , "anonymousClass()" : 1 , "feature(Object)" : 2 , "getAttribute(String)" : 1 , "getClassifier()" : 13 , "getComponent()" : 6 , "getContext()" : 1 , "getMethod(String)" : 1 , "getOperation(String)" : 1 , "innerClassifier(Object)" : 1 , "outerClassifier()" : 1 , "removeObsoleteFeatures()" : 1 , "removeObsoleteInnerClasses()" : 1}},{ "className" : "org::argouml::activity2::diagram::FigNamedRRect::RRect" , "selectors" : { "RRect(int,int,int,int,Color,Color)" : 1}},{ "className" : "org::argouml::core::propertypanels::model::GetterSetterManagerImpl::RaisedExceptionGetterSetter" , "selectors" : { "RaisedExceptionGetterSetter()" : 2 , "getOptions(Object,Collection<Class<?>>)" : 1}},{ "className" : "org::argouml::application::api::GUISettingsTabInterface" , "selectors" : { "getTabKey()" : 2 , "getTabPanel()" : 2 , "handleResetToDefault()" : 1 , "handleSettingsTabCancel()" : 2 , "handleSettingsTabRefresh()" : 2 , "handleSettingsTabSave()" : 2}},{ "className" : "org::argouml::state2::diagram::FigExitPoint" , "selectors" : { "FigExitPoint(Object,Rectangle,DiagramSettings)" : 1}},{ "className" : "org::argouml::util::ExprSeparatorWithStrings" , "selectors" : { "ExprSeparatorWithStrings()" : 1}},{ "className" : "org::argouml::uml::diagram::ui::ActionSetAddAssociationEndMode" , "selectors" : { "ActionSetAddAssociationEndMode(String)" : 1}},{ "className" : "org::argouml::deployment2::DeploymentDiagramPropPanelFactory" , "selectors" : { "DeploymentDiagramPropPanelFactory()" : 1}},{ "className" : "org::argouml::model::mdr::XmiReaderImpl" , "selectors" : { "XmiReaderImpl(MDRModelImplementation)" : 2 , "copySource(InputSource)" : 1 , "getTempXMIFileURIPrefix()" : 2 , "parse(InputSource,boolean)" : 1 , "parse(InputSource,boolean)::InputConfig" : 1 , "parse(InputSource,boolean)::MalformedXMIException" : 1 , "serialTransform(String[],InputSource)" : 1}},{ "className" : "org::argouml::core::propertypanels::ui::UMLContainerResidentListModel" , "selectors" : { "UMLContainerResidentListModel(Object)" : 1}},{ "className" : "org::argouml::uml::ui::behavior::state_machines::ActionNewSimpleState" , "selectors" : { "ActionNewSimpleState()" : 1}},{ "className" : "org::argouml::uml::diagram::deployment::ui::FigObject" , "selectors" : { "FigObject(Object,Rectangle,DiagramSettings)" : 4 , "createBigPortFig()::FigRect" : 1 , "getEnclosingFig(???)" : 1 , "getFigs(???)" : 1 , "getMinimumSize()" : 1 , "initFigs()" : 1 , "initFigs()::FigRect" : 1 , "setBigPort(???)" : 1 , "setNameFig(???)" : 1}},{ "className" : "org::argouml::uml::diagram::ui::FigTrace" , "selectors" : { "FigTrace()" : 1 , "FigTrace()::ArrowHeadTriangle" : 1}},{ "className" : "org::argouml::uml::ui::SourcePathControllerImpl" , "selectors" : { "SourcePathControllerImpl()" : 1 , "getSourcePath(Object)" : 1 , "setSourcePath(Object,File)" : 1}},{ "className" : "org::argouml::ui::targetmanager::TargetManager::HistoryManager" , "selectors" : { "HistoryManager()" : 1 , "clean()" : 1 , "navigateBackPossible()" : 1 , "navigateBackward()" : 1 , "navigateForward()" : 1 , "navigateForwardPossible()" : 1 , "putInHistory(Object)" : 2 , "putInHistory(Object)::Fig" : 2 , "removeHistoryTarget(Object)" : 4 , "removeHistoryTarget(Object)::Diagram" : 2 , "removeHistoryTarget(Object)::Fig" : 1 , "resize()" : 1}},{ "className" : "org::argouml::uml::diagram::ui::FigNameWithAbstract" , "selectors" : { "FigNameWithAbstract(Object,Rectangle,DiagramSettings,boolean)" : 2 , "getFigFontStyle()" : 1}},{ "className" : "org::argouml::core::propertypanels::ui::RadioButtonPanel::SetAction" , "selectors" : { "SetAction(GetterSetterManager,Object,String)" : 1}},{ "className" : "com::nwalsh::xalan::ImageIntrinsics" , "selectors" : { "parseBox(String)" : 2}},{ "className" : "org::argouml::gefext::ArgoFigLine" , "selectors" : { "ArgoFigLine(int,int,int,int)" : 1}},{ "className" : "org::argouml::persistence::ZargoFilePersister" , "selectors" : { "containsProfile(File)" : 1 , "containsTodo(File)" : 1 , "copyArgo(File,String,PrintWriter)" : 1 , "copyDiagrams(File,String,PrintWriter)" : 1 , "copyMember(File,String,String,PrintWriter)" : 2 , "copyXmi(File,String,PrintWriter)" : 1 , "getEntryNames(File,String)" : 7 , "getPgmlCount(File)" : 1 , "loadFromZargo(File,ProgressMgr)" : 1 , "makeZipEntryUrl(URL,String)" : 5 , "openZipStreamAt(URL,String)" : 3 , "readerToWriter(Reader,Writer)" : 3 , "toURL(File)" : 9 , "zargoToUml(File,ProgressMgr)" : 1}},{ "className" : "org::argouml::cognitive::ui::InitCognitiveUI" , "selectors" : { "InitCognitiveUI()" : 1}},{ "className" : "org::argouml::model::euml::StateMachinesHelperEUMLImpl" , "selectors" : { "StateMachinesHelperEUMLImpl(EUMLModelImplementation)" : 1 , "addSubvertex(Object,Object)::Vertex" : 1 , "getDestination(Object)" : 1 , "getDestination(Object)::Transition" : 1 , "getRegions(Object)::State" : 1 , "getRegions(Object)::StateMachine" : 1 , "getSource(Object)" : 1 , "getSource(Object)::Transition" : 1 , "getStateMachine(Object)" : 1 , "getTransitions(Object,boolean)::StateMachine" : 1 , "isTopState(Object)::State" : 1 , "setContainer(Object,Object)::State" : 1}},{ "className" : "org::argouml::ui::explorer::PerspectiveManager" , "selectors" : { "PerspectiveManager()" : 1 , "addAllPerspectives(Collection<ExplorerPerspective>)" : 1 , "addListener(PerspectiveManagerListener)" : 1 , "addPerspective(ExplorerPerspective)" : 3 , "appendArrays(T[],T[])" : 2 , "getDefaultPerspectives()" : 2 , "getInstance()" : 8 , "getPerspectives()" : 4 , "getRules()" : 1 , "loadDefaultPerspectives()" : 2 , "loadRules()" : 1 , "loadUserPerspectives()" : 1 , "removeAllPerspectives()" : 1 , "removePerspective(ExplorerPerspective)" : 1 , "saveUserPerspectives()" : 1 , "toString()" : 1}},{ "className" : "org::argouml::core::propertypanels::ui::UMLActivityGraphContextComboBoxModel" , "selectors" : { "UMLActivityGraphContextComboBoxModel(String,Object)" : 1}},{ "className" : "org::argouml::profile::URLModelLoader" , "selectors" : { "URLModelLoader()" : 1 , "loadModel(ProfileReference)" : 1 , "loadModel(URL,URL)" : 3 , "makeZipEntryUrl(URL,String)" : 1}},{ "className" : "org::argouml::language::csharp::importer::csparser::nodes::expressions::AssignmentExpression" , "selectors" : { "AssignmentExpression(int,ExpressionNode,ExpressionNode)" : 1}},{ "className" : "org::argouml::util::LineSeparator" , "selectors" : { "LineSeparator()" : 1}},{ "className" : "org::argouml::uml::diagram::static_structure::ui::StylePanelFigClass" , "selectors" : { "refresh()" : 1}},{ "className" : "org::argouml::model::AbstractCoreHelperDecorator" , "selectors" : { "AbstractCoreHelperDecorator(CoreHelper)" : 1 , "addAllStereotypes(Object,Collection)" : 1 , "addAnnotatedElement(Object,Object)" : 1 , "addClient(Object,Object)" : 1 , "addClientDependency(Object,Object)" : 1 , "addComment(Object,Object)" : 1 , "addConnection(Object,Object)" : 1 , "addConnection(Object,int,Object)" : 1 , "addConstraint(Object,Object)" : 1 , "addDeploymentLocation(Object,Object)" : 1 , "addElementResidence(Object,Object)" : 1 , "addFeature(Object,Object)" : 1 , "addFeature(Object,int,Object)" : 1 , "addLink(Object,Object)" : 1 , "addLiteral(Object,int,Object)" : 1 , "addManifestation(Object,Object)" : 1 , "addMethod(Object,Object)" : 1 , "addOwnedElement(Object,Object)" : 1 , "addParameter(Object,Object)" : 1 , "addParameter(Object,int,Object)" : 1 , "addQualifier(Object,int,Object)" : 1 , "addRaisedSignal(Object,Object)" : 1 , "addSourceFlow(Object,Object)" : 1 , "addStereotype(Object,Object)" : 1 , "addSupplier(Object,Object)" : 1 , "addSupplierDependency(Object,Object)" : 1 , "addTargetFlow(Object,Object)" : 1 , "addTemplateParameter(Object,Object)" : 1 , "addTemplateParameter(Object,int,Object)" : 1 , "clearStereotypes(Object)" : 1 , "getComponent()" : 23 , "removeAnnotatedElement(Object,Object)" : 1 , "removeClientDependency(Object,Object)" : 1 , "removeConnection(Object,Object)" : 1 , "removeConstraint(Object,Object)" : 1 , "removeDeploymentLocation(Object,Object)" : 1 , "removeElementResidence(Object,Object)" : 1 , "removeFeature(Object,Object)" : 1 , "removeLiteral(Object,Object)" : 1 , "removeOwnedElement(Object,Object)" : 1 , "removeParameter(Object,Object)" : 1 , "removeQualifier(Object,Object)" : 1 , "removeSourceFlow(Object,Object)" : 1 , "removeStereotype(Object,Object)" : 1 , "removeSupplierDependency(Object,Object)" : 1 , "removeTargetFlow(Object,Object)" : 1 , "removeTemplateArgument(Object,Object)" : 1 , "removeTemplateParameter(Object,Object)" : 1 , "setAnnotatedElements(Object,Collection)" : 1 , "setAssociation(Object,Object)" : 1 , "setAttributes(Object,List)" : 1 , "setBody(Object,Object)" : 1 , "setChild(Object,Object)" : 1 , "setConnections(Object,Collection)" : 1 , "setContainer(Object,Object)" : 1 , "setDefaultElement(Object,Object)" : 1 , "setDefaultValue(Object,Object)" : 1 , "setDiscriminator(Object,String)" : 1 , "setEnumerationLiterals(Object,List)" : 1 , "setFeature(Object,int,Object)" : 1 , "setFeatures(Object,Collection)" : 1 , "setInitialValue(Object,Object)" : 1 , "setModelElementContainer(Object,Object)" : 1 , "setNamespace(Object,Object)" : 1 , "setOperations(Object,List)" : 1 , "setOwner(Object,Object)" : 1 , "setParameters(Object,Collection)" : 1 , "setParent(Object,Object)" : 1 , "setQualifiers(Object,List)" : 1 , "setRaisedSignals(Object,Collection)" : 1 , "setResident(Object,Object)" : 1 , "setResidents(Object,Collection)" : 1 , "setSources(Object,Collection)" : 1 , "setSpecifications(Object,Collection)" : 1 , "setStatic(Object,boolean)" : 1 , "setTaggedValue(Object,String,String)" : 1 , "setType(Object,Object)" : 1}},{ "className" : "org::argouml::model::mdr::KindsMDRImpl" , "selectors" : { "KindsMDRImpl(MDRModelImplementation)" : 1}},{ "className" : "org::argouml::profile::ZipModelLoader" , "selectors" : { "openZipStreamAt(URL,String)" : 1}},{ "className" : "org::argouml::cognitive::Agency" , "selectors" : { "Agency()" : 1 , "addCritic(Critic)" : 3 , "applyAllCritics(Object,Designer)" : 2 , "applyAllCritics(Object,Designer,long)" : 1 , "applyCritics(Object,Designer,Collection<Critic>,long)" : 2 , "criticListForSpecificClass(Class)" : 1 , "criticsForClass(Class)" : 3 , "determineActiveCritics(Designer)" : 2 , "getCriticList()" : 1 , "getCriticRegistry()" : 2 , "notifyStaticObservers(Object)" : 1 , "register(Critic,Class)" : 2 , "register(Critic,Object)" : 7 , "theAgency()" : 4}},{ "className" : "org::argouml::deployment2::diagram::DeploymentDiagramFactory" , "selectors" : { "DeploymentDiagramFactory()" : 1}},{ "className" : "org::argouml::uml::cognitive::critics::WizManyNames" , "selectors" : { "setModelElements(List)" : 1}},{ "className" : "org::argouml::uml::reveng::ui::ProblemsDialog" , "selectors" : { "disposeDialog()" : 2}},{ "className" : "org::argouml::ui::GridBagUtils" , "selectors" : { "buttonConstraints(int,int,int,int)" : 1 , "captionConstraints(int,int)" : 2 , "captionConstraints(int,int,int)" : 1 , "captionConstraints(int,int,int,int,int)" : 3 , "clientAlignConstraints(int,int)" : 1 , "clientAlignConstraints(int,int,int,int)" : 3 , "createConstraints(int,int,int,int)" : 5 , "textAreaConstraints(int,int,int,int)" : 1 , "textFieldConstraints(int,int,int,int)" : 1}},{ "className" : "org::argouml::cognitive::StandardCM" , "selectors" : { "StandardCM()" : 1}},{ "className" : "org::argouml::ui::TreeModelComposite" , "selectors" : { "TreeModelComposite(String)" : 1 , "getChild(Object,int)" : 1 , "getChildCount(Object)" : 1 , "getIndexOfChild(Object,Object)" : 1 , "getRoot()" : 4 , "setRoot(Object)" : 1}},{ "className" : "org::argouml::uml::ui::foundation::core::ActionSetAssociationEndOrdering" , "selectors" : { "ActionSetAssociationEndOrdering()" : 1 , "getInstance()" : 1}},{ "className" : "org::argouml::uml::diagram::ui::ActionModifierLeaf" , "selectors" : { "ActionModifierLeaf(Object)" : 1 , "valueOfTarget(Object)" : 1}},{ "className" : "org::argouml::uml::cognitive::critics::CrMultiComposite" , "selectors" : { "CrMultiComposite()" : 1}},{ "className" : "org::argouml::language::csharp::importer::csparser::statements::StatementNode" , "selectors" : { "StatementNode()" : 1 , "ToSource(StringBuilder)" : 1}},{ "className" : "org::argouml::uml::ui::foundation::extension_mechanisms::UMLTagDefinitionComboBoxModel" , "selectors" : { "UMLTagDefinitionComboBoxModel()" : 1 , "addAllUniqueModelElementsFrom(Set,Set<List<String>>,Collection)" : 2 , "getApplicableTagDefinitions(Object)" : 1}},{ "className" : "org::argouml::uml::diagram::ui::SelectionClassifierBox" , "selectors" : { "mouseEntered(???)" : 2 , "onButtonClicked(Object)" : 1}},{ "className" : "org::argouml::model::euml::DataTypesFactoryEUMLImpl" , "selectors" : { "DataTypesFactoryEUMLImpl(EUMLModelImplementation)" : 1 , "boundToString(int)" : 3}},{ "className" : "org::argouml::uml::ui::ActionSaveProjectAs" , "selectors" : { "ActionSaveProjectAs()" : 2}},{ "className" : "org::argouml::uml::ui::UMLStereotypeListModel" , "selectors" : { "UMLStereotypeListModel(String)" : 2 , "addAll(Collection)" : 3 , "addElement(Object)" : 5 , "addOtherModelEventListeners(Object)" : 1 , "buildModelList()" : 1 , "contains(Object)" : 5 , "fireIntervalAdded(Object,int,int)" : 2 , "getChangedElement(PropertyChangeEvent)" : 16 , "getTarget()" : 8 , "isValidElement(Object)" : 2 , "isValidEvent(PropertyChangeEvent)" : 2 , "rebuildModelList()" : 2 , "removeOtherModelEventListeners(Object)" : 1 , "setTarget(Object)" : 4 , "setTarget(Object)::Fig" : 1}},{ "className" : "org::argouml::core::propertypanels::ui::UMLExtendedElementsListModel" , "selectors" : { "UMLExtendedElementsListModel(Object)" : 1}},{ "className" : "org::argouml::core::propertypanels::model::GetterSetterManagerImpl::MethodExpressionGetterSetter" , "selectors" : { "MethodExpressionGetterSetter()" : 1}},{ "className" : "org::argouml::core::propertypanels::model::GetterSetterManagerImpl::OrderingGetterSetter" , "selectors" : { "OrderingGetterSetter()" : 1}},{ "className" : "com::nwalsh::saxon::UnwrapLinksEmitter::StartElementInfo" , "selectors" : { "StartElementInfo(int,Attributes,int[],int)" : 1 , "getAttributes()" : 1 , "getNSCount()" : 1 , "getNameCode()" : 2 , "getNamespaces()" : 1}},{ "className" : "org::argouml::core::propertypanels::ui::RadioButtonPanel" , "selectors" : { "RadioButtonPanel(Object,String,boolean,GetterSetterManager)" : 1 , "RadioButtonPanel(Object,String,boolean,GetterSetterManager)::FlexiGridLayout" : 1 , "build()" : 2 , "getGetterSetter()" : 1}},{ "className" : "org::argouml::uml::diagram::static_structure::ui::FigPackage::HideVisibilityAction" , "selectors" : { "HideVisibilityAction()" : 1}},{ "className" : "org::argouml::uml::diagram::state::ui::PropPanelUMLStateDiagram" , "selectors" : { "PropPanelUMLStateDiagram()" : 1}},{ "className" : "org::argouml::language::cpp::reveng::CPPLexer" , "selectors" : { "<Initializer>()::BitSet" : 8 , "CPPLexer(InputStream)" : 3 , "CPPLexer(InputStream)::ByteBuffer" : 1 , "CPPLexer(LexerSharedInputState)::ANTLRHashString" : 81 , "CPPLexer(Reader)" : 1 , "CPPLexer(Reader)::CharBuffer" : 1 , "mk_tokenSet_0()" : 1 , "mk_tokenSet_1()" : 1 , "mk_tokenSet_2()" : 1 , "mk_tokenSet_3()" : 1 , "mk_tokenSet_4()" : 1 , "mk_tokenSet_5()" : 1 , "mk_tokenSet_6()" : 1 , "mk_tokenSet_7()" : 1}},{ "className" : "org::argouml::uml::diagram::ui::FigMessage" , "selectors" : { "FigMessage(Object,Rectangle,DiagramSettings)" : 2 , "addPathItemToFigAssociationRole(???)" : 2 , "endTrans(???)" : 1 , "getArrow()" : 1 , "getArrowDirections()" : 3 , "getFigs(???)" : 1 , "getHeight(???)" : 1 , "getY(???)" : 1 , "initFigs()" : 1 , "initFigs()::FigPoly" : 1 , "setArrow(int)" : 5 , "setLocation(???)" : 1 , "setNameFig(???)" : 1 , "updateArgumentsFromParameter(Object,Object)" : 1 , "updateArrow()" : 3 , "updateListeners(Object)" : 1}},{ "className" : "org::argouml::language::csharp::importer::csparser::nodes::expressions::primitive::CharPrimitive" , "selectors" : { "CharPrimitive(String)" : 1}},{ "className" : "org::argouml::language::csharp::importer::csparser::preprocessornodes::PPEndIfNode" , "selectors" : { "PPEndIfNode()" : 1}},{ "className" : "org::argouml::language::php::PHPDocumentor::VarTag" , "selectors" : { "VarTag()" : 1}},{ "className" : "org::argouml::uml::diagram::DiagramFactoryInterface" , "selectors" : { "createDiagram(Object,Object)" : 1}},{ "className" : "org::argouml::core::propertypanels::ui::UMLModelElementNamespaceComboBoxModel" , "selectors" : { "UMLModelElementNamespaceComboBoxModel(String,Object)" : 1}},{ "className" : "org::argouml::uml::diagram::state::ui::FigBranchState" , "selectors" : { "FigBranchState(Object,Rectangle,DiagramSettings)" : 4 , "createBigPortFig()::FigCircle" : 1 , "getFigs(???)" : 1 , "initFigs()" : 1 , "initFigs()::FigCircle" : 1 , "setBigPort(???)" : 1}},{ "className" : "org::argouml::uml::diagram::activity::ui::InitActivityDiagram" , "selectors" : { "InitActivityDiagram()" : 1}},{ "className" : "javax::swing::UIDefaults::LazyInputMap" , "selectors" : { "UIDefaults" : 1}},{ "className" : "org::argouml::model::euml::AggregationKindEUMLImpl" , "selectors" : { "AggregationKindEUMLImpl()" : 1}},{ "className" : "org::argouml::uml::diagram::activity::ui::SelectionActionState" , "selectors" : { "SelectionActionState(???)" : 4 , "setIncomingAboveButtonEnabled(boolean)" : 1 , "setIncomingButtonEnabled(boolean)" : 1 , "setIncomingLeftButtonEnabled(boolean)" : 1 , "setOutgoingBelowButtonEnabled(boolean)" : 1 , "setOutgoingButtonEnabled(boolean)" : 2 , "setOutgoingRightButtonEnabled(boolean)" : 1}},{ "className" : "org::argouml::persistence::XmiInputStream" , "selectors" : { "XmiInputStream(InputStream,XmiExtensionParser,long,ProgressMgr)" : 3 , "callExtensionParser()" : 1 , "isNameTerminator(char)" : 1 , "read()" : 1}},{ "className" : "org::argouml::activity2::diagram::FigActivityEdge" , "selectors" : { "<Initializer>()::ArrowHeadGreater" : 1 , "FigActivityEdge(Object,DiagramSettings)" : 1}},{ "className" : "org::argouml::model::mdr::ModelManagementHelperMDRImpl" , "selectors" : { "ModelManagementHelperMDRImpl(MDRModelImplementation)" : 1 , "contained(Object,Object)" : 1 , "contained(Object,Object)::RefObject" : 2 , "getAllImportedElements(Collection,Object)::Namespace" : 1 , "getAllModelElementsOfKind(Object,Object)" : 4 , "getAllModelElementsOfKind(Object,Object)::RefObject" : 1 , "getAllModelElementsOfKind(Object,String)" : 1 , "getAllNamespaces(Object)" : 1 , "getAllNamespaces(Object)::Namespace" : 1 , "getAllSubSystems(Object)" : 1 , "getAllSubSystems(Object)::Namespace" : 1 , "getAllSurroundingNamespaces(Object)" : 1 , "getElement(List<String>)" : 1 , "getElement(List<String>)::ModelElement" : 1 , "getElement(List<String>,Object)::Namespace" : 1 , "getOwnerShipPath(Object)" : 1 , "getPathList(Object)" : 1 , "getPathList(Object)::RefObject" : 1 , "isReadOnly(Object)::RefObject" : 1 , "removeImportedElement(Object,Object)::UmlPackage" : 1 , "setAlias(Object,String)::ElementImport" : 1 , "setImportedElements(Object,Collection)::UmlPackage" : 1 , "setSpecification(Object,boolean)::ElementImport" : 1}},{ "className" : "org::argouml::uml::diagram::DiagramFactory" , "selectors" : { "DiagramFactory()" : 1 , "create(DiagramType,Object,DiagramSettings)" : 11 , "createDefaultDiagram(Object)" : 1 , "createDiagram(Class,Object,Object)" : 2 , "createDiagram(DiagramType,Object,Object)" : 9 , "createInternal(DiagramType,Object,Object,DiagramSettings)" : 2 , "getInstance()" : 29 , "registerDiagramFactory(DiagramType,DiagramFactoryInterface2)" : 8 , "removeDiagram(ArgoDiagram)" : 3}},{ "className" : "org::argouml::state2::diagram::FigCircleState" , "selectors" : { "FigCircleState(Object,Rectangle,DiagramSettings)" : 2 , "createBigPortFig()::FigCircle" : 1 , "initialize()" : 1 , "setEnclosingFig(???)" : 2}},{ "className" : "org::argouml::ui::cmd::InitUiCmdSubsystem" , "selectors" : { "InitUiCmdSubsystem()" : 1}},{ "className" : "org::argouml::sequence2::diagram::FigClassifierRole::FigClassifierRolePort" , "selectors" : { "FigClassifierRolePort()" : 1}},{ "className" : "org::argouml::core::propertypanels::ui::UMLCreateActionClassifierListModel" , "selectors" : { "UMLCreateActionClassifierListModel(Object)" : 1}},{ "className" : "org::argouml::uml::reveng::DiagramInterface" , "selectors" : { "DiagramInterface(???)" : 3 , "addClass(Object,boolean)" : 2 , "addClassDiagram(Object,String)" : 1 , "addClassifier(Object,boolean)" : 2 , "addInterface(Object,boolean)" : 1 , "addPackage(Object)" : 1 , "createRootClassDiagram()" : 2 , "getDiagramName(String)" : 3 , "getModifiedDiagramList()" : 1 , "isInDiagram(Object)" : 1 , "markDiagramAsModified(ArgoDiagram)" : 1 , "selectClassDiagram(Object,String)" : 2 , "setCurrentDiagram(ArgoDiagram)" : 3}},{ "className" : "org::argouml::uml::diagram::static_structure::ui::FigDataType" , "selectors" : { "FigDataType(Object,Rectangle,DiagramSettings)" : 2 , "constructFigs(Rectangle)" : 1 , "getKeyword()" : 1}},{ "className" : "org::argouml::language::csharp::importer::csparser::collections::ParseStateCollection" , "selectors" : { "ParseStateCollection()" : 1}},{ "className" : "org::argouml::ui::cmd::KeyStrokeCellRenderer" , "selectors" : { "KeyStrokeCellRenderer()" : 1}},{ "className" : "org::argouml::core::propertypanels::ui::UMLValueSpecificationModel" , "selectors" : { "UMLValueSpecificationModel(Object,String)" : 1 , "addChangeListener(ChangeListener)" : 1 , "createValueSpecification(String)" : 1 , "fireStateChanged()" : 1 , "getExpression()" : 5 , "getTarget()" : 3 , "getValue()" : 10 , "removeChangeListener(ChangeListener)" : 1 , "setExpression(Object)" : 1 , "setValue(Object[])" : 10 , "startListeningForModelChanges()" : 2 , "stopListeningForModelChanges()" : 1}},{ "className" : "org::argouml::uml::diagram::ui::FigOperationsCompartment" , "selectors" : { "FigOperationsCompartment(Object,Rectangle,DiagramSettings)" : 2}},{ "className" : "org::argouml::uml::diagram::use_case::ui::FigUseCase" , "selectors" : { "FigUseCase(Object,Rectangle,DiagramSettings)" : 2 , "calcEllipse(Dimension,int)" : 1 , "calcX(double,double,double)" : 1 , "getExtensionPointsCompartment()" : 1 , "initialize(Rectangle)" : 1 , "isExtensionPointsVisible()" : 3 , "setExtensionPointsVisible(boolean)" : 2 , "setFilled(boolean)" : 1 , "updateExtensionPoints()" : 1}},{ "className" : "org::argouml::persistence::XmiExtensionParser" , "selectors" : { "parse(String,String)" : 1}},{ "className" : "org::argouml::uml::diagram::state::ui::UMLStateDiagram" , "selectors" : { "UMLStateDiagram()" : 1 , "UMLStateDiagram(Object,Object)" : 1 , "createGraphModel()" : 1 , "getActionActionSequence()" : 1 , "getActionCallAction()" : 1 , "getActionCallEvent()" : 1 , "getActionChangeEvent()" : 1 , "getActionChoicePseudoState()" : 1 , "getActionCompositeState()" : 1 , "getActionCreateAction()" : 1 , "getActionDeepHistoryPseudoState()" : 1 , "getActionDestroyAction()" : 1 , "getActionFinalPseudoState()" : 1 , "getActionForkPseudoState()" : 1 , "getActionGuard()" : 1 , "getActionJoinPseudoState()" : 1 , "getActionJunctionPseudoState()" : 1 , "getActionReturnAction()" : 1 , "getActionSendAction()" : 1 , "getActionShallowHistoryPseudoState()" : 1 , "getActionSignalEvent()" : 1 , "getActionStartPseudoState()" : 1 , "getActionState()" : 1 , "getActionStubState()" : 1 , "getActionSubmachineState()" : 1 , "getActionSynchState()" : 1 , "getActionTerminateAction()" : 1 , "getActionTimeEvent()" : 1 , "getActionTransition()" : 1 , "getActionUninterpretedAction()" : 1 , "getEffectActions()" : 1 , "getNamespaceFromMachine(Object)" : 3 , "getOwner()" : 1 , "getStateMachine()" : 5 , "getTriggerActions()" : 1 , "nameDiagram(Object)" : 2 , "setup(Object,Object)" : 3 , "setup(Object,Object)::LayerPerspectiveMutable" : 1}},{ "className" : "org::argouml::ui::explorer::rules::GoClassifierToBehavioralFeature" , "selectors" : { "GoClassifierToBehavioralFeature()" : 3}},{ "className" : "org::argouml::ui::explorer::rules::GoModelToDiagrams" , "selectors" : { "GoModelToDiagrams()" : 2 , "isInPath(Object,Object)" : 1}},{ "className" : "org::argouml::util::logging::AwtExceptionHandler" , "selectors" : { "registerExceptionHandler()" : 1}},{ "className" : "org::argouml::uml::ui::foundation::core::ActionNewModelElementConstraint" , "selectors" : { "ActionNewModelElementConstraint()" : 1}},{ "className" : "org::argouml::profile::internal::ocl::uml14::HashBag" , "selectors" : { "HashBag()" : 1 , "HashBag(Collection)" : 3 , "add(E)" : 1 , "addAll(Collection)" : 1 , "count(Object)" : 3 , "remove(Object)" : 1}},{ "className" : "org::argouml::language::csharp::importer::csparser::statements::LockStatement" , "selectors" : { "LockStatement()" : 1}},{ "className" : "org::argouml::core::propertypanels::ui::UMLTemplateParameterDefaultElementComboBoxModel" , "selectors" : { "UMLTemplateParameterDefaultElementComboBoxModel(String,Object)" : 1 , "getSelectedModelElement()" : 1}},{ "className" : "org::argouml::language::java::ui::ActionRESequenceDiagram" , "selectors" : { "ActionRESequenceDiagram(Object)" : 1}},{ "className" : "org::argouml::uml::cognitive::critics::CrNWayAgg" , "selectors" : { "CrNWayAgg()" : 1}},{ "className" : "org::argouml::notation::providers::uml::AbstractMessageNotationUml" , "selectors" : { "AbstractMessageNotationUml(Object)" : 2 , "buildAction(Object)" : 1 , "compareMsgNumbers(String,String)" : 2 , "countParameters(Object)" : 1 , "countSuccessors(Object)" : 1 , "fillBlankFunctionName(Object,String,boolean)" : 1 , "fillBlankVariableName(Object,StringBuilder,boolean)" : 1 , "filterWithActivator(Collection,Object)" : 1 , "findCandidateRoots(Collection,Object,Object)" : 3 , "findMsg(Object,String)" : 2 , "findMsgOrderBreak(String)" : 1 , "generateMessageNumber(Object)" : 3 , "generateMessageNumber(Object,Object,int)" : 3 , "generateRecurrence(Object)" : 1 , "getExpressionLanguage()" : 3 , "getInitiatorOfAction(Object)" : 1 , "getOperation(Collection,String,int)" : 1 , "handleArguments(Object,List<String>,boolean)" : 1 , "handleFunctionName(Object,String,StringBuilder,boolean)" : 1 , "handleGuard(Object,StringBuilder,boolean,boolean)" : 1 , "handleOperation(Object,String,boolean)" : 1 , "handlePredecessors(Object,List<List>,boolean)" : 1 , "handleSequenceNumber(Object,List<Integer>,boolean)" : 1 , "hasMsgWithActivator(Object,Object)" : 2 , "initParameterSeparators()" : 1 , "insertSuccessor(Object,Object,int)" : 1 , "isBadPreMsg(Object,Object)" : 1 , "isMsgNumberStartOf(String,String)" : 3 , "isPredecessorMsg(Object,Object,int)" : 2 , "parseArguments(String,boolean)" : 1 , "parseMessage(Object,String)" : 1 , "parseMsgOrder(String)" : 2 , "printDebugInfo(String,String,StringBuilder,String,StringBuilder,List<List>,List<Integer>,boolean,boolean)" : 1 , "recCountPredecessors(Object,MsgPtr)" : 5 , "successor(Object,int)" : 2 , "toString(Object,boolean)" : 3 , "walk(Object,int,boolean)" : 2 , "walkTree(Object,List)" : 1}},{ "className" : "org::argouml::pattern::cognitive::critics::CrConsiderSingleton" , "selectors" : { "CrConsiderSingleton()" : 1}},{ "className" : "org::argouml::uml::diagram::collaboration::ui::SelectionClassifierRole" , "selectors" : { "SelectionClassifierRole(???)" : 1}},{ "className" : "org::argouml::uml::ui::TabProps" , "selectors" : { "TabProps()" : 1 , "TabProps(String,String)" : 1 , "addPanel(Class,PropPanel)" : 1 , "addTargetListener(TargetListener)" : 1 , "createPropPanel(Object)" : 1 , "createPropPanel(Object)::Orientable" : 1 , "findPanelFor(Object)" : 2 , "fireTargetAdded(TargetEvent)" : 1 , "fireTargetRemoved(TargetEvent)" : 1 , "fireTargetSet(TargetEvent)" : 1 , "removeTargetListener(TargetListener)" : 1 , "setTarget(Object)" : 4 , "setTarget(Object)::Fig" : 1 , "shouldBeEnabled(Object)" : 1 , "shouldBeEnabled(Object)::Fig" : 1}},{ "className" : "org::argouml::ui::explorer::PerspectiveConfigurator::RulesListSelectionListener" , "selectors" : { "RulesListSelectionListener()" : 1}},{ "className" : "org::argouml::uml::cognitive::critics::CrNoIncomingTransitions" , "selectors" : { "CrNoIncomingTransitions()" : 1 , "isSomeSubvertexOf(Object,Object)" : 2}},{ "className" : "org::argouml::uml::diagram::state::ui::ButtonActionNewEvent" , "selectors" : { "createEvent(Object)" : 1 , "getIconName()" : 1 , "getKeyName()" : 2 , "isEnabled()" : 4}},{ "className" : "org::argouml::persistence::ArgoParser" , "selectors" : { "ArgoParser()" : 3 , "getMemberList()" : 2 , "handleActiveDiagram(XMLElement)" : 1 , "handleArgo(XMLElement)" : 1 , "handleAuthorEmail(XMLElement)" : 1 , "handleAuthorName(XMLElement)" : 1 , "handleDefaultShadowWidth(XMLElement)" : 1 , "handleDescription(XMLElement)" : 1 , "handleDocumentation(XMLElement)" : 1 , "handleFontName(XMLElement)" : 1 , "handleFontSize(XMLElement)" : 1 , "handleHideBidirectionalArrows(XMLElement)" : 1 , "handleHistoryfile(XMLElement)" : 1 , "handleMember(XMLElement)" : 1 , "handleNotationLanguage(XMLElement)" : 1 , "handleSearchpath(XMLElement)" : 1 , "handleSettings(XMLElement)" : 1 , "handleShowAssociationNames(XMLElement)" : 1 , "handleShowBoldNames(XMLElement)" : 1 , "handleShowInitialValue(XMLElement)" : 1 , "handleShowMultiplicity(XMLElement)" : 1 , "handleShowProperties(XMLElement)" : 1 , "handleShowSingularMultiplicities(XMLElement)" : 1 , "handleShowStereotypes(XMLElement)" : 1 , "handleShowTypes(XMLElement)" : 1 , "handleShowVisibility(XMLElement)" : 1 , "handleUseGuillemots(XMLElement)" : 1 , "handleVersion(XMLElement)" : 1 , "logError(String,SAXException)" : 2 , "preRead(Project)" : 2 , "readProject(Project,InputSource)" : 1 , "readProject(Project,Reader)" : 2}},{ "className" : "org::argouml::core::propertypanels::ui::UMLTemplateParameterParameterListModel" , "selectors" : { "UMLTemplateParameterParameterListModel(Object,String)" : 1}},{ "className" : "org::argouml::cognitive::ui::ToDoByPriority" , "selectors" : { "ToDoByPriority()" : 1}},{ "className" : "org::argouml::uml::cognitive::critics::CrUnconventionalAttrName" , "selectors" : { "CrUnconventionalAttrName()" : 1 , "computeOffenders(Object)" : 2 , "computeSuggestion(String)" : 1}},{ "className" : "org::argouml::language::csharp::importer::csparser::nodes::expressions::ArrayCreationExpression" , "selectors" : { "ArrayCreationExpression()" : 1}},{ "className" : "org::argouml::ui::explorer::rules::GoStateToDoActivity" , "selectors" : { "GoStateToDoActivity()" : 2}},{ "className" : "org::argouml::util::SingleElementIterator" , "selectors" : { "SingleElementIterator(T)" : 1}},{ "className" : "org::argouml::model::mdr::UseCasesHelperMDRImpl" , "selectors" : { "UseCasesHelperMDRImpl(MDRModelImplementation)" : 1 , "addExtend(Object,Object)::Extend" : 1 , "addExtend(Object,Object)::UseCase" : 1 , "addExtensionPoint(Object,Object)" : 2 , "addExtensionPoint(Object,Object)::Extend" : 1 , "addExtensionPoint(Object,Object)::UseCase" : 1 , "addExtensionPoint(Object,int,Object)::Extend" : 1 , "addInclude(Object,Object)" : 1 , "addInclude(Object,Object)::UseCase" : 1 , "getAllActors(Object)::Namespace" : 1 , "getAllUseCases(Object)::Namespace" : 1 , "removeExtend(Object,Object)" : 1 , "removeExtend(Object,Object)::Extend" : 1 , "removeExtend(Object,Object)::UseCase" : 1 , "removeExtensionPoint(Object,Object)" : 1 , "removeExtensionPoint(Object,Object)::Extend" : 1 , "removeExtensionPoint(Object,Object)::UseCase" : 1 , "removeInclude(Object,Object)" : 1 , "removeInclude(Object,Object)::UseCase" : 1 , "setAddition(Object,Object)::Include" : 1 , "setCondition(Object,Object)::Extend" : 2 , "setExtension(Object,Object)::Extend" : 1 , "setExtensionPoints(Object,Collection)::ArrayList" : 1 , "setIncludes(Object,Collection)::ArrayList" : 1 , "setLocation(Object,String)::ExtensionPoint" : 1 , "setUseCase(Object,Object)::ExtensionPoint" : 1}},{ "className" : "org::argouml::uml::cognitive::critics::CrComponentWithoutNode" , "selectors" : { "CrComponentWithoutNode()" : 1 , "computeOffenders(UMLDeploymentDiagram)" : 3}},{ "className" : "org::argouml::language::csharp::importer::csparser::statements::ExpressionStatement" , "selectors" : { "ExpressionStatement(ExpressionNode)" : 3}},{ "className" : "javax::swing::text::PlainDocument" , "selectors" : { "PlainDocument()" : 12 , "getDefaultRootElement()" : 55 , "getParagraphElement(int)" : 1 , "insertString(int,String,AttributeSet)" : 57}},{ "className" : "java::io::StringBufferInputStream" , "selectors" : { "StringBufferInputStream(String)" : 13 , "java" : 8 , "read()" : 1}},{ "className" : "org::argouml::persistence::PGMLStackParser::EdgeData" , "selectors" : { "EdgeData(???)" : 1 , "getDestFigNodeId()" : 1 , "getDestPortFigId()" : 1 , "getFigEdge(???)" : 2 , "getSourceFigNodeId()" : 1 , "getSourcePortFigId()" : 1}},{ "className" : "org::argouml::uml::diagram::static_structure::ui::SelectionClass" , "selectors" : { "SelectionClass(???)" : 1 , "hideButtons(???)" : 1 , "postProcessEdge2(Object)" : 1}},{ "className" : "org::argouml::kernel::ActionList" , "selectors" : { "ActionList(String)" : 1}},{ "className" : "org::argouml::uml::diagram::state::ui::ButtonActionNewTimeEvent" , "selectors" : { "ButtonActionNewTimeEvent()" : 3}},{ "className" : "org::argouml::core::propertypanels::ui::UMLScriptExpressionModel" , "selectors" : { "UMLScriptExpressionModel(Object)" : 1}},{ "className" : "org::argouml::core::propertypanels::ui::CheckBox" , "selectors" : { "CheckBox(String,Object,String,GetterSetterManager)" : 1 , "build()" : 2}},{ "className" : "org::argouml::notation::providers::NodeInstanceNotation" , "selectors" : { "NodeInstanceNotation(Object)" : 1}},{ "className" : "org::argouml::uml::diagram::ui::AddToDiagramMemento" , "selectors" : { "AddToDiagramMemento(???)" : 1}},{ "className" : "org::argouml::util::UIUtils" , "selectors" : { "loadCommonKeyMap(JDialog)" : 3}},{ "className" : "org::argouml::ui::ActionCreateEdgeModelElement" , "selectors" : { "ActionCreateEdgeModelElement(Object,Object,Object,String)" : 1}},{ "className" : "org::argouml::state2::diagram::UMLStateDiagram::CreatePseudostateAction" , "selectors" : { "CreatePseudostateAction(Object,String)" : 1}},{ "className" : "org::argouml::model::mdr::CoreHelperMDRImpl" , "selectors" : { "CoreHelperMDRImpl(MDRModelImplementation)" : 1 , "addAnnotatedElement(Object,Object)::Comment" : 1 , "addClient(Object,Object)::Dependency" : 1 , "addClientDependency(Object,Object)::ModelElement" : 1 , "addComment(Object,Object)::ModelElement" : 1 , "addConnection(Object,Object)::Link" : 1 , "addConnection(Object,Object)::UmlAssociation" : 1 , "addConnection(Object,int,Object)::Link" : 1 , "addConnection(Object,int,Object)::UmlAssociation" : 2 , "addConstraint(Object,Object)::ModelElement" : 1 , "addDeploymentLocation(Object,Object)::Component" : 1 , "addElementResidence(Object,Object)::ElementResidence" : 1 , "addFeature(Object,Object)::Classifier" : 1 , "addFeature(Object,int,Object)::Classifier" : 1 , "addLink(Object,Object)::Link" : 1 , "addLiteral(Object,int,Object)::Enumeration" : 1 , "addMethod(Object,Object)::Method" : 3 , "addMethod(Object,Object)::Operation" : 2 , "addParameter(Object,Object)" : 1 , "addParameter(Object,Object)::BehavioralFeature" : 1 , "addParameter(Object,Object)::Event" : 1 , "addParameter(Object,Object)::ObjectFlowState" : 1 , "addParameter(Object,Object)::Parameter" : 1 , "addParameter(Object,int,Object)::BehavioralFeature" : 1 , "addParameter(Object,int,Object)::Event" : 1 , "addQualifier(Object,int,Object)::AssociationEnd" : 1 , "addRaisedSignal(Object,Object)::Signal" : 2 , "addRaisedSignal(Object,Object)::org" : 2 , "addSourceFlow(Object,Object)::ModelElement" : 1 , "addSupplier(Object,Object)::Dependency" : 1 , "addSupplierDependency(Object,Object)::Dependency" : 1 , "addTargetFlow(Object,Object)::ModelElement" : 1 , "addTemplateArgument(Object,Object)::Binding" : 1 , "addTemplateArgument(Object,int,Object)::Binding" : 1 , "addTemplateParameter(Object,Object)::ModelElement" : 1 , "addTemplateParameter(Object,int,Object)::ModelElement" : 1 , "clearStereotypes(Object)::ModelElement" : 1 , "createCommand(StringSetter,String,String,String)" : 1 , "getAllAttributes(Object)::Classifier" : 1 , "getAllBehavioralFeatures(Object)::ModelElement" : 1 , "getAllClasses(Object)::Namespace" : 1 , "getAllClassifiers(Object)::Namespace" : 1 , "getAllComponents(Object)::Namespace" : 1 , "getAllDataTypes(Object)::Namespace" : 1 , "getAllInterfaces(Object)::Namespace" : 1 , "getAllMetaDatatypeNames()::javax" : 3 , "getAllMetatypeNames()::javax" : 1 , "getAllNodes(Object)::Namespace" : 1 , "getAllParents(???)" : 2 , "getAllVisibleElements(???)" : 1 , "getAssociationEnd(Object,Object)::UmlAssociation" : 1 , "getAssociations(Object)::AssociationEnd" : 1 , "getAttributesInh(Object)::Classifier" : 1 , "getBody(Object)::Comment" : 1 , "getDestination(Object)::AssociationEnd" : 1 , "getDestination(Object)::Message" : 1 , "getElementResidence(Object)::ModelElement" : 1 , "getElementResidence(Object)::org" : 1 , "getExtendedClassifiers(Object)::Generalization" : 1 , "getExtendingClassifiers(Object)::Generalization" : 1 , "getFirstItemOrNull(Collection)" : 3 , "getFlows(Object,Object)::ModelElement" : 2 , "getGeneralization(Object,Object)" : 2 , "getOperationsInh(Object)::Classifier" : 1 , "getPackageImports(Object)::ModelElement" : 1 , "getParents(???)" : 1 , "getReturnParameters(Object)::BehavioralFeature" : 1 , "getSource(Object)::AssociationEnd" : 1 , "getSource(Object)::Message" : 1 , "getSpecification(Object)::Method" : 1 , "getSupertypes(Object)::GeneralizableElement" : 1 , "internalGetAllRealizedInterfaces(Object,Collection,Set)" : 2 , "isValidNamespace(Object,Object)" : 6 , "isVisible(ModelElement,Namespace)::UmlPackage" : 1 , "removeAnnotatedElement(Object,Object)::Comment" : 2 , "removeConnection(Object,Object)::Link" : 1 , "removeConnection(Object,Object)::UmlAssociation" : 1 , "removeConstraint(Object,Object)::ModelElement" : 1 , "removeDeploymentLocation(Object,Object)::Component" : 1 , "removeElementResidence(Object,Object)::ElementResidence" : 1 , "removeFeature(Object,Object)::Classifier" : 1 , "removeLiteral(Object,Object)::Enumeration" : 1 , "removeParameter(Object,Object)" : 1 , "removeParameter(Object,Object)::BehavioralFeature" : 1 , "removeParameter(Object,Object)::Event" : 1 , "removeParameter(Object,Object)::ObjectFlowState" : 1 , "removeParameter(Object,Object)::Parameter" : 1 , "removeQualifier(Object,Object)::AssociationEnd" : 1 , "removeSourceFlow(Object,Object)::ModelElement" : 1 , "removeSupplierDependency(Object,Object)::Dependency" : 1 , "removeTargetFlow(Object,Object)::ModelElement" : 1 , "removeTemplateArgument(Object,Object)::Binding" : 1 , "removeTemplateParameter(Object,Object)::ModelElement" : 1 , "setAbstract(Object,boolean)::GeneralizableElement" : 1 , "setAbstract(Object,boolean)::Operation" : 1 , "setAbstract(Object,boolean)::Reception" : 1 , "setActive(Object,boolean)::UmlClass" : 1 , "setAggregation(Object,Object)" : 2 , "setAnnotatedElements(Object,Collection)::Comment" : 1 , "setAssociation(Object,Object)::AssociationEnd" : 1 , "setAssociation(Object,Object)::AssociationEndRole" : 1 , "setAssociation(Object,Object)::Link" : 1 , "setAttributes(Object,List)::ArrayList" : 1 , "setBody(Object,Object)::Constraint" : 2 , "setBody(Object,Object)::Method" : 3 , "setBody(Object,String)::Comment" : 1 , "setChangeability(Object,Object)" : 1 , "setChangeability(Object,Object)::AssociationEnd" : 1 , "setChangeability(Object,Object)::StructuralFeature" : 1 , "setChild(Object,Object)::Generalization" : 1 , "setConcurrency(Object,Object)::Operation" : 1 , "setConnections(Object,Collection)::Link" : 1 , "setConnections(Object,Collection)::UmlAssociation" : 1 , "setDefaultElement(Object,Object)::TemplateParameter" : 1 , "setDefaultValue(Object,Object)::Parameter" : 2 , "setDiscriminator(Object,String)::Generalization" : 1 , "setEnumerationLiterals(Object,List)::Enumeration" : 2 , "setFeature(Object,int,Object)::Classifier" : 1 , "setFeatures(Object,Collection)::Classifier" : 2 , "setInitialValue(Object,Object)::Attribute" : 2 , "setKind(Object,Object)::Parameter" : 1 , "setKind(Object,Object)::Pseudostate" : 1 , "setLeaf(Object,boolean)::GeneralizableElement" : 1 , "setLeaf(Object,boolean)::Operation" : 1 , "setLeaf(Object,boolean)::Reception" : 1 , "setModelElementContainer(Object,Object)::AttributeLink" : 2 , "setModelElementContainer(Object,Object)::ElementImport" : 1 , "setModelElementContainer(Object,Object)::Guard" : 1 , "setModelElementContainer(Object,Object)::Interaction" : 1 , "setModelElementContainer(Object,Object)::LinkEnd" : 1 , "setModelElementContainer(Object,Object)::Message" : 1 , "setModelElementContainer(Object,Object)::ModelElement" : 1 , "setModelElementContainer(Object,Object)::Partition" : 2 , "setModelElementContainer(Object,Object)::State" : 2 , "setModelElementContainer(Object,Object)::StateVertex" : 1 , "setModelElementContainer(Object,Object)::Stereotype" : 1 , "setModelElementContainer(Object,Object)::TaggedValue" : 3 , "setModelElementContainer(Object,Object)::Transition" : 2 , "setMultiplicity(Object,String)" : 1 , "setMultiplicityInternal(Object,Multiplicity)::AssociationEnd" : 1 , "setMultiplicityInternal(Object,Multiplicity)::AssociationRole" : 1 , "setMultiplicityInternal(Object,Multiplicity)::ClassifierRole" : 1 , "setMultiplicityInternal(Object,Multiplicity)::StructuralFeature" : 1 , "setMultiplicityInternal(Object,Multiplicity)::TagDefinition" : 1 , "setName(Object,String)::anonymous(StringSetter)" : 1 , "setNamespace(Object,Object)" : 2 , "setNamespace(Object,Object)::ModelElement" : 2 , "setNavigable(Object,boolean)::AssociationEnd" : 1 , "setOperations(Object,List)::ArrayList" : 1 , "setOrdering(Object,Object)::AssociationEnd" : 1 , "setOwner(Object,Object)::Feature" : 1 , "setOwner(Object,Object)::Stereotype" : 1 , "setOwner(Object,Object)::TagDefinition" : 1 , "setParameter(Object,Object)::TemplateParameter" : 1 , "setParent(Object,Object)::Generalization" : 1 , "setPowertype(Object,Object)::Generalization" : 1 , "setQualifiers(Object,List)::AssociationEnd" : 2 , "setQuery(Object,boolean)::BehavioralFeature" : 1 , "setResident(Object,Object)::ElementResidence" : 1 , "setResidents(Object,Collection)::ComponentInstance" : 1 , "setResidents(Object,Collection)::NodeInstance" : 1 , "setRoot(Object,boolean)::GeneralizableElement" : 1 , "setRoot(Object,boolean)::Operation" : 1 , "setRoot(Object,boolean)::Reception" : 1 , "setSources(Object,Collection)::Flow" : 1 , "setSpecification(Object,Object)::Method" : 1 , "setSpecification(Object,String)::Operation" : 1 , "setSpecification(Object,String)::Reception" : 1 , "setSpecification(Object,boolean)::ModelElement" : 1 , "setSpecifications(Object,Collection)::AssociationEnd" : 1 , "setStatic(Object,boolean)::AssociationEnd" : 1 , "setStatic(Object,boolean)::Feature" : 1 , "setTaggedValue(Object,String,String)::ModelElement" : 1 , "setTargetScope(Object,Object)::AssociationEnd" : 1 , "setTargetScope(Object,Object)::StructuralFeature" : 1 , "setType(Object,Object)::AssociationEnd" : 1 , "setType(Object,Object)::ClassifierInState" : 1 , "setType(Object,Object)::ObjectFlowState" : 1 , "setType(Object,Object)::Parameter" : 1 , "setType(Object,Object)::StructuralFeature" : 1 , "setVisibility(Object,Object)::ElementImport" : 1 , "setVisibility(Object,Object)::ElementResidence" : 1 , "setVisibility(Object,Object)::ModelElement" : 1}},{ "className" : "org::argouml::model::CopyHelper" , "selectors" : { "copy(Object,Object)" : 2}},{ "className" : "org::argouml::ui::explorer::rules::GoModelElementToContainedDiagrams" , "selectors" : { "GoModelElementToContainedDiagrams()" : 2}},{ "className" : "org::argouml::model::mdr::CollaborationsFactoryMDRImpl" , "selectors" : { "CollaborationsFactoryMDRImpl(MDRModelImplementation)" : 1 , "buildAssociationRole(???)" : 1 , "buildCollaboration(Object)" : 1 , "createClassifierRole(???)" : 1 , "deleteAssociationEndRole(Object)" : 1 , "deleteAssociationRole(Object)" : 1 , "deleteClassifierRole(Object)" : 1 , "deleteClassifierRole(Object)::org" : 1 , "deleteCollaboration(Object)" : 1 , "deleteCollaborationInstanceSet(Object)" : 1 , "deleteInteraction(Object)" : 1 , "deleteInteractionInstanceSet(Object)" : 1 , "deleteMessage(Object)" : 1}},{ "className" : "java::awt::datatransfer::StringSelection" , "selectors" : { "StringSelection(String)" : 44 , "viewObjectInObjectTree(???)" : 1}},{ "className" : "org::argouml::configuration::ConfigurationProperties" , "selectors" : { "ConfigurationProperties()" : 1 , "copyFile(File,File)" : 1 , "getOldDefaultPath()" : 1}},{ "className" : "org::argouml::uml::ui::ActionCut" , "selectors" : { "ActionCut()" : 1 , "actionPerformed(ActionEvent)::CutAction" : 1 , "getInstance()" : 5 , "isSystemClipBoardEmpty()" : 1 , "removeFromDiagramAllowed()" : 1}},{ "className" : "org::argouml::uml::diagram::DiagramUndoManager::DiagramCommand" , "selectors" : { "DiagramCommand(???)" : 1}},{ "className" : "org::argouml::uml::diagram::ui::PathConvPercent2" , "selectors" : { "applyOffsetAmount(Point,Point,int,Point)" : 1 , "setPercentOffset(int,int)" : 1 , "tanh(double)" : 1}},{ "className" : "org::argouml::uml::diagram::ui::SelectionClassifierBox::Button" , "selectors" : { "Button(???)" : 1}},{ "className" : "org::argouml::uml::diagram::deployment::ui::SelectionNode" , "selectors" : { "SelectionNode(???)" : 1}},{ "className" : "org::argouml::persistence::UmlFilePersister::XmlFilterOutputStream" , "selectors" : { "XmlFilterOutputStream(OutputStream,Charset)" : 1 , "XmlFilterOutputStream(OutputStream,String)" : 1 , "flush()" : 2 , "processHeader()" : 2 , "reallyClose()" : 1 , "resetBuffers()" : 1 , "startEntry()" : 2 , "write(int)" : 1}},{ "className" : "org::argouml::core::propertypanels::model::GetterSetterManager::ListGetterSetter" , "selectors" : { "getAdditionalCommands(Object)" : 1 , "getMetaType()" : 1 , "isFullBuildOnly()" : 1 , "isValidElement(Object,Collection<Class<?>>)" : 1}},{ "className" : "org::argouml::util::ItemUID" , "selectors" : { "ItemUID()" : 3 , "ItemUID(String)" : 1 , "createObjectID(Object)" : 1 , "generateID()" : 1 , "getIDOfObject(Object,boolean)" : 1 , "readObjectID(Object)" : 1 , "toString()" : 3}},{ "className" : "org::argouml::core::propertypanels::ui::UMLEventTransitionListModel" , "selectors" : { "UMLEventTransitionListModel(Object)" : 1}},{ "className" : "org::argouml::language::csharp::importer::csparser::statements::ForStatement" , "selectors" : { "ForStatement()" : 1}},{ "className" : "org::argouml::sequence2::diagram::FigActivation" , "selectors" : { "FigActivation(Object,Rectangle,DiagramSettings,FigMessage)" : 1 , "FigActivation(Object,Rectangle,DiagramSettings,FigMessage,boolean)" : 2 , "getActivatingMessage()" : 1 , "getHeight(???)" : 1 , "getY(???)" : 5 , "initialize(Rectangle,boolean)" : 1 , "initialize(Rectangle,boolean)::FigRect" : 1 , "isActivatorEnd(FigMessage)" : 1 , "setDestroy(boolean)" : 2 , "setFillColor(???)" : 1 , "setHeight(???)" : 5 , "setLocation(???)" : 1}},{ "className" : "org::argouml::application::events::ArgoStatusEventListener" , "selectors" : { "projectLoaded(ArgoStatusEvent)" : 1 , "projectModified(ArgoStatusEvent)" : 1 , "projectSaved(ArgoStatusEvent)" : 1 , "statusCleared(ArgoStatusEvent)" : 1 , "statusText(ArgoStatusEvent)" : 1}},{ "className" : "java::nio::charset::Charset" , "selectors" : { "availableCharsets()" : 7 , "canEncode()" : 1 , "decode(ByteBuffer)" : 5 , "defaultCharset()" : 14 , "displayName()" : 3 , "encode(CharBuffer)" : 2 , "encode(String)" : 9 , "equals(Object)" : 2 , "forName(String)" : 177 , "isSupported(String)" : 20 , "name()" : 56 , "newDecoder()" : 27 , "newEncoder()" : 27 , "toString()" : 3}},{ "className" : "org::argouml::ui::cmd::ActionSelectInvert" , "selectors" : { "ActionSelectInvert()" : 2 , "ActionSelectInvert(String)" : 1}},{ "className" : "org::argouml::uml::ui::UMLComboBox2" , "selectors" : { "UMLComboBox2(UMLComboBoxModel2)" : 1 , "UMLComboBox2(UMLComboBoxModel2,Action,boolean)" : 1 , "actionPerformed(ActionEvent)" : 1 , "doIt(ActionEvent)" : 1 , "getTarget()" : 3}},{ "className" : "org::argouml::uml::diagram::use_case::ui::FigExtend" , "selectors" : { "<Initializer>()::ArrowHeadGreater" : 1 , "FigExtend(Object,DiagramSettings)" : 1 , "getLabel()" : 2 , "initialize(Object)" : 1 , "renderingChanged()" : 1 , "updateConditionText()" : 1 , "updateLabel()" : 1}},{ "className" : "org::argouml::uml::ui::UMLStimulusActionTextProperty" , "selectors" : { "getProperty(UMLUserInterfaceContainer)" : 2 , "isAffected(PropertyChangeEvent)" : 1 , "setProperty(UMLUserInterfaceContainer,String)" : 3 , "targetChanged()" : 1}},{ "className" : "org::argouml::uml::ui::behavior::use_cases::ActionNewExtendExtensionPoint" , "selectors" : { "ActionNewExtendExtensionPoint()" : 1}},{ "className" : "org::argouml::language::cpp::reveng::CPPParser" , "selectors" : { "<Initializer>()::BitSet" : 80 , "CPPParser(???)" : 3 , "declaratorID(String,BitSet)" : 11 , "external_declaration()::SemanticException" : 2 , "isTypeName(String)" : 5 , "jump_statement()::SemanticException" : 1 , "member_declaration()::SemanticException" : 3 , "mk_tokenSet_0()" : 1 , "mk_tokenSet_1()" : 1 , "mk_tokenSet_10()" : 1 , "mk_tokenSet_11()" : 1 , "mk_tokenSet_12()" : 1 , "mk_tokenSet_13()" : 1 , "mk_tokenSet_14()" : 1 , "mk_tokenSet_15()" : 1 , "mk_tokenSet_16()" : 1 , "mk_tokenSet_17()" : 1 , "mk_tokenSet_18()" : 1 , "mk_tokenSet_19()" : 1 , "mk_tokenSet_2()" : 1 , "mk_tokenSet_20()" : 1 , "mk_tokenSet_21()" : 1 , "mk_tokenSet_22()" : 1 , "mk_tokenSet_23()" : 1 , "mk_tokenSet_24()" : 1 , "mk_tokenSet_25()" : 1 , "mk_tokenSet_26()" : 1 , "mk_tokenSet_27()" : 1 , "mk_tokenSet_28()" : 1 , "mk_tokenSet_29()" : 1 , "mk_tokenSet_3()" : 1 , "mk_tokenSet_30()" : 1 , "mk_tokenSet_31()" : 1 , "mk_tokenSet_32()" : 1 , "mk_tokenSet_33()" : 1 , "mk_tokenSet_34()" : 1 , "mk_tokenSet_35()" : 1 , "mk_tokenSet_36()" : 1 , "mk_tokenSet_37()" : 1 , "mk_tokenSet_38()" : 1 , "mk_tokenSet_39()" : 1 , "mk_tokenSet_4()" : 1 , "mk_tokenSet_40()" : 1 , "mk_tokenSet_41()" : 1 , "mk_tokenSet_42()" : 1 , "mk_tokenSet_43()" : 1 , "mk_tokenSet_44()" : 1 , "mk_tokenSet_45()" : 1 , "mk_tokenSet_46()" : 1 , "mk_tokenSet_47()" : 1 , "mk_tokenSet_48()" : 1 , "mk_tokenSet_49()" : 1 , "mk_tokenSet_5()" : 1 , "mk_tokenSet_50()" : 1 , "mk_tokenSet_51()" : 1 , "mk_tokenSet_52()" : 1 , "mk_tokenSet_53()" : 1 , "mk_tokenSet_54()" : 1 , "mk_tokenSet_55()" : 1 , "mk_tokenSet_56()" : 1 , "mk_tokenSet_57()" : 1 , "mk_tokenSet_58()" : 1 , "mk_tokenSet_59()" : 1 , "mk_tokenSet_6()" : 1 , "mk_tokenSet_60()" : 1 , "mk_tokenSet_61()" : 1 , "mk_tokenSet_62()" : 1 , "mk_tokenSet_63()" : 1 , "mk_tokenSet_64()" : 1 , "mk_tokenSet_65()" : 1 , "mk_tokenSet_66()" : 1 , "mk_tokenSet_67()" : 1 , "mk_tokenSet_68()" : 1 , "mk_tokenSet_69()" : 1 , "mk_tokenSet_7()" : 1 , "mk_tokenSet_70()" : 1 , "mk_tokenSet_71()" : 1 , "mk_tokenSet_72()" : 1 , "mk_tokenSet_73()" : 1 , "mk_tokenSet_74()" : 1 , "mk_tokenSet_75()" : 1 , "mk_tokenSet_76()" : 1 , "mk_tokenSet_77()" : 1 , "mk_tokenSet_78()" : 1 , "mk_tokenSet_79()" : 1 , "mk_tokenSet_8()" : 1 , "mk_tokenSet_9()" : 1 , "translation_unit(???)" : 1 , "typeID()::SemanticException" : 1}},{ "className" : "org::argouml::persistence::UmlFilePersister" , "selectors" : { "UmlFilePersister()" : 2 , "checkVersion(int,String)" : 1 , "doLoad(File,File,ProgressMgr)" : 2 , "getPersistenceVersion(InputStream)" : 2 , "getPersistenceVersionFromFile(File)" : 1 , "getReleaseVersion(InputStream)" : 2 , "getReleaseVersionFromFile(File)" : 2 , "getVersion(String)" : 2 , "transform(File,int)" : 1 , "writeProject(Project,OutputStream,ProgressMgr)" : 2 , "writeProject(Project,OutputStream,ProgressMgr)::OCLExpander" : 1}},{ "className" : "org::argouml::language::csharp::importer::csparser::nodes::expressions::primitive::RealPrimitive" , "selectors" : { "RealPrimitive(String)" : 1}},{ "className" : "org::argouml::activity2::ActivityDiagramPropPanelFactory::PropPanelUMLActivityDiagram" , "selectors" : { "PropPanelUMLActivityDiagram()" : 1}},{ "className" : "org::argouml::language::cpp::reveng::ModelerImpl" , "selectors" : { "ModelerImpl(Project)" : 1 , "assertIsAClassifier(Object)" : 2 , "beginCtor()" : 2 , "beginFunctionDeclaration()" : 1 , "beginXtor(XtorModelerCreator)" : 2 , "endFunctionDeclaration()" : 1 , "endXtor()" : 3 , "findClass(String,Object)" : 1 , "findNamespace(String,Object)" : 1 , "findOrCreateGeneralization(Object,Object)" : 1 , "findOrCreateType(String)" : 2 , "getCurrentNamespace()" : 2 , "getModel()" : 3 , "getProject()" : 3 , "getVoid()" : 3 , "ignore()" : 25 , "isMemberDeclaration()" : 2 , "isXtorIgnorable()" : 1 , "processPtrOperators(String,List)" : 1}},{ "className" : "org::argouml::core::propertypanels::ui::UMLTransitionTargetListModel" , "selectors" : { "UMLTransitionTargetListModel(Object,String)" : 1}},{ "className" : "org::argouml::model::XmiException" , "selectors" : { "XmiException(String)" : 3 , "XmiException(String,String,String,int,int)" : 1 , "XmiException(String,String,String,int,int,Exception)" : 2 , "XmiException(String,Throwable)" : 2 , "XmiException(Throwable)" : 7 , "init(String,String,int,int)" : 2}},{ "className" : "com::nwalsh::saxon::FormatCallout" , "selectors" : { "areaLabel(Element)" : 3 , "formatCallout(???)" : 2}},{ "className" : "org::xml::sax::XMLFilter" , "selectors" : { "setParent(XMLReader)" : 8}},{ "className" : "org::argouml::core::propertypanels::model::GetterSetterManagerImpl::ElementImportGetterSetter::AddElementImportCommand" , "selectors" : { "AddElementImportCommand(Object)" : 1}},{ "className" : "org::argouml::uml::ui::ActionGenerateOne" , "selectors" : { "ActionGenerateOne()" : 2 , "getCandidates()" : 1 , "getCandidates()::Fig" : 1}},{ "className" : "org::argouml::cognitive::ui::ActionOpenDecisions" , "selectors" : { "ActionOpenDecisions()" : 2}},{ "className" : "org::argouml::uml::cognitive::critics::ChildGenDerivedClasses" , "selectors" : { "ChildGenDerivedClasses()" : 1}},{ "className" : "org::argouml::activity2::diagram::BaseDiagram" , "selectors" : { "BaseDiagram(Object)" : 1 , "createDiagramRenderer()" : 1 , "createGraphModel()" : 1 , "getCreateEdgeAction(Object)" : 1 , "getDiagramXmlFile()" : 1 , "getDocument()" : 1 , "getElement(Element,String)" : 2 , "getOwner()" : 1 , "getToolbarActions(Element)" : 2 , "populateClassMaps(Element,Map<Class<?>,String>,Map<String,Class<?>>)" : 1}},{ "className" : "org::argouml::uml::cognitive::critics::CrInvalidFork" , "selectors" : { "CrInvalidFork()" : 1}},{ "className" : "org::argouml::util::osdep::OSXAdapter" , "selectors" : { "OSXAdapter(String,Object,Method)" : 3 , "callTarget(Object)" : 1 , "isCorrectMethod(Method,Object[])" : 1 , "setAboutHandler(Object,Method)" : 1 , "setApplicationEventHandled(Object,boolean)" : 1 , "setFileHandler(Object,Method)" : 1 , "setHandler(OSXAdapter)" : 4 , "setPreferencesHandler(Object,Method)" : 1 , "setQuitHandler(Object,Method)" : 1}},{ "className" : "org::argouml::core::propertypanels::ui::UMLStateMachineContextComboBoxModel" , "selectors" : { "UMLStateMachineContextComboBoxModel(String,Object)" : 1}},{ "className" : "javax::swing::text::Highlighter" , "selectors" : { "addHighlight(int,int,HighlightPainter)" : 6 , "getHighlights()" : 1 , "removeAllHighlights()" : 3 , "removeHighlight(Object)" : 4}},{ "className" : "org::argouml::uml::ui::TabStereotype::UMLModelStereotypeListModel" , "selectors" : { "UMLModelStereotypeListModel()" : 1 , "isValidElement(Object)" : 2 , "isValidEventRemove(PropertyChangeEvent)" : 1}},{ "className" : "org::argouml::language::sql::Utils" , "selectors" : { "getAssociationForName(Object,String)" : 1 , "getAttributeForName(Object,String)" : 2 , "getFkAttributes(Object,Object)" : 1 , "getModuleRoot()" : 1 , "getPrimaryKeyAttributes(Object)" : 1 , "getShortName(String,int)" : 1 , "getSourceAttribute(Object,Object)" : 2 , "isFk(Object)" : 1 , "isNotNull(Object)" : 2 , "isNull(Object)" : 2 , "isPk(Object)" : 3 , "stringsToCommaString(List)" : 4 , "stringsToString(List,String)" : 2}},{ "className" : "org::argouml::notation::providers::EnumerationLiteralNotation" , "selectors" : { "EnumerationLiteralNotation(Object)" : 1}},{ "className" : "org::argouml::uml::cognitive::critics::CrUtilityViolated" , "selectors" : { "CrUtilityViolated()" : 1}},{ "className" : "org::argouml::application::ArgoVersion" , "selectors" : { "init()" : 1}},{ "className" : "org::argouml::uml::diagram::state::ui::FigTransition" , "selectors" : { "<Initializer>()::ArrowHeadGreater" : 1 , "FigTransition(Object,DiagramSettings)" : 2 , "computeRoute(???)" : 1 , "initializeTransition()" : 1 , "renderingChanged()" : 1 , "updateDashed()" : 2}},{ "className" : "org::argouml::uml::diagram::collaboration::ui::CollaborationDiagramPropPanelFactory" , "selectors" : { "CollaborationDiagramPropPanelFactory()" : 1}},{ "className" : "org::argouml::application::events::ArgoGeneratorEventListener" , "selectors" : { "generatorAdded(ArgoGeneratorEvent)" : 1 , "generatorChanged(ArgoGeneratorEvent)" : 1 , "generatorRemoved(ArgoGeneratorEvent)" : 1}},{ "className" : "org::argouml::model::MessageSort" , "selectors" : { "getASynchCall()" : 1 , "getASynchSignal()" : 2 , "getCreateMessage()" : 2 , "getDeleteMessage()" : 2 , "getReply()" : 3 , "getSynchCall()" : 2}},{ "className" : "org::argouml::ui::ContextActionFactoryManager" , "selectors" : { "addContextPopupFactory(ContextActionFactory)" : 1 , "getContextPopupActions()" : 3 , "getFactories()" : 1 , "removeContextPopupFactory(ContextActionFactory)" : 1}},{ "className" : "org::argouml::notation::NotationProvider" , "selectors" : { "addElementListener(Object)" : 19 , "addElementListener(Object,String)" : 10 , "addElementListener(Object,String[])" : 32 , "addElementListener(PropertyChangeListener,Object)" : 1 , "addElementListener(PropertyChangeListener,Object,String)" : 1 , "addElementListener(PropertyChangeListener,Object,String[])" : 1 , "cleanListener()" : 14 , "getParsingHelp()" : 8 , "initialiseListener(Object)" : 4 , "parse(Object,String)" : 8 , "removeAllElementListeners()" : 1 , "removeAllElementListeners(PropertyChangeListener)" : 1 , "removeElementListener(Object)" : 6 , "removeElementListener(PropertyChangeListener,Object)" : 1 , "setRenderer(NotationRenderer)" : 1 , "toString(Object,NotationSettings)" : 23}},{ "className" : "org::argouml::model::euml::CoreHelperEUMLImpl" , "selectors" : { "CoreHelperEUMLImpl(EUMLModelImplementation)" : 1 , "addAllStereotypes(Object,Collection)" : 1 , "addAllStereotypes(Object,Collection)::anonymous(RunnableClass)" : 1 , "addAnnotatedElement(Object,Object)" : 1 , "addAnnotatedElement(Object,Object)::anonymous(RunnableClass)" : 1 , "addClient(Object,Object)" : 1 , "addClient(Object,Object)::anonymous(RunnableClass)" : 1 , "addConnection(Object,int,Object)" : 1 , "addConstraint(Object,Object)::anonymous(RunnableClass)" : 1 , "addFeature(Object,int,Object)" : 1 , "addManifestation(Object,Object)::Artifact" : 1 , "addMethod(Object,Object)::anonymous(RunnableClass)" : 1 , "addOwnedElement(Object,Object)" : 4 , "addOwnedElement(Object,Object,String,Object[])" : 3 , "addParameter(Object,int,Object)" : 1 , "addStereotype(Object,Object)" : 1 , "addSupplier(Object,Object)" : 1 , "addSupplier(Object,Object)::anonymous(RunnableClass)" : 1 , "equalsAggregationKind(Object,String)::Property" : 1 , "getAllAttributes(Object)::Classifier" : 2 , "getAllBehavioralFeatures(Object)" : 1 , "getAllMetatypeNames()::EClass" : 1 , "getAllSupertypes(Object)::Classifier" : 1 , "getAllVisibleElements(Object)::Namespace" : 1 , "getAssociateEndsInh(Object)::Classifier" : 1 , "getAssociatedClassifiers(Object)::Classifier" : 1 , "getAssociationEnd(Object,Object)::Association" : 1 , "getAssociations(Object)::Classifier" : 1 , "getAssociations(Object,Object)::Classifier" : 2 , "getAttributesInh(Object)::Classifier" : 1 , "getBehavioralFeatures(Object)::Classifier" : 1 , "getBody(Object)::Comment" : 1 , "getDependencies(Object,Object)::NamedElement" : 1 , "getDestination(Object)" : 2 , "getDestination(Object)::Association" : 1 , "getDestination(Object)::DirectedRelationship" : 1 , "getDestination(Object)::Property" : 1 , "getExtendedClassifiers(Object)::Classifier" : 1 , "getExtendingElements(Object)::Classifier" : 1 , "getFirstSharedNamespace(Object,Object)::Namespace" : 2 , "getGeneralization(???)" : 1 , "getGeneralization(Object,Object)::Classifier" : 1 , "getOperationsInh(Object)::Classifier" : 1 , "getRealizedInterfaces(Object)::org" : 1 , "getRelationships(Object,Object)::Element" : 2 , "getReturnParameters(Object)::Operation" : 1 , "getSource(Object)" : 2 , "getSource(Object)::Association" : 1 , "getSource(Object)::DirectedRelationship" : 1 , "getSource(Object)::Property" : 1 , "getSpecification(Object)::Behavior" : 1 , "getSubtypes(???)" : 1 , "getSubtypes(Object)::Classifier" : 1 , "getSupertypes(???)" : 1 , "getSupertypes(Object)::Classifier" : 1 , "getUtilizedElements(Object)::Artifact" : 1 , "hasCompositeEnd(Object)::Association" : 1 , "isValidNamespace(Object,Object)" : 2 , "isValidNamespace(Object,Object)::NamedElement" : 1 , "parseMultiplicity(String)" : 1 , "removeAnnotatedElement(Object,Object)::anonymous(RunnableClass)" : 1 , "removeClientDependency(Object,Object)::anonymous(RunnableClass)" : 1 , "removeConnection(Object,Object)::anonymous(RunnableClass)" : 2 , "removeOwnedElement(Object,Object)" : 4 , "removeStereotype(Object,Object)::anonymous(RunnableClass)" : 2 , "removeSupplierDependency(Object,Object)::anonymous(RunnableClass)" : 1 , "setAbstract(Object,boolean)::anonymous(RunnableClass)" : 2 , "setActive(Object,boolean)::anonymous(RunnableClass)" : 1 , "setAggregation2(Object,Object)" : 2 , "setAnnotatedElements(Object,Collection)::anonymous(RunnableClass)" : 2 , "setBody(Object,String)::Comment" : 1 , "setBody(Object,String)::Operation" : 2 , "setChild(Object,Object)::anonymous(RunnableClass)" : 1 , "setConcurrency(Object,Object)::anonymous(RunnableClass)" : 1 , "setInitialValue(Object,Object)::Property" : 1 , "setKind(Object,Object)::Parameter" : 1 , "setKind(Object,Object)::Pseudostate" : 1 , "setLeaf(Object,boolean)::anonymous(RunnableClass)" : 1 , "setMultiplicity(Object,String)::anonymous(RunnableClass)" : 2 , "setMultiplicity(Object,int,int)" : 1 , "setMultiplicity(Object,int,int)::anonymous(RunnableClass)" : 4 , "setName(Object,String)" : 1 , "setName(Object,String)::anonymous(RunnableClass)" : 1 , "setOrdering(Object,Object)::MultiplicityElement" : 1 , "setParent(Object,Object)::anonymous(RunnableClass)" : 1 , "setQuery(Object,boolean)::anonymous(RunnableClass)" : 1 , "setReadOnly(Object,boolean)::anonymous(RunnableClass)" : 1 , "setStatic(Object,boolean)::anonymous(RunnableClass)" : 1 , "setType(Object,Object)" : 1}},{ "className" : "org::argouml::ui::explorer::rules::GoSummaryToIncomingDependency" , "selectors" : { "GoSummaryToIncomingDependency()" : 2}},{ "className" : "org::argouml::sequence2::diagram::FigMessageSpline" , "selectors" : { "FigMessageSpline(Point)" : 2 , "setComplete(???)" : 1 , "setDashed(???)" : 2 , "translateFig(int,int)" : 3}},{ "className" : "org::argouml::core::propertypanels::ui::UMLAssociationRoleBaseComboBoxModel::ActionSetAssociationRoleBase" , "selectors" : { "ActionSetAssociationRoleBase()" : 1}},{ "className" : "org::argouml::language::cpp::reveng::CppImport" , "selectors" : { "createModeler(Project)" : 1 , "getSuffixFilters()" : 1 , "parseFile(Project,File,ImportSettings)" : 1 , "parseFile(Project,File,ImportSettings)::Preprocessor" : 1 , "warnUser(ProgressMonitor)" : 1}},{ "className" : "org::argouml::core::propertypanels::ui::UMLSignalContextListModel::ActionAddContextSignal" , "selectors" : { "ActionAddContextSignal()" : 1}},{ "className" : "com::nwalsh::saxon::ColumnScanEmitter" , "selectors" : { "ColumnScanEmitter(???)" : 1 , "columnCount()" : 1 , "columnWidths()" : 1}},{ "className" : "org::argouml::uml::ui::UMLTableCellRenderer" , "selectors" : { "UMLTableCellRenderer()" : 1}},{ "className" : "org::argouml::uml::diagram::use_case::ui::UMLUseCaseDiagram" , "selectors" : { "UMLUseCaseDiagram()" : 1 , "UMLUseCaseDiagram(Object)" : 2 , "createDiagramElement(Object,Rectangle)" : 1 , "getActionActor()" : 1 , "getActionAggregation()" : 1 , "getActionAssociation()" : 1 , "getActionComposition()" : 1 , "getActionDependency()" : 1 , "getActionExtend()" : 1 , "getActionExtensionPoint()" : 1 , "getActionGeneralize()" : 1 , "getActionInclude()" : 1 , "getActionUniAggregation()" : 1 , "getActionUniAssociation()" : 1 , "getActionUniComposition()" : 1 , "getActionUseCase()" : 1 , "getAssociationActions()" : 1 , "setNamespace(Object)" : 2 , "setNamespace(Object)::LayerPerspectiveMutable" : 1}},{ "className" : "org::argouml::uml::diagram::ui::FigMultiplicity" , "selectors" : { "FigMultiplicity(Object,DiagramSettings)" : 2}},{ "className" : "org::argouml::cognitive::Goal" , "selectors" : { "Goal(String,int)" : 4 , "getName()" : 5 , "getPriority()" : 3 , "getUnspecifiedGoal()" : 4 , "setPriority(int)" : 1}},{ "className" : "com::nwalsh::saxon::FormatTextCallout" , "selectors" : { "FormatTextCallout(???)" : 1}},{ "className" : "org::argouml::uml::ui::SaveSVGAction2" , "selectors" : { "SaveSVGAction2(String,Icon,boolean)" : 1 , "SaveSVGAction2(String,boolean)" : 1 , "saveGraphics(OutputStream,Editor,Rectangle)::SVGGraphics2D" : 1}},{ "className" : "org::argouml::uml::GenCompositeClasses2" , "selectors" : { "GenCompositeClasses2()" : 1 , "collectChildren(Object)" : 1 , "getInstance()" : 3}},{ "className" : "org::argouml::notation::providers::uml::MultiplicityNotationUml" , "selectors" : { "setMultiplicity(Object,String)" : 2}},{ "className" : "org::argouml::core::propertypanels::ui::RowSelector" , "selectors" : { "RowSelector(DefaultListModel)" : 1 , "RowSelector(DefaultListModel,boolean,boolean)" : 2 , "addListSelectionListener(ListSelectionListener)" : 1 , "clearSelection()" : 1 , "getExpansion()::ToolBox" : 1 , "getList()" : 29 , "getModel()" : 8 , "removeListSelectionListener(ListSelectionListener)" : 1}},{ "className" : "org::argouml::uml::diagram::ArgoDiagram" , "selectors" : { "addPropertyChangeListener(String,PropertyChangeListener)" : 4 , "addVetoableChangeListener(VetoableChangeListener)" : 1 , "countContained(List)" : 2 , "createDiagramElement(Object,Rectangle)" : 3 , "damage()" : 1 , "encloserChanged(???)" : 1 , "getContainingFig(???)" : 4 , "getDependentElement()" : 1 , "getDiagramSettings()" : 9 , "getEdges()" : 1 , "getEdges(???)" : 1 , "getGraphModel(???)" : 14 , "getItemUID()" : 2 , "getLayer(???)" : 7 , "getName()" : 24 , "getNamespace()" : 14 , "getNodes()" : 3 , "getNodes(???)" : 1 , "getOwner()" : 3 , "getProject()" : 2 , "postLoad()" : 3 , "postSave()" : 1 , "preSave()" : 1 , "presentationFor(???)" : 14 , "remove()" : 2 , "remove(???)" : 1 , "removePropertyChangeListener(String,PropertyChangeListener)" : 3 , "repair()" : 1 , "setDiagramSettings(DiagramSettings)" : 4 , "setModelElementNamespace(Object,Object)" : 2 , "setName(???)" : 1 , "setName(String)" : 7 , "setProject(Project)" : 1}},{ "className" : "org::argouml::core::propertypanels::model::GetterSetterManagerImpl::EffectGetterSetter" , "selectors" : { "EffectGetterSetter()" : 1 , "getOptions(Object,Collection<Class<?>>)" : 1}},{ "className" : "org::argouml::uml::diagram::DiagramEdgeSettings" , "selectors" : { "DiagramEdgeSettings(Object,Object,Object)" : 7 , "getDestinationConnector()" : 1 , "getSourceConnector()" : 1}},{ "className" : "org::argouml::kernel::ProjectSettings" , "selectors" : { "ProjectSettings()" : 1 , "ProjectSettings(Project)" : 1 , "fireNotationEvent(ConfigurationKey,String,String)" : 4 , "fireNotationEvent(ConfigurationKey,boolean,boolean)" : 19 , "fireNotationEvent(ConfigurationKey,int,int)" : 2 , "getDefaultDiagramSettings()" : 19 , "getDefaultShadowWidthValue()" : 1 , "getDefaultStereotypeViewValue()" : 1 , "getHideBidirectionalArrowsValue()" : 1 , "getNotationLanguage()" : 6 , "getNotationName()" : 1 , "getNotationSettings()" : 6 , "getShowAssociationNamesValue()" : 1 , "getShowInitialValueValue()" : 1 , "getShowMultiplicityValue()" : 1 , "getShowPropertiesValue()" : 1 , "getShowSingularMultiplicitiesValue()" : 1 , "getShowStereotypesValue()" : 4 , "getShowTypesValue()" : 1 , "getShowVisibilityValue()" : 1 , "getUseGuillemotsValue()" : 3 , "init()" : 1 , "init(boolean,ConfigurationKey)" : 1 , "setDefaultShadowWidth(int)" : 1 , "setHideBidirectionalArrows(boolean)" : 1 , "setNotationLanguage(NotationName)" : 1 , "setNotationLanguage(String)" : 3 , "setShowAssociationNames(boolean)" : 1 , "setShowInitialValue(boolean)" : 1 , "setShowMultiplicity(boolean)" : 1 , "setShowProperties(boolean)" : 1 , "setShowSingularMultiplicities(boolean)" : 1 , "setShowStereotypes(boolean)" : 3 , "setShowTypes(boolean)" : 1 , "setShowVisibility(boolean)" : 1 , "setUseGuillemots(String)" : 1 , "setUseGuillemots(boolean)" : 2}},{ "className" : "org::argouml::uml::diagram::ui::FigEdgeModelElement" , "selectors" : { "FigEdgeModelElement(Object,DiagramSettings)" : 12 , "addElementListener(Object)" : 1 , "addElementListener(Object,String)" : 4 , "addElementListener(Object,String[])" : 3 , "addElementListeners(Set<Object[]>)" : 1 , "allowRemoveFromDiagram(boolean)" : 1 , "calcBounds(???)" : 2 , "computeRoute(???)" : 4 , "computeRouteImpl()" : 2 , "damage()" : 5 , "deepUpdateFontRecursive(Font,Object)" : 2 , "deepUpdateFontRecursive(Font,Object)::FigGroup" : 1 , "deepUpdateFontRecursive(Font,Object)::FigText" : 1 , "deleteFromModel()" : 1 , "deleteFromModel()::Fig" : 1 , "determineFigNodes()" : 3 , "determineFigNodes()::FigNode" : 2 , "getApplyStereotypeActions()" : 1 , "getApplyStereotypeActions()::Fig" : 1 , "getDestFigNode(???)" : 2 , "getDestination()" : 2 , "getEdgePort()" : 20 , "getLayer(???)" : 4 , "getName()" : 1 , "getNameBounds()" : 2 , "getNameFigFontStyle()" : 1 , "getNotationProviderType()" : 2 , "getNotationSettings()" : 6 , "getPopUpActions(MouseEvent)" : 3 , "getPopupAddOffset()" : 7 , "getProject()" : 2 , "getSettings()" : 9 , "getSource()" : 2 , "getSourceFigNode(???)" : 2 , "getSquaredDistance(Point,Point)" : 2 , "getStereotypeFig()" : 5 , "hitClarifier(int,int)" : 2 , "initFigs()" : 1 , "initNotationProviders(Object)" : 4 , "initOwner(Object)" : 1 , "isReadOnly()" : 3 , "layoutEdge(???)" : 1 , "layoutThisToSelf()" : 1 , "layoutThisToSelf()::FigPoly" : 1 , "makeEdgePort()" : 7 , "modelChanged(PropertyChangeEvent)" : 3 , "paint(???)" : 5 , "propertyChange(PropertyChangeEvent)" : 1 , "removeElementListener(Object)" : 4 , "removeElementListeners(Set<Object[]>)" : 2 , "removeFromDiagram()" : 3 , "removeFromDiagramImpl()" : 6 , "renderingChanged()" : 8 , "setFig(???)" : 7 , "setLayer(???)" : 1 , "setLineColor(Color)" : 3 , "showHelp(String)" : 1 , "textEditStarted(???)" : 3 , "textEdited(???)" : 2 , "translate(???)" : 1 , "updateElementListeners(Set<Object[]>)" : 5 , "updateFont()" : 2 , "updateLayout(UmlChangeEvent)" : 3 , "updateListeners(Object,Object)" : 1 , "updateNameText()" : 3 , "updateStereotypeText()" : 2}},{ "className" : "org::argouml::core::propertypanels::ui::UMLSignalContextListModel" , "selectors" : { "UMLSignalContextListModel(Object)" : 1}},{ "className" : "org::argouml::cognitive::ui::GoListToTypeToItem" , "selectors" : { "GoListToTypeToItem()" : 2}},{ "className" : "org::argouml::uml::diagram::use_case::ui::PropPanelUMLUseCaseDiagram" , "selectors" : { "PropPanelUMLUseCaseDiagram()" : 1}},{ "className" : "org::argouml::uml::reveng::SettingsTypes::Setting2" , "selectors" : { "getDescription()" : 2}},{ "className" : "org::argouml::notation2::UmlNotationTextEvent" , "selectors" : { "UmlNotationTextEvent(String,boolean,boolean,boolean)" : 2}},{ "className" : "org::argouml::uml::diagram::StereotypeContainer" , "selectors" : { "isStereotypeVisible()" : 2 , "setStereotypeVisible(boolean)" : 3}},{ "className" : "org::argouml::ui::explorer::PerspectiveManagerListener" , "selectors" : { "addPerspective(Object)" : 1 , "removePerspective(Object)" : 1}},{ "className" : "org::argouml::model::mdr::FacadeMDRImpl" , "selectors" : { "FacadeMDRImpl(MDRModelImplementation)" : 1 , "getAction(Object)" : 1 , "getAction(Object)::Argument" : 1 , "getActionSequence(Object)::Action" : 1 , "getActions(Object)::ActionSequence" : 1 , "getActivator(Object)::Message" : 1 , "getActivityGraph(Object)::Partition" : 1 , "getActualArguments(Object)::Action" : 1 , "getAddition(Object)::Include" : 1 , "getAggregation1(Object)" : 1 , "getAggregation1(Object)::AssociationEnd" : 1 , "getAlias(Object)::ElementImport" : 1 , "getAnnotatedElements(Object)::Comment" : 1 , "getArguments(Object)::Action" : 1 , "getArguments(Object)::Binding" : 1 , "getAssociatedClasses(Object)::AssociationEnd" : 1 , "getAssociatedClasses(Object)::UmlAssociation" : 1 , "getAssociation(Object)::AssociationEnd" : 1 , "getAssociation(Object)::Link" : 1 , "getAssociationEnd(Object,Object)::UmlAssociation" : 1 , "getAssociationEnds(Object)" : 2 , "getBase(Object)::AssociationEndRole" : 1 , "getBase(Object)::AssociationRole" : 1 , "getBase(Object)::ClassifierRole" : 1 , "getBase(Object)::Extend" : 1 , "getBase(Object)::Include" : 1 , "getBaseClasses(Object)::Stereotype" : 1 , "getBases(Object)::ClassifierRole" : 1 , "getBehavioralFeature(Object)::Parameter" : 1 , "getBinding(Object)::TemplateArgument" : 1 , "getBody(Object)::Comment" : 1 , "getBody(Object)::Constraint" : 1 , "getBody(Object)::Expression" : 1 , "getBody(Object)::Method" : 1 , "getBound(Object)::SynchState" : 1 , "getChangeExpression(Object)::ChangeEvent" : 1 , "getChangeability(Object)::AssociationEnd" : 1 , "getChangeability(Object)::StructuralFeature" : 1 , "getClassNull(Object)" : 1 , "getClassifier(Object)::AssociationEnd" : 1 , "getClassifiers(Object)::Instance" : 1 , "getClients(Object)::Dependency" : 1 , "getComments(Object)::ModelElement" : 1 , "getCommunicationConnection(Object)::Message" : 1 , "getCommunicationLink(Object)::Stimulus" : 1 , "getComponentInstance(Object)::Instance" : 1 , "getConcurrency(Object)::Operation" : 1 , "getCondition(Object)::Extend" : 1 , "getConnections(Object)" : 1 , "getConnections(Object)::Link" : 1 , "getConnections(Object)::UmlAssociation" : 1 , "getConstrainedElements(Object)::Constraint" : 1 , "getConstrainingElements(Object)::Collaboration" : 1 , "getConstraints(Object)::ModelElement" : 1 , "getContainer(Object)" : 4 , "getContainer(Object)::ElementResidence" : 1 , "getContainer(Object)::StateVertex" : 1 , "getContainer(Object)::Transition" : 1 , "getContents(Object)::Partition" : 1 , "getContext(Object)::Interaction" : 1 , "getContext(Object)::StateMachine" : 1 , "getDefaultElement(Object)::TemplateParameter" : 1 , "getDefaultValue(Object)::Parameter" : 1 , "getDeferrableEvents(Object)::State" : 1 , "getDeployedComponents(Object)::Node" : 1 , "getDeploymentLocations(Object)::Component" : 1 , "getDiscriminator(Object)::Generalization" : 1 , "getDispatchAction(Object)::Stimulus" : 1 , "getDoActivity(Object)::State" : 1 , "getEffect(Object)::Transition" : 1 , "getElementImports(Object)::UmlPackage" : 1 , "getEntry(Object)::State" : 1 , "getEnumeration(Object)::EnumerationLiteral" : 1 , "getEnumerationLiterals(Object)::Enumeration" : 1 , "getExit(Object)::State" : 1 , "getExpression(Object)::Argument" : 1 , "getExpression(Object)::ChangeEvent" : 1 , "getExpression(Object)::Guard" : 1 , "getExpression(Object)::TimeEvent" : 1 , "getExtends(Object)::UseCase" : 1 , "getExtension(Object)::Extend" : 1 , "getExtensionPoint(Object,int)::Extend" : 1 , "getExtensionPoints(Object)::Extend" : 1 , "getExtensionPoints(Object)::UseCase" : 1 , "getFeatures(Object)::Classifier" : 1 , "getGeneral(Object)::Generalization" : 1 , "getGeneralizations(Object)::GeneralizableElement" : 1 , "getGuard(Object)::Transition" : 1 , "getIcon(Object)::Stereotype" : 1 , "getImportedElement(Object)::ElementImport" : 1 , "getImportedElements(Object)::UmlPackage" : 1 , "getInStates(Object)::ClassifierInState" : 1 , "getIncludes(Object)::UseCase" : 1 , "getIncomings(Object)" : 2 , "getIncomings(Object)::StateVertex" : 1 , "getIncomings(Object)::Transition" : 1 , "getInitialValue(Object)::Attribute" : 1 , "getInnerContainingModel(Object)" : 1 , "getInstance(Object)::AttributeLink" : 1 , "getInstance(Object)::LinkEnd" : 1 , "getInteraction(Object)::Message" : 1 , "getInteractions(Object)::Collaboration" : 1 , "getInternalTransitions(Object)::State" : 1 , "getKind(Object)::Parameter" : 1 , "getKind(Object)::Pseudostate" : 1 , "getLink(Object)::LinkEnd" : 1 , "getLinkEnds(Object)::Instance" : 1 , "getLocation(Object)::ExtensionPoint" : 1 , "getLower(Object)" : 2 , "getMessages(Object)::AssociationRole" : 1 , "getMessages(Object)::Interaction" : 1 , "getModelElement(Object)::ElementImport" : 1 , "getModelElement(Object)::TaggedValue" : 1 , "getModelElement(Object)::TemplateArgument" : 1 , "getModelElementAssociated(Object,boolean)" : 2 , "getModelElementAssociated(Object,boolean)::ArrayList" : 1 , "getModelElementContainer(Object)" : 4 , "getModelElementContainer(Object)::RefObject" : 1 , "getMofClass(???)" : 1 , "getName(Object)" : 2 , "getName(Object)::Expression" : 1 , "getNamespace(Object)::ModelElement" : 1 , "getNextEnd(Object)::AssociationEnd" : 1 , "getNodeInstance(Object)::ComponentInstance" : 1 , "getOperation(Object)::CallAction" : 1 , "getOperation(Object)::CallEvent" : 1 , "getOrdering(Object)::AssociationEnd" : 1 , "getOtherAssociationEnds(Object)::ArrayList" : 1 , "getOtherAssociationEnds(Object)::AssociationEnd" : 1 , "getOtherLinkEnds(Object)::ArrayList" : 1 , "getOtherLinkEnds(Object)::LinkEnd" : 1 , "getOutgoings(Object)" : 2 , "getOutgoings(Object)::StateVertex" : 1 , "getOutgoings(Object)::Transition" : 1 , "getOwnedElements(Object)::Namespace" : 1 , "getOwner(Object)::Attribute" : 2 , "getOwner(Object)::Feature" : 1 , "getOwner(Object)::TagDefinition" : 1 , "getPackage(Object)::ElementImport" : 1 , "getParameter(Object)::TemplateParameter" : 1 , "getParameters(Object)" : 1 , "getParameters(Object)::ObjectFlowState" : 1 , "getParametersList(Object)::BehavioralFeature" : 1 , "getParametersList(Object)::Event" : 1 , "getPartitions(Object)::ActivityGraph" : 1 , "getPowertype(Object)::Generalization" : 1 , "getPowertypeRanges(Object)::Classifier" : 1 , "getPredecessors(Object)::ArrayList" : 1 , "getPredecessors(Object)::Message" : 1 , "getProxy(???)" : 1 , "getQualifiers(Object)::AssociationEnd" : 1 , "getRaisedExceptions(Object)" : 1 , "getReceiver(Object)::Message" : 1 , "getReceiver(Object)::Stimulus" : 1 , "getRecurrence(Object)::Action" : 1 , "getRefOutermostPackage(Object)::ModelElement" : 1 , "getReferenceOrAttribute(RefFeatured,Object,Collection,boolean)::Reference" : 1 , "getReferenceOrAttribute(RefFeatured,Object,Collection,boolean)::javax" : 1 , "getReferenceState(Object)::StubState" : 1 , "getRepresentedClassifier(Object)::Collaboration" : 1 , "getRepresentedOperation(Object)::Collaboration" : 1 , "getResident(Object)::ElementResidence" : 1 , "getResidentElements(Object)::Component" : 1 , "getResidents(Object)::Component" : 1 , "getResidents(Object)::ComponentInstance" : 1 , "getResidents(Object)::ElementResidence" : 1 , "getResidents(Object)::NodeInstance" : 1 , "getScript(Object)::Action" : 1 , "getSender(Object)::Message" : 1 , "getSender(Object)::Stimulus" : 1 , "getSignal(Object)::Reception" : 1 , "getSignal(Object)::SendAction" : 1 , "getSignal(Object)::SignalEvent" : 1 , "getSource(Object)" : 1 , "getSource(Object)::Transition" : 1 , "getSourceFlows(Object)::ModelElement" : 1 , "getSources(Object)::Flow" : 1 , "getSpecific(Object)::Generalization" : 1 , "getSpecification(Object)::Operation" : 1 , "getSpecification(Object)::Reception" : 1 , "getSpecifications(Object)::AssociationEnd" : 1 , "getState(Object)" : 1 , "getStateMachine(Object)::State" : 1 , "getStateMachine(Object)::Transition" : 1 , "getStereotypes(Object)" : 2 , "getStereotypes(Object)::ModelElement" : 1 , "getStructuralFeatures(Object)" : 1 , "getSubmachine(Object)::SubmachineState" : 1 , "getSubmachineStates(Object)::StateMachine" : 1 , "getSubvertices(Object)::CompositeState" : 1 , "getSuppliers(Object)::Dependency" : 1 , "getTag(Object)" : 1 , "getTag(Object)::TaggedValue" : 1 , "getTagDefinition(Object)::TaggedValue" : 1 , "getTagDefinitions(Object)::Stereotype" : 1 , "getTaggedValue(Object,String)" : 1 , "getTaggedValuesCollection(Object)" : 1 , "getTaggedValuesCollection(Object)::ModelElement" : 1 , "getTarget(Object)" : 1 , "getTarget(Object)::Transition" : 1 , "getTargetFlows(Object)::ModelElement" : 1 , "getTargetScope(Object)::AssociationEnd" : 1 , "getTargetScope(Object)::StructuralFeature" : 1 , "getTemplate(Object)::TemplateParameter" : 1 , "getTemplateParameters(Object)::ModelElement" : 1 , "getTop(Object)::StateMachine" : 1 , "getTransition(Object)" : 3 , "getTransition(Object)::Guard" : 1 , "getTransitions(Object)" : 3 , "getTransitions(Object)::State" : 1 , "getTransitions(Object)::StateMachine" : 1 , "getTrigger(Object)::Transition" : 1 , "getTriggers(Object)::Transition" : 1 , "getType(Object)::AssociationEnd" : 1 , "getType(Object)::ClassifierInState" : 1 , "getType(Object)::ObjectFlowState" : 1 , "getType(Object)::Parameter" : 1 , "getType(Object)::StructuralFeature" : 1 , "getType(Object)::TagDefinition" : 1 , "getType(Object)::TaggedValue" : 1 , "getUMLClassName(Object)" : 4 , "getUUID(Object)" : 1 , "getUUID(Object)::RefBaseObject" : 1 , "getUpper(Object)" : 2 , "getUseCase(Object)::ExtensionPoint" : 1 , "getValue(Object)::Argument" : 1 , "getValue(Object)::AttributeLink" : 1 , "getValueOfTag(Object)" : 2 , "getValueOfTag(Object)::EnumerationLiteral" : 1 , "getVisibility(Object)::ElementImport" : 1 , "getVisibility(Object)::ElementResidence" : 1 , "getVisibility(Object)::ModelElement" : 1 , "getWhen(Object)::TimeEvent" : 1 , "hasReturnParameterDirectionKind(Object)" : 1 , "illegalArgument(Object)" : 8 , "illegalArgumentBoolean(Object)" : 25 , "illegalArgumentCollection(Object)" : 84 , "illegalArgumentInt(Object)" : 1 , "illegalArgumentList(Object)" : 13 , "illegalArgumentObject(Object)" : 81 , "illegalArgumentString(Object)" : 7 , "isA(String,Object)::RefObject" : 1 , "isAAction(Object)" : 4 , "isAAssociationEnd(Object)" : 3 , "isAChangeEvent(Object)" : 1 , "isAComponent(Object)" : 1 , "isAComponentInstance(Object)" : 1 , "isACompositeState(Object)" : 2 , "isADependency(Object)" : 1 , "isAEnumeration(Object)" : 1 , "isAEvent(Object)" : 4 , "isAGuard(Object)" : 3 , "isAInteraction(Object)" : 2 , "isALink(Object)" : 1 , "isAModel(Object)" : 1 , "isAMultiplicity(Object)" : 2 , "isAMultiplicityRange(Object)" : 2 , "isANodeInstance(Object)" : 1 , "isAOperation(Object)" : 1 , "isAPseudostateKind(Object)" : 1 , "isAReception(Object)" : 1 , "isAState(Object)" : 1 , "isAStateMachine(Object)" : 2 , "isAStateVertex(Object)" : 2 , "isAStereotype(Object)" : 1 , "isAStructuralFeature(Object)" : 1 , "isATimeEvent(Object)" : 1 , "isATransition(Object)" : 6 , "isAUMLElement(Object)" : 7 , "isAbstract(Object)::GeneralizableElement" : 1 , "isAbstract(Object)::Operation" : 1 , "isAbstract(Object)::Reception" : 1 , "isAbstract(Object)::UmlAssociation" : 1 , "isActive(Object)::UmlClass" : 1 , "isAggregate(Object)::AssociationEnd" : 1 , "isAsynchronous(Object)::Action" : 1 , "isComposite(Object)::AssociationEnd" : 1 , "isConcurrent(Object)" : 1 , "isConcurrent(Object)::CompositeState" : 1 , "isConstructor(Object)::Method" : 1 , "isFrozen(Object)::AssociationEnd" : 1 , "isInitialized(Object)::Attribute" : 1 , "isLeaf(Object)::GeneralizableElement" : 1 , "isLeaf(Object)::Operation" : 1 , "isLeaf(Object)::Reception" : 1 , "isNavigable(Object)::AssociationEnd" : 1 , "isPrimaryObject(Object)::ModelElement" : 1 , "isQuery(Object)::BehavioralFeature" : 1 , "isReadOnly(Object)::AssociationEnd" : 1 , "isReadOnly(Object)::StructuralFeature" : 1 , "isRoot(Object)::GeneralizableElement" : 1 , "isRoot(Object)::Operation" : 1 , "isRoot(Object)::Reception" : 1 , "isSpecification(Object)::ElementImport" : 1 , "isSpecification(Object)::ModelElement" : 1 , "isStatic(Object)::AssociationEnd" : 1 , "isStatic(Object)::Feature" : 1 , "isStereotype(Object,String)" : 4 , "isStereotype(Object,String)::ModelElement" : 1 , "isSynch(Object)::ObjectFlowState" : 1 , "isTop(Object)::CompositeState" : 1 , "toString(Object)" : 1}},{ "className" : "org::argouml::language::csharp::importer::csparser::nodes::expressions::PostIncrementExpression" , "selectors" : { "PostIncrementExpression(ExpressionNode)" : 1}},{ "className" : "org::argouml::uml::reveng::idl::ParseStateException" , "selectors" : { "ParseStateException(String)" : 1}},{ "className" : "org::argouml::core::propertypanels::model::GetterSetterManagerImpl::Removeable" , "selectors" : { "getRemoveCommand(Object,Object)" : 1}},{ "className" : "org::argouml::uml::cognitive::critics::CrInterfaceAllPublic" , "selectors" : { "CrInterfaceAllPublic()" : 1}},{ "className" : "org::argouml::uml::diagram::ui::ActionAggregation" , "selectors" : { "ActionAggregation(Object,String)" : 6 , "ActionAggregation(String,Object,Object,int)" : 1 , "getDescription(Object,Object,int)" : 1 , "newActionAggregation(Object,Object,int)" : 5 , "oldActionPerformed(ActionEvent)" : 1}},{ "className" : "org::argouml::uml::cognitive::critics::CrAlreadyRealizes" , "selectors" : { "CrAlreadyRealizes()" : 1}},{ "className" : "org::argouml::uml::diagram::DiagramUndoManager" , "selectors" : { "DiagramUndoManager()" : 1}},{ "className" : "org::argouml::notation::NotationRenderer" , "selectors" : { "calcBounds(???)" : 1 , "deleteFromModel(???)" : 1 , "getMinimumSize(???)" : 1 , "getNotationSettings(NotationProvider)" : 1 , "getOwner(NotationProvider)" : 1 , "getPopUpActions(???)" : 1 , "notationRenderingChanged(NotationProvider,String)" : 1 , "propertyChange(???)" : 1 , "removeFromDiagram(???)" : 1 , "setEnclosingFig(???)" : 1 , "setFillColor(???)" : 1 , "setLayer(???)" : 1 , "setLineColor(???)" : 1 , "setLineWidth(???)" : 2 , "setOwner(???)" : 1 , "setTextColor(???)" : 1}},{ "className" : "org::argouml::application::events::ArgoProfileEventListener" , "selectors" : { "profileAdded(ArgoProfileEvent)" : 1 , "profileRemoved(ArgoProfileEvent)" : 1}},{ "className" : "org::argouml::uml::diagram::ui::InitDiagramAppearanceUI" , "selectors" : { "InitDiagramAppearanceUI()" : 1}},{ "className" : "org::argouml::model::mdr::DataTypesHelperMDRImpl" , "selectors" : { "DataTypesHelperMDRImpl(MDRModelImplementation)" : 1 , "getBody(Object)::Expression" : 1 , "getLanguage(Object)::Expression" : 1 , "multiplicityToString(Object)::Multiplicity" : 1 , "setBody(Object,String)::Expression" : 1 , "setLanguage(Object,String)::Expression" : 1}},{ "className" : "org::argouml::state2::diagram::FigEntryPoint" , "selectors" : { "FigEntryPoint(Object,Rectangle,DiagramSettings)" : 1}},{ "className" : "org::argouml::language::java::reveng::classfile::ObjectAST" , "selectors" : { "setObjectValue(Object)" : 1}},{ "className" : "org::argouml::transformer::Transformer" , "selectors" : { "actions(Project,Object)" : 1 , "canTransform(Object)" : 1}},{ "className" : "org::argouml::profile::init::ProfileLoader" , "selectors" : { "ProfileLoader()" : 1 , "doLoad()" : 1 , "huntForProfilesInDir(String)" : 1 , "loadJavaCriticsForProfile(Attributes,ClassLoader)" : 1 , "loadManifestDependenciesForProfile(Attributes)" : 1 , "loadProfilesFromJarFile(Manifest,File,ClassLoader)" : 1}},{ "className" : "org::argouml::ui::explorer::rules::GoModelElementToTemplateParameter" , "selectors" : { "GoModelElementToTemplateParameter()" : 3}},{ "className" : "org::argouml::notation::providers::uml::AssociationNameNotationUml" , "selectors" : { "parseAssociationName(Object,String)" : 1 , "toString(Object,Boolean,boolean,boolean,boolean,boolean)" : 1}},{ "className" : "org::argouml::ui::AboutBox" , "selectors" : { "AboutBox(Frame,boolean)" : 3 , "createPane(String)" : 5 , "getCredits()" : 1 , "getVersion()" : 1 , "localize(String)" : 18 , "setLocationRelativeTo(???)" : 1 , "setVisible(???)" : 1}},{ "className" : "org::argouml::ui::explorer::rules::GoInteractionToMessages" , "selectors" : { "GoInteractionToMessages()" : 2}},{ "className" : "org::argouml::uml::ui::TabTaggedValues" , "selectors" : { "TabTaggedValues()" : 1 , "TabTaggedValues()::ToolBar" : 1 , "resizeColumns()" : 1 , "setTarget(Object)" : 4 , "setTarget(Object)::Fig" : 1 , "setTargetInternal(Object)" : 3 , "shouldBeEnabled(Object)::Fig" : 1 , "stopEditing()" : 2}},{ "className" : "javax::swing::ListModel" , "selectors" : { "addListDataListener(ListDataListener)" : 13 , "getElementAt(int)" : 105 , "getSize()" : 156 , "removeListDataListener(ListDataListener)" : 10}},{ "className" : "org::argouml::uml::diagram::static_structure::ui::FigLink" , "selectors" : { "FigLink(Object,DiagramSettings)" : 2 , "getDestPortFig(???)" : 1 , "getSourcePortFig(???)" : 1 , "initialize()" : 1 , "setDestFigNode(???)" : 1 , "setDestPortFig(???)" : 1 , "setSourceFigNode(???)" : 1 , "setSourcePortFig(???)" : 1 , "updateListeners(Object,Object)" : 1 , "updateNameText()" : 1}},{ "className" : "org::argouml::uml::diagram::deployment::ui::InitDeploymentDiagram" , "selectors" : { "InitDeploymentDiagram()" : 1}},{ "className" : "org::argouml::uml::cognitive::critics::CrInvalidPseudoStateTrigger" , "selectors" : { "CrInvalidPseudoStateTrigger()" : 1}},{ "className" : "org::argouml::core::propertypanels::model::GetterSetterManagerImpl::ClassifierGetterSetter::AddCommand" , "selectors" : { "AddCommand(Object)" : 1}},{ "className" : "org::argouml::core::propertypanels::ui::UMLUseCaseIncludeListModel" , "selectors" : { "UMLUseCaseIncludeListModel(Object)" : 1}},{ "className" : "org::argouml::core::propertypanels::ui::UMLPartitionActivityGraphListModel" , "selectors" : { "UMLPartitionActivityGraphListModel(Object,String)" : 1}},{ "className" : "org::argouml::uml::ui::SourcePathDialog" , "selectors" : { "SourcePathDialog()" : 1 , "buttonOkActionPerformed()" : 1 , "deleteSelectedSettings()" : 1 , "getSelectedIndexes()" : 1 , "setVisible(???)" : 1}},{ "className" : "org::argouml::language::java::reveng::JavaImportSettings" , "selectors" : { "JavaImportSettings()" : 1 , "getImportSettings()" : 2 , "getInstance()" : 8 , "getPathList()" : 1 , "isAttributeSelected()" : 2 , "isDatatypeSelected()" : 2 , "saveSettings()" : 1}},{ "className" : "org::argouml::ui::explorer::ActionDeployProfile" , "selectors" : { "ActionDeployProfile(Object)" : 1 , "saveProfile(String)" : 1}},{ "className" : "org::argouml::uml::cognitive::critics::CrTooManyAssoc" , "selectors" : { "CrTooManyAssoc()" : 1}},{ "className" : "org::argouml::uml::diagram::activity::ui::UMLActivityDiagram" , "selectors" : { "UMLActivityDiagram()" : 1 , "UMLActivityDiagram(Object,Object)" : 1 , "createGraphModel()" : 2 , "getActionActionSequence()" : 1 , "getActionCallAction()" : 1 , "getActionCallEvent()" : 1 , "getActionCallState()" : 1 , "getActionChangeEvent()" : 1 , "getActionCreateAction()" : 1 , "getActionDestroyAction()" : 1 , "getActionFinalPseudoState()" : 1 , "getActionForkPseudoState()" : 1 , "getActionGuard()" : 1 , "getActionJoinPseudoState()" : 1 , "getActionJunctionPseudoState()" : 1 , "getActionObjectFlowState()" : 1 , "getActionReturnAction()" : 1 , "getActionSendAction()" : 1 , "getActionSignalEvent()" : 1 , "getActionStartPseudoState()" : 1 , "getActionState()" : 1 , "getActionSwimlane()" : 1 , "getActionTerminateAction()" : 1 , "getActionTimeEvent()" : 1 , "getActionTransition()" : 1 , "getActionUninterpretedAction()" : 1 , "getEffectActions()" : 1 , "getOwner()" : 1 , "getStateMachine()" : 6 , "getTriggerActions()" : 1 , "isStateInPartition(Object,Object)" : 1 , "setup(Object,Object)" : 4 , "setup(Object,Object)::LayerPerspectiveMutable" : 1}},{ "className" : "org::argouml::uml::diagram::ui::FigStereotype" , "selectors" : { "FigStereotype(Object,Rectangle,DiagramSettings)" : 2 , "getOwner(???)" : 3 , "initialize()" : 1 , "setText()" : 2 , "setText(String)" : 1 , "setVisible(???)" : 1}},{ "className" : "org::argouml::ui::explorer::PerspectiveConfigurator::DuplicatePerspectiveListener" , "selectors" : { "DuplicatePerspectiveListener()" : 1}},{ "className" : "com::nwalsh::xalan::FormatDingbatCallout" , "selectors" : { "FormatDingbatCallout(int,boolean)" : 1}},{ "className" : "org::argouml::uml::diagram::ui::StylePanelFigMessage" , "selectors" : { "setTargetArrow()" : 1}},{ "className" : "org::argouml::language::csharp::importer::csparser::members::InterfaceMethodNode" , "selectors" : { "InterfaceMethodNode()" : 1}},{ "className" : "org::argouml::uml::cognitive::critics::CrMissingClassName" , "selectors" : { "CrMissingClassName()" : 1}},{ "className" : "org::argouml::cognitive::GoalModel" , "selectors" : { "GoalModel()" : 1 , "addGoal(Goal)" : 2 , "getGoalList()" : 3 , "hasGoal(String)" : 1 , "removeGoal(Goal)" : 1 , "setGoalPriority(String,int)" : 1 , "startDesiring(String)" : 1 , "stopDesiring(String)" : 1}},{ "className" : "org::argouml::uml::diagram::static_structure::layout::ClassdiagramNote" , "selectors" : { "ClassdiagramNote(???)" : 1 , "first()" : 8 , "getWeight()" : 2}},{ "className" : "org::argouml::core::propertypanels::model::GetterSetterManagerImpl::ReceptionGetterSetter::AddCommand" , "selectors" : { "AddCommand(Object)" : 1}},{ "className" : "org::argouml::core::propertypanels::model::GetterSetterManagerImpl::ElementImportGetterSetter" , "selectors" : { "ElementImportGetterSetter()" : 1 , "getOptions(Object,Collection<Class<?>>)" : 1}},{ "className" : "org::argouml::uml::ui::behavior::state_machines::ActionNewSynchState" , "selectors" : { "ActionNewSynchState()" : 1}},{ "className" : "org::argouml::uml::diagram::static_structure::ui::FigPackage::PackageBackground" , "selectors" : { "PackageBackground(int,int,int,int,int,int)" : 1 , "getFillColor(???)" : 1 , "isFilled(???)" : 1 , "setBounds(???)" : 1 , "setLineWidth(int)" : 1}},{ "className" : "org::argouml::uml::cognitive::critics::CrTooManyTransitions" , "selectors" : { "CrTooManyTransitions()" : 1}},{ "className" : "org::argouml::core::propertypanels::ui::UMLTransitionStateListModel" , "selectors" : { "UMLTransitionStateListModel(Object,String)" : 1}},{ "className" : "org::argouml::core::propertypanels::ui::UMLEditableComboBox" , "selectors" : { "UMLEditableComboBox(UMLComboBoxModel,Action,boolean)" : 2 , "doOnEdit(Object)" : 2}},{ "className" : "org::argouml::core::propertypanels::ui::UmlControl" , "selectors" : { "UmlControl(LayoutManager)" : 2 , "createSingleButtonPanel(List<Action>)" : 2 , "createSingleButtonPanel(List<Action>)::PopupToolBoxButton" : 1 , "createSingleButtonPanel(List<Action>)::ToolBarFactory" : 2 , "createSingleButtonPanel(List<Action>)::ToolButton" : 1}},{ "className" : "org::argouml::notation::providers::uml::ClassifierRoleNotationUml" , "selectors" : { "parseClassifierRole(Object,String)" : 1 , "toString(Object)" : 1}},{ "className" : "org::argouml::model::euml::XmiWriterEUMLImpl" , "selectors" : { "XmiWriterEUMLImpl(EUMLModelImplementation,Object,OutputStream,String)" : 1}},{ "className" : "org::argouml::uml::ui::InitUmlUI" , "selectors" : { "InitUmlUI()" : 1}},{ "className" : "org::argouml::ui::ZoomSliderButton::MyPopupMenuListener" , "selectors" : { "MyPopupMenuListener()" : 1}},{ "className" : "org::argouml::sequence2::SequenceDiagramPropPanelFactory::PropPanelUMLSequenceDiagram" , "selectors" : { "PropPanelUMLSequenceDiagram()" : 1}},{ "className" : "org::argouml::uml::diagram::ui::ActionAddExistingEdge" , "selectors" : { "ActionAddExistingEdge(String,Object)" : 1}},{ "className" : "org::argouml::language::csharp::importer::csparser::statements::ContinueStatement" , "selectors" : { "ContinueStatement()" : 1}},{ "className" : "org::argouml::state2::StateDiagramPropPanelFactory::PropPanelUMLStateDiagram" , "selectors" : { "PropPanelUMLStateDiagram()" : 1}},{ "className" : "org::argouml::util::EnumerationIterator" , "selectors" : { "EnumerationIterator(Enumeration)" : 1}},{ "className" : "org::argouml::ui::cmd::ActionAboutArgoUML" , "selectors" : { "ActionAboutArgoUML()" : 2 , "actionPerformed(ActionEvent)" : 1}},{ "className" : "org::argouml::ui::explorer::rules::GoTransitionToTarget" , "selectors" : { "GoTransitionToTarget()" : 2}},{ "className" : "org::argouml::language::csharp::importer::csparser::nodes::expressions::UnaryCastExpression" , "selectors" : { "UnaryCastExpression()" : 1}},{ "className" : "org::argouml::model::mdr::StateMachinesFactoryMDRImpl" , "selectors" : { "StateMachinesFactoryMDRImpl(MDRModelImplementation)" : 1 , "buildInternalTransition(Object)::State" : 1 , "buildPseudoState(Object)::CompositeState" : 1 , "buildStateMachine(Object)::BehavioralFeature" : 1 , "buildTransition(???)" : 1 , "createCompositeState(???)" : 1 , "createFinalState(???)" : 1 , "createPseudostate(???)" : 1 , "createSimpleState(???)" : 2 , "createStubState(???)" : 1 , "createSubmachineState(???)" : 1 , "createSynchState(???)" : 1 , "createTransition(???)" : 2 , "deleteCompositeState(Object)" : 1 , "deleteFinalState(Object)" : 1 , "deleteGuard(Object)" : 1 , "deletePseudostate(Object)" : 1 , "deleteSimpleState(Object)" : 1 , "deleteState(Object)" : 1 , "deleteStateMachine(Object)" : 1 , "deleteStateVertex(Object)" : 1 , "deleteStateVertex(Object)::StateVertex" : 2 , "deleteStubState(Object)" : 1 , "deleteSubmachineState(Object)" : 1 , "deleteSynchState(Object)" : 1 , "deleteTransition(Object)" : 1}},{ "className" : "org::argouml::core::propertypanels::model::MetaDataCache" , "selectors" : { "MetaDataCache()" : 1 , "addCheckboxes(ControlData,Element)" : 1 , "get(Class<?>)" : 1 , "getDocument()" : 1 , "getPanels(Element)" : 1 , "populateClassMaps(Element,Map<Class<?>,String>,Map<String,Class<?>>)" : 1 , "stringToMetaTypes(String)" : 3}},{ "className" : "org::argouml::core::propertypanels::model::GetterSetterManagerImpl::SubvertexGetterSetter" , "selectors" : { "SubvertexGetterSetter()" : 1 , "getOptions(Object,Collection<Class<?>>)" : 1}},{ "className" : "org::argouml::cognitive::CurDecisionCM" , "selectors" : { "CurDecisionCM()" : 1}},{ "className" : "org::argouml::model::euml::ModelEventPumpEUMLImpl::Listener" , "selectors" : { "Listener(EventListener,String[])" : 1 , "getListener()" : 5 , "getProperties()" : 5 , "removeProperties(String[])" : 1 , "setProperties(String[])" : 2}},{ "className" : "org::argouml::core::propertypanels::ui::UMLMessagePredecessorListModel" , "selectors" : { "UMLMessagePredecessorListModel(Object)" : 1}},{ "className" : "org::argouml::cognitive::ResolvedCritic" , "selectors" : { "ResolvedCritic(Critic,ListSet)" : 1 , "ResolvedCritic(Critic,ListSet,boolean)" : 2 , "ResolvedCritic(String,List<String>)" : 1 , "equals(Object)" : 1 , "getCritic()" : 1 , "getCriticString(Critic)" : 2 , "getOffenderList()" : 1 , "importOffenders(ListSet,boolean)" : 1}},{ "className" : "org::argouml::language::cpp::profile::FigNodeStrategyCpp" , "selectors" : { "FigNodeStrategyCpp()" : 1 , "loadIcon(String)" : 1}},{ "className" : "org::argouml::core::propertypanels::ui::UMLPartitionContentListModel" , "selectors" : { "UMLPartitionContentListModel(Object)" : 1}},{ "className" : "org::argouml::core::propertypanels::ui::UMLValueSpecificationPanelOptional" , "selectors" : { "UMLValueSpecificationPanelOptional(UMLValueSpecificationModel,String)" : 1}},{ "className" : "org::argouml::core::propertypanels::ui::UMLCollaborationRepresentedClassifierComboBoxModel" , "selectors" : { "UMLCollaborationRepresentedClassifierComboBoxModel(String,Object)" : 1}},{ "className" : "org::argouml::uml::diagram::deployment::ui::SelectionComponent" , "selectors" : { "SelectionComponent(???)" : 1}},{ "className" : "org::argouml::persistence::PGMLStackParser" , "selectors" : { "<Initializer>()::LinkedHashMap" : 1 , "PGMLStackParser(Map<String,Object>,DiagramSettings)" : 1 , "addFigEdge(???)" : 1 , "addTranslation(???)" : 1 , "addTranslations()" : 1 , "getDiagramSettings()" : 1 , "getHandler(HandlerStack,Object,String,String,String,Attributes)::FigGroupHandler" : 1 , "getOwner(String,String)" : 3 , "interpretStyle(StringTokenizer)" : 1 , "readArgoDiagram(InputSource,boolean)" : 1}},{ "className" : "com::nwalsh::saxon::FormatUnicodeCallout" , "selectors" : { "FormatUnicodeCallout(???)" : 1}},{ "className" : "org::argouml::uml::diagram::ui::FigCompartment::FigPort" , "selectors" : { "FigPort(int,int,int,int)" : 1}},{ "className" : "org::argouml::ui::explorer::rules::GoModelToElements" , "selectors" : { "GoModelToElements()" : 1}},{ "className" : "org::argouml::cognitive::checklist::CheckManager" , "selectors" : { "getChecklistFor(Object)" : 5 , "getStatusFor(Object)" : 2 , "lookupChecklist(Class)" : 1 , "register(Object,Checklist)" : 11}},{ "className" : "org::argouml::model::AbstractCommonBehaviorHelperDecorator" , "selectors" : { "AbstractCommonBehaviorHelperDecorator(CommonBehaviorHelper)" : 1}},{ "className" : "org::argouml::core::propertypanels::ui::UMLCallEventOperationComboBoxModel" , "selectors" : { "UMLCallEventOperationComboBoxModel(String,Object)" : 1}},{ "className" : "org::argouml::kernel::DefaultUndoManager::Interaction" , "selectors" : { "Interaction(String)" : 1 , "addCommand(Command)" : 1 , "execute()" : 1 , "getRedoLabel()" : 1 , "getUndoLabel()" : 1 , "isRedoable()" : 4 , "isUndoable()" : 3 , "undo()" : 1}},{ "className" : "org::argouml::ui::StylePanelFigRRect" , "selectors" : { "refresh()::FigRRect" : 1 , "setTargetRounding()" : 1 , "setTargetRounding()::FigRRect" : 1}},{ "className" : "javax::swing::ComboBoxEditor" , "selectors" : { "addActionListener(ActionListener)" : 2 , "getEditorComponent()" : 44 , "getItem()" : 19 , "selectAll()" : 3 , "setItem(Object)" : 12}},{ "className" : "org::argouml::model::mdr::ActivityGraphsFactoryMDRImpl" , "selectors" : { "ActivityGraphsFactoryMDRImpl(MDRModelImplementation)" : 1 , "buildActivityGraph(Object)::BehavioralFeature" : 1 , "buildClassifierInState(Object,Collection)::Classifier" : 2 , "buildClassifierInState(Object,Collection)::State" : 1 , "createActionState(???)" : 1 , "createCallState(???)" : 1 , "createObjectFlowState(???)" : 1 , "createPartition(???)" : 1 , "createSubactivityState(???)" : 1 , "deleteActionState(Object)" : 1 , "deleteActivityGraph(Object)" : 1 , "deleteCallState(Object)" : 1 , "deleteClassifierInState(Object)" : 1 , "deleteObjectFlowState(Object)" : 1 , "deletePartition(Object)" : 1 , "deleteSubactivityState(Object)" : 1}},{ "className" : "org::argouml::language::cpp::reveng::Modeler" , "selectors" : { "accessSpecifier(String)" : 3 , "baseSpecifier(String,boolean)" : 4 , "beginBaseSpecifier()" : 1 , "beginClassDefinition(String,String)" : 1 , "beginCompoundStatement()" : 1 , "beginCtorDefinition()" : 1 , "beginDtorHead()" : 1 , "beginFunctionDeclaration()" : 1 , "beginFunctionDefinition()" : 2 , "beginInitializer()" : 1 , "beginMemberDeclaration()" : 1 , "beginMemberDeclarator()" : 1 , "beginMemberDeclaratorList()" : 1 , "beginParameterDeclaration()" : 1 , "beginPtrOperator()" : 1 , "beginTranslationUnit()" : 1 , "declarationSpecifiers(List)" : 3 , "directDeclarator(String,boolean)" : 2 , "dtorDeclarator(String)" : 1 , "endBaseSpecifier()" : 1 , "endClassDefinition()" : 1 , "endCompoundStatement()" : 1 , "endCtorDefinition()" : 1 , "endDtorHead()" : 1 , "endFunctionDeclaration()" : 1 , "endFunctionDefinition()" : 2 , "endInitializer()" : 1 , "endMemberDeclaration()" : 1 , "endMemberDeclarator()" : 1 , "endMemberDeclaratorList()" : 1 , "endParameterDeclaration()" : 1 , "endPtrOperator()" : 1 , "endTranslationUnit()" : 1 , "enterNamespaceScope(String)" : 1 , "exitNamespaceScope()" : 1 , "functionDirectDeclarator(String)" : 1 , "getNewElements()" : 1 , "makeNamespaceAlias(String,String)" : 1 , "ptrOperator(String)" : 2 , "ptrToMember(String,String)" : 1 , "qualifiedCtorId(String)" : 1 , "simpleTypeSpecifier(List)" : 2 , "storageClassSpecifier(String)" : 5 , "typeQualifier(String)" : 2}},{ "className" : "org::argouml::language::csharp::importer::csparser::nodes::expressions::ElementAccessExpression" , "selectors" : { "ElementAccessExpression(PrimaryExpression,ExpressionList)" : 1}},{ "className" : "org::argouml::language::java::reveng::classfile::ClassfileImport" , "selectors" : { "count2ndPassFiles(Collection)" : 1 , "countFiles(Collection<File>)" : 1 , "getJavaProfile(Project)" : 1 , "getSuffixFilters()" : 1 , "parseFile(Project,InputStream,String)::ClassfileParser" : 1 , "parseFile(Project,InputStream,String)::ClassfileTreeParser" : 1 , "processFile(Project,File,ProgressMonitor)" : 1 , "processJarFile(Project,File,ProgressMonitor)" : 1}},{ "className" : "org::argouml::transformer::EventTransformer::EventToTimeEvent" , "selectors" : { "EventToTimeEvent(Project,Object)" : 1}},{ "className" : "org::argouml::uml::cognitive::critics::CrNodeInstanceWithoutClassifier" , "selectors" : { "computeOffenders(UMLDeploymentDiagram)" : 3}},{ "className" : "org::argouml::core::propertypanels::model::GetterSetterManagerImpl::ReceiverGetterSetter" , "selectors" : { "ReceiverGetterSetter()" : 1 , "getOptions(Object,Collection<Class<?>>)" : 1}},{ "className" : "org::argouml::core::propertypanels::model::GetterSetterManagerImpl" , "selectors" : { "GetterSetterManagerImpl(Class<?>)" : 1 , "addGetterSetter(String,GetterSetter)" : 54 , "build(Class<?>)" : 1}},{ "className" : "org::argouml::core::propertypanels::ui::UMLFeatureOwnerListModel" , "selectors" : { "UMLFeatureOwnerListModel(Object,String)" : 1}},{ "className" : "org::argouml::ui::ActionUndo" , "selectors" : { "ActionUndo(String,Icon)" : 1}},{ "className" : "org::argouml::core::propertypanels::ui::UMLDiscriminatorNameDocument" , "selectors" : { "UMLDiscriminatorNameDocument(String,Object)" : 1}},{ "className" : "org::argouml::ui::LoadSwingWorker" , "selectors" : { "LoadSwingWorker(File,boolean)" : 1}},{ "className" : "org::argouml::ui::ShadowComboBox::ShadowRenderer" , "selectors" : { "ShadowRenderer()" : 1}},{ "className" : "org::argouml::uml::ui::behavior::state_machines::ActionNewCallEvent" , "selectors" : { "ActionNewCallEvent()" : 1 , "getSingleton()" : 3}},{ "className" : "org::argouml::core::propertypanels::model::GetterSetterManagerImpl::VisibilityGetterSetter" , "selectors" : { "VisibilityGetterSetter()" : 1}},{ "className" : "org::argouml::uml::ui::behavior::activity_graphs::ActionSetSynch" , "selectors" : { "ActionSetSynch()" : 1 , "getInstance()" : 1}},{ "className" : "org::argouml::model::AbstractCollaborationsHelperDecorator" , "selectors" : { "AbstractCollaborationsHelperDecorator(CollaborationsHelper)" : 1}},{ "className" : "org::argouml::notation::providers::uml::ExtensionPointNotationUml" , "selectors" : { "parseExtensionPoint(String)" : 1 , "parseExtensionPointFig(Object,String)" : 1 , "toString(Object)" : 1}},{ "className" : "org::argouml::ui::ActionRedo" , "selectors" : { "ActionRedo(String,Icon)" : 1}},{ "className" : "org::argouml::language::php::generator::GeneratorPHP4" , "selectors" : { "GeneratorPHP4(int)" : 2 , "convertType(Object)" : 3 , "createFile(Object,File)" : 2 , "findConstructor(Object)" : 1 , "generateAssociationEnd(Object)" : 1 , "generateAttribute(Object,boolean)" : 1 , "generateClassifier(Object)" : 2 , "generateClassifierAssociations(Object)" : 1 , "generateClassifierAttributes(Object)" : 1 , "generateClassifierGeneralisations(Object)" : 1 , "generateClassifierOperations(Object)" : 1 , "generateClassifierSpecifications(Object)" : 1 , "generateDefaultValue(Object,String,boolean)" : 6 , "generateExpression(Object)" : 5 , "generateFile(Object,String)" : 2 , "generateFiles(Collection,String,boolean)" : 1 , "generateMethodBody(Object,boolean)" : 2 , "generateOperation(Object,boolean)" : 2 , "generatePackage(Object)" : 1 , "generateParameter(Object)" : 2 , "generateRequireOnceStatement(Object,boolean)" : 1 , "generateRequired(Object)" : 1 , "generateSection(Object)" : 1 , "generateSection(Object,String,String)" : 4 , "generateUninterpreted(String)" : 1 , "generateVisibility(Object)" : 2 , "getName()" : 3 , "getNavigableOppositeEnd(Object)" : 2 , "updateFile(Object,File)" : 1}},{ "className" : "org::argouml::transformer::EventTransformer" , "selectors" : { "EventTransformer()" : 1}},{ "className" : "org::argouml::uml::diagram::static_structure::layout::ClassdiagramEdge" , "selectors" : { "ClassdiagramEdge(FigEdge)::FigPoly" : 1 , "getDestFigNode(???)" : 2 , "getSourceFigNode(???)" : 1 , "getVGap()" : 1 , "layout()" : 1 , "setHGap(int)" : 1 , "setVGap(int)" : 1}},{ "className" : "org::argouml::model::euml::ExtensionMechanismsHelperEUMLImpl" , "selectors" : { "ExtensionMechanismsHelperEUMLImpl(EUMLModelImplementation)" : 1 , "addBaseClass(Object,Object)::Stereotype" : 2 , "applyProfile(Object,Object)" : 1 , "applyProfile(Object,Object)::Model" : 1 , "applyProfile(Object,Object)::Profile" : 3 , "getAllPossibleStereotypes(Collection,Object)::Element" : 1 , "getMetaModelName(Class)" : 1 , "getStereotype(Collection,Object)::Stereotype" : 2 , "getStereotype(Object,Object)::Stereotype" : 2 , "getStereotypes(Collection)::Profile" : 2 , "getStereotypes(Object)::ArrayList" : 1 , "getStereotypes(Object)::Profile" : 1 , "isStereotype(Object,String,String)" : 1 , "isStereotypeInh(Object,String,String)" : 2 , "isValidStereotype(Object,Object)::Element" : 1 , "makeProfileApplicable(Object)" : 1 , "makeProfileApplicable(Object)::Profile" : 2 , "removeBaseClass(Object,Object)::Stereotype" : 1 , "setTaggedValue(Object,Object,Object)" : 1 , "unapplyProfile(Object,Object)" : 1 , "unapplyProfile(Object,Object)::Model" : 1 , "unapplyProfile(Object,Object)::Profile" : 2}},{ "className" : "org::argouml::persistence::PersistenceManager" , "selectors" : { "PersistenceManager()" : 1 , "addTranslation(String,String)" : 11 , "confirmOverwrite(Component,boolean,File)" : 2 , "fixExtension(String)" : 3 , "fixUriExtension(URI)" : 1 , "fixUriExtension(URI)::UnexpectedException" : 1 , "fixXmiExtension(String)" : 2 , "getBaseName(String)" : 6 , "getDefaultExtension()" : 2 , "getDiagramMemberFilePersister()" : 2 , "getInstance()" : 27 , "getPersisterFromFileName(String)" : 6 , "getProjectBaseName(Project)" : 4 , "getQuickViewDump(Project)" : 1 , "getSavePersister()" : 1 , "getXmiExtension()" : 1 , "setOpenFileChooserFilter(JFileChooser)" : 1 , "setProjectURI(URI,Project)" : 3 , "setSaveFileChooserFilters(JFileChooser,String)" : 1 , "setSavePersister(AbstractFilePersister)" : 2 , "setXmiFileChooserFilter(JFileChooser)" : 3}},{ "className" : "org::argouml::uml::diagram::ui::SettingsTabDiagramAppearance" , "selectors" : { "SettingsTabDiagramAppearance(int)" : 2 , "createCheckBox(String)" : 2 , "createLabel(String)" : 1 , "getBoolean(ConfigurationKey)" : 2 , "getJbtnDiagramFont()" : 1 , "handleSettingsTabRefresh()" : 2 , "initialize()" : 1}},{ "className" : "org::argouml::uml::diagram::state::ui::FigHistoryState" , "selectors" : { "FigHistoryState(Object,Rectangle,DiagramSettings)" : 2 , "createBigPortFig()::FigCircle" : 1 , "getFigs(???)" : 1 , "getH()" : 1 , "initFigs()" : 1 , "initFigs()::FigCircle" : 1 , "initFigs()::FigText" : 1 , "setBigPort(???)" : 1}},{ "className" : "org::argouml::uml::ui::PropPanelFactory" , "selectors" : { "createPropPanel(Object)" : 1}},{ "className" : "org::argouml::uml::diagram::state::ui::FigSimpleState" , "selectors" : { "FigSimpleState(Object,Rectangle,DiagramSettings)" : 2 , "getFigs(???)" : 1 , "getInitialHeight()" : 1 , "getInitialWidth()" : 2 , "getInitialX()" : 2 , "getInitialY()" : 3 , "initializeSimpleState()" : 1 , "initializeSimpleState()::FigRRect" : 1 , "setBigPort(???)" : 1 , "setInternal(???)" : 1 , "setNameFig(???)" : 1}},{ "className" : "org::argouml::ui::explorer::ExplorerEventAdaptor::ProfileChangeListener" , "selectors" : { "ProfileChangeListener()" : 1}},{ "className" : "org::argouml::uml::reveng::ImportCommon" , "selectors" : { "ImportCommon()" : 1 , "addFiguresToDiagrams(Collection)" : 1 , "doImport(ProgressMonitor)" : 2 , "doImportInternal(List<File>,ProgressMonitor,int)" : 1 , "getCurrentDiagram()" : 1 , "getCurrentModule()" : 6 , "getFileList(ProgressMonitor)" : 1 , "getImporter(String)" : 1 , "getLanguages()" : 1 , "getModules()" : 3 , "getQualifiedName(Object)" : 1 , "getSelectedFiles()" : 1 , "getSrcPath()" : 4 , "initCurrentDiagram()" : 1 , "isChangedOnlySelected()" : 1 , "isCreateDiagramsSelected()" : 1 , "isDescendSelected()" : 1 , "isDiagramLayoutSelected()" : 1 , "isMinimizeFigsSelected()" : 2 , "layoutDiagrams(ProgressMonitor,int)" : 1 , "printToBuffer(Exception)" : 1 , "setCurrentModule(ImportInterface)" : 2 , "setFiles(File[])" : 1 , "setSelectedFiles(File[])" : 2 , "setSelectedSuffixFilter(SuffixFilter)" : 2 , "setSrcPath(String)" : 2 , "skipTokens(StringTokenizer,int)" : 4}},{ "className" : "org::argouml::core::propertypanels::ui::ExpressionLanguageField" , "selectors" : { "ExpressionLanguageField(ExpressionModel)" : 1}},{ "className" : "org::argouml::ui::explorer::rules::GoPackageToElementImport" , "selectors" : { "GoPackageToElementImport()" : 2}},{ "className" : "java::awt::event::MouseListener" , "selectors" : { "actionPerformed(???)" : 1 , "addFig(???)" : 1 , "calcBounds(???)" : 1 , "deleteFromModel(???)" : 1 , "getFillColor(???)" : 1 , "getLineColor(???)" : 1 , "mouseClicked(MouseEvent)" : 10 , "mouseEntered(MouseEvent)" : 4 , "mouseExited(MouseEvent)" : 4 , "mousePressed(MouseEvent)" : 6 , "mouseReleased(MouseEvent)" : 6 , "removeFromDiagram(???)" : 1 , "setDestFigNode(???)" : 1 , "setEnclosingFig(???)" : 1 , "setFig(???)" : 1 , "setLayer(???)" : 1 , "setSourceFigNode(???)" : 1}},{ "className" : "org::argouml::persistence::VersionException" , "selectors" : { "VersionException(String)" : 1}},{ "className" : "org::argouml::ui::StylePanelFigText" , "selectors" : { "StylePanelFigText()::ColorRenderer" : 1 , "initChoices2()" : 1 , "itemStateChanged(ItemEvent)::FigText" : 1 , "setTargetFont()" : 1 , "setTargetFont()::FigText" : 1 , "setTargetJustification()" : 1 , "setTargetJustification()::FigText" : 1 , "setTargetSize()" : 1 , "setTargetSize()::FigText" : 1 , "setTargetStyle()" : 1 , "setTargetStyle()::FigText" : 2 , "setTargetTextColor()" : 1 , "setTargetTextColor()::FigText" : 1}},{ "className" : "org::argouml::notation::providers::uml::AttributeNotationUml" , "selectors" : { "dealWithDerived(Object,boolean)" : 1 , "dealWithMultiplicity(Object,StringBuilder,int)" : 1 , "dealWithName(Object,String)" : 1 , "dealWithProperties(Object,List<String>)" : 1 , "dealWithType(Object,String)" : 1 , "dealWithValue(Object,StringBuilder)" : 1 , "dealWithVisibility(Object,String)" : 1 , "generateMultiplicity(Object)" : 1 , "parseAttribute(String,Object)" : 2 , "parseAttributeFig(Object,Object,String)" : 1 , "toString(Object,boolean,boolean,boolean,boolean,boolean,boolean)" : 1}},{ "className" : "org::argouml::uml::ui::UMLChangeDispatch" , "selectors" : { "UMLChangeDispatch(Container,int)" : 3 , "dispatch(Container)" : 3 , "synchronizedDispatch(Container)" : 1}},{ "className" : "org::argouml::uml::ui::UMLComboBoxModel2" , "selectors" : { "UMLComboBoxModel2(String,boolean)" : 2 , "addAll(Collection)" : 1 , "addElement(Object)" : 6 , "addOtherModelEventListeners(Object)" : 1 , "buildMinimalModelList()" : 2 , "buildModelList()" : 1 , "buildModelListTimed()" : 2 , "contains(Object)" : 4 , "external2internal(Object)" : 4 , "fireContentsChanged(Object,int,int)" : 1 , "fireIntervalAdded(Object,int,int)" : 4 , "fireIntervalRemoved(Object,int,int)" : 3 , "getChangedElement(PropertyChangeEvent)" : 9 , "getElementAt(int)" : 3 , "getIndexOf(Object)" : 1 , "getSelectedItem()" : 4 , "getSelectedModelElement()" : 2 , "getSize()" : 5 , "getTarget()" : 10 , "internal2external(Object)" : 1 , "isLazy()" : 2 , "isValidElement(Object)" : 2 , "isValidEvent(PropertyChangeEvent)" : 2 , "modelChanged(UmlChangeEvent)" : 1 , "removeAll(Collection)" : 1 , "removeAllElements()" : 1 , "removeElement(Object)" : 3 , "removeOtherModelEventListeners(Object)" : 1 , "setElements(Collection)" : 3 , "setFireListEvents(boolean)" : 2 , "setModelInvalid()" : 3 , "setSelectedItem(Object)" : 11 , "setTarget(Object)" : 4 , "setTarget(Object)::Fig" : 1 , "targetRemoved(TargetEvent)::Fig" : 1}},{ "className" : "org::argouml::core::propertypanels::ui::UMLOperationSpecificationDocument" , "selectors" : { "UMLOperationSpecificationDocument(String,Object)" : 1}},{ "className" : "org::argouml::uml::reveng::idl::Modeler" , "selectors" : { "Modeler(Object,String)" : 1 , "addAnonymousClass(String,boolean)" : 1 , "addAttribute(short,String,String,String,String,boolean)" : 2 , "addClass(String,short,List<String>,String,List<String>,String,boolean)" : 3 , "addClassifier(Object,String,short,String,List<String>)" : 3 , "addDocumentationTag(Object,String)" : 4 , "addImport(String,boolean)" : 1 , "addInterface(String,short,List<String>,List<String>,String,boolean)" : 1 , "addInterfaces(Object,List<String>,boolean)" : 2 , "addOperation(short,List<String>,String,String,List<ParameterDeclaration>,String,boolean)" : 1 , "buildAttribute(Object,Object,String)" : 1 , "buildDirectedAssociation(String,Object,Object)" : 1 , "buildImport(Object,Object)" : 2 , "buildInParameter(Object,Object,String)" : 1 , "buildParameter(Object,Object,String)" : 2 , "buildReturnParameter(Object,Object)" : 1 , "cleanModelElement(Object)" : 1 , "getAbstraction(Object,Object)" : 1 , "getAssociationEnd(String,Object)" : 1 , "getAttribute(String)" : 1 , "getClassifierName(String)" : 15 , "getContext(String)" : 7 , "getGeneralization(Object,Object,Object)" : 4 , "getLevel()" : 5 , "getNewElements()" : 1 , "getOperation(String)" : 1 , "getPackage(String)" : 12 , "getPackageName(String)" : 14 , "getRelativePackageName(String)" : 2 , "getStereotype(Object,String,String)" : 1 , "getStereotype(String)" : 4 , "isAEnumeration(Object)" : 1 , "logError(String,String)" : 8 , "makeAbstractionName(Object,Object)" : 1 , "makeAssociationName(Object,Object)" : 1 , "makeFromToName(Object,Object)" : 5 , "makeFromToName(String,String)" : 1 , "removeTrailingSlash(String)" : 1 , "searchPackageInModel(String)" : 2 , "setOwnerScope(Object,short)" : 2 , "setVisibility(Object,short)" : 4 , "warnClassifierNotFound(String,String)" : 7}},{ "className" : "org::argouml::application::api::Predicate" , "selectors" : { "evaluate(Object)" : 1}},{ "className" : "java::io::StringWriter" , "selectors" : { "StringWriter()" : 991 , "StringWriter(int)" : 52 , "close()" : 62 , "createLineString(???)" : 1 , "createPoint(???)" : 1 , "flush()" : 26 , "getBuffer()" : 181 , "java" : 1 , "setPrettyprint(???)" : 2 , "toString()" : 905 , "write(String)" : 162 , "write(String,int,int)" : 2 , "write(char[],int,int)" : 16 , "write(int)" : 26}},{ "className" : "org::argouml::uml::generator::ui::ClassGenerationDialog::TableModelClassChecks" , "selectors" : { "TableModelClassChecks()" : 1 , "getChecked()" : 2 , "getChecked(Language)" : 1 , "getColumnCount()" : 1 , "getLanguagesCount()" : 16 , "getRowCount()" : 1 , "isSupposedToBeGeneratedAsLanguage(Language,Object)" : 1 , "setAllChecks(boolean)" : 2 , "setTarget(List<Object>)" : 1}},{ "className" : "org::argouml::core::propertypanels::ui::UMLSignalComboBoxModel::SetAction" , "selectors" : { "SetAction()" : 1}},{ "className" : "org::argouml::uml::diagram::use_case::ui::SelectionActor" , "selectors" : { "SelectionActor(???)" : 1}},{ "className" : "org::argouml::cognitive::critics::Wizard" , "selectors" : { "Wizard()" : 1 , "back()" : 1 , "canFinish()" : 5 , "canGoBack()" : 1 , "canGoNext()" : 2 , "doAction()" : 1 , "doAction(int)" : 3 , "finish()" : 1 , "getCurrentPanel()" : 2 , "getNumSteps()" : 3 , "getPanel(int)" : 1 , "getProgress()" : 1 , "getStep()" : 11 , "getToDoItem()" : 26 , "isFinished()" : 1 , "isStarted()" : 1 , "makePanel(int)" : 1 , "next()" : 1 , "removePanel(int)" : 1 , "setToDoItem(WizardItem)" : 1 , "undoAction(int)" : 3}},{ "className" : "org::argouml::uml::ui::behavior::state_machines::ActionNewFinalState" , "selectors" : { "ActionNewFinalState()" : 1}},{ "className" : "javax::management::NotificationBroadcaster" , "selectors" : { "addNotificationListener(NotificationListener,NotificationFilter,Object)" : 15 , "getNotificationInfo()" : 7 , "removeNotificationListener(NotificationListener)" : 11}},{ "className" : "com::nwalsh::xalan::Text" , "selectors" : { "getEncoding(XSLProcessorContext,ElemExtensionCall)::ElemExtensionCall" : 1 , "getFilename(XSLProcessorContext,ElemExtensionCall)::ElemExtensionCall" : 1}},{ "className" : "org::argouml::language::csharp::importer::csparser::statements::CheckedStatement" , "selectors" : { "CheckedStatement()" : 1}},{ "className" : "org::argouml::uml::ui::behavior::state_machines::PopupMenuNewEvent" , "selectors" : { "buildMenu(JPopupMenu,String,Object)" : 1}},{ "className" : "org::argouml::core::propertypanels::ui::UMLMessageActivatorComboBoxModel" , "selectors" : { "UMLMessageActivatorComboBoxModel(String,Object)" : 1}},{ "className" : "org::argouml::persistence::ModelMemberFilePersister" , "selectors" : { "ModelMemberFilePersister()" : 4 , "getCurModel()" : 3 , "getElementsRead()" : 2 , "getUUIDRefs()" : 3 , "load(Project,InputSource)" : 2 , "readModels(InputSource)" : 4 , "registerDiagrams(Project)" : 2 , "registerDiagramsInternal(Project,Collection,boolean)" : 1 , "save(ProjectMember,OutputStream)" : 1}},{ "className" : "org::argouml::cognitive::ToDoItem" , "selectors" : { "ToDoItem(Critic)" : 1 , "ToDoItem(Critic,ListSet,Designer)" : 2 , "ToDoItem(Critic,Object,Designer)" : 2 , "ToDoItem(Poster,String,int,String,String)" : 1 , "ToDoItem(Poster,String,int,String,String,ListSet)" : 2 , "action()" : 1 , "checkArgument(Object)" : 3 , "checkOffs(ListSet)" : 2 , "containsKnowledgeType(String)" : 9 , "deselect()" : 2 , "equals(Object)" : 1 , "getClarifier()" : 12 , "getDescription()" : 2 , "getHeadline()" : 10 , "getMoreInfoURL()" : 4 , "getOffenders()" : 61 , "getPoster()" : 32 , "getPriority()" : 10 , "getProgress()" : 10 , "getWizard()" : 2 , "select()" : 2 , "stillValid(Designer)" : 1 , "supports(Decision)" : 5 , "supports(Goal)" : 5 , "toString()" : 2}},{ "className" : "org::argouml::cognitive::ui::WizDescription" , "selectors" : { "WizDescription()" : 1 , "setTarget(Object)" : 1}},{ "className" : "com::nwalsh::saxon::NumberLinesEmitter::StartElementInfo" , "selectors" : { "StartElementInfo(int,Attributes,int[],int)" : 1 , "getAttributes()" : 1 , "getNSCount()" : 1 , "getNameCode()" : 2 , "getNamespaces()" : 1}},{ "className" : "org::argouml::core::propertypanels::ui::UMLGeneralizationPowertypeComboBoxModel::ActionSetGeneralizationPowertype" , "selectors" : { "ActionSetGeneralizationPowertype()" : 1}},{ "className" : "org::argouml::kernel::ProfileConfiguration" , "selectors" : { "ProfileConfiguration(Project)" : 1 , "ProfileConfiguration(Project,Collection<Profile>)" : 1 , "activateDefaultTypeStrategy(Profile)" : 1 , "activateFormatingStrategy(Profile)" : 1 , "addProfile(Profile,Object)" : 6 , "findAllStereotypesForModelElement(Object)" : 1 , "findByMetaType(Object)" : 6 , "findStereotypeForObject(String,Object)" : 2 , "findType(String)" : 1 , "findTypeInModel(String,Object)" : 1 , "getDefaultTypeStrategy()" : 12 , "getFigNodeStrategy()" : 4 , "getFormatingStrategy()" : 3 , "getProfileModels()" : 3 , "getProfiles()" : 16 , "removeProfile(Profile,Object)" : 3 , "updateStrategies()" : 4}},{ "className" : "org::argouml::uml::diagram::state::ui::FigVertex::FigRegionCompartment" , "selectors" : { "FigRegionCompartment(int,int,int,int)" : 1}},{ "className" : "org::argouml::ui::ArgoJFontChooser" , "selectors" : { "ArgoJFontChooser(Frame,JComponent,String,int)" : 1 , "getJContentPane()" : 1 , "getJbtnCancel()" : 1 , "getJbtnOk()" : 1 , "getJlstFamilies()" : 1 , "getJlstSizes()" : 1 , "getResultName()" : 1 , "getResultSize()" : 1 , "initialize()" : 1 , "isOk()" : 1 , "updatePreview()" : 3}},{ "className" : "com::nwalsh::saxon::CalloutEmitter::StartElementInfo" , "selectors" : { "StartElementInfo(int,Attributes,int[],int)" : 1 , "getAttributes()" : 1 , "getNSCount()" : 1 , "getNameCode()" : 2 , "getNamespaces()" : 1}},{ "className" : "org::argouml::language::csharp::importer::csparser::members::PropertyNode" , "selectors" : { "PropertyNode()" : 1}},{ "className" : "org::argouml::core::propertypanels::ui::UMLTransitionSourceListModel" , "selectors" : { "UMLTransitionSourceListModel(Object,String)" : 1}},{ "className" : "org::argouml::language::cpp::reveng::ModelerImpl::XtorModelerCreator" , "selectors" : { "create(Object,Object,Object,boolean)" : 1}},{ "className" : "org::argouml::language::csharp::importer::csparser::statements::UncheckedStatement" , "selectors" : { "UncheckedStatement()" : 1}},{ "className" : "org::argouml::persistence::TodoParser" , "selectors" : { "TodoParser()" : 1 , "decode(String)" : 6 , "encode(String)" : 4 , "handleDescription(XMLElement)" : 1 , "handleHeadline(XMLElement)" : 1 , "handleIssueEnd(XMLElement)" : 1 , "handleIssueStart(XMLElement)" : 1 , "handleMoreInfoURL(XMLElement)" : 1 , "handleOffender(XMLElement)" : 1 , "handlePoster(XMLElement)" : 1 , "handlePriority(XMLElement)" : 1 , "handleResolvedCritics(XMLElement)" : 1 , "handleTodo(XMLElement)" : 1 , "handleTodoItemEnd(XMLElement)" : 1 , "handleTodoItemStart(XMLElement)" : 1 , "handleTodoList(XMLElement)" : 1 , "readTodoList(InputSource)" : 1}},{ "className" : "org::argouml::language::csharp::importer::csparser::types::DelegateNode" , "selectors" : { "DelegateNode()" : 1}},{ "className" : "org::argouml::uml::diagram::state::ui::FigForkState" , "selectors" : { "FigForkState(Object,Rectangle,DiagramSettings)" : 4 , "createBigPortFig()::FigRect" : 1 , "getFigs(???)" : 1 , "initFigs()" : 1 , "initFigs()::FigRect" : 1 , "setBigPort(???)" : 1}},{ "className" : "org::argouml::core::propertypanels::ui::UMLStubStateComboBoxModel::ActionSetStubStateReferenceState" , "selectors" : { "ActionSetStubStateReferenceState()" : 1}},{ "className" : "org::argouml::model::mdr::CoreFactoryMDRImpl" , "selectors" : { "CoreFactoryMDRImpl(MDRModelImplementation)" : 1 , "buildAssociation(???)" : 1 , "buildAssociationClass(???)" : 1 , "buildAssociationEnd(???)" : 2 , "buildAssociationEndInternal(Object,String,Object,Object,boolean,Object,Object,Object,Object,Object)::UmlAssociation" : 1 , "buildAttribute(???)" : 1 , "buildAttribute2(???)" : 1 , "buildBinding(Object,Object,List)::ModelElement" : 2 , "buildClass(???)" : 1 , "buildDependency(???)" : 1 , "buildElementResidence(Object,Object)::ModelElement" : 1 , "buildElementResidence(Object,Object)::org" : 1 , "buildEnumerationLiteral(???)" : 1 , "buildGeneralization(???)" : 2 , "buildInterface(???)" : 1 , "buildMethod(???)" : 1 , "buildOperation(???)" : 1 , "buildPackageImport(???)" : 1 , "buildParameter(???)" : 1 , "buildParameter(Classifier,javax" : 1 , "buildRealization(???)" : 1 , "buildUsage(???)" : 1 , "buildUsage(Object,Object)::ModelElement" : 4 , "compareMultiplicity(int,int)" : 1 , "copyClass(Object,Object)::Namespace" : 1 , "copyDataType(Object,Object)::Namespace" : 1 , "copyEnumeration(Object,Object)::Enumeration" : 2 , "copyEnumeration(Object,Object)::EnumerationLiteral" : 1 , "copyFeature(Object,Object)::Classifier" : 1 , "copyInterface(Object,Object)::Namespace" : 1 , "createAssociation(Object)::org" : 1 , "createComment(???)" : 1 , "createComponent(???)" : 1 , "createDataType(???)" : 1 , "createEnumeration(???)" : 1 , "createGeneralization(Object)::org" : 1 , "createNode(???)" : 1 , "createOperation(???)" : 1 , "createParameter(???)" : 1 , "deleteAbstraction(Object)" : 1 , "deleteArtifact(Object)" : 1 , "deleteAssociation(Object)" : 1 , "deleteAssociationClass(Object)" : 1 , "deleteAssociationEnd(Object)" : 1 , "deleteAssociationEnd(Object)::org" : 1 , "deleteAttribute(Object)" : 1 , "deleteAttribute(Object)::org" : 1 , "deleteBehavioralFeature(Object)" : 1 , "deleteBinding(Object)" : 1 , "deleteBinding(Object)::org" : 1 , "deleteClass(Object)" : 1 , "deleteClassifier(Object)" : 1 , "deleteClassifier(Object)::org" : 2 , "deleteComment(Object)" : 1 , "deleteComponent(Object)" : 1 , "deleteConstraint(Object)" : 1 , "deleteDataType(Object)" : 1 , "deleteDependency(Object)" : 1 , "deleteElement(Object)" : 1 , "deleteElementResidence(Object)" : 1 , "deleteEnumeration(Object)" : 1 , "deleteFeature(Object)" : 1 , "deleteFlow(Object)" : 1 , "deleteGeneralizableElement(Object)" : 1 , "deleteGeneralizableElement(Object)::org" : 1 , "deleteGeneralization(Object)" : 1 , "deleteInterface(Object)" : 1 , "deleteMethod(Object)" : 1 , "deleteModelElement(Object)" : 1 , "deleteModelElement(Object)::org" : 2 , "deleteNamespace(Object)" : 1 , "deleteNamespace(Object)::Namespace" : 1 , "deleteNode(Object)" : 1 , "deleteOperation(Object)" : 1 , "deleteOperation(Object)::org" : 2 , "deleteParameter(Object)" : 1 , "deletePermission(Object)" : 1 , "deletePresentationElement(Object)" : 1 , "deletePrimitive(Object)" : 1 , "deleteProgrammingLanguageDataType(Object)" : 1 , "deleteRelationship(Object)" : 1 , "deleteStructuralFeature(Object)" : 1 , "deleteTemplateArgument(Object)" : 1 , "deleteTemplateParameter(Object)" : 1 , "deleteUsage(Object)" : 1 , "doCopyBehavioralFeature(BehavioralFeature,BehavioralFeature)::org" : 2 , "doCopyClass(Object,Object)" : 1 , "doCopyClass(Object,Object)::UmlClass" : 2 , "doCopyClassifier(Object,Object)" : 3 , "doCopyClassifier(Object,Object)::Classifier" : 1 , "doCopyDataType(Object,Object)" : 1 , "doCopyElement(Object,Object)" : 1 , "doCopyGeneralizableElement(Object,Object)" : 2 , "doCopyInterface(Object,Object)" : 1 , "doCopyModelElement(Object,Object)" : 6 , "doCopyNamespace(Object,Object)" : 2 , "getExtent(Object)::RefObject" : 1}},{ "className" : "org::argouml::uml::ui::TabConstraints::ConstraintModel" , "selectors" : { "ConstraintModel(Object)" : 1 , "fireConstraintAdded()" : 2 , "fireConstraintAdded()::ConstraintChangeEvent" : 1 , "fireConstraintAdded()::ConstraintChangeListener" : 1 , "fireConstraintDataChanged(int,Object,Object)" : 1 , "fireConstraintDataChanged(int,Object,Object)::ConstraintChangeEvent" : 1 , "fireConstraintDataChanged(int,Object,Object)::ConstraintChangeListener" : 1 , "fireConstraintNameChanged(int,Object,Object)" : 1 , "fireConstraintNameChanged(int,Object,Object)::ConstraintChangeEvent" : 1 , "fireConstraintNameChanged(int,Object,Object)::ConstraintChangeListener" : 1 , "fireConstraintRemoved(Object,int)" : 1 , "fireConstraintRemoved(Object,int)::ConstraintChangeEvent" : 1 , "fireConstraintRemoved(Object,int)::ConstraintChangeListener" : 1 , "removeConstraintAt(int)" : 1 , "representationFor(int)" : 2}},{ "className" : "org::argouml::ui::explorer::rules::GoElementToMachine" , "selectors" : { "GoElementToMachine()" : 1}},{ "className" : "org::argouml::state2::diagram::FigRegion" , "selectors" : { "FigRegion(Object)" : 1 , "getMinimumSize()" : 2 , "setBounds(???)" : 1}},{ "className" : "org::argouml::ui::explorer::ActionExportProfileXMI" , "selectors" : { "ActionExportProfileXMI(Profile)" : 1 , "getTargetFile()" : 1 , "isXmiFile(File)" : 1 , "saveModel(File,Object)" : 1}},{ "className" : "org::argouml::cognitive::checklist::ChecklistStatus" , "selectors" : { "ChecklistStatus()" : 1 , "add(CheckItem)" : 1}},{ "className" : "org::argouml::ui::explorer::PerspectiveConfigurator::NewPerspectiveListener" , "selectors" : { "NewPerspectiveListener()" : 1}},{ "className" : "org::argouml::uml::cognitive::critics::WizAddInstanceVariable" , "selectors" : { "setInstructions(String)" : 1}},{ "className" : "org::argouml::language::java::reveng::classfile::Context" , "selectors" : { "Context(Context)" : 3 , "findClass(String,boolean)" : 2 , "findClassOnUserClasspath(String,boolean)" : 3 , "get(String,boolean)" : 3 , "getContext()" : 6 , "getJavaName(Object)" : 3}},{ "className" : "org::argouml::notation::providers::MessageNotation" , "selectors" : { "MessageNotation(Object)" : 1}},{ "className" : "org::argouml::language::csharp::importer::CSModeller" , "selectors" : { "CSModeller(Project,ImportSettings)" : 1 , "addAttribute(ClassNode,FieldNode,String)" : 1 , "addAttributes(ClassNode,String)" : 1 , "addClass(long,String,String)" : 2 , "addFixedStereotypes()" : 1 , "addInterface(long,String,String)" : 1 , "addMethods(ClassNode,String)" : 1 , "addMethods(InterfaceNode,String)" : 1 , "addNamespace(NamespaceNode)" : 3 , "addNamespaceClasses(NamespaceNode)" : 1 , "addNamespaceNodes(NodeCollection<NamespaceNode>)" : 3 , "addOperation(String,InterfaceMethodNode,String)" : 1 , "addOperation(String,MethodNode,String)" : 1 , "addProperties(ClassNode,String)" : 1 , "addProperty(ClassNode,PropertyNode,String)" : 1 , "addRootNamesapce(String)" : 1 , "addSubNamesapce(String,String)" : 1 , "applyReadOnlyStereotype(Object)" : 1 , "applyReadWriteStereotype(Object)" : 1 , "applyWriteOnlyStereotype(Object)" : 1 , "buildAttribute(Object,Object,String)" : 2 , "buildGeneralization(ClassNode,NamespaceNode)" : 1 , "buildGeneralizations(Object,Object)" : 1 , "buildParameter(Object,Object,String)" : 1 , "buildRealization(Object,Object,Object)" : 1 , "buildToParent(String[],int)" : 17 , "getClasesByName(String,String)" : 1 , "getInterfaceByName(String,String)" : 1 , "getNameSpace(String)" : 1 , "getNewElements()" : 1 , "getParameterTypeString(InterfaceMethodNode)" : 1 , "getParameterTypeString(MethodNode)" : 1 , "getStoredDataType(String,String)" : 8 , "model(List,ProgressMonitor,int)" : 1 , "setOwnerScope(Object,short)" : 2 , "setVisibility(Object,short)" : 6}},{ "className" : "org::argouml::language::java::cognitive::critics::CrMultipleRealization" , "selectors" : { "CrMultipleRealization()" : 1}},{ "className" : "org::argouml::uml::diagram::ui::FigEmptyRect" , "selectors" : { "FigEmptyRect(int,int,int,int)" : 2 , "setBounds(???)" : 1 , "setLineWidth(???)" : 1}},{ "className" : "org::argouml::model::ExtensionMechanismsFactory" , "selectors" : { "buildStereotype(Object,Object,Object)" : 4 , "buildStereotype(Object,String,Object,Collection)" : 1 , "buildStereotype(String,Object)" : 9 , "buildTagDefinition(String,Object,Object)" : 2 , "buildTaggedValue(Object,String[])" : 3 , "buildTaggedValue(String,String)" : 17 , "copyStereotype(Object,Object)" : 1 , "copyTagDefinition(Object,Object)" : 1 , "copyTaggedValues(Object,Object)" : 1 , "createStereotype()" : 1 , "createTaggedValue()" : 3}},{ "className" : "org::argouml::uml::diagram::state::ui::FigInitialState" , "selectors" : { "FigInitialState(Object,Rectangle,DiagramSettings)" : 4 , "createBigPortFig()::FigCircle" : 1 , "getFigs(???)" : 1 , "initFigs()" : 1 , "initFigs()::FigCircle" : 1}},{ "className" : "org::argouml::uml::ui::behavior::collaborations::ActionAddMessagePredecessor" , "selectors" : { "ActionAddMessagePredecessor()" : 1 , "getInstance()" : 1}},{ "className" : "org::argouml::ui::SettingsTabProfile" , "selectors" : { "SettingsTabProfile()" : 1 , "buildPanel()" : 3 , "collectSubdirs(File,Collection<File>)" : 2 , "createProfileList()" : 2 , "getAvailableProfiles()" : 1 , "getUsedProfiles()" : 2 , "handleSettingsTabSave()" : 1 , "initDefaultStereotypeViewSelector()" : 1 , "refreshLists()" : 4}},{ "className" : "javax::swing::table::TableCellRenderer" , "selectors" : { "getTableCellRendererComponent(JTable,Object,boolean,boolean,int,int)" : 22}},{ "className" : "org::argouml::persistence::ToDoItemXMLHelper" , "selectors" : { "ToDoItemXMLHelper(ToDoItem)" : 1}},{ "className" : "org::argouml::persistence::ProfileConfigurationParser" , "selectors" : { "ProfileConfigurationParser()" : 1 , "getMatchingUserDefinedProfile(String,ProfileManager)" : 1 , "getProfiles()" : 1 , "getUnresolvedFilenames()" : 1 , "handleFilenameEnd(XMLElement)" : 1 , "handleModelEnd(XMLElement)" : 1 , "handlePluginEnd(XMLElement)" : 1 , "handleProfileEnd(XMLElement)" : 1 , "handleUserDefinedEnd(XMLElement)" : 1 , "lookupProfile(String)" : 1}},{ "className" : "org::argouml::core::propertypanels::ui::UMLModelElementSupplierDependencyListModel" , "selectors" : { "UMLModelElementSupplierDependencyListModel(Object)" : 1}},{ "className" : "org::argouml::language::csharp::importer::csparser::nodes::expressions::primitive::NullPrimitive" , "selectors" : { "NullPrimitive()" : 1}},{ "className" : "org::argouml::core::propertypanels::ui::UMLMessageReceiverListModel" , "selectors" : { "UMLMessageReceiverListModel(Object,String)" : 1}},{ "className" : "org::argouml::uml::diagram::use_case::ui::FigInclude" , "selectors" : { "<Initializer>()::ArrowHeadGreater" : 1 , "FigInclude(Object,DiagramSettings)" : 1 , "initialize()" : 1}},{ "className" : "org::argouml::uml::cognitive::critics::CrUselessAbstract" , "selectors" : { "CrUselessAbstract()" : 1}},{ "className" : "org::argouml::uml::ui::behavior::state_machines::ActionAddSignalsToSignalEvent" , "selectors" : { "ActionAddSignalsToSignalEvent()" : 1}},{ "className" : "org::argouml::core::propertypanels::model::GetterSetterManager::ExpressionGetterSetter" , "selectors" : { "create(String,String)" : 1}},{ "className" : "org::argouml::core::propertypanels::ui::LabelledComponent" , "selectors" : { "LabelledComponent(String,JComponent)" : 1 , "getId()" : 3 , "getLabel()" : 2 , "setIcon()" : 2 , "toggleExpansion(Expandable)" : 2}},{ "className" : "org::argouml::language::java::ui::SettingsTabJava" , "selectors" : { "buildPanel()" : 1}},{ "className" : "org::argouml::cognitive::EnabledCM" , "selectors" : { "EnabledCM()" : 1}},{ "className" : "org::argouml::uml::cognitive::checklist::UMLCheckItem" , "selectors" : { "UMLCheckItem(String,String)" : 1}},{ "className" : "org::argouml::language::sql::FirebirdSqlCodeCreator" , "selectors" : { "getOneToOneTrigger(ForeignKeyDefinition)" : 1 , "getOneToOneTriggerBody(ForeignKeyDefinition,String)" : 2 , "resetCounters()" : 1}},{ "className" : "com::nwalsh::xalan::Verbatim" , "selectors" : { "addCallout(int,Node,int)" : 2 , "copyAttributes(Element)" : 2 , "countLineBreaks(Node)" : 2 , "insertCallouts(NodeIterator,NodeIterator,int,FormatCallout)" : 4 , "insertCallouts(NodeIterator,NodeIterator,int,FormatCallout)::DOMBuilder" : 1 , "insertDingbatCallouts(NodeIterator,NodeIterator,int,int,boolean)" : 1 , "insertGraphicCallouts(NodeIterator,NodeIterator,int,String,String,int,boolean)" : 1 , "insertTextCallouts(NodeIterator,NodeIterator,int,boolean)" : 1 , "insertUnicodeCallouts(NodeIterator,NodeIterator,int,String,int,int,boolean)" : 1 , "numberLines(ExpressionContext,NodeIterator)::DOMBuilder" : 1}},{ "className" : "org::argouml::language::csharp::importer::csparser::statements::IfStatement" , "selectors" : { "IfStatement()" : 1}},{ "className" : "org::argouml::language::csharp::importer::csparser::statements::CatchNode" , "selectors" : { "CatchNode()" : 1 , "ToSource(StringBuilder)" : 1}},{ "className" : "org::argouml::core::propertypanels::ui::UMLAssociationEndSpecificationListModel" , "selectors" : { "UMLAssociationEndSpecificationListModel(Object)" : 1}},{ "className" : "org::argouml::model::mdr::CommonBehaviorHelperMDRImpl" , "selectors" : { "CommonBehaviorHelperMDRImpl(MDRModelImplementation)" : 1 , "addAction(Object,Object)::ActionSequence" : 1 , "addAction(Object,int,Object)::ActionSequence" : 1 , "addActualArgument(Object,Object)::Action" : 1 , "addActualArgument(Object,int,Object)::Action" : 1 , "addClassifier(Object,Object)::Instance" : 1 , "addContext(Object,Object)" : 1 , "addContext(Object,Object)::Signal" : 1 , "addContext(Object,Object)::org" : 1 , "addReception(Object,Object)" : 1 , "addReception(Object,Object)::Reception" : 1 , "addStimulus(Object,Object)::Stimulus" : 2 , "getInstantiation(Object)::CreateAction" : 1 , "removeAction(Object,Object)::ActionSequence" : 1 , "removeActualArgument(Object,Object)::Action" : 1 , "removeClassifier(Object,Object)::Instance" : 1 , "removeContext(Object,Object)" : 1 , "removeContext(Object,Object)::Signal" : 1 , "removeContext(Object,Object)::org" : 1 , "removeReception(Object,Object)" : 1 , "removeReception(Object,Object)::Reception" : 1 , "setActualArguments(Object,List)::Action" : 2 , "setAsynchronous(Object,boolean)::Action" : 1 , "setClassifiers(Object,Collection)::Instance" : 2 , "setCommunicationLink(Object,Object)::Stimulus" : 1 , "setComponentInstance(Object,Object)::Instance" : 1 , "setDispatchAction(Object,Object)::Stimulus" : 1 , "setInstance(Object,Object)::AttributeLink" : 1 , "setInstance(Object,Object)::LinkEnd" : 1 , "setInstantiation(Object,Object)::CreateAction" : 2 , "setNodeInstance(Object,Object)::ComponentInstance" : 2 , "setOperation(Object,Object)::CallAction" : 1 , "setOperation(Object,Object)::CallEvent" : 1 , "setReceiver(Object,Object)::Message" : 1 , "setReceiver(Object,Object)::Stimulus" : 1 , "setSender(Object,Object)::Message" : 1 , "setSender(Object,Object)::Stimulus" : 1 , "setSignal(Object,Object)::Reception" : 1 , "setSignal(Object,Object)::SendAction" : 1 , "setSignal(Object,Object)::SignalEvent" : 1 , "setSpecification(Object,String)::Reception" : 1 , "setTarget(Object,Object)::Transition" : 1 , "setTransition(Object,Object)::Guard" : 1 , "setTransition(Object,Object)::Transition" : 1 , "setValue(Object,Object)::Argument" : 1 , "setValue(Object,Object)::AttributeLink" : 1}},{ "className" : "org::argouml::uml::cognitive::critics::CrMissingStateName" , "selectors" : { "CrMissingStateName()" : 1}},{ "className" : "org::argouml::language::php::PHPDocumentor::DeprecatedTag" , "selectors" : { "DeprecatedTag()" : 1}},{ "className" : "org::argouml::language::csharp::importer::csparser::structural::UsingDirectiveNode" , "selectors" : { "ToSource(StringBuilder)" : 1 , "UsingDirectiveNode()" : 1 , "setAliasName(IdentifierExpression)" : 1}},{ "className" : "org::argouml::uml::diagram::ui::ActionStereotypeViewBigIcon" , "selectors" : { "ActionStereotypeViewBigIcon(FigNodeModelElement)" : 1}},{ "className" : "org::argouml::util::SuffixFilter" , "selectors" : { "SuffixFilter(String,String)" : 22 , "SuffixFilter(String[],String)" : 1 , "accept(File)" : 1 , "getDescription()" : 1 , "getExtension(File)" : 2 , "getExtension(String)" : 1 , "getSuffix()" : 17}},{ "className" : "org::argouml::profile::internal::ProfileMeta" , "selectors" : { "ProfileMeta()" : 1 , "getModel()" : 1 , "loadWellFormednessRules()" : 1}},{ "className" : "org::argouml::uml::cognitive::critics::CrNoTransitions" , "selectors" : { "CrNoTransitions()" : 1}},{ "className" : "org::argouml::uml::diagram::collaboration::CollabDiagramGraphModel" , "selectors" : { "CollabDiagramGraphModel()" : 1 , "addEdge(Object)" : 4 , "canAddEdge(Object)" : 5 , "canAddNode(Object)" : 1 , "getInteraction()" : 1 , "getOwner()" : 1 , "setCollaboration(Object)" : 1}},{ "className" : "org::argouml::activity2::diagram::FigGravityPoly" , "selectors" : { "FigGravityPoly()" : 1 , "FigGravityPoly(Polygon)" : 1 , "getClosestPoint(Point)" : 1}},{ "className" : "org::argouml::language::sql::SqlCreatorLoader" , "selectors" : { "SqlCreatorLoader()" : 1 , "getClassesFromDir(File)" : 2 , "getClassesFromJar(ClassLoader,JarFile)" : 1 , "getCodeCreators()" : 1}},{ "className" : "org::argouml::ui::explorer::rules::OutgoingDependencyNode" , "selectors" : { "OutgoingDependencyNode(Object)" : 1 , "getParent()" : 2}},{ "className" : "org::argouml::core::propertypanels::ui::UMLNodeDeployedComponentListModel" , "selectors" : { "UMLNodeDeployedComponentListModel(Object)" : 1}},{ "className" : "org::argouml::language::cpp::reveng::DtorModeler" , "selectors" : { "DtorModeler(Object,Object,Object,boolean,ProfileCpp)" : 1}},{ "className" : "org::argouml::model::ModelImplementation" , "selectors" : { "getActivityGraphsFactory()" : 1 , "getActivityGraphsHelper()" : 1 , "getAggregationKind()" : 1 , "getChangeableKind()" : 1 , "getCollaborationsFactory()" : 1 , "getCollaborationsHelper()" : 1 , "getCommonBehaviorFactory()" : 1 , "getCommonBehaviorHelper()" : 1 , "getConcurrencyKind()" : 1 , "getCopyHelper()" : 1 , "getCoreFactory()" : 1 , "getCoreHelper()" : 1 , "getDataTypesFactory()" : 1 , "getDataTypesHelper()" : 1 , "getDiagramInterchangeModel()" : 1 , "getDirectionKind()" : 1 , "getExtensionMechanismsFactory()" : 1 , "getExtensionMechanismsHelper()" : 1 , "getFacade()" : 1 , "getMessageSort()" : 1 , "getMetaTypes()" : 1 , "getModelEventPump()" : 1 , "getModelManagementFactory()" : 1 , "getModelManagementHelper()" : 1 , "getOrderingKind()" : 1 , "getPseudostateKind()" : 1 , "getScopeKind()" : 1 , "getStateMachinesFactory()" : 1 , "getStateMachinesHelper()" : 1 , "getUmlFactory()" : 1 , "getUmlHelper()" : 1 , "getUseCasesFactory()" : 1 , "getUseCasesHelper()" : 1 , "getVisibilityKind()" : 1 , "getXmiReader()" : 1 , "getXmiWriter(Object,OutputStream,String)" : 1}},{ "className" : "org::argouml::uml::cognitive::critics::CrCrossNamespaceAssoc" , "selectors" : { "CrCrossNamespaceAssoc()" : 1}},{ "className" : "org::argouml::swingext::BasicLinkButtonUI" , "selectors" : { "BasicLinkButtonUI()" : 1 , "createUI(JComponent)" : 1}},{ "className" : "org::argouml::language::csharp::importer::csparser::main::Parser" , "selectors" : { "AssertAndAdvance(int)" : 87 , "ConsumeBinary(int)" : 3 , "ConsumeUnary(int)" : 1 , "ParseArrayCreation(TypeNode)" : 1 , "ParseArrayRank(TypeNode)" : 1 , "ParseCastOrGroup()" : 1 , "ParseContinuingPrimary()" : 19 , "ParseElementAccess()" : 1 , "ParseExpression()" : 28 , "ParseExpression(int)" : 3 , "ParseExpressionList(int)" : 7 , "ParseExpressionSegment()" : 14 , "ParseInvocation()" : 1 , "ParseLocalDeclaration()" : 1 , "ParseMemberAccess()" : 1 , "ParseUnsafeCode()" : 1 , "ParseUsing()" : 1 , "Parser()" : 2 , "RecoverFromError(String,int)" : 9 , "RecoverFromError(int)" : 4 , "ReportError(String)" : 37 , "SkipToEOL(int)" : 7 , "SkipToElseOrEndIf()" : 2 , "SkipToNextHash()" : 1 , "advance()" : 175 , "isAfterType()" : 1 , "parse(TokenCollection,List<String>)" : 2 , "parseAccessor()" : 6 , "parseArgs()" : 2 , "parseAttributeModifiers()" : 1 , "parseBlock(BlockStatement)" : 21 , "parseBlock(BlockStatement,boolean)" : 2 , "parseBreak()" : 1 , "parseCase()" : 1 , "parseChecked()" : 1 , "parseClass()" : 2 , "parseClassMember()" : 2 , "parseConst()" : 1 , "parseConstExpr()" : 3 , "parseContinue()" : 1 , "parseCtor(TypeNode)" : 1 , "parseDelegate()" : 2 , "parseDestructor()" : 1 , "parseDo()" : 1 , "parseEnum()" : 2 , "parseEnumMember()" : 1 , "parseEvent()" : 1 , "parseField(TypeNode,IdentifierExpression)" : 1 , "parseFor()" : 1 , "parseForEach()" : 1 , "parseGoto()" : 1 , "parseIdentifierOrKeyword()" : 4 , "parseIf()" : 1 , "parseIndexer(TypeNode,IdentifierExpression)" : 2 , "parseInterface()" : 2 , "parseInterfaceAccessors(Boolean[])" : 3 , "parseInterfaceMember()" : 1 , "parseLock()" : 1 , "parseMethod(TypeNode,IdentifierExpression)" : 1 , "parseModifiers()" : 2 , "parseNamespace()" : 1 , "parseNamespaceOrTypes()" : 2 , "parseOperatorDecl(TypeNode)" : 2 , "parseParamDecl()" : 1 , "parseParamList()" : 5 , "parseParamList(int,int)" : 3 , "parsePossibleAttributes(boolean)" : 11 , "parsePreprocessorDirective()" : 1 , "parseProperty(TypeNode,IdentifierExpression)" : 1 , "parseQualifiedIdentifier()" : 26 , "parseReturn()" : 1 , "parseStatement(NodeCollection<StatementNode>)" : 4 , "parseStruct()" : 2 , "parseSwitch()" : 1 , "parseThrow()" : 1 , "parseTry()" : 1 , "parseType()" : 19 , "parseUnchecked()" : 1 , "parseUsingDirectives()" : 1 , "parseWhile()" : 1}},{ "className" : "org::argouml::ui::PredicateMType" , "selectors" : { "PredicateMType(Class[])" : 3 , "PredicateMType(Class[],int)" : 1 , "create()" : 1 , "create(Object)" : 52}},{ "className" : "org::argouml::core::propertypanels::ui::UMLMethodSpecificationComboBoxModel::ActionSetMethodSpecification" , "selectors" : { "ActionSetMethodSpecification()" : 1}},{ "className" : "org::argouml::moduleloader::ModuleLoader2" , "selectors" : { "ModuleLoader2()" : 1 , "addClass(ClassLoader,String)" : 2 , "addClass(String)" : 2 , "addModule(ModuleInterface)" : 1 , "allModules()" : 2 , "availableModules()" : 4 , "computeExtensionLocations()" : 1 , "doInternal(boolean)" : 1 , "doLoad(boolean)" : 2 , "findModule(String)" : 4 , "getDescription(String)" : 1 , "getDescriptionInternal(String)" : 1 , "getDetailsTabs()" : 1 , "getExtensionLocations()" : 2 , "getInstance()" : 14 , "huntForModules()" : 1 , "huntForModulesFromExtensionDir()" : 1 , "huntModulesFromNamedDirectory(String)" : 1 , "isEnabledInternal(String)" : 1 , "isSelected(String)" : 1 , "isSelectedInternal(String)" : 1 , "processEntry(ClassLoader,String)" : 2 , "processJarFile(ClassLoader,File)" : 1 , "setSelected(String,boolean)" : 1 , "setSelectedInternal(String,boolean)" : 1}},{ "className" : "org::argouml::uml::ui::ActionReopenProject" , "selectors" : { "ActionReopenProject(String)" : 1 , "getFilename()" : 2}},{ "className" : "org::argouml::ui::targetmanager::TargetManager::Remover" , "selectors" : { "addListener(Object)" : 5 , "addListener(Object)::Diagram" : 1 , "remove(Object)" : 2 , "removeAllListeners(Collection)" : 4 , "removeListener(Object)" : 3 , "removeListener(Object)::Diagram" : 1}},{ "className" : "org::argouml::language::csharp::importer::csparser::members::InterfaceEventNode" , "selectors" : { "InterfaceEventNode()" : 1}},{ "className" : "org::argouml::uml::diagram::use_case::ui::UseCaseDiagramRenderer" , "selectors" : { "UseCaseDiagramRenderer()" : 1 , "getFigEdgeFor(GraphModel,Layer,Object,Map)::LayerPerspective" : 1}},{ "className" : "org::argouml::core::propertypanels::ui::UMLGeneralizableElementGeneralizationListModel" , "selectors" : { "UMLGeneralizableElementGeneralizationListModel(Object)" : 1}},{ "className" : "org::argouml::language::csharp::importer::csparser::members::OperatorNode" , "selectors" : { "OperatorNode()" : 1}},{ "className" : "org::argouml::profile::UserDefinedProfile" , "selectors" : { "UserDefinedProfile(File,ProfileManager)" : 6 , "UserDefinedProfile(String,URL,Set<Critic>,Set<String>,ProfileManager)" : 2 , "UserDefinedProfile(URL,ProfileManager)" : 1 , "filterPackages(Collection)" : 1 , "generateCriticFromComment(Object)" : 1 , "getAllCommentsInModel(Collection)" : 1 , "getAllCritiquesInModel()" : 1 , "getDisplayName()" : 1 , "getModelFile()" : 6 , "getProfilePackages()" : 2 , "getSomeProfileManager()" : 3 , "loadDependentProfiles(Object)" : 1 , "loadDependentProfilesUml1(Object)" : 1 , "loadFigNodes(Collection)" : 1 , "loadImage(String,File)" : 1 , "loadModel()" : 2 , "str2Decision(String)" : 1 , "str2KnowledgeType(String)" : 1 , "str2Priority(String)" : 1}},{ "className" : "org::argouml::uml::cognitive::critics::CrCircularInheritance" , "selectors" : { "CrCircularInheritance()" : 1}},{ "className" : "org::argouml::notation::providers::java::AttributeNotationJava" , "selectors" : { "toString(Object)" : 1}},{ "className" : "org::argouml::activity2::ActivityDiagramPropPanelFactory" , "selectors" : { "ActivityDiagramPropPanelFactory()" : 1}},{ "className" : "org::argouml::gefext::ArgoFigRRect" , "selectors" : { "ArgoFigRRect(int,int,int,int)" : 1}},{ "className" : "org::argouml::ui::ProjectBrowser::TitleHandler" , "selectors" : { "TitleHandler()" : 1 , "buildTitle(String,ArgoDiagram)" : 5 , "setTitleInternal(String)" : 2}},{ "className" : "javax::swing::tree::TreeCellRenderer" , "selectors" : { "getTreeCellRendererComponent(JTree,Object,boolean,boolean,boolean,int,boolean)" : 2}},{ "className" : "org::argouml::uml::diagram::ui::FigStereotypesGroup" , "selectors" : { "FigStereotypesGroup(Object,Rectangle,DiagramSettings)" : 2 , "constructFigs(int,int,int,int)" : 1 , "constructFigs(int,int,int,int)::FigRect" : 1 , "findFig(Object)" : 3 , "findFigKeyword()" : 1 , "getBoundsForNextStereotype()" : 3 , "getHeight(???)" : 5 , "getIconForStereotype(FigStereotype)" : 2 , "getMinimumSize()" : 26 , "getStereotypeCount()" : 2 , "getStereotypeFigs()" : 2 , "getY(???)" : 1 , "isHidingStereotypesWithIcon()" : 1 , "isVisible(???)" : 13 , "populate()" : 5 , "populate()::ArrayList" : 1 , "removeFromDiagram()" : 1 , "removeFromDiagram()::Fig" : 1 , "reorderStereotypeFigs()" : 2 , "setBounds(???)" : 14 , "setFillColor(???)" : 3 , "setFilled(???)" : 4 , "setHeight(???)" : 1 , "setHidingStereotypesWithIcon(boolean)" : 1 , "setKeyword(String)" : 4 , "setLineColor(???)" : 1 , "setLineWidth(???)" : 4 , "setVisible(???)" : 13 , "updateHiddenStereotypes()" : 2}},{ "className" : "org::argouml::ui::SaveSwingWorker" , "selectors" : { "SaveSwingWorker(Project,File,boolean)" : 1}},{ "className" : "org::argouml::notation::providers::uml::InitNotationUml" , "selectors" : { "InitNotationUml()" : 1}},{ "className" : "org::argouml::uml::diagram::ui::FigMultiLineText" , "selectors" : { "FigMultiLineText(Object,Rectangle,DiagramSettings,boolean)" : 2 , "initFigs()" : 1}},{ "className" : "org::argouml::state2::diagram::FigVertex::FigRegionCompartment" , "selectors" : { "FigRegionCompartment(int,int,int,int)" : 1}},{ "className" : "org::argouml::model::euml::ActivityGraphsFactoryEUMLlImpl" , "selectors" : { "ActivityGraphsFactoryEUMLlImpl(EUMLModelImplementation)" : 1 , "createActionState()" : 1 , "createActivityGraph()" : 2 , "createPartition()" : 1 , "createSubactivityState()" : 1}},{ "className" : "org::argouml::model::mdr::XmiHeaderProviderImpl" , "selectors" : { "XmiHeaderProviderImpl(String)" : 1}},{ "className" : "org::argouml::sequence2::diagram::ModeCreateMessage" , "selectors" : { "ensureSpace(FigMessage)" : 1 , "getMessagesBelow(FigMessage)" : 1 , "getNearestMessage(FigClassifierRole,FigMessage,boolean)" : 2 , "isBetween(int,FigMessage,FigMessage)" : 2}},{ "className" : "org::argouml::notation::providers::AssociationRoleNotation" , "selectors" : { "AssociationRoleNotation(Object)" : 1}},{ "className" : "org::argouml::uml::diagram::static_structure::ui::FigPackage::ShowStereotypeAction" , "selectors" : { "ShowStereotypeAction()" : 1}},{ "className" : "org::argouml::persistence::ArgoTokenTable" , "selectors" : { "ArgoTokenTable()" : 1}},{ "className" : "org::argouml::core::propertypanels::ui::UMLLinkAssociationComboBoxModel::ActionSetLinkAssociation" , "selectors" : { "ActionSetLinkAssociation()" : 1}},{ "className" : "org::argouml::notation::providers::uml::TransitionNotationUml" , "selectors" : { "TransitionNotationUml(Object)" : 3 , "delete(Object)" : 7 , "findCallEvent(String,Object)" : 1 , "findOrBuildChangeEvent(String,Object)" : 1 , "findOrBuildSignalEvent(String,Object)" : 1 , "findOrBuildTimeEvent(String,Object)" : 1 , "generateClassifierRef(Object)" : 1 , "generateEvent(Object)" : 1 , "generateExpression(Object)" : 4 , "generateGuard(Object)" : 1 , "generateKind(Object)" : 1 , "generateParameter(Object)" : 1 , "generateParameterList(Object)" : 1 , "parseEffect(Object,String)" : 1 , "parseGuard(Object,String)" : 1 , "parseTransition(Object,String)" : 2 , "parseTrigger(Object,String)" : 1 , "toString(Object)" : 1 , "toString(Object,NotationSettings)" : 1}},{ "className" : "org::argouml::core::propertypanels::model::GetterSetterManagerImpl::DeferrableEventGetterSetter::RemoveCommand" , "selectors" : { "RemoveCommand(Object,Object)" : 1}},{ "className" : "org::argouml::notation::providers::MultiplicityNotation" , "selectors" : { "MultiplicityNotation(Object)" : 1}},{ "className" : "org::argouml::swingext::LeftArrowIcon" , "selectors" : { "LeftArrowIcon()" : 2 , "getIconHeight()" : 1 , "getIconWidth()" : 1}},{ "className" : "org::argouml::uml::ui::foundation::core::ActionSetStructuralFeatureTargetScope" , "selectors" : { "ActionSetStructuralFeatureTargetScope()" : 1 , "getInstance()" : 1}},{ "className" : "org::argouml::notation2::StereotypeUmlNotation" , "selectors" : { "StereotypeUmlNotation(NotatedItem)" : 1}},{ "className" : "org::argouml::core::propertypanels::ui::UMLDependencySupplierListModel" , "selectors" : { "UMLDependencySupplierListModel(Object)" : 1}},{ "className" : "org::argouml::model::euml::UseCasesFactoryEUMLImpl" , "selectors" : { "UseCasesFactoryEUMLImpl(EUMLModelImplementation)" : 1 , "buildActor(Object,Object)::Actor" : 2 , "buildExtend(???)" : 1 , "buildExtend(Object,Object,Object)::ExtensionPoint" : 1 , "buildExtend(Object,Object,Object)::anonymous(RunnableClass)" : 1 , "buildInclude(???)" : 1 , "createActor(???)" : 1 , "createExtensionPoint(???)" : 1 , "createUseCase(???)" : 1}},{ "className" : "org::argouml::uml::ui::UMLModelElementTaggedValueDocument" , "selectors" : { "UMLModelElementTaggedValueDocument(String)" : 6 , "getProperty()" : 1 , "setProperty(String)" : 1}},{ "className" : "javax::swing::DefaultListCellRenderer" , "selectors" : { "DefaultListCellRenderer()" : 18 , "getListCellRendererComponent(JList,Object,int,boolean,boolean)" : 73}},{ "className" : "org::argouml::core::propertypanels::ui::UMLIncludeAdditionListModel" , "selectors" : { "UMLIncludeAdditionListModel(Object,String)" : 1}},{ "className" : "org::argouml::core::propertypanels::ui::UMLMetaClassComboBoxModel::ActionSetTagDefinitionType" , "selectors" : { "ActionSetTagDefinitionType()" : 1}},{ "className" : "org::argouml::language::csharp::importer::csparser::members::MethodNode" , "selectors" : { "MethodNode()" : 1}},{ "className" : "org::argouml::core::propertypanels::ui::ActionSetMultiplicity" , "selectors" : { "ActionSetMultiplicity()" : 1 , "setSelectedItem(Object,Object)" : 1}},{ "className" : "org::argouml::uml::cognitive::critics::CrNameConflict" , "selectors" : { "CrNameConflict()" : 1 , "computeOffenders(Object)" : 3}},{ "className" : "org::argouml::uml::ui::UMLExpressionLanguageField" , "selectors" : { "update()" : 1}},{ "className" : "org::argouml::uml::ChildGenRelated" , "selectors" : { "ChildGenRelated()" : 1 , "gen(Object)" : 1 , "getSingleton()" : 1}},{ "className" : "org::argouml::core::propertypanels::ui::UMLOFSStateListModel::ActionRemoveOFSState" , "selectors" : { "ActionRemoveOFSState()" : 1}},{ "className" : "org::argouml::ui::explorer::rules::GoStateMachineToTop" , "selectors" : { "GoStateMachineToTop()" : 1}},{ "className" : "com::nwalsh::saxon::NumberLinesEmitter" , "selectors" : { "NumberLinesEmitter(???)" : 1 , "characters(char[],int,int)" : 1 , "formatLineNumber(int)" : 2 , "getResultTreeFragment(???)" : 1 , "skipThisElement(int)" : 1}},{ "className" : "org::argouml::core::propertypanels::ui::EnumerationListModel" , "selectors" : { "EnumerationListModel(Object,String)" : 1}},{ "className" : "org::argouml::uml::ui::foundation::core::ActionSetAssociationEndTargetScope" , "selectors" : { "ActionSetAssociationEndTargetScope()" : 1 , "getInstance()" : 1}},{ "className" : "org::argouml::model::Defaults" , "selectors" : { "getDefaultName(Object)" : 2 , "getDefaultType(Object)" : 2}},{ "className" : "org::argouml::uml::diagram::ui::ArgoFig" , "selectors" : { "deleteFromModel(???)" : 1 , "propertyChange(???)" : 1 , "renderingChanged()" : 3 , "setBotMargin(???)" : 1 , "setFillColor(???)" : 1 , "setFilled(???)" : 1 , "setFontFamily(???)" : 1 , "setFontSize(???)" : 1 , "setLeftMargin(???)" : 1 , "setOwner(???)" : 2 , "setRightMargin(???)" : 1 , "setTextColor(???)" : 1 , "setTextFillColor(???)" : 1 , "setTextFilled(???)" : 1 , "setTopMargin(???)" : 1}},{ "className" : "org::argouml::uml::diagram::ui::FigNodeModelElement::SelectionDefaultClarifiers" , "selectors" : { "SelectionDefaultClarifiers(???)" : 1}},{ "className" : "org::argouml::uml::diagram::ui::PropPanelString" , "selectors" : { "PropPanelString()" : 1 , "insertUpdate(DocumentEvent)" : 1 , "setTarget(Object)" : 4}},{ "className" : "org::argouml::ui::SwingWorker::TimerListener" , "selectors" : { "TimerListener()" : 1}},{ "className" : "org::argouml::uml::cognitive::critics::CrTooManyStates" , "selectors" : { "CrTooManyStates()" : 1}},{ "className" : "org::argouml::activity2::diagram::DiagramNode" , "selectors" : { "getBounds()" : 1}},{ "className" : "org::argouml::language::java::ui::RESequenceDiagramDialog" , "selectors" : { "RESequenceDiagramDialog(Object)" : 1 , "RESequenceDiagramDialog(Object,DiagramElement,ArgoDiagram)" : 3 , "buildSequenceDiagram(Object)" : 1 , "ensureDirectedAssociation(Object,Object)" : 1 , "getAutomaticallyTab()" : 1 , "getBody(Object)" : 1 , "getContentPanel()" : 1 , "getManuallyTab()" : 1 , "getNewTarget(Object)" : 1 , "parseBody()" : 1 , "parseBody()::ANTLRStringStream" : 1 , "permissionLookup(Object,String)" : 1 , "setVisible(???)" : 3}},{ "className" : "org::argouml::uml::diagram::static_structure::layout::ClassdiagramNode" , "selectors" : { "ClassdiagramNode(???)" : 1 , "addDownlink(ClassdiagramNode)" : 1 , "addUplink(ClassdiagramNode)" : 3 , "calculateWeight()" : 1 , "getColumn()" : 3 , "getDownNodes()" : 4 , "getEdgeOffset()" : 1 , "getFigure(???)" : 2 , "getLevel()" : 2 , "getLocation()" : 4 , "getPlacementHint()" : 3 , "getRank()" : 7 , "getSize()" : 8 , "getSubtreeWeight()" : 2 , "getTypeOrderNumer()" : 4 , "getUpNodes()" : 7 , "getWeight()" : 5 , "isComment()" : 3 , "isPackage()" : 4 , "isStandalone()" : 7 , "setColumn(int)" : 2 , "setEdgeOffset(int)" : 1 , "setLocation(Point)" : 2 , "setPlacementHint(int)" : 1 , "setRank(int)" : 3 , "setWeight(float)" : 1}},{ "className" : "org::argouml::persistence::TodoTokenTable" , "selectors" : { "TodoTokenTable()" : 1}},{ "className" : "org::argouml::ui::explorer::DnDExplorerTree" , "selectors" : { "DnDExplorerTree()" : 1 , "isValidDrag(TreePath,Transferable)" : 1}},{ "className" : "org::argouml::core::propertypanels::ui::UMLAssociationConnectionListModel" , "selectors" : { "UMLAssociationConnectionListModel(Object)" : 1}},{ "className" : "org::argouml::uml::ui::ActionNavigateUpNextDown" , "selectors" : { "getFamily(Object)" : 1 , "getParent(Object)" : 1}},{ "className" : "org::argouml::core::propertypanels::ui::UMLPlainTextDocument" , "selectors" : { "UMLPlainTextDocument(String,Object)" : 6 , "getEventName()" : 1 , "getProperty()" : 3 , "getTarget()" : 17 , "insertString(int,String,AttributeSet)" : 1 , "isFiring()" : 2 , "propertyChange(PropertyChangeEvent)" : 2 , "setEventName(String)" : 1 , "setFiring(boolean)" : 6 , "setProperty(String)" : 1 , "setPropertyInternal(String)" : 2 , "setTarget(Object)" : 1 , "updateText(String)" : 2}},{ "className" : "org::argouml::core::propertypanels::model::GetterSetterManagerImpl::TriggerGetterSetter" , "selectors" : { "TriggerGetterSetter()" : 1 , "getOptions(Object,Collection<Class<?>>)" : 1}},{ "className" : "org::argouml::ui::MyLocale" , "selectors" : { "MyLocale(Locale)" : 1 , "getDefault(Collection<MyLocale>)" : 1 , "getLocale()" : 2 , "getLocales()" : 1}},{ "className" : "org::argouml::language::php::PHPDocumentor::ReturnTag" , "selectors" : { "ReturnTag()" : 1}},{ "className" : "org::argouml::language::sql::SqlCodeCreator" , "selectors" : { "createForeignKey(ForeignKeyDefinition)" : 1 , "createTable(TableDefinition)" : 1 , "getName()" : 1}},{ "className" : "org::argouml::language::csharp::importer::csparser::nodes::expressions::PostDecrementExpression" , "selectors" : { "PostDecrementExpression(ExpressionNode)" : 1}},{ "className" : "org::argouml::language::csharp::importer::csparser::statements::DoStatement" , "selectors" : { "DoStatement()" : 1}},{ "className" : "org::argouml::cognitive::critics::ui::TableCritics" , "selectors" : { "TableCritics(TableModel,ListSelectionListener,TableModelListener)" : 1 , "getCriticAtRow(int)" : 1 , "getInitialSize()" : 1 , "setAdvanced(boolean)" : 1 , "setColumnWidths()" : 2}},{ "className" : "org::argouml::core::propertypanels::ui::UMLExpressionLanguageField" , "selectors" : { "UMLExpressionLanguageField(UMLExpressionModel,boolean)" : 1 , "update()" : 2}},{ "className" : "org::argouml::uml::ui::behavior::state_machines::ButtonActionNewGuard" , "selectors" : { "ButtonActionNewGuard()" : 3 , "getIconName()" : 1 , "getKeyName()" : 2 , "isEnabled()" : 1}},{ "className" : "org::argouml::core::propertypanels::model::GetterSetterManagerImpl::DeferrableEventGetterSetter::AddCommand" , "selectors" : { "AddCommand(Object)" : 1}},{ "className" : "org::argouml::sequence2::diagram::ActionSetOperation" , "selectors" : { "ActionSetOperation(Object,Object,String)" : 1}},{ "className" : "org::argouml::core::propertypanels::model::GetterSetterManagerImpl::AsynchronousGetterSetter" , "selectors" : { "AsynchronousGetterSetter()" : 1}},{ "className" : "java::awt::AWTKeyStroke" , "selectors" : { "equals(Object)" : 7 , "getAWTKeyStroke(String)" : 4 , "getKeyChar()" : 3 , "getKeyCode()" : 48 , "getModifiers()" : 11 , "isOnKeyRelease()" : 2 , "toString()" : 6}},{ "className" : "org::argouml::language::csharp::importer::csparser::members::ConstructorNode" , "selectors" : { "ConstructorNode()" : 1}},{ "className" : "org::argouml::language::csharp::importer::csparser::statements::LabeledStatement" , "selectors" : { "LabeledStatement()" : 1}},{ "className" : "org::argouml::core::propertypanels::ui::RowSelector::MoveUpAction" , "selectors" : { "MoveUpAction()" : 1}},{ "className" : "org::argouml::uml::cognitive::critics::CrInvalidSynch" , "selectors" : { "CrInvalidSynch()" : 1}},{ "className" : "org::argouml::core::propertypanels::ui::UMLExtendBaseListModel" , "selectors" : { "UMLExtendBaseListModel(Object,String)" : 1}},{ "className" : "org::argouml::uml::diagram::use_case::ui::FigUseCase::FigMyCircle" , "selectors" : { "FigMyCircle(int,int,int,int)" : 1 , "FigMyCircle(int,int,int,int,Color,Color)" : 1}},{ "className" : "org::argouml::ui::cmd::ActionNotation" , "selectors" : { "ActionNotation()" : 2 , "getMenu()" : 1}},{ "className" : "org::argouml::uml::ui::UMLComboBoxNavigator" , "selectors" : { "UMLComboBoxNavigator(String,JComboBox)" : 1 , "setButtonEnabled(Object)" : 3}},{ "className" : "org::argouml::uml::diagram::ui::SelectionEdgeClarifiers" , "selectors" : { "mouseDragged(???)" : 1 , "mousePressed(???)" : 1 , "mouseReleased(???)" : 3}},{ "className" : "org::argouml::uml::PredicateNotInTrash" , "selectors" : { "PredicateNotInTrash()" : 1 , "evaluate(Object)" : 1}},{ "className" : "org::argouml::uml::diagram::static_structure::ui::FigException" , "selectors" : { "FigException(Object,Rectangle,DiagramSettings)" : 1}},{ "className" : "org::argouml::core::propertypanels::ui::UMLInteractionContextListModel" , "selectors" : { "UMLInteractionContextListModel(Object,String)" : 1}},{ "className" : "org::argouml::uml::cognitive::critics::CrAttrNameConflict" , "selectors" : { "CrAttrNameConflict()" : 1}},{ "className" : "org::argouml::uml::ui::behavior::state_machines::ActionAddEventAsDeferrableEvent" , "selectors" : { "ActionAddEventAsDeferrableEvent()" : 1}},{ "className" : "org::argouml::uml::diagram::deployment::ui::SelectionObject" , "selectors" : { "SelectionObject(???)" : 1}},{ "className" : "org::argouml::language::csharp::importer::csparser::statements::BreakStatement" , "selectors" : { "BreakStatement()" : 1}},{ "className" : "org::argouml::core::propertypanels::ui::UMLStereotypeBaseClassListModel::ActionDeleteStereotypeBaseClass" , "selectors" : { "ActionDeleteStereotypeBaseClass()" : 1}},{ "className" : "org::argouml::uml::cognitive::critics::CrMultipleAgg" , "selectors" : { "CrMultipleAgg()" : 1}},{ "className" : "org::argouml::ui::JasonsTheme" , "selectors" : { "JasonsTheme()" : 1}},{ "className" : "org::argouml::state2::StateDiagramPropPanelFactory" , "selectors" : { "StateDiagramPropPanelFactory()" : 1}},{ "className" : "org::argouml::uml::diagram::ui::FigAttributesCompartment" , "selectors" : { "FigAttributesCompartment(Object,Rectangle,DiagramSettings)" : 1}},{ "className" : "org::argouml::model::AbstractDataTypesHelperDecorator" , "selectors" : { "AbstractDataTypesHelperDecorator(DataTypesHelper)" : 1}},{ "className" : "org::argouml::core::propertypanels::model::GetterSetterManagerImpl::ClassifierGetterSetter" , "selectors" : { "ClassifierGetterSetter()" : 1 , "getOptions(Object,Collection<Class<?>>)" : 1}},{ "className" : "org::argouml::uml::reveng::SettingsTypes::PathSelection" , "selectors" : { "getDefaultPath()" : 1}},{ "className" : "org::argouml::uml::ui::ActionImportFromSources" , "selectors" : { "ActionImportFromSources()" : 1 , "getInstance()" : 2}},{ "className" : "org::argouml::sequence2::diagram::FigHead" , "selectors" : { "FigHead(???)" : 1 , "getBounds(???)" : 2 , "getFillColor()" : 1 , "getHeight(???)" : 5 , "getMinimumHeight()" : 3 , "getMinimumSize()" : 2 , "getMinimumWidth()" : 2 , "getX(???)" : 1 , "getY(???)" : 1 , "initialize(Fig,FigText)::FigRect" : 1 , "setBounds(???)" : 2 , "setFillColor(Color)" : 1 , "setFilled(boolean)" : 1 , "setLineWidth(int)" : 1}},{ "className" : "org::argouml::uml::ui::ActionSaveAllGraphics" , "selectors" : { "ActionSaveAllGraphics()" : 2 , "getFileChooser(Project)" : 1 , "getSaveDir(Project)" : 1 , "showStatus(String)" : 3 , "trySave(boolean)" : 1 , "trySave(boolean,File)" : 1 , "trySaveDiagram(Object,File)" : 2 , "trySaveDiagram(Object,File)::Diagram" : 1}},{ "className" : "org::argouml::core::propertypanels::ui::UMLMutableLinkedList::PopupMenu" , "selectors" : { "PopupMenu()" : 1}},{ "className" : "org::argouml::cognitive::checklist::ui::InitCheckListUI" , "selectors" : { "InitCheckListUI()" : 1}},{ "className" : "org::argouml::language::java::reveng::ClassifierNotFoundException" , "selectors" : { "ClassifierNotFoundException(String)" : 1}},{ "className" : "org::argouml::uml::cognitive::critics::InitCognitiveCritics" , "selectors" : { "InitCognitiveCritics()" : 1}},{ "className" : "org::argouml::ui::explorer::rules::GoProjectToDiagram" , "selectors" : { "GoProjectToDiagram()" : 1}},{ "className" : "org::argouml::language::csharp::importer::csparser::nodes::expressions::ArgumentNode" , "selectors" : { "ArgumentNode()" : 1 , "ToSource(StringBuilder)" : 1}},{ "className" : "com::nwalsh::saxon::ColumnUpdateEmitter" , "selectors" : { "ColumnUpdateEmitter(???)" : 1 , "getResultTreeFragment(???)" : 1}},{ "className" : "org::argouml::uml::diagram::ui::ActionVisibilityProtected" , "selectors" : { "ActionVisibilityProtected(Object)" : 1 , "valueOfTarget(Object)" : 1}},{ "className" : "java::util::NoSuchElementException" , "selectors" : { "NoSuchElementException()" : 340 , "NoSuchElementException(String)" : 214 , "java" : 22}},{ "className" : "org::argouml::ui::explorer::rules::GoClassToNavigableClass" , "selectors" : { "GoClassToNavigableClass()" : 1}},{ "className" : "org::argouml::core::propertypanels::model::GetterSetterManagerImpl::AssociationEndGetterSetter" , "selectors" : { "AssociationEndGetterSetter()" : 1 , "getOptions(Object,Collection<Class<?>>)" : 1}},{ "className" : "org::argouml::language::java::reveng::ParameterDeclaration" , "selectors" : { "getName()" : 2 , "getType()" : 1}},{ "className" : "org::argouml::uml::diagram::ui::ActionVisibilityPackage" , "selectors" : { "ActionVisibilityPackage(Object)" : 1 , "valueOfTarget(Object)" : 1}},{ "className" : "org::argouml::uml::reveng::idl::ClassifierContext" , "selectors" : { "ClassifierContext(Context,Object)" : 1 , "get(String,boolean)" : 2}},{ "className" : "org::argouml::cognitive::ui::ToDoTreeRenderer" , "selectors" : { "ToDoTreeRenderer()" : 1 , "getTreeCellRendererComponent(JTree,Object,boolean,boolean,boolean,int,boolean)::Fig" : 1 , "lookupIconResource(String)" : 12}},{ "className" : "org::argouml::cognitive::ui::ToDoByType" , "selectors" : { "ToDoByType()" : 1}},{ "className" : "org::argouml::language::csharp::importer::csparser::nodes::expressions::OutNode" , "selectors" : { "OutNode(ExpressionNode)" : 1}},{ "className" : "org::argouml::language::csharp::importer::csparser::statements::GotoStatement" , "selectors" : { "GotoStatement()" : 1}},{ "className" : "org::argouml::persistence::ProfileConfigurationFilePersister" , "selectors" : { "getProfilesDirectory(ProfileManager)" : 1 , "isSomeProfileDirectoryConfigured(ProfileManager)" : 2 , "load(Project,InputSource)" : 2 , "loadUnresolved(Collection<String>)" : 1 , "printModelXMI(PrintWriter,Collection)" : 1 , "saveProjectMember(ProjectMember,PrintWriter)" : 1}},{ "className" : "org::argouml::cognitive::ui::ToDoByGoal" , "selectors" : { "ToDoByGoal()" : 1}},{ "className" : "org::argouml::uml::cognitive::critics::CrIllegalGeneralization" , "selectors" : { "CrIllegalGeneralization()" : 1}},{ "className" : "org::argouml::profile::internal::ocl::uml14::OclEnumLiteral" , "selectors" : { "OclEnumLiteral(String)" : 1}},{ "className" : "org::argouml::uml::ui::behavior::use_cases::ActionAddExtendExtensionPoint" , "selectors" : { "ActionAddExtendExtensionPoint()" : 1}},{ "className" : "org::argouml::core::propertypanels::ui::UMLMethodSpecificationComboBoxModel" , "selectors" : { "UMLMethodSpecificationComboBoxModel(String,Object)" : 1}},{ "className" : "org::argouml::cognitive::ListSet" , "selectors" : { "ListSet()" : 35 , "ListSet(T)" : 11 , "ListSet(int)" : 1 , "add(T)" : 63 , "addAll(Collection<? extends T>)" : 4 , "addAllElements(Iterator<T>)" : 1 , "addAllElementsSuchThat(Iterator<T>,Predicate)" : 3 , "addAllElementsSuchThat(ListSet<T>,Predicate)" : 2 , "clear()" : 1 , "contains(Object)" : 18 , "equals(Object)" : 26 , "findSuchThat(Predicate)" : 1 , "get(int)" : 46 , "iterator()" : 2 , "mutex()" : 1 , "reachable(ChildGenerator)" : 4 , "reachable(ChildGenerator,int,Predicate)" : 1 , "remove(Object)" : 1 , "size()" : 14 , "subList(int,int)" : 1 , "toString()" : 3 , "transitiveClosure(ChildGenerator,int,Predicate)" : 2}},{ "className" : "org::argouml::uml::diagram::activity::ui::FigCallState" , "selectors" : { "FigCallState(Object,Rectangle,DiagramSettings)" : 1}},{ "className" : "org::argouml::ui::ProjectSettingsTabProperties" , "selectors" : { "ProjectSettingsTabProperties()" : 1 , "handleSettingsTabRefresh()" : 1}},{ "className" : "org::argouml::deployment2::diagram::FigPort" , "selectors" : { "FigPort(Object,Rectangle,DiagramSettings)" : 1 , "createBigPortFig()::FigRect" : 1 , "initialize()" : 1}},{ "className" : "org::argouml::cognitive::CompositeCM" , "selectors" : { "addMech(ControlMech)" : 4 , "getMechList()" : 2}},{ "className" : "org::argouml::ui::explorer::NameOrder" , "selectors" : { "NameOrder()" : 1 , "compareUserObjects(Object,Object)" : 2 , "getName(Object)" : 2 , "getName(Object)::Diagram" : 1}},{ "className" : "org::argouml::language::csharp::importer::csparser::collections::ExpressionList" , "selectors" : { "ExpressionList()" : 1 , "ToSource(StringBuilder)" : 6 , "getExpressions()" : 1}},{ "className" : "org::argouml::ui::explorer::rules::GoClassifierToStateMachine" , "selectors" : { "GoClassifierToStateMachine()" : 1}},{ "className" : "org::argouml::uml::diagram::ui::StylePanelFigAssociationClass" , "selectors" : { "refresh()" : 1}},{ "className" : "org::argouml::core::propertypanels::ui::UMLRecurrenceExpressionModel" , "selectors" : { "UMLRecurrenceExpressionModel(Object)" : 1}},{ "className" : "org::argouml::gefext::ArgoFigPoly" , "selectors" : { "ArgoFigPoly(int,int)" : 1}},{ "className" : "org::argouml::util::IteratorEnumeration" , "selectors" : { "IteratorEnumeration(Iterator<T>)" : 1}},{ "className" : "org::argouml::uml::diagram::ui::FigEdgeAssociationClass" , "selectors" : { "FigEdgeAssociationClass(FigClassAssociationClass,FigAssociationClass,DiagramSettings)" : 1 , "FigEdgeAssociationClass(FigClassAssociationClass,FigNodeAssociation,DiagramSettings)" : 1 , "getDestFigNode(???)" : 3 , "getRemoveDelegate(???)" : 1 , "getSourceFigNode(???)" : 3 , "setSourceFigNode(???)" : 1}},{ "className" : "org::argouml::application::Main" , "selectors" : { "addPostLoadAction(Runnable)" : 2 , "checkHostsFile()" : 1 , "checkJVMVersion()" : 1 , "getMostRecentProject()" : 1 , "initModel()" : 1 , "initPreinitialize()" : 1 , "initTranslator()" : 1 , "initVersion()" : 1 , "initializeGUI(SplashScreen)" : 1 , "initializeSplash()" : 1 , "initializeSubsystems(SimpleTimer,SplashScreen)" : 1 , "openProject(SimpleTimer,SplashScreen,ProjectBrowser,URL)" : 1 , "parseCommandLine(String[])" : 1 , "performCommands(List<String>)" : 1 , "performCommandsInternal(List<String>)" : 2 , "printUsage()" : 1 , "projectUrl(String,URL)" : 2 , "setSystemProperties()" : 1 , "updateProgress(SplashScreen,int,String)" : 2}},{ "className" : "org::argouml::uml::diagram::ui::ActionMultiplicity" , "selectors" : { "ActionMultiplicity(String,String)" : 8 , "getDestMultOne()" : 1 , "getDestMultOneToMany()" : 1 , "getDestMultZeroToMany()" : 1 , "getDestMultZeroToOne()" : 1}},{ "className" : "org::argouml::uml::diagram::ui::FigEdgePort" , "selectors" : { "FigEdgePort(Object,Rectangle,DiagramSettings)" : 1 , "getFigEdges(???)" : 3 , "getX(???)" : 3 , "getY(???)" : 3 , "initialize()" : 1 , "initialize()::FigCircle" : 1}},{ "className" : "org::argouml::uml::reveng::Import" , "selectors" : { "Import(Frame)" : 2 , "addConfigCheckboxes(JPanel)" : 1 , "addDetailLevelButtons(JPanel)" : 1 , "addSourceEncoding(JPanel)" : 1 , "disposeDialog()" : 2 , "doFile()" : 1 , "getChooser()" : 1 , "getConfigPanel()" : 2 , "getConfigPanelExtension()" : 2 , "getImportLevel()" : 1 , "getInputSourceEncoding()" : 1 , "isChangedOnlySelected()" : 1 , "isCreateDiagramsSelected()" : 1 , "isDescendSelected()" : 1 , "isDiagramLayoutSelected()" : 1 , "isMinimizeFigsSelected()" : 1 , "updateFilters(JFileChooser,SuffixFilter[],SuffixFilter[])" : 2}},{ "className" : "com::nwalsh::xalan::FormatTextCallout" , "selectors" : { "FormatTextCallout(boolean)" : 1}},{ "className" : "org::argouml::gefext::ArgoFigCircle" , "selectors" : { "ArgoFigCircle(int,int,int,int)" : 1}},{ "className" : "org::argouml::ui::SelectCodeCreatorDialog" , "selectors" : { "SelectCodeCreatorDialog()" : 1 , "execute()" : 1 , "setVisible(???)" : 1}},{ "className" : "org::argouml::core::propertypanels::ui::UMLExtendExtensionListModel" , "selectors" : { "UMLExtendExtensionListModel(Object,String)" : 1}},{ "className" : "org::argouml::uml::cognitive::critics::CrEmptyPackage" , "selectors" : { "CrEmptyPackage()" : 1}},{ "className" : "org::argouml::transformer::SimpleStateTransformer" , "selectors" : { "SimpleStateTransformer()" : 1}},{ "className" : "org::argouml::uml::diagram::layout::LayoutHelper" , "selectors" : { "getPointOnPerimeter(Rectangle,int,double,double)" : 1 , "getRoutingPolygonStraightLineWithOffset(Point,Point,int)" : 1}},{ "className" : "org::argouml::model::AbstractExtensionMechanismsHelperDecorator" , "selectors" : { "AbstractExtensionMechanismsHelperDecorator(ExtensionMechanismsHelper)" : 1}},{ "className" : "org::argouml::core::propertypanels::ui::UMLChangeExpressionModel" , "selectors" : { "UMLChangeExpressionModel(Object)" : 1}},{ "className" : "org::argouml::language::php::PHPDocumentor::SinceTag" , "selectors" : { "SinceTag()" : 1}},{ "className" : "org::argouml::uml::cognitive::critics::CrTooManyClasses" , "selectors" : { "CrTooManyClasses()" : 1}},{ "className" : "org::argouml::uml::diagram::state::ui::InitStateDiagram" , "selectors" : { "InitStateDiagram()" : 1}},{ "className" : "org::argouml::persistence::ProjectFilePersister" , "selectors" : { "addProgressListener(ProgressListener)" : 2 , "doLoad(File)" : 1 , "removeProgressListener(ProgressListener)" : 1 , "save(Project,File)" : 1}},{ "className" : "org::argouml::uml::ui::TabSrc" , "selectors" : { "TabSrc()" : 1 , "generateSource(Object)" : 1 , "parseText(String)::FigEdge" : 1 , "parseText(String)::FigNode" : 1 , "refresh()" : 1 , "setTarget(Object)" : 1 , "setTarget(Object)::Fig" : 1 , "shouldBeEnabled(Object)::Fig" : 1}},{ "className" : "org::argouml::notation::providers::uml::AssociationRoleNotationUml" , "selectors" : { "parseRole(Object,String)" : 1 , "toString(Object)" : 1}},{ "className" : "org::argouml::uml::diagram::ui::ActionAddExistingNode" , "selectors" : { "ActionAddExistingNode(String,Object)" : 1}},{ "className" : "org::argouml::uml::diagram::activity::ActivityDiagramGraphModel" , "selectors" : { "ActivityDiagramGraphModel()" : 1}},{ "className" : "org::argouml::core::propertypanels::model::GetterSetterManagerImpl::ExitActionGetterSetter" , "selectors" : { "ExitActionGetterSetter()" : 1 , "getOptions(Object,Collection<Class<?>>)" : 1}},{ "className" : "org::argouml::core::propertypanels::model::GetterSetterManagerImpl::DerivedGetterSetter" , "selectors" : { "DerivedGetterSetter()" : 1}},{ "className" : "org::argouml::ui::FindDialog" , "selectors" : { "FindDialog()" : 1 , "doClearTabs()" : 2 , "doGoToSelection()" : 1 , "doResetFields(boolean)" : 2 , "doSearch()" : 1 , "getInstance()" : 2 , "initHelpTab()" : 1 , "initNameLocTab()" : 1 , "initTypes()" : 1 , "myDoubleClick(int)" : 1 , "reset()" : 1 , "setVisible(???)" : 1}},{ "className" : "org::argouml::kernel::UndoManager" , "selectors" : { "addCommand(Command)" : 4 , "addPropertyChangeListener(PropertyChangeListener)" : 1 , "execute(Command)" : 4 , "getInstance(???)" : 2 , "redo()" : 1 , "startInteraction(String)" : 3 , "undo()" : 1}},{ "className" : "org::argouml::uml::diagram::activity::ui::FigSubactivityState" , "selectors" : { "FigSubactivityState(Object,Rectangle,DiagramSettings)" : 1 , "createBigPortFig()::FigRRect" : 1 , "getFigs(???)" : 1 , "initFigs()" : 1 , "initFigs()::FigRRect" : 1 , "makeSubStatesIcon(int,int)" : 1 , "makeSubStatesIcon(int,int)::FigLine" : 1 , "makeSubStatesIcon(int,int)::FigRRect" : 2 , "setBigPort(???)" : 1 , "setNameFig(???)" : 1 , "setStandardBounds(int,int,int,int)::FigRRect" : 1 , "updateListeners(Object,Object)" : 1}},{ "className" : "org::jgraph::util::Spline2D" , "selectors" : { "Spline2D(Point2D[])" : 1 , "getPoint(double)" : 2 , "init(double[],double[])" : 2}},{ "className" : "com::jgraph::example::MyPortView" , "selectors" : { "MyPortView(Object)" : 1}},{ "className" : "org::jgraph::event::GraphModelEvent" , "selectors" : { "GraphModelEvent(Object,GraphModelChange)" : 1 , "getChange()" : 9}},{ "className" : "org::jgraph::example::LiveJGraphDemo" , "selectors" : { "LiveJGraphDemo()" : 1}},{ "className" : "com::jgraph::io::svg::SVGVertexWriter" , "selectors" : { "SVGVertexWriter()" : 1 , "createNode(SVGGraphWriter,Document,GraphLayoutCache,CellView,double,double)" : 1}},{ "className" : "org::jgraph::example::CompoundVertexView" , "selectors" : { "checkChildBounds()" : 3}},{ "className" : "org::jgraph::graph::Edge" , "selectors" : { "getSource()" : 4 , "getTarget()" : 4 , "setSource(Object)" : 3 , "setTarget(Object)" : 3}},{ "className" : "org::jgraph::util::ParallelEdgeRouter" , "selectors" : { "ParallelEdgeRouter()" : 1 , "getParallelEdges(GraphLayoutCache,EdgeView,CellView,CellView)" : 1 , "getSharedInstance()" : 1 , "setGraph(JGraph)" : 1}},{ "className" : "org::jgraph::JGraph::GraphSelectionRedirector" , "selectors" : { "GraphSelectionRedirector()" : 2}},{ "className" : "com::jgraph::example::EditorGraph" , "selectors" : { "EditorGraph()" : 1}},{ "className" : "org::jgraph::util::Bezier" , "selectors" : { "Bezier(Point2D[])" : 1 , "getPoint(int)" : 1 , "getPointCount()" : 1 , "getPoints()" : 1}},{ "className" : "com::jgraph::layout::tree::JGraphTreeLayout::PolyLine" , "selectors" : { "PolyLine(double)" : 2}},{ "className" : "com::jgraph::layout::JGraphLayout::Stoppable" , "selectors" : { "getProgress()" : 2}},{ "className" : "org::jgraph::graph::GraphTransferable" , "selectors" : { "GraphTransferable(Object[],Map,Rectangle2D,ConnectionSet,ParentMap)" : 1 , "getAttributeMap()" : 1 , "getBounds()" : 1 , "getCells()" : 2 , "getConnectionSet()" : 1 , "getParentMap()" : 1 , "getPlainData()" : 1 , "isPlainSupported()" : 1}},{ "className" : "org::jgraph::graph::GraphCell" , "selectors" : { "getAttributes()" : 1}},{ "className" : "com::jgraph::components::labels::MultiLineVertexView" , "selectors" : { "MultiLineVertexView(Object)" : 1}},{ "className" : "javax::swing::text::rtf::RTFEditorKit" , "selectors" : { "RTFEditorKit()" : 1 , "read(InputStream,Document,int)" : 1 , "write(OutputStream,Document,int,int)" : 1}},{ "className" : "com::jgraph::example::JGraphShadowBorder" , "selectors" : { "JGraphShadowBorder()" : 1 , "average(Color,Color)" : 1 , "getSharedInstance()" : 1}},{ "className" : "com::jgraph::layout::JGraphFacade::DefaultComparator" , "selectors" : { "DefaultComparator()" : 1}},{ "className" : "com::jgraph::example::panelexample::PortLabelGraph" , "selectors" : { "PortLabelGraph()" : 1 , "roundPortPos(double)" : 2}},{ "className" : "com::jgraph::example::portlabels::PortLabelVertexView::WrapperPortLabelRenderer" , "selectors" : { "WrapperPortLabelRenderer()" : 1 , "installAttributes(CellView)" : 1}},{ "className" : "org::jgraph::plaf::basic::BasicGraphUI::KeyHandler" , "selectors" : { "KeyHandler()" : 1}},{ "className" : "org::jgraph::event::GraphSelectionListener" , "selectors" : { "valueChanged(GraphSelectionEvent)" : 2}},{ "className" : "org::jgraph::plaf::basic::BasicGraphUI::PropertyChangeHandler" , "selectors" : { "PropertyChangeHandler()" : 1}},{ "className" : "org::jgraph::example::LiveJGraphDemo::CompListener" , "selectors" : { "CompListener()" : 1}},{ "className" : "org::jgraph::example::LiveJGraphDemo::AddParentInternalFrameAction" , "selectors" : { "AddParentInternalFrameAction()" : 1}},{ "className" : "com::jgraph::example::JGraphGroupRenderer" , "selectors" : { "JGraphGroupRenderer()" : 1 , "inHitRegion(Point2D)" : 1}},{ "className" : "com::jgraph::layout::tree::JGraphCompactTreeLayout::Polygon" , "selectors" : { "Polygon()" : 1}},{ "className" : "org::jgraph::example::IconExample::CustomCell" , "selectors" : { "CustomCell(ImageIcon,String)" : 1 , "getIcon()" : 2}},{ "className" : "com::gargoylesoftware::htmlunit::html::DomNodeTest" , "selectors" : { "readPositionAmongParentChildren(DomNode)" : 6}},{ "className" : "com::gargoylesoftware::htmlunit::html::HtmlExample" , "selectors" : { "HtmlExample(String,String,SgmlPage,Map<String,DomAttr>)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::html::HtmlDeletedText" , "selectors" : { "HtmlDeletedText(String,String,SgmlPage,Map<String,DomAttr>)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::libraries::MooTools121Test" , "selectors" : { "mooTools()::AssertionFailedError" : 1}},{ "className" : "net::sf::freecol::common::model::PlayerTest" , "selectors" : { "testEuropeanPlayer(Player)" : 12 , "testIndianPlayer(Player)" : 16 , "testRoyalPlayer(Player)" : 12}},{ "className" : "net::sf::freecol::common::model::LostCityRumour" , "selectors" : { "LostCityRumour(Game,Tile)" : 2 , "LostCityRumour(Game,Tile,RumourType,String)" : 3 , "LostCityRumour(Game,XMLStreamReader)" : 2 , "chooseType(Unit,int,Random)" : 3 , "getName()" : 1 , "getType()" : 5 , "getXMLElementTagName()" : 3 , "setType(RumourType)" : 3}},{ "className" : "net::sf::freecol::common::model::ExportData" , "selectors" : { "ExportData()" : 2 , "ExportData(GoodsType)" : 1 , "ExportData(GoodsType,boolean,int)" : 8 , "ExportData(GoodsType,boolean,int,int,int)" : 1 , "getExportLevel()" : 5 , "getHighLevel()" : 4 , "getLowLevel()" : 4 , "getXMLElementTagName()" : 2 , "isExported()" : 8 , "setExportLevel(int)" : 1 , "setExported(boolean)" : 2 , "setHighLevel(int)" : 1 , "setLowLevel(int)" : 1}},{ "className" : "net::sf::freecol::server::control::ChangeSet::OwnedChange" , "selectors" : { "OwnedChange(See,FreeColObject)" : 6}},{ "className" : "net::sf::freecol::client::gui::plaf::FreeColTextFieldUI" , "selectors" : { "FreeColTextFieldUI(JComponent)" : 1}},{ "className" : "net::sf::freecol::client::gui::action::DisplayTileTextAction::DisplayText" , "selectors" : { "values()" : 3}},{ "className" : "net::sf::freecol::client::control::InGameInputHandler::NoResultCanvasSwingTask" , "selectors" : { "NoResultCanvasSwingTask()" : 1 , "doWork(Canvas)" : 1}},{ "className" : "net::sf::freecol::client::gui::panel::ReportIndianPanel" , "selectors" : { "ReportIndianPanel(Canvas)" : 1 , "ReportIndianPanel(Canvas)::MigLayout" : 1 , "buildIndianAdvisorPanel(Player,Player)" : 1}},{ "className" : "net::sf::freecol::client::gui::panel::MonarchPanel" , "selectors" : { "MonarchPanel(Canvas,MonarchAction)" : 1 , "MonarchPanel(Canvas,MonarchAction,StringTemplate)" : 2 , "MonarchPanel(Canvas,MonarchAction,StringTemplate)::MigLayout" : 1}},{ "className" : "net::sf::freecol::client::gui::panel::SelectDestinationDialog::DistanceComparator" , "selectors" : { "DistanceComparator()" : 1}},{ "className" : "net::sf::freecol::client::gui::panel::SelectDestinationDialog::NameComparator" , "selectors" : { "NameComparator()" : 1}},{ "className" : "net::sf::freecol::client::gui::action::EndTurnAction" , "selectors" : { "EndTurnAction(FreeColClient)" : 1}},{ "className" : "net::sf::freecol::client::gui::panel::TradeRouteInputDialog::GoodsPanel" , "selectors" : { "GoodsPanel()" : 1}},{ "className" : "net::sf::freecol::common::io::FreeColSavegameFile" , "selectors" : { "FreeColSavegameFile(File)" : 12 , "getSavegameInputStream()" : 4}},{ "className" : "net::sf::freecol::client::gui::panel::MainPanel" , "selectors" : { "MainPanel(Canvas)" : 1 , "MainPanel(Canvas)::MigLayout" : 1}},{ "className" : "net::sf::freecol::server::ai::ColonyPlan::Production" , "selectors" : { "Production(ColonyTile,GoodsType)" : 1}},{ "className" : "net::sf::freecol::common::model::SettlementType" , "selectors" : { "SettlementType(String,Specification)" : 2 , "getClaimableRadius()" : 16 , "getExtraClaimableRadius()" : 1 , "getGifts(Unit)" : 2 , "getMaximumGrowth()" : 1 , "getMaximumSize()" : 3 , "getMinimumGrowth()" : 1 , "getMinimumSize()" : 1 , "getPlunderRange(Unit)" : 3 , "getTradeBonus()" : 4 , "getVisibleRadius()" : 1 , "getWarehouseCapacity()" : 1 , "getXMLElementTagName()" : 1 , "isCapital()" : 4 , "setCapital(boolean)" : 1 , "setGifts(RandomRange)" : 2 , "setPlunder(RandomRange)" : 2}},{ "className" : "net::sf::freecol::common::model::BuildableType" , "selectors" : { "BuildableType(String,Specification)" : 3 , "getAbilitiesRequired()" : 13 , "getAmountRequiredOf(GoodsType)" : 19 , "getGoodsRequired()" : 72 , "getLimits()" : 7 , "getPopulationRequired()" : 11 , "needsGoodsToBuild()" : 1 , "readChild(XMLStreamReader)" : 3 , "setGoodsRequired(List<AbstractGoods>)" : 2 , "setPopulationRequired(int)" : 2 , "writeAttributes(XMLStreamWriter)" : 3 , "writeChildren(XMLStreamWriter)" : 2}},{ "className" : "net::sf::freecol::client::gui::action::RetireAction" , "selectors" : { "RetireAction(FreeColClient)" : 1}},{ "className" : "net::sf::freecol::common::networking::PayForBuildingMessage" , "selectors" : { "PayForBuildingMessage(Colony)" : 1 , "PayForBuildingMessage(Game,Element)" : 1 , "getXMLElementTagName()" : 2 , "handle(FreeColServer,Player,Connection)" : 1}},{ "className" : "net::sf::freecol::common::model::EquipmentType" , "selectors" : { "getCaptureEquipment(boolean)" : 1 , "getCombatLossPriority()" : 2 , "getMaximumCount()" : 7 , "getRole()" : 3 , "getUnitAbilitiesRequired()" : 1 , "getXMLElementTagName()" : 1 , "isCompatibleWith(EquipmentType)" : 2 , "isMilitaryEquipment()" : 1}},{ "className" : "net::sf::freecol::server::ai::mission::UnitWanderHostileMission" , "selectors" : { "UnitWanderHostileMission(AIMain,AIUnit)" : 6 , "UnitWanderHostileMission(AIMain,XMLStreamReader)" : 1 , "getXMLElementTagName()" : 2}},{ "className" : "javax::swing::plaf::basic::BasicTableHeaderUI" , "selectors" : { "installUI(JComponent)" : 2 , "paint(Graphics,JComponent)" : 4}},{ "className" : "net::sf::freecol::common::model::Nameable" , "selectors" : { "getName()" : 1 , "setName(String)" : 1}},{ "className" : "org::apache::tomcat::util::http::fileupload::FileUploadBase::SizeException" , "selectors" : { "SizeException(String,long,long)" : 2}},{ "className" : "org::apache::catalina::ssi::SSIPrintenv" , "selectors" : { "SSIPrintenv()" : 1}},{ "className" : "org::apache::catalina::deploy::InjectionTarget" , "selectors" : { "InjectionTarget(String,String)" : 1 , "getTargetClass()" : 8 , "getTargetName()" : 8}},{ "className" : "org::apache::catalina::core::JreMemoryLeakPreventionListener" , "selectors" : { "JreMemoryLeakPreventionListener()" : 2}},{ "className" : "listeners::ContextListener" , "selectors" : { "log(String)" : 5}},{ "className" : "javax::servlet::UnavailableException" , "selectors" : { "UnavailableException(String)" : 4 , "getUnavailableSeconds()" : 2 , "isPermanent()" : 1}},{ "className" : "javax::el::ArrayELResolver" , "selectors" : { "ArrayELResolver()" : 3 , "checkBounds(Object,int)" : 3 , "coerce(Object)" : 4}},{ "className" : "javax::servlet::Filter" , "selectors" : { "destroy()" : 2 , "doFilter(ServletRequest,ServletResponse,FilterChain)" : 1 , "init(FilterConfig)" : 2}},{ "className" : "org::apache::catalina::connector::TestResponse::Bug49598Servlet" , "selectors" : { "Bug49598Servlet()" : 1}},{ "className" : "org::apache::naming::SelectorContext" , "selectors" : { "SelectorContext(Hashtable<String,Object>)" : 2 , "SelectorContext(Hashtable<String,Object>,boolean)" : 1 , "getBoundContext()" : 26 , "parseName(Name)" : 12 , "parseName(String)" : 12}},{ "className" : "org::apache::tomcat::jni::Poll" , "selectors" : { "add(long,long,int)" : 2 , "create(int,long,int,long)" : 1 , "maintain(long,long[],boolean)" : 2 , "poll(long,long,long[],boolean)" : 2 , "pollset(long,long[])" : 2 , "remove(long,long)" : 1}},{ "className" : "org::apache::tomcat::util::buf::StringCache::ByteEntry" , "selectors" : { "ByteEntry()" : 2}},{ "className" : "org::apache::coyote::InputBuffer" , "selectors" : { "doRead(ByteChunk,Request)" : 7}},{ "className" : "org::apache::catalina::session::StandardSessionFacade" , "selectors" : { "StandardSessionFacade(StandardSession)" : 2}},{ "className" : "javax::servlet::ServletConfig" , "selectors" : { "getInitParameter(String)" : 77 , "getInitParameterNames()" : 4 , "getServletContext()" : 10 , "getServletName()" : 4}},{ "className" : "java::net::BindException" , "selectors" : { "BindException()" : 3 , "BindException(String)" : 7}},{ "className" : "org::apache::tomcat::util::digester::GenericParser" , "selectors" : { "newSAXParser(Properties)" : 1}},{ "className" : "org::apache::catalina::startup::WebAnnotationSet" , "selectors" : { "addResource(Context,Resource)" : 2 , "loadApplicationAnnotations(Context)" : 1 , "loadApplicationFilterAnnotations(Context)" : 1 , "loadApplicationListenerAnnotations(Context)" : 1 , "loadApplicationServletAnnotations(Context)" : 1 , "loadClassAnnotation(Context,String)" : 3}},{ "className" : "java::net::URLClassLoader" , "selectors" : { "URLClassLoader(URL[])" : 56 , "URLClassLoader(URL[],ClassLoader)" : 79 , "URLClassLoader(URL[],ClassLoader,URLStreamHandlerFactory)" : 5 , "addURL(URL)" : 15 , "definePackage(String,Manifest,URL)" : 1 , "findClass(String)" : 15 , "findResource(String)" : 24 , "findResources(String)" : 8 , "getPermissions(CodeSource)" : 5 , "getURLs()" : 35 , "newInstance(URL[])" : 5 , "newInstance(URL[],ClassLoader)" : 1}},{ "className" : "org::apache::catalina::tribes::membership::Membership::MemberComparator" , "selectors" : { "MemberComparator()" : 1}},{ "className" : "org::apache::coyote::http11::filters::VoidOutputFilter" , "selectors" : { "VoidOutputFilter()" : 1}},{ "className" : "org::apache::catalina::util::ResourceSet<T>" , "selectors" : { "ResourceSet()" : 1}},{ "className" : "org::apache::coyote::ajp::AjpAprProtocol::AjpConnectionHandler" , "selectors" : { "<Initializer>()::anonymous(ConcurrentLinkedQueue)" : 2 , "AjpConnectionHandler(AjpAprProtocol)" : 1 , "createProcessor()" : 1 , "register(AjpAprProcessor)" : 1 , "unregister(AjpAprProcessor)" : 2}},{ "className" : "org::apache::el::parser::AstMinus" , "selectors" : { "AstMinus(int)" : 1}},{ "className" : "org::apache::coyote::ajp::Constants" , "selectors" : { "getResponseAjpIndex(String)" : 2}},{ "className" : "org::apache::catalina::tribes::test::channel::TestUdpPackages" , "selectors" : { "printMissingMsgs(int[],int)" : 2}},{ "className" : "org::apache::catalina::tribes::membership::McastServiceImpl::SenderThread" , "selectors" : { "SenderThread(long)" : 1}},{ "className" : "javax::servlet::jsp::el::ELParseException" , "selectors" : { "ELParseException(String)" : 1}},{ "className" : "org::apache::tomcat::PeriodicEventListener" , "selectors" : { "periodicEvent()" : 1}},{ "className" : "org::apache::tomcat::util::bcel::classfile::PMGClass" , "selectors" : { "PMGClass(int,int,DataInput,ConstantPool)" : 1 , "PMGClass(int,int,int,int,ConstantPool)" : 1 , "getPMGClassName()" : 1 , "getPMGName()" : 1}},{ "className" : "org::apache::tomcat::jni::Library" , "selectors" : { "Library()" : 1 , "Library(String)" : 1 , "aprVersionString()" : 1 , "has(int)" : 21 , "initialize()" : 1 , "size(int)" : 7 , "version(int)" : 8}},{ "className" : "org::apache::catalina::tribes::group::GroupChannel::InterceptorIterator" , "selectors" : { "InterceptorIterator(ChannelInterceptor,ChannelInterceptor)" : 1 , "hasNext()" : 1}},{ "className" : "org::apache::catalina::core::TestStandardContext::Bug46243Client" , "selectors" : { "Bug46243Client()" : 1}},{ "className" : "org::apache::jasper::xmlparser::EncodingMap" , "selectors" : { "getIANA2JavaMapping(String)" : 1}},{ "className" : "javax::rmi::ssl::SslRMIServerSocketFactory" , "selectors" : { "SslRMIServerSocketFactory(String[],String[],boolean)" : 1}},{ "className" : "org::apache::jasper::util::JspQueue" , "selectors" : { "JspQueue()" : 1 , "makeYoungest(Entry<T>)" : 1 , "pop()" : 1 , "push(T)" : 1}},{ "className" : "org::apache::jasper::compiler::SmapUtil::PreScanVisitor" , "selectors" : { "PreScanVisitor()" : 1 , "getMap()" : 1}},{ "className" : "megamek::common::weapons::RACWeapon" , "selectors" : { "RACWeapon()" : 6}},{ "className" : "megamek::common::weapons::ISPlasmaRifle" , "selectors" : { "ISPlasmaRifle()" : 1}},{ "className" : "megamek::common::weapons::ISRL15" , "selectors" : { "ISRL15()" : 1}},{ "className" : "megamek::common::weapons::MMLWeapon" , "selectors" : { "MMLWeapon()" : 4}},{ "className" : "megamek::common::weapons::CLLRT20OS" , "selectors" : { "CLLRT20OS()" : 1}},{ "className" : "megamek::common::weapons::CLUAC2" , "selectors" : { "CLUAC2()" : 1}},{ "className" : "megamek::common::weapons::ISMRM10" , "selectors" : { "ISMRM10()" : 1}},{ "className" : "megamek::common::weapons::SCL2Weapon" , "selectors" : { "SCL2Weapon()" : 1}},{ "className" : "megamek::common::weapons::NavalACWeapon" , "selectors" : { "NavalACWeapon()" : 6}},{ "className" : "megamek::common::weapons::CLArrowIV" , "selectors" : { "CLArrowIV()" : 1}},{ "className" : "megamek::common::MMRandom::CryptoRandom" , "selectors" : { "MMRandom" : 1}},{ "className" : "megamek::common::weapons::CLLRT15IOS" , "selectors" : { "CLLRT15IOS()" : 1}},{ "className" : "megamek::common::weapons::CLAdvancedSRM4" , "selectors" : { "CLAdvancedSRM4()" : 1}},{ "className" : "megamek::common::weapons::CLNailGun" , "selectors" : { "CLNailGun()" : 1}},{ "className" : "megamek::client::ui::swing::CommonAboutDialog" , "selectors" : { "CommonAboutDialog(JFrame)" : 3 , "getTitleImage(JFrame)" : 1 , "quit()" : 2}},{ "className" : "megamek::common::weapons::ISLRM2OS" , "selectors" : { "ISLRM2OS()" : 1}},{ "className" : "megamek::client::bot::Strategy" , "selectors" : { "Strategy()" : 1}},{ "className" : "megamek::common::PhysicalResult" , "selectors" : { "PhysicalResult()" : 2}},{ "className" : "megamek::common::weapons::CLSRM1OS" , "selectors" : { "CLSRM1OS()" : 1}},{ "className" : "megamek::common::weapons::EnergyWeapon" , "selectors" : { "EnergyWeapon()" : 7}},{ "className" : "megamek::common::weapons::ISLRM3" , "selectors" : { "ISLRM3()" : 1}},{ "className" : "megamek::common::weapons::ISLAC20" , "selectors" : { "ISLAC20()" : 1}},{ "className" : "megamek::common::weapons::CLLRM20OS" , "selectors" : { "CLLRM20OS()" : 1}},{ "className" : "megamek::common::weapons::ISGAC4" , "selectors" : { "ISGAC4()" : 1}},{ "className" : "megamek::common::weapons::ISMRM10IOS" , "selectors" : { "ISMRM10IOS()" : 1}},{ "className" : "megamek::common::weapons::ISBPod" , "selectors" : { "ISBPod()" : 1}},{ "className" : "megamek::common::weapons::MGWeapon" , "selectors" : { "MGWeapon()" : 6}},{ "className" : "megamek::common::xml::TeamEncoder" , "selectors" : { "encode(Team,Writer)" : 1}},{ "className" : "megamek::common::weapons::NavalPPCWeapon" , "selectors" : { "NavalPPCWeapon()" : 3}},{ "className" : "megamek::client::ui::swing::widget::ArmlessMechMapSet" , "selectors" : { "ArmlessMechMapSet(JComponent)" : 1 , "drawHeatControl(int)" : 1 , "drawHeatControl(int,boolean)" : 2 , "setAreas()" : 1 , "setBackGround()" : 1 , "setGroups()" : 1 , "setLabels()" : 1}},{ "className" : "megamek::common::util::BuildingTemplate" , "selectors" : { "BuildingTemplate(int,ArrayList<Coords>,int,int,int)" : 1 , "containsCoords(Coords)" : 1 , "getCF()" : 1 , "getCoords()" : 1 , "getHeight()" : 1 , "getType()" : 1}},{ "className" : "megamek::common::weapons::ISLRM3OS" , "selectors" : { "ISLRM3OS()" : 1}},{ "className" : "megamek::common::weapons::ISMRM20OS" , "selectors" : { "ISMRM20OS()" : 1}},{ "className" : "megamek::common::weapons::LightNPPCWeapon" , "selectors" : { "LightNPPCWeapon()" : 1}},{ "className" : "megamek::common::weapons::CLSRT4IOS" , "selectors" : { "CLSRT4IOS()" : 1}},{ "className" : "megamek::common::BuildingTarget" , "selectors" : { "BuildingTarget(Coords,IBoard,boolean)" : 17 , "BuildingTarget(Coords,IBoard,int)" : 1 , "coordsToId(Coords)" : 1 , "getElevation()" : 1 , "getHeight()" : 1 , "idToCoords(int)" : 1 , "init(Coords,IBoard,boolean)" : 2 , "sideTable(Coords)" : 1}},{ "className" : "megamek::common::weapons::CLSRM2" , "selectors" : { "CLSRM2()" : 1}},{ "className" : "megamek::common::weapons::ISLRM5IOS" , "selectors" : { "ISLRM5IOS()" : 1}},{ "className" : "megamek::common::weapons::ISSRM6IOS" , "selectors" : { "ISSRM6IOS()" : 1}},{ "className" : "megamek::common::weapons::ISIHGaussRifle" , "selectors" : { "ISIHGaussRifle()" : 1}},{ "className" : "megamek::common::weapons::KrakenWeapon" , "selectors" : { "KrakenWeapon()" : 1}},{ "className" : "megamek::common::weapons::ISLRT10" , "selectors" : { "ISLRT10()" : 1}},{ "className" : "megamek::common::weapons::CLLB5XACPrototype" , "selectors" : { "CLLB5XACPrototype()" : 1}},{ "className" : "megamek::common::weapons::NL45Weapon" , "selectors" : { "NL45Weapon()" : 1}},{ "className" : "megamek::server::victory::VictoryFactory" , "selectors" : { "createVictory(String)" : 1}},{ "className" : "megamek::common::weapons::ISLB10XAC" , "selectors" : { "ISLB10XAC()" : 1}},{ "className" : "megamek::common::weapons::ISSnubNosePPC" , "selectors" : { "ISSnubNosePPC()" : 1}},{ "className" : "megamek::common::weapons::ISLRM5" , "selectors" : { "ISLRM5()" : 1}},{ "className" : "megamek::common::weapons::ISLRM20IOS" , "selectors" : { "ISLRM20IOS()" : 1}},{ "className" : "megamek::common::weapons::CLPrototypeRL10" , "selectors" : { "CLPrototypeRL10()" : 1}},{ "className" : "edu::umd::cs::findbugs::classfile::engine::bcel::ConstantPoolGenFactory" , "selectors" : { "ConstantPoolGenFactory()" : 1}},{ "className" : "javax::swing::Box" , "selectors" : { "Box(int)" : 103 , "createGlue()" : 149 , "createHorizontalBox()" : 64 , "createHorizontalGlue()" : 117 , "createHorizontalStrut(int)" : 183 , "createRigidArea(Dimension)" : 88 , "createVerticalBox()" : 86 , "createVerticalGlue()" : 78 , "createVerticalStrut(int)" : 85 , "javax" : 1}},{ "className" : "edu::umd::cs::findbugs::ba::DepthFirstSearch" , "selectors" : { "DepthFirstSearch(CFG)" : 3}},{ "className" : "edu::umd::cs::findbugs::sourceViewer::NumberedViewFactory" , "selectors" : { "NumberedViewFactory(HighlightInformation)" : 1}},{ "className" : "edu::umd::cs::findbugs::util::MultiMap<edu::umd::cs::findbugs::classfile::engine::SelfMethodCalls" , "selectors" : { "getSelfCalls(ClassDescriptor,Map<String,T>)::T>" : 7}},{ "className" : "edu::umd::cs::findbugs::AnalysisOptions" , "selectors" : { "AnalysisOptions(boolean)" : 1}},{ "className" : "edu::umd::cs::findbugs::ba::npe::IsNullValueFrameModelingVisitor" , "selectors" : { "IsNullValueFrameModelingVisitor(???)" : 1 , "analyzeInstruction(???)" : 1 , "getSlotContainingNewNullValue()" : 2 , "newValueOnTOS()" : 2 , "produce(IsNullValue)" : 13 , "produce2(IsNullValue)" : 1}},{ "className" : "edu::umd::cs::findbugs::classfile::engine::bcel::LiveLocalStoreDataflowFactory" , "selectors" : { "LiveLocalStoreDataflowFactory()" : 1}},{ "className" : "edu::umd::cs::findbugs::ba::SignatureParser::ParameterSignatureIterator" , "selectors" : { "ParameterSignatureIterator()" : 1 , "hasNext()" : 1}},{ "className" : "edu::umd::cs::findbugs::ba::Dataflow::AnalysisType" , "selectors" : { "transfer(???)" : 2}},{ "className" : "edu::umd::cs::findbugs::ba::BetterCFGBuilder2::EscapeTarget" , "selectors" : { "EscapeTarget(???)" : 1 , "getEdgeType()" : 1 , "getTarget(???)" : 1}},{ "className" : "edu::umd::cs::findbugs::gui::BugCellRenderer" , "selectors" : { "BugCellRenderer()" : 1 , "getCellTextColor()" : 1 , "instance()" : 1}},{ "className" : "edu::umd::cs::findbugs::ba::BasicBlock::InstructionReverseIterator" , "selectors" : { "InstructionReverseIterator(???)" : 1 , "hasNext()" : 1}},{ "className" : "javax::swing::text::DefaultEditorKit" , "selectors" : { "DefaultEditorKit()" : 1 , "getActions()" : 1 , "read(Reader,Document,int)" : 3 , "write(OutputStream,Document,int,int)" : 1}},{ "className" : "edu::umd::cs::findbugs::util::Bag" , "selectors" : { "Bag(Map<E,Integer>)" : 2 , "add(E)" : 2 , "add(E,int)" : 2 , "entrySet()" : 1 , "getCount(E)" : 4}},{ "className" : "edu::umd::cs::findbugs::anttask::UnionBugs2" , "selectors" : { "checkParameters()::BuildException" : 1}},{ "className" : "edu::umd::cs::findbugs::ba::bcp::Binding" , "selectors" : { "Binding(String,Variable)" : 1 , "getVarName()" : 1 , "getVariable()" : 2 , "toString()" : 1}},{ "className" : "edu::umd::cs::findbugs::ba::bcp::IfNull" , "selectors" : { "IfNull(String)" : 1}},{ "className" : "edu::umd::cs::findbugs::ba::PruneInfeasibleExceptionEdges::MarkedEdge" , "selectors" : { "MarkedEdge(Edge,int)" : 1 , "apply()" : 1}},{ "className" : "edu::umd::cs::findbugs::gui::FindBugsFrame::BugInstanceTypeComparator" , "selectors" : { "BugInstanceTypeComparator()" : 1}},{ "className" : "edu::umd::cs::findbugs::asm::FBClassReader" , "selectors" : { "FBClassReader(byte[])" : 1 , "accept(???)" : 2}},{ "className" : "edu::umd::cs::findbugs::graph::Graph" , "selectors" : { "addVertex(VertexType)" : 1 , "createEdge(VertexType,VertexType)" : 2 , "edgeIterator()" : 4 , "getNumEdgeLabels()" : 2 , "getNumVertexLabels()" : 3 , "incomingEdgeIterator(VertexType)" : 1 , "lookupEdge(VertexType,VertexType)" : 1 , "outgoingEdgeIterator(VertexType)" : 1 , "removeVertex(VertexType)" : 1 , "setNumEdgeLabels(int)" : 1 , "setNumVertexLabels(int)" : 1 , "vertexIterator()" : 4}},{ "className" : "edu::umd::cs::findbugs::cloud::db::DBStats::TimeSeries" , "selectors" : { "TimeSeries(K,V)" : 1}},{ "className" : "edu::umd::cs::findbugs::ba::MethodBytecodeSet" , "selectors" : { "MethodBytecodeSet()" : 1}},{ "className" : "org::apache::log4j::pattern::LoggingEventPatternConverter" , "selectors" : { "LoggingEventPatternConverter(String,String)" : 17 , "format(LoggingEvent,StringBuffer)" : 2 , "format(Object,StringBuffer)" : 1 , "handlesThrowable()" : 1}},{ "className" : "com::psibt::framework::net::UserDialogRequestHandler" , "selectors" : { "UserDialogRequestHandler()" : 1 , "UserDialogRequestHandler(???)" : 1 , "handleRequest(String,Writer)::URL" : 1}},{ "className" : "org::apache::log4j::net::DatagramStringWriter" , "selectors" : { "DatagramStringWriter(String,int,String)" : 1 , "DatagramStringWriter(String,int,String,String)" : 3 , "write(String)" : 1}},{ "className" : "org::apache::log4j::pattern::NamePatternConverter" , "selectors" : { "NamePatternConverter(String,String,String[])" : 2 , "abbreviate(int,StringBuffer)" : 2}},{ "className" : "org::apache::log4j::pattern::NameAbbreviator::NOPAbbreviator" , "selectors" : { "NOPAbbreviator()" : 1}},{ "className" : "org::apache::log4j::ConsoleAppender" , "selectors" : { "ConsoleAppender(Layout)" : 3 , "ConsoleAppender(Layout,String)" : 4 , "activateOptions()" : 1 , "setTarget(String)" : 1 , "targetWarn(String)" : 1}},{ "className" : "org::apache::log4j::pattern::LineLocationPatternConverter" , "selectors" : { "LineLocationPatternConverter()" : 1}},{ "className" : "org::apache::log4j::gui::JTableAppender::Renderer" , "selectors" : { "Renderer()" : 1}},{ "className" : "org::apache::log4j::ConsoleAppender::SystemErrStream" , "selectors" : { "SystemErrStream()" : 1}},{ "className" : "org::apache::log4j::spi::ThrowableInformationTest::OverriddenThrowable" , "selectors" : { "OverriddenThrowable()" : 1}},{ "className" : "org::apache::log4j::jmx::LayoutDynamicMBean" , "selectors" : { "LayoutDynamicMBean(Layout)" : 1 , "buildDynamicMBeanInfo()" : 1 , "getAttribute(String)" : 1 , "isSupportedType(Class)" : 1}},{ "className" : "examples::MyPatternParser::UserDirPatternConverter" , "selectors" : { "UserDirPatternConverter(FormattingInfo)" : 1}},{ "className" : "org::apache::log4j::config::PropertyGetter::PropertyCallback" , "selectors" : { "foundProperty(Object,String,String,Object)" : 1}},{ "className" : "<T>::Log4JTest" , "selectors" : { "main(String[])::JDBCAppender" : 1}},{ "className" : "org::acm::seguin::pretty::jdi::BaseJDI" , "selectors" : { "BaseJDI()" : 11}},{ "className" : "pretty::Bug_517495" , "selectors" : { "Bug_517495()::ConnectionException" : 1}},{ "className" : "org::acm::seguin::tools::install::IndentCharPanel" , "selectors" : { "IndentCharPanel()" : 1}},{ "className" : "org::acm::seguin::summary::load::SilentLoadStatus" , "selectors" : { "SilentLoadStatus()" : 2}},{ "className" : "org::acm::seguin::ide::elixir::version::CheckOutListener" , "selectors" : { "CheckOutListener(ElixirVersionControl,String,String)" : 1}},{ "className" : "org::acm::seguin::uml::refactor::TestPackage" , "selectors" : { "suite()::TestSuite" : 2 , "suite(???)" : 1}},{ "className" : "org::acm::seguin::tools::install::FooterPanel" , "selectors" : { "FooterPanel()" : 1}},{ "className" : "net::sourceforge::jrefactory::action::ExtractInterfaceAction::ExtractInterfaceDialog" , "selectors" : { "ExtractInterfaceDialog()" : 1}},{ "className" : "net::sourceforge::ganttproject::chart::SkewedFrameOffsetBuilder" , "selectors" : { "SkewedFrameOffsetBuilder(TimeUnitStack,GPCalendar,TimeUnit,TimeUnit,Date,int,int)" : 1 , "constructOffsets(List,List)" : 1 , "getBottomUnit()" : 1 , "getBottomUnitWidth()" : 2 , "getChartWidth()" : 2 , "getTopUnit(Date)" : 1}},{ "className" : "net::sourceforge::ganttproject::document::ProxyDocument::PortfolioImpl" , "selectors" : { "PortfolioImpl()" : 1 , "setDefaultDocument(Document)" : 1}},{ "className" : "net::sourceforge::ganttproject::task::hierarchy::TaskHierarchyManagerImpl" , "selectors" : { "TaskHierarchyManagerImpl()" : 1 , "createItem(Task)" : 2}},{ "className" : "net::sourceforge::ganttproject::importer::ImporterFromGanttFile::VisibleFieldsImpl" , "selectors" : { "VisibleFieldsImpl()" : 1}},{ "className" : "net::sourceforge::ganttproject::filter::GanttCSVFilter" , "selectors" : { "getExtension(File)" : 1}},{ "className" : "org::ganttproject::chart::pert::PertChart" , "selectors" : { "PertChart(TaskManager)" : 1}},{ "className" : "artofillusion::procedural::ModuleLoader" , "selectors" : { "createModule(Class)" : 6 , "dummy()" : 4}},{ "className" : "artofillusion::ui::ThemeManager::ButtonStyle" , "selectors" : { "ButtonStyle(Node)" : 2 , "add(Node)" : 2 , "getAttribute(String)" : 1 , "getStyle(Object)" : 2}},{ "className" : "artofillusion::procedural::LogModule" , "selectors" : { "LogModule(Point)" : 2 , "getAverageValue(int,double)" : 2 , "integral(double)" : 2}},{ "className" : "artofillusion::raytracer::RTDisplacedTriangle::ExtraInfo" , "selectors" : { "ExtraInfo()" : 1}},{ "className" : "artofillusion::RenderListener" , "selectors" : { "imageComplete(ComplexImage)" : 2 , "imageUpdated(Image)" : 4 , "renderingCanceled()" : 2 , "statusChanged(String)" : 6}},{ "className" : "artofillusion::procedural::SpectrumModule::EditingDialog" , "selectors" : { "EditingDialog(???)" : 1 , "EditingDialog(BFrame)::BCheckBox" : 1 , "EditingDialog(BFrame)::BLabel" : 2 , "EditingDialog(BFrame)::CustomWidget" : 1 , "EditingDialog(BFrame)::FormContainer" : 1 , "EditingDialog(BFrame)::RowContainer" : 2 , "addHandle(double)" : 2 , "adjustComponents()" : 5 , "doCancel()" : 1 , "doDelete()" : 1 , "doOk()" : 1 , "positionHandles()" : 1}},{ "className" : "artofillusion::animation::Timecourse" , "selectors" : { "Timecourse(Keyframe[],double[],Smoothness[])" : 30 , "addTimepoint(Keyframe,double,Smoothness)" : 29 , "calcApproxPoint(TimePoint,TimePoint,TimePoint)" : 5 , "calcInterpPoint(TimePoint,TimePoint,TimePoint,TimePoint)" : 4 , "duplicate(Object)" : 28 , "evaluate(double,int)" : 28 , "getPoint(double[],Keyframe[],Smoothness[],int)" : 19 , "getSmoothness()" : 27 , "getTimes()" : 58 , "getValues()" : 45 , "moveTimepoint(int,double)" : 14 , "removeAllTimepoints()" : 1 , "removeTimepoint(int)" : 15 , "setSubdivideAdaptively(boolean)" : 3 , "subdivide(int)" : 4 , "subdivideLocalApprox(double,Keyframe[],double[],Smoothness[],Keyframe[],double[],Smoothness[])" : 3 , "subdivideLocalInterp(double,Keyframe[],double[],Smoothness[],Keyframe[],double[],Smoothness[])" : 3}},{ "className" : "artofillusion::spmanager::InstallSplitPane" , "selectors" : { "InstallSplitPane(short,SPMFileSystem)" : 1 , "InstallSplitPane(short,URL)" : 1 , "copyFile(File,File)" : 1 , "doCallbackUpdate()" : 2 , "doSetup()" : 3 , "getChild(???)" : 2 , "getFiles(TreePath,Vector,Vector)" : 4 , "getInstallLength(TreePath)" : 4 , "getObjectScripts()" : 1 , "getPlugins()" : 1 , "getStartupScripts()" : 1 , "getToolScripts()" : 1 , "initialize()" : 2 , "installAllSelected(TreePath)" : 4 , "installFile(SPMObjectInfo)" : 3 , "selectAllInfos(TreePath)" : 4 , "setDividerLocation(???)" : 2 , "showErrors()" : 1 , "showErrors(ArrayList)" : 6 , "showErrors(ArrayList)::BScrollPane" : 1 , "showErrors(ArrayList)::BTextArea" : 1 , "updateTree()" : 1 , "voidSelection()" : 2}},{ "className" : "artofillusion::object::ProceduralDirectionalLight::LightProcedureOwner" , "selectors" : { "LightProcedureOwner(ObjectInfo,Runnable)" : 1 , "editProperties(ProcedureEditor)::BComboBox" : 1 , "getPreview(ProcedureEditor)::BorderContainer" : 1 , "getPreview(ProcedureEditor)::LayoutInfo" : 1 , "getPreview(ProcedureEditor)::RowContainer" : 1}},{ "className" : "artofillusion::ui::Compound3DManipulator::HandleReleasedEvent" , "selectors" : { "HandleReleasedEvent(???)" : 1}},{ "className" : "artofillusion::MaterialMappingDialog" , "selectors" : { "MaterialMappingDialog(???)" : 1 , "MaterialMappingDialog(BFrame,Object3D)::BComboBox" : 1 , "MaterialMappingDialog(BFrame,Object3D)::BLabel" : 1 , "MaterialMappingDialog(BFrame,Object3D)::FormContainer" : 1 , "MaterialMappingDialog(BFrame,Object3D)::RowContainer" : 2 , "setMapping(MaterialMapping)" : 2}},{ "className" : "javax::faces::webapp::ConverterELTag" , "selectors" : { "ConverterELTag()" : 2 , "doStartTag()::JspException" : 3 , "release(???)" : 2}},{ "className" : "org::apache::myfaces::config::ConfigFilesXmlValidationUtils::FacesConfigVersionCheckHandler" , "selectors" : { "FacesConfigVersionCheckHandler()" : 1 , "isVersion12()" : 1 , "isVersion20OrLater()" : 1}},{ "className" : "javax::faces::component::_ValidationUtils" , "selectors" : { "tryBuildDefaultValidatorFactory()" : 1}},{ "className" : "org::apache::james::services::SpoolRepository::AcceptFilter" , "selectors" : { "accept(String,String,long,String)" : 2 , "getWaitTime()" : 2}},{ "className" : "org::apache::james::imapserver::FolderRecord" , "selectors" : { "getAbsoluteName()" : 4 , "getExists()" : 1 , "getHighestUid()" : 1 , "getRecent()" : 1 , "getUidValidity()" : 1 , "getUnseen(String)" : 1 , "getUser()" : 1 , "hasLookupRights(String)" : 1 , "isDeleted()" : 4 , "isMarked()" : 1 , "isSelectable(String)" : 1 , "setExists(int)" : 3 , "setHighestUid(int)" : 1 , "setLookupRights(Set)" : 3 , "setMarked(boolean)" : 3 , "setNotSelectableByAnyone(boolean)" : 3 , "setReadRights(Set)" : 3 , "setRecent(int)" : 3 , "setUidValidity(int)" : 3 , "setUnseenbyUser(Map)" : 3}},{ "className" : "org::jhotdraw::beans::WeakPropertyChangeListener" , "selectors" : { "WeakPropertyChangeListener(PropertyChangeListener)" : 7 , "getTarget()" : 2 , "removeFromSource(PropertyChangeEvent)" : 1}},{ "className" : "org::jhotdraw::samples::teddy::action::ToggleLineWrapAction" , "selectors" : { "ToggleLineWrapAction(Application,View)" : 1 , "getActiveView()" : 4}},{ "className" : "org::jhotdraw::draw::action::AbstractDrawingViewAction::EventHandler" , "selectors" : { "EventHandler()" : 2}},{ "className" : "javax::swing::text::DefaultFormatterFactory" , "selectors" : { "DefaultFormatterFactory(AbstractFormatter)" : 21 , "DefaultFormatterFactory(AbstractFormatter,AbstractFormatter,AbstractFormatter)" : 1}},{ "className" : "net::n3::nanoxml::CDATAReader" , "selectors" : { "CDATAReader(IXMLReader)" : 3}},{ "className" : "org::jhotdraw::draw::action::MoveConstrainedAction::West" , "selectors" : { "MoveConstrainedAction" : 1}},{ "className" : "org::jhotdraw::gui::JDisclosureToolBarBeanInfo" , "selectors" : { "getBdescriptor()" : 1 , "getEdescriptor()" : 1 , "getMdescriptor()" : 1 , "getPdescriptor()" : 1}},{ "className" : "org::jhotdraw::draw::action::DrawingColorIcon" , "selectors" : { "DrawingColorIcon(DrawingEditor,AttributeKey<Color>,Image,Shape)" : 2}},{ "className" : "org::jhotdraw::text::ColorFormatter::Format" , "selectors" : { "valueOf(String)" : 1}},{ "className" : "org::jhotdraw::gui::EmptyIcon" , "selectors" : { "EmptyIcon(int,int)" : 1}},{ "className" : "org::jhotdraw::xml::css::CSSRule" , "selectors" : { "CSSRule(String,Map<String,String>)" : 1 , "apply(Element)" : 1 , "apply(IXMLElement)" : 1 , "matches(Element)" : 1 , "matches(IXMLElement)" : 1 , "setSelector(String)" : 2}},{ "className" : "org::jhotdraw::gui::datatransfer::JNLPClipboard" , "selectors" : { "JNLPClipboard(Object)" : 1}},{ "className" : "net::n3::nanoxml::StdXMLBuilder" , "selectors" : { "StdXMLBuilder()" : 1 , "StdXMLBuilder(IXMLElement)" : 1}},{ "className" : "org::jhotdraw::draw::action::AbstractSelectedAction::EventHandler" , "selectors" : { "EventHandler()" : 2}},{ "className" : "org::jhotdraw::gui::plaf::palette::PaletteMenuItemUI" , "selectors" : { "PaletteMenuItemUI()" : 1}},{ "className" : "org::jhotdraw::samples::color::CIEXYChromaticityDiagram" , "selectors" : { "CIEXYChromaticityDiagram()" : 1 , "initComponents()" : 1 , "main(String[])" : 1}},{ "className" : "org::jhotdraw::draw::handle::TransformHandleKit::NorthEastHandle" , "selectors" : { "NorthEastHandle(Figure)" : 1}},{ "className" : "proguard::gui::splash::SplashPanel" , "selectors" : { "SplashPanel(Sprite,double)" : 1 , "SplashPanel(Sprite,double,long)" : 2 , "start()" : 3 , "stop()" : 1}},{ "className" : "proguard::util::ConstantMatcher" , "selectors" : { "ConstantMatcher(boolean)" : 2}},{ "className" : "proguard::classfile::instruction::SwitchInstruction" , "selectors" : { "toString()" : 1 , "toString(int)" : 2}},{ "className" : "proguard::optimize::info::MemberOptimizationInfoSetter" , "selectors" : { "MemberOptimizationInfoSetter()" : 1}},{ "className" : "org::apache::roller::weblogger::business::jpa::JPAThreadManagerImpl" , "selectors" : { "getTaskLockByName(String)" : 2}},{ "className" : "sandmark::gui::SkinPanel" , "selectors" : { "sandmark" : 6}},{ "className" : "sandmark::util::newgraph::NodeWrapper" , "selectors" : { "NodeWrapper(Graph,Object)" : 5 , "checkBounds(int)" : 2 , "getSlot(int)" : 16 , "lockSlot()" : 13 , "setSlot(int,byte)" : 20 , "unlockSlot(int)" : 13}},{ "className" : "sandmark::eclipse::BooleanPropertyInfo" , "selectors" : { "getValue()" : 1}},{ "className" : "sandmark::util::Log" , "selectors" : { "Log()" : 1 , "addLog(OutputStream,int)" : 1 , "addLog(Writer,int)" : 3 , "message(int,String)" : 120 , "message(int,String,Throwable)" : 13}},{ "className" : "sandmark::birthmark::wpp::WPP" , "selectors" : { "WPP()" : 1 , "buildDag(String)" : 2 , "calculate(DynamicBirthMarkParameters)" : 1 , "endTracing()" : 2 , "findSubgraphIsomorphism(ArrayList,ArrayList,MutableGraph,MutableGraph)" : 1 , "getDegree(DAGNode,MutableGraph,int)" : 4 , "getEdgeCount(MutableGraph)" : 2 , "startTracing(String[])" : 2 , "stopTracing()" : 2 , "topoSort(MutableGraph)" : 2}},{ "className" : "sandmark::util::newgraph::ExtraEdgeGraph" , "selectors" : { "ExtraEdgeGraph(Graph,Edge)" : 3}},{ "className" : "sandmark::decompile::Decompile" , "selectors" : { "decompile(Application,String,String)" : 1 , "getHelpURL()" : 1 , "getOverview()" : 1 , "getProperties()" : 3}},{ "className" : "sandmark::gui::HelpDialog" , "selectors" : { "HelpDialog()" : 2 , "displayPage(String)" : 1 , "displayPage(URL)" : 2 , "gotoLink(HyperlinkEvent)" : 1 , "showHelpFor(String)" : 2}},{ "className" : "sandmark::metric::HalsteadClassVocabMeasure" , "selectors" : { "HalsteadClassVocabMeasure()" : 1 , "getInstance()" : 1}},{ "className" : "sandmark::watermark::ct::encode::ir2ir::AddCasts" , "selectors" : { "mutate()::org" : 1 , "sandmark" : 1}},{ "className" : "sandmark::util::javagen::Method" , "selectors" : { "sandmark" : 6 , "toByteCode(???)" : 2 , "toByteCode(org" : 1 , "toCode(Class)" : 2 , "toCode(Class)::org" : 1}},{ "className" : "sandmark::util::graph::graphview::SimpleGraphLayout" , "selectors" : { "SimpleGraphLayout(Graph,Style)" : 1}},{ "className" : "<T>::SumData::SumListener" , "selectors" : { "SumListener(int)" : 1}},{ "className" : "sandmark::util::newexprtree::Expr" , "selectors" : { "emitBytecode(???)" : 1}},{ "className" : "org::apache::jmeter::report::gui::action::ReportEnableComponent" , "selectors" : { "enableComponents(ReportTreeNode[],boolean)" : 2}},{ "className" : "org::apache::jmeter::visualizers::SimpleDataWriter" , "selectors" : { "init()" : 1}},{ "className" : "org::apache::jmeter::control::gui::WhileControllerGui" , "selectors" : { "createConditionPanel()" : 1 , "init()" : 1 , "modifyTestElement(TestElement)" : 1}},{ "className" : "org::apache::jmeter::assertions::SMIMEAssertion" , "selectors" : { "checkForBouncycastle()" : 1 , "checkForBouncycastle()::BouncyCastleProvider" : 1 , "getEmailFromCert(X509Certificate)" : 1 , "getMessageFromResponse(SampleResult,int)::MessagingException" : 1 , "getResult(SMIMEAssertionTestElement,SampleResult,String)" : 1 , "readSerialNumber(String)" : 1}},{ "className" : "org::apache::jmeter::samplers::RemoteSampleListenerImpl" , "selectors" : { "RemoteSampleListenerImpl(Object)" : 1}},{ "className" : "tests::freemind::AllTests" , "selectors" : { "suite()::TestSuite" : 7}},{ "className" : "freemind::modes::mindmapmode::MindMapController::EditLongAction" , "selectors" : { "EditLongAction()" : 1}},{ "className" : "tests::freemind::findreplace::TestMindMapNode" , "selectors" : { "TestMindMapNode()" : 2 , "setText(String)" : 2}},{ "className" : "plugins::script::ScriptEditorPanel::RunAction" , "selectors" : { "RunAction(String)" : 1}},{ "className" : "accessories::plugins::FormularEditor" , "selectors" : { "shutDownDisplay()" : 2}},{ "className" : "plugins::script::ScriptEditorPanel::ExitAction" , "selectors" : { "ExitAction(String)" : 1}},{ "className" : "freemind::modes::mindmapmode::attributeactors::ListDialog::DeleteAction" , "selectors" : { "DeleteAction()" : 1}},{ "className" : "accessories::plugins::FormatPaste" , "selectors" : { "copyFormat(MindMapNode)" : 1 , "pasteFormat(MindMapNode)" : 1}},{ "className" : "freemind::modes::mindmapmode::MindMapController::AssignAttributesAction" , "selectors" : { "AssignAttributesAction()" : 1}},{ "className" : "org::openscience::cdk::smiles::smarts::parser::ASTSmarts" , "selectors" : { "childrenAccept(???)" : 1}},{ "className" : "com::finalist::jag::template::parser::CharQueue" , "selectors" : { "CharQueue(int)" : 1 , "append(char)" : 1 , "elementAt(int)" : 5 , "expand()" : 1 , "init(int)" : 1 , "removeFirst()" : 1}},{ "className" : "org::apache::tools::ant::util::CollectionUtils::EmptyEnumeration" , "selectors" : { "CollectionUtils" : 3}},{ "className" : "org::apache::tools::ant::DefaultLoggerTest" , "selectors" : { "msg(Throwable,boolean)" : 6}},{ "className" : "org::apache::tools::ant::taskdefs::Untar::UntarCompressionMethod" , "selectors" : { "UntarCompressionMethod()" : 1 , "decompress(String,InputStream)" : 1}},{ "className" : "org::apache::tools::ant::taskdefs::optional::native2ascii::KaffeNative2Ascii" , "selectors" : { "KaffeNative2Ascii()" : 1 , "getN2aClass()" : 1}},{ "className" : "org::xml::sax::ext::Attributes2" , "selectors" : { "isDeclared(int)" : 1 , "isSpecified(int)" : 1}},{ "className" : "xs::QueryXS" , "selectors" : { "QueryXS()" : 1 , "printUsage()" : 1}},{ "className" : "org::apache::xerces::dom::DeferredDocumentTypeImpl" , "selectors" : { "DeferredDocumentTypeImpl(DeferredDocumentImpl,int)" : 1}},{ "className" : "org::apache::xerces::dom::DeferredNotationImpl" , "selectors" : { "DeferredNotationImpl(DeferredDocumentImpl,int)" : 1}},{ "className" : "org::hsqldb::jdbc::pool::WrapperInvocationHandler::StatementKey" , "selectors" : { "StatementKey(Method,Object[])" : 1}},{ "className" : "org::hsqldb::test::TestSqlPersistent" , "selectors" : { "TestSqlPersistent(String)" : 2 , "doTestDoubleNan(boolean)" : 1 , "main(String[])::TestResult" : 1}},{ "className" : "org::hsqldb::types::DTIType" , "selectors" : { "DTIType(int,int,long,int)" : 1 , "DTIType(int,int,long,int,int,int)" : 1 , "getExtractType(int)" : 1 , "getFieldNameTokenForType(int)" : 1 , "getFieldNameTypeForToken(int)" : 3 , "getPart(Session,Object,int)" : 1 , "getPrecisionExponent(long)" : 2 , "getSecondPart(Object)" : 1 , "getSecondPart(long,long)" : 3 , "intervalSecondToString(long,int,boolean)" : 4 , "isValidDatetimeRange(Type,Type)" : 3 , "normaliseFraction(int,int)" : 4}},{ "className" : "jparse::stmt::CatchAST" , "selectors" : { "getVarList()" : 1 , "parseComplete()" : 1 , "removeCaughtException(Type[])" : 1}},{ "className" : "com::hp::hpl::jena::vocabulary::XSD" , "selectors" : { "getURI()" : 3}},{ "className" : "jena::rdfcat::RCCommandLine" , "selectors" : { "RCCommandLine()" : 1}},{ "className" : "com::hp::hpl::jena::rdf::arp::impl::Location" , "selectors" : { "Location(Locator)" : 2}},{ "className" : "com::hp::hpl::jena::shared::RandomOrderGraph" , "selectors" : { "RandomOrderGraph(Graph)" : 1 , "RandomOrderGraph(int,Graph)" : 1 , "createDefaultGraph()" : 1}},{ "className" : "treeview::DefaultViewTree::DefaultViewDragSourceListener" , "selectors" : { "DefaultViewDragSourceListener()" : 1}},{ "className" : "org::syntax::jedit::InputHandler::clip_cut" , "selectors" : { "clip_cut()" : 1}},{ "className" : "org::jgroups::blocks::MethodLookup" , "selectors" : { "findMethod(short)" : 1}},{ "className" : "org::jgroups::protocols::S3_PING::CallingFormat::VanityCallingFormat" , "selectors" : { "VanityCallingFormat()" : 1}},{ "className" : "com::ibm::as400::vaccess::VEnumeration" , "selectors" : { "VEnumeration(VNode)" : 11}},{ "className" : "com::ibm::as400::access::PoolMaintenance" , "selectors" : { "PoolMaintenance(ConnectionPool)" : 2 , "isRunning()" : 8 , "setRunning(boolean)" : 4 , "shutdown()" : 3}},{ "className" : "com::ibm::as400::access::AS400JDBCXAConnection" , "selectors" : { "AS400JDBCXAConnection(Connection)" : 2}},{ "className" : "com::ibm::as400::util::commtrace::Progress" , "selectors" : { "Progress(String,int,String)" : 2 , "isCanceled()" : 4 , "setThread(Thread)" : 2 , "updateProgress(int)" : 2}},{ "className" : "com::ibm::as400::access::PrintObjectInputStream" , "selectors" : { "PrintObjectInputStream(AFPResource,PrintParameterList)" : 1 , "PrintObjectInputStream(SpooledFile,PrintParameterList)" : 2 , "PrintObjectInputStream(SpooledFile,PrintParameterList,String)" : 2 , "chooseImpl()" : 3 , "read(byte[])" : 1 , "read(byte[],int,int)" : 1}},{ "className" : "com::ibm::as400::vaccess::VSysvalDateDialog" , "selectors" : { "VSysvalDateDialog(VSystemValue,Frame)" : 1 , "fireChange()" : 2 , "getButtonsPane()" : 1}},{ "className" : "com::ibm::as400::vaccess::AS400ExplorerPane::PropertyChangeListener_" , "selectors" : { "PropertyChangeListener_()" : 1}},{ "className" : "com::ibm::as400::data::SystemClassLoader" , "selectors" : { "SystemClassLoader()" : 1}},{ "className" : "com::ibm::as400::vaccess::RecordListFormPane::ButtonListener_" , "selectors" : { "ButtonListener_()" : 1}},{ "className" : "org::apache::poi::hssf::util::HSSFColor::BLUE" , "selectors" : { "BLUE()" : 1}},{ "className" : "org::apache::poi::hwpf::AllHWPFTests" , "selectors" : { "suite()::TestSuite" : 1}},{ "className" : "org::lnicholls::galleon::apps::podcasting::Podcasting::SubscribedMenuScreen" , "selectors" : { "SubscribedMenuScreen(Podcasting)" : 1 , "handleKeyPress(int,long)::BEvent" : 1}},{ "className" : "org::lnicholls::galleon::apps::videocasting::Videocasting::SubscribedMenuScreen" , "selectors" : { "SubscribedMenuScreen(Videocasting)" : 1 , "handleKeyPress(int,long)::BEvent" : 1}},{ "className" : "org::lnicholls::galleon::apps::iTunes::iTunes::LyricsScreen" , "selectors" : { "LyricsScreen(iTunes,Tracker)" : 1 , "handleKeyPress(int,long)::BEvent" : 1 , "updateLyrics()" : 1}},{ "className" : "org::hibernate::metamodel::source::binder::ConstraintSource" , "selectors" : { "columnNames()" : 1 , "getTableName()" : 1 , "name()" : 1}},{ "className" : "org::hibernate::engine::jdbc::internal::proxy::AbstractStatementProxyHandler" , "selectors" : { "AbstractStatementProxyHandler(Statement,ConnectionProxyHandler,Connection)" : 3 , "beginningInvocationHandling(Method,Object[])" : 1 , "continueInvocation(Object,Method,Object[])" : 1 , "explicitClose(Statement)" : 1 , "getConnectionProxy()" : 4 , "getJdbcServices()" : 2 , "getResourceRegistry()" : 3 , "getStatementWithoutChecks()" : 4 , "invalidateHandle()" : 1 , "wrapIfNecessary(Object,Object,Method)" : 1}},{ "className" : "org::hibernate::cache::ehcache::internal::strategy::EhcacheAccessStrategyFactoryImpl" , "selectors" : { "EhcacheAccessStrategyFactoryImpl()" : 1}},{ "className" : "org::hibernate::engine::spi::EntityKey" , "selectors" : { "EntityKey(Serializable,EntityPersister,String)" : 2 , "EntityKey(Serializable,String,String,Type,boolean,SessionFactoryImplementor,String)" : 1 , "deserialize(ObjectInputStream,SessionImplementor)" : 4 , "equals(Object)" : 5 , "generateHashCode()" : 2 , "getEntityName()" : 7 , "getIdentifier()" : 17 , "hashCode()" : 1 , "isBatchLoadable()" : 2 , "serialize(ObjectOutputStream)" : 4}},{ "className" : "org::hibernate::cache::spi::entry::CollectionCacheEntry" , "selectors" : { "CollectionCacheEntry(PersistentCollection,CollectionPersister)" : 1 , "CollectionCacheEntry(Serializable)" : 2 , "assemble(PersistentCollection,CollectionPersister,Object)" : 1 , "getState()" : 3}},{ "className" : "org::hibernate::test::annotations::embedded::Deal" , "selectors" : { "getId()" : 1 , "getSwap()" : 9 , "setId(String)" : 1 , "setSwap(Swap)" : 1}},{ "className" : "org::hibernate::test::proxy::Owner" , "selectors" : { "Owner(String)" : 2}},{ "className" : "org::hibernate::ejb::criteria::predicate::BetweenPredicate" , "selectors" : { "BetweenPredicate(???)" : 1 , "render(RenderingContext)" : 1}},{ "className" : "org::hibernate::type::descriptor::sql::BooleanTypeDescriptor" , "selectors" : { "BooleanTypeDescriptor()" : 1}},{ "className" : "org::apache::cayenne::tools::MavenLogger" , "selectors" : { "MavenLogger(???)" : 3}},{ "className" : "org::apache::cayenne::dba::openbase::OpenBaseAdapter::OpenBaseCharType" , "selectors" : { "OpenBaseCharType()" : 1}},{ "className" : "org::apache::cayenne::jpa::conf::EntityMapDefaultsProcessor::EntityVisitor" , "selectors" : { "EntityVisitor()" : 1}},{ "className" : "org::apache::cayenne::instrument::CayenneAgent::AgentOptions" , "selectors" : { "AgentOptions(String)" : 1}},{ "className" : "javax::print::PrintServiceLookup" , "selectors" : { "lookupDefaultPrintService()" : 3 , "lookupPrintServices(DocFlavor,AttributeSet)" : 6}},{ "className" : "org::compiere::wstore::BasketServlet" , "selectors" : { "init(ServletConfig)::ServletException" : 1}},{ "className" : "org::compiere::model::X_Ref_CM_WebAccessLog_Type" , "selectors" : { "getValue()" : 4 , "isValid(String)" : 1 , "values()" : 1}},{ "className" : "org::compiere::model::X_T_InventoryValue" , "selectors" : { "getAD_PInstance_ID()" : 1}},{ "className" : "org::compiere::model::MWebProjectDomain" , "selectors" : { "MWebProjectDomain(Ctx,ResultSet,Trx)" : 1 , "get(Ctx,String,Trx)" : 1}},{ "className" : "org::compiere::apps::LoginMsgPanel" , "selectors" : { "LoginMsgPanel(MLoginMsg)" : 1 , "isUserRejected()" : 2 , "isUserSawIt()" : 1}},{ "className" : "org::compiere::model::MDunning" , "selectors" : { "MDunning(Ctx,int,Trx)" : 1}},{ "className" : "org::compiere::model::MTask" , "selectors" : { "MTask(Ctx,ResultSet,Trx)" : 1 , "MTask(Ctx,int,Trx)" : 1 , "execute()" : 2 , "executeLocal(String)" : 1 , "executeRemote(String)" : 1 , "toString()" : 1}},{ "className" : "org::compiere::util::ReplenishInterface" , "selectors" : { "getQtyToOrder(MWarehouse,X_T_Replenish)" : 1}},{ "className" : "org::compiere::apps::graph::ViewPI" , "selectors" : { "dispose()" : 1 , "initPanel()" : 1 , "sizeIt()" : 1}},{ "className" : "org::compiere::server::AcctProcessor" , "selectors" : { "AcctProcessor(MAcctProcessor)" : 1 , "postSession()" : 1}},{ "className" : "org::apache::lucene::util::encoding::EightFlagsIntDecoder" , "selectors" : { "EightFlagsIntDecoder()" : 1}},{ "className" : "org::apache::lucene::search::grouping::AbstractAllGroupHeadsCollector" , "selectors" : { "AbstractAllGroupHeadsCollector<GH>(int)" : 1 , "getCollectedGroupHeads()" : 3 , "retrieveGroupHeadAndAddIfNotExist(int)" : 1 , "retrieveGroupHeads()" : 6 , "retrieveGroupHeads(int)" : 5}},{ "className" : "org::apache::lucene::facet::search::aggregator::Aggregator" , "selectors" : { "aggregate(int)" : 1 , "setNextDoc(int,float)" : 1}},{ "className" : "org::apache::lucene::queryParser::core::nodes::PathQueryNode::QueryText" , "selectors" : { "clone()" : 2}},{ "className" : "org::apache::lucene::search::spell::PlainTextDictionary" , "selectors" : { "PlainTextDictionary(Reader)" : 1}},{ "className" : "org::tartarus::snowball::ext::SwedishStemmer" , "selectors" : { "SwedishStemmer()" : 1 , "r_consonant_pair()" : 1 , "r_main_suffix()" : 1 , "r_mark_regions()" : 1 , "r_other_suffix()" : 1}},{ "className" : "org::apache::lucene::facet::search::aggregator::ScoringAggregator" , "selectors" : { "ScoringAggregator(float[])" : 1}},{ "className" : "org::apache::lucene::facet::FacetTestBase::NotSameResultError" , "selectors" : { "NotSameResultError()" : 1}},{ "className" : "net::suberic::pooka::gui::MessageProxy::CopyAction" , "selectors" : { "CopyAction()" : 3}},{ "className" : "net::suberic::pooka::gui::MailWrappedView" , "selectors" : { "MailWrappedView(Element)" : 1 , "getCharacterLength()" : 1}},{ "className" : "net::suberic::pooka::gui::NewMessageProxy::SelectNoCrypt" , "selectors" : { "SelectNoCrypt()" : 1}},{ "className" : "com::jcraft::jorbis::Residue0" , "selectors" : { "Residue0()" : 1 , "_01inverse(Block,Object,float[][],int,int)" : 2 , "_2inverse(Block,Object,float[][],int)" : 1 , "free_info(Object)" : 2 , "icount(int)" : 2 , "ilog(int)" : 2}},{ "className" : "org::webcurator::core::common::EnvironmentFactory" , "selectors" : { "getEnv()" : 6}},{ "className" : "org::apache::struts2::jasper::runtime::ServletResponseWrapperInclude" , "selectors" : { "ServletResponseWrapperInclude(???)" : 1 , "getResponse(???)" : 1}},{ "className" : "org::apache::struts2::jasper::compiler::Node::JspElement" , "selectors" : { "Node" : 3 , "getJspAttributes()" : 3 , "getNameAttribute()" : 4 , "setJspAttributes(JspAttribute[])" : 1 , "setNameAttribute(JspAttribute)" : 1}},{ "className" : "org::apache::struts2::views::java::TagHandlerFactory" , "selectors" : { "create(TagHandler)" : 1}},{ "className" : "org::apache::struts2::jasper::runtime::JspFactoryImpl::PrivilegedGetPageContext" , "selectors" : { "PrivilegedGetPageContext(???)" : 1}},{ "className" : "net::sf::jasperreports::engine::export::oasis::JROdsExporter::ExporterContext" , "selectors" : { "ExporterContext(TableBuilder)" : 1}},{ "className" : "org::apache::batik::gvt::text::ConcreteTextLayoutFactory" , "selectors" : { "ConcreteTextLayoutFactory()" : 1}},{ "className" : "org::apache::batik::bridge::BridgeContext::AnimatedAttrListener" , "selectors" : { "AnimatedAttrListener()" : 2}},{ "className" : "org::apache::batik::swing::gvt::JGVTComponentListener" , "selectors" : { "componentTransformChanged(ComponentEvent)" : 1}},{ "className" : "org::apache::hadoop::io::file::tfile::Utils::Version" , "selectors" : { "Version(DataInput)" : 2 , "Version(short,short)" : 2 , "compareTo(Version)" : 1 , "compatibleWith(Version)" : 2 , "size()" : 2 , "toString()" : 4 , "write(DataOutput)" : 2}},{ "className" : "org::apache::hadoop::mapred::KeyValueLineRecordReader" , "selectors" : { "KeyValueLineRecordReader(Configuration,FileSplit)" : 1 , "findSeparator(byte[],int,int,byte)" : 1}},{ "className" : "fitlibrary::specify::exception::ExceptionThrownByGetterInCollection::User" , "selectors" : { "User()" : 2}},{ "className" : "org::springframework::transaction::NoTransactionException" , "selectors" : { "NoTransactionException(String)" : 1}},{ "className" : "org::springframework::ejb::config::AbstractJndiLocatingBeanDefinitionParser" , "selectors" : { "isEligibleAttribute(String)" : 1}},{ "className" : "org::jboss::test::cluster::web::mocks::MockEngine" , "selectors" : { "MockEngine()" : 3 , "addChild(???)" : 3 , "setJvmRoute(String)" : 1}},{ "className" : "org::jboss::ejb::plugins::cmp::ejbql::ASTSelect" , "selectors" : { "jjtGetChild(???)" : 3}},{ "className" : "org::jboss::aop::junit::AOPTest" , "selectors" : { "AOPTest(String)" : 1}},{ "className" : "org::jboss::test::cmp2::readonly::Book" , "selectors" : { "getPublisher()" : 4 , "setPublisher(Publisher)" : 1}},{ "className" : "org::jboss::test::cmp2::perf::ejb::CheckBookEntryBean" , "selectors" : { "setEntryID(Integer)" : 1}},{ "className" : "test::performance::registration::RegistrationTEST" , "selectors" : { "RegistrationTEST(String,Object,String,String)" : 1}},{ "className" : "org::jboss::test::ejbconf::beans::interfaces::ReadOnlyHome" , "selectors" : { "findByPrimaryKey(???)" : 1}},{ "className" : "org::jboss::test::mx::mxbean::test::CompositeDataFloatUnitTestCase" , "selectors" : { "suite()::TestSuite" : 1 , "suite(???)" : 1}},{ "className" : "org::jboss::spring::io::VFSResourcePatternResolver" , "selectors" : { "VFSResourcePatternResolver(ClassLoader)" : 1}},{ "className" : "org::jboss::naming::NamingService" , "selectors" : { "<Initializer>()::Main" : 1 , "startService()" : 1 , "stopService()" : 1}},{ "className" : "org::apache::xalan::templates::AVTPartSimple" , "selectors" : { "AVTPartSimple(String)" : 2}},{ "className" : "org::apache::xalan::lib::PipeDocument" , "selectors" : { "usePipe(Vector,String,String)" : 1}},{ "className" : "org::apache::xalan::xsltc::compiler::util::SecuritySupport12" , "selectors" : { "SecuritySupport12()" : 1}},{ "className" : "org::apache::xalan::templates::ElemPI" , "selectors" : { "getNodeName()" : 1}},{ "className" : "org::objectweb::cjdbc::common::net::SSLException" , "selectors" : { "SSLException(Throwable)" : 1}},{ "className" : "org::exolab::jms::common::uuid::UUID" , "selectors" : { "next()" : 6 , "next(String)" : 1}},{ "className" : "org::jgraph::pad::actionsbase::lazy::FormatLineLabelNormal" , "selectors" : { "actionPerformed(ActionEvent)::AttributeMap" : 1}},{ "className" : "com::jaspersoft::ireport::designer::sheet::properties::charts::Bar3DCategoryAxisTickLabelColorProperty" , "selectors" : { "Bar3DCategoryAxisTickLabelColorProperty(???)" : 1}},{ "className" : "com::ecyrd::jspwiki::filters::AllTests" , "selectors" : { "suite()::TestSuite" : 1 , "suite(???)" : 1}},{ "className" : "org::columba::mail::folder::command::CreateVFolderOnMessageCommand" , "selectors" : { "CreateVFolderOnMessageCommand(IFrameMediator,ICommandReference,String)" : 3 , "createVirtualFolder(String,String,String,IMailbox)" : 1}},{ "className" : "org::geotools::swing::dialog::JFileImageChooser::FormatFilter" , "selectors" : { "FormatFilter(FormatSpecifier)" : 1 , "accept(File)" : 1 , "getDefaultSuffix()" : 2 , "getDescription()" : 1}},{ "className" : "org::geotools::coverage::grid::io::UnknownFormat" , "selectors" : { "UnknownFormat()" : 3}},{ "className" : "org::geotools::arcsde::session::Commands::CloseStateCommand" , "selectors" : { "Commands" : 1}},{ "className" : "org::argouml::model::CoreHelper" , "selectors" : { "addAnnotatedElement(Object,Object)" : 3 , "addClient(Object,Object)" : 3 , "addClientDependency(Object,Object)" : 1 , "addComment(Object,Object)" : 1 , "addConnection(Object,Object)" : 1 , "addConnection(Object,int,Object)" : 1 , "addConstraint(Object,Object)" : 4 , "addDeploymentLocation(Object,Object)" : 2 , "addElementResidence(Object,Object)" : 1 , "addFeature(Object,Object)" : 8 , "addFeature(Object,int,Object)" : 5 , "addLink(Object,Object)" : 2 , "addLiteral(Object,int,Object)" : 3 , "addManifestation(Object,Object)" : 2 , "addMethod(Object,Object)" : 3 , "addOwnedElement(Object,Object)" : 31 , "addParameter(Object,Object)" : 2 , "addParameter(Object,int,Object)" : 1 , "addQualifier(Object,int,Object)" : 1 , "addRaisedSignal(Object,Object)" : 1 , "addSourceFlow(Object,Object)" : 1 , "addStereotype(Object,Object)" : 23 , "addSupplier(Object,Object)" : 3 , "addSupplierDependency(Object,Object)" : 1 , "addTargetFlow(Object,Object)" : 1 , "addTemplateArgument(Object,Object)" : 1 , "addTemplateArgument(Object,int,Object)" : 1 , "addTemplateParameter(Object,Object)" : 2 , "addTemplateParameter(Object,int,Object)" : 1 , "clearStereotypes(Object)" : 1 , "equalsAggregationKind(Object,String)" : 2 , "getAllAttributes(Object)" : 1 , "getAllBehavioralFeatures(Object)" : 1 , "getAllClasses(Object)" : 3 , "getAllClassifiers(Object)" : 2 , "getAllComponents(Object)" : 1 , "getAllDataTypes(Object)" : 4 , "getAllInterfaces(Object)" : 1 , "getAllMetaDatatypeNames()" : 2 , "getAllMetatypeNames()" : 4 , "getAllNodes(Object)" : 1 , "getAllPossibleNamespaces(Object,Object)" : 2 , "getAllRealizedInterfaces(Object)" : 3 , "getAllSupertypes(Object)" : 3 , "getAllVisibleElements(Object)" : 1 , "getAssociateEndsInh(Object)" : 2 , "getAssociatedClassifiers(Object)" : 1 , "getAssociationEnd(Object,Object)" : 3 , "getAssociations(Object)" : 4 , "getAssociations(Object,Object)" : 2 , "getAttributesInh(Object)" : 2 , "getBehavioralFeatures(Object)" : 2 , "getBody(Object)" : 2 , "getChildren(Object)" : 3 , "getDependencies(Object,Object)" : 4 , "getDestination(Object)" : 12 , "getExtendedClassifiers(Object)" : 1 , "getExtendingClassifiers(Object)" : 1 , "getExtendingElements(Object)" : 1 , "getFirstSharedNamespace(Object,Object)" : 1 , "getFlows(Object,Object)" : 1 , "getGeneralization(Object,Object)" : 1 , "getOperationsInh(Object)" : 2 , "getPackageImport(Object,Object)" : 1 , "getPackageImports(Object)" : 1 , "getParents(Object)" : 1 , "getRealizedInterfaces(Object)" : 4 , "getRelationships(Object,Object)" : 1 , "getReturnParameters(Object)" : 14 , "getSource(Object)" : 11 , "getSpecification(Object)" : 5 , "getSubtypes(Object)" : 1 , "getSupertypes(Object)" : 3 , "getUtilizedElements(Object)" : 3 , "hasCompositeEnd(Object)" : 2 , "isSubType(Object,Object)" : 2 , "isValidNamespace(Object,Object)" : 8 , "removeAnnotatedElement(Object,Object)" : 3 , "removeClientDependency(Object,Object)" : 3 , "removeConnection(Object,Object)" : 1 , "removeConstraint(Object,Object)" : 2 , "removeDeploymentLocation(Object,Object)" : 2 , "removeElementResidence(Object,Object)" : 3 , "removeFeature(Object,Object)" : 9 , "removeLiteral(Object,Object)" : 1 , "removeOwnedElement(Object,Object)" : 1 , "removeParameter(Object,Object)" : 5 , "removeQualifier(Object,Object)" : 1 , "removeSourceFlow(Object,Object)" : 1 , "removeStereotype(Object,Object)" : 6 , "removeSupplierDependency(Object,Object)" : 1 , "removeTargetFlow(Object,Object)" : 1 , "removeTemplateArgument(Object,Object)" : 1 , "removeTemplateParameter(Object,Object)" : 1 , "setAbstract(Object,boolean)" : 14 , "setActive(Object,boolean)" : 5 , "setAggregation(Object,Object)" : 4 , "setAggregation1(Object,Object)" : 14 , "setAggregation2(Object,Object)" : 11 , "setAnnotatedElements(Object,Collection)" : 1 , "setAssociation(Object,Object)" : 2 , "setAttributes(Object,List)" : 1 , "setBody(Object,Object)" : 7 , "setBody(Object,String)" : 5 , "setChangeability(Object,Object)" : 5 , "setChild(Object,Object)" : 1 , "setConcurrency(Object,Object)" : 11 , "setConnections(Object,Collection)" : 2 , "setContainer(Object,Object)" : 3 , "setDefaultElement(Object,Object)" : 1 , "setDefaultValue(Object,Object)" : 4 , "setDiscriminator(Object,String)" : 3 , "setEnumerationLiterals(Object,List)" : 1 , "setFeature(Object,int,Object)" : 1 , "setFeatures(Object,Collection)" : 1 , "setInitialValue(Object,Object)" : 12 , "setKind(Object,Object)" : 15 , "setLeaf(Object,boolean)" : 17 , "setModelElementContainer(Object,Object)" : 4 , "setMultiplicity(Object,Object)" : 3 , "setMultiplicity(Object,String)" : 17 , "setMultiplicity(Object,int,int)" : 4 , "setName(Object,String)" : 83 , "setNamespace(Object,Object)" : 44 , "setNavigable(Object,boolean)" : 10 , "setOperations(Object,List)" : 1 , "setOrdering(Object,Object)" : 6 , "setOwner(Object,Object)" : 3 , "setParameter(Object,Object)" : 1 , "setParameters(Object,Collection)" : 1 , "setParent(Object,Object)" : 1 , "setPowertype(Object,Object)" : 3 , "setQualifiers(Object,List)" : 1 , "setQuery(Object,boolean)" : 5 , "setRaisedSignals(Object,Collection)" : 1 , "setReadOnly(Object,boolean)" : 18 , "setResident(Object,Object)" : 3 , "setResidents(Object,Collection)" : 1 , "setRoot(Object,boolean)" : 18 , "setSources(Object,Collection)" : 1 , "setSpecification(Object,Object)" : 2 , "setSpecification(Object,String)" : 3 , "setSpecification(Object,boolean)" : 2 , "setSpecifications(Object,Collection)" : 2 , "setStatic(Object,boolean)" : 11 , "setTaggedValue(Object,String,String)" : 5 , "setTargetScope(Object,Object)" : 4 , "setType(Object,Object)" : 22 , "setVisibility(Object,Object)" : 33}},{ "className" : "org::argouml::model::euml::UMLUtil" , "selectors" : { "checkArgs(Object[],Class[])" : 4 , "copy(???)" : 1 , "getBaseElement(???)" : 1 , "getInverseReferences(???)" : 1 , "getOwnedAttributes(???)" : 6 , "getOwnedAttributes(Type)::Association" : 1 , "getOwnedAttributes(Type)::AssociationClass" : 1 , "getOwnedOperations(???)" : 2 , "getResource(???)" : 2 , "getTaggedValue(???)" : 3 , "setTaggedValue(???)" : 1 , "toString(Object)" : 1 , "toString(Object)::Element" : 1 , "toString(Object)::NamedElement" : 3}},{ "className" : "org::argouml::model::mdr::CollaborationsHelperMDRImpl" , "selectors" : { "CollaborationsHelperMDRImpl(MDRModelImplementation)" : 1 , "addConstrainingElement(Object,Object)::Collaboration" : 1 , "addInstance(Object,Object)::ClassifierRole" : 1 , "addMessage(Object,Object)::AssociationRole" : 1 , "addPredecessor(Object,Object)::Message" : 1 , "addSuccessor(Object,Object)" : 1 , "addSuccessor(Object,Object)::Message" : 1 , "allAvailableContents(Object)" : 1 , "getAllClassifierRoles(Object)::Namespace" : 1 , "getAllPossibleBases(AssociationRole)::Collaboration" : 1 , "getAllPossibleBases(AssociationRole)::org" : 1 , "getAllPossibleBases(ClassifierRole)::org" : 1 , "getAllPossibleBases(Object)" : 3 , "hasAsActivator(Object,Object)" : 3 , "hasAsActivator(Object,Object)::Message" : 1 , "removeBase(Object,Object)::ClassifierRole" : 1 , "removeInteraction(Object,Object)::Collaboration" : 1 , "removeMessage(Object,Object)::AssociationRole" : 1 , "removeMessage(Object,Object)::Interaction" : 1 , "removePredecessor(Object,Object)::Message" : 1 , "removeSuccessor(Object,Object)" : 1 , "removeSuccessor(Object,Object)::Message" : 1 , "removeSuccessor(Object,Object)::org" : 1 , "setAction(Object,Object)" : 1 , "setAction(Object,Object)::Message" : 1 , "setBases(Object,Collection)::ClassifierRole" : 1 , "setContext(Object,Object)::Interaction" : 1 , "setPredecessors(Object,Collection)::Message" : 1 , "setRepresentedClassifier(Object,Object)::Collaboration" : 1 , "setRepresentedOperation(Object,Object)::Collaboration" : 1 , "setSender(Object,Object)::Message" : 1 , "setSender(Object,Object)::Stimulus" : 1}},{ "className" : "org::argouml::uml::diagram::static_structure::ui::ClassDiagramRenderer" , "selectors" : { "ClassDiagramRenderer()" : 1 , "getFigEdgeFor(GraphModel,Layer,Object,Map)::LayerPerspective" : 1 , "getFigNodeFor(GraphModel,Layer,Object,Map)::LayerPerspective" : 1}},{ "className" : "org::argouml::ui::CheckboxTableModel" , "selectors" : { "CheckboxTableModel(Object[],Object[],String,String)" : 2 , "getRowCount()" : 1 , "getValueAt(int,int)" : 1}},{ "className" : "org::argouml::uml::ui::SaveScaledEPSAction" , "selectors" : { "SaveScaledEPSAction(String)" : 1 , "saveGraphics(OutputStream,Editor,Rectangle)::PostscriptWriter" : 1}},{ "className" : "org::argouml::language::cpp::profile::ProfileCpp" , "selectors" : { "ProfileCpp(Collection<Object>)" : 1 , "ProfileCpp(Collection<Object>,Object)" : 1 , "applyClassSpecifierTaggedValue(Object,String)" : 1 , "applyCppClassStereotype(Object)" : 1 , "applyCppOperationStereotype(Object)" : 1 , "applyInheritanceVisibilityTaggedValue2Generalization(Object,String)" : 1 , "applyInlineTaggedValue2Operation(Object,String)" : 1 , "applyVirtualInheritanceTaggedValue(Object,String)" : 1 , "getCppGeneralizationStereotype()" : 1 , "isPtrOrRefTVName(String)" : 1}},{ "className" : "org::argouml::model::euml::UseCasesHelperEUMLImpl" , "selectors" : { "UseCasesHelperEUMLImpl(EUMLModelImplementation)" : 1 , "addExtend(Object,Object)::anonymous(RunnableClass)" : 2 , "addExtensionPoint(Object,int,Object)" : 1 , "addExtensionPoint(Object,int,Object)::anonymous(RunnableClass)" : 2 , "addInclude(Object,Object)::anonymous(RunnableClass)" : 1 , "getExtendedUseCases(Object)::UseCase" : 1 , "getExtends(Object,Object)::UseCase" : 1 , "getIncludedUseCases(Object)::UseCase" : 1 , "getIncludes(Object,Object)::UseCase" : 1 , "removeInclude(Object,Object)::anonymous(RunnableClass)" : 1 , "setAddition(Object,Object)::anonymous(RunnableClass)" : 1 , "setExtensionPoints(Object,Collection)::anonymous(RunnableClass)" : 4}},{ "className" : "org::argouml::language::java::reveng::classfile::ParserUtils" , "selectors" : { "convertBaseType(String)" : 2 , "convertClassSignature(List<Token>)" : 1 , "convertClassTypeSignature(List<Token>)" : 1 , "convertFieldDescriptor(List<Token>)" : 3 , "convertFieldTypeSignature(List<Token>)" : 1 , "convertMethodTypeSignature(List<Token>)" : 1 , "extractTypeParameters(String)" : 1}},{ "className" : "org::argouml::core::propertypanels::ui::UMLConditionExpressionModel" , "selectors" : { "UMLConditionExpressionModel(Object)" : 1}},{ "className" : "org::argouml::uml::diagram::state::ui::FigStubState" , "selectors" : { "FigStubState(Object,Rectangle,DiagramSettings)" : 2 , "createBigPortFig()::FigRect" : 1 , "getFigs(???)" : 1 , "initFigs()" : 1 , "initFigs()::FigLine" : 1 , "initFigs()::FigText" : 1 , "removeListeners()" : 1 , "setBigPort(???)" : 1 , "updateListeners(Object,Object)" : 4 , "updateReferenceText()" : 5}},{ "className" : "org::argouml::activity2::diagram::FigCompartment" , "selectors" : { "FigCompartment(Object,DiagramSettings)" : 1 , "FigCompartment(Object,Rectangle,DiagramSettings,List<Object>,String)" : 1 , "FigCompartment(Object,Rectangle,DiagramSettings,Object,String)" : 1}},{ "className" : "org::argouml::uml::diagram::static_structure::ui::FigPackage::FigPackageFigText" , "selectors" : { "FigPackageFigText(Object,Rectangle,DiagramSettings)" : 1 , "getLineColor(???)" : 1 , "getLineWidth(???)" : 1 , "setBounds(???)" : 1 , "setEditable(???)" : 1 , "setLineColor(???)" : 1 , "setLineWidth(???)" : 1}},{ "className" : "org::argouml::core::propertypanels::ui::UMLMultiplicityPanel::MultiplicityComboBoxModel::ActionSetClassifierRoleMultiplicity" , "selectors" : { "ActionSetClassifierRoleMultiplicity()" : 1}},{ "className" : "org::argouml::uml::diagram::state::ui::StateDiagramRenderer" , "selectors" : { "StateDiagramRenderer()" : 2 , "getFigEdgeFor(GraphModel,Layer,Object,Map)::LayerPerspective" : 1 , "getFigNodeFor(???)" : 1 , "getFigNodeFor(GraphModel,Layer,Object,Map)::LayerPerspective" : 1}},{ "className" : "org::argouml::cognitive::ui::DismissToDoItemDialog" , "selectors" : { "DismissToDoItemDialog()" : 1 , "badDec(ActionEvent)" : 1 , "badGoal(ActionEvent)" : 1 , "explain(ActionEvent)" : 1 , "setTarget(Object)" : 1 , "setVisible(boolean)" : 1}},{ "className" : "org::argouml::activity2::diagram::FigBasePresentation" , "selectors" : { "FigBasePresentation(Object,Rectangle,Color,Color,Object,DiagramSettings)" : 4 , "createBorder(Rectangle,Color,Color)" : 1 , "getBorder()" : 1 , "getBottomMargin()" : 2 , "getLeftMargin()" : 3 , "getMinimumSize()" : 1 , "getNameDisplay()" : 3 , "getRightMargin()" : 2 , "getTopMargin()" : 3 , "setOwner(???)" : 1}},{ "className" : "org::argouml::uml::diagram::static_structure::layout::ClassdiagramLayouter" , "selectors" : { "ClassdiagramLayouter(ArgoDiagram)" : 2 , "add(LayoutedObject)" : 1 , "centerParents()" : 1 , "getHGap()" : 4 , "getVGap()" : 4 , "layout()" : 1 , "placeEdges()" : 1 , "placeNode(ClassdiagramNode)" : 1 , "placeNodes()" : 1 , "rankAndWeightNodes()" : 1 , "setupLinks()" : 1 , "xCenter(List<ClassdiagramNode>)" : 1}},{ "className" : "org::argouml::cognitive::critics::ui::CriticBrowserDialog" , "selectors" : { "CriticBrowserDialog()" : 1 , "CriticBrowserDialog()::BorderSplitPane" : 1 , "addListeners()" : 1 , "enableFieldsAndButtons()" : 2 , "insertUpdate(DocumentEvent)" : 1 , "setTarget(Critic)" : 1 , "setTargetDesc()" : 1 , "setTargetHeadline()" : 1 , "setTargetMoreInfo()" : 1 , "setTargetPriority()" : 1 , "setTargetUseClarifiers()" : 1 , "setVisible(???)" : 1 , "updateButtonsEnabled()" : 2}},{ "className" : "org::argouml::uml::diagram::ui::FigAssociation" , "selectors" : { "FigAssociation(DiagramEdgeSettings,DiagramSettings)" : 5 , "applyArrowHeads()" : 3 , "buildAggregationMenu(Vector,Object,Object)" : 1 , "buildMultiplicityMenu(Vector)" : 1 , "buildNavigationMenu(Vector,Object,Object)" : 1 , "createEnd(Object,DiagramSettings,int,int,int,int)" : 2 , "createEndFigs(Object,Object,DiagramSettings,int)" : 1 , "createNameLabel(Object,DiagramSettings)" : 1 , "getMiddleGroup()" : 1 , "initializeNotationProvidersInternal(Object)" : 2 , "isPointCloseToEdgeEnd(Point)" : 1 , "removeFromDiagramImpl()" : 1}},{ "className" : "org::argouml::uml::reveng::idl::IDLFileImport" , "selectors" : { "getSuffixFilters()" : 1 , "parseFile(InputStream,String)" : 1 , "parseFile(InputStream,String)::IDLLexer" : 1}},{ "className" : "org::argouml::uml::cognitive::critics::CrJoinIncomingTransition" , "selectors" : { "CrJoinIncomingTransition()" : 1}},{ "className" : "org::argouml::uml::cognitive::critics::CrNoInitialState" , "selectors" : { "CrNoInitialState()" : 1}},{ "className" : "org::argouml::core::propertypanels::ui::UMLMessageActionListModel" , "selectors" : { "UMLMessageActionListModel(Object,String)" : 1}},{ "className" : "org::argouml::language::csharp::generator::GeneratorCSharp" , "selectors" : { "GeneratorCSharp()" : 1 , "addImport(Set<String>,Object,String)" : 4 , "addImportType(Set<String>,Object,String)" : 4 , "generateAbstractness(Object)" : 1 , "generateAction(Object)" : 4 , "generateAssociationEnd(Object)" : 1 , "generateAssociationFrom(Object,Object)" : 1 , "generateAttribute(Object,boolean)" : 1 , "generateChangability(Object)" : 1 , "generateChangeability(Object)" : 1 , "generateClassList(Collection)" : 1 , "generateClassifier(Object)" : 1 , "generateClassifierRef(Object)" : 9 , "generateConstraintEnrichedDocComment(Object)" : 2 , "generateConstraintEnrichedDocComment(Object,Object)" : 1 , "generateConstraintEnrichedDocComment(Object,String,String,String)" : 5 , "generateConstraintEnrichedDocComment(Object,String,String,String)::TagExtractor" : 2 , "generateDefaultReturnStatement(Object)" : 1 , "generateEvent(Object)" : 1 , "generateExpression(Object)" : 4 , "generateFile(Object,String)" : 2 , "generateFiles(Collection,String,boolean)" : 1 , "generateGeneralization(Collection)" : 1 , "generateGuard(Object)" : 1 , "generateHeader(Object,String,String)" : 1 , "generateImport(Object,String)" : 1 , "generateImports(Object,String)" : 1 , "generateMethodBody(Object)" : 1 , "generateMultiplicity(Object)" : 1 , "generateOperation(Object,boolean)" : 1 , "generateParameter(Object)" : 1 , "generateScope(Object)" : 2 , "generateSection(Object)" : 3 , "generateSpecification(Object)" : 1 , "generateTaggedValue(Object)" : 1 , "generateTaggedValues(Object)" : 4 , "generateTransition(Object)" : 1 , "generateUninterpreted(String)" : 2 , "generateVisibility(Object)" : 5 , "getPackageName(Object)" : 1 , "isCollection(Object)" : 4}},{ "className" : "org::argouml::uml::ui::ActionNewDiagram" , "selectors" : { "ActionNewDiagram(String)" : 4 , "createCollaboration(Object)" : 2 , "createDiagram(Object,DiagramSettings)" : 2 , "findNamespace()" : 2 , "isValidNamespace(Object)" : 1}},{ "className" : "org::argouml::model::euml::DataTypesHelperEUMLImpl" , "selectors" : { "DataTypesHelperEUMLImpl(EUMLModelImplementation)" : 1 , "getBody(Object)" : 1 , "getBody(Object)::OpaqueBehavior" : 1 , "getBody(Object)::OpaqueExpression" : 1 , "getLanguage(Object)::OpaqueBehavior" : 1 , "getLanguage(Object)::OpaqueExpression" : 1 , "modifyValueSpecification(Object,Object[])" : 1 , "setBody(Object,String)" : 1 , "setBody(Object,String)::OpaqueBehavior" : 1 , "setBody(Object,String)::OpaqueExpression" : 1 , "setLanguage(Object,String)" : 1 , "setLanguage(Object,String)::OpaqueBehavior" : 1 , "setLanguage(Object,String)::OpaqueExpression" : 1}},{ "className" : "org::argouml::application::helpers::ResourceLoaderWrapper" , "selectors" : { "ResourceLoaderWrapper()" : 1 , "getImageBinding(String)" : 3 , "getInstance()" : 5 , "initResourceLoader()" : 1 , "lookAndFeelPath(String,String)" : 5 , "lookupIcon(Object)" : 5 , "lookupIcon(String)" : 78 , "lookupIconResource(String)" : 73 , "lookupIconResource(String,String)" : 3 , "lookupIconUrl(String,ClassLoader)" : 1}},{ "className" : "org::argouml::notation::providers::uml::NotationUtilityUml" , "selectors" : { "formatNameList(Collection)" : 5 , "formatNameList(Collection,String)" : 1 , "formatStereotype(String,boolean)" : 6 , "generateAction(Object)" : 3 , "generateActionSequence(Object)" : 5 , "generateClassifierRef(Object)" : 1 , "generateExpression(Object)" : 3 , "generateKind(Object)" : 1 , "generateMultiplicity(Object,boolean)" : 1 , "generateParameter(Object)" : 1 , "generatePath(Object)" : 2 , "generateStereotype(Object,boolean)" : 11 , "generateTaggedValue(Object)" : 1 , "generateUninterpreted(String)" : 2 , "generateVisibility2(Object)" : 5 , "getType(String,Object)" : 4 , "getVisibility(String)" : 2 , "indexOfNextCheckedSemicolon(String,int)" : 9 , "init()" : 1 , "parseModelElement(Object,String)" : 2 , "parseParamList(Object,String,int)" : 3 , "setDerived(Object,boolean)" : 3 , "setParamKind(Object,String)" : 1 , "setProperties(Object,List<String>,PropertySpecialString[])" : 2}},{ "className" : "org::argouml::uml::diagram::state::ui::FigConcurrentRegion" , "selectors" : { "<Initializer>()::Handle" : 1 , "FigConcurrentRegion(Object,Rectangle,DiagramSettings)" : 2 , "addEnclosedFig(???)" : 1 , "getBounds(???)" : 2 , "getFigs(???)" : 1 , "getInitialColor()" : 1 , "getInitialHeight()" : 2 , "getInitialWidth()" : 2 , "getInitialX()" : 2 , "getInitialY()" : 3 , "getMinimumSize()" : 3 , "getY(???)" : 1 , "initialize()" : 1 , "initialize()::FigLine" : 1 , "initialize()::FigRect" : 1 , "setBigPort(???)" : 1 , "setBounds(int,int)" : 2 , "setBounds(int,int,int,boolean)" : 1 , "setBounds(int,int,int,int,boolean)" : 2 , "setEnclosingFig(???)" : 2 , "setInternal(???)" : 1 , "setLayer(???)" : 2 , "setLineColor(Color)" : 1 , "setNameFig(???)" : 1}},{ "className" : "org::argouml::core::propertypanels::ui::XMLPropPanelFactory" , "selectors" : { "XMLPropPanelFactory()" : 1 , "build(JPanel,Object)" : 1 , "getInstance()" : 3 , "getPropertyPanelsData(Class<?>)" : 1}},{ "className" : "org::argouml::notation::providers::uml::OperationNotationUml" , "selectors" : { "OperationNotationUml(Object)" : 1 , "getParameterList(Object)" : 1 , "getProperties(Object,boolean)" : 1 , "getReturnParameters(Object,boolean)" : 1 , "parseError(String,int)" : 11 , "parseOperation(String,Object)" : 3 , "parseOperationFig(Object,Object,String)" : 1 , "setReturnParameter(Object,Object)" : 1 , "toString(Object,boolean,boolean,boolean,boolean)" : 1 , "tokenOpenBrace(MyTokenizer,List<String>)" : 1}},{ "className" : "org::argouml::model::euml::FacadeEUMLImpl" , "selectors" : { "FacadeEUMLImpl(EUMLModelImplementation)" : 1 , "getActivity(Object)::ActivityNode" : 1 , "getAddition(Object)::Include" : 1 , "getAggregation2(Object)" : 2 , "getAggregation2(Object)::Property" : 1 , "getAnnotatedElements(Object)::Comment" : 1 , "getAssociation(Object)::Property" : 1 , "getAssociationEnd(Object,Object)::Association" : 1 , "getAssociationEnds(???)" : 2 , "getAssociationEnds(Object)::Classifier" : 2 , "getAssociations(Object)::Classifier" : 1 , "getBase(Object)::Extend" : 1 , "getBase(Object)::Include" : 1 , "getBaseClasses(Object)::Stereotype" : 1 , "getBehavioralFeature(Object)::Parameter" : 1 , "getBody(Object)::Comment" : 1 , "getBody(Object)::Constraint" : 1 , "getBody(Object)::OpaqueBehavior" : 6 , "getBody(Object)::Operation" : 1 , "getChangeability(Object)::StructuralFeature" : 1 , "getClassifier(Object)::Property" : 1 , "getClassifiers(Object)::InstanceSpecification" : 1 , "getClientDependencies(Object)::NamedElement" : 1 , "getClients(Object)::Dependency" : 1 , "getCollaborations(Object)::Classifier" : 1 , "getCollaborations(Object)::Operation" : 1 , "getConcurrency(Object)::BehavioralFeature" : 1 , "getCondition(Object)::Extend" : 1 , "getConnections(Object)" : 2 , "getConnections(Object)::Association" : 1 , "getConnections(Object)::Connector" : 1 , "getConstraints(Object)::Element" : 1 , "getContainer(Object)::Transition" : 1 , "getContainer(Object)::Vertex" : 1 , "getContext(Object)::StateMachine" : 1 , "getDefaultValue(Object)::Parameter" : 1 , "getDeferrableEvents(Object)::State" : 1 , "getDoActivity(Object)::State" : 1 , "getEffect(Object)::Transition" : 1 , "getElementImports(Object)::Namespace" : 1 , "getElementImports2(Object)::Element" : 1 , "getElementImports2(Object)::ElementImport" : 1 , "getEntry(Object)::State" : 1 , "getEnumeration(Object)::EnumerationLiteral" : 1 , "getEnumerationLiterals(Object)::Enumeration" : 1 , "getExit(Object)::State" : 1 , "getExtendedElements(Object)::Stereotype" : 1 , "getExtenders(Object)::Element" : 1 , "getExtends(Object)::UseCase" : 1 , "getExtension(Object)::Extend" : 1 , "getExtensionPoint(Object,int)::Extend" : 1 , "getExtensionPoints(Object)::Extend" : 1 , "getExtensionPoints(Object)::UseCase" : 1 , "getFeatures(Object)::Classifier" : 1 , "getFeatures(Object)::Property" : 1 , "getGeneral(Object)::Generalization" : 1 , "getGeneralizations(Object)::Classifier" : 1 , "getGuard(Object)::Transition" : 1 , "getImportedElement(Object)::ElementImport" : 1 , "getImportedElements(Object)::Namespace" : 1 , "getImportedPackage(Object)::PackageImport" : 1 , "getImportingNamespace(Object)::ElementImport" : 1 , "getImportingNamespace(Object)::PackageImport" : 1 , "getIncluders(Object)::Element" : 1 , "getIncludes(Object)::UseCase" : 1 , "getIncomings(Object)" : 2 , "getIncomings(Object)::Transition" : 1 , "getIncomings(Object)::Vertex" : 1 , "getInitialValue(Object)::Property" : 1 , "getInnerContainingModel(Object)::Element" : 1 , "getInteractions(Object)::Collaboration" : 1 , "getInternalTransitions(Object)" : 1 , "getInternalTransitions(Object)::Vertex" : 1 , "getKind(Object)::Parameter" : 1 , "getKind(Object)::Pseudostate" : 1 , "getLifeline(Object)::ConnectorEnd" : 2 , "getLower(Object)::MultiplicityElement" : 1 , "getMethods(Object)::BehavioralFeature" : 1 , "getModelElementContainer(???)" : 2 , "getModelElementContainer(Object)::Element" : 1 , "getModelElementContents(Object)::Element" : 1 , "getName(Object)" : 3 , "getName(Object)::DynamicEObjectImpl" : 1 , "getName(Object)::EPackage" : 2 , "getName(Object)::Enumerator" : 1 , "getName(Object)::NamedElement" : 3 , "getNamespace(Object)::DynamicEObjectImpl" : 1 , "getNamespace(Object)::Element" : 1 , "getNextEnd(Object)::Property" : 1 , "getOperations(Object)::Classifier" : 1 , "getOperationsAndReceptions(Object)::Classifier" : 1 , "getOrdering(Object)::MultiplicityElement" : 1 , "getOtherAssociationEnds(Object)::ArrayList" : 1 , "getOtherAssociationEnds(Object)::Property" : 1 , "getOutgoings(Object)" : 2 , "getOutgoings(Object)::Transition" : 1 , "getOutgoings(Object)::Vertex" : 1 , "getOwnedElements(Object)::Namespace" : 1 , "getOwner(Object)::Element" : 1 , "getPackage(Object)::ElementImport" : 1 , "getParametersList(Object)::BehavioralFeature" : 1 , "getPartitions(Object)::Activity" : 1 , "getPowertype(Object)::Generalization" : 1 , "getQualifiers(Object)::Property" : 1 , "getRaisedExceptions(Object)" : 1 , "getRaisedExceptions(Object)::Operation" : 1 , "getReceiver(Object)" : 1 , "getRepresentedClassifier(Object)::Collaboration" : 1 , "getRepresentedOperation(Object)::Collaboration" : 1 , "getSender(Object)" : 1 , "getSignal(Object)::Reception" : 1 , "getSignal(Object)::SignalEvent" : 1 , "getSource(Object)::Transition" : 1 , "getSources(Object)::DirectedRelationship" : 1 , "getSpecializations(Object)::Classifier" : 1 , "getSpecific(Object)::Generalization" : 1 , "getSpecification(Object)::Behavior" : 1 , "getState(Object)" : 1 , "getStateMachine(Object)::Pseudostate" : 1 , "getStateMachine(Object)::Region" : 1 , "getStereotypes(Object)::Element" : 1 , "getSubmachine(Object)::State" : 1 , "getSubvertices(Object)::Region" : 1 , "getSuppliers(Object)::Dependency" : 1 , "getTaggedValue(Object,String)" : 1 , "getTarget(Object)::Transition" : 1 , "getTargets(Object)::DirectedRelationship" : 1 , "getTemplateParameters(Object)::TemplateableElement" : 1 , "getTransition(Object)" : 2 , "getTransitions(Object)" : 2 , "getTransitions(Object)::Region" : 1 , "getTransitions(Object)::StateMachine" : 1 , "getTrigger(Object)::Transition" : 1 , "getTriggers(Object)::Transition" : 1 , "getType(Object)::Connector" : 1 , "getType(Object)::TypedElement" : 1 , "getUMLClassName(Object)" : 5 , "getUUID(Object)::EObject" : 1 , "getUpper(Object)::MultiplicityElement" : 1 , "getUseCase(Object)::ExtensionPoint" : 1 , "getValueSpecification(ValueSpecification)::LiteralBoolean" : 1 , "getValueSpecification(ValueSpecification)::LiteralInteger" : 1 , "getValueSpecification(ValueSpecification)::LiteralString" : 1 , "getVisibility(Object)::NamedElement" : 1 , "getWhen(Object)::TimeEvent" : 1 , "hasReturnParameterDirectionKind(Object)" : 1 , "hasReturnParameterDirectionKind(Object)::Parameter" : 1 , "isAAction(Object)" : 2 , "isAAssociationEnd(Object)" : 2 , "isAAssociationEnd(Object)::Property" : 1 , "isAAttribute(Object)::Property" : 1 , "isACompositeState(Object)::State" : 1 , "isAEvent(Object)" : 3 , "isAExtend(Object)" : 1 , "isAGuard(Object)" : 2 , "isAInclude(Object)" : 1 , "isALink(Object)::InstanceSpecification" : 1 , "isANamedElement(Object)" : 1 , "isANaryAssociation(Object)::Association" : 1 , "isARegion(Object)" : 1 , "isAStateMachine(Object)" : 2 , "isAStateVertex(Object)" : 2 , "isASubmachineState(Object)::State" : 1 , "isATransition(Object)" : 3 , "isATrigger(Object)" : 1 , "isAUseCase(Object)" : 2 , "isAVertex(Object)" : 2 , "isAbstract(Object)::BehavioralFeature" : 1 , "isAbstract(Object)::Classifier" : 1 , "isActive(Object)::org" : 1 , "isAggregate(Object)::Property" : 1 , "isAsynchronous(Object)::CallAction" : 1 , "isComposite(Object)::Property" : 1 , "isInitialized(Object)::Property" : 1 , "isLeaf(Object)::RedefinableElement" : 1 , "isNavigable(Object)::Property" : 1 , "isOrthogonal(Object)::State" : 1 , "isQuery(Object)::Operation" : 1 , "isReadOnly(Object)" : 1 , "isReadOnly(Object)::StructuralFeature" : 1 , "isStatic(Object)::Feature" : 1 , "isStereotype(Object,String)::Element" : 1 , "isSynch(Object)::CallAction" : 1 , "isTop(Object)::State" : 1}},{ "className" : "org::argouml::core::propertypanels::ui::UMLComboBoxModel" , "selectors" : { "UMLComboBoxModel(Object,String,boolean)" : 22 , "addAll(Collection)" : 4 , "addElement(Object)" : 9 , "addOtherModelEventListeners(Object)" : 4 , "buildMinimalModelList()" : 2 , "buildModelList()" : 1 , "buildModelListTimed()" : 2 , "contains(Object)" : 5 , "fireContentsChanged(Object,int,int)" : 1 , "fireIntervalAdded(Object,int,int)" : 4 , "fireIntervalRemoved(Object,int,int)" : 3 , "getAction()" : 5 , "getActions()" : 1 , "getChangedElement(PropertyChangeEvent)" : 12 , "getElementAt(int)" : 3 , "getIndexOf(Object)" : 1 , "getSelectedItem()" : 4 , "getSelectedModelElement()" : 3 , "getSize()" : 5 , "getTarget()" : 87 , "isLazy()" : 2 , "isValidElement(Object)" : 2 , "isValidEvent(PropertyChangeEvent)" : 2 , "modelChanged(UmlChangeEvent)" : 1 , "propertyChange(PropertyChangeEvent)" : 1 , "removeAll(Collection)" : 2 , "removeAllElements()" : 9 , "removeElement(Object)" : 4 , "removeModelEventListener()" : 1 , "removeOtherModelEventListeners(Object)" : 3 , "setElements(Collection)" : 25 , "setFilter(String)" : 4 , "setSelectedItem(Object)" : 12}},{ "className" : "org::argouml::model::CollaborationsHelper" , "selectors" : { "addBase(Object,Object)" : 4 , "addConstrainingElement(Object,Object)" : 1 , "addInstance(Object,Object)" : 1 , "addMessage(Object,Object)" : 2 , "addPredecessor(Object,Object)" : 3 , "addSuccessor(Object,Object)" : 2 , "allAvailableContents(Object)" : 2 , "allAvailableFeatures(Object)" : 2 , "getAllClassifierRoles(Object)" : 1 , "getAllPossibleActivators(Object)" : 2 , "getAllPossibleAssociationRoles(Object)" : 1 , "getAllPossibleBases(Object)" : 5 , "getAllPossiblePredecessors(Object)" : 2 , "getAssociationRole(Object,Object)" : 2 , "getClassifierRoles(Object)" : 1 , "hasAsActivator(Object,Object)" : 1 , "isAddingCollaborationAllowed(Object)" : 1 , "removeBase(Object,Object)" : 3 , "removeConstrainingElement(Object,Object)" : 1 , "removeInteraction(Object,Object)" : 1 , "removeMessage(Object,Object)" : 1 , "removePredecessor(Object,Object)" : 3 , "removeSuccessor(Object,Object)" : 3 , "setAction(Object,Object)" : 6 , "setActivator(Object,Object)" : 5 , "setBase(Object,Object)" : 3 , "setBases(Object,Collection)" : 2 , "setContext(Object,Object)" : 1 , "setMessageSort(Object,Object)" : 1 , "setPredecessors(Object,Collection)" : 3 , "setRepresentedClassifier(Object,Object)" : 2 , "setRepresentedOperation(Object,Object)" : 2 , "setSender(Object,Object)" : 4 , "setSuccessors(Object,Collection)" : 2}},{ "className" : "org::argouml::uml::diagram::ui::FigCompartmentBox" , "selectors" : { "FigCompartmentBox(Object,Rectangle,DiagramSettings)" : 3 , "addCompartment(FigCompartment)" : 1 , "addCompartmentBoxSurroundings(Dimension)" : 1 , "calculateCompartmentBoxDimensions(int,int,int,int)" : 1 , "createBigPortFig()::FigRect" : 1 , "createCompartments()" : 4 , "getCompartment(Object)" : 28 , "getCompartments()" : 3 , "getFillColor()" : 1 , "getLineWidth()" : 11 , "getMinimumSize()" : 3 , "getVisibleCompartmentCount()" : 1 , "initialize()" : 1 , "isCompartmentVisible(Object)" : 8 , "mouseClicked(MouseEvent)::SelectionButtons" : 1 , "setCompartmentBounds(FigCompartment,Rectangle,Rectangle)" : 1 , "setCompartmentVisible(FigCompartment,boolean)" : 7 , "setCompartmentVisible(FigCompartment,boolean)::Fig" : 2 , "setFillColor(Color)" : 7 , "setFilled(boolean)" : 5 , "setLineColor(???)" : 1 , "setLineWidth(int)" : 6 , "showCompartment(Object,boolean)" : 16 , "translate(int,int)" : 1 , "translate(int,int)::SelectionButtons" : 1}},{ "className" : "org::jgraph::graph::CellMapper" , "selectors" : { "getMapping(Object,boolean)" : 7}},{ "className" : "com::jgraph::algebra::JGraphUnionFind::Node" , "selectors" : { "Node()" : 1 , "getParent()" : 6 , "getSize()" : 6 , "setParent(Node)" : 3 , "setSize(int)" : 2}},{ "className" : "com::jgraph::algebra::JGraphUnionFind" , "selectors" : { "JGraphUnionFind(Object[])" : 1 , "find(Node)" : 8 , "getNode(Object)" : 6 , "union(Node,Node)" : 2}},{ "className" : "com::jgraph::example::adapter::JGraphSQLQueryPane" , "selectors" : { "JGraphSQLQueryPane(JGraphAdapterExample,JGraph)" : 1 , "println(String)" : 5}},{ "className" : "org::jgraph::graph::DefaultGraphSelectionModel::CellPlaceHolder" , "selectors" : { "CellPlaceHolder(Object,boolean)" : 8}},{ "className" : "com::jgraph::example::MyPortView::MyPortRenderer" , "selectors" : { "MyPortRenderer()" : 1}},{ "className" : "com::jgraph::layout::hierarchical::JGraphMedianHybridCrossingReduction::MedianCellSorter" , "selectors" : { "MedianCellSorter()" : 1}},{ "className" : "com::jgraph::layout::hierarchical::JGraphHierarchicalLayoutStep" , "selectors" : { "run(JGraphFacade,JGraphHierarchyModel)" : 4}},{ "className" : "com::jgraph::example::fastgraph::FastGraph" , "selectors" : { "FastGraph()" : 1 , "createCellAttributes(Point2D)" : 2 , "createEdgeAttributes()" : 2}},{ "className" : "org::jgraph::example::GraphEd::EventRedirector" , "selectors" : { "EventRedirector(Action,ImageIcon)" : 6}},{ "className" : "org::jgraph::plaf::basic::BasicGraphUI::GraphIncrementAction" , "selectors" : { "GraphIncrementAction(int,String)" : 10}},{ "className" : "org::jgraph::plaf::basic::BasicGraphUI::MouseInputHandler" , "selectors" : { "MouseInputHandler(Component,Component,MouseEvent)" : 2 , "removeFromSource()" : 4}},{ "className" : "java::awt::event::InputEvent" , "selectors" : { "consume()" : 426 , "getModifiers()" : 256 , "getModifiersEx()" : 36 , "getWhen()" : 32 , "isAltDown()" : 57 , "isAltGraphDown()" : 2 , "isConsumed()" : 81 , "isControlDown()" : 75 , "isMetaDown()" : 25 , "isShiftDown()" : 76}},{ "className" : "org::jgraph::plaf::basic::BasicGraphUI::CellEditorHandler" , "selectors" : { "CellEditorHandler()" : 1}},{ "className" : "org::jgraph::graph::Edge::Routing" , "selectors" : { "getPreferredLineStyle(EdgeView)" : 1 , "route(GraphLayoutCache,EdgeView)" : 2}},{ "className" : "com::jgraph::layout::graph::JGraphSpringLayout" , "selectors" : { "JGraphSpringLayout(int)" : 1 , "attract()" : 1 , "reposition(JGraphFacade)" : 1 , "repulse()" : 1 , "setMaxIterations(int)" : 1}},{ "className" : "org::jgraph::graph::VertexView" , "selectors" : { "VertexView()" : 7 , "VertexView(Object)" : 11 , "getBounds()" : 15 , "getRenderer()" : 2 , "update(GraphLayoutCache)" : 2}},{ "className" : "com::jgraph::example::groupeditor::EditableGroupDemo" , "selectors" : { "EditableGroupDemo()" : 1}},{ "className" : "org::jgraph::graph::ConnectionSet::Connection" , "selectors" : { "Connection(Object,Object,boolean)" : 2 , "getEdge()" : 7 , "getPort()" : 8 , "isSource()" : 8}},{ "className" : "com::jgraph::layout::tree::JGraphRadialTreeLayout::TreeNode" , "selectors" : { "TreeNode(Object)" : 1 , "getCell()" : 1 , "getChildren()" : 1 , "getDepth()" : 2 , "hasChildren()" : 1 , "leftLimit()" : 1 , "normalize(double)" : 2 , "rightLimit()" : 1}},{ "className" : "com::jgraph::algebra::JGraphFibonacciHeap::Node" , "selectors" : { "Node(Object,double)" : 1 , "getKey()" : 4 , "getUserObject()" : 2}},{ "className" : "org::jgraph::graph::DefaultGraphCellEditor::EditorContainer" , "selectors" : { "EditorContainer()" : 1 , "doLayout()" : 2 , "getPreferredSize()" : 2}},{ "className" : "javax::swing::JApplet" , "selectors" : { "createRootPane()" : 1 , "getContentPane()" : 97 , "getRootPane()" : 9 , "setJMenuBar(JMenuBar)" : 7 , "setLayout(LayoutManager)" : 1}},{ "className" : "javax::swing::undo::CannotUndoException" , "selectors" : { "CannotUndoException()" : 4}},{ "className" : "com::jgraph::layout::hierarchical::model::JGraphHierarchyRank" , "selectors" : { "JGraphHierarchyRank()" : 2}},{ "className" : "com::jgraph::io::svg::SVGVertexRenderer" , "selectors" : { "SVGVertexRenderer()" : 1 , "getEllipsePerimeterPoint(VertexView,Point2D,Point2D)" : 1}},{ "className" : "com::jgraph::example::fastgraph::FastCircleView" , "selectors" : { "FastCircleView(Object)" : 1}},{ "className" : "org::jgraph::example::GraphEd::MyGraph" , "selectors" : { "MyGraph(GraphModel)" : 5 , "MyGraph(GraphModel,GraphLayoutCache)" : 4}},{ "className" : "com::jgraph::example::Main" , "selectors" : { "createButton(Class,String[])" : 13 , "run(Class,String[])" : 1}},{ "className" : "org::jgraph::example::GraphEd::StatusBarGraphListener" , "selectors" : { "StatusBarGraphListener()" : 1 , "updateStatusBar()" : 1}},{ "className" : "com::jgraph::layout::tree::JGraphCompactTreeLayout::PolyLine" , "selectors" : { "PolyLine(double,double,PolyLine)" : 9}},{ "className" : "org::jgraph::example::IconExample::InvisiblePortView" , "selectors" : { "InvisiblePortView(Object)" : 1 , "getBounds()" : 2}},{ "className" : "javax::swing::CellEditor" , "selectors" : { "addCellEditorListener(CellEditorListener)" : 9 , "cancelCellEditing()" : 21 , "getCellEditorValue()" : 8 , "isCellEditable(EventObject)" : 5 , "removeCellEditorListener(CellEditorListener)" : 10 , "shouldSelectCell(EventObject)" : 5 , "stopCellEditing()" : 42}},{ "className" : "org::jgraph::example::JGraphIconView::IconDisplay" , "selectors" : { "IconDisplay()" : 1 , "getMinimumSize()" : 1 , "getPreferredSize()" : 2}},{ "className" : "com::jgraph::layout::tree::JGraphRadialTreeLayout" , "selectors" : { "JGraphRadialTreeLayout()" : 2 , "getTreeNode(Object)" : 3 , "layoutTree0(JGraphFacade,TreeNode)" : 1 , "layoutTreeN(JGraphFacade,int,List)" : 2}},{ "className" : "com::jgraph::layout::tree::JGraphAbstractTreeLayout::TreeNode" , "selectors" : { "TreeNode(Object)" : 2 , "routeEdges(Point2D)" : 1}},{ "className" : "org::jgraph::graph::CellHandle" , "selectors" : { "mouseDragged(MouseEvent)" : 4 , "mouseMoved(MouseEvent)" : 2 , "mousePressed(MouseEvent)" : 4 , "mouseReleased(MouseEvent)" : 3 , "paint(Graphics)" : 3}},{ "className" : "com::jgraph::example::fastgraph::FastVertexView" , "selectors" : { "FastVertexView()" : 1 , "FastVertexView(Object)" : 2}},{ "className" : "com::jgraph::layout::JGraphLayoutProgress" , "selectors" : { "JGraphLayoutProgress()" : 5 , "JGraphLayoutProgress(int)" : 1 , "addPropertyChangeListener(PropertyChangeListener)" : 2 , "isStopped()" : 12 , "removePropertyChangeListener(PropertyChangeListener)" : 2 , "reset(int)" : 6 , "setMaximum(int)" : 1 , "setProgress(int)" : 9 , "setStopped(boolean)" : 3}},{ "className" : "com::jgraph::example::panelexample::PortLabelCell" , "selectors" : { "PortLabelCell(Object)" : 2 , "addLeftPort(int,Port,Map,ParentMap)" : 1 , "addRightPort(int,Port,Map,ParentMap)" : 1}},{ "className" : "org::jgraph::graph::ParentMap::Entry" , "selectors" : { "Entry(Object,Object)" : 1 , "getChild()" : 7 , "getParent()" : 7}},{ "className" : "org::jgraph::example::GraphEd::EdStatusBar" , "selectors" : { "EdStatusBar()" : 1}},{ "className" : "com::jgraph::example::fastgraph::FastGraphFactory::FastFactoryConfigDialog" , "selectors" : { "FastFactoryConfigDialog()" : 1}},{ "className" : "org::jgraph::graph::PortRenderer" , "selectors" : { "PortRenderer()" : 2 , "paint(Graphics)" : 1}},{ "className" : "com::jgraph::layout::demo::JGraphLayoutProgressMonitor" , "selectors" : { "JGraphLayoutProgressMonitor(Component,JGraphLayoutProgress,String)" : 1}},{ "className" : "org::jgraph::graph::DefaultEdge" , "selectors" : { "DefaultEdge()" : 9 , "DefaultEdge(Object)" : 10 , "DefaultEdge(Object,AttributeMap)" : 3 , "setSource(Object)" : 6 , "setTarget(Object)" : 6}},{ "className" : "com::jgraph::example::panelexample::BusinessObjectEditor2::RealCellEditor" , "selectors" : { "RealCellEditor()" : 1}},{ "className" : "com::jgraph::layout::JGraphLayout" , "selectors" : { "run(JGraphFacade)" : 7}},{ "className" : "com::jgraph::example::fastgraph::FastEdgeView" , "selectors" : { "FastEdgeView(Object)" : 1 , "getBounds()" : 1 , "getFastEdgeRenderer()" : 2 , "getRenderer()" : 1 , "invalidateFastEdge()" : 1 , "update(GraphLayoutCache)" : 1}},{ "className" : "org::jgraph::graph::DefaultPort" , "selectors" : { "DefaultPort()" : 6 , "DefaultPort(Object)" : 11 , "DefaultPort(Object,Port)" : 2}},{ "className" : "org::jgraph::example::LiveJGraphDemo::AddChildInternalFrameAction" , "selectors" : { "AddChildInternalFrameAction()" : 1}},{ "className" : "com::jgraph::components::labels::RichTextEditor" , "selectors" : { "RichTextEditor()" : 1}},{ "className" : "com::jgraph::example::adapter::JGraphAdapterExample" , "selectors" : { "JGraphAdapterExample(JGraphAdapterBackend)" : 1 , "createAdapterEdge()" : 2 , "createAdapterVertex()" : 3 , "createCellAttributes(Point2D)" : 3 , "createEdgeAttributes()" : 1 , "createToolBar()" : 1 , "println(String)" : 3}},{ "className" : "com::jgraph::example::fastgraph::FastGraph::FastGraphMenuBar" , "selectors" : { "FastGraphMenuBar(FastGraph)" : 1}},{ "className" : "com::jgraph::layout::tree::OrganizationalChart" , "selectors" : { "layout(StandardTreeNode)" : 2}},{ "className" : "com::jgraph::io::svg::SVGUtils" , "selectors" : { "getHexEncoding(Color)" : 10}},{ "className" : "com::jgraph::example::mycellview::MyCellView" , "selectors" : { "createVertex(double,double,double,double,Color,boolean,DefaultGraphCell,String)" : 4}},{ "className" : "com::jgraph::example::mycellview::JGraphEllipseView::JGraphEllipseRenderer" , "selectors" : { "JGraphEllipseRenderer()" : 1}},{ "className" : "org::jgraph::example::JGraphIconView::MultiLinedEditor::RealCellEditor" , "selectors" : { "RealCellEditor()" : 1 , "stopCellEditing()" : 1}},{ "className" : "org::jgraph::graph::DefaultGraphCellEditor::DefaultTextField" , "selectors" : { "DefaultTextField(Border)" : 1}},{ "className" : "javax::swing::tree::TreePath" , "selectors" : { "TreePath(Object)" : 14 , "TreePath(Object[])" : 156 , "equals(Object)" : 8 , "getLastPathComponent()" : 283 , "getParentPath()" : 51 , "getPath()" : 17 , "getPathComponent(int)" : 29 , "getPathCount()" : 40 , "isDescendant(TreePath)" : 3 , "javax" : 5 , "pathByAddingChild(Object)" : 18 , "toString()" : 1}},{ "className" : "com::jgraph::util::JGraphPrintingScrollPane" , "selectors" : { "getGraph()" : 8 , "isPageVisible()" : 4 , "updateMinimumSize()" : 2}},{ "className" : "com::jgraph::example::EditorGraph::EditorGraphUI" , "selectors" : { "EditorGraphUI()" : 1 , "createEditDialog(Object)" : 1}},{ "className" : "com::jgraph::navigation::GraphNavigator::NavigatorPane" , "selectors" : { "NavigatorPane(JGraph)" : 1}},{ "className" : "com::jgraph::layout::hierarchical::model::JGraphAbstractHierarchyCell" , "selectors" : { "getGeneralPurposeVariable(int)" : 21 , "getNextLayerConnectedCells(int)" : 6 , "getPreviousLayerConnectedCells(int)" : 7 , "getX(int)" : 1 , "isEdge()" : 8 , "isVertex()" : 8 , "setGeneralPurposeVariable(int,int)" : 16 , "setX(int,double)" : 3 , "setY(int,double)" : 1}},{ "className" : "com::jgraph::example::mycellmodeleditor::BusinessObjectEditor" , "selectors" : { "BusinessObjectEditor()" : 1}},{ "className" : "org::jgraph::graph::DefaultGraphModel::EmptyIterator" , "selectors" : { "EmptyIterator()" : 2}},{ "className" : "org::jgraph::graph::GraphLayoutCache::GraphLayoutCacheEdit" , "selectors" : { "GraphLayoutCacheEdit(Object[],Map,Object[],Object[])" : 4 , "execute()" : 6}},{ "className" : "org::jgraph::graph::DefaultGraphCell" , "selectors" : { "DefaultGraphCell()" : 2 , "DefaultGraphCell(Object)" : 29 , "DefaultGraphCell(Object,AttributeMap)" : 4 , "DefaultGraphCell(Object,AttributeMap,MutableTreeNode[])" : 1 , "addPort()" : 10 , "addPort(Point2D)" : 3 , "addPort(Point2D,Object)" : 8 , "clone()" : 3 , "getAttributes()" : 54 , "getChildren()" : 1 , "setAttributes(AttributeMap)" : 1}},{ "className" : "com::jgraph::components::labels::RichTextValue" , "selectors" : { "RichTextValue(Document)" : 2 , "RichTextValue(String)" : 1 , "createDefaultDocument()" : 1 , "createDefaultDocument(String)" : 2 , "getPlainText(RichTextValue)" : 1 , "getRichText()" : 1 , "getRichText(Document)" : 1 , "insertInto(Document)" : 3 , "setRichText(String)" : 1}},{ "className" : "com::jgraph::io::svg::SVGGraphConstants" , "selectors" : { "getShape(Map)" : 3 , "isShadow(Map)" : 1}},{ "className" : "org::jgraph::example::JGraphAbstractIconAnimator" , "selectors" : { "getRepaintRect(Component,Object)" : 1 , "repaint(Component,Object)" : 1}},{ "className" : "com::jgraph::layout::JGraphFacade::CellVisitor" , "selectors" : { "visit(Object,Object,Object,int,int)" : 7}},{ "className" : "org::jgraph::example::GraphEd::MyModel" , "selectors" : { "MyModel()" : 3}},{ "className" : "org::jgraph::example::HelloWorld" , "selectors" : { "createVertex(String,double,double,double,double,Color,boolean)" : 2}},{ "className" : "com::jgraph::example::GraphSelectionDemo::GraphModelTreeNode" , "selectors" : { "GraphModelTreeNode(GraphModel)" : 2 , "getChildAt(int)" : 1}},{ "className" : "com::jgraph::algebra::cost::JGraphCostFunction" , "selectors" : { "getCost(Object)" : 6}},{ "className" : "com::jgraph::example::GraphEdX" , "selectors" : { "GraphEdX()" : 1 , "configureEncoder(XMLEncoder)" : 2 , "createCellAttributes(Point2D)" : 7 , "createEdgeAttributes()" : 7 , "createGraph()" : 2 , "createGroupCell(Rectangle2D)" : 1 , "createToolBar()" : 2 , "deserializeGraph()" : 2 , "init()" : 4 , "initFileChooser()" : 5 , "installListeners(JGraph)" : 6 , "makeCellViewFieldsTransient(Class)" : 3 , "openFile()" : 2 , "saveFile()" : 2 , "serializeGraph()" : 2 , "uninstallListeners(JGraph)" : 6 , "valueChanged(GraphSelectionEvent)" : 3}},{ "className" : "com::jgraph::example::GraphEdMV" , "selectors" : { "GraphEdMV()" : 2 , "updateAllHistoryButtons()" : 1}},{ "className" : "org::jgraph::plaf::basic::BasicGraphUI::GraphSelectAllAction" , "selectors" : { "GraphSelectAllAction(String,boolean)" : 2}},{ "className" : "org::jgraph::graph::DefaultGraphCellEditor" , "selectors" : { "DefaultGraphCellEditor()" : 5 , "DefaultGraphCellEditor(GraphCellEditor)" : 1 , "canEditImmediately(EventObject)" : 1 , "createContainer()" : 1 , "createGraphCellEditor()" : 1 , "determineOffset(JGraph,Object,boolean)" : 1 , "getBorderSelectionColor()" : 1 , "getGraphCellEditorComponent(JGraph,Object,boolean)" : 2 , "inHitRegion(double,double)" : 2 , "prepareForEditing()" : 1 , "setBorderSelectionColor(Color)" : 1 , "setFont(Font)" : 1 , "setGraph(JGraph)" : 1}},{ "className" : "org::jgraph::graph::VertexView::SizeHandle" , "selectors" : { "SizeHandle(VertexView,GraphContext)" : 1 , "computeBounds(MouseEvent)" : 2 , "initOffscreen()" : 1 , "invalidate()" : 2 , "isConstrainedSizeEvent(MouseEvent)" : 1 , "overlay(Graphics)" : 3}},{ "className" : "com::jgraph::example::panelexample::BusinessObjectWrapper2" , "selectors" : { "BusinessObjectWrapper2()" : 3 , "getLabel()" : 1 , "getValue()" : 4 , "setLabel(String)" : 5 , "setValue(DefaultMutableTreeNode)" : 4 , "toString()" : 1}},{ "className" : "org::jgraph::graph::AbstractCellView" , "selectors" : { "AbstractCellView()" : 3 , "AbstractCellView(Object)" : 3 , "childUpdated()" : 1 , "createAttributeMap()" : 1 , "getAllAttributes()" : 63 , "getAttributes()" : 17 , "getBounds()" : 4 , "getBounds(CellView[])" : 12 , "getCell()" : 30 , "getCellAttributes(GraphModel)" : 1 , "getCenterPoint(CellView)" : 22 , "getChildViews()" : 1 , "getDescendantViews(CellView[])" : 5 , "getEditor()" : 1 , "getParentView()" : 1 , "getPerimeterPoint(EdgeView,Point2D,Point2D)" : 1 , "getRenderer()" : 1 , "getRendererComponent(JGraph,boolean,boolean,boolean)" : 1 , "includeInGroupBounds(CellView)" : 1 , "intersects(JGraph,Rectangle2D)" : 2 , "isLeaf()" : 13 , "mergeAttributes()" : 1 , "refresh(GraphLayoutCache,CellMapper,boolean)" : 1 , "removeFromParent()" : 1 , "scale(double,double,Point2D)" : 2 , "setBounds(Rectangle2D)" : 2 , "setCell(Object)" : 2 , "translate(double,double)" : 4 , "update(GraphLayoutCache)" : 5 , "updateGroupBounds()" : 1}},{ "className" : "org::jgraph::graph::GraphSelectionModel" , "selectors" : { "addGraphSelectionListener(GraphSelectionListener)" : 9 , "addSelectionCell(Object)" : 1 , "addSelectionCells(Object[])" : 1 , "clearSelection()" : 1 , "getSelectables()" : 1 , "getSelectionCell()" : 1 , "getSelectionCells()" : 2 , "getSelectionCount()" : 1 , "isCellSelected(Object)" : 1 , "isChildrenSelected(Object)" : 3 , "isSelectionEmpty()" : 1 , "removeGraphSelectionListener(GraphSelectionListener)" : 5 , "removeSelectionCell(Object)" : 1 , "removeSelectionCells(Object[])" : 1 , "setSelectionCell(Object)" : 1 , "setSelectionCells(Object[])" : 1}},{ "className" : "com::jgraph::layout::JGraphExampleGraph" , "selectors" : { "JGraphExampleGraph(GraphModel)" : 1 , "JGraphExampleGraph(GraphModel,GraphLayoutCache)" : 1 , "initMorphing(Map,Set)" : 1 , "morph(Map,Set)" : 1 , "morphCell(Object,int)" : 1 , "restore()" : 1 , "setCellBounds(Object,Rectangle2D)" : 3}},{ "className" : "com::jgraph::example::fastgraph::FastGraphFactory" , "selectors" : { "FastGraphFactory()" : 1}},{ "className" : "com::jgraph::example::fastgraph::FastGraph::FastMarqueeHandler" , "selectors" : { "FastMarqueeHandler()" : 1}},{ "className" : "org::jgraph::example::JGraphIconView::IconRenderer" , "selectors" : { "IconRenderer()" : 1 , "getIconDisplay()" : 2 , "isPreview()" : 1}},{ "className" : "com::jgraph::components::labels::RichTextGraphModel" , "selectors" : { "RichTextGraphModel()" : 1}},{ "className" : "com::jgraph::components::labels::CellConstants" , "selectors" : { "getVertexShape(Map)" : 3 , "isStretchImage(Map)" : 1}},{ "className" : "com::jgraph::layout::tree::JGraphAbstractTreeLayout" , "selectors" : { "getLevelDistance()" : 1 , "run(JGraphFacade)" : 2 , "setLevelDistance(double)" : 1}},{ "className" : "com::jgraph::layout::JGraphExampleLayoutCache" , "selectors" : { "<Initializer>()::PropertySheetPanel" : 1 , "JGraphExampleLayoutCache(JGraphExampleGraph)" : 1 , "configureLayout()" : 1 , "edit(Map,ConnectionSet,ParentMap,UndoableEdit[])" : 1 , "layout(Map)" : 3 , "processResult(JGraphFacade,Map)" : 2 , "readObject(ObjectInputStream)::PropertySheetPanel" : 1}},{ "className" : "com::jgraph::example::adapter::JGraphBusinessObject" , "selectors" : { "JGraphBusinessObject()" : 1 , "JGraphBusinessObject(Object)" : 2 , "clone()" : 2 , "getProperties()" : 6 , "getProperty(Object)" : 1 , "getValue()" : 2 , "getValueKey()" : 1 , "putProperty(Object,Object)" : 3 , "setProperties(Map)" : 2 , "setValue(Object)" : 2 , "setValueKey(String)" : 1}},{ "className" : "org::jgraph::JGraph" , "selectors" : { "JGraph()" : 4 , "JGraph(GraphModel)" : 8 , "JGraph(GraphModel,GraphLayoutCache)" : 4 , "JGraph(GraphModel,GraphLayoutCache,BasicMarqueeHandler)" : 2 , "addGraphSelectionListener(GraphSelectionListener)" : 2 , "addOffscreenDirty(Rectangle2D)" : 9 , "addSampleData(GraphModel)" : 2 , "addSelectionCell(Object)" : 2 , "addSelectionCells(Object[])" : 1 , "clearOffscreen()" : 9 , "clearOffscreenDirty()" : 2 , "clearSelection()" : 4 , "cloneCells(Object[])" : 3 , "convertValueToString(Object)" : 13 , "createBounds(AttributeMap,int,int,Color)" : 7 , "createBufferedImage(int,int)" : 2 , "drawImage(int,int,int,int,int,int,int,int)" : 2 , "fireValueChanged(GraphSelectionEvent)" : 1 , "fromScreen(Point2D)" : 12 , "fromScreen(Rectangle2D)" : 7 , "getAttributes(Object)" : 2 , "getBackgroundComponent()" : 1 , "getBackgroundImage()" : 5 , "getCellBounds(Object)" : 17 , "getCellBounds(Object[])" : 13 , "getCenterPoint()" : 1 , "getClipRectangle(GraphLayoutCacheChange)" : 3 , "getDefaultPortForCell(Object)" : 1 , "getDescendants(Object[])" : 11 , "getEdgeLabelsMovable()" : 2 , "getEditClickCount()" : 1 , "getEditingCell()" : 7 , "getFirstCellForLocation(double,double)" : 2 , "getGraphLayoutCache()" : 127 , "getGridColor()" : 3 , "getGridMode()" : 1 , "getGridSize()" : 5 , "getHandleColor()" : 5 , "getHandleSize()" : 10 , "getHighlightColor()" : 3 , "getInvokesStopCellEditing()" : 1 , "getLockedHandleColor()" : 5 , "getMarqueeColor()" : 4 , "getMarqueeHandler()" : 7 , "getMinimumMove()" : 1 , "getModel()" : 99 , "getNextCellForLocation(Object,double,double)" : 1 , "getNextSelectableViewAt(CellView,double,double)" : 1 , "getNextViewAt(CellView,double,double)" : 1 , "getNextViewAt(CellView,double,double,boolean)" : 5 , "getNextViewAt(CellView[],CellView,double,double)" : 1 , "getNextViewAt(CellView[],CellView,double,double,boolean)" : 2 , "getOffgraphics()" : 5 , "getOffscreen()" : 2 , "getOffscreenDirty()" : 1 , "getPortForLocation(double,double)" : 1 , "getPortViewAt(double,double)" : 2 , "getPortViewAt(double,double,int)" : 2 , "getRoots()" : 11 , "getScale()" : 29 , "getSelectionCell()" : 1 , "getSelectionCells()" : 18 , "getSelectionCount()" : 2 , "getSelectionModel()" : 23 , "getTolerance()" : 2 , "getUI()" : 25 , "getUIClassID()" : 1 , "getViewPortBounds()" : 2 , "graphDidChange()" : 2 , "isAntiAliased()" : 1 , "isAutoResizeGraph()" : 1 , "isBackgroundScaled()" : 1 , "isBendable()" : 1 , "isCellEditable(Object)" : 3 , "isCellSelected(Object)" : 11 , "isCloneable()" : 5 , "isConnectable()" : 1 , "isDisconnectOnMove()" : 1 , "isDisconnectable()" : 1 , "isDragEnabled()" : 2 , "isEditable()" : 1 , "isEditing()" : 3 , "isGridVisible()" : 1 , "isGroupsEditable()" : 1 , "isJumpToDefaultPort()" : 1 , "isMoveBelowZero()" : 5 , "isMoveBeyondGraphBounds()" : 1 , "isMoveIntoGroups()" : 2 , "isMoveOutOfGroups()" : 2 , "isMoveable()" : 7 , "isPortsOnTop()" : 1 , "isPortsScaled()" : 6 , "isPortsVisible()" : 8 , "isPreviewInvalidNullPorts()" : 2 , "isSelectionEmpty()" : 11 , "isSelectionEnabled()" : 4 , "isSizeable()" : 2 , "isXorEnabled()" : 34 , "order(Object[])" : 4 , "removeGraphSelectionListener(GraphSelectionListener)" : 1 , "removeSelectionCell(Object)" : 1 , "scrollCellToVisible(Object)" : 4 , "scrollPointToVisible(Point2D)" : 2 , "setAntiAliased(boolean)" : 3 , "setBackground(Color)" : 2 , "setCloneable(boolean)" : 6 , "setEditClickCount(int)" : 1 , "setGraphLayoutCache(GraphLayoutCache)" : 5 , "setGridColor(Color)" : 1 , "setGridEnabled(boolean)" : 3 , "setGridSize(double)" : 2 , "setHandleColor(Color)" : 1 , "setInvokesStopCellEditing(boolean)" : 6 , "setJumpToDefaultPort(boolean)" : 7 , "setLockedHandleColor(Color)" : 1 , "setMarqueeColor(Color)" : 2 , "setMarqueeHandler(BasicMarqueeHandler)" : 11 , "setModel(GraphModel)" : 4 , "setOpaque(boolean)" : 2 , "setPortsVisible(boolean)" : 4 , "setScale(double)" : 12 , "setScale(double,Point2D)" : 1 , "setSelectionCell(Object)" : 7 , "setSelectionCells(Object[])" : 6 , "setTolerance(int)" : 2 , "setUI(GraphUI)" : 4 , "setVolatileOffscreen(boolean)" : 1 , "setXorEnabled(boolean)" : 1 , "setupOffScreen(int,int,int,int,Rectangle2D)" : 3 , "snap(Point2D)" : 14 , "snap(Rectangle2D)" : 3 , "startEditingAtCell(Object)" : 4 , "toScreen(Point2D)" : 18 , "toScreen(Rectangle2D)" : 23 , "updateAutoSize(CellView)" : 3 , "updateUI()" : 1}},{ "className" : "javax::swing::undo::CannotRedoException" , "selectors" : { "CannotRedoException()" : 6}},{ "className" : "com::jgraph::layout::graph::JGraphSimpleLayout" , "selectors" : { "JGraphSimpleLayout(int)" : 3 , "JGraphSimpleLayout(int,int,int)" : 3}},{ "className" : "javax::swing::DefaultCellEditor::EditorDelegate" , "selectors" : { "setValue(Object)" : 4}},{ "className" : "org::jgraph::graph::ExecutableChange" , "selectors" : { "execute()" : 2}},{ "className" : "org::jgraph::plaf::basic::BasicGraphUI::GraphEditAction" , "selectors" : { "GraphEditAction(String)" : 1 , "isEnabled()" : 1}},{ "className" : "com::jgraph::layout::svg::SVGMenuBar" , "selectors" : { "SVGMenuBar(SVGExample,JGraphGraphFactory)" : 1}},{ "className" : "com::jgraph::example::groupeditor::EditableGroupRenderer" , "selectors" : { "EditableGroupRenderer()" : 1 , "isEditAsked(Point2D,Rectangle2D)" : 1}},{ "className" : "javax::swing::tree::TreeNode" , "selectors" : { "children()" : 11 , "getAllowsChildren()" : 4 , "getChildAt(int)" : 28 , "getChildCount()" : 43 , "getIndex(TreeNode)" : 29 , "getParent()" : 42 , "isLeaf()" : 10}},{ "className" : "java::awt::geom::Point2D" , "selectors" : { "clone()" : 58 , "distance(Point2D)" : 65 , "distance(double,double)" : 6 , "distance(double,double,double,double)" : 5 , "distanceSq(Point2D)" : 11 , "distanceSq(double,double)" : 3 , "equals(Object)" : 40 , "getX()" : 1387 , "getY()" : 1348 , "hashCode()" : 4 , "setLocation(Point2D)" : 24 , "setLocation(double,double)" : 202}},{ "className" : "com::jgraph::components::labels::RichTextEditor::RealCellEditor" , "selectors" : { "RealCellEditor()" : 1 , "getGraphCellEditorComponent(JGraph,Object,boolean)::anonymous(DocumentListener)" : 3}},{ "className" : "javax::swing::JCheckBoxMenuItem" , "selectors" : { "JCheckBoxMenuItem()" : 6 , "JCheckBoxMenuItem(Action)" : 28 , "JCheckBoxMenuItem(Icon)" : 8 , "JCheckBoxMenuItem(String)" : 33 , "JCheckBoxMenuItem(String,Icon)" : 1 , "JCheckBoxMenuItem(String,Icon,boolean)" : 4 , "JCheckBoxMenuItem(String,boolean)" : 12 , "getState()" : 5 , "javax" : 7}},{ "className" : "org::jgraph::graph::GraphCellEditor" , "selectors" : { "getGraphCellEditorComponent(JGraph,Object,boolean)" : 3}},{ "className" : "com::jgraph::layout::JGraphWordBrowser" , "selectors" : { "JGraphWordBrowser()" : 2 , "add(String,String)" : 2 , "addEdge(Object,Object,Object)" : 2 , "addEdge(Object,Object,Object,String)" : 1 , "addEdge(Object,Object,Object,String,String)" : 1 , "addVertex(Object)" : 3 , "addVertex(Object,String)" : 1 , "createCell(Object,String,boolean)" : 4 , "createEdge(Object)" : 1 , "createFacade(JGraph)" : 1 , "createVertex(Object)" : 1 , "getContent(String)" : 1 , "getDefaultPort(Object)" : 2 , "getWords(String)" : 1 , "layout(JGraph,boolean,boolean)" : 2 , "sendEdgesToBack()" : 1}},{ "className" : "org::jgraph::graph::PortView" , "selectors" : { "PortView(Object)" : 7 , "getBounds()" : 2 , "getLocation()" : 7 , "getLocation(EdgeView)" : 3 , "getLocation(EdgeView,Point2D)" : 4 , "getParentView()" : 6 , "getPortSize()" : 4 , "shouldInvokePortMagic(EdgeView)" : 1}},{ "className" : "org::jgraph::graph::GraphLayoutCache" , "selectors" : { "GraphLayoutCache(GraphModel,CellViewFactory)" : 2 , "GraphLayoutCache(GraphModel,CellViewFactory,CellView[],CellView[],boolean)" : 3 , "GraphLayoutCache(GraphModel,CellViewFactory,boolean)" : 6 , "addGraphLayoutCacheListener(GraphLayoutCacheListener)" : 3 , "addVisibleDependencies(Object[],boolean)" : 1 , "augment(UndoableEdit[],UndoableEdit)" : 2 , "augmentNestedMapForValueChange(Map,Object,Object)" : 1 , "cellExpanded(Object)" : 1 , "cellViewsChanged(CellView[])" : 1 , "cellWillCollapse(Object)" : 1 , "collapse(Object[])" : 2 , "copyRemovedViewValue(Object,boolean,boolean,Collection)" : 2 , "createLocalEdit(Object[],Map,Object[],Object[])" : 2 , "edit(Map)" : 2 , "edit(Map,ConnectionSet,ParentMap,UndoableEdit[])" : 14 , "edit(Object[],Map)" : 1 , "expand(Object[])" : 4 , "fireGraphLayoutCacheChanged(Object,GraphLayoutCacheChange)" : 2 , "getAllDescendants(CellView[])" : 4 , "getAllViews()" : 2 , "getBounds(CellView[])" : 4 , "getCellViews()" : 6 , "getCells(CellView[])" : 1 , "getContext(GraphModelChange)" : 1 , "getEdges(Object,Set,boolean,boolean,boolean)" : 2 , "getFactory()" : 1 , "getHiddenCellViews()" : 1 , "getHiddenMapping()" : 1 , "getIncomingEdges(Object,Set,boolean,boolean)" : 2 , "getMapping(Object,boolean)" : 63 , "getMapping(Object[])" : 5 , "getMapping(Object[],boolean)" : 7 , "getModel()" : 52 , "getNeighbours(Object,Set,boolean,boolean)" : 2 , "getOutgoingEdges(Object,Set,boolean,boolean)" : 1 , "getParentPorts(Object)" : 2 , "getPorts()" : 2 , "getPorts(Object)" : 3 , "getRoots()" : 8 , "getRoots(Rectangle2D)" : 2 , "getVisibleCells(Object[])" : 2 , "getVisibleSet()" : 1 , "graphChanged(GraphModelChange)" : 2 , "handleAttributes(Map)" : 1 , "hasVisibleParent(Object,Set)" : 4 , "hideCells(Object[],boolean)" : 2 , "hideCellsForChange(GraphModelChange)" : 1 , "insert(Object)" : 1 , "insert(Object[])" : 4 , "insert(Object[],Map,ConnectionSet,ParentMap)" : 5 , "insert(Object[],Map,ConnectionSet,ParentMap,UndoableEdit[])" : 4 , "insertClones(Object[],Map,Map,ConnectionSet,ParentMap,double,double)" : 2 , "insertEdge(Object,Object,Object)" : 1 , "insertGroup(Object,Object[])" : 1 , "insertViews(CellView[])" : 2 , "isAllAttributesLocal()" : 2 , "isAutoSizeOnValueChange()" : 1 , "isControlAttribute(Object,Object,Object)" : 1 , "isLocalAttribute(Object,Object,Object)" : 1 , "isPartial()" : 13 , "isSelectsAllInsertedCells()" : 3 , "isSelectsLocalInsertedCells()" : 2 , "isVisible(Object)" : 35 , "putMapping(Object,CellView)" : 3 , "refresh(CellView,boolean)" : 3 , "refresh(CellView[],boolean)" : 6 , "reloadRoots()" : 2 , "remove(Object[])" : 3 , "removeCells(Object[])" : 2 , "removeGraphLayoutCacheListener(GraphLayoutCacheListener)" : 3 , "removeMapping(Object)" : 1 , "setAutoSizeOnValueChange(boolean)" : 1 , "setCollapsedState(Object[],Object[])" : 3 , "setFactory(CellViewFactory)" : 7 , "setHidesExistingConnections(boolean)" : 1 , "setLocalAttributes(Set)" : 2 , "setModel(GraphModel)" : 2 , "setSelectsAllInsertedCells(boolean)" : 3 , "setSelectsLocalInsertedCells(boolean)" : 2 , "setVisible(Object[],Object[])" : 3 , "setVisible(Object[],Object[],ConnectionSet)" : 2 , "setVisible(Object[],Object[],Map,ConnectionSet)" : 1 , "setVisible(Object[],boolean)" : 4 , "setVisibleImpl(Object[],boolean)" : 6 , "showCellsForChange(GraphModelChange)" : 1 , "toBack(Object[])" : 1 , "toFront(Object[])" : 2 , "translateViews(CellView[],double,double)" : 3 , "ungroup(Object[])" : 1 , "update()" : 2 , "update(CellView)" : 4 , "update(CellView[])" : 5 , "updatePorts()" : 3 , "valueForCellChanged(Object,Object)" : 2}},{ "className" : "com::jgraph::layout::hierarchical::JGraphCoordinateAssignment::WeightedCellSorter" , "selectors" : { "WeightedCellSorter()" : 1 , "WeightedCellSorter(JGraphAbstractHierarchyCell,int)" : 2}},{ "className" : "com::jgraph::navigation::PanningTool" , "selectors" : { "PanningTool()" : 1 , "processMouseDraggedEvent(MouseEvent)" : 1}},{ "className" : "com::jgraph::algebra::JGraphFibonacciHeap" , "selectors" : { "JGraphFibonacciHeap()" : 2 , "cascadingCut(Node)" : 2 , "consolidate()" : 1 , "cut(Node,Node)" : 2 , "decreaseKey(Node,double)" : 5 , "getNode(Object,boolean)" : 5 , "insert(Node,double)" : 1 , "isEmpty()" : 2 , "link(Node,Node)" : 1 , "removeMin()" : 3}},{ "className" : "org::jgraph::plaf::basic::BasicGraphTransferable" , "selectors" : { "getHTMLData()" : 1 , "getPlainData()" : 2 , "getRicherData(DataFlavor)" : 1 , "getRicherFlavors()" : 2 , "getTransferDataFlavors()" : 1 , "isHTMLFlavor(DataFlavor)" : 1 , "isHTMLSupported()" : 1 , "isPlainFlavor(DataFlavor)" : 1 , "isPlainSupported()" : 2 , "isRicherFlavor(DataFlavor)" : 1 , "isStringFlavor(DataFlavor)" : 1}},{ "className" : "com::jgraph::layout::hierarchical::model::JGraphHierarchyEdge" , "selectors" : { "JGraphHierarchyEdge(List)" : 1 , "invert()" : 3 , "isReversed()" : 1 , "setGeneralPurposeVariable(int,int)" : 1}},{ "className" : "com::jgraph::example::mycellmodeleditor::BusinessObjectEditor::RealCellEditor" , "selectors" : { "RealCellEditor()" : 1}},{ "className" : "org::jgraph::example::LiveJGraphInternalFrame" , "selectors" : { "LiveJGraphInternalFrame()" : 3 , "create()" : 3 , "getGraphCell()" : 4 , "setGraphCell(DefaultGraphCell)" : 3}},{ "className" : "org::jgraph::JGraph::EmptySelectionModel" , "selectors" : { "EmptySelectionModel()" : 1 , "sharedInstance()" : 1}},{ "className" : "com::jgraph::layout::demo::JGraphLayoutMorphingManager" , "selectors" : { "JGraphLayoutMorphingManager()" : 1 , "execute()" : 2 , "fitViewport(JGraph)" : 4 , "initialize()" : 1 , "isAnimatable(Object)" : 2 , "morph(JGraph,Map)" : 1 , "setCellBounds(Object,Rectangle2D)" : 3 , "updateCell(Object)" : 1}},{ "className" : "com::jgraph::layout::JGraphWordBrowser::SynonymRenderer" , "selectors" : { "SynonymRenderer()" : 1}},{ "className" : "com::jgraph::util::JGraphPrintingScrollPane::Viewport" , "selectors" : { "paintBackgroundImage(Graphics2D)" : 1 , "paintBackgroundPages(Graphics2D)" : 1}},{ "className" : "org::jgraph::graph::EdgeRenderer" , "selectors" : { "EdgeRenderer()" : 2 , "afterEdgePaint(Graphics)" : 1 , "beforeEdgePaint(Graphics)" : 1 , "createLineEnd(int,int,Point2D,Point2D)" : 2 , "createShape()" : 1 , "getBounds(CellView)" : 2 , "getExtraLabelBounds(JGraph,EdgeView,int)" : 2 , "getExtraLabelPosition(EdgeView,int)" : 3 , "getExtraLabelSize(JGraph,EdgeView,int)" : 2 , "getLabelAngle(String)" : 4 , "getLabelBounds(JGraph,EdgeView)" : 2 , "getLabelBounds(Point2D,Dimension,String)" : 2 , "getLabelPosition(EdgeView)" : 7 , "getLabelPosition(Point2D)" : 2 , "getLabelSize(EdgeView,String)" : 4 , "getPaintBounds(EdgeView)" : 2 , "installAttributes(CellView)" : 2 , "intersects(JGraph,CellView,Rectangle)" : 2 , "isFillable(int)" : 2 , "isLabelTransform(String)" : 3 , "isLabelTransformEnabled()" : 2 , "paintEdge(Graphics)" : 1 , "paintLabel(Graphics,String,Point2D,boolean)" : 2 , "paintLabels(Graphics)" : 1 , "paintSelection(Graphics)" : 1 , "paintSelectionBorder(Graphics)" : 1 , "setGradientColor(Color)" : 1 , "setView(CellView)" : 6 , "translateGraphics(Graphics)" : 1}},{ "className" : "com::jgraph::layout::hierarchical::JGraphLongestPathLayering" , "selectors" : { "JGraphLongestPathLayering()" : 1}},{ "className" : "org::jgraph::graph::BasicMarqueeHandler" , "selectors" : { "BasicMarqueeHandler()" : 1 , "getGraphForEvent(MouseEvent)" : 3 , "handleMarqueeEvent(MouseEvent,JGraph,Rectangle2D)" : 1 , "isForceMarqueeEvent(MouseEvent)" : 2 , "isMarqueeTriggerEvent(MouseEvent,JGraph)" : 1 , "mouseDragged(MouseEvent)" : 2 , "mouseMoved(MouseEvent)" : 2 , "mousePressed(MouseEvent)" : 2 , "mouseReleased(MouseEvent)" : 3 , "overlay(JGraph,Graphics,boolean)" : 3 , "paint(JGraph,Graphics)" : 3 , "processMouseDraggedEvent(MouseEvent)" : 1}},{ "className" : "com::jgraph::example::adapter::JGraphSQLBusinessModel" , "selectors" : { "JGraphSQLBusinessModel()" : 1 , "JGraphSQLBusinessModel(List,AttributeMap,JGraphAdapterBackend)" : 1 , "findEdges(String,Object,Object,Object,boolean)" : 1 , "findVertices(String,Object)" : 1}},{ "className" : "org::jgraph::graph::AttributeMap::SerializableRectangle2D" , "selectors" : { "AttributeMap" : 2 , "SerializableRectangle2D()" : 1}},{ "className" : "com::jgraph::layout::tree::JGraphTreeLayout::StandardTreeNode" , "selectors" : { "StandardTreeNode(Object)" : 2 , "addChild(StandardTreeNode)" : 1 , "getChildren()" : 2 , "getDepth()" : 5 , "getHeight()" : 1 , "getLeftWidth()" : 5 , "getNodesByLevel()" : 2 , "getParent()" : 3 , "getRightWidth()" : 5 , "setDepth(int)" : 6 , "setParent(TreeNode)" : 1 , "setPosition(Point2D,double)" : 6}},{ "className" : "org::jgraph::plaf::basic::BasicGraphUI::GraphModelHandler" , "selectors" : { "GraphModelHandler()" : 1}},{ "className" : "org::jgraph::graph::DefaultGraphModel" , "selectors" : { "DefaultGraphModel()" : 13 , "DefaultGraphModel(List,AttributeMap)" : 4 , "DefaultGraphModel(List,AttributeMap,ConnectionSet)" : 1 , "cellsChanged(Object[])" : 2 , "cloneCell(GraphModel,Object)" : 1 , "cloneCell(Object)" : 1 , "cloneUserObject(Object)" : 3 , "connect(Object,Object,boolean,boolean)" : 1 , "contains(Object)" : 2 , "createEdit(Object[],Object[],Map,ConnectionSet,ParentMap,UndoableEdit[])" : 5 , "createLayerEdit(Object[],int)" : 2 , "createRemoveEdit(Object[])" : 1 , "edit(Map,ConnectionSet,ParentMap,UndoableEdit[])" : 5 , "edit(Object[],Object[],Map,ConnectionSet,ParentMap,UndoableEdit[])" : 1 , "fireGraphChanged(Object,GraphModelChange)" : 3 , "getAll(GraphModel)" : 3 , "getAttributes(Object)" : 3 , "getChild(Object,int)" : 3 , "getChildCount(Object)" : 3 , "getDescendants(GraphModel,Object[])" : 26 , "getEdges(GraphModel,Object,boolean)" : 6 , "getEdges(GraphModel,Object[])" : 17 , "getEdgesBetween(GraphModel,Object,Object,boolean)" : 6 , "getOpposite(GraphModel,Object,Object)" : 5 , "getOutgoingEdges(GraphModel,Object)" : 4 , "getParent(Object)" : 8 , "getRoots()" : 2 , "getRoots(GraphModel)" : 11 , "getRoots(GraphModel,Object[])" : 2 , "getRootsAsCollection(GraphModel)" : 1 , "getSource(Object)" : 3 , "getSourceVertex(GraphModel,Object)" : 8 , "getTarget(Object)" : 3 , "getTargetVertex(GraphModel,Object)" : 8 , "getTopmostCells(GraphModel,Object[])" : 1 , "getValue(Object)" : 24 , "handleAttributes(Map)" : 4 , "handleConnection(Connection,boolean)" : 2 , "handleConnectionSet(ConnectionSet)" : 2 , "handleInsert(Object[])" : 1 , "handleParentMap(ParentMap)" : 1 , "handleRemove(Object[])" : 1 , "hasAncestorIn(GraphModel,Set,Object)" : 1 , "insert(Object[],Map,ConnectionSet,ParentMap,UndoableEdit[])" : 9 , "isEdge(Object)" : 4 , "isGroup(GraphModel,Object)" : 3 , "isPort(Object)" : 5 , "isVertex(GraphModel,Object)" : 12 , "order(GraphModel,Object[])" : 2 , "remove(Object[])" : 3 , "toBack(Object[])" : 1 , "updateTransaction(Object[],Object[],Map,ConnectionSet,ParentMap)" : 3 , "valueForCellChanged(Object,Object)" : 5}},{ "className" : "com::jgraph::layout::tree::JGraphCompactTreeLayout" , "selectors" : { "JGraphCompactTreeLayout()" : 3 , "attachParent(CompactTreeNode,double)" : 2 , "bridge(PolyLine,double,double,PolyLine,double,double)" : 2 , "dispatchResult(Collection)" : 1 , "getTreeLayoutNode(Object)" : 4 , "getTreeLayoutNode(Object,boolean)" : 1 , "join(CompactTreeNode)" : 2 , "layout(CompactTreeNode)" : 2 , "layoutLeaf(CompactTreeNode)" : 2 , "layoutTree(CompactTreeNode)" : 1 , "leftRightNodeLayout(CompactTreeNode,double,double)" : 4 , "merge(Polygon,Polygon)" : 1 , "offset(double,double,double,double,double,double)" : 1 , "unzip(CompactTreeNode)" : 2 , "upDownNodeLayout(CompactTreeNode,CompactTreeNode,double,double)" : 3 , "zip(CompactTreeNode)" : 2}},{ "className" : "com::jgraph::example::adapter::JGraphSQLRelation" , "selectors" : { "JGraphSQLRelation(Object)" : 2 , "JGraphSQLRelation(Object,JGraphSQLEntity,JGraphSQLEntity,JGraphSQLEntity)" : 1 , "JGraphSQLRelation(Object,Object,JGraphSQLEntity,JGraphSQLEntity,JGraphSQLEntity)" : 2 , "getSource()" : 2 , "getTarget()" : 2 , "setSource(JGraphSQLEntity)" : 3 , "setTarget(JGraphSQLEntity)" : 3}},{ "className" : "org::jgraph::example::JGraphIconView::MultiLinedEditor" , "selectors" : { "getGraphCellEditorComponent(JGraph,Object,boolean)" : 1}},{ "className" : "org::jgraph::event::GraphSelectionEvent" , "selectors" : { "GraphSelectionEvent(Object,Object[],boolean[])" : 2 , "cloneWithSource(Object)" : 1 , "getCells()" : 1}},{ "className" : "javax::swing::plaf::ActionMapUIResource" , "selectors" : { "ActionMapUIResource()" : 1}},{ "className" : "com::jgraph::example::GraphTreeModel" , "selectors" : { "GraphTreeModel(GraphModel)" : 1}},{ "className" : "org::jgraph::graph::ConnectionSet" , "selectors" : { "ConnectionSet()" : 13 , "ConnectionSet(Object,Object,Object)" : 4 , "ConnectionSet(Object,Object,boolean)" : 2 , "clone(Map)" : 2 , "connect(ConnectionSet,Object,Object,boolean,boolean)" : 2 , "connect(Object,Object,Object)" : 9 , "connect(Object,Object,boolean)" : 16 , "connections()" : 5 , "create(GraphModel,Object[],boolean)" : 4 , "disconnect(Object)" : 1 , "disconnect(Object,boolean)" : 5 , "getChangedEdges()" : 3 , "getConnections()" : 2 , "getEdges()" : 2 , "getPort(Object,boolean)" : 2 , "isEmpty()" : 2 , "setConnections(Set)" : 2 , "setEdges(Set)" : 1}},{ "className" : "com::jgraph::layout::organic::JGraphSelfOrganizingOrganicLayout" , "selectors" : { "JGraphSelfOrganizingOrganicLayout()" : 4 , "moveVertex(int)" : 1 , "setDensityFactor(double)" : 1 , "setMaxIterationsMultiple(int)" : 1 , "setStartRadius(int)" : 1 , "updateRadius()" : 1 , "updateToRandomNode()" : 1}},{ "className" : "com::jgraph::layout::hierarchical::JGraphCoordinateAssignment" , "selectors" : { "JGraphCoordinateAssignment(double,double,int,boolean,double,double)" : 1 , "calculateWidestRank(JGraphFacade,JGraphHierarchyModel)" : 1 , "calculatedWeightedValue(JGraphAbstractHierarchyCell,Collection)" : 1 , "getLimitX()" : 1 , "initialCoords(JGraphFacade,JGraphHierarchyModel)" : 1 , "initialise(JGraphHierarchyModel)" : 1 , "medianPos(int,JGraphHierarchyModel)" : 1 , "medianXValue(Object[],int)" : 3 , "minNode(JGraphHierarchyModel)" : 2 , "processReversedEdge(JGraphHierarchyEdge,Object)" : 1 , "rankCoordinates(int,JGraphFacade,JGraphHierarchyModel)" : 2 , "rankMedianPosition(int,JGraphHierarchyModel,int)" : 2 , "setCellLocations(JGraphFacade,JGraphHierarchyModel)" : 1 , "setLoggerLevel(Level)" : 1}},{ "className" : "com::jgraph::example::adapter::JGraphSQLBackend" , "selectors" : { "JGraphSQLBackend(Connection,Object,Object)" : 1 , "createCell(JGraphAdapterModel,JGraphSQLEntity)" : 3 , "createFilter(Object)" : 2 , "dump(ResultSet)" : 1 , "find(String)" : 1 , "findCells(JGraphAdapterModel,String)" : 2 , "findEdges(JGraphAdapterModel,Object,Object,Object,Object,boolean)" : 1 , "findVertices(JGraphAdapterModel,Object,Object)" : 1 , "get(Object)" : 4 , "getNextEntityId()" : 1 , "getParent(Object)" : 2 , "getSource(Object)" : 1 , "getTarget(Object)" : 1 , "objectAdded(Object)" : 2 , "println(String)" : 4 , "propertiesChanged(Object,Map)" : 2 , "propertyAdded(JGraphSQLEntity,Object,Object)" : 1 , "propertyChanged(JGraphSQLEntity,Object,Object)" : 1 , "query(String)" : 1 , "update(String)" : 25}},{ "className" : "com::jgraph::layout::JGraphLayoutExample" , "selectors" : { "JGraphLayoutExample()" : 1 , "createEdgeAttributes()" : 1 , "createLayoutAction(String,String,JGraphLayout)" : 10 , "createLayoutActions()" : 1 , "init()" : 1 , "valueChanged(GraphSelectionEvent)" : 1}},{ "className" : "com::jgraph::layout::organic::JGraphOrganicLayout" , "selectors" : { "JGraphOrganicLayout()" : 4 , "JGraphOrganicLayout(Rectangle2D)" : 1 , "calcEnergyDelta(int,double,double,double,double,double,double)" : 1 , "createPermutation(int)" : 1 , "getAdditionFactorsEnergy(int)" : 2 , "getBorderline(int)" : 2 , "getConnectedEdges(int)" : 1 , "getEdgeCrossing(int)" : 1 , "getEdgeCrossingAffectedEdges(int)" : 2 , "getEdgeDistanceAffectedNodes(int)" : 2 , "getEdgeDistanceFromEdge(int)" : 1 , "getEdgeDistanceFromNode(int)" : 2 , "getEdgeLength(int)" : 1 , "getEdgeLengthAffectedEdges(int)" : 2 , "getNodeDistribution(int)" : 2 , "getRelevantEdges(int)" : 1 , "performRound()" : 1 , "run(JGraphFacade)" : 1 , "setDeterministic(boolean)" : 1 , "setNodeDistributionCostFactor(double)" : 1 , "setOptimizeBorderLine(boolean)" : 2 , "setRadiusScaleFactor(double)" : 1}},{ "className" : "org::jgraph::example::LiveJGraphDemo::FrameComponentListener" , "selectors" : { "FrameComponentListener()" : 1}},{ "className" : "com::jgraph::example::mycellview::JGraphRoundRectView" , "selectors" : { "getArcSize(int,int)" : 1}},{ "className" : "com::jgraph::layout::svg::SVGExample" , "selectors" : { "SVGExample()" : 1 , "exportSVG()" : 1 , "initSVGFileChooser()" : 1}},{ "className" : "org::jgraph::plaf::basic::BasicGraphUI::GraphCancelEditingAction" , "selectors" : { "GraphCancelEditingAction(String)" : 1}},{ "className" : "org::jgraph::graph::GraphContext" , "selectors" : { "GraphContext(JGraph,Object[])" : 1 , "contains(Object)" : 4 , "createMapping(Object)" : 3 , "createTemporaryCellViews()" : 1 , "createTemporaryContextViews()" : 1 , "createTemporaryContextViews(Set)" : 2 , "createTemporaryPortViews()" : 2 , "disconnect(CellView[])" : 1 , "getCells()" : 7 , "getDescendantCount()" : 1 , "getGraph()" : 3 , "getMapping(Object,boolean)" : 2 , "isEmpty()" : 2 , "putMapping(Object,CellView)" : 1}},{ "className" : "com::jgraph::components::RichTextExample" , "selectors" : { "RichTextExample()" : 1}},{ "className" : "org::jgraph::graph::DefaultGraphSelectionModel" , "selectors" : { "DefaultGraphSelectionModel(JGraph)" : 2 , "addSelectionCells(Object[])" : 1 , "deselect(Object)" : 1 , "fireValueChanged(GraphSelectionEvent)" : 1 , "getSelectedChildCount(Object)" : 4 , "isCellSelected(Object)" : 2 , "isChildrenSelectable()" : 1 , "isChildrenSelectable(Object)" : 1 , "notifyCellChange(Vector)" : 4 , "removeSelectionCells(Object[])" : 1 , "select(Set,Object)" : 2 , "setSelectedChildCount(Object,int)" : 3 , "setSelectionCells(Object[])" : 3}},{ "className" : "org::jgraph::plaf::basic::BasicGraphUI::MouseHandler" , "selectors" : { "MouseHandler()" : 1 , "handleEditTrigger(Object,MouseEvent)" : 1 , "isDescendant(CellView,CellView)" : 1 , "postProcessSelection(MouseEvent,Object,boolean)" : 1}},{ "className" : "com::jgraph::layout::JGraphLayoutExampleMenuBar" , "selectors" : { "JGraphLayoutExampleMenuBar(JGraphLayoutExample,JGraphGraphFactory)" : 1}},{ "className" : "org::jgraph::graph::GraphConstants" , "selectors" : { "createAttributes(Object[],CellMapper)" : 4 , "createAttributes(Object[],Object[],Object[])" : 3 , "getBackground(Map)" : 5 , "getBeginSize(Map)" : 1 , "getBorder(Map)" : 2 , "getBorderColor(Map)" : 4 , "getBounds(Map)" : 26 , "getDashOffset(Map)" : 1 , "getDashPattern(Map)" : 2 , "getEndSize(Map)" : 1 , "getExtraLabelPositions(Map)" : 6 , "getExtraLabels(Map)" : 9 , "getFont(Map)" : 10 , "getForeground(Map)" : 5 , "getGradientColor(Map)" : 4 , "getHorizontalAlignment(Map)" : 4 , "getHorizontalTextPosition(Map)" : 2 , "getIcon(Map)" : 6 , "getInset(Map)" : 4 , "getLabelPosition(Map)" : 3 , "getLineBegin(Map)" : 2 , "getLineColor(Map)" : 2 , "getLineEnd(Map)" : 2 , "getLineStyle(Map)" : 3 , "getLineWidth(Map)" : 5 , "getLink(Map)" : 2 , "getMoveableAxis(Map)" : 3 , "getOffset(Map)" : 14 , "getPoints(Map)" : 9 , "getRemoveAttributes(Map)" : 2 , "getRouting(Map)" : 3 , "getSizeableAxis(Map)" : 3 , "getValue(Map)" : 1 , "getVerticalAlignment(Map)" : 3 , "getVerticalTextPosition(Map)" : 2 , "isAbsoluteX(Map)" : 1 , "isAbsoluteY(Map)" : 1 , "isAutoSize(Map)" : 3 , "isBeginFill(Map)" : 1 , "isBendable(Map)" : 1 , "isChildrenSelectable(Map)" : 1 , "isConnectable(Map)" : 2 , "isConstrained(Map)" : 1 , "isDisconnectable(Map)" : 9 , "isEditable(Map)" : 1 , "isEndFill(Map)" : 1 , "isExactSegmentLabel(Map)" : 2 , "isGroupOpaque(Map)" : 2 , "isLabelAlongEdge(Map)" : 2 , "isLabelEnabled(Map)" : 2 , "isMoveable(Map)" : 7 , "isOpaque(Map)" : 3 , "isRemoveAll(Map)" : 1 , "isResize(Map)" : 1 , "isSelectable(Map)" : 2 , "isSizeable(Map)" : 2 , "merge(Map,Map)" : 4 , "replaceKeys(Map,Map)" : 2 , "setAbsolute(Map,boolean)" : 1 , "setAbsoluteX(Map,boolean)" : 1 , "setAbsoluteY(Map,boolean)" : 1 , "setAutoSize(Map,boolean)" : 2 , "setBackground(Map,Color)" : 10 , "setBeginFill(Map,boolean)" : 2 , "setBeginSize(Map,int)" : 3 , "setBorder(Map,Border)" : 5 , "setBorderColor(Map,Color)" : 9 , "setBounds(Map,Rectangle2D)" : 23 , "setConstrained(Map,boolean)" : 2 , "setDashPattern(Map,float[])" : 1 , "setEditable(Map,boolean)" : 1 , "setEndFill(Map,boolean)" : 8 , "setEndSize(Map,int)" : 1 , "setExactSegmentLabel(Map,boolean)" : 1 , "setExtraLabelPositions(Map,Point2D[])" : 4 , "setExtraLabels(Map,Object[])" : 3 , "setFont(Map,Font)" : 8 , "setForeground(Map,Color)" : 2 , "setGradientColor(Map,Color)" : 10 , "setIcon(Map,Icon)" : 2 , "setInset(Map,int)" : 6 , "setLabelAlongEdge(Map,boolean)" : 3 , "setLabelPosition(Map,Point2D)" : 4 , "setLineBegin(Map,int)" : 3 , "setLineColor(Map,Color)" : 2 , "setLineEnd(Map,int)" : 11 , "setLineStyle(Map,int)" : 3 , "setOffset(Map,Point2D)" : 8 , "setOpaque(Map,boolean)" : 9 , "setPoints(Map,List)" : 5 , "setRemoveAttributes(Map,Object[])" : 4 , "setResize(Map,boolean)" : 4 , "setRouting(Map,Routing)" : 2 , "setSizeable(Map,boolean)" : 1 , "setValue(Map,Object)" : 3 , "setVerticalAlignment(Map,int)" : 2}},{ "className" : "org::jgraph::graph::GraphUndoManager" , "selectors" : { "canRedo(Object)" : 1 , "canUndo(Object)" : 1 , "editToBeRedone(Object)" : 2 , "editToBeUndone(Object)" : 2 , "nextEditToBeRedone(UndoableEdit)" : 2 , "nextEditToBeUndone(UndoableEdit)" : 1 , "redo(Object)" : 1 , "undo(Object)" : 1}},{ "className" : "com::jgraph::components::OverviewExample" , "selectors" : { "OverviewExample()" : 1}},{ "className" : "com::jgraph::layout::tree::JGraphTreeLayout" , "selectors" : { "JGraphTreeLayout()" : 4 , "distance(PolyLine,PolyLine)" : 1 , "getLeftMostX(StandardTreeNode)" : 1 , "getRightMostX(StandardTreeNode)" : 2 , "getTreeNode(Object)" : 3 , "join(StandardTreeNode)" : 2 , "layout(StandardTreeNode)" : 3 , "merge(PolyLine,PolyLine,double)" : 2 , "run(JGraphFacade)" : 1 , "setLevelHeights(StandardTreeNode)" : 1 , "spaceMultipleTrees(StandardTreeNode)" : 1}},{ "className" : "com::jgraph::example::panelexample::PortLabelVertexView::WrapperPortLabelRenderer" , "selectors" : { "WrapperPortLabelRenderer()" : 1}},{ "className" : "com::jgraph::example::groupeditor::GroupManager" , "selectors" : { "GroupManager()" : 1 , "getGroupByFoldingHandle(JGraph,Point2D)" : 1}},{ "className" : "org::jgraph::plaf::GraphUI" , "selectors" : { "GraphUI()" : 1 , "cancelEditing(JGraph)" : 1 , "getDropAction()" : 3 , "getEditingCell(JGraph)" : 1 , "getHandle()" : 2 , "getInsertionLocation()" : 1 , "getPreferredSize(JGraph,CellView)" : 1 , "isEditing(JGraph)" : 1 , "paintCell(Graphics,CellView,Rectangle2D,boolean)" : 5 , "paintPorts(Graphics,CellView[])" : 1 , "selectCellsForEvent(JGraph,Object[],MouseEvent)" : 1 , "setInsertionLocation(Point)" : 1 , "startEditingAtCell(JGraph,Object)" : 1 , "stopEditing(JGraph)" : 1 , "updateHandle()" : 1}},{ "className" : "org::jgraph::util::Spline" , "selectors" : { "Spline(double[],double[])" : 2 , "calculateCoefficients()" : 1 , "checkValues()" : 2 , "getDx(double)" : 2 , "getValue(double)" : 2 , "setValues(double[],double[])" : 1 , "solve(double[][],double[])" : 1}},{ "className" : "com::jgraph::components::labels::RichTextBusinessObject" , "selectors" : { "RichTextBusinessObject()" : 2 , "RichTextBusinessObject(Object)" : 1 , "chopString(String,int)" : 2 , "clone()" : 2 , "getProperties()" : 4 , "getProperty(Object)" : 1 , "getValue()" : 8 , "isComponent()" : 3 , "isRichText()" : 3 , "putProperty(Object,Object)" : 2 , "setProperties(Map)" : 2 , "setValue(Object)" : 3 , "toString()" : 1}},{ "className" : "com::jgraph::example::fastgraph::FastCircleCell" , "selectors" : { "FastCircleCell(Object)" : 2 , "FastCircleCell(Object,AttributeMap)" : 1}},{ "className" : "com::jgraph::example::portlabels::PortLabelGraph" , "selectors" : { "PortLabelGraph()" : 1}},{ "className" : "com::jgraph::example::SerialGraph" , "selectors" : { "readObject(String)" : 1 , "writeObject(Object,String)" : 1}},{ "className" : "org::jgraph::event::GraphLayoutCacheEvent" , "selectors" : { "GraphLayoutCacheEvent(Object,GraphLayoutCacheChange)" : 1 , "getChange()" : 4}},{ "className" : "com::jgraph::layout::organic::JGraphOrganicLayout::CellWrapper" , "selectors" : { "CellWrapper(Object)" : 2}},{ "className" : "com::jgraph::example::adapter::JGraphAdapterModel" , "selectors" : { "JGraphAdapterModel()" : 1 , "JGraphAdapterModel(List,AttributeMap,JGraphAdapterBackend)" : 2 , "addProperty(Object,Object,Object)" : 1 , "fireAttributesChanged(Object,Map,boolean)" : 1 , "fireCellRemoved(Object,boolean)" : 1 , "fireCommit()" : 2 , "fireEdgeAdded(Object,Object,Object,boolean)" : 1 , "fireParentChanged(Object,Object,boolean)" : 1 , "fireRollback()" : 2 , "fireSourceChanged(Object,Object,boolean)" : 1 , "fireTargetChanged(Object,Object,boolean)" : 1 , "fireVertexAdded(Object,boolean)" : 1 , "getBackend()" : 12 , "getMapping(Object)" : 5 , "getParentUserObject(Object)" : 2 , "processConnectionSet(ConnectionSet,boolean)" : 2 , "processInsert(Object[],Map,ConnectionSet,ParentMap,boolean)" : 2 , "processNestedAttributes(Map,boolean)" : 2 , "processParentMap(ParentMap,boolean)" : 2 , "processRemove(Object[],boolean)" : 2 , "putMapping(Object,Object)" : 2 , "removeMapping(Object)" : 1 , "setBackend(JGraphAdapterBackend)" : 1}},{ "className" : "org::jgraph::graph::EdgeView" , "selectors" : { "EdgeView(Object)" : 5 , "addExtraLabel(Point2D,Object)" : 1 , "addPoint(int,Point2D)" : 1 , "checkDefaultLabelPosition()" : 2 , "convertRelativeLabelPositionToAbsolute(Point2D)" : 2 , "getAbsoluteLabelPositionFromRelative(Point2D)" : 3 , "getBounds()" : 9 , "getEdgeRenderer()" : 3 , "getExtraLabelPosition(int)" : 2 , "getFirstPointOfSegment()" : 1 , "getLabelPosition()" : 6 , "getLabelVector()" : 3 , "getNearestPoint(boolean)" : 3 , "getPoint(int)" : 63 , "getPointCount()" : 30 , "getPointLocation(int)" : 1 , "getPoints()" : 2 , "getRenderer()" : 3 , "getShape()" : 4 , "getSource()" : 47 , "getSourceParentView()" : 9 , "getTarget()" : 46 , "getTargetParentView()" : 8 , "getVisibleParent(GraphModel,CellMapper,Object)" : 2 , "intersects(JGraph,Rectangle2D)" : 1 , "invalidate()" : 8 , "isLoop()" : 4 , "refresh(GraphLayoutCache,CellMapper,boolean)" : 1 , "removeExtraLabel(int)" : 1 , "removePoint(int)" : 1 , "setExtraLabelPosition(int,Point2D)" : 2 , "setLabelPosition(Point2D)" : 2 , "setPoint(int,Point2D)" : 2 , "setSource(CellView)" : 5 , "setTarget(CellView)" : 5 , "update(GraphLayoutCache)" : 5}},{ "className" : "org::jgraph::graph::DefaultEdge::DefaultRouting" , "selectors" : { "DefaultEdge" : 1}},{ "className" : "org::jgraph::graph::DefaultEdge::LoopRouting" , "selectors" : { "DefaultEdge" : 1 , "getEdgeStyle()" : 1 , "getLoopStyle()" : 1 , "getPreferredLineStyle(EdgeView)" : 1 , "routeEdge(GraphLayoutCache,EdgeView)" : 1 , "routeLoop(GraphLayoutCache,EdgeView)" : 1}},{ "className" : "org::jgraph::event::GraphModelEvent::GraphModelChange" , "selectors" : { "getConnectionSet()" : 2 , "getViews(GraphLayoutCache)" : 1 , "putViews(GraphLayoutCache,CellView[])" : 1}},{ "className" : "org::jgraph::graph::AttributeMap" , "selectors" : { "AttributeMap()" : 16 , "AttributeMap(Map)" : 4 , "AttributeMap(int)" : 2 , "AttributeMap(int,float)" : 4 , "applyMap(Map)" : 10 , "applyValue(Object,Object)" : 2 , "clone()" : 15 , "cloneEntries(AttributeMap)" : 1 , "clonePoints(List)" : 2 , "clonePoints(Object[],boolean)" : 2 , "clonePoints(Point2D[])" : 2 , "createPoint(Point2D)" : 3 , "createPoint(double,double)" : 22 , "createRect(Point2D,double)" : 1 , "createRect(Rectangle2D)" : 2 , "createRect(double,double,double,double)" : 7 , "createRect(double,double,double,double,double,double)" : 1 , "diff(Map)" : 1 , "scale(double,double,Point2D)" : 2 , "translate(Collection,double,double)" : 2 , "translate(double,double)" : 5}},{ "className" : "com::jgraph::example::fastgraph::FastPortView" , "selectors" : { "FastPortView(Object)" : 1}},{ "className" : "org::jgraph::graph::GraphModel" , "selectors" : { "acceptsSource(Object,Object)" : 4 , "acceptsTarget(Object,Object)" : 4 , "addGraphModelListener(GraphModelListener)" : 7 , "addUndoableEditListener(UndoableEditListener)" : 4 , "cloneCells(Object[])" : 3 , "contains(Object)" : 4 , "edges(Object)" : 2 , "edit(Map,ConnectionSet,ParentMap,UndoableEdit[])" : 6 , "getAttributes(Object)" : 26 , "getChild(Object,int)" : 31 , "getChildCount(Object)" : 24 , "getIndexOfChild(Object,Object)" : 3 , "getIndexOfRoot(Object)" : 5 , "getParent(Object)" : 56 , "getRootAt(int)" : 8 , "getRootCount()" : 9 , "getSource(Object)" : 23 , "getTarget(Object)" : 22 , "getValue(Object)" : 7 , "insert(Object[],Map,ConnectionSet,ParentMap,UndoableEdit[])" : 4 , "isEdge(Object)" : 16 , "isPort(Object)" : 30 , "remove(Object[])" : 6 , "removeGraphModelListener(GraphModelListener)" : 4 , "removeUndoableEditListener(UndoableEditListener)" : 1 , "toBack(Object[])" : 1 , "toFront(Object[])" : 1}},{ "className" : "java::awt::geom::Dimension2D" , "selectors" : { "clone()" : 6 , "getHeight()" : 31 , "getWidth()" : 30 , "setSize(double,double)" : 1}},{ "className" : "javax::swing::text::StyledEditorKit" , "selectors" : { "StyledEditorKit()" : 1 , "createDefaultDocument()" : 1 , "getActions()" : 1 , "getInputAttributes()" : 5 , "javax" : 1}},{ "className" : "com::jgraph::layout::organic::JGraphFastOrganicLayout" , "selectors" : { "JGraphFastOrganicLayout()" : 4 , "calcAttraction()" : 1 , "calcPositions()" : 1 , "calcRepulsion()" : 1 , "reduceTemperature()" : 1 , "run(JGraphFacade)" : 1 , "setForceConstant(double)" : 2}},{ "className" : "com::jgraph::layout::JGraphHeadlessLayoutExample" , "selectors" : { "createVertex(String,double,double,double,double)" : 3}},{ "className" : "org::jgraph::graph::CellViewFactory" , "selectors" : { "createView(GraphModel,Object)" : 2}},{ "className" : "org::jgraph::graph::VertexRenderer" , "selectors" : { "VertexRenderer()" : 2 , "getPerimeterPoint(VertexView,Point2D,Point2D)" : 4 , "getRendererComponent(JGraph,CellView,boolean,boolean,boolean)" : 3 , "installAttributes(CellView)" : 4 , "paint(Graphics)" : 7 , "paintSelectionBorder(Graphics)" : 1 , "resetAttributes()" : 2 , "setGradientColor(Color)" : 3}},{ "className" : "org::jgraph::plaf::basic::BasicGraphUI::GraphSelectionHandler" , "selectors" : { "GraphSelectionHandler()" : 1}},{ "className" : "org::jgraph::example::JGraphIconView::DescriptionTextArea" , "selectors" : { "DescriptionTextArea(String,String)" : 1 , "setDescription(String)" : 1 , "setText(String)" : 1}},{ "className" : "com::jgraph::algebra::cost::JGraphDistanceCostFunction" , "selectors" : { "JGraphDistanceCostFunction(CellMapper)" : 3 , "getLength(CellView)" : 1}},{ "className" : "com::jgraph::layout::hierarchical::model::JGraphHierarchyModel" , "selectors" : { "JGraphHierarchyModel(JGraphFacade)" : 2 , "JGraphHierarchyModel(JGraphFacade,Object[],boolean,boolean,boolean)" : 4 , "createInternalCells(JGraphFacade,Object[],JGraphHierarchyNode[])" : 2 , "dfs(CellVisitor,Object[],boolean,Set)" : 3 , "dfs(JGraphHierarchyNode,JGraphHierarchyNode,JGraphHierarchyEdge,CellVisitor,Set,int)" : 2 , "dfs(JGraphHierarchyNode,JGraphHierarchyNode,JGraphHierarchyEdge,CellVisitor,Set,int[],int,int)" : 2 , "fixRanks()" : 1 , "formOrderedHierarchy(JGraphFacade,Object[])" : 1 , "getVertexMapping()" : 2 , "initialRank()" : 1}},{ "className" : "com::jgraph::example::mycellmodeleditor::BusinessObjectWrapper" , "selectors" : { "BusinessObjectWrapper()" : 1 , "getLabel()" : 1 , "getValue()" : 4 , "setLabel(String)" : 3 , "setValue(DefaultMutableTreeNode)" : 2 , "toString()" : 1}},{ "className" : "com::jgraph::components::labels::RedirectingEditor" , "selectors" : { "RedirectingEditor()" : 1}},{ "className" : "javax::swing::CellRendererPane" , "selectors" : { "CellRendererPane()" : 6 , "paintComponent(Graphics,Component,Container,Rectangle)" : 1 , "paintComponent(Graphics,Component,Container,int,int,int,int)" : 2 , "paintComponent(Graphics,Component,Container,int,int,int,int,boolean)" : 6}},{ "className" : "org::jgraph::graph::AttributeMap::SerializablePoint2D" , "selectors" : { "AttributeMap" : 3 , "SerializablePoint2D()" : 1}},{ "className" : "com::jgraph::example::GraphTreeModel::GraphModelTreeNode" , "selectors" : { "GraphModelTreeNode(GraphModel)" : 1}},{ "className" : "org::jgraph::graph::CellViewRenderer" , "selectors" : { "getRendererComponent(JGraph,CellView,boolean,boolean,boolean)" : 1}},{ "className" : "com::jgraph::layout::hierarchical::JGraphNetworkSimplexLayering" , "selectors" : { "balance()" : 1 , "feasibleTree(JGraphFacade,JGraphHierarchyModel)" : 1 , "normalize()" : 1}},{ "className" : "org::jgraph::event::GraphModelListener" , "selectors" : { "graphChanged(GraphModelEvent)" : 1}},{ "className" : "org::jgraph::event::GraphLayoutCacheEvent::GraphLayoutCacheChange" , "selectors" : { "getChanged()" : 5 , "getContext()" : 2 , "getDirtyRegion()" : 2 , "getInserted()" : 5 , "getRemoved()" : 4 , "getSource()" : 2 , "setDirtyRegion(Rectangle2D)" : 1}},{ "className" : "com::jgraph::example::adapter::JGraphSQLEntity" , "selectors" : { "JGraphSQLEntity(Object)" : 2 , "JGraphSQLEntity(Object,JGraphSQLEntity)" : 1 , "JGraphSQLEntity(Object,Object,JGraphSQLEntity)" : 3 , "getID()" : 20 , "getParent()" : 1 , "setID(Object)" : 4 , "setParent(JGraphSQLEntity)" : 2}},{ "className" : "com::jgraph::navigation::GraphNavigator" , "selectors" : { "GraphNavigator(JGraph)" : 1 , "createInstance(JGraph)" : 2 , "getBackingGraph()" : 1 , "getCurrentGraph()" : 4 , "getMaximumScale()" : 1 , "getParentGraph(Component)" : 1 , "getParentScrollPane(Component)" : 4 , "getScrollPane()" : 1 , "setBackingGraph(JGraph)" : 1 , "setCurrentGraph(JGraph)" : 2 , "updateScale()" : 5}},{ "className" : "org::jgraph::graph::Port" , "selectors" : { "addEdge(Object)" : 1 , "edges()" : 1 , "getAnchor()" : 1 , "removeEdge(Object)" : 1 , "setAnchor(Port)" : 1}},{ "className" : "org::jgraph::plaf::basic::BasicGraphUI" , "selectors" : { "autoscroll(JGraph,Point)" : 3 , "cancelEditing(JGraph)" : 6 , "completeEditing()" : 5 , "completeEditing(boolean,boolean,boolean)" : 5 , "completeUIInstall()" : 1 , "completeUIUninstall()" : 1 , "createActionMap()" : 1 , "createCellEditorListener()" : 3 , "createCellRendererPane()" : 1 , "createContext(JGraph,Object[])" : 1 , "createGraphLayoutCacheListener()" : 1 , "createGraphModelListener()" : 1 , "createGraphSelectionListener()" : 1 , "createHandle(GraphContext)" : 1 , "createKeyListener()" : 1 , "createMouseListener()" : 1 , "createPropertyChangeListener()" : 1 , "createTransferHandler()" : 1 , "drawGraph(Graphics,Rectangle2D)" : 4 , "getEditorLocation(Object,Dimension2D,Point2D)" : 1 , "getFocusedCell()" : 3 , "getInputMap(int)" : 2 , "getPreferredMinSize()" : 5 , "getPreferredSize(JComponent)" : 1 , "installComponents()" : 1 , "installDefaults()" : 1 , "installKeyboardActions()" : 1 , "installListeners()" : 1 , "isAddToSelectionEvent(MouseEvent)" : 2 , "isConstrainedMoveEvent(MouseEvent)" : 4 , "isEditing(JGraph)" : 2 , "isForceMarqueeEvent(MouseEvent)" : 1 , "isToggleSelectionEvent(MouseEvent)" : 4 , "org" : 2 , "paintBackground(Graphics)" : 1 , "paintBackgroundComponent(Graphics,Component,Rectangle)" : 1 , "paintBackgroundImage(Graphics,Rectangle)" : 1 , "paintCell(Graphics,CellView,Rectangle2D,boolean)" : 7 , "paintCells(Graphics,Rectangle2D)" : 1 , "paintForeground(Graphics)" : 1 , "paintGrid(double,Graphics,Rectangle2D)" : 1 , "paintOverlay(Graphics)" : 2 , "paintPorts(Graphics,CellView[])" : 2 , "prepareForUIInstall()" : 1 , "selectCellForEvent(Object,MouseEvent)" : 4 , "selectCellsForEvent(Object[],MouseEvent)" : 1 , "setGraphLayoutCache(GraphLayoutCache)" : 2 , "setInsertionLocation(Point)" : 2 , "setMarquee(BasicMarqueeHandler)" : 1 , "setModel(GraphModel)" : 2 , "setSelectionModel(GraphSelectionModel)" : 3 , "startEditing(Object,MouseEvent)" : 2 , "toggleSelectionCellForEvent(Object,MouseEvent)" : 2 , "uninstallComponents()" : 1 , "uninstallKeyboardActions()" : 1 , "uninstallListeners()" : 1 , "updateCachedPreferredSize()" : 2 , "updateHandle()" : 4 , "updateSize()" : 13}},{ "className" : "org::jgraph::example::JGraphIconView::MultiLinedEditor::ModifiedEditorContainer" , "selectors" : { "MultiLinedEditor" : 1}},{ "className" : "com::jgraph::example::panelexample::PortLabelVertexView" , "selectors" : { "PortLabelVertexView(Object)" : 1}},{ "className" : "com::jgraph::example::fastgraph::FastGraphUI" , "selectors" : { "FastGraphUI()" : 1}},{ "className" : "java::util::Hashtable" , "selectors" : { "Hashtable()" : 1240 , "Hashtable(Map)" : 1 , "Hashtable(Map<? extends K,? extends V>)" : 37 , "Hashtable(int)" : 129 , "Hashtable(int,float)" : 13 , "Hashtable<String,Object>(int)" : 3 , "clear()" : 251 , "clone()" : 91 , "contains(Object)" : 27 , "containsKey(Object)" : 591 , "containsValue(Object)" : 5 , "elements()" : 128 , "entrySet()" : 107 , "equals(Object)" : 12 , "get(Object)" : 3422 , "hashCode()" : 7 , "isEmpty()" : 74 , "java" : 122 , "keySet()" : 200 , "keys()" : 518 , "put(K,V)" : 10249 , "putAll(Map<? extends K,? extends V>)" : 133 , "remove(Object)" : 607 , "size()" : 339 , "toString()" : 26 , "values()" : 53}},{ "className" : "com::jgraph::layout::hierarchical::JGraphHierarchicalLayout" , "selectors" : { "JGraphHierarchicalLayout()" : 3 , "JGraphHierarchicalLayout(boolean)" : 1 , "run(JGraphFacade)" : 1 , "setInterRankCellSpacing(double)" : 1 , "setIntraCellSpacing(double)" : 1 , "setOrientation(int)" : 1}},{ "className" : "org::jgraph::graph::ParentMap" , "selectors" : { "ParentMap()" : 14 , "ParentMap(Object[],Object)" : 2 , "addEntries(Object[],Object)" : 1 , "addEntry(Object,Object)" : 13 , "clone(Map)" : 1 , "create(GraphModel,Object[],boolean,boolean)" : 3 , "entries()" : 6 , "getChangedNodes()" : 4 , "toString()" : 1}},{ "className" : "org::jgraph::graph::CellView" , "selectors" : { "changeAttributes(GraphLayoutCache,Map)" : 4 , "childUpdated()" : 1 , "getAllAttributes()" : 50 , "getAttributes()" : 11 , "getBounds()" : 67 , "getCell()" : 93 , "getChildViews()" : 6 , "getEditor()" : 2 , "getHandle(GraphContext)" : 1 , "getParentView()" : 40 , "getPerimeterPoint(EdgeView,Point2D,Point2D)" : 7 , "getRendererComponent(JGraph,boolean,boolean,boolean)" : 5 , "intersects(JGraph,Rectangle2D)" : 5 , "isLeaf()" : 20 , "refresh(GraphLayoutCache,CellMapper,boolean)" : 13 , "removeFromParent()" : 1 , "update(GraphLayoutCache)" : 7}},{ "className" : "org::jgraph::example::LiveJGraphDemo::AddRootInternalFrameAction" , "selectors" : { "AddRootInternalFrameAction()" : 1}},{ "className" : "org::jgraph::plaf::basic::BasicGraphUI::ComponentHandler" , "selectors" : { "ComponentHandler()" : 1 , "getScrollPane()" : 1 , "startTimer()" : 2}},{ "className" : "java::awt::geom::Ellipse2D::Float" , "selectors" : { "Ellipse2D" : 25 , "java" : 2}},{ "className" : "com::jgraph::io::svg::SVGEdgeWriter" , "selectors" : { "SVGEdgeWriter()" : 1 , "createNode(SVGGraphWriter,Document,CellView,double,double)" : 1}},{ "className" : "org::jgraph::example::JGraphIconView" , "selectors" : { "JGraphIconView(Object)" : 1}},{ "className" : "com::jgraph::layout::hierarchical::JGraphMedianHybridCrossingReduction" , "selectors" : { "JGraphMedianHybridCrossingReduction()" : 1 , "calculateCrossings(JGraphHierarchyModel)" : 2 , "calculateRankCrossing(int,JGraphHierarchyModel)" : 1 , "medianRank(int,boolean)" : 2 , "medianValue(Collection,int)" : 1 , "transpose(int,JGraphHierarchyModel)" : 1 , "weightedMedian(int,JGraphHierarchyModel)" : 1}},{ "className" : "java::awt::event::ActionEvent" , "selectors" : { "ActionEvent(Object,int,String)" : 159 , "ActionEvent(Object,int,String,int)" : 16 , "ActionEvent(Object,int,String,long,int)" : 9 , "getActionCommand()" : 929 , "getModifiers()" : 17 , "getWhen()" : 2 , "java" : 34 , "paramString()" : 1}},{ "className" : "com::jgraph::layout::JGraphFacade" , "selectors" : { "JGraphFacade(GraphLayoutCache,Object[],boolean,boolean,boolean,boolean,JGraphCostFunction,JGraphAlgebra)" : 1 , "JGraphFacade(GraphModel,GraphLayoutCache,Object[],boolean,boolean,boolean,boolean,JGraphCostFunction,JGraphAlgebra)" : 3 , "JGraphFacade(GraphModel,Object[],boolean,boolean,boolean,boolean,JGraphCostFunction,JGraphAlgebra)" : 1 , "JGraphFacade(JGraph)" : 1 , "JGraphFacade(JGraph,Object[])" : 3 , "JGraphFacade(JGraph,Object[],boolean,boolean,boolean,boolean)" : 1 , "JGraphFacade(JGraph,Object[],boolean,boolean,boolean,boolean,JGraphCostFunction,JGraphAlgebra)" : 1 , "circle(Collection)" : 1 , "createNestedMap(boolean,Point2D)" : 1 , "createNestedMap(boolean,boolean)" : 6 , "determineLayoutHierarchies()" : 1 , "dfs(Object,CellVisitor)" : 3 , "dfs(Object,Object,Object,CellVisitor,Set,Set,int,int)" : 1 , "dfs(Object,Object,Object,CellVisitor,Set,int,int)" : 2 , "disableRouting(Object)" : 3 , "findTreeRoots()" : 2 , "getAll()" : 4 , "getAttributes()" : 9 , "getAttributes(Object)" : 7 , "getBounds(Object)" : 18 , "getCellBounds()" : 3 , "getCells(Collection,boolean,boolean)" : 4 , "getEdges()" : 2 , "getEdges(Object)" : 2 , "getEdgesBetween(Object,Object,boolean)" : 1 , "getGraphBounds()" : 3 , "getGraphOrigin()" : 1 , "getHiddenChildren(Object)" : 4 , "getIncomingEdges(Object,Set,boolean,boolean)" : 8 , "getLocation(Object)" : 11 , "getLocations(Object[])" : 2 , "getMaxSize(Collection)" : 1 , "getNeighbours(Object,Set,boolean)" : 9 , "getNeighbours(Object,boolean)" : 1 , "getOutgoingEdges(Object,Set,boolean,boolean)" : 3 , "getPath(Object,Object,int,JGraphCostFunction)" : 1 , "getPoints(Object)" : 4 , "getRootAt(int)" : 7 , "getRootCount()" : 8 , "getRoots()" : 5 , "getSize(Object)" : 1 , "getSource(Object)" : 2 , "getTarget(Object)" : 4 , "getUnconnectedVertices(boolean)" : 1 , "getVertices()" : 15 , "getVertices(Collection,boolean)" : 1 , "isDirected()" : 6 , "isEdge(Object)" : 3 , "isMoveable(Object)" : 6 , "isRoot(Object)" : 2 , "isVertex(Object)" : 12 , "populateGroupHierarchies(Object)" : 2 , "randomize(Collection,int,int)" : 1 , "resetControlPoints()" : 2 , "resetControlPoints(boolean,Routing)" : 1 , "run(JGraphLayout,boolean)" : 2 , "scale(Collection,double,double,double,double)" : 3 , "setBounds(Map)" : 1 , "setBounds(Object,Rectangle2D)" : 5 , "setDirected(boolean)" : 15 , "setIgnoresCellsInGroups(boolean)" : 3 , "setIgnoresHiddenCells(boolean)" : 3 , "setIgnoresUnconnectedCells(boolean)" : 3 , "setLocation(Object,double,double)" : 15 , "setLocation(Object,double,double,boolean)" : 3 , "setLocations(Object[],double[][])" : 3 , "setLoggerLevel(Level)" : 1 , "setPoints(Object,List)" : 3 , "setRoots(List)" : 3 , "tilt(Collection,int,int)" : 1 , "translate(Object,double,double)" : 3 , "translateCells(Collection,double,double)" : 5}},{ "className" : "com::jgraph::example::JGraphGraphFactory::FactoryConfigDialog" , "selectors" : { "FactoryConfigDialog()" : 2 , "applyValues()" : 2 , "configureLayout(JGraph,int,Map,Map)" : 1}},{ "className" : "org::jgraph::example::IconExample::IconGraph" , "selectors" : { "IconGraph(GraphModel)" : 1}},{ "className" : "com::jgraph::example::panelexample::BusinessObjectEditor2" , "selectors" : { "BusinessObjectEditor2()" : 1}},{ "className" : "com::jgraph::example::fastgraph::FastEdge" , "selectors" : { "FastEdge(Object,AttributeMap)" : 1}},{ "className" : "com::jgraph::layout::demo::JGraphLayoutPanel" , "selectors" : { "<Initializer>()::JTaskPane" : 1 , "JGraphLayoutPanel()" : 2 , "JGraphLayoutPanel()::JTaskPaneGroup" : 3 , "createCellAttributes(Point2D)" : 3 , "createEdgeAttributes()" : 3 , "createFacade(JGraph)" : 1 , "createProgressMonitor(JGraph,Stoppable)" : 1 , "execute(JGraphLayout)" : 8 , "init()" : 2 , "reset()" : 4}},{ "className" : "org::jgraph::example::GroupingRemoving" , "selectors" : { "createVertex(String,double,double,double,double,Color,boolean)" : 2}},{ "className" : "org::jgraph::plaf::basic::BasicGraphDropTargetListener" , "selectors" : { "autoscroll(JComponent,Point)" : 1 , "cleanup()" : 2 , "dragEnter(DropTargetDragEvent)" : 1 , "dropActionChanged(DropTargetDragEvent)" : 1 , "getComponent(DropTargetEvent)" : 1 , "initPropertiesIfNecessary()" : 1 , "restoreComponentState(JComponent)" : 1 , "restoreComponentStateForDrop(JComponent)" : 1 , "saveComponentState(JComponent)" : 1 , "updateAutoscrollRegion(JComponent)" : 2 , "updateInsertionLocation(JComponent,Point)" : 1}},{ "className" : "com::jgraph::example::mycellview::JGraphRoundRectView::ActivityRenderer" , "selectors" : { "ActivityRenderer()" : 1}},{ "className" : "org::jgraph::example::IconExample::InvisiblePortRenderer" , "selectors" : { "InvisiblePortRenderer()" : 1}},{ "className" : "org::jgraph::graph::DefaultCellViewFactory" , "selectors" : { "DefaultCellViewFactory()" : 8 , "createEdgeView(Edge)" : 1 , "createEdgeView(Object)" : 1 , "createPortView(Object)" : 1 , "createPortView(Port)" : 1 , "createVertexView(Object)" : 2 , "createView(GraphModel,Object)" : 1}},{ "className" : "com::jgraph::components::labels::MultiLineVertexRenderer" , "selectors" : { "MultiLineVertexRenderer()" : 1 , "getArcSize(int,int)" : 1 , "getCirclePerimeterPoint(VertexView,Point2D,Point2D)" : 1 , "getDiamondPerimeterPoint(VertexView,Point2D,Point2D)" : 1 , "getTrianglePerimeterPoint(VertexView,Point2D,Point2D)" : 1 , "intersection(Point2D,Point2D,Point2D,Point2D)" : 6 , "paintBackground(Graphics)" : 1 , "paintFoldingIcon(Graphics)" : 1 , "paintRichText(Graphics)" : 1 , "paintShapeBorder(Graphics)" : 2}},{ "className" : "com::jgraph::example::GraphSelectionDemo::MyMouseListener" , "selectors" : { "MyMouseListener()" : 1}},{ "className" : "javax::swing::Scrollable" , "selectors" : { "getScrollableUnitIncrement(Rectangle,int,int)" : 4}},{ "className" : "org::jgraph::example::GraphEd" , "selectors" : { "GraphEd()" : 1 , "connect(Port,Port)" : 1 , "createCellAttributes(Point2D)" : 4 , "createDefaultEdge()" : 1 , "createDefaultGraphCell()" : 1 , "createEdgeAttributes()" : 3 , "createGraph()" : 1 , "createGroupCell()" : 2 , "createMarqueeHandler()" : 1 , "createPopupMenu(Point,Object)" : 1 , "createStatusBar()" : 3 , "createToolBar()" : 5 , "getGraph()" : 8 , "getVersion()" : 1 , "group(Object[])" : 2 , "insert(Point2D)" : 2 , "installListeners(JGraph)" : 2 , "populateContentPane()" : 1 , "redo()" : 2 , "setCopy(Action)" : 1 , "setCut(Action)" : 1 , "setPaste(Action)" : 1 , "setRedo(Action)" : 1 , "setRemove(Action)" : 1 , "setUndo(Action)" : 1 , "toBack(Object[])" : 1 , "toFront(Object[])" : 1 , "undo()" : 2 , "ungroup(Object[])" : 1 , "uninstallListeners(JGraph)" : 1 , "updateHistoryButtons()" : 6 , "valueChanged(GraphSelectionEvent)" : 3}},{ "className" : "org::jgraph::plaf::basic::BasicGraphUI::RootHandle" , "selectors" : { "RootHandle(GraphContext)" : 1 , "constrainDrag(MouseEvent,double,double,double,double)" : 1 , "findUnselectedInnermostGroup(double,double)" : 1 , "findViewForPoint(Point2D)" : 1 , "getInitialLocation(Object[])" : 1 , "initOffscreen()" : 2 , "overlay(Graphics)" : 3 , "startDragging(MouseEvent)" : 1}},{ "className" : "com::jgraph::example::GraphSelectionDemo" , "selectors" : { "GraphSelectionDemo(GraphModel)" : 1}},{ "className" : "com::jgraph::algebra::JGraphAlgebra" , "selectors" : { "JGraphAlgebra()" : 1 , "createPriorityQueue()" : 2 , "createUnionFind(Object[])" : 2 , "getConnectionComponents(GraphModel,Object[],Object[])" : 1 , "getMinimumSpanningTree(GraphModel,Object[],JGraphCostFunction,boolean)" : 1 , "getSharedInstance()" : 3 , "getShortestPath(GraphModel,Object,Object,JGraphCostFunction,int,boolean)" : 1 , "sort(Object[],JGraphCostFunction)" : 1 , "sum(Object[],JGraphCostFunction)" : 1}},{ "className" : "com::jgraph::example::GraphSelectionDemo::SyncTreeSelectionListener" , "selectors" : { "SyncTreeSelectionListener()" : 1}},{ "className" : "org::jgraph::graph::DefaultGraphModel::GraphModelEdit" , "selectors" : { "GraphModelEdit(Object[],Object[],Map,ConnectionSet,ParentMap)" : 2 , "changeChildCount(Map,Object,int)" : 2 , "execute()" : 8 , "filterParents(Map,int)" : 1 , "handleEmptyGroups(Object[])" : 1 , "undo()" : 1}},{ "className" : "com::jgraph::example::mycellview::GPCellViewFactory" , "selectors" : { "GPCellViewFactory()" : 1 , "setViewClass(Map,String)" : 1}},{ "className" : "com::jgraph::example::JGraphFoldingManager" , "selectors" : { "JGraphFoldingManager()" : 1 , "getGroupByFoldingHandle(JGraph,Point2D)" : 1}},{ "className" : "org::jgraph::graph::GraphTransferHandler" , "selectors" : { "GraphTransferHandler()" : 1 , "create(JGraph,Object[],Map,Rectangle2D,ConnectionSet,ParentMap)" : 1 , "createTransferable(JComponent)" : 1 , "createTransferable(JGraph,Object[])" : 1 , "getInsertionOffset(JGraph,int,Rectangle2D)" : 1 , "handleExternalDrop(JGraph,Object[],Map,ConnectionSet,ParentMap,double,double)" : 1 , "importDataImpl(JComponent,Transferable)" : 1}},{ "className" : "com::jgraph::layout::hierarchical::model::JGraphHierarchyNode" , "selectors" : { "JGraphHierarchyNode(Object)" : 1 , "isAncestor(JGraphHierarchyNode)" : 2}},{ "className" : "com::jgraph::components::labels::RichTextEditor::ModifiedEditorContainer" , "selectors" : { "RichTextEditor" : 1}},{ "className" : "org::jgraph::graph::DefaultGraphModel::GraphModelLayerEdit" , "selectors" : { "GraphModelLayerEdit(Object[],int)" : 1 , "execute()" : 4 , "getParentList(Object)" : 1 , "updateListeners()" : 1 , "updateNext()" : 2}},{ "className" : "com::jgraph::example::fastgraph::FastGraphModel" , "selectors" : { "FastGraphModel()" : 2}},{ "className" : "com::jgraph::io::svg::SVGGraphWriter" , "selectors" : { "SVGGraphWriter()" : 1 , "createGradient(Document,String,String,String)" : 1 , "createNode(Document,String,GraphLayoutCache,int)" : 1 , "createRoot(Document,double,double,int)" : 1 , "createShapeNode(Document,int,Rectangle2D,double,double,String,String,String,float,double,boolean)" : 2 , "createTextNode(Document,String,String,Font,String,int,int)" : 4 , "getGradient(Document,String,String)" : 1 , "getLabels(CellView)" : 2 , "write(OutputStream,String,GraphLayoutCache,int)" : 1}},{ "className" : "com::jgraph::layout::JGraphExampleLayoutCache::JGraphMoveSelectionFacade" , "selectors" : { "JGraphMoveSelectionFacade(JGraph,Object[])" : 1}},{ "className" : "com::jgraph::example::fastgraph::FastCellViewFactory" , "selectors" : { "FastCellViewFactory()" : 1 , "createEdgeView(Object)" : 1 , "createPortView(Object)" : 1 , "createVertexView(Object)" : 1}},{ "className" : "org::jgraph::plaf::basic::BasicGraphUI::GraphLayoutCacheHandler" , "selectors" : { "GraphLayoutCacheHandler()" : 1}},{ "className" : "org::jgraph::event::GraphLayoutCacheListener" , "selectors" : { "graphLayoutCacheChanged(GraphLayoutCacheEvent)" : 1}},{ "className" : "com::jgraph::navigation::NavigationExample" , "selectors" : { "NavigationExample()" : 1 , "createToolBar()" : 1}},{ "className" : "com::jgraph::example::JGraphGraphFactory" , "selectors" : { "JGraphGraphFactory()" : 3 , "calcCellPosition(int,int)" : 4 , "center(Window)" : 1 , "connectChildrenVertices(GraphModel,Object[],Object,Map)" : 1 , "connectNextLevel(GraphModel,Object[],Map)" : 3 , "createEdge(Map,Port,Port)" : 4 , "createVertex(Object,Point2D,Map)" : 4 , "getMaxNodesPerTreeLevel()" : 1 , "getNumEdges()" : 1 , "getNumNodes()" : 1 , "initialise(JGraph)" : 3 , "insert(GraphModel,Object[])" : 2 , "insert(GraphModel,Object[],Map,ConnectionSet,ParentMap)" : 1 , "insertConnectedGraphSampleData(JGraph,Map,Map)" : 2 , "insertFullyConnectedGraphSampleData(JGraph,Map,Map)" : 1 , "insertGraph(JGraph,int,Map,Map)" : 8 , "insertIntoGraph(JGraph,Object[])" : 3 , "insertSampleFlowGraph(JGraph,Map,Map)" : 1 , "insertTreeSampleData(GraphModel,Map,Map)" : 1 , "insertTreeSampleData(JGraph,Map,Map)" : 3 , "isInsertIntoModel()" : 1 , "setInsertIntoModel(boolean)" : 3 , "setMaxNodesPerTreeLevel(int)" : 1 , "setNumEdges(int)" : 2 , "setNumNodes(int)" : 2}},{ "className" : "com::jgraph::components::labels::RedirectingEditor::RealCellEditor" , "selectors" : { "RedirectingEditor" : 1 , "stopCellEditing()" : 1}},{ "className" : "com::jgraph::example::adapter::JGraphAdapterBackend" , "selectors" : { "attributesChanged(JGraphAdapterModel,Object,Map,boolean)" : 1 , "cellRemoved(JGraphAdapterModel,Object,boolean)" : 1 , "commit()" : 1 , "edgeAdded(JGraphAdapterModel,Object,Object,Object,boolean)" : 1 , "parentChanged(JGraphAdapterModel,Object,Object,boolean)" : 1 , "rollback()" : 1 , "sourceChanged(JGraphAdapterModel,Object,Object,boolean)" : 1 , "targetChanged(JGraphAdapterModel,Object,Object,boolean)" : 1 , "vertexAdded(JGraphAdapterModel,Object,boolean)" : 1}},{ "className" : "com::jgraph::example::portlabels::PortLabelCell" , "selectors" : { "PortLabelCell(Object)" : 2 , "addLeftPort(int,Port,Map,ParentMap)" : 1 , "addRightPort(int,Port,Map,ParentMap)" : 1}},{ "className" : "org::jgraph::example::GraphEd::MyEdgeHandle" , "selectors" : { "MyEdgeHandle(EdgeView,GraphContext)" : 1}},{ "className" : "javax::swing::event::SwingPropertyChangeSupport" , "selectors" : { "SwingPropertyChangeSupport(Object)" : 1}},{ "className" : "com::jgraph::navigation::NavigationToolBar" , "selectors" : { "NavigationToolBar()" : 1 , "createToolBar(NavigationExample,JGraph)" : 1}},{ "className" : "java::util::WeakHashMap" , "selectors" : { "WeakHashMap()" : 64 , "WeakHashMap(Map<? extends K,? extends V>)" : 4 , "WeakHashMap(int)" : 6 , "clear()" : 10 , "containsKey(Object)" : 3 , "entrySet()" : 3 , "get(Object)" : 53 , "isEmpty()" : 1 , "java" : 2 , "keySet()" : 20 , "put(K,V)" : 57 , "remove(Object)" : 12 , "size()" : 4 , "values()" : 3}},{ "className" : "com::jgraph::layout::tree::JGraphCompactTreeLayout::CompactTreeNode" , "selectors" : { "CompactTreeNode(Object)" : 1 , "getCell()" : 2}},{ "className" : "org::jgraph::plaf::basic::BasicGraphUI::GraphDropTargetListener" , "selectors" : { "GraphDropTargetListener()" : 1}},{ "className" : "com::jgraph::example::mycellmodeleditor::MyEditorComponent" , "selectors" : { "MyEditorComponent(CellEditor)" : 1 , "getValue()" : 1 , "installValue(BusinessObjectWrapper)" : 2}},{ "className" : "com::jgraph::example::panelexample::FlyweightUIComponent" , "selectors" : { "FlyweightUIComponent(CellEditor)" : 2 , "getValue()" : 1 , "installAttributes(Object,CellView,boolean,JGraph)" : 4 , "installValue(BusinessObjectWrapper2,boolean)" : 2}},{ "className" : "com::jgraph::example::GraphEdXMenuBar" , "selectors" : { "GraphEdXMenuBar(GraphEdX,JGraphGraphFactory)" : 3 , "createRadioMenuItem(ButtonGroup,Action)" : 1}},{ "className" : "com::jgraph::example::adapter::JGraphAdapterModel::BusinessModelEdit" , "selectors" : { "BusinessModelEdit(Object[],Object[],Map,ConnectionSet,ParentMap)" : 1}},{ "className" : "com::jgraph::layout::JGraphModelFacade" , "selectors" : { "JGraphModelFacade(GraphModel,Object[])" : 2 , "JGraphModelFacade(GraphModel,Object[],boolean,boolean,boolean,boolean)" : 2 , "JGraphModelFacade(GraphModel,Object[],boolean,boolean,boolean,boolean,JGraphCostFunction,JGraphAlgebra)" : 1 , "getNeighbours(Object,Set,boolean)" : 1}},{ "className" : "java::awt::geom::Point2D::Double" , "selectors" : { "Double()" : 1 , "Point2D" : 1143 , "getX()" : 74 , "getY()" : 70 , "setLocation(double,double)" : 26}},{ "className" : "org::jgraph::example::IconExample" , "selectors" : { "IconExample()" : 1}},{ "className" : "com::jgraph::example::portlabels::PortLabelVertexView" , "selectors" : { "PortLabelVertexView(Object)" : 1}},{ "className" : "com::jgraph::layout::hierarchical::JGraphGreedyCycleRemover" , "selectors" : { "getOrderedVertices(JGraphFacade)" : 1}},{ "className" : "com::jgraph::layout::DataGraphLayoutCache" , "selectors" : { "DataGraphLayoutCache(GraphModel,CellViewFactory)" : 2 , "DataGraphLayoutCache(GraphModel,CellViewFactory,CellView[],CellView[],boolean)" : 1 , "DataGraphLayoutCache(GraphModel,CellViewFactory,boolean)" : 1}},{ "className" : "com::jgraph::example::portlabels::PortLabelVertexView::PortLabelVertexRenderer" , "selectors" : { "PortLabelVertexRenderer()" : 1 , "drawPortLabel(Graphics,String,double,double,Color,boolean)" : 2 , "getRendererComponent(JGraph,CellView,boolean,boolean,boolean)" : 1 , "installAttributes(CellView)" : 1 , "paintPortLabels(Graphics)" : 1}},{ "className" : "com::jgraph::layout::tree::OrganizationalChart::OrganizationalTreeNode" , "selectors" : { "OrganizationalTreeNode(Object)" : 1 , "positionVerticalChildren(Point2D)" : 2}},{ "className" : "com::jgraph::example::GraphSelectionDemo::SyncGraphSelectionListener" , "selectors" : { "SyncGraphSelectionListener()" : 1 , "computeTreePathSelection(ArrayList,Object,Object)" : 2 , "valueChanged(GraphSelectionEvent)" : 1}},{ "className" : "com::jgraph::example::fastgraph::FastGraph::MyFastGraph" , "selectors" : { "MyFastGraph(GraphModel)" : 1}},{ "className" : "com::jgraph::example::fastgraph::FastCircleView::JGraphEllipseRenderer" , "selectors" : { "JGraphEllipseRenderer()" : 1}},{ "className" : "org::jgraph::example::GraphEd::MyMarqueeHandler" , "selectors" : { "MyMarqueeHandler()" : 3 , "createHighlight()" : 1 , "drawConnectorLine(Graphics)" : 2 , "getHighlightBounds(JGraph,CellView)" : 1 , "getSourcePortAt(Point2D)" : 2 , "getTargetPortAt(Point2D)" : 1 , "highlight(JGraph,CellView)" : 2 , "mouseDragged(MouseEvent)" : 1 , "mousePressed(MouseEvent)" : 1 , "mouseReleased(MouseEvent)" : 1 , "paintConnector(Color,Color,Graphics)" : 2 , "paintPort(Graphics)" : 1}},{ "className" : "org::jgraph::graph::EdgeView::EdgeHandle" , "selectors" : { "EdgeHandle(EdgeView,GraphContext)" : 2 , "createConnectionSet(EdgeView,boolean)" : 1 , "createHighlight()" : 1 , "getHighlightBounds(JGraph,CellView)" : 1 , "getRelativeLabelPosition(EdgeView,Point2D)" : 1 , "highlight(JGraph,CellView)" : 3 , "invalidate()" : 2 , "isAddPointEvent(MouseEvent)" : 2 , "isConstrainedMoveEvent(MouseEvent)" : 1 , "isEditing()" : 5 , "isRemovePointEvent(MouseEvent)" : 3 , "isSourceEditing()" : 2 , "isTargetEditing()" : 2 , "mouseReleased(MouseEvent)" : 2 , "overlay(Graphics)" : 10 , "paint(Graphics)" : 1 , "paintPort(Graphics,CellView)" : 2 , "processNestedMap(Map,boolean)" : 2 , "reloadPoints(EdgeView)" : 2 , "snap(boolean,Point2D)" : 2}},{ "className" : "com::jgraph::layout::hierarchical::JGraphMinimumCycleRemover" , "selectors" : { "JGraphMinimumCycleRemover()" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::regexp::mozilla::js1_2::SourceTest" , "selectors" : { "test(String)" : 8}},{ "className" : "com::gargoylesoftware::htmlunit::UnexpectedPage" , "selectors" : { "UnexpectedPage(WebResponse,WebWindow)" : 1 , "getWebResponse()" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::regexp::mozilla::js1_2::OctalTest" , "selectors" : { "test(String)" : 3 , "test(String,String)" : 6}},{ "className" : "com::gargoylesoftware::htmlunit::libraries::Dojo102Test" , "selectors" : { "eq(String,Iterator<HtmlElement>)" : 646}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::regexp::mozilla::js1_2::AlphanumericTest" , "selectors" : { "test(String,boolean)" : 11}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::host::html::HTMLCollection::DomHtmlAttributeChangeListenerImpl" , "selectors" : { "DomHtmlAttributeChangeListenerImpl()" : 2}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::regexp::mozilla::js1_2::CompileTest" , "selectors" : { "test(String,String)" : 8}},{ "className" : "com::gargoylesoftware::htmlunit::Page" , "selectors" : { "cleanUp()" : 1 , "getEnclosingWindow()" : 5 , "getUrl()" : 1 , "getWebResponse()" : 79 , "initialize()" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::regexp::mozilla::js1_2::FlagsTest" , "selectors" : { "test(String)" : 8}},{ "className" : "com::gargoylesoftware::htmlunit::libraries::ExtJS22Test" , "selectors" : { "core_spotlight_isDisabled(HtmlButton)" : 15 , "getPage(String,String)" : 7 , "getVersion()" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::html::HTMLParserListener" , "selectors" : { "error(String,URL,int,int,String)" : 1 , "warning(String,URL,int,int,String)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::host::UIEvent" , "selectors" : { "UIEvent(DomNode,String)" : 2 , "jsxFunction_initUIEvent(String,boolean,boolean,Object,int)" : 2 , "setDetail(long)" : 4 , "setMetaKey(boolean)" : 3}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::host::html::HTMLElement::ProxyDomNode" , "selectors" : { "ProxyDomNode(SgmlPage,DomNode,boolean)" : 2 , "getDomNode()" : 2 , "isAppend()" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::CollectingAlertHandler" , "selectors" : { "CollectingAlertHandler()" : 2 , "CollectingAlertHandler(List<String>)" : 181 , "getCollectedAlerts()" : 3}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::SimpleScriptableTest" , "selectors" : { "getFileNames(String)" : 2 , "isParentOf(String,String,boolean)" : 8 , "testHostClassNames(String)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::regexp::HtmlUnitRegExpProxyTest" , "selectors" : { "buildHtml(String)" : 4 , "test(String,String,boolean[])" : 3 , "testEvaluate(String)" : 23}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::regexp::mozilla::js1_2::AsteriskTest" , "selectors" : { "test(String)" : 12}},{ "className" : "com::gargoylesoftware::htmlunit::DownloadedContent::OnFile" , "selectors" : { "DownloadedContent" : 2}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::configuration::ClassConfiguration::BrowserInfo" , "selectors" : { "BrowserInfo(String)" : 1 , "getBrowserName()" : 1 , "valueEquals(Object)" : 2}},{ "className" : "com::gargoylesoftware::htmlunit::html::HtmlTable::RowIterator" , "selectors" : { "RowIterator()" : 2 , "hasNext()" : 5 , "next()" : 3 , "nextRow()" : 3 , "setNextRow(DomNode)" : 4}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::host::DocumentTest" , "selectors" : { "createEvent_FF(String)" : 4 , "designMode(String)" : 2 , "importNode(boolean)" : 2}},{ "className" : "org::w3c::dom::css::CSSImportRule" , "selectors" : { "getHref()" : 1 , "getMedia()" : 1 , "getStyleSheet()" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::html::HtmlIsIndex" , "selectors" : { "HtmlIsIndex(String,String,SgmlPage,Map<String,DomAttr>)" : 1 , "getPromptAttribute()" : 1 , "getValue()" : 5 , "setValue(String)" : 3}},{ "className" : "com::gargoylesoftware::htmlunit::BrowserStatement" , "selectors" : { "BrowserStatement(???)" : 2 , "evaluateSolo()" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::html::HtmlButton" , "selectors" : { "HtmlButton(String,String,SgmlPage,Map<String,DomAttr>)" : 1 , "getNameAttribute()" : 2 , "getTypeAttribute()" : 3 , "getValueAttribute()" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::html::HtmlAnchorTest" , "selectors" : { "getUrl(WebWindow)" : 6}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::IEWeirdSyntaxTest" , "selectors" : { "doTestTryCatchFinally(String,String)" : 9 , "doTestWithEvaluatorExceptionExceptForIE(String)" : 2}},{ "className" : "com::gargoylesoftware::htmlunit::TopLevelWindow" , "selectors" : { "TopLevelWindow(String,WebClient)" : 3 , "close()" : 9 , "getOpener()" : 2 , "setOpener(WebWindow)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::html::HtmlAttributeChangeEvent" , "selectors" : { "HtmlAttributeChangeEvent(HtmlElement,String,String)" : 3 , "getHtmlElement()" : 6 , "getName()" : 3 , "getValue()" : 3}},{ "className" : "com::gargoylesoftware::htmlunit::html::IEConditionalCommentExpressionEvaluator" , "selectors" : { "evaluate(String,BrowserVersion)" : 8 , "parseVersion(String)" : 4}},{ "className" : "com::gargoylesoftware::htmlunit::html::IEConditionalCommentExpressionEvaluatorTest" , "selectors" : { "doTest(String)" : 35}},{ "className" : "com::gargoylesoftware::htmlunit::WebWindowNotFoundException" , "selectors" : { "WebWindowNotFoundException(String)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::regexp::mozilla::js1_2::BeginLineTest" , "selectors" : { "test(String)" : 6}},{ "className" : "com::gargoylesoftware::htmlunit::html::FrameWindow" , "selectors" : { "FrameWindow(BaseFrame)" : 1 , "getEnclosingPage()" : 6 , "getFrameElement()" : 9 , "getName()" : 2 , "getParentWindow()" : 2}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::host::html::HTMLOptionElement" , "selectors" : { "getDomNodeOrNull()" : 12 , "jsxGet_value()" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::util::URLCreator::URLCreatorStandard" , "selectors" : { "URLCreatorStandard()" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::host::Namespace" , "selectors" : { "Namespace()" : 2 , "jsxGet_name()" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::NativeDateTest" , "selectors" : { "createHTMLTestMethods(String,String[])" : 14}},{ "className" : "com::gargoylesoftware::htmlunit::WebWindowListener" , "selectors" : { "webWindowClosed(WebWindowEvent)" : 1 , "webWindowContentChanged(WebWindowEvent)" : 1 , "webWindowOpened(WebWindowEvent)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::host::MimeTypeArray" , "selectors" : { "MimeTypeArray()" : 1 , "setParentScope(???)" : 1 , "setPrototype(???)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::html::SiblingDomNodeList" , "selectors" : { "SiblingDomNodeList(DomNode)" : 1 , "get(int)" : 1 , "getLength()" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::background::JavaScriptFunctionJob" , "selectors" : { "JavaScriptFunctionJob(???)" : 2}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::host::TreeWalkerTest" , "selectors" : { "test(String)" : 12 , "test2(String)" : 10}},{ "className" : "com::gargoylesoftware::htmlunit::html::HtmlUnknownElement" , "selectors" : { "HtmlUnknownElement(SgmlPage,String,String,Map<String,DomAttr>)" : 2}},{ "className" : "com::gargoylesoftware::htmlunit::html::xpath::LowerCaseFunction" , "selectors" : { "execute(XPathContext)::XString" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::configuration::JavaScriptConfigurationTest" , "selectors" : { "checkForIgnore(String,String)" : 1 , "createInputSourceForFile(String)" : 3 , "getMemoryStats()" : 1 , "getType(String)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::host::NavigatorTest" , "selectors" : { "testAttribute(String,String)" : 15 , "testAttribute(WebClient,String,String)" : 2 , "testCookieEnabled(boolean)" : 2}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::host::ObjectsTest" , "selectors" : { "getObjects(BrowserVersion)" : 6 , "getSimulatedObjects(BrowserVersion)" : 6 , "getValueOf(List<String>,String)" : 2}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::host::html::HTMLScriptElementTest" , "selectors" : { "scriptForEvent(String)" : 2}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::host::ElementTest" , "selectors" : { "html(String)" : 5 , "namespace(String)" : 5 , "xml(String)" : 5}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::regexp::mozilla::js1_2::IntervalTest" , "selectors" : { "test(String)" : 15}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::host::html::HTMLInputElement" , "selectors" : { "getHtmlInputOrDie()" : 2 , "jsxSet_selectionEnd(int)" : 1 , "jsxSet_selectionStart(int)" : 1 , "jsxSet_type(String)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::html::HtmlElementTest::HtmlAttributeChangeListenerTestImpl" , "selectors" : { "HtmlAttributeChangeListenerTestImpl()" : 8 , "getCollectedValues()" : 8}},{ "className" : "com::gargoylesoftware::htmlunit::html::HtmlOrderedList" , "selectors" : { "HtmlOrderedList(String,String,SgmlPage,Map<String,DomAttr>)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::JavaScriptEngineTest::CountingJavaScriptEngine" , "selectors" : { "CountingJavaScriptEngine(WebClient)" : 2 , "getCallCount()" : 3 , "getCompileCount()" : 2 , "getExecuteScriptCount()" : 2 , "getExecutionCount()" : 3}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::host::html::HTMLAnchorElement" , "selectors" : { "getDefaultValue(HtmlElement)" : 2 , "getUrl()" : 15 , "setUrl(URL)" : 7}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::background::JavaScriptStringJob" , "selectors" : { "JavaScriptStringJob(int,Integer,String,WebWindow,String)" : 2}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::host::css::CSSStyleDeclarationTest" , "selectors" : { "getAttribute(String,String[])" : 9 , "properties(String[])" : 1 , "properties2(String[])" : 1 , "removeAttribute(String,String[])" : 9 , "setAttribute(String,String[])" : 9 , "styleShorthand(String,String,String)" : 32}},{ "className" : "com::gargoylesoftware::htmlunit::ElementNotFoundException" , "selectors" : { "ElementNotFoundException(String,String,String)" : 14}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::host::StorageList" , "selectors" : { "StorageList()" : 1 , "setParentScope(???)" : 1 , "setPrototype(???)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::host::XPathResult" , "selectors" : { "XPathResult()" : 1 , "init(List<? extends Object>,int)" : 1 , "setParentScope(???)" : 1 , "setPrototype(???)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::host::TextRange" , "selectors" : { "TextRange(HTMLElement)" : 1 , "TextRange(Range)" : 3 , "setParentScope(???)" : 3 , "setPrototype(???)" : 3}},{ "className" : "com::gargoylesoftware::htmlunit::util::EncodingSniffer::Attribute" , "selectors" : { "Attribute(String,String,int)" : 11 , "getName()" : 1 , "getUpdatedIndex()" : 3 , "getValue()" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::html::IElementFactory" , "selectors" : { "createElement(SgmlPage,String,Attributes)" : 14 , "createElementNS(SgmlPage,String,String,Attributes)" : 3}},{ "className" : "com::gargoylesoftware::htmlunit::html::DoTypeProcessor" , "selectors" : { "acceptChar(char)" : 2 , "doType(String,int,int,char,boolean,boolean,boolean)" : 3 , "typeDone(String,int)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::source::JQueryExtractorSample" , "selectors" : { "getVersion()" : 3 , "loadPage()" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::regexp::mozilla::js1_2::EndLineTest" , "selectors" : { "test(String)" : 6}},{ "className" : "com::gargoylesoftware::htmlunit::libraries::LibraryDependencyTest" , "selectors" : { "getContent(String)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::html::DomTextTest" , "selectors" : { "readPositionAmongParentChildren(DomNode)" : 5 , "testAsText(String,String)" : 27 , "testPlainText(String,String)" : 5}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::regexp::mozilla::js1_2::BackspaceTest" , "selectors" : { "test(String)" : 6}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::IEConditionalCompilationTest" , "selectors" : { "testScript(String)" : 12}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::regexp::mozilla::js1_2::StringSplitTest" , "selectors" : { "test(String)" : 9}},{ "className" : "com::gargoylesoftware::htmlunit::html::DomDocumentType" , "selectors" : { "DomDocumentType(SgmlPage,String,String,String)" : 2 , "getInternalSubset()" : 1 , "getName()" : 1 , "getPublicId()" : 1 , "getSystemId()" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::WebClientWaitForBackgroundJobsTest" , "selectors" : { "assertMaxTestRunTime(long)" : 9 , "startTimedTest()" : 9}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::host::html::HTMLStyleElement" , "selectors" : { "jsxGet_sheet()" : 8 , "jsxGet_sheet()::InputSource" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::host::html::HTMLImageElement::ImageOnLoadAction" , "selectors" : { "ImageOnLoadAction(Page)" : 2}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::host::html::HTMLSelectElementTest" , "selectors" : { "testDefaultSelectedValue(String,boolean,String[])" : 10}},{ "className" : "com::gargoylesoftware::htmlunit::html::DomNodeTest::DomChangeListenerTestImpl" , "selectors" : { "DomChangeListenerTestImpl()" : 4 , "getCollectedValues()" : 3}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::regexp::mozilla::js1_2::DotTest" , "selectors" : { "test(String)" : 10}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::regexp::mozilla::js1_2::BackslashTest" , "selectors" : { "test(String)" : 5}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::regexp::mozilla::js1_2::DigitTest" , "selectors" : { "test(String,String)" : 10}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::host::html::HTMLFrameElement" , "selectors" : { "getFrame()" : 6}},{ "className" : "com::gargoylesoftware::htmlunit::html::HtmlDefinition" , "selectors" : { "HtmlDefinition(String,String,SgmlPage,Map<String,DomAttr>)" : 1}},{ "className" : "java::lang::Iterable" , "selectors" : { "iterator()" : 480}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::regexp::mozilla::js1_2::ParenthesesTest" , "selectors" : { "test(String)" : 13}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::host::XPathNSResolver" , "selectors" : { "XPathNSResolver()" : 1 , "setElement(Node)" : 1 , "setParentScope(???)" : 1 , "setPrototype(???)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::host::html::HTMLTableSectionElementTest" , "selectors" : { "align(String)" : 3 , "ch(String)" : 3 , "chOff(String)" : 3 , "vAlign(String)" : 3}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::host::xml::XMLHttpRequest" , "selectors" : { "XMLHttpRequest(boolean)" : 2 , "isAuthorizedHeader(String)" : 10 , "isSameOrigin(URL,URL)" : 1 , "jsxFunction_open(String,Object,boolean,String,String)::UsernamePasswordCredentials" : 1 , "prepareRequest(Object)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::regexp::mozilla::js1_2::CharacterClassTest" , "selectors" : { "test(String)" : 13}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::host::html::HTMLTextAreaElementTest" , "selectors" : { "selection(int,int)" : 3 , "value(String)" : 2}},{ "className" : "com::gargoylesoftware::htmlunit::SimpleWebServer" , "selectors" : { "SimpleWebServer(int,byte[])" : 1 , "start()" : 1 , "stop()" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::DownloadedContent::InMemory" , "selectors" : { "DownloadedContent" : 7}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::host::EventHandler" , "selectors" : { "EventHandler(DomNode,String,String)" : 3}},{ "className" : "com::gargoylesoftware::htmlunit::html::HtmlDivision" , "selectors" : { "HtmlDivision(String,String,SgmlPage,Map<String,DomAttr>)" : 7}},{ "className" : "com::gargoylesoftware::htmlunit::html::HtmlStrong" , "selectors" : { "HtmlStrong(String,String,SgmlPage,Map<String,DomAttr>)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::html::DomChangeListener" , "selectors" : { "nodeAdded(DomChangeEvent)" : 1 , "nodeDeleted(DomChangeEvent)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::host::ActiveXObjectImpl" , "selectors" : { "ActiveXObjectImpl(Object)" : 2 , "ActiveXObjectImpl(String)" : 2 , "wrapIfNecessary(Object)" : 2}},{ "className" : "com::gargoylesoftware::htmlunit::WebWindowEvent" , "selectors" : { "WebWindowEvent(WebWindow,int,Page,Page)" : 14 , "getEventType()" : 2 , "getNewPage()" : 4 , "getOldPage()" : 5 , "getWebWindow()" : 7 , "isEqual(Object,Object)" : 3}},{ "className" : "com::gargoylesoftware::htmlunit::html::SimpleHTMLParserListener" , "selectors" : { "SimpleHTMLParserListener()" : 1 , "format(String,URL,int,int)" : 2}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::host::NamespaceCollection" , "selectors" : { "NamespaceCollection(HTMLDocument)" : 1 , "jsxFunction_item(Object)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::host::html::HTMLTableSectionElement" , "selectors" : { "getValidVAlignValues()" : 2}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::regexp::mozilla::js1_2::TestTest" , "selectors" : { "test(String)" : 8}},{ "className" : "com::gargoylesoftware::htmlunit::util::FalsifyingWebConnection" , "selectors" : { "createWebResponse(WebRequest,String,String)" : 1 , "createWebResponse(WebRequest,String,String,int,String)" : 2}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::host::html::HTMLFormElementTest" , "selectors" : { "changeFormActionAfterSubmit(String,String)" : 4 , "changes_after_call_to_submit(String,String)" : 4 , "doTestInputWithName(String)" : 2 , "doTestProperty(String,String,String,String)" : 5 , "enctypeTest(String,String,String)" : 8 , "fieldNamedSubmit(String,String)" : 11 , "submitToSameUrlFromLinkOnclick(String)" : 2}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::host::css::CSSStyleSheetTest" , "selectors" : { "doTest(String,String)" : 5 , "mediaOnLinkTag(String)" : 5 , "mediaOnStyleTag(String)" : 5 , "mediaRule(String)" : 4 , "npe_root()::InputSource" : 1 , "npe_root()::SACParserCSS21" : 1 , "parseSelector(CSSStyleSheet,String)::InputSource" : 1 , "testSelects(String,boolean,boolean,boolean,boolean)" : 13 , "testSelects(String,boolean,boolean,boolean,boolean)::InputSource" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::host::SelectionTest" , "selectors" : { "aLittleBitOfEverything(String)" : 2 , "test(String,String,String)" : 22}},{ "className" : "com::gargoylesoftware::htmlunit::html::HtmlTableHeaderCell" , "selectors" : { "HtmlTableHeaderCell(String,String,SgmlPage,Map<String,DomAttr>)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::FormEncodingType" , "selectors" : { "FormEncodingType(String)" : 2 , "getInstance(String)" : 1 , "getName()" : 3}},{ "className" : "com::gargoylesoftware::htmlunit::html::HtmlBody" , "selectors" : { "HtmlBody(String,String,SgmlPage,Map<String,DomAttr>,boolean)" : 2}},{ "className" : "com::gargoylesoftware::htmlunit::WebTestCase" , "selectors" : { "assertEquals(Object,Object)" : 1313 , "assertEquals(String,String,URL)" : 10 , "assertEquals(String,String[],List<String>)" : 6 , "assertEquals(String,URL)" : 164 , "assertEquals(String,URL,URL)" : 3 , "assertEquals(String[],List<String>)" : 313 , "assertEquals(URL,URL)" : 63 , "assertFalse(boolean)" : 111 , "assertNull(Object)" : 44 , "assertTrue(String,boolean)" : 48 , "assertTrue(boolean)" : 291 , "clone(T)" : 11 , "createInstrumentationScript(List<String>)" : 1 , "createNewWebClient()" : 4 , "createTestPageForRealBrowserIfNeeded(String,List<String>)" : 2 , "createTestPageForRealBrowserIfNeeded(String,String[])" : 14 , "expandExpectedAlertsVariables(URL)" : 3 , "findRunningJUnitTestMethod()" : 2 , "getBrowserVersion()" : 179 , "getDefaultUrl()" : 139 , "getExpectedAlerts()" : 117 , "getFileAsStream(String)" : 1 , "getFileObject(String)" : 1 , "getJavaScriptThreads()" : 6 , "getMockConnection(HtmlPage)" : 30 , "getMockWebConnection()" : 154 , "getWebClient()" : 388 , "getWebClientWithMockWebConnection()" : 16 , "isPublicTestMethod(Method)" : 1 , "loadPage(BrowserVersion,String,List<String>)" : 86 , "loadPage(BrowserVersion,String,List<String>,URL)" : 12 , "loadPage(String)" : 308 , "loadPage(String,List<String>)" : 61 , "loadPage(String,List<String>,URL)" : 2 , "loadPage(WebClient,String,List<String>)" : 12 , "loadPage(WebClient,String,List<String>,URL)" : 6 , "loadPageWithAlerts(String)" : 578 , "loadPageWithAlerts(String,URL,int)" : 8 , "notYetImplemented()" : 3 , "readChildElementsText(HtmlElement)" : 2 , "releaseResources()" : 1 , "setBrowserVersion(BrowserVersion)" : 1 , "setExpectedAlerts(String[])" : 23 , "testHTMLFile(String)" : 4}},{ "className" : "com::gargoylesoftware::htmlunit::CookieManagerTest" , "selectors" : { "basicBehavior()::BasicCookieStore" : 2 , "trailing_slash()::org" : 1}},{ "className" : "org::w3c::dom::DOMException" , "selectors" : { "DOMException(short,String)" : 506}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::regexp::mozilla::js1_2::QuestionMarkTest" , "selectors" : { "test(String)" : 11}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::regexp::mozilla::js1_2::HexadecimalTest" , "selectors" : { "test(String)" : 3 , "test(String,String)" : 6}},{ "className" : "com::gargoylesoftware::htmlunit::protocol::about::AboutURLConnection" , "selectors" : { "AboutURLConnection(URL)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::html::HtmlNoEmbed" , "selectors" : { "HtmlNoEmbed(String,String,SgmlPage,Map<String,DomAttr>)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::regexp::mozilla::js1_2::PlusTest" , "selectors" : { "test(String)" : 8}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::JavaScriptEngineTest" , "selectors" : { "getJavaScriptContent(String)" : 10 , "loadPageAndCollectScripts(String,List<String>)" : 1 , "prototypeScope(String,String)" : 5}},{ "className" : "com::gargoylesoftware::htmlunit::html::HtmlAddress" , "selectors" : { "HtmlAddress(String,String,SgmlPage,Map<String,DomAttr>)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::libraries::Sarissa0993Test" , "selectors" : { "getVersion()" : 1 , "test(String)" : 6 , "test(String,String)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::host::css::StyleSheetList" , "selectors" : { "StyleSheetList(HTMLDocument)" : 1 , "jsxFunction_item(int)" : 2 , "jsxGet_length()" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::gae::GAEUtils" , "selectors" : { "isGaeMode()" : 3}},{ "className" : "com::gargoylesoftware::htmlunit::html::HtmlTableCell" , "selectors" : { "HtmlTableCell(String,String,SgmlPage,Map<String,DomAttr>)" : 2 , "getColumnSpan()" : 1 , "getEnclosingRow()" : 1 , "getRowSpan()" : 1 , "getScriptObject(???)" : 4}},{ "className" : "com::gargoylesoftware::htmlunit::html::DomCDataSection" , "selectors" : { "DomCDataSection(SgmlPage,String)" : 4}},{ "className" : "com::gargoylesoftware::htmlunit::util::KeyDataPair" , "selectors" : { "KeyDataPair(String,File,String,String)" : 3 , "getContentType()" : 4 , "getData()" : 5 , "getFile()" : 9 , "setData(byte[])" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::host::xml::XMLSerializerTest" , "selectors" : { "constructPageContent(String)" : 6}},{ "className" : "com::gargoylesoftware::htmlunit::WebResponseData" , "selectors" : { "WebResponseData(DownloadedContent,int,String,List<NameValuePair>)" : 6 , "WebResponseData(byte[],int,String,List<NameValuePair>)" : 10 , "getBody()" : 4 , "getInputStream()" : 2 , "getResponseHeaders()" : 3 , "getStatusCode()" : 1 , "getStatusMessage()" : 1 , "getStream(InputStream,List<NameValuePair>)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::background::JavaScriptExecutor::JobExecutor" , "selectors" : { "JobExecutor(JavaScriptJobManager,JavaScriptJob)" : 1 , "getEarliestJob()" : 3 , "getJobManager()" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::html::HtmlFileInputTest" , "selectors" : { "testFileInput(String)" : 6 , "testUploadFileWithNonASCIIName_HttpClient()::DefaultHttpClient" : 1 , "testUploadFileWithNonASCIIName_HttpClient()::FileBody" : 1 , "testUploadFileWithNonASCIIName_HttpClient()::HashMap" : 70 , "testUploadFileWithNonASCIIName_HttpClient()::HttpPost" : 1 , "testUploadFileWithNonASCIIName_HttpClient()::MultipartEntity" : 33}},{ "className" : "com::gargoylesoftware::htmlunit::Cache::Entry" , "selectors" : { "Entry(String,Object)" : 2 , "touch()" : 2}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::host::css::CSSStyleDeclaration::CssValue" , "selectors" : { "get(ComputedCSSStyleDeclaration)" : 1 , "get(HTMLElement)" : 2 , "getWindowDefaultValue()" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::html::DomAttr" , "selectors" : { "DomAttr(SgmlPage,String,String,String,boolean)" : 6 , "getCanonicalXPath()" : 1 , "getName()" : 17 , "getNodeName()" : 8 , "getNodeType()" : 1 , "getNodeValue()" : 8 , "getOwnerElement()" : 3 , "getScriptObject(???)" : 4 , "getSpecified()" : 2 , "getTextContent()" : 2 , "getValue()" : 21 , "isId()" : 1 , "setTextContent(String)" : 1 , "setValue(String)" : 12}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::host::html::HTMLFrameElementTest" , "selectors" : { "testLocation(String)" : 2}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::host::html::HTMLTextAreaElement" , "selectors" : { "jsxGet_value()" : 1 , "jsxSet_selectionEnd(int)" : 1 , "jsxSet_selectionStart(int)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::host::css::CSSImportRule" , "selectors" : { "CSSImportRule(CSSStyleSheet,CSSRule)" : 1 , "getImportRule()" : 3}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::SimpleScriptableProxy" , "selectors" : { "getDelegee()" : 16}},{ "className" : "com::gargoylesoftware::htmlunit::html::HtmlLabel" , "selectors" : { "HtmlLabel(String,String,SgmlPage,Map<String,DomAttr>)" : 1 , "click()" : 4 , "getForAttribute()" : 2 , "getReferencedElement()" : 5}},{ "className" : "java::lang::NoClassDefFoundError" , "selectors" : { "NoClassDefFoundError(String)" : 12}},{ "className" : "org::w3c::dom::css::CSSValue" , "selectors" : { "getCssText()" : 3 , "setCssText(String)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::IncorrectnessListener" , "selectors" : { "notify(String,Object)" : 5}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::regexp::mozilla::js1_2::EverythingTest" , "selectors" : { "test(String)" : 4 , "test(String,String)" : 3}},{ "className" : "com::gargoylesoftware::htmlunit::html::DisabledElement" , "selectors" : { "isDisabled()" : 6}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::host::KeyboardEvent" , "selectors" : { "KeyboardEvent(DomNode,String,int,boolean,boolean,boolean)" : 4 , "charToKeyCode(int)" : 2}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::host::html::HTMLIFrameElement" , "selectors" : { "getFrame()" : 6}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::regexp::HtmlUnitRegExpProxy::RegExpData" , "selectors" : { "RegExpData(???)" : 3 , "getJavaFlags()" : 2 , "getJavaPattern()" : 2 , "hasFlag(char)" : 2}},{ "className" : "com::gargoylesoftware::htmlunit::html::HtmlListItem" , "selectors" : { "HtmlListItem(String,String,SgmlPage,Map<String,DomAttr>)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::DummyWebResponse" , "selectors" : { "getWebRequest()" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::html::HtmlButtonInput" , "selectors" : { "HtmlButtonInput(String,String,SgmlPage,Map<String,DomAttr>)" : 2}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::host::Window::DomHtmlAttributeChangeListenerImpl" , "selectors" : { "DomHtmlAttributeChangeListenerImpl()" : 1 , "nodeChanged(DomNode)" : 5}},{ "className" : "com::gargoylesoftware::htmlunit::html::Util" , "selectors" : { "getFollowingAxisIterator(DomNode)::anonymous(NodeIterator)" : 2 , "getFollowingSiblingAxisIterator(DomNode)::anonymous(NodeIterator)" : 1 , "getPrecedingAxisIterator(DomNode)::anonymous(NodeIterator)" : 2 , "getPrecedingSiblingAxisIterator(DomNode)::anonymous(NodeIterator)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::PluginConfiguration::MimeType" , "selectors" : { "PluginConfiguration" : 1 , "getDescription()" : 1 , "getSuffixes()" : 1 , "getType()" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::html::xpath::HtmlUnitPrefixResolver" , "selectors" : { "HtmlUnitPrefixResolver(Node)" : 1 , "getNamespace(DomElement,String)" : 3}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::host::css::CSSPrimitiveValue" , "selectors" : { "CSSPrimitiveValue(HTMLElement,CSSPrimitiveValue)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::html::DomComment" , "selectors" : { "DomComment(SgmlPage,String)" : 4}},{ "className" : "com::gargoylesoftware::htmlunit::libraries::MochiKitTest" , "selectors" : { "doTest(String)" : 13}},{ "className" : "com::gargoylesoftware::htmlunit::html::HtmlPreformattedText" , "selectors" : { "HtmlPreformattedText(String,String,SgmlPage,Map<String,DomAttr>)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::util::MapWrapper" , "selectors" : { "MapWrapper<String,DomAttr>(Map<String,DomAttr>)" : 2 , "clear()" : 1 , "containsKey(Object)" : 1 , "get(Object)" : 1 , "isEmpty()" : 1 , "keySet()" : 2 , "put(K,V)" : 1 , "remove(Object)" : 1 , "size()" : 1 , "values()" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::regexp::mozilla::js1_2::StringSearchTest" , "selectors" : { "test(String)" : 8}},{ "className" : "com::gargoylesoftware::htmlunit::util::UrlUtils" , "selectors" : { "createNewUrl(String,String,int,String,String,String)" : 7 , "decode(String)" : 1 , "encode(String,BitSet,String)" : 4 , "encodeAnchor(String)" : 1 , "encodeUrl(URL,boolean)" : 3 , "getUrlWithNewHost(URL,String)" : 6 , "getUrlWithNewPath(URL,String)" : 3 , "getUrlWithNewPort(URL,int)" : 6 , "getUrlWithNewProtocol(URL,String)" : 3 , "getUrlWithNewQuery(URL,String)" : 4 , "getUrlWithNewRef(URL,String)" : 6 , "isValidScheme(String)" : 1 , "parseUrl(String)" : 2 , "removeLeadingSlashPoints(String)" : 2 , "resolveUrl(String,String)" : 47 , "resolveUrl(URL,String)" : 3 , "resolveUrl(Url,String)" : 1 , "toUrlSafe(String)" : 4 , "toUrlUnsafe(String)" : 3}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::configuration::ClassConfiguration" , "selectors" : { "ClassConfiguration(String,String,String,String,boolean)" : 22 , "addConstant(String)" : 1 , "addFunction(String)" : 5 , "addProperty(String,boolean,boolean)" : 12 , "constants()" : 1 , "equals(Object)" : 11 , "functionKeys()" : 4 , "getExtendedClassName()" : 8 , "getFunctionInfo(String)" : 1 , "getFunctionMethod(String)" : 2 , "getHostClass()" : 10 , "getHtmlClassname()" : 1 , "getJsConstructor()" : 1 , "getPropertyInfo(String)" : 4 , "getPropertyReadMethod(String)" : 3 , "getPropertyWriteMethod(String)" : 3 , "isJsObject()" : 5 , "propertyKeys()" : 2 , "setBrowser(String,String)" : 4}},{ "className" : "com::gargoylesoftware::htmlunit::WebClient::LoadJob" , "selectors" : { "LoadJob(WebWindow,String,URL)" : 1 , "LoadJob(WebWindow,String,WebResponse)" : 1 , "isOutdated()" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::SimpleScriptableProxy::T" , "selectors" : { "get(???)" : 2 , "has(???)" : 2 , "hasInstance(???)" : 1 , "put(???)" : 2}},{ "className" : "com::gargoylesoftware::htmlunit::WebRequest" , "selectors" : { "WebRequest(URL)" : 50 , "WebRequest(URL,HttpMethod)" : 12 , "WebRequest(WebRequest,URL)" : 1 , "buildUrlWithNewFile(URL,String)" : 2 , "getAdditionalHeaders()" : 22 , "getCharset()" : 10 , "getCredentialsProvider(???)" : 3 , "getEncodingType()" : 6 , "getHttpMethod()" : 24 , "getProxyHost()" : 20 , "getProxyPort()" : 18 , "getRequestBody()" : 9 , "getRequestParameters()" : 12 , "getUrl()" : 255 , "isAdditionalHeader(String)" : 1 , "isSocksProxy()" : 2 , "removeAdditionalHeader(String)" : 1 , "removeDots(String)" : 1 , "setAdditionalHeader(String,String)" : 21 , "setAdditionalHeaders(Map<String,String>)" : 1 , "setCharset(String)" : 4 , "setCredentialsProvider(???)" : 1 , "setEncodingType(FormEncodingType)" : 1 , "setHttpMethod(HttpMethod)" : 8 , "setProxyHost(String)" : 5 , "setProxyPort(int)" : 5 , "setRequestBody(String)" : 2 , "setRequestParameters(List<NameValuePair>)" : 3 , "setSocksProxy(boolean)" : 4 , "setUrl(URL)" : 6 , "setUrl(URL)::UsernamePasswordCredentials" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::DownloadedContent" , "selectors" : { "getInputStream()" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::html::HtmlFormTest" , "selectors" : { "testSubmitRequestCharset(String,String,String,String)" : 6 , "testUrlAfterSubmit(String,String,String)" : 10 , "testUrlAfterSubmit(URL,String,String,String)" : 4}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::HtmlUnitContextFactory" , "selectors" : { "HtmlUnitContextFactory(WebClient)" : 1 , "call(???)" : 4 , "getTimeout()" : 1 , "preProcess(HtmlPage,String,String,int,HtmlElement)" : 1 , "setDebugger(???)" : 2 , "setTimeout(long)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::WebResponse" , "selectors" : { "WebResponse(WebResponseData,URL,HttpMethod,long)" : 8 , "WebResponse(WebResponseData,WebRequest,long)" : 10 , "getContentAsBytes()" : 1 , "getContentAsStream()" : 20 , "getContentAsString()" : 28 , "getContentAsString(String)" : 3 , "getContentCharset()" : 10 , "getContentCharsetOrNull()" : 4 , "getContentType()" : 24 , "getLoadTime()" : 6 , "getResponseHeaderValue(String)" : 12 , "getResponseHeaders()" : 7 , "getStatusCode()" : 28 , "getStatusMessage()" : 11 , "getWebRequest()" : 214}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::HtmlUnitWrapFactory" , "selectors" : { "HtmlUnitWrapFactory()" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::FailingHttpStatusCodeException" , "selectors" : { "FailingHttpStatusCodeException(String,WebResponse)" : 2 , "FailingHttpStatusCodeException(WebResponse)" : 2 , "buildMessage(WebResponse)" : 1 , "getResponse()" : 2 , "getStatusCode()" : 5 , "getStatusMessage()" : 3}},{ "className" : "org::w3c::dom::css::CSSRule" , "selectors" : { "getCssText()" : 1 , "getParentRule()" : 1 , "getType()" : 5 , "setCssText(String)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::PromptHandler" , "selectors" : { "handlePrompt(Page,String)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::util::UrlUtils::Url" , "selectors" : { "Url()" : 1 , "Url(Url)" : 1 , "toString()" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::host::DOMImplementation" , "selectors" : { "DOMImplementation()" : 1 , "setParentScope(???)" : 1 , "setPrototype(???)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::html::HtmlWordBreak" , "selectors" : { "HtmlWordBreak(String,String,SgmlPage,Map<String,DomAttr>)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::host::html::HTMLDocumentTest" , "selectors" : { "checkCookie(Cookie,String,String,String,String,boolean,Date)" : 9 , "compatMode(String)" : 8 , "designMode_selectionRange(String)" : 2 , "getCookieWriteHtmlCode()" : 2 , "testLastModified(List<NameValuePair>)" : 3}},{ "className" : "org::w3c::dom::css::CSSStyleSheet" , "selectors" : { "getCssRules()" : 3 , "insertRule(String,int)" : 4}},{ "className" : "com::gargoylesoftware::htmlunit::html::HtmlTextInputTest" , "selectors" : { "selection2(String,int,int)" : 6 , "type_StringIndexOutOfBoundsException(String)" : 3}},{ "className" : "com::gargoylesoftware::htmlunit::html::DomNode::ChildIterator" , "selectors" : { "ChildIterator()" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::html::DomNamespaceNode" , "selectors" : { "DomNamespaceNode(String,String,SgmlPage)" : 2 , "getLocalName()" : 4 , "getNamespaceURI()" : 12 , "getPrefix()" : 9 , "getQualifiedName()" : 7 , "setPrefix(String)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::UrlFetchWebConnection" , "selectors" : { "UrlFetchWebConnection(WebClient)" : 5 , "produceWebResponseForGAEProcolHack(URL)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::host::OfflineResourceList" , "selectors" : { "OfflineResourceList()" : 1 , "setParentScope(???)" : 1 , "setPrototype(???)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::host::css::CSSValue" , "selectors" : { "CSSValue(HTMLElement,CSSValue)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::WebResponseTest" , "selectors" : { "illegalCharset(String,String)" : 4 , "recognizeBOM(String,byte[])" : 3}},{ "className" : "com::gargoylesoftware::htmlunit::html::HtmlStrike" , "selectors" : { "HtmlStrike(String,String,SgmlPage,Map<String,DomAttr>)" : 1}},{ "className" : "java::lang::Compiler" , "selectors" : { "Compiler()" : 2 , "compile(???)" : 2}},{ "className" : "com::gargoylesoftware::htmlunit::attachment::Attachment" , "selectors" : { "Attachment(Page)" : 1 , "getPage()" : 5 , "getSuggestedFilename()" : 3 , "isAttachment(WebResponse)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::html::HtmlBlockQuote" , "selectors" : { "HtmlBlockQuote(String,String,SgmlPage,Map<String,DomAttr>)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::background::JavaScriptExecutor" , "selectors" : { "JavaScriptExecutor(WebClient)" : 3 , "addWindow(WebWindow)" : 3 , "contains(JavaScriptJobManager)" : 1 , "getEarliestJob()" : 2 , "killThread()" : 1 , "pumpEventLoop(long)" : 8 , "shutdown()" : 3 , "startThreadIfNeeded()" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::host::html::HTMLFormElement" , "selectors" : { "addElements(String,Iterable<HtmlElement>,List<HtmlElement>)" : 2 , "findElements(String)" : 2 , "getHtmlForm()" : 22 , "isAccessibleByIdOrName(HtmlElement,String)" : 2 , "jsxGet_elements()" : 5 , "jsxGet_target()" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::util::EncodingSnifferTest" , "selectors" : { "testContentType(String,String)" : 25 , "testHeader(String,String,String)" : 6 , "testMeta(String,String)" : 21 , "testXmlDeclaration(String,String)" : 14}},{ "className" : "com::gargoylesoftware::htmlunit::html::DomProcessingInstruction" , "selectors" : { "DomProcessingInstruction(SgmlPage,String,String)" : 2 , "getData()" : 2 , "getNodeName()" : 1 , "getNodeValue()" : 1 , "getTarget()" : 2 , "setData(String)" : 2 , "setNodeValue(String)" : 2}},{ "className" : "com::gargoylesoftware::htmlunit::NicelyResynchronizingAjaxController" , "selectors" : { "NicelyResynchronizingAjaxController()" : 3 , "init()" : 2 , "isInOriginalThread()" : 2}},{ "className" : "com::gargoylesoftware::htmlunit::TextUtil" , "selectors" : { "startsWithIgnoreCase(String,String)" : 16 , "stringToByteArray(String)" : 3 , "stringToByteArray(String,String)" : 6 , "toInputStream(String)" : 3 , "toInputStream(String,String)" : 2}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::AttributeCaseTest" , "selectors" : { "setupAttributeTest(String,String)" : 2 , "setupGetAttributeTest(String,String)" : 9 , "setupSetAttributeTest(String,String,String)" : 3}},{ "className" : "com::gargoylesoftware::htmlunit::html::HtmlS" , "selectors" : { "HtmlS(String,String,SgmlPage,Map<String,DomAttr>)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::util::WebConnectionWrapper" , "selectors" : { "WebConnectionWrapper(WebClient)" : 1 , "WebConnectionWrapper(WebConnection)" : 3 , "getResponse(WebRequest)" : 4}},{ "className" : "com::gargoylesoftware::htmlunit::libraries::YuiTest" , "selectors" : { "doTest(BrowserVersion,String,List<String>)" : 12 , "doTest(BrowserVersion,String,List<String>,String)" : 5 , "doTest(BrowserVersion,String,List<String>,String,long)" : 2}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::StrictErrorReporter" , "selectors" : { "StrictErrorReporter()" : 1 , "error(String,String,int,String,int)::EvaluatorException" : 1 , "format(String,String,String,int,String,int)" : 3 , "runtimeError(String,String,int,String,int)::EvaluatorException" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::host::html::HTMLOptionsCollection" , "selectors" : { "HTMLOptionsCollection(SimpleScriptable)" : 1 , "get(???)" : 1 , "initialize(HtmlSelect)" : 1 , "jsxGet_length()" : 4 , "jsxSet_length(int)" : 1 , "put(???)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::html::HtmlDivisionTest" , "selectors" : { "testAsText(String,String)" : 7}},{ "className" : "com::gargoylesoftware::htmlunit::html::HtmlKeyboard" , "selectors" : { "HtmlKeyboard(String,String,SgmlPage,Map<String,DomAttr>)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::host::html::HTMLDocumentProxy" , "selectors" : { "HTMLDocumentProxy(WebWindow)" : 1 , "getDelegee()" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::html::HtmlDefinitionTerm" , "selectors" : { "HtmlDefinitionTerm(String,String,SgmlPage,Map<String,DomAttr>)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::html::HtmlArea" , "selectors" : { "HtmlArea(String,String,SgmlPage,Map<String,DomAttr>)" : 1 , "containsPoint(int,int)" : 1 , "doClickAction()" : 1 , "getCoordsAttribute()" : 7 , "getHrefAttribute()" : 3 , "getShapeAttribute()" : 1 , "getTargetAttribute()" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::html::HtmlHeading6" , "selectors" : { "HtmlHeading6(String,String,SgmlPage,Map<String,DomAttr>)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::host::Location" , "selectors" : { "Location()" : 1 , "getHash(boolean)" : 2 , "getUrl()" : 13 , "initialize(Window)" : 1 , "jsxGet_href()" : 4 , "jsxSet_hash(String)" : 1 , "jsxSet_href(String)" : 4 , "setParentScope(???)" : 1 , "setPrototype(???)" : 1 , "setUrl(URL)" : 6}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::background::JavaScriptJobManagerImpl" , "selectors" : { "JavaScriptJobManagerImpl(WebWindow)" : 3 , "addJob(JavaScriptJob,Page)" : 20 , "getEarliestJob()" : 2 , "getJobCount()" : 25 , "getWindow()" : 2 , "printQueue()" : 1 , "removeAllJobs()" : 2 , "removeJob(int)" : 2 , "runJob(JavaScriptJob)" : 1 , "setCurrentlyRunningJob(JavaScriptJob)" : 1 , "waitForJobs(long)" : 9 , "waitForJobsStartingBefore(long)" : 3}},{ "className" : "com::gargoylesoftware::htmlunit::html::HtmlAreaTest" , "selectors" : { "createWebClient(String)" : 3}},{ "className" : "com::gargoylesoftware::htmlunit::html::HtmlImageDownloadTest" , "selectors" : { "getHtmlElementToTest(String)" : 6}},{ "className" : "com::gargoylesoftware::htmlunit::Cache" , "selectors" : { "Cache()" : 3 , "cache(String,CSSStyleSheet)" : 1 , "cacheIfPossible(WebRequest,WebResponse,Object)" : 3 , "clear()" : 1 , "deleteOverflow()" : 3 , "getCachedObject(WebRequest)" : 3 , "getCachedStyleSheet(String)" : 1 , "getSize()" : 3 , "isCacheable(WebRequest,WebResponse)" : 1 , "isDynamicContent(WebResponse)" : 9 , "isJavaScript(WebResponse)" : 6 , "parseDateHeader(WebResponse,String)" : 2 , "setMaxSize(int)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::host::BoxObject" , "selectors" : { "BoxObject(HTMLElement)" : 2 , "jsxGet_x()" : 1 , "jsxGet_y()" : 1 , "setParentScope(???)" : 1 , "setPrototype(???)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::JavaScriptEngine::FallbackCaller" , "selectors" : { "FallbackCaller()" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::html::HtmlMarquee" , "selectors" : { "HtmlMarquee(String,String,SgmlPage,Map<String,DomAttr>)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::host::html::HTMLListElement" , "selectors" : { "jsxGet_compact()" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::regexp::HtmlUnitRegExpProxy" , "selectors" : { "HtmlUnitRegExpProxy(???)" : 1 , "computeReplacementValue(String,String,Matcher)" : 11 , "doReplacement(String,String,Matcher,boolean)" : 2 , "escapeJSCurly(String)" : 9 , "isEscaped(String,int)" : 6 , "jsRegExpToJavaRegExp(String)" : 14}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::host::Document" , "selectors" : { "get(???)" : 1 , "getPage()" : 14 , "jsxFunction_createAttribute(String)" : 1 , "jsxFunction_createElement(String)" : 2 , "jsxFunction_createElementNS(String,String)" : 1 , "jsxGet_designMode()" : 2 , "jsxGet_doctype()" : 1 , "jsxGet_documentElement()" : 3 , "setWindow(Window)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::background::JavaScriptJobManager" , "selectors" : { "addJob(JavaScriptJob,Page)" : 6 , "getEarliestJob()" : 1 , "getJobCount()" : 22 , "removeAllJobs()" : 1 , "removeJob(int)" : 2 , "runSingleJob(JavaScriptJob)" : 2 , "shutdown()" : 2 , "stopJob(int)" : 1 , "waitForJobs(long)" : 6 , "waitForJobsStartingBefore(long)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::ImmediateRefreshHandler" , "selectors" : { "ImmediateRefreshHandler()" : 4}},{ "className" : "org::w3c::dom::ranges::Range" , "selectors" : { "cloneRange()" : 2 , "collapse(boolean)" : 3 , "getCollapsed()" : 1 , "getCommonAncestorContainer()" : 2 , "getEndContainer()" : 12 , "getEndOffset()" : 10 , "getStartContainer()" : 24 , "getStartOffset()" : 10 , "selectNode(Node)" : 1 , "setEnd(Node,int)" : 7 , "setStart(Node,int)" : 6 , "toString()" : 3}},{ "className" : "com::gargoylesoftware::htmlunit::protocol::data::Handler" , "selectors" : { "com" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::util::EncodingSniffer" , "selectors" : { "contentTypeEndsWith(List<NameValuePair>,String[])" : 2 , "extractEncodingFromContentType(String)" : 3 , "getAttribute(byte[],int)" : 4 , "indexOfSubArray(byte[],byte[],int)" : 1 , "isHtml(List<NameValuePair>)" : 1 , "isSupportedCharset(String)" : 5 , "isXml(List<NameValuePair>)" : 1 , "matches(byte[],int,byte[][])" : 4 , "read(InputStream,int)" : 4 , "readAndPrepend(InputStream,int,byte[])" : 2 , "skipToAnyOf(byte[],int,byte[])" : 4 , "sniffEncoding(List<NameValuePair>,InputStream)" : 1 , "sniffEncodingFromHttpHeaders(List<NameValuePair>)" : 4 , "sniffEncodingFromMetaTag(byte[])" : 2 , "sniffEncodingFromUnicodeBom(byte[])" : 3 , "sniffEncodingFromXmlDeclaration(byte[])" : 2 , "sniffHtmlEncoding(List<NameValuePair>,InputStream)" : 1 , "sniffUnknownContentTypeEncoding(List<NameValuePair>,InputStream)" : 1 , "sniffXmlEncoding(List<NameValuePair>,InputStream)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::ScriptableWithFallbackGetter" , "selectors" : { "getWithFallback(String)" : 2 , "put(???)" : 2}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::host::css::CSSStyleRule" , "selectors" : { "CSSStyleRule(CSSStyleSheet,CSSRule)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::WebConnection" , "selectors" : { "getResponse(WebRequest)" : 3}},{ "className" : "com::gargoylesoftware::htmlunit::WebClientTest" , "selectors" : { "doTestRedirection(int,HttpMethod,HttpMethod)" : 8 , "doTestRedirection(int,HttpMethod,HttpMethod,String)" : 2 , "doTestRedirection(int,HttpMethod,HttpMethod,String,boolean)" : 2 , "doTestRedirectionSameUrlAfterPost(int)" : 3 , "getPageForKeyboardTest(WebClient,String[])" : 6 , "getPageWithRedirectionsSameURL(int)" : 2 , "getTestFile(String)" : 12 , "hexRepresentation(byte[])" : 2 , "testCssErrorHandler()::MutableInt" : 1 , "testHtmlWindowEvents_changed()::EventCatcher" : 1 , "testHtmlWindowEvents_closedFromFrame()::EventCatcher" : 1 , "testHtmlWindowEvents_opened()::EventCatcher" : 1 , "testRedirection_AdditionalHeadersMaintained(int)" : 2 , "testTests(File)" : 2}},{ "className" : "com::gargoylesoftware::htmlunit::BrowserVersionFeatures" , "selectors" : { "valueOf(String)" : 1 , "values()" : 2}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::regexp::mozilla::js1_2::StringReplaceTest" , "selectors" : { "test(String)" : 6}},{ "className" : "com::gargoylesoftware::htmlunit::html::impl::SelectionDelegate" , "selectors" : { "SelectionDelegate(SelectableTextInput)" : 3 , "getSelectedText()" : 3 , "getSelectionEnd()" : 3 , "getSelectionStart()" : 3 , "makeThisTheOnlySelectionIfEmulatingIE()" : 2 , "select()" : 3 , "setSelectionEnd(int)" : 4 , "setSelectionStart(int)" : 4}},{ "className" : "com::gargoylesoftware::htmlunit::UrlFetchWebConnectionTest" , "selectors" : { "compareRequests(WebRequest,WebRequest)" : 4 , "doGetTest(URL)" : 2 , "getHeadRequest()" : 2 , "getPostRequest(FormEncodingType)" : 4 , "headersToString(WebRequest)" : 2}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::host::ActiveXObjectTest" , "selectors" : { "getProperty(String,String)" : 1 , "isJacobInstalled()" : 4}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::regexp::mozilla::js1_2::SimpleFormTest" , "selectors" : { "test(String)" : 5 , "test(String,String)" : 4}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::host::TreeWalker" , "selectors" : { "TreeWalker(Node,int,NodeFilter,Boolean)" : 1 , "acceptNode(Node)" : 2 , "getEquivalentLogical(Node,boolean)" : 12 , "getFirstUncleNode(Node)" : 2 , "getFlagForNodeType(short)" : 1 , "getPreviousNode(Node)" : 1 , "getSibling(Node,boolean)" : 2 , "isNodeRejected(Node)" : 1 , "isNodeSkipped(Node)" : 1 , "isNodeVisible(Node)" : 6 , "setParentScope(???)" : 1 , "setPrototype(???)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::configuration::ClassConfiguration::FunctionInfo" , "selectors" : { "FunctionInfo()" : 1 , "getFunctionMethod()" : 2 , "setFunctionMethod(Method)" : 1 , "valueEquals(Object)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::html::HtmlFieldSet" , "selectors" : { "HtmlFieldSet(String,String,SgmlPage,Map<String,DomAttr>)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::host::xml::XMLAttr" , "selectors" : { "XMLAttr()" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::gae::GAETestRunner::GAELikeClassLoader" , "selectors" : { "GAELikeClassLoader()" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::host::html::HTMLTableElement" , "selectors" : { "jsxFunction_deleteCaption()" : 1 , "jsxFunction_deleteTFoot()" : 1 , "jsxFunction_deleteTHead()" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::html::HtmlAttributeChangeListener" , "selectors" : { "attributeAdded(HtmlAttributeChangeEvent)" : 2 , "attributeRemoved(HtmlAttributeChangeEvent)" : 2 , "attributeReplaced(HtmlAttributeChangeEvent)" : 2}},{ "className" : "com::gargoylesoftware::htmlunit::html::xpath::XPathUtils" , "selectors" : { "evaluateXPath(DomNode,String)::XPathContext" : 1 , "getByXPath(DomNode,String)" : 3 , "getByXPath(DomNode,String)::XNodeSet" : 1 , "isProcessingXPath()" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::regexp::mozilla::js1_2::IgnoreCaseTest" , "selectors" : { "test(String)" : 14}},{ "className" : "com::gargoylesoftware::htmlunit::html::HtmlScript2Test" , "selectors" : { "addEventListener_error(boolean)" : 2}},{ "className" : "com::gargoylesoftware::htmlunit::html::HTMLParserTest" , "selectors" : { "headerVsMetaTagContentType(boolean)" : 4}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::host::MediaList" , "selectors" : { "MediaList(CSSStyleSheet,MediaList)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::html::DomText" , "selectors" : { "DomText(SgmlPage,String)" : 26 , "createSplitTextNode(int)" : 1 , "getScriptObject(???)" : 1 , "splitText(int)" : 3}},{ "className" : "com::gargoylesoftware::htmlunit::html::HtmlStyle" , "selectors" : { "HtmlStyle(String,String,SgmlPage,Map<String,DomAttr>)" : 1 , "getMediaAttribute()" : 1 , "getScriptObject(???)" : 3}},{ "className" : "com::gargoylesoftware::htmlunit::libraries::GWT20Test" , "selectors" : { "assertElementValue(HtmlElement,String)" : 3 , "getDirectory()" : 3 , "loadGWTPage(String,List<String>)" : 4 , "verifyStartMailBody(HtmlPage,String[])" : 2}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::host::html::HTMLElementTest" , "selectors" : { "eventHandlerSetterGetterTest(String)" : 14 , "insertAdjacentElement(String,String,String,String)" : 2 , "insertAdjacentHTML(String,String,String,String)" : 2 , "mergeAttributes(String,String[])" : 3 , "scrollLeft(String)" : 2 , "scrollTop(String)" : 2 , "style(String)" : 2}},{ "className" : "com::gargoylesoftware::htmlunit::html::HtmlTableDataCell" , "selectors" : { "HtmlTableDataCell(String,String,SgmlPage,Map<String,DomAttr>)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::util::URLCreator" , "selectors" : { "getCreator()" : 1 , "toUrlUnsafeClassic(String)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::background::JavaScriptJob" , "selectors" : { "JavaScriptJob(int,Integer)" : 2 , "getId()" : 8 , "getPeriod()" : 5 , "getTargetExecutionTime()" : 12 , "setId(Integer)" : 1 , "setTargetExecutionTime(long)" : 2 , "toString()" : 2}},{ "className" : "com::gargoylesoftware::htmlunit::html::HtmlLink" , "selectors" : { "HtmlLink(String,String,SgmlPage,Map<String,DomAttr>)" : 1 , "getHrefAttribute()" : 5 , "getMediaAttribute()" : 1 , "getRelAttribute()" : 2 , "getTypeAttribute()" : 1 , "getWebRequest()" : 3 , "getWebResponse(boolean)" : 2}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::configuration::ClassConfiguration::PropertyInfo" , "selectors" : { "PropertyInfo()" : 1 , "getReadMethod()" : 1 , "getWriteMethod()" : 2 , "setBrowser(BrowserInfo)" : 1 , "setReadMethod(Method)" : 1 , "setReadable(boolean)" : 1 , "setWritable(boolean)" : 1 , "setWriteMethod(Method)" : 1 , "valueEquals(Object)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::html::HtmlHtml" , "selectors" : { "HtmlHtml(String,String,SgmlPage,Map<String,DomAttr>)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::PageCreator" , "selectors" : { "createPage(WebResponse,WebWindow)" : 2}},{ "className" : "com::gargoylesoftware::htmlunit::html::HtmlInlineQuotation" , "selectors" : { "HtmlInlineQuotation(String,String,SgmlPage,Map<String,DomAttr>)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::html::HtmlSelectTest" , "selectors" : { "appendOption(HtmlSelect,String)" : 2 , "checkOptions(HtmlSelect)" : 4}},{ "className" : "org::w3c::dom::css::CSSRuleList" , "selectors" : { "getLength()" : 3 , "item(int)" : 2}},{ "className" : "com::gargoylesoftware::htmlunit::html::HtmlRadioButtonInput" , "selectors" : { "HtmlRadioButtonInput(String,String,SgmlPage,Map<String,DomAttr>)" : 2 , "asText()" : 2 , "isDefaultChecked()" : 1 , "setChecked(boolean)" : 15}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::host::EventListenersContainer" , "selectors" : { "EventListenersContainer(SimpleScriptable)" : 2 , "addEventListener(???)" : 4 , "copyFrom(EventListenersContainer)" : 1 , "executeBubblingListeners(Event,Object[],Object[])" : 2 , "executeCapturingListeners(Event,Object[])" : 2 , "executeEventHandler(Event,Object[])" : 2 , "executeEventListeners(boolean,Event,Object[])" : 4 , "executeEventListeners(boolean,Event,Object[])::ArrayList" : 1 , "executeListeners(Event,Object[],Object[])" : 1 , "getEventHandler(???)" : 1 , "getEventHandlerProp(String)" : 6 , "getHandlersOrCreateIt(String)" : 2 , "hasEventHandlers(String)" : 1 , "removeEventListener(???)" : 3 , "setEventHandlerProp(String,Object)" : 6}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::host::PluginArray" , "selectors" : { "PluginArray()" : 1 , "setParentScope(???)" : 1 , "setPrototype(???)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::host::Element" , "selectors" : { "Element()" : 1 , "createAttributesObject()" : 1 , "fixAttributeName(String)" : 1 , "getDomNodeOrDie()" : 11 , "jsxFunction_getAttribute(String,Integer)" : 1 , "jsxFunction_selectNodes(String)" : 1 , "jsxGet_attributes()" : 1 , "jsxGet_tagName()" : 4 , "toText(DomNode,StringBuilder)" : 2}},{ "className" : "com::gargoylesoftware::htmlunit::HttpMethod" , "selectors" : { "valueOf(String)" : 2}},{ "className" : "com::gargoylesoftware::htmlunit::html::NamedAttrNodeMapImpl" , "selectors" : { "NamedAttrNodeMapImpl()" : 1 , "NamedAttrNodeMapImpl(DomElement,boolean)" : 2 , "NamedAttrNodeMapImpl(DomElement,boolean,Map<String,DomAttr>)" : 2 , "containsKey(Object)" : 2 , "fixName(String)" : 10 , "get(Object)" : 8 , "put(String,DomAttr)" : 4 , "putAll(Map<? extends String,? extends DomAttr>)" : 1 , "remove(Object)" : 3 , "setNamedItem(Node)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::xml::XmlPageTest" , "selectors" : { "testXmlDocument(String,String)" : 4}},{ "className" : "com::gargoylesoftware::htmlunit::protocol::javascript::Handler" , "selectors" : { "com" : 2}},{ "className" : "com::gargoylesoftware::htmlunit::util::ServletContentWrapper" , "selectors" : { "ServletContentWrapper(String)" : 2}},{ "className" : "com::gargoylesoftware::htmlunit::html::HTMLScannerForIE" , "selectors" : { "HTMLScannerForIE(BrowserVersion)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::html::HTMLParserTest::HeaderVsMetaTagContentTypeServlet" , "selectors" : { "setEncoding(String,String)" : 4}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::host::css::ComputedCSSStyleDeclarationTest" , "selectors" : { "stringProperties(String)" : 2}},{ "className" : "com::gargoylesoftware::htmlunit::ssl::InsecureTrustManager" , "selectors" : { "InsecureTrustManager()" : 2}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::regexp::mozilla::js1_2::GlobalTest" , "selectors" : { "test(String)" : 10}},{ "className" : "com::gargoylesoftware::htmlunit::html::HtmlDefinitionDescription" , "selectors" : { "HtmlDefinitionDescription(String,String,SgmlPage,Map<String,DomAttr>)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::host::WindowProxy" , "selectors" : { "WindowProxy(WebWindow)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::html::HtmlSuperscript" , "selectors" : { "HtmlSuperscript(String,String,SgmlPage,Map<String,DomAttr>)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::ThreadTest" , "selectors" : { "ThreadTest(String)" : 1 , "suite()::TestSuite" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::html::HtmlTableColumnGroup" , "selectors" : { "HtmlTableColumnGroup(String,String,SgmlPage,Map<String,DomAttr>)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::host::Window2Test" , "selectors" : { "doTestRhinoLazilyNames(String[])" : 3 , "onbeforeunload(String,String)" : 2 , "scrolling(boolean)" : 2}},{ "className" : "com::gargoylesoftware::htmlunit::SocksSocketFactory" , "selectors" : { "SocksSocketFactory()" : 1 , "connectSocket(Socket,String,int,InetAddress,int,HttpParams)::ConnectTimeoutException" : 1 , "createSocket()" : 1 , "setSocksProxy(???)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::host::MouseEvent" , "selectors" : { "MouseEvent()" : 2 , "MouseEvent(DomNode,String,boolean,boolean,boolean,int)" : 3 , "getCurrentMouseEvent()" : 4 , "isMouseEvent(String)" : 1 , "jsxGet_clientX()" : 1 , "jsxGet_clientY()" : 1 , "jsxGet_screenX()" : 2 , "jsxGet_screenY()" : 2}},{ "className" : "com::gargoylesoftware::htmlunit::html::HtmlOption" , "selectors" : { "HtmlOption(String,String,SgmlPage,Map<String,DomAttr>)" : 1 , "asText()" : 10 , "getEnclosingSelect()" : 3 , "getLabelAttribute()" : 3 , "getScriptObject(???)" : 1 , "getText()" : 4 , "getValueAttribute()" : 23 , "insertBefore(DomNode)" : 1 , "isDefaultSelected()" : 1 , "isDisabled()" : 2 , "isSelected()" : 30 , "reset()" : 1 , "setLabelAttribute(String)" : 2 , "setSelected(boolean)" : 13 , "setSelectedInternal(boolean)" : 5 , "setText(String)" : 1 , "setValueAttribute(String)" : 3}},{ "className" : "com::gargoylesoftware::htmlunit::html::UnknownElementFactory" , "selectors" : { "UnknownElementFactory()" : 1 , "createElementNS(SgmlPage,String,String,Attributes)" : 2}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::IEConditionalCompilationScriptPreProcessor" , "selectors" : { "IEConditionalCompilationScriptPreProcessor()" : 1 , "indexOf(String,String,int)" : 2 , "processConditionalCompilation(String,BrowserVersion)" : 2 , "processIfs(String)" : 1 , "processSet(String)" : 1 , "replaceCompilationVariables(String,BrowserVersion)" : 1 , "replaceCustomCompilationVariables(String)" : 1 , "replaceOneCustomCompilationVariable(String)" : 1 , "replaceOneVariable(String,BrowserVersion)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::libraries::TinyMceTest" , "selectors" : { "test(String,int,int)" : 2}},{ "className" : "com::gargoylesoftware::htmlunit::MockWebConnection" , "selectors" : { "MockWebConnection()" : 296 , "buildWebResponseData(byte[],int,String,List<NameValuePair>)" : 4 , "getLastAdditionalHeaders()" : 11 , "getLastMethod()" : 17 , "getLastParameters()" : 28 , "getLastWebRequest()" : 46 , "getRequestCount()" : 15 , "getRequestedUrls(URL)" : 5 , "getResponse(WebRequest)" : 11 , "setDefaultResponse(String)" : 132 , "setDefaultResponse(String,String)" : 19 , "setDefaultResponse(String,String,String)" : 1 , "setDefaultResponse(String,int,String,String)" : 18 , "setDefaultResponse(String,int,String,String,List<? extends NameValuePair>)" : 6 , "setDefaultResponse(String,int,String,String,String,List<? extends NameValuePair>)" : 1 , "setDefaultResponse(byte[],int,String,String)" : 4 , "setResponse(URL,String)" : 438 , "setResponse(URL,String,String)" : 89 , "setResponse(URL,String,String,String)" : 1 , "setResponse(URL,String,int,String,String,List<? extends NameValuePair>)" : 39 , "setResponse(URL,String,int,String,String,String,List<? extends NameValuePair>)" : 1 , "setResponse(URL,byte[],int,String,String,List<? extends NameValuePair>)" : 8 , "setResponseAsGenericHtml(URL,String)" : 3}},{ "className" : "com::gargoylesoftware::htmlunit::html::ClickableElementTest" , "selectors" : { "onClickBodyTest(String)" : 32 , "onClickPageTest(String)" : 5 , "onClickPageTest(String,int)" : 3 , "onClickPageTest(String,int,boolean)" : 2 , "onClickSimpleTest(String)" : 41}},{ "className" : "com::gargoylesoftware::htmlunit::HttpWebConnectionInsecureSSL" , "selectors" : { "setUseInsecureSSL(???)" : 1 , "setUseInsecureSSL(AbstractHttpClient,boolean)::AllowAllHostnameVerifier" : 1 , "setUseInsecureSSL(AbstractHttpClient,boolean)::SSLSocketFactory" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::html::HtmlTable" , "selectors" : { "HtmlTable(String,String,SgmlPage,Map<String,DomAttr>)" : 1 , "getBodies()" : 2 , "getCaptionText()" : 2 , "getCellAt(int,int)" : 13 , "getFooter()" : 3 , "getHeader()" : 3 , "getRow(int)" : 3 , "getRowById(String)" : 12 , "getRowIterator()" : 4 , "getRows()" : 4}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::JavaScriptEngine" , "selectors" : { "JavaScriptEngine(WebClient)" : 3 , "addPostponedAction(PostponedAction)" : 6 , "callFunction(???)" : 3 , "callFunction(HtmlPage,Object,Object,Object[],DomNode)" : 2 , "compile(???)" : 2 , "createJavaScriptExecutor()" : 1 , "deleteProperties(Window,String[])" : 3 , "doProcessPostponedActions()" : 3 , "execute(???)" : 2 , "execute(HtmlPage,String,String,int)" : 3 , "getContextFactory()" : 16 , "getWebClient()" : 3 , "handleJavaScriptException(ScriptException)" : 2 , "holdPosponedActions()" : 1 , "init(WebWindow,Context)::FunctionObject" : 2 , "initTransientFields()" : 2 , "initialize(WebWindow)" : 1 , "isScriptRunning()" : 2 , "processPostponedActions()" : 2 , "pumpEventLoop(long)" : 7 , "registerWindowAndMaybeStartEventLoop(WebWindow)" : 1 , "removePrototypeProperties(Window,String,String[])" : 11 , "shutdownJavaScriptExecutor()" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::host::History" , "selectors" : { "History()" : 1 , "jsxFunction_item(int)" : 1 , "jsxGet_length()" : 2 , "setParentScope(???)" : 1 , "setPrototype(???)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::host::css::SelectorSpecificity" , "selectors" : { "SelectorSpecificity(???)" : 2 , "SelectorSpecificity(int,int,int,int)" : 1 , "compareTo(SelectorSpecificity)" : 20 , "toString()" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::html::HtmlImageTest" , "selectors" : { "isMapClick(String,boolean,String,String)" : 4 , "useMapClick(int,int,String)" : 5}},{ "className" : "com::gargoylesoftware::htmlunit::WebClient2Test::ServeBodySlowlyServlet" , "selectors" : { "writeSomeContent(Writer)" : 2}},{ "className" : "com::gargoylesoftware::htmlunit::ConfirmHandler" , "selectors" : { "handleConfirm(Page,String)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::html::HtmlNoScript" , "selectors" : { "HtmlNoScript(String,String,SgmlPage,Map<String,DomAttr>)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::StatusHandler" , "selectors" : { "statusMessageChanged(Page,String)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::HttpWebConnection2Test" , "selectors" : { "headersToString(WebRequest)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::html::DomNode" , "selectors" : { "DomNode(SgmlPage)" : 7 , "addDomChangeListener(DomChangeListener)" : 14 , "appendChild(Node)" : 56 , "asText()" : 133 , "asXml()" : 22 , "basicAppend(DomNode)" : 2 , "basicRemove()" : 4 , "checkChildHierarchy(Node)" : 2 , "cloneNode(boolean)" : 6 , "compareDocumentPosition(Node)" : 1 , "fireNodeAdded(DomNode,DomNode)" : 3 , "fireNodeDeleted(DomNode,DomNode)" : 5 , "getAncestors(boolean)" : 4 , "getAttributes()" : 1 , "getByXPath(String)" : 48 , "getCanonicalXPath()" : 3 , "getCanonicalXPath()::NotImplementedException" : 1 , "getChildNodes()" : 10 , "getChildren()" : 29 , "getDescendants()" : 4 , "getEndColumnNumber()" : 1 , "getEndLineNumber()" : 1 , "getFirstByXPath(String)" : 70 , "getFirstChild()" : 90 , "getHtmlElementDescendants()" : 20 , "getIndex()" : 2 , "getLastChild()" : 17 , "getLocalName()" : 5 , "getNamespaceURI()" : 6 , "getNextSibling()" : 59 , "getNodeName()" : 29 , "getNodeType()" : 15 , "getNodeValue()" : 21 , "getOwnerDocument()" : 8 , "getPage()" : 229 , "getParentNode()" : 123 , "getPrefix()" : 7 , "getPreviousSibling()" : 34 , "getReadyState()" : 6 , "getScriptObject(???)" : 54 , "getStartColumnNumber()" : 1 , "getStartLineNumber()" : 7 , "getTextContent()" : 16 , "hasAttributes()" : 3 , "insertBefore(DomNode)" : 15 , "insertBefore(Node,Node)" : 2 , "isAncestorOf(DomNode)" : 7 , "isAncestorOfAny(DomNode[])" : 2 , "isBlock()" : 1 , "isDisplayed()" : 11 , "mayBeDisplayed()" : 6 , "normalize()" : 2 , "notifyIncorrectness(String)" : 8 , "onAddedToPage()" : 5 , "onAllChildrenAddedToPage(boolean)" : 3 , "printChildrenAsXml(String,PrintWriter)" : 4 , "printXml(String,PrintWriter)" : 2 , "quietlyRemoveAndMoveChildrenTo(DomNode)" : 1 , "remove()" : 35 , "removeAllChildren()" : 6 , "removeDomChangeListener(DomChangeListener)" : 1 , "replace(DomNode)" : 6 , "replaceChild(Node,Node)" : 1 , "safeGetDomListeners()" : 2 , "setEndLocation(int,int)" : 2 , "setNodeValue(String)" : 6 , "setPage(SgmlPage)" : 3 , "setParentNode(DomNode)" : 3 , "setPrefix(String)" : 1 , "setReadyState(String)" : 5 , "setScriptObject(???)" : 1 , "setStartLocation(int,int)" : 1 , "setTextContent(String)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::protocol::about::Handler" , "selectors" : { "com" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::ScriptException" , "selectors" : { "ScriptException(HtmlPage,Throwable)" : 3 , "ScriptException(HtmlPage,Throwable,String)" : 2 , "createPrintableStackTrace()" : 2 , "createPrintableStackTrace()::JavaScriptException" : 1 , "getFailingLine()" : 1 , "getFailingLineNumber()" : 4 , "getMessageFrom(Throwable)" : 1 , "getPage()" : 3 , "printScriptStackTrace(PrintWriter)" : 1 , "printStackTrace(PrintStream)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::host::canvas::CanvasRenderingContext2D" , "selectors" : { "CanvasRenderingContext2D()" : 1 , "setParentScope(???)" : 1 , "setPrototype(???)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::ScriptableWrapper" , "selectors" : { "ScriptableWrapper(???)" : 1 , "ScriptableWrapper(Scriptable,Object,Class)::FunctionObject" : 1 , "getClassName()" : 1 , "getWrappedObject()" : 1 , "invoke(Method)" : 1 , "invoke(Method,Object[])" : 3 , "jsToString()" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::source::BrowserVersionFeaturesSource" , "selectors" : { "generate(File,String,BrowserVersion[])" : 3 , "rename(File,BrowserVersionFeatures,String)" : 2 , "rename(File,String,String)" : 2}},{ "className" : "com::gargoylesoftware::htmlunit::html::HtmlUnderlined" , "selectors" : { "HtmlUnderlined(String,String,SgmlPage,Map<String,DomAttr>)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::host::DocumentFragment" , "selectors" : { "DocumentFragment()" : 3 , "setParentScope(???)" : 3 , "setPrototype(???)" : 3}},{ "className" : "com::gargoylesoftware::htmlunit::BrowserVersion" , "selectors" : { "BrowserVersion(String,String,String,float)" : 3 , "BrowserVersion(String,String,String,float,String,BrowserVersionFeatures[])" : 8 , "equals(Object)" : 4 , "getApplicationCodeName()" : 2 , "getApplicationMinorVersion()" : 2 , "getApplicationName()" : 4 , "getApplicationVersion()" : 2 , "getBrowserLanguage()" : 5 , "getBrowserVersionNumeric()" : 16 , "getCpuClass()" : 2 , "getDefault()" : 3 , "getNickname()" : 28 , "getPlatform()" : 2 , "getPlugins()" : 8 , "getSystemLanguage()" : 2 , "getUserAgent()" : 5 , "getUserLanguage()" : 2 , "hasFeature(BrowserVersionFeatures)" : 251 , "initDefaultFeatures()" : 6 , "isFirefox()" : 21 , "isIE()" : 32 , "isOnLine()" : 2 , "setApplicationVersion(String)" : 1 , "setBrowserLanguage(String)" : 2}},{ "className" : "com::gargoylesoftware::htmlunit::BrowserVersionClassRunner" , "selectors" : { "BrowserVersionClassRunner(???)" : 15 , "containsTestMethods(Class<WebTestCase>)" : 1 , "createTest()" : 1 , "isDefined(String[])" : 11 , "isDefinedIn(Browser[])" : 2 , "methodBlock(FrameworkMethod)::Fail" : 1 , "setAlerts(WebTestCase,Method)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::html::HtmlSelect" , "selectors" : { "HtmlSelect(String,String,SgmlPage,Map<String,DomAttr>)" : 1 , "appendChild(Node)" : 2 , "appendOption(HtmlOption)" : 3 , "asText()" : 2 , "doSelectOption(HtmlOption,boolean)" : 2 , "getNameAttribute()" : 2 , "getOption(int)" : 30 , "getOptionByText(String)" : 2 , "getOptionByValue(String)" : 13 , "getOptionSize()" : 8 , "getOptions()" : 20 , "getScriptObject(???)" : 3 , "getSelectedOptions()" : 17 , "getSizeAttribute()" : 1 , "isDisabled()" : 1 , "isMultipleSelectEnabled()" : 9 , "isValidForSubmission()" : 1 , "removeOption(int)" : 1 , "replaceOption(int,HtmlOption)" : 1 , "setOptionSize(int)" : 2 , "setScriptObject(???)" : 1 , "setSelectedAttribute(HtmlOption,boolean)" : 6 , "setSelectedAttribute(HtmlOption,boolean,boolean)" : 2 , "setSelectedAttribute(String,boolean)" : 8}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::host::DOMImplementationTest" , "selectors" : { "hasFeature(String,String)" : 4}},{ "className" : "com::gargoylesoftware::htmlunit::html::HtmlBidirectionalOverride" , "selectors" : { "HtmlBidirectionalOverride(String,String,SgmlPage,Map<String,DomAttr>)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::host::xml::XMLDOMParseError" , "selectors" : { "XMLDOMParseError()" : 1 , "setErrorCode(int)" : 1 , "setFilepos(int)" : 1 , "setLine(int)" : 1 , "setLinepos(int)" : 1 , "setParentScope(???)" : 1 , "setPrototype(???)" : 1 , "setReason(String)" : 1 , "setSrcText(String)" : 1 , "setUrl(String)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::PluginConfiguration" , "selectors" : { "PluginConfiguration(String,String,String)" : 1 , "getDescription()" : 1 , "getFilename()" : 1 , "getMimeTypes()" : 2 , "getName()" : 1}},{ "className" : "java::util::regex::PatternSyntaxException" , "selectors" : { "PatternSyntaxException(String,String,int)" : 2 , "getMessage()" : 12}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::StrictErrorHandler" , "selectors" : { "StrictErrorHandler()" : 2}},{ "className" : "com::gargoylesoftware::htmlunit::html::HtmlCheckBoxInput" , "selectors" : { "HtmlCheckBoxInput(String,String,SgmlPage,Map<String,DomAttr>)" : 2 , "asText()" : 2 , "setChecked(boolean)" : 9}},{ "className" : "org::w3c::dom::css::CSSPrimitiveValue" , "selectors" : { "getFloatValue(short)" : 1 , "getStringValue()" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::html::HtmlBackgroundSound" , "selectors" : { "HtmlBackgroundSound(String,String,SgmlPage,Map<String,DomAttr>)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::host::html::HTMLImageElement" , "selectors" : { "jsConstructor()::AttributeList" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::FixedWebDriverHtmlUnitWebElement" , "selectors" : { "FixedWebDriverHtmlUnitWebElement(???)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::OnbeforeunloadHandler" , "selectors" : { "handleEvent(Page,String)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::host::Popup" , "selectors" : { "Popup()" : 1 , "init(Window)" : 1 , "setParentScope(???)" : 1 , "setPrototype(???)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::protocol::javascript::JavaScriptURLConnection" , "selectors" : { "JavaScriptURLConnection(URL)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::xml::XmlPage" , "selectors" : { "XmlPage(Node,WebWindow)" : 1 , "XmlPage(WebResponse,WebWindow)" : 4 , "XmlPage(WebResponse,WebWindow,boolean)" : 2 , "createCDATASection(String)" : 1 , "createProcessingInstruction(String,String)" : 1 , "createXmlElement(String)" : 1 , "createXmlElementNS(String,String)" : 2 , "getContent()" : 2 , "getXmlDocument()" : 5 , "setDocumentType(DomDocumentType)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::gae::GAETestRunner" , "selectors" : { "getAdditionalWhitelist()" : 1 , "getClassFromGAELikeClassLoader(Class<?>)" : 1 , "loadWhiteList()" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::MethodWrapper" , "selectors" : { "MethodWrapper(String,Class<?>,Class<?>[])" : 3}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::host::Selection" , "selectors" : { "Selection()" : 1 , "getFirstRange()" : 2 , "getLastRange()" : 6 , "getRanges()" : 13 , "getScriptableNullSafe(Object)" : 2 , "setParentScope(???)" : 1 , "setPrototype(???)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::host::css::CSSImportRuleTest" , "selectors" : { "testGetImportFromCssRulesCollection(URL,String,URL)" : 2}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::host::MimeType" , "selectors" : { "MimeType(String,String,String,Plugin)" : 1 , "jsxGet_type()" : 2 , "setParentScope(???)" : 1 , "setPrototype(???)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::html::HtmlMultiColumn" , "selectors" : { "HtmlMultiColumn(String,String,SgmlPage,Map<String,DomAttr>)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::WebDriverTestCase::MockWebConnectionServlet" , "selectors" : { "service(HttpServletRequest,HttpServletResponse)::ServletException" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::Version" , "selectors" : { "getCopyright()" : 1 , "getProductName()" : 1 , "getProductVersion()" : 1 , "runSanityCheck()" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::html::HtmlCenter" , "selectors" : { "HtmlCenter(String,String,SgmlPage,Map<String,DomAttr>)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::html::HtmlPageTest" , "selectors" : { "testGetFullQualifiedUrl_WithBase(String,String)" : 4 , "testNoSlashURL(String)" : 2 , "testOnbeforeunloadHandler(boolean,String)" : 2 , "testRefresh_MetaTag(String)" : 8}},{ "className" : "com::gargoylesoftware::htmlunit::ScriptExceptionTest" , "selectors" : { "getFileContent(String)" : 2 , "testErrorLineNumber(String,int)" : 4 , "testScriptStackTrace(String)" : 2}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::host::NodeFilter" , "selectors" : { "acceptNode(Node)" : 2}},{ "className" : "com::gargoylesoftware::htmlunit::html::applets::AppletStubImpl" , "selectors" : { "AppletStubImpl(HtmlApplet)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::html::DomElement" , "selectors" : { "DomElement(String,String,SgmlPage,Map<String,DomAttr>)" : 4 , "cloneNode(boolean)" : 1 , "escapeXmlAttributeValue(String)" : 1 , "getAttribute(String)" : 478 , "getAttributeNS(String,String)" : 9 , "getAttributeNode(String)" : 3 , "getAttributeNodeNS(String,String)" : 1 , "getAttributes()" : 3 , "getAttributesMap()" : 22 , "getElementsByTagName(String)" : 4 , "getNodeName()" : 1 , "getNodeType()" : 2 , "getQualifiedName(String,String)" : 6 , "getScriptObject(???)" : 2 , "getTagName()" : 28 , "hasAttribute(String)" : 32 , "hasAttributeNS(String,String)" : 3 , "isAttributeCaseSensitive()" : 3 , "isEmptyXmlTagExpanded()" : 1 , "namespaces()" : 2 , "printOpeningTagContentAsXml(PrintWriter)" : 4 , "removeAttribute(String)" : 3 , "removeAttributeNS(String,String)" : 3 , "setAttribute(String,String)" : 132 , "setAttributeNS(String,String,String)" : 2 , "setAttributeNode(Attr)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::DebugFrameImplTest" , "selectors" : { "loggedCalls()::PatternLayout" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::WebClient" , "selectors" : { "WebClient()" : 12 , "WebClient(BrowserVersion)" : 11 , "WebClient(BrowserVersion,String,int)" : 4 , "addDefaultHeaders(WebRequest)" : 1 , "addRequestHeader(String,String)" : 1 , "addWebWindowListener(WebWindowListener)" : 2 , "closeAllWindows()" : 24 , "createWebConnection()" : 2 , "deregisterWebWindow(WebWindow)" : 4 , "download(WebWindow,String,WebRequest,String)" : 4 , "expandUrl(URL,String)" : 8 , "fireWindowClosed(WebWindowEvent)" : 1 , "fireWindowContentChanged(WebWindowEvent)" : 1 , "fireWindowOpened(WebWindowEvent)" : 3 , "getActiveXObjectMap()" : 1 , "getAggregateJobCount()" : 2 , "getAjaxController()" : 1 , "getAlertHandler()" : 1 , "getBrowserVersion()" : 76 , "getCache()" : 10 , "getConfirmHandler()" : 1 , "getCookieManager()" : 12 , "getCredentialsProvider(???)" : 2 , "getCssErrorHandler(???)" : 6 , "getCurrentWindow()" : 69 , "getHTMLParserListener()" : 2 , "getHomePage()" : 2 , "getIncorrectnessListener()" : 5 , "getJavaScriptEngine()" : 34 , "getJavaScriptTimeout()" : 2 , "getOnbeforeunloadHandler()" : 1 , "getPage(String)" : 87 , "getPage(URL)" : 363 , "getPage(WebRequest)" : 15 , "getPage(WebWindow,String,WebRequest)" : 1 , "getPage(WebWindow,WebRequest)" : 12 , "getPrintContentOnFailingStatusCode()" : 1 , "getPromptHandler()" : 1 , "getProxyConfig()" : 7 , "getRefreshHandler()" : 4 , "getScriptPreProcessor()" : 1 , "getStatusHandler()" : 1 , "getTimeout()" : 4 , "getTopLevelWindows()" : 6 , "getWebConnection()" : 6 , "getWebWindowByName(String)" : 16 , "getWebWindows()" : 34 , "guessContentType(File)" : 13 , "init(BrowserVersion,ProxyConfig)" : 2 , "initialize(Page)" : 1 , "initialize(WebWindow)" : 3 , "initializeEmptyWindow(WebWindow)" : 1 , "isActiveXNative()" : 2 , "isAppletEnabled()" : 3 , "isCssEnabled()" : 2 , "isJavaScriptEnabled()" : 13 , "isPopupBlockerEnabled()" : 1 , "isRedirectEnabled()" : 1 , "isThrowExceptionOnFailingStatusCode()" : 1 , "isThrowExceptionOnScriptError()" : 3 , "loadDownloadedResponses()" : 1 , "loadWebResponse(WebRequest)" : 10 , "loadWebResponseFromWebConnection(WebRequest,int)" : 3 , "loadWebResponseInto(WebResponse,WebWindow)" : 4 , "makeWebResponseForAboutUrl(URL)" : 1 , "makeWebResponseForDataUrl(WebRequest)" : 1 , "makeWebResponseForFileUrl(WebRequest)" : 1 , "makeWebResponseForJavaScriptUrl(WebWindow,URL,String)" : 1 , "openDialogWindow(URL,WebWindow,Object)" : 2 , "openTargetWindow(WebWindow,String,String)" : 3 , "openWindow(URL,String)" : 8 , "openWindow(URL,String,WebWindow)" : 3 , "printContentIfNecessary(WebResponse)" : 3 , "registerWebWindow(WebWindow)" : 1 , "removeRequestHeader(String)" : 1 , "resolveWindow(WebWindow,String)" : 3 , "setActiveXNative(boolean)" : 4 , "setActiveXObjectMap(Map<String,String>)" : 1 , "setAjaxController(AjaxController)" : 2 , "setAlertHandler(AlertHandler)" : 184 , "setAppletEnabled(boolean)" : 3 , "setAttachmentHandler(AttachmentHandler)" : 2 , "setConfirmHandler(ConfirmHandler)" : 1 , "setCssEnabled(boolean)" : 3 , "setCssErrorHandler(???)" : 1 , "setCurrentWindow(WebWindow)" : 12 , "setHTMLParserListener(HTMLParserListener)" : 1 , "setHomePage(String)" : 1 , "setIncorrectnessListener(IncorrectnessListener)" : 3 , "setJavaScriptEnabled(boolean)" : 10 , "setJavaScriptEngine(JavaScriptEngine)" : 4 , "setJavaScriptTimeout(long)" : 4 , "setOnbeforeunloadHandler(OnbeforeunloadHandler)" : 2 , "setPageCreator(PageCreator)" : 2 , "setPopupBlockerEnabled(boolean)" : 1 , "setPrintContentOnFailingStatusCode(boolean)" : 3 , "setPromptHandler(PromptHandler)" : 1 , "setRedirectEnabled(boolean)" : 2 , "setRefreshHandler(RefreshHandler)" : 6 , "setScriptPreProcessor(ScriptPreProcessor)" : 4 , "setStatusHandler(StatusHandler)" : 2 , "setThrowExceptionOnFailingStatusCode(boolean)" : 6 , "setThrowExceptionOnScriptError(boolean)" : 6 , "setUseInsecureSSL(boolean)" : 2 , "setWebConnection(WebConnection)" : 316 , "throwFailingHttpStatusCodeExceptionIfNecessary(WebResponse)" : 4 , "waitForBackgroundJavaScript(long)" : 26 , "waitForBackgroundJavaScriptStartingBefore(long)" : 29}},{ "className" : "com::gargoylesoftware::htmlunit::html::HtmlHeading5" , "selectors" : { "HtmlHeading5(String,String,SgmlPage,Map<String,DomAttr>)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::html::HTMLScannerForIE::ContentScannerForIE" , "selectors" : { "ContentScannerForIE(BrowserVersion)" : 1 , "scanComment()::XMLStringBuffer" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::html::FocusableElementTest" , "selectors" : { "onClickBodyTest(String)" : 6 , "onClickPageTest(String)" : 1 , "onClickSimpleTest(String,String)" : 2}},{ "className" : "com::gargoylesoftware::htmlunit::DefaultCredentialsProvider::AuthScopeProxy" , "selectors" : { "AuthScopeProxy(???)" : 3 , "getAuthScope(???)" : 2 , "readObject(ObjectInputStream)::AuthScope" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::host::css::CSSRuleList" , "selectors" : { "CSSRuleList(CSSStyleSheet)" : 1 , "jsxGet_length()" : 2}},{ "className" : "com::gargoylesoftware::htmlunit::ScriptPreProcessor" , "selectors" : { "preProcess(HtmlPage,String,String,int,HtmlElement)" : 2}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::background::GAEJavaScriptExecutor" , "selectors" : { "GAEJavaScriptExecutor(WebClient)" : 2}},{ "className" : "com::gargoylesoftware::htmlunit::html::HtmlTitle" , "selectors" : { "HtmlTitle(String,String,SgmlPage,Map<String,DomAttr>)" : 2 , "setNodeValue(String)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::html::HtmlSubmitInput" , "selectors" : { "HtmlSubmitInput(String,String,SgmlPage,Map<String,DomAttr>)" : 2}},{ "className" : "com::gargoylesoftware::htmlunit::html::HtmlMap" , "selectors" : { "HtmlMap(String,String,SgmlPage,Map<String,DomAttr>)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::protocol::data::DataUrlDecoder" , "selectors" : { "DataUrlDecoder(byte[],String,String)" : 1 , "decode(???)" : 2 , "extractCharset(String)" : 1 , "extractMediaType(String)" : 1 , "getBytes()" : 1 , "getCharset()" : 2 , "getDataAsString()" : 5 , "getMediaType()" : 2}},{ "className" : "com::gargoylesoftware::htmlunit::DialogWindow" , "selectors" : { "DialogWindow(WebClient,Object)" : 1 , "close()" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::host::EventTest" , "selectors" : { "onClickPageTest(String)" : 8 , "testEventBubblingReturns(String,String,String,boolean)" : 14 , "testEventOnClick_Shift_Ctrl_Alt(boolean,boolean,boolean,String[])" : 5 , "testEventOnKeyDown_Shift_Ctrl_Alt(boolean,boolean,boolean,String[])" : 5 , "testFF_StopPropagation(String)" : 2 , "testTyping(String,String)" : 4}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::host::xml::XMLHttpRequestTest::DisconnectedMockWebConnection" , "selectors" : { "DisconnectedMockWebConnection()" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::JavaScriptPage" , "selectors" : { "JavaScriptPage(WebResponse,WebWindow)" : 1 , "getWebResponse()" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::WaitingRefreshHandler" , "selectors" : { "WaitingRefreshHandler()" : 1 , "WaitingRefreshHandler(int)" : 1 , "handleRefresh(Page,URL,int)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::DebuggerImpl" , "selectors" : { "DebuggerImpl()" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::html::DefaultElementFactory" , "selectors" : { "DefaultElementFactory()" : 3 , "createElement(SgmlPage,String,Attributes)" : 2 , "createElementNS(SgmlPage,String,String,Attributes)" : 1 , "setAttributes(SgmlPage,Attributes)" : 3}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::host::Storage" , "selectors" : { "Storage()" : 3 , "getMap()" : 5 , "jsxFunction_getItem(String)" : 1 , "jsxFunction_setItem(String,String)" : 1 , "setParentScope(???)" : 3 , "setPrototype(???)" : 3 , "setType(Type)" : 3}},{ "className" : "com::gargoylesoftware::htmlunit::html::DomDocumentFragment" , "selectors" : { "DomDocumentFragment(SgmlPage)" : 4 , "getScriptObject(???)" : 3}},{ "className" : "com::gargoylesoftware::htmlunit::html::HtmlFileInput" , "selectors" : { "HtmlFileInput(String,String,SgmlPage,Map<String,DomAttr>)" : 2 , "focus()" : 1 , "setContentType(String)" : 2 , "setData(byte[])" : 1 , "setDefaultValue(String)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::host::html::HTMLSelectElement" , "selectors" : { "add(HTMLOptionElement,Object)" : 1 , "addBefore(HTMLOptionElement,HtmlOption)" : 2 , "add_IE(HTMLOptionElement,Object)" : 1 , "ensureSelectedIndex()" : 3 , "getHtmlSelect()" : 9 , "initialize()" : 5 , "jsxGet_selectedIndex()" : 1 , "jsxSet_selectedIndex(int)" : 3}},{ "className" : "com::gargoylesoftware::htmlunit::html::HtmlFileInput2Test::ContentTypeUpload2Servlet" , "selectors" : { "doPost(HttpServletRequest,HttpServletResponse)::DiskFileItemFactory" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::ProxyAutoConfig" , "selectors" : { "ProxyAutoConfig()" : 1 , "dateRange(String,Object,Object,Object,Object,Object,Object)" : 3 , "dateRange_createCalendar(TimeZone,int,int,int)" : 13 , "dateRange_getMonth(Object)" : 10 , "dateRange_getYear(Object)" : 5 , "defineMethod(???)" : 12 , "defineMethod(String,Scriptable)::ScriptableObject" : 1 , "dnsResolve(String)" : 2 , "evaluate(String,URL)" : 2 , "getSmallInt(Object)" : 21 , "shExpMatch(String,String)" : 2 , "timeRange(String,Object,Object,Object,Object,Object,Object)" : 3 , "timeRange_createCalendar(TimeZone,int,int,int)" : 3 , "weekdayRange(String,Object,Object)" : 5}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::host::XSLTemplate" , "selectors" : { "XSLTemplate()" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::host::xml::XMLHttpRequest::NetworkErrorWebResponse" , "selectors" : { "NetworkErrorWebResponse(WebRequest)" : 1 , "getWebRequest()" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::host::xml::XMLHttpRequestTest" , "selectors" : { "testMethod(HttpMethod)" : 7 , "testSend(String)" : 2}},{ "className" : "com::gargoylesoftware::htmlunit::source::JQueryExtractor" , "selectors" : { "JQueryExtractor(File,File)" : 1 , "getExpected(File,BrowserVersion)" : 4 , "process(int)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::html::HtmlHiddenInput" , "selectors" : { "HtmlHiddenInput(String,String,SgmlPage,Map<String,DomAttr>)" : 2}},{ "className" : "com::gargoylesoftware::htmlunit::html::applets::AppletContextImpl" , "selectors" : { "AppletContextImpl(HtmlPage)" : 1}},{ "className" : "java::util::PriorityQueue" , "selectors" : { "add(E)" : 13 , "clear()" : 2 , "offer(E)" : 5 , "peek()" : 9 , "poll()" : 8 , "remove(Object)" : 5 , "size()" : 5}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::host::html::HTMLTableCaptionElement" , "selectors" : { "getValidVAlignValues()" : 2}},{ "className" : "com::gargoylesoftware::htmlunit::html::HtmlImageInput" , "selectors" : { "HtmlImageInput(String,String,SgmlPage,Map<String,DomAttr>)" : 2 , "click()" : 3 , "click(int,int)" : 3}},{ "className" : "com::gargoylesoftware::htmlunit::html::HTMLParser" , "selectors" : { "addBodyToPageIfNecessary(HtmlPage,boolean,boolean)" : 2 , "extractNestedException(Throwable)" : 1 , "extractNestedException(Throwable)::XNIException" : 2 , "getElementFactory(String,String)" : 3 , "getFactory(String)" : 14 , "parse(WebResponse,WebWindow,HtmlPage)" : 2 , "parse(WebResponse,WebWindow,HtmlPage)::XMLInputSource" : 1 , "parseFragment(DomNode,String)" : 1 , "parseFragment(DomNode,String)::QName" : 3 , "parseFragment(DomNode,String)::XMLInputSource" : 1 , "parseHtml(WebResponse,WebWindow)" : 2 , "parseXHtml(WebResponse,WebWindow)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::host::Navigator" , "selectors" : { "Navigator()" : 1 , "initPlugins()" : 2 , "jsxFunction_javaEnabled()" : 1 , "jsxGet_cookieEnabled()" : 1 , "jsxGet_cpuClass()" : 1 , "jsxGet_platform()" : 1 , "jsxGet_systemLanguage()" : 1 , "jsxGet_userLanguage()" : 1 , "setParentScope(???)" : 1 , "setPrototype(???)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::html::HtmlElement::ChildElementsIterator" , "selectors" : { "ChildElementsIterator()" : 3 , "hasNext()" : 2 , "nextElement()" : 3 , "setNextElement(DomNode)" : 2}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::HtmlUnitContextFactory::TimeoutContext" , "selectors" : { "TimeoutContext(???)" : 1 , "setDebugger(???)" : 1 , "setInstructionObserverThreshold(???)" : 1 , "setMaximumInterpreterStackDepth(???)" : 1 , "setOptimizationLevel(???)" : 1 , "setWrapFactory(???)" : 1 , "startClock()" : 1 , "terminateScriptIfNecessary()" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::DebugFrameAdapter" , "selectors" : { "DebugFrameAdapter()" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::libraries::CurvyCornersTest" , "selectors" : { "doTest(String)" : 2}},{ "className" : "com::gargoylesoftware::htmlunit::BrowserNoneClassRunner" , "selectors" : { "BrowserNoneClassRunner(???)" : 1 , "containsTestMethods(Class<WebTestCase>)" : 1 , "methodBlock(FrameworkMethod)::Fail" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::html::SubmittableElement" , "selectors" : { "getSubmitKeyValuePairs()" : 1 , "reset()" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::ObjectInstantiationException" , "selectors" : { "ObjectInstantiationException(String,Throwable)" : 2}},{ "className" : "com::gargoylesoftware::htmlunit::WebClientTest::CollectingPageCreator" , "selectors" : { "CollectingPageCreator(List<Page>)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::html::HtmlHorizontalRule" , "selectors" : { "HtmlHorizontalRule(String,String,SgmlPage,Map<String,DomAttr>)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::host::Enumerator" , "selectors" : { "jsxFunction_atEnd()" : 1}},{ "className" : "org::xml::sax::Locator" , "selectors" : { "getColumnNumber()" : 54 , "getLineNumber()" : 58 , "getPublicId()" : 12 , "getSystemId()" : 30}},{ "className" : "com::gargoylesoftware::htmlunit::attachment::AttachmentHandler" , "selectors" : { "handleAttachment(Page)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::html::HtmlHead" , "selectors" : { "HtmlHead(String,String,SgmlPage,Map<String,DomAttr>)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::html::xpath::HtmlUnitXPathTest" , "selectors" : { "xpath(HtmlPage,String,Object[])" : 5}},{ "className" : "com::gargoylesoftware::htmlunit::html::DefaultElementFactoryTest" , "selectors" : { "verifyAttributes(HtmlAnchor)" : 2}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::regexp::mozilla::MozillaTestGenerator" , "selectors" : { "getExpected(String)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::host::css::CSSStyleSheet" , "selectors" : { "CSSStyleSheet()" : 1 , "CSSStyleSheet()::CSSStyleSheetImpl" : 1 , "CSSStyleSheet(???)" : 4 , "CSSStyleSheet(HTMLElement,CSSStyleSheet,String)" : 3 , "getParentScope(???)" : 1 , "getUri()" : 1 , "getWrappedSheet()" : 4 , "isActive()" : 1 , "isActive(String)" : 2 , "jsxGet_cssRules()" : 1 , "jsxGet_ownerNode()" : 1 , "loadStylesheet(Window,HTMLElement,HtmlLink,String)" : 2 , "loadStylesheet(Window,HTMLElement,HtmlLink,String)::InputSource" : 3 , "modifyIfNecessary(ComputedCSSStyleDeclaration,HTMLElement)" : 2 , "modifyIfNecessary(ComputedCSSStyleDeclaration,HTMLElement,CSSRuleList)" : 2 , "parseCSS(InputSource)::CSSStyleSheetImpl" : 2 , "parseCSS(InputSource)::SACParserCSS21" : 1 , "parseSelectors(???)" : 3 , "parseSelectors(InputSource)::SACParserCSS21" : 1 , "parseSelectors(InputSource)::SelectorListImpl" : 2 , "selects(???)" : 12 , "selects(BrowserVersion,Condition,HtmlElement)::LangCondition" : 1 , "setParentScope(???)" : 1 , "setPrototype(???)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::History" , "selectors" : { "History(WebWindow)" : 1 , "addPage(Page)" : 3 , "back()" : 3 , "forward()" : 2 , "getIndex()" : 25 , "getLength()" : 27 , "getUrl(int)" : 39 , "go(int)" : 1 , "goToUrlAtCurrentIndex()" : 3 , "initTransientFields()" : 2}},{ "className" : "com::gargoylesoftware::htmlunit::html::HtmlLegend" , "selectors" : { "HtmlLegend(String,String,SgmlPage,Map<String,DomAttr>)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::html::HtmlSample" , "selectors" : { "HtmlSample(String,String,SgmlPage,Map<String,DomAttr>)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::host::StaticNodeList" , "selectors" : { "StaticNodeList()" : 1 , "jsxGet_length()" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::host::XSLTProcessor" , "selectors" : { "XSLTProcessor()" : 1 , "getQualifiedName(String,String)" : 2 , "jsxFunction_importStylesheet(Node)" : 1 , "jsxFunction_setParameter(String,String,Object)" : 1 , "setParentScope(???)" : 1 , "setPrototype(???)" : 1 , "transform(Node)" : 2 , "transform(Node,DomNode)" : 2}},{ "className" : "com::gargoylesoftware::htmlunit::NotYetImplementedTest" , "selectors" : { "getDescription(List<String>,int)" : 2 , "getLineNumber(List<String>,int)" : 3 , "process(File)" : 2 , "process(List<String>,String)" : 1 , "save()" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::html::DomNode::DescendantElementsIterator<T>" , "selectors" : { "DescendantElementsIterator(Class<T>)" : 2}},{ "className" : "com::gargoylesoftware::htmlunit::html::HtmlResetInput" , "selectors" : { "HtmlResetInput(String,String,SgmlPage,Map<String,DomAttr>)" : 2}},{ "className" : "com::gargoylesoftware::htmlunit::html::SiblingDomNodeList::SiblingListIterator" , "selectors" : { "SiblingListIterator(int)" : 1 , "hasNext()" : 1 , "hasPrevious()" : 1 , "next()" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::host::xml::XMLHttpRequest2Test" , "selectors" : { "requestHeader_contentLength(String)" : 3 , "sameOriginPolicy(String)" : 2 , "testResponseXML(String)" : 2}},{ "className" : "com::gargoylesoftware::htmlunit::html::HtmlHeading3" , "selectors" : { "HtmlHeading3(String,String,SgmlPage,Map<String,DomAttr>)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::DefaultCssErrorHandler" , "selectors" : { "DefaultCssErrorHandler()" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::html::HtmlSpacer" , "selectors" : { "HtmlSpacer(String,String,SgmlPage,Map<String,DomAttr>)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::html::HtmlTextInput" , "selectors" : { "HtmlTextInput(String,String,SgmlPage,Map<String,DomAttr>)" : 5 , "focus()" : 2 , "getSelectedText()" : 1 , "getSelectionEnd()" : 1 , "getSelectionStart()" : 1 , "select()" : 3 , "setSelectionEnd(int)" : 5 , "setSelectionStart(int)" : 5}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::host::Window" , "selectors" : { "Window()" : 1 , "associateValue(???)" : 1 , "custom_eval(String)" : 1 , "delete(???)" : 1 , "get(???)" : 1 , "getCurrentEvent()" : 1 , "getDocument()" : 6 , "getEventListenersContainer()" : 14 , "getFrameWindowByName(HtmlPage,String)" : 1 , "getFrames()" : 2 , "getHandlerForJavaScript(String)" : 2 , "getPrototype(???)" : 4 , "getProxy(WebWindow)" : 7 , "getSelection()" : 2 , "getWebWindow()" : 74 , "initialize()" : 1 , "initialize(Page)" : 1 , "initialize(WebWindow)" : 1 , "jsxFunction_attachEvent(???)" : 1 , "jsxFunction_getComputedStyle(HTMLElement,String)" : 5 , "jsxFunction_scrollTo(int,int)" : 1 , "jsxFunction_setTimeout(Object,int,Object)" : 1 , "jsxGet_document()" : 4 , "jsxGet_frames()" : 1 , "jsxGet_innerHeight()" : 1 , "jsxGet_innerWidth()" : 1 , "jsxGet_location()" : 1 , "jsxGet_navigator()" : 6 , "jsxGet_onerror()" : 1 , "jsxGet_screen()" : 6 , "jsxSet_location(String)" : 1 , "jsxSet_status(String)" : 1 , "makeUrlForOpenWindow(String)" : 1 , "put(???)" : 3 , "setCurrentEvent(Event)" : 4 , "setHandlerForJavaScript(String,Object)" : 2 , "setPrototypes(???)" : 1 , "triggerOnError(ScriptException)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::html::HtmlBreak" , "selectors" : { "HtmlBreak(String,String,SgmlPage,Map<String,DomAttr>)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::html::HtmlPasswordInput" , "selectors" : { "HtmlPasswordInput(String,String,SgmlPage,Map<String,DomAttr>)" : 3 , "focus()" : 1 , "getSelectionEnd()" : 1 , "getSelectionStart()" : 1 , "select()" : 1 , "setSelectionEnd(int)" : 2 , "setSelectionStart(int)" : 2}},{ "className" : "com::gargoylesoftware::htmlunit::html::HtmlFrame" , "selectors" : { "HtmlFrame(String,String,SgmlPage,Map<String,DomAttr>)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::host::css::SelectorSpecificityTest" , "selectors" : { "parseSelector(CSSStyleSheet,String)::InputSource" : 1 , "selectorSpecifity(String,String)" : 9}},{ "className" : "com::gargoylesoftware::htmlunit::WebWindow" , "selectors" : { "getEnclosedPage()" : 105 , "getHistory()" : 7 , "getJobManager()" : 28 , "getName()" : 12 , "getParentWindow()" : 10 , "getScriptObject()" : 24 , "getTopWindow()" : 19 , "getWebClient()" : 49 , "isClosed()" : 3 , "setEnclosedPage(Page)" : 7 , "setName(String)" : 2 , "setScriptObject(Object)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::background::JavaScriptJobManagerTest" , "selectors" : { "assertMaxTestRunTime(long)" : 2 , "startTimedTest()" : 2}},{ "className" : "com::gargoylesoftware::htmlunit::html::HtmlSmall" , "selectors" : { "HtmlSmall(String,String,SgmlPage,Map<String,DomAttr>)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::host::html::HTMLTableCellElement" , "selectors" : { "getRow()" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::html::HtmlAnchor" , "selectors" : { "HtmlAnchor(String,String,SgmlPage,Map<String,DomAttr>)" : 1 , "doClickAction()" : 1 , "doClickAction(String)" : 2 , "getHrefAttribute()" : 16 , "getTargetAttribute()" : 2 , "openLinkInNewWindow()" : 1}},{ "className" : "java::lang::RuntimeException" , "selectors" : { "RuntimeException()" : 358 , "RuntimeException(String)" : 4456 , "RuntimeException(String,Throwable)" : 694 , "RuntimeException(Throwable)" : 1403 , "append(???)" : 2 , "getMessage(???)" : 1 , "parse(???)" : 2 , "printStackTrace(???)" : 1 , "read(???)" : 1 , "run(???)" : 1 , "toString(???)" : 1 , "transform(???)" : 12 , "weakKeys(???)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::html::HtmlNoBreak" , "selectors" : { "HtmlNoBreak(String,String,SgmlPage,Map<String,DomAttr>)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::html::DomChangeEvent" , "selectors" : { "DomChangeEvent(DomNode,DomNode)" : 2 , "getChangedNode()" : 4 , "getParentNode()" : 2}},{ "className" : "com::gargoylesoftware::htmlunit::html::HtmlTableFooter" , "selectors" : { "HtmlTableFooter(String,String,SgmlPage,Map<String,DomAttr>)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::html::HTMLParserListenerTest" , "selectors" : { "testSimple(int,int)" : 2}},{ "className" : "com::gargoylesoftware::htmlunit::html::HtmlScript" , "selectors" : { "HtmlScript(String,String,SgmlPage,Map<String,DomAttr>)" : 1 , "asText()" : 1 , "executeEventIfNotIE(String)" : 3 , "executeInlineScriptIfNeeded(boolean)" : 1 , "executeScriptIfNeeded(boolean)" : 5 , "getCharsetAttribute()" : 1 , "getDeferAttribute()" : 1 , "getEventAttribute()" : 1 , "getHtmlForAttribute()" : 1 , "getLanguageAttribute()" : 2 , "getSrcAttribute()" : 5 , "getTypeAttribute()" : 2 , "isDeferred()" : 5 , "isExecutionNeeded()" : 2 , "isJavaScript(String,String)" : 1 , "setAndExecuteReadyState(String)" : 4}},{ "className" : "javax::net::ssl::TrustManagerFactory" , "selectors" : { "getDefaultAlgorithm()" : 13 , "getInstance(String)" : 19 , "getTrustManagers()" : 17 , "init(KeyStore)" : 16 , "init(ManagerFactoryParameters)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::html::HtmlInlineFrame" , "selectors" : { "HtmlInlineFrame(String,String,SgmlPage,Map<String,DomAttr>)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::html::xpath::IsDescendantOfContextualFormFunction" , "selectors" : { "execute(XPathContext)::XBoolean" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::html::HtmlVideo" , "selectors" : { "HtmlVideo(String,String,SgmlPage,Map<String,DomAttr>)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::ScriptResult" , "selectors" : { "ScriptResult(Object,Page)" : 6 , "combine(ScriptResult,ScriptResult,boolean)" : 3 , "getJavaScriptResult()" : 13 , "getNewPage()" : 11 , "isFalse(ScriptResult)" : 4 , "isUndefined(ScriptResult)" : 2}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::host::html::HTMLCollection" , "selectors" : { "HTMLCollection()" : 29 , "HTMLCollection(DomNode)" : 2 , "HTMLCollection(DomNode,List<?>)" : 1 , "computeElements()" : 3 , "equivalentValues(Object)" : 1 , "get(???)" : 6 , "getClassName()" : 2 , "getElements()" : 10 , "getIt(Object)" : 3 , "getLength()" : 3 , "getWithPreemption(String)" : 1 , "init(???)" : 1 , "init(DomNode,String)" : 31 , "initFromChildren(DomNode)" : 1 , "isXMLSpaceDefault(DomNode)" : 1 , "jsxFunction_item(Object)" : 10 , "jsxGet_length()" : 15 , "nullIfNotFound(Object)" : 3 , "setAvoidObjectDetection(boolean)" : 2}},{ "className" : "com::gargoylesoftware::htmlunit::attachment::CollectingAttachmentHandler" , "selectors" : { "CollectingAttachmentHandler(List<Attachment>)" : 3}},{ "className" : "org::w3c::dom::stylesheets::MediaList" , "selectors" : { "getLength()" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::ssl::InsecureSSLProtocolSocketFactory" , "selectors" : { "InsecureSSLProtocolSocketFactory()::SSLSocketFactory" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::host::Attr" , "selectors" : { "Attr()" : 1 , "detachFromParent()" : 1 , "getDomNodeOrDie()" : 8 , "jsxGet_lastChild()" : 1 , "jsxGet_name()" : 4 , "jsxGet_nodeValue()" : 1 , "jsxGet_value()" : 4 , "jsxSet_value(String)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::DefaultCredentialsProvider::CredentialsFactory" , "selectors" : { "getInstance(???)" : 2}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::host::css::CSSStyleDeclaration::StyleElement" , "selectors" : { "StyleElement(String,String)" : 1 , "StyleElement(String,String,String,SelectorSpecificity,long)" : 2 , "StyleElement(String,String,long)" : 4 , "getIndex()" : 5 , "getName()" : 3 , "getPriority()" : 1 , "getSpecificity()" : 1 , "getValue()" : 11}},{ "className" : "com::gargoylesoftware::htmlunit::html::HtmlEmphasis" , "selectors" : { "HtmlEmphasis(String,String,SgmlPage,Map<String,DomAttr>)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::html::HtmlTableColumn" , "selectors" : { "HtmlTableColumn(String,String,SgmlPage,Map<String,DomAttr>)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::html::HtmlInput" , "selectors" : { "HtmlInput(String,String,SgmlPage,Map<String,DomAttr>)" : 11 , "executeOnChangeHandlerIfAppropriate(HtmlElement)" : 10 , "getDefaultValue()" : 1 , "getNameAttribute()" : 16 , "getSubmitKeyValuePairs()" : 1 , "getTypeAttribute()" : 4 , "getValueAttribute()" : 62 , "isChecked()" : 69 , "isDefaultChecked()" : 1 , "isDisabled()" : 1 , "isReadOnly()" : 1 , "setAttributeNS(String,String,String)" : 2 , "setChecked(boolean)" : 1 , "setDefaultChecked(boolean)" : 1 , "setDefaultValue(String)" : 4 , "setDefaultValue(String,boolean)" : 2 , "setReadOnly(boolean)" : 1 , "setScriptObject(???)" : 1 , "setValueAttribute(String)" : 21}},{ "className" : "com::gargoylesoftware::htmlunit::libraries::JQueryTestBase" , "selectors" : { "getExpectedPath()" : 1 , "getNextExpectedModuleResult(Iterator<String>)" : 2 , "getUrl()" : 1 , "getVersion()" : 6 , "loadPage()" : 1 , "ok(Iterator<HtmlElement>,Iterator<String>)" : 1 , "ok(Iterator<HtmlElement>,Iterator<String>)::ComparisonFailure" : 1 , "runTest()" : 2}},{ "className" : "com::gargoylesoftware::htmlunit::ProxyConfig" , "selectors" : { "ProxyConfig()" : 1 , "ProxyConfig(String,int)" : 2 , "ProxyConfig(String,int,boolean)" : 1 , "addHostsToProxyBypass(String)" : 3 , "getProxyAutoConfigContent()" : 1 , "getProxyAutoConfigUrl()" : 3 , "getProxyHost()" : 1 , "getProxyPort()" : 1 , "isSocksProxy()" : 1 , "removeHostsFromProxyBypass(String)" : 2 , "setProxyAutoConfigContent(String)" : 2 , "setProxyHost(String)" : 1 , "setProxyPort(int)" : 1 , "shouldBypassProxy(String)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::configuration::JavaScriptConfiguration" , "selectors" : { "JavaScriptConfiguration(BrowserVersion)" : 2 , "buildUsageMap(BrowserVersion)" : 1 , "classConfigEquals(String,ClassConfiguration)" : 7 , "findPropertyInChain(String,String)" : 1 , "getAllEntries()" : 3 , "getClassConfiguration(String)" : 10 , "getClassObject(String)" : 1 , "getClassnameForClass(Class<?>)" : 4 , "getConfigurationFileAsReader()" : 1 , "getFunctionMethod(String,String)" : 2 , "getHtmlJavaScriptMapping()" : 4 , "getInstance(BrowserVersion)" : 17 , "getPropertyReadMethod(String,String)" : 2 , "getPropertyWriteMethod(String,String)" : 2 , "isDocumentLoaded()" : 4 , "keySet()" : 4 , "loadConfiguration()" : 2 , "loadConfiguration(Reader)" : 13 , "parseClassElement(Element,BrowserVersion)" : 1 , "parseConstantElement(ClassConfiguration,Element,BrowserVersion)" : 1 , "parseFunctionElement(ClassConfiguration,Element,BrowserVersion)" : 1 , "parsePropertyElement(ClassConfiguration,Element,BrowserVersion)" : 1 , "propertyExists(Class<?>,String)" : 2 , "propertyExists(String,String)" : 1 , "resetClassForTesting()" : 3 , "testToExcludeElement(Element,BrowserVersion)" : 4 , "testToIncludeForBrowserConstraint(Element,BrowserVersion)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::html::HtmlDefinitionList" , "selectors" : { "HtmlDefinitionList(String,String,SgmlPage,Map<String,DomAttr>)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::util::MemoryLeakDetector" , "selectors" : { "MemoryLeakDetector()" : 1 , "allocateMemory(int)" : 1 , "canBeGCed(String)" : 1 , "gc()" : 1 , "register(String,Object)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::html::XmlSerializer" , "selectors" : { "XmlSerializer()" : 1 , "asXml(HtmlElement)" : 1 , "createAttributesCopyWithClonedAttribute(HtmlElement,String)" : 3 , "createFile(String,String)" : 3 , "getAttributesFor(BaseFrame)" : 1 , "getAttributesFor(HtmlImage)" : 1 , "getAttributesFor(HtmlLink)" : 1 , "getFileExtension(Page)" : 1 , "isEmptyXmlTagExpanded(DomNode)" : 1 , "isExcluded(DomElement)" : 1 , "printOpeningTag(DomElement)" : 1 , "printXml(DomElement)" : 2 , "save(HtmlPage,File)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::html::HtmlElement" , "selectors" : { "HtmlElement(String,String,SgmlPage,Map<String,DomAttr>)" : 104 , "addAttributeToMap(SgmlPage,Map<String,DomAttr>,String,String,String)" : 2 , "addHtmlAttributeChangeListener(HtmlAttributeChangeListener)" : 10 , "appendChildIfNoneExists(String)" : 4 , "blur()" : 5 , "click()" : 308 , "click(Event)" : 2 , "click(boolean,boolean,boolean)" : 3 , "createAttributeMap(int)" : 1 , "dblClick()" : 2 , "dblClick(boolean,boolean,boolean)" : 1 , "doClickAction()" : 2 , "doMouseEvent(String,boolean,boolean,boolean,int)" : 6 , "doType(char,boolean,boolean,boolean)" : 1 , "fireEvent(Event)" : 10 , "fireEvent(String)" : 10 , "fireHtmlAttributeAdded(HtmlAttributeChangeEvent)" : 2 , "fireHtmlAttributeRemoved(HtmlAttributeChangeEvent)" : 2 , "fireHtmlAttributeReplaced(HtmlAttributeChangeEvent)" : 2 , "focus()" : 14 , "getCanonicalXPath()" : 2 , "getChildElements()" : 13 , "getElementById(String)" : 48 , "getElementsByAttribute(String,String,String)" : 9 , "getEnclosingElement(String)" : 14 , "getEnclosingForm()" : 10 , "getEventTargetElement()" : 2 , "getHtmlElementsByTagName(String)" : 17 , "getHtmlElementsByTagNames(List<String>)" : 1 , "getId()" : 35 , "getLangAttribute()" : 1 , "getNodeName()" : 16 , "getOneHtmlElementByAttribute(String,String,String)" : 6 , "getScriptObject(???)" : 9 , "getTabIndex()" : 4 , "getXPathToken()" : 1 , "getXmlLangAttribute()" : 1 , "hasEventHandlers(String)" : 4 , "isStateUpdateFirst()" : 1 , "isSubmittableByEnter()" : 1 , "mouseDown()" : 2 , "mouseDown(boolean,boolean,boolean,int)" : 3 , "mouseMove()" : 1 , "mouseMove(boolean,boolean,boolean,int)" : 1 , "mouseOut()" : 1 , "mouseOut(boolean,boolean,boolean,int)" : 1 , "mouseOver()" : 4 , "mouseOver(boolean,boolean,boolean,int)" : 1 , "mouseUp()" : 2 , "mouseUp(boolean,boolean,boolean,int)" : 3 , "preventDefault()" : 1 , "removeAttribute(String)" : 21 , "removeChild(String,int)" : 3 , "removeFocus()" : 8 , "removeHtmlAttributeChangeListener(HtmlAttributeChangeListener)" : 1 , "rightClick()" : 1 , "rightClick(boolean,boolean,boolean)" : 1 , "setAttributeNS(String,String,String)" : 10 , "setEventHandler(String,String)" : 1 , "setId(String)" : 2 , "setOwningForm(HtmlForm)" : 1 , "type(String)" : 20 , "type(char)" : 14 , "type(char,boolean,boolean,boolean)" : 3}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::background::JavaScriptJobManagerGaeMinimalTest" , "selectors" : { "addJob_multipleExecution_removeAllJobs()::MutableInt" : 1 , "addJob_multipleExecution_removeJob()::MutableInt" : 2 , "addJob_singleExecution()::MutableInt" : 1 , "getJobCount()::MutableInt" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::host::html::HTMLObjectElement" , "selectors" : { "jsxSet_classid(String)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::SgmlPage" , "selectors" : { "SgmlPage(WebResponse,WebWindow)" : 3 , "asXml()" : 42 , "clone()" : 1 , "createAttribute(String)" : 2 , "createDomDocumentFragment()" : 7 , "createElement(String)" : 1 , "createElementNS(String,String)" : 1 , "getDoctype()" : 3 , "getDocumentElement()" : 7 , "getEnclosingWindow()" : 100 , "getNodeName()" : 1 , "getNodeType()" : 1 , "getPage()" : 1 , "getPageEncoding()" : 4 , "getScriptObject(???)" : 2 , "getUrl()" : 4 , "getWebClient()" : 138 , "getWebResponse()" : 154 , "hasCaseSensitiveTagNames()" : 2 , "setDocumentType(DomDocumentType)" : 2}},{ "className" : "com::gargoylesoftware::htmlunit::html::HtmlHeading2" , "selectors" : { "HtmlHeading2(String,String,SgmlPage,Map<String,DomAttr>)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::HttpWebConnection" , "selectors" : { "HttpWebConnection(WebClient)" : 3 , "buildFilePart(KeyDataPair,String)::InputStreamBody" : 1 , "buildHttpMethod(HttpMethod,URI)::HttpDelete" : 1 , "buildHttpMethod(HttpMethod,URI)::HttpGet" : 1 , "buildHttpMethod(HttpMethod,URI)::HttpHead" : 1 , "buildHttpMethod(HttpMethod,URI)::HttpOptions" : 1 , "buildHttpMethod(HttpMethod,URI)::HttpPost" : 1 , "buildHttpMethod(HttpMethod,URI)::HttpPut" : 1 , "buildHttpMethod(HttpMethod,URI)::HttpTrace" : 1 , "createHttpClient()::BasicHttpParams" : 1 , "createHttpClient()::SchemeRegistry" : 1 , "downloadContent(InputStream)" : 3 , "getCharset(String,List<NameValuePair>)" : 1 , "getHostConfiguration(WebRequest)::HttpHost" : 1 , "getHttpClient()::Scheme" : 1 , "getTimeout()" : 2 , "makeHttpMethod(WebRequest)::BasicHeader" : 2 , "makeHttpMethod(WebRequest)::StringBody" : 1 , "makeHttpMethod(WebRequest)::StringEntity" : 3 , "newWebResponseInstance(WebResponseData,long,WebRequest)" : 1 , "setProxy(HttpClient,WebRequest)::HttpHost" : 1 , "setUseInsecureSSL(boolean)" : 1 , "shutdown()" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::DebugFrameImpl" , "selectors" : { "DebugFrameImpl(???)" : 1 , "getFunctionName(Scriptable)::ScriptableObject" : 2 , "getParamName(int)" : 1 , "stringValue(Object)" : 1 , "stringValue(Object)::IdFunctionObject" : 1 , "stringValue(Object)::NativeFunction" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::host::StorageImpl" , "selectors" : { "StorageImpl()" : 1 , "clear(Type,HtmlPage)" : 1 , "get(Map<String,Map<String,String>>,String,String)" : 1 , "getInstance()" : 2 , "getKey(Type,HtmlPage)" : 4 , "getMap(Type,HtmlPage)" : 1 , "getStorage(Type)" : 4 , "load()" : 1 , "save()" : 1 , "set(Map<String,Map<String,String>>,String,String,String)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::html::TableRowGroup" , "selectors" : { "TableRowGroup(String,String,SgmlPage,Map<String,DomAttr>)" : 3 , "getRows()" : 2}},{ "className" : "com::gargoylesoftware::htmlunit::html::HtmlEmbed" , "selectors" : { "HtmlEmbed(String,String,SgmlPage,Map<String,DomAttr>)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::host::DOMException" , "selectors" : { "DOMException(String,short)" : 1 , "getSourcePositionFromStack(???)" : 1 , "setLocation(String,int)" : 1 , "setParentScope(???)" : 1 , "setPrototype(???)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::html::HtmlMeta" , "selectors" : { "HtmlMeta(String,String,SgmlPage,Map<String,DomAttr>)" : 1 , "getContentAttribute()" : 2 , "getHttpEquivAttribute()" : 2 , "performSetCookie()" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::html::DomCharacterData" , "selectors" : { "DomCharacterData(SgmlPage,String)" : 2 , "appendData(String)" : 1 , "deleteData(int,int)" : 2 , "getCanonicalXPath()" : 12 , "getData()" : 22 , "getLength()" : 3 , "getNodeValue()" : 2 , "getXPathToken()" : 1 , "insertData(int,String)" : 2 , "replaceData(int,int,String)" : 1 , "setData(String)" : 5 , "setTextContent(String)" : 2 , "substringData(int,int)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::html::DomNodeListTest" , "selectors" : { "validateDomNodeList(DomNodeList<E>)" : 3}},{ "className" : "com::gargoylesoftware::htmlunit::html::XPathDomNodeList<T>" , "selectors" : { "XPathDomNodeList(DomNode,String)" : 2}},{ "className" : "com::gargoylesoftware::htmlunit::RefreshHandler" , "selectors" : { "handleRefresh(Page,URL,int)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::html::HtmlItalic" , "selectors" : { "HtmlItalic(String,String,SgmlPage,Map<String,DomAttr>)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::util::WebResponseWrapper" , "selectors" : { "WebResponseWrapper(WebResponse)" : 1 , "getWebRequest()" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::WebWindowImpl" , "selectors" : { "WebWindowImpl(WebClient)" : 3 , "addChildWindow(FrameWindow)" : 1 , "destroyChildren()" : 4 , "getEnclosedPage()" : 22 , "getHistory()" : 3 , "getJobManager()" : 3 , "getName()" : 1 , "getScriptObject()" : 6 , "getWebClient()" : 2 , "isJavaScriptInitializationNeeded()" : 1 , "performRegistration()" : 1 , "setClosed()" : 2 , "setJobManager(JavaScriptJobManager)" : 2 , "setName(String)" : 1 , "setScriptObject(Object)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::CookieManager" , "selectors" : { "<Initializer>()::DefaultHttpClient" : 1 , "CookieManager()" : 2 , "addCookie(Cookie)" : 8 , "clearCookies()" : 1 , "getCookies()" : 9 , "getCookies(URL)" : 1 , "getCookies(URL)::CookieOrigin" : 1 , "isCookiesEnabled()" : 6 , "removeCookie(Cookie)" : 1 , "setCookiesEnabled(boolean)" : 4 , "updateFromState(???)" : 2 , "updateState(???)" : 7}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::host::Event" , "selectors" : { "Event()" : 1 , "Event(DomNode,String)" : 9 , "applies(DomNode)" : 2 , "createPropertyChangeEvent(DomNode,String)" : 1 , "endFire()" : 1 , "isAborted(ScriptResult)" : 6 , "isPropagationStopped()" : 7 , "jsxFunction_initEvent(String,boolean,boolean)" : 1 , "jsxGet_keyCode()" : 1 , "jsxGet_returnValue()" : 4 , "jsxGet_srcElement()" : 2 , "jsxGet_target()" : 2 , "jsxGet_type()" : 13 , "jsxSet_cancelBubble(boolean)" : 1 , "jsxSet_returnValue(Object)" : 1 , "jsxSet_srcElement(Object)" : 1 , "setAltKey(boolean)" : 4 , "setCtrlKey(boolean)" : 4 , "setCurrentTarget(???)" : 2 , "setEventPhase(short)" : 7 , "setEventType(String)" : 2 , "setKeyCode(Object)" : 4 , "setParentScope(???)" : 3 , "setPrototype(???)" : 4 , "setShiftKey(boolean)" : 4 , "setTarget(Object)" : 3 , "startFire()" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::html::HtmlBold" , "selectors" : { "HtmlBold(String,String,SgmlPage,Map<String,DomAttr>)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::MockActiveXObject" , "selectors" : { "GetMessage()" : 1 , "MockActiveXObject()" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::html::NodeIterator" , "selectors" : { "getFirstNode(DomNode)" : 1 , "getNextNode(DomNode)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::html::HtmlOptionGroup" , "selectors" : { "HtmlOptionGroup(String,String,SgmlPage,Map<String,DomAttr>)" : 1 , "getEnclosingSelect()" : 1 , "isDisabled()" : 2}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::host::ActiveXObject" , "selectors" : { "addFunction(SimpleScriptable,String)" : 18 , "addFunction(SimpleScriptable,String,String)" : 1 , "addFunction(SimpleScriptable,String,String)::FunctionObject" : 1 , "addProperty(SimpleScriptable,String,String,String)" : 1 , "addProperty(SimpleScriptable,String,boolean,boolean)" : 16 , "buildXMLDocument(WebWindow)" : 3 , "getMethod(Class<? extends SimpleScriptable>,String)" : 3 , "isXMLDocument(String)" : 4 , "isXMLHttpRequest(String)" : 9 , "isXMLTemplate(String)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::WebClient2Test::RedirectServlet" , "selectors" : { "RedirectServlet(int,String)" : 2}},{ "className" : "com::gargoylesoftware::htmlunit::html::impl::SelectableTextInput" , "selectors" : { "focus()" : 1 , "getPage()" : 1 , "getSelectionEnd()" : 3 , "getSelectionStart()" : 3 , "getText()" : 6 , "setSelectionEnd(int)" : 1 , "setSelectionStart(int)" : 1 , "setText(String)" : 2}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::host::html::HTMLElement::DownloadBehaviorJob" , "selectors" : { "DownloadBehaviorJob(???)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::html::HtmlBaseFont" , "selectors" : { "HtmlBaseFont(String,String,SgmlPage,Map<String,DomAttr>)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::html::DisabledElementTest" , "selectors" : { "executeDisabledTest(String,boolean)" : 3}},{ "className" : "com::gargoylesoftware::htmlunit::TextPage" , "selectors" : { "TextPage(WebResponse,WebWindow)" : 2 , "getContent()" : 4 , "getWebResponse()" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::html::HtmlDirectory" , "selectors" : { "HtmlDirectory(String,String,SgmlPage,Map<String,DomAttr>)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::util::NameValuePair" , "selectors" : { "NameValuePair(String,String)" : 95 , "getName()" : 13 , "getValue()" : 13 , "toHttpClient(???)" : 4 , "toHttpClient(List)::BasicNameValuePair" : 1 , "toHttpClient(NameValuePair)::BasicNameValuePair" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::html::HtmlCode" , "selectors" : { "HtmlCode(String,String,SgmlPage,Map<String,DomAttr>)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::html::BaseFrame" , "selectors" : { "BaseFrame(String,String,SgmlPage,Map<String,DomAttr>)" : 2 , "getEnclosedPage()" : 32 , "getEnclosedWindow()" : 13 , "getNameAttribute()" : 3 , "getScriptObject(???)" : 4 , "getSrcAttribute()" : 16 , "isAlreadyLoadedByAncestor(URL)" : 1 , "isContentLoaded()" : 1 , "loadInnerPage()" : 2 , "loadInnerPageIfPossible(String)" : 2 , "setNameAttribute(String)" : 3 , "setSrcAttribute(String)" : 5}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::background::JavaScriptExecutionJob" , "selectors" : { "JavaScriptExecutionJob(int,Integer,String,WebWindow)" : 2 , "runJavaScript(HtmlPage)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::host::NodeTest" , "selectors" : { "test_insertBefore(String)" : 2}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::host::Node" , "selectors" : { "asJavaScriptException(DOMException)::Interpreter" : 1 , "asJavaScriptException(DOMException)::JavaScriptException" : 1 , "copyEventListenersWhenNeeded(DomNode,DomNode)" : 2 , "executeEvent(Event)" : 5 , "fireEvent(Event)" : 4 , "getEventHandlerProp(String)" : 24 , "getEventListenersContainer()" : 6 , "getJavaScriptNode(DomNode)" : 8 , "getParent()" : 16 , "hasEventHandlers(String)" : 1 , "isNodeInsertable(Node)" : 3 , "jsxFunction_appendChild(Object)" : 3 , "jsxFunction_hasChildNodes()" : 1 , "jsxFunction_insertBefore(Object[])" : 4 , "jsxFunction_removeChild(Object)" : 2 , "jsxFunction_replaceChild(Object,Object)" : 1 , "jsxGet_childNodes()" : 2 , "jsxGet_firstChild()" : 6 , "jsxGet_lastChild()" : 4 , "jsxGet_namespaceURI()" : 1 , "jsxGet_nextSibling()" : 6 , "jsxGet_nodeName()" : 1 , "jsxGet_nodeType()" : 3 , "jsxGet_previousSibling()" : 6 , "jsxGet_xml()" : 1 , "setDomNode(DomNode)" : 13 , "setEventHandlerProp(String,Object)" : 26}},{ "className" : "com::gargoylesoftware::htmlunit::html::xpath::XPathAdapter" , "selectors" : { "XPathAdapter(???)" : 1 , "XPathAdapter(String,SourceLocator,PrefixResolver,ErrorListener,boolean)::DefaultErrorHandler" : 1 , "XPathAdapter(String,SourceLocator,PrefixResolver,ErrorListener,boolean)::XPathParser" : 1 , "execute(???)" : 1 , "execute(XPathContext,int,PrefixResolver)::WrappedRuntimeException" : 1 , "initFunctionTable()" : 1 , "initFunctionTable()::FunctionTable" : 1 , "preProcessXPath(String)" : 1 , "processOutsideBrackets(char[])" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::html::HtmlAcronym" , "selectors" : { "HtmlAcronym(String,String,SgmlPage,Map<String,DomAttr>)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::html::HtmlSource" , "selectors" : { "HtmlSource(String,String,SgmlPage,Map<String,DomAttr>)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::host::WindowTest" , "selectors" : { "close()::EventCatcher" : 1 , "openWindow()::EventCatcher" : 1 , "openWindow_html()::EventCatcher" : 1 , "openWindow_image()::EventCatcher" : 1 , "openWindow_javascript()::EventCatcher" : 1 , "openWindow_self()::EventCatcher" : 1 , "openWindow_text()::EventCatcher" : 1 , "openWindow_xml()::EventCatcher" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::html::HtmlCanvas" , "selectors" : { "HtmlCanvas(String,String,SgmlPage,Map<String,DomAttr>)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::html::HtmlTableHeader" , "selectors" : { "HtmlTableHeader(String,String,SgmlPage,Map<String,DomAttr>)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::html::HtmlCaption" , "selectors" : { "HtmlCaption(String,String,SgmlPage,Map<String,DomAttr>)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::html::HtmlParameter" , "selectors" : { "HtmlParameter(String,String,SgmlPage,Map<String,DomAttr>)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::html::HtmlCitation" , "selectors" : { "HtmlCitation(String,String,SgmlPage,Map<String,DomAttr>)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::host::FormChild" , "selectors" : { "get(???)" : 1 , "put(???)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::NamedNodeMap" , "selectors" : { "NamedNodeMap(DomElement)" : 1 , "getRecursiveAttributesLength()" : 1 , "getRecusiveAttributeNameAt(int)" : 1 , "getUnspecifiedAttributeNode(String)" : 3 , "isRecursiveAttribute(String)" : 2 , "jsxFunction_getNamedItem(String)" : 2 , "jsxFunction_item(int)" : 1 , "useRecursiveAttributeForIE()" : 4}},{ "className" : "com::gargoylesoftware::htmlunit::util::StringUtils" , "selectors" : { "containsCaseInsensitive(Collection<String>,String)" : 6 , "containsWhitespace(String)" : 1 , "escapeXmlChars(String)" : 3 , "formatHttpDate(Date)" : 4 , "indexOf(String,char,int,int)" : 5 , "isFloat(String,boolean)" : 1 , "parseHttpDate(String)" : 4 , "substringAfterLast(???)" : 1 , "substringBefore(???)" : 2 , "substringBeforeLast(???)" : 1 , "substringBetween(???)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::ThreadTest::TestThread" , "selectors" : { "TestThread(String)" : 4 , "isSuccessful()" : 4 , "testCallInheritedFunction()" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::host::PropertiesTest" , "selectors" : { "<Initializer>()::DefaultCategoryDataset" : 6 , "<Initializer>()::MutableInt" : 12 , "appendHtml(StringBuilder,List<String>,List<String>,List<String>)" : 1 , "getArtifactsDirectory()" : 3 , "getProperties(BrowserVersion)" : 6 , "getSimulatedProperties(BrowserVersion)" : 6 , "getValueOf(List<String>,String)" : 2 , "removeParentheses(List<String>)" : 2 , "saveChart(DefaultCategoryDataset)::LayeredBarRenderer" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::html::impl::SimpleRange" , "selectors" : { "SimpleRange()" : 2 , "SimpleRange(Node)" : 2 , "SimpleRange(Node,int)" : 3 , "SimpleRange(Node,int,Node,int)" : 3 , "append(StringBuilder)" : 1 , "deleteAfter(DomNode,int)" : 1 , "deleteBefore(DomNode,int)" : 1 , "equals(Object)::EqualsBuilder" : 2 , "extractContents()" : 1 , "getCommonAncestorContainer()" : 2 , "getMaxOffset(Node)" : 3 , "getText(Node)" : 10 , "hashCode()::HashCodeBuilder" : 1 , "isOffsetChars(Node)" : 9 , "setText(Node,String)" : 4 , "toString()" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::html::HtmlSerializer" , "selectors" : { "HtmlSerializer()" : 2 , "append(String)" : 1 , "appendChildren(DomNode)" : 4 , "appendComment(DomComment)" : 1 , "appendHtmlOrderedList(HtmlOrderedList)" : 1 , "appendHtmlSelect(HtmlSelect)" : 1 , "appendHtmlSubmitInput(HtmlSubmitInput)" : 1 , "appendHtmlTable(HtmlTable)" : 1 , "appendHtmlTableRow(HtmlTableRow)" : 2 , "appendHtmlTableRows(List<HtmlTableRow>,boolean,TableRowGroup,TableRowGroup)" : 3 , "appendHtmlTextArea(HtmlTextArea)" : 1 , "appendHtmlTitle(HtmlTitle)" : 1 , "appendHtmlUnorderedList(HtmlUnorderedList)" : 1 , "appendNode(DomNode)" : 4 , "appendText(DomText)" : 1 , "asText(DomNode)" : 2 , "cleanUp(String)" : 1 , "doAppend(String)" : 9 , "doAppendBlockSeparator()" : 14 , "doAppendNewLine()" : 1 , "doAppendTab()" : 1 , "isVisible(DomNode)" : 2 , "reduceWhitespace(String)" : 1 , "setIgnoreMaskedElements(boolean)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::PostponedAction" , "selectors" : { "PostponedAction(Page)" : 1 , "execute()" : 3 , "getOwningPage()" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::host::DocumentType" , "selectors" : { "jsxGet_name()" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::ThreadSynchronizer" , "selectors" : { "ThreadSynchronizer()" : 2 , "setState(String)" : 2 , "sleep(long)" : 2 , "waitForState(String)" : 2}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::host::RowContainer" , "selectors" : { "getXPathRows()" : 1 , "insertRow(int)" : 3 , "jsxGet_rows()" : 4}},{ "className" : "com::gargoylesoftware::htmlunit::util::DebuggingWebConnection" , "selectors" : { "appendToJSFile(String)" : 2 , "createFile(URL,String)" : 1 , "createOverview()" : 1 , "escapeJSString(String)" : 5 , "isJavaScript(WebResponse)" : 2 , "isUncompressJavaScript()" : 1 , "nameValueListToJsMap(List<NameValuePair>)" : 7 , "saveResponse(WebResponse,WebRequest)" : 1 , "uncompressJavaScript(WebResponse)" : 1 , "uncompressJavaScript(WebResponse)::ContextFactory" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::AlertHandler" , "selectors" : { "handleAlert(Page,String)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::regexp::mozilla::js1_2::ExecTest" , "selectors" : { "test(String)" : 3 , "test(String,String)" : 3}},{ "className" : "com::gargoylesoftware::htmlunit::html::StaticDomNodeList" , "selectors" : { "StaticDomNodeList(List<DomNode>)" : 1 , "get(int)" : 1 , "getLength()" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::html::HtmlTableBody" , "selectors" : { "HtmlTableBody(String,String,SgmlPage,Map<String,DomAttr>)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::WebAssert" , "selectors" : { "assertAllAccessKeyAttributesUnique(HtmlPage)" : 2 , "assertAllIdAttributesUnique(HtmlPage)" : 2 , "assertAllTabIndexAttributesSet(HtmlPage)" : 3 , "assertElementNotPresent(HtmlPage,String)" : 2 , "assertElementNotPresentByXPath(HtmlPage,String)" : 2 , "assertElementPresent(HtmlPage,String)" : 2 , "assertElementPresentByXPath(HtmlPage,String)" : 2 , "assertFormNotPresent(HtmlPage,String)" : 2 , "assertFormPresent(HtmlPage,String)" : 2 , "assertInputContainsValue(HtmlPage,String,String)" : 3 , "assertInputDoesNotContainValue(HtmlPage,String,String)" : 3 , "assertInputNotPresent(HtmlPage,String)" : 2 , "assertInputPresent(HtmlPage,String)" : 2 , "assertLinkNotPresent(HtmlPage,String)" : 2 , "assertLinkNotPresentWithText(HtmlPage,String)" : 2 , "assertLinkPresent(HtmlPage,String)" : 2 , "assertLinkPresentWithText(HtmlPage,String)" : 2 , "assertTextNotPresent(HtmlPage,String)" : 2 , "assertTextNotPresentInElement(HtmlPage,String,String)" : 3 , "assertTextPresent(HtmlPage,String)" : 2 , "assertTextPresentInElement(HtmlPage,String,String)" : 3 , "assertTitleContains(HtmlPage,String)" : 2 , "assertTitleEquals(HtmlPage,String)" : 2 , "assertTitleMatches(HtmlPage,String)" : 2 , "notNull(String,Object)" : 70}},{ "className" : "com::gargoylesoftware::htmlunit::html::HtmlBase" , "selectors" : { "HtmlBase(String,String,SgmlPage,Map<String,DomAttr>)" : 1 , "getHrefAttribute()" : 1 , "getTargetAttribute()" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::html::HtmlApplet" , "selectors" : { "HtmlApplet(String,String,SgmlPage,Map<String,DomAttr>)" : 1 , "downloadContentIfNeeded()" : 1 , "getApplet()" : 2 , "getArchiveAttribute()" : 1 , "getCodeAttribute()" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::html::XPathDomNodeList" , "selectors" : { "XPathDomNodeList(???)" : 1 , "getLength()" : 1 , "getNodes()" : 3}},{ "className" : "com::gargoylesoftware::htmlunit::html::XPathDomNodeList::DomHtmlAttributeChangeListenerImpl" , "selectors" : { "DomHtmlAttributeChangeListenerImpl()" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::html::DomNode::DescendantElementsIterator" , "selectors" : { "getFirstChildElement(DomNode)" : 2 , "getNextDomSibling(DomNode)" : 1 , "getNextElementUpwards(DomNode)" : 2 , "hasNext()" : 2 , "next()" : 1 , "nextNode()" : 18 , "remove()" : 1 , "setNextElement()" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::html::HtmlBlink" , "selectors" : { "HtmlBlink(String,String,SgmlPage,Map<String,DomAttr>)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::source::SVN" , "selectors" : { "consistentNewlines(File)" : 1 , "deleteSVN(File)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::SimpleScriptable" , "selectors" : { "clone()" : 1 , "defineFunctionProperties(String[],Class<?>,int)" : 10 , "defineFunctionProperties(String[],Class<?>,int)::FunctionObject" : 1 , "defineProperty(String,Class<?>,int)" : 18 , "equivalentValues(Object)" : 1 , "findMethod(Method[],String)" : 3 , "get(???)" : 7 , "getBrowserVersion()" : 188 , "getClassName()" : 6 , "getDefaultValue(Class<?>)" : 4 , "getDomNodeOrDie()" : 107 , "getDomNodeOrNull()" : 7 , "getIds(???)" : 1 , "getScriptableFor(Object)" : 34 , "getWindow()" : 97 , "getWithPreemption(String)" : 1 , "has(???)" : 1 , "initParentScope(DomNode,SimpleScriptable)" : 1 , "makeScriptableFor(DomNode)" : 3 , "put(???)" : 3 , "setCaseSensitive(boolean)" : 2 , "setDomNode(DomNode)" : 8 , "setDomNode(DomNode,boolean)" : 7 , "setHtmlElement(HtmlElement)" : 1 , "setParentScope(???)" : 6 , "setPrototype(???)" : 2}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::host::html::HTMLLinkElement" , "selectors" : { "getSheet()" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::host::EventListenersContainer::Handlers" , "selectors" : { "Handlers()" : 2 , "clone()" : 1 , "getHandlers(???)" : 2}},{ "className" : "com::gargoylesoftware::htmlunit::WebRequestTest" , "selectors" : { "credentials()::BasicUserPrincipal" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::HttpWebConnectionInsecureSSLTest" , "selectors" : { "createKeyManagerFactory()" : 1 , "createTrustManagerFactory()" : 1 , "setUp()::LocalTestServer" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::host::xml::XMLSerializer" , "selectors" : { "XMLSerializer()" : 3 , "jsxFunction_serializeToString(Node)" : 3 , "setParentScope(???)" : 3 , "setPrototype(???)" : 1 , "toXml(int,DomNode,StringBuilder,boolean)" : 2}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::host::css::CSSStyleDeclaration" , "selectors" : { "CSSStyleDeclaration(???)" : 1 , "CSSStyleDeclaration(HTMLElement)" : 2 , "camelize(String)" : 5 , "findBorderStyle(String)" : 8 , "findBorderWidth(String)" : 2 , "findColor(String)" : 9 , "getBorderWidth(Shorthand)" : 4 , "getCurrentElementIndex()" : 3 , "getElement()" : 23 , "getStyleAttribute(String,String,Shorthand,boolean)" : 8 , "getStyleAttribute(String,boolean)" : 222 , "getStyleMap(boolean)" : 9 , "initialize(HTMLElement)" : 1 , "isBorderStyle(String)" : 1 , "isBorderWidth(String)" : 1 , "isColorHexadecimal(String)" : 1 , "isColorKeyword(String)" : 1 , "isLength(String)" : 1 , "jsxFunction_getPropertyCSSValue(String)::CSSValueImpl" : 1 , "jsxFunction_getPropertyCSSValue(String)::InputSource" : 1 , "jsxFunction_getPropertyCSSValue(String)::SACParserCSS21" : 1 , "jsxFunction_getPropertyValue(String)" : 1 , "jsxGet_MozAppearance()" : 1 , "jsxGet_MozBackgroundClip()" : 1 , "jsxGet_MozBackgroundInlinePolicy()" : 1 , "jsxGet_MozBackgroundOrigin()" : 1 , "jsxGet_MozBinding()" : 1 , "jsxGet_MozBorderBottomColors()" : 1 , "jsxGet_MozBorderLeftColors()" : 1 , "jsxGet_MozBorderRadiusBottomleft()" : 1 , "jsxGet_MozBorderRadiusBottomright()" : 1 , "jsxGet_MozBorderRadiusTopleft()" : 1 , "jsxGet_MozBorderRadiusTopright()" : 1 , "jsxGet_MozBorderRightColors()" : 1 , "jsxGet_MozBorderTopColors()" : 1 , "jsxGet_MozBoxAlign()" : 1 , "jsxGet_MozBoxDirection()" : 1 , "jsxGet_MozBoxFlex()" : 1 , "jsxGet_MozBoxOrdinalGroup()" : 1 , "jsxGet_MozBoxOrient()" : 1 , "jsxGet_MozBoxPack()" : 1 , "jsxGet_MozBoxSizing()" : 1 , "jsxGet_MozColumnCount()" : 1 , "jsxGet_MozColumnGap()" : 1 , "jsxGet_MozColumnWidth()" : 1 , "jsxGet_MozFloatEdge()" : 1 , "jsxGet_MozImageRegion()" : 1 , "jsxGet_MozOpacity()" : 1 , "jsxGet_MozOutlineColor()" : 1 , "jsxGet_MozOutlineOffset()" : 1 , "jsxGet_MozOutlineRadiusBottomleft()" : 1 , "jsxGet_MozOutlineRadiusBottomright()" : 1 , "jsxGet_MozOutlineRadiusTopleft()" : 1 , "jsxGet_MozOutlineRadiusTopright()" : 1 , "jsxGet_MozOutlineStyle()" : 1 , "jsxGet_MozOutlineWidth()" : 1 , "jsxGet_MozUserFocus()" : 1 , "jsxGet_MozUserInput()" : 1 , "jsxGet_MozUserModify()" : 1 , "jsxGet_MozUserSelect()" : 1 , "jsxGet_backgroundAttachment()" : 1 , "jsxGet_backgroundColor()" : 1 , "jsxGet_backgroundImage()" : 1 , "jsxGet_backgroundRepeat()" : 1 , "jsxGet_borderBottomColor()" : 1 , "jsxGet_borderBottomStyle()" : 1 , "jsxGet_borderBottomWidth()" : 1 , "jsxGet_borderCollapse()" : 1 , "jsxGet_borderLeftColor()" : 1 , "jsxGet_borderLeftStyle()" : 1 , "jsxGet_borderLeftWidth()" : 1 , "jsxGet_borderRightColor()" : 1 , "jsxGet_borderRightStyle()" : 1 , "jsxGet_borderRightWidth()" : 1 , "jsxGet_borderSpacing()" : 1 , "jsxGet_borderTopColor()" : 1 , "jsxGet_borderTopStyle()" : 1 , "jsxGet_borderTopWidth()" : 1 , "jsxGet_bottom()" : 2 , "jsxGet_captionSide()" : 1 , "jsxGet_clear()" : 1 , "jsxGet_clip()" : 1 , "jsxGet_color()" : 1 , "jsxGet_counterIncrement()" : 1 , "jsxGet_counterReset()" : 1 , "jsxGet_cssFloat()" : 1 , "jsxGet_cursor()" : 1 , "jsxGet_direction()" : 1 , "jsxGet_display()" : 2 , "jsxGet_emptyCells()" : 1 , "jsxGet_fontFamily()" : 1 , "jsxGet_fontSize()" : 1 , "jsxGet_fontSizeAdjust()" : 1 , "jsxGet_fontStyle()" : 1 , "jsxGet_fontVariant()" : 1 , "jsxGet_fontWeight()" : 1 , "jsxGet_height()" : 1 , "jsxGet_left()" : 2 , "jsxGet_letterSpacing()" : 1 , "jsxGet_lineHeight()" : 1 , "jsxGet_listStyleImage()" : 1 , "jsxGet_listStylePosition()" : 1 , "jsxGet_listStyleType()" : 1 , "jsxGet_marginBottom()" : 1 , "jsxGet_marginLeft()" : 1 , "jsxGet_marginRight()" : 1 , "jsxGet_marginTop()" : 1 , "jsxGet_markerOffset()" : 1 , "jsxGet_maxHeight()" : 1 , "jsxGet_maxWidth()" : 1 , "jsxGet_minHeight()" : 1 , "jsxGet_minWidth()" : 1 , "jsxGet_opacity()" : 1 , "jsxGet_outlineColor()" : 1 , "jsxGet_outlineOffset()" : 1 , "jsxGet_outlineStyle()" : 1 , "jsxGet_outlineWidth()" : 1 , "jsxGet_overflow()" : 1 , "jsxGet_overflowX()" : 1 , "jsxGet_overflowY()" : 1 , "jsxGet_paddingBottom()" : 1 , "jsxGet_paddingLeft()" : 1 , "jsxGet_paddingRight()" : 1 , "jsxGet_paddingTop()" : 1 , "jsxGet_position()" : 1 , "jsxGet_right()" : 2 , "jsxGet_tableLayout()" : 1 , "jsxGet_textAlign()" : 1 , "jsxGet_textDecoration()" : 1 , "jsxGet_textIndent()" : 1 , "jsxGet_textTransform()" : 1 , "jsxGet_top()" : 2 , "jsxGet_unicodeBidi()" : 1 , "jsxGet_verticalAlign()" : 1 , "jsxGet_visibility()" : 2 , "jsxGet_whiteSpace()" : 1 , "jsxGet_width()" : 1 , "jsxGet_wordSpacing()" : 1 , "jsxGet_zIndex()" : 1 , "jsxSet_bottom(String)" : 1 , "jsxSet_left(String)" : 1 , "jsxSet_right(String)" : 1 , "jsxSet_top(String)" : 1 , "pixelValue(HTMLElement,CssValue)" : 5 , "pixelValue(String)" : 28 , "removeStyleAttribute(String)" : 3 , "replaceStyleAttribute(String,String)" : 1 , "setIntegerStyleAttribute(String,Object)" : 1 , "setRoundedStyleAttribute(String,Object)" : 1 , "setStyleAttribute(String,String)" : 188 , "setStyleAttributePixelInt(String,String)" : 28 , "toRGBColor(String)" : 1 , "uncamelize(String)" : 2 , "writeToElement(Map<String,StyleElement>)" : 2}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::host::LocationTest" , "selectors" : { "testGetVariousAttributes(String,String[])" : 2}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::IEWeirdSyntaxScriptPreProcessor" , "selectors" : { "IEWeirdSyntaxScriptPreProcessor()" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::html::HtmlMenu" , "selectors" : { "HtmlMenu(String,String,SgmlPage,Map<String,DomAttr>)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::html::HtmlTableRow" , "selectors" : { "HtmlTableRow(String,String,SgmlPage,Map<String,DomAttr>)" : 1 , "getCell(int)" : 9 , "getCellIterator()" : 3 , "getCells()" : 9 , "getEnclosingTable()" : 3}},{ "className" : "com::gargoylesoftware::htmlunit::html::HtmlTextArea" , "selectors" : { "HtmlTextArea(String,String,SgmlPage,Map<String,DomAttr>)" : 2 , "getDefaultValue()" : 3 , "getNameAttribute()" : 2 , "getSelectionEnd()" : 2 , "getSelectionStart()" : 2 , "getText()" : 37 , "initDefaultValue()" : 5 , "isReadOnly()" : 1 , "readValue()" : 2 , "reset()" : 3 , "select()" : 1 , "setDefaultValue(String)" : 1 , "setReadOnly(boolean)" : 1 , "setSelectionEnd(int)" : 3 , "setSelectionStart(int)" : 3 , "setText(String)" : 5 , "setTextInternal(String)" : 3}},{ "className" : "com::gargoylesoftware::htmlunit::html::HtmlHeading1" , "selectors" : { "HtmlHeading1(String,String,SgmlPage,Map<String,DomAttr>)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::host::Screen" , "selectors" : { "Screen()" : 1 , "jsxGet_availHeight()" : 1 , "jsxGet_availWidth()" : 1 , "jsxGet_bufferDepth()" : 1 , "jsxGet_colorDepth()" : 1 , "jsxGet_height()" : 1 , "jsxGet_width()" : 1 , "setParentScope(???)" : 1 , "setPrototype(???)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::html::HtmlImage" , "selectors" : { "HtmlImage(String,String,SgmlPage,Map<String,DomAttr>)" : 1 , "click()" : 1 , "click(int,int)" : 4 , "doOnLoad()" : 2 , "downloadImageIfNeeded()" : 3 , "getHeight()" : 1 , "getHeightAttribute()" : 1 , "getImageReader()" : 4 , "getIsmapAttribute()" : 1 , "getNameAttribute()" : 1 , "getSrcAttribute()" : 4 , "getUseMapAttribute()" : 2 , "getWebResponse(boolean)" : 3 , "getWidth()" : 1 , "getWidthAttribute()" : 1 , "readImageIfNeeded()" : 3 , "saveAs(File)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::html::HtmlPage" , "selectors" : { "HtmlPage(URL,WebResponse,WebWindow)" : 3 , "addAfterLoadAction(PostponedAction)" : 1 , "addElement(Map<String,List<HtmlElement>>,HtmlElement,String,boolean)" : 3 , "addHtmlAttributeChangeListener(HtmlAttributeChangeListener)" : 10 , "addMappedElement(HtmlElement)" : 4 , "addMappedElement(HtmlElement,boolean)" : 2 , "calculateBase()" : 2 , "cleanUp()" : 2 , "cloneNode(boolean)" : 5 , "createElement(String)" : 3 , "createTabOrderComparator()" : 1 , "deregisterFramesIfNeeded()" : 2 , "executeDeferredScriptsIfNeeded()" : 1 , "executeEventHandlersIfNeeded(String)" : 4 , "executeJavaScript(String)" : 17 , "executeJavaScriptFunctionIfPossible(???)" : 3 , "executeJavaScriptIfPossible(String,String,int)" : 9 , "executeRefreshIfNeeded()" : 1 , "fireHtmlAttributeAdded(HtmlAttributeChangeEvent)" : 1 , "fireHtmlAttributeRemoved(HtmlAttributeChangeEvent)" : 1 , "fireHtmlAttributeReplaced(HtmlAttributeChangeEvent)" : 1 , "getAnchorByHref(String)" : 3 , "getAnchorByName(String)" : 40 , "getAnchorByText(String)" : 2 , "getAnchors()" : 36 , "getBody()" : 34 , "getBuilder()" : 1 , "getDocumentElement()" : 81 , "getElementByAccessKey(char)" : 4 , "getElementById(String)" : 64 , "getElementByName(String)" : 6 , "getElementsByAccessKey(char)" : 2 , "getElementsByIdAndOrName(String)" : 9 , "getElementsByName(String)" : 14 , "getElementsByTagName(String)" : 8 , "getFirstChildElement(HtmlElement,Class<?>)" : 3 , "getFocusedElement()" : 16 , "getFormByName(String)" : 17 , "getForms()" : 11 , "getFrameByName(String)" : 10 , "getFrames()" : 9 , "getFullyQualifiedUrl(String)" : 46 , "getHtmlElementById(String)" : 590 , "getHtmlElementById(String,boolean)" : 2 , "getMetaTags(String)" : 1 , "getNamespaces()" : 3 , "getPageEncoding()" : 7 , "getRefreshStringOrNull()" : 1 , "getResolvedTarget(String)" : 4 , "getScriptObject(???)" : 1 , "getSelectionRanges()" : 1 , "getTabbableElementIds()" : 1 , "getTabbableElements()" : 6 , "getTitleElement()" : 2 , "getTitleText()" : 215 , "isBeingParsed()" : 3 , "isDescendant(HtmlElement)" : 2 , "isMappedElement(Document,String)" : 2 , "isOnbeforeunloadAccepted()" : 3 , "isOnbeforeunloadAccepted(HtmlPage,Event)" : 2 , "isParsingHtmlSnippet()" : 4 , "isParsingInlineHtmlSnippet()" : 1 , "isQuirksMode()" : 4 , "loadExternalJavaScriptFile(String,String)" : 1 , "loadFrames()" : 1 , "notifyNodeAdded(DomNode)" : 2 , "notifyNodeRemoved(DomNode)" : 1 , "pressAccessKey(char)" : 7 , "querySelector(String)" : 1 , "querySelectorAll(String)" : 2 , "querySelectorAll(String)::InputSource" : 1 , "querySelectorAll(String)::SACParserCSS21" : 1 , "refresh()" : 1 , "registerInlineSnippetParsingEnd()" : 1 , "registerInlineSnippetParsingStart()" : 1 , "registerParsingEnd()" : 3 , "registerParsingStart()" : 3 , "registerSnippetParsingEnd()" : 1 , "registerSnippetParsingStart()" : 1 , "removeElement(Map<String,List<HtmlElement>>,HtmlElement,String,boolean)" : 3 , "removeHtmlAttributeChangeListener(HtmlAttributeChangeListener)" : 1 , "removeMappedElement(HtmlElement)" : 4 , "removeMappedElement(HtmlElement,boolean,boolean)" : 2 , "safeGetAttributeListeners()" : 3 , "save(File)" : 5 , "setBuilder(HtmlUnitDOMBuilder)" : 2 , "setCheckedRadioButton(HtmlRadioButtonInput)" : 1 , "setDocumentType(DomDocumentType)" : 1 , "setFocusedElement(HtmlElement)" : 15 , "setFocusedElement(HtmlElement,boolean)" : 3 , "setReadyStateOnDeferredScriptsIfNeeded()" : 1 , "setScriptObject(???)" : 1 , "setSelectionRange(Range)" : 5 , "setTitleText(String)" : 1 , "tabToNextElement()" : 6 , "tabToPreviousElement()" : 6 , "writeInParsedStream(String)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::WebResponseImpl" , "selectors" : { "WebResponseImpl(WebResponseData,WebRequest,long)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::html::HtmlSpan" , "selectors" : { "HtmlSpan(String,String,SgmlPage,Map<String,DomAttr>)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::host::html::HTMLDocument" , "selectors" : { "HTMLDocument()" : 2 , "buildCookie(String,URL)" : 10 , "canAlreadyBeParsed(String)" : 2 , "concatArgsAsString(Object[])" : 2 , "getDomNodeOrDie()" : 14 , "getDomNodeOrNull()" : 3 , "getDomNodeOrNullFromRealDocument()" : 2 , "getHtmlPage()" : 24 , "getIt(String)" : 2 , "getLastHtmlElement(HtmlElement)" : 1 , "implicitCloseIfNecessary()" : 2 , "jsxFunction_close()" : 2 , "jsxFunction_createTreeWalker(Node,int,Scriptable,boolean)::anonymous(NodeFilter)" : 1 , "jsxFunction_getElementsByName(String)" : 2 , "jsxGet_activeElement()" : 1 , "jsxGet_body()" : 5 , "jsxGet_domain()" : 1 , "jsxGet_styleSheets()" : 1 , "limitAppendChildToIE()" : 1 , "parseDateOrNow(String)" : 1 , "replaceForCookieIfNecessary(URL)" : 2 , "scheduleImplicitClose()" : 1 , "setActiveElement(HTMLElement)" : 1 , "setParentScope(???)" : 2 , "setPrototype(???)" : 2 , "write(String)" : 2}},{ "className" : "com::gargoylesoftware::htmlunit::libraries::LibraryTestCase" , "selectors" : { "getLibraryDir()" : 1 , "loadExpectation(String)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::host::Range" , "selectors" : { "Range(HTMLDocument)" : 1 , "com" : 1 , "getAncestorsAndSelf(Node)" : 2 , "getCommonAncestor()" : 1 , "getPositionInContainer(Node)" : 4 , "jsxFunction_setEndAfter(Node)" : 1 , "jsxFunction_setStartBefore(Node)" : 1 , "setParentScope(???)" : 2 , "setPrototype(???)" : 2 , "toW3C()" : 4}},{ "className" : "javax::net::ssl::KeyManagerFactory" , "selectors" : { "getDefaultAlgorithm()" : 7 , "getInstance(String)" : 13 , "getInstance(String,String)" : 2 , "getKeyManagers()" : 15 , "init(KeyStore,char[])" : 13}},{ "className" : "com::gargoylesoftware::htmlunit::html::HtmlVariable" , "selectors" : { "HtmlVariable(String,String,SgmlPage,Map<String,DomAttr>)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::protocol::data::DataURLConnection" , "selectors" : { "DataURLConnection(URL)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::libraries::PrototypeTestBase" , "selectors" : { "getExpectations(BrowserVersion,String)" : 1 , "getVersion()" : 3 , "test(String)" : 27}},{ "className" : "com::gargoylesoftware::htmlunit::html::HtmlNoFrames" , "selectors" : { "HtmlNoFrames(String,String,SgmlPage,Map<String,DomAttr>)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::html::HTMLParserListenerTest::MessageInfo" , "selectors" : { "MessageInfo(boolean,String,URL,int,int,String)" : 3 , "equals(Object)::EqualsBuilder" : 1 , "hashCode()::HashCodeBuilder" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::html::HtmlBig" , "selectors" : { "HtmlBig(String,String,SgmlPage,Map<String,DomAttr>)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::xml::XmlUtil" , "selectors" : { "appendChild(SgmlPage,DomNode,Node)" : 3 , "buildDocument(WebResponse)" : 1 , "copy(SgmlPage,Node,DomNode)" : 2 , "createFrom(SgmlPage,Node)" : 2 , "lookupNamespaceURI(DomElement,String)" : 2 , "lookupPrefix(DomElement,String)" : 3 , "namedNodeMapToSaxAttributes(NamedNodeMap)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::DefaultCredentialsProvider::NTCredentialsFactory" , "selectors" : { "NTCredentialsFactory(String,String,String,String)" : 1 , "getInstance()::NTCredentials" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::StringWebResponse" , "selectors" : { "StringWebResponse(String,String,URL)" : 2 , "StringWebResponse(String,URL)" : 7 , "buildWebRequest(URL,String)" : 1 , "getWebResponseData(String,String)" : 2}},{ "className" : "com::gargoylesoftware::htmlunit::WebResponseFromCache" , "selectors" : { "WebResponseFromCache(WebResponse,WebRequest)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::html::HtmlAbbreviated" , "selectors" : { "HtmlAbbreviated(String,String,SgmlPage,Map<String,DomAttr>)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::html::FormFieldWithNameHistory" , "selectors" : { "getOriginalName()" : 1 , "getPreviousNames()" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::host::Plugin" , "selectors" : { "Plugin(String,String,String)" : 1 , "jsxGet_name()" : 1 , "setParentScope(???)" : 1 , "setPrototype(???)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::html::HtmlParagraph" , "selectors" : { "HtmlParagraph(String,String,SgmlPage,Map<String,DomAttr>)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::html::AttributesTest" , "selectors" : { "AttributesTest(String,Class<?>,Method,HtmlPage)" : 1 , "createTestName(Class<?>,Method)" : 1 , "getNewInstanceForClassUnderTest()" : 1 , "suite()::TestSuite" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::host::html::HTMLBodyElement" , "selectors" : { "createEventHandlerFromAttribute(String,String)" : 1 , "getEventHandler(???)" : 1 , "jsxSet_bgColor(String)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::html::HtmlUnorderedList" , "selectors" : { "HtmlUnorderedList(String,String,SgmlPage,Map<String,DomAttr>)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::DefaultPageCreator" , "selectors" : { "DefaultPageCreator()" : 2 , "createHtmlPage(WebResponse,WebWindow)" : 1 , "createJavaScriptPage(WebResponse,WebWindow)" : 1 , "createTextPage(WebResponse,WebWindow)" : 1 , "createUnexpectedPage(WebResponse,WebWindow)" : 1 , "createXHtmlPage(WebResponse,WebWindow)" : 1 , "createXmlPage(WebResponse,WebWindow)" : 1 , "determineContentType(String,InputStream)" : 1 , "determinePageType(String)" : 18 , "isBinary(byte[])" : 1 , "read(InputStream,int)" : 1 , "startsWith(byte[],byte[])" : 3}},{ "className" : "com::gargoylesoftware::htmlunit::html::HtmlListing" , "selectors" : { "HtmlListing(String,String,SgmlPage,Map<String,DomAttr>)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::html::InputElementFactory" , "selectors" : { "InputElementFactory()" : 1 , "createElement(SgmlPage,String,Attributes)" : 1 , "createElementNS(SgmlPage,String,String,Attributes)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::host::css::ComputedCSSStyleDeclaration" , "selectors" : { "ComputedCSSStyleDeclaration(CSSStyleDeclaration)" : 1 , "applyLocalStyleAttribute(String,String,String,SelectorSpecificity)" : 1 , "applyStyleFromSelector(???)" : 1 , "getBorderBottom()" : 1 , "getBorderHorizontal()" : 2 , "getBorderLeft()" : 3 , "getBorderRight()" : 2 , "getBorderTop()" : 2 , "getBorderVertical()" : 1 , "getBottomWithInheritance()" : 2 , "getCalculatedHeight()" : 1 , "getCalculatedHeight(boolean,boolean)" : 6 , "getCalculatedWidth()" : 2 , "getCalculatedWidth(boolean,boolean)" : 6 , "getContentHeight()" : 2 , "getContentWidth()" : 2 , "getDefaultStyleDisplay()" : 1 , "getEmptyHeight()" : 2 , "getLeft(boolean,boolean,boolean)" : 2 , "getLeftWithInheritance()" : 3 , "getMarginLeft()" : 2 , "getMarginTop()" : 2 , "getPaddingBottom()" : 1 , "getPaddingHorizontal()" : 2 , "getPaddingLeft()" : 3 , "getPaddingRight()" : 1 , "getPaddingTop()" : 3 , "getPaddingVertical()" : 1 , "getPositionWithInheritance()" : 8 , "getRightWithInheritance()" : 2 , "getStyleAttribute(String,boolean)" : 5 , "getTop(boolean,boolean,boolean)" : 4 , "getTopWithInheritance()" : 2 , "isInheritable(String,boolean)" : 1 , "isScrollable(boolean)" : 2 , "jsxGet_borderBottomWidth()" : 1 , "jsxGet_borderCollapse()" : 1 , "jsxGet_borderLeftWidth()" : 2 , "jsxGet_borderRightWidth()" : 1 , "jsxGet_borderTopWidth()" : 2 , "jsxGet_bottom()" : 1 , "jsxGet_cssFloat()" : 1 , "jsxGet_display()" : 8 , "jsxGet_fontSize()" : 1 , "jsxGet_left()" : 1 , "jsxGet_marginBottom()" : 1 , "jsxGet_marginLeft()" : 1 , "jsxGet_marginRight()" : 1 , "jsxGet_marginTop()" : 2 , "jsxGet_overflow()" : 1 , "jsxGet_paddingBottom()" : 1 , "jsxGet_paddingLeft()" : 1 , "jsxGet_paddingRight()" : 1 , "jsxGet_paddingTop()" : 1 , "jsxGet_position()" : 1 , "jsxGet_right()" : 1 , "jsxGet_top()" : 1 , "jsxGet_width()" : 2 , "pixelString(HTMLElement,CssValue)" : 2 , "pixelString(String)" : 12 , "setDefaultLocalStyleAttribute(String,String)" : 6}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::host::html::HTMLCollectionTags" , "selectors" : { "HTMLCollectionTags(SimpleScriptable)" : 2}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::host::ClipboardData" , "selectors" : { "ClipboardData()" : 1 , "setParentScope(???)" : 1 , "setPrototype(???)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::html::HtmlFrameSet" , "selectors" : { "HtmlFrameSet(String,String,SgmlPage,Map<String,DomAttr>)" : 1 , "getColsAttribute()" : 1 , "getRowsAttribute()" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::html::HTMLParser::HtmlUnitDOMBuilder" , "selectors" : { "HtmlUnitDOMBuilder(DomNode,URL)" : 2 , "addNodeToRightParent(DomNode,HtmlElement)" : 1 , "createConfiguration(WebClient)::HTMLConfiguration" : 1 , "endElement(String,String,String)::HTMLEventInfo" : 1 , "handleCharacters()" : 4 , "parse(???)" : 2 , "pushInputString(String)" : 1 , "pushInputString(String)::HTMLConfiguration" : 1 , "pushInputString(String)::XMLInputSource" : 1 , "removeEmptyCharacters(DomNode)" : 1 , "setFeature(???)" : 2 , "setProperty(???)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::WebServerTestCase" , "selectors" : { "startWebServer(String)" : 10 , "startWebServer(String)::HandlerList" : 1 , "startWebServer(String)::ResourceHandler" : 1 , "startWebServer(String)::Server" : 1 , "startWebServer(String)::WebAppContext" : 1 , "startWebServer(String,String,Map)::Server" : 1 , "startWebServer(String,String,Map)::WebAppContext" : 1 , "startWebServer(String,String[])" : 2 , "startWebServer(String,String[])::Server" : 1 , "startWebServer(String,String[])::WebAppContext" : 1 , "tearDown()" : 3}},{ "className" : "com::gargoylesoftware::htmlunit::CodeStyleTest" , "selectors" : { "addFailure(String)" : 26 , "badIndentationLevels(List<String>,String)" : 1 , "browserVersion_isIE(List<String>,String)" : 1 , "deprecated(List<String>,String)" : 1 , "getAnnotations(List<String>,int)" : 1 , "getIndentation(String)" : 4 , "getLines(File)" : 7 , "isSvnPropertiesDefined(File)" : 2 , "javaDocFirstLine(List<String>,String)" : 1 , "licenseYear()" : 1 , "lineBetweenMethods(List<String>,String)" : 1 , "loggingEnabled(List<String>,String)" : 1 , "loggingEnabled(List<String>,int,String,String)" : 2 , "methodFirstLine(List<String>,String)" : 1 , "methodLastLine(List<String>,String)" : 1 , "mixedIndentation(List<String>,String)" : 1 , "openingCurlyBracket(List<String>,String)" : 1 , "process(File)" : 3 , "processXML(File,boolean)" : 6 , "runWith(List<String>,String)" : 1 , "singleAlert(List<String>,String)" : 1 , "staticJSMethod(List<String>,String)" : 1 , "staticLoggers(List<String>,String)" : 1 , "svnProperties(File,String)" : 1 , "trailingWhitespace(List<String>,String)" : 1 , "twoEmptyLines(List<String>,String)" : 1 , "versionYear()" : 1 , "vs85aspx(List<String>,String)" : 2 , "year(List<String>,String)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::DefaultCredentialsProviderTest" , "selectors" : { "addNTLMCredentials()::AuthScope" : 1 , "overwrite()::AuthScope" : 3 , "overwrite()::BasicScheme" : 1 , "serialization()::AuthScope" : 9}},{ "className" : "com::gargoylesoftware::htmlunit::DefaultCredentialsProvider" , "selectors" : { "DefaultCredentialsProvider()" : 6 , "addCredentials(String,String)" : 5 , "addCredentials(String,String,String,int,String)" : 3 , "addCredentials(String,String,String,int,String)::UsernamePasswordCredentials" : 1 , "addNTLMCredentials(String,String,String,int,String,String)" : 3 , "addNTLMCredentials(String,String,String,int,String,String)::NTCredentials" : 1 , "getCredentials(???)" : 12 , "setCredentials(???)" : 2}},{ "className" : "com::gargoylesoftware::htmlunit::html::LoggingRefreshHandler" , "selectors" : { "LoggingRefreshHandler(List<Object>)" : 2}},{ "className" : "com::gargoylesoftware::htmlunit::html::HTMLErrorHandler" , "selectors" : { "HTMLErrorHandler(HTMLParserListener,URL)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::host::xml::XMLDocument" , "selectors" : { "XMLDocument()" : 3 , "XMLDocument(WebWindow)" : 3 , "jsxFunction_loadXML(String)" : 2 , "jsxFunction_selectNodes(String)" : 1 , "jsxGet_parseError()" : 1 , "setParentScope(???)" : 5 , "setPrototype(???)" : 4}},{ "className" : "com::gargoylesoftware::htmlunit::HttpWebConnectionTest" , "selectors" : { "assertEquals(InputStream,InputStream)" : 3 , "assertEquals(String,InputStream,InputStream)" : 1 , "assertEquals(String,byte[],byte[])" : 1 , "assertEquals(String,byte[],byte[],int)" : 2 , "assertEquals(byte[],byte[])" : 1 , "designedForExtension()::anonymous(HttpWebConnection)" : 1 , "makeWebResponse()::ProtocolVersion" : 1 , "makeWebResponse()::StringEntity" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::BrowserRunner" , "selectors" : { "filter(Filter)::NoTestsRemainException" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::util::Cookie" , "selectors" : { "Cookie(String,String)" : 2 , "Cookie(String,String,String)" : 1 , "Cookie(String,String,String,String,Date,boolean)" : 7 , "equals(Object)::EqualsBuilder" : 2 , "fromHttpClient(???)" : 2 , "getDomain()" : 2 , "getExpires()" : 5 , "getName()" : 5 , "getPath()" : 2 , "getValue()" : 5 , "hashCode()::HashCodeBuilder" : 1 , "isSecure()" : 1 , "toHttpClient()::org" : 1 , "toHttpClient(???)" : 4}},{ "className" : "com::gargoylesoftware::htmlunit::WebDriverTestCase" , "selectors" : { "buildWebDriver()::FirefoxBinary" : 1 , "buildWebDriver()::FirefoxDriver" : 1 , "buildWebDriver()::FirefoxProfile" : 1 , "buildWebDriver()::InternetExplorerDriver" : 1 , "getBrowsersProperties()" : 1 , "getCollectedAlerts(WebDriver)::JSONArray" : 1 , "getJSON()" : 1 , "getModifiedContent(String)" : 3 , "isBasicAuthentication()" : 1 , "setUseRealBrowser(boolean)" : 1 , "setWriteContentAsBytes_(boolean)" : 1 , "startWebServer(MockWebConnection)" : 2 , "startWebServer(MockWebConnection)::Constraint" : 1 , "startWebServer(MockWebConnection)::ConstraintMapping" : 1 , "startWebServer(MockWebConnection)::HashUserRealm" : 1 , "startWebServer(MockWebConnection)::SecurityHandler" : 1 , "startWebServer(MockWebConnection)::Server" : 1 , "startWebServer(MockWebConnection)::WebAppContext" : 1 , "startWebServer(String,String,Map)::Server" : 1 , "startWebServer(String,String,Map)::WebAppContext" : 1 , "stopWebServer()" : 4}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::host::WindowConcurrencyTest" , "selectors" : { "assertMaxTestRunTime(long)" : 1 , "doTestClearX_threadInterrupt(String)" : 2 , "startTimedTest()" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::util::URLCreator::URLCreatorGAE" , "selectors" : { "URLCreatorGAE()" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::html::HtmlSubscript" , "selectors" : { "HtmlSubscript(String,String,SgmlPage,Map<String,DomAttr>)" : 1}},{ "className" : "org::w3c::dom::css::CSSStyleRule" , "selectors" : { "getSelectorText()" : 1 , "getStyle()" : 1 , "setSelectorText(String)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::html::applets::AppletClassLoader" , "selectors" : { "AppletClassLoader()" : 1 , "addToClassPath(WebResponse)" : 1 , "defineClass(String)" : 1 , "loadClass(String)" : 1 , "readClassName(WebResponse)" : 1 , "readClassesFromJar(WebResponse)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::BinaryPage" , "selectors" : { "getWebResponse()" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::host::PopupPseudoWebWindow" , "selectors" : { "PopupPseudoWebWindow(WebClient)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::html::HtmlPlainText" , "selectors" : { "HtmlPlainText(String,String,SgmlPage,Map<String,DomAttr>)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::html::HtmlFont" , "selectors" : { "HtmlFont(String,String,SgmlPage,Map<String,DomAttr>)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::host::html::HTMLTableComponent" , "selectors" : { "getValidVAlignValues()" : 2}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::background::JavaScriptJobManagerMinimalTest" , "selectors" : { "addJob_multipleExecution_removeAllJobs()::MutableInt" : 1 , "addJob_multipleExecution_removeJob()::MutableInt" : 2 , "addJob_periodicJob()::MutableInt" : 1 , "addJob_periodicJob2()::MutableInt" : 1 , "addJob_singleExecution()::MutableInt" : 1 , "getJobCount()::MutableInt" : 1 , "waitForComplexJobs(WaitingMode,int)" : 2 , "waitForCurrentLongJob(WaitingMode,int)" : 2 , "waitForSimpleJobs(WaitingMode,int)" : 2}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::host::FormField" , "selectors" : { "jsxGet_value()" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::host::html::HTMLElement" , "selectors" : { "HTMLElement()" : 1 , "createEventHandler(String,String)" : 2 , "fixAttributeName(String)" : 1 , "get(???)" : 2 , "getAlign(boolean)" : 10 , "getAllIds(???)" : 1 , "getBoxObject()" : 1 , "getCh()" : 2 , "getChOff()" : 2 , "getDomNodeOrDie()" : 323 , "getDomNodeOrNull()" : 15 , "getInsertAdjacentLocation(String)" : 2 , "getOffsetParent()" : 4 , "getParentHTMLElement()" : 10 , "getParentScope(???)" : 3 , "getPosX()" : 4 , "getPosY()" : 4 , "getVAlign(String[],String)" : 3 , "getWidthOrHeight(String,Boolean)" : 5 , "getWithFallback(String)" : 1 , "isAncestorOfEventTarget(MouseEvent)" : 4 , "isAttributeName(String)" : 2 , "isHexadecimalColor(String)" : 1 , "jsxFunction_addBehavior(String)" : 2 , "jsxFunction_getAttributeNode(String)" : 1 , "jsxFunction_getClientRects()::NativeArray" : 1 , "jsxFunction_getElementsByClassName(String)" : 1 , "jsxFunction_removeAttributeNS(String,String)" : 1 , "jsxFunction_removeBehavior(int)" : 3 , "jsxFunction_setActive()" : 1 , "jsxFunction_setAttribute(String,String)" : 3 , "jsxGet_clientHeight()" : 1 , "jsxGet_clientLeft()" : 1 , "jsxGet_clientTop()" : 1 , "jsxGet_clientWidth()" : 1 , "jsxGet_currentStyle()" : 39 , "jsxGet_nodeName()" : 1 , "jsxGet_offsetHeight()" : 1 , "jsxGet_offsetLeft()" : 1 , "jsxGet_offsetParent()" : 1 , "jsxGet_offsetTop()" : 1 , "jsxGet_offsetWidth()" : 1 , "jsxGet_outerHTML()" : 1 , "jsxGet_parentElement()" : 2 , "jsxGet_scrollLeft()" : 1 , "jsxGet_scrollTop()" : 3 , "jsxGet_style()" : 1 , "jsxSet_scrollLeft(int)" : 2 , "jsxSet_scrollTop(int)" : 4 , "parseHtmlSnippet(DomNode,boolean,String)" : 4 , "printChildren(StringBuilder,DomNode,boolean)" : 4 , "printNode(StringBuilder,DomNode,boolean)" : 2 , "readAttributes(HtmlElement)" : 1 , "setAlign(String,boolean)" : 10 , "setCh(String)" : 2 , "setChOff(String)" : 2 , "setColorAttribute(String,String)" : 8 , "setDefaults(ComputedCSSStyleDeclaration)" : 1 , "setDomNode(DomNode)" : 5 , "setEventHandler(???)" : 1 , "setInnerText(String)" : 2 , "setVAlign(Object,String[])" : 3 , "setWidthOrHeight(String,String,Boolean)" : 5}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::host::html::HTMLAppletElement" , "selectors" : { "createAppletMethodAndProperties()" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::host::External" , "selectors" : { "External()" : 1 , "setParentScope(???)" : 1 , "setPrototype(???)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::html::HtmlFileInputTest::Upload2Servlet" , "selectors" : { "doPost(HttpServletRequest,HttpServletResponse)::DiskFileItemFactory" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::html::HtmlTableRow::CellIterator" , "selectors" : { "CellIterator()" : 1 , "hasNext()" : 3 , "next()" : 1 , "nextCell()" : 3 , "setNextCell(DomNode)" : 4}},{ "className" : "org::w3c::dom::css::CSSStyleDeclaration" , "selectors" : { "getLength()" : 3 , "getPropertyCSSValue(String)" : 1 , "getPropertyPriority(String)" : 1 , "getPropertyValue(String)" : 4 , "item(int)" : 2 , "removeProperty(String)" : 2 , "setProperty(String,String,String)" : 3}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::host::TextRectangle" , "selectors" : { "TextRectangle(int,int,int,int)" : 1 , "setParentScope(???)" : 1 , "setPrototype(???)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::html::HtmlInsertedText" , "selectors" : { "HtmlInsertedText(String,String,SgmlPage,Map<String,DomAttr>)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::AjaxController" , "selectors" : { "AjaxController()" : 1 , "processSynchron(HtmlPage,WebRequest,boolean)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::html::HtmlTextAreaTest" , "selectors" : { "formSubmission(String,String)" : 4 , "testPreventDefault(BrowserVersion)" : 2}},{ "className" : "com::gargoylesoftware::htmlunit::RetriesStatement" , "selectors" : { "RetriesStatement(???)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::html::HtmlAudio" , "selectors" : { "HtmlAudio(String,String,SgmlPage,Map<String,DomAttr>)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::host::SimpleArray" , "selectors" : { "add(Object)" : 3 , "getItemName(Object)" : 1 , "jsxFunction_namedItem(String)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::html::HtmlHeading4" , "selectors" : { "HtmlHeading4(String,String,SgmlPage,Map<String,DomAttr>)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::DefaultCredentialsProvider::UsernamePasswordCredentialsFactory" , "selectors" : { "UsernamePasswordCredentialsFactory(String,String)" : 1 , "getInstance()::UsernamePasswordCredentials" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::html::XHtmlPage" , "selectors" : { "XHtmlPage(URL,WebResponse,WebWindow)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::IncorrectnessListenerImpl" , "selectors" : { "IncorrectnessListenerImpl()" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::WebClient::CurrentWindowTracker" , "selectors" : { "CurrentWindowTracker()" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::html::HtmlForm" , "selectors" : { "HtmlForm(String,String,SgmlPage,Map<String,DomAttr>)" : 1 , "addLostChild(HtmlElement)" : 1 , "getAcceptCharsetAttribute()" : 2 , "getActionAttribute()" : 5 , "getButtonByName(String)" : 4 , "getButtonsByName(String)" : 1 , "getCheckedRadioButton(String)" : 4 , "getEnctypeAttribute()" : 2 , "getInputByName(String)" : 55 , "getInputByValue(String)" : 5 , "getInputsByName(String)" : 3 , "getInputsByValue(String)" : 4 , "getLostChildren()" : 9 , "getMethodAttribute()" : 3 , "getNameAttribute()" : 1 , "getParameterListForSubmit(SubmittableElement)" : 1 , "getRadioButtonsByName(String)" : 4 , "getSelectByName(String)" : 5 , "getSelectsByName(String)" : 14 , "getSubmitCharset()" : 1 , "getSubmittableElements(SubmittableElement)" : 2 , "getTargetAttribute()" : 2 , "getTextAreaByName(String)" : 14 , "getTextAreasByName(String)" : 1 , "getWebRequest(SubmittableElement)" : 3 , "isSubmittable(HtmlElement,SubmittableElement)" : 2 , "isValidForSubmission(HtmlElement,SubmittableElement)" : 1 , "reset()" : 3 , "setActionAttribute(String)" : 1 , "setCheckedRadioButton(HtmlRadioButtonInput)" : 1 , "setEnctypeAttribute(String)" : 1 , "setMethodAttribute(String)" : 1 , "setNameAttribute(String)" : 1 , "setScriptObject(???)" : 1 , "setTargetAttribute(String)" : 1 , "submit(SubmittableElement)" : 10}},{ "className" : "com::gargoylesoftware::htmlunit::javascript::host::Window::FrameToWindowTransformer" , "selectors" : { "FrameToWindowTransformer()" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::html::HtmlTeletype" , "selectors" : { "HtmlTeletype(String,String,SgmlPage,Map<String,DomAttr>)" : 1}},{ "className" : "com::gargoylesoftware::htmlunit::TopLevelWindowTest" , "selectors" : { "closeTheOnlyWindow()::EventCatcher" : 1 , "useCustomJobManager()::MutableInt" : 1}},{ "className" : "net::sf::freecol::client::gui::panel::UnitButton" , "selectors" : { "UnitButton(ActionManager,String)" : 9 , "refreshAction()" : 1}},{ "className" : "net::sf::freecol::server::model::ServerBuildingTest" , "selectors" : { "getSchoolColony(int,SchoolLevel)" : 21 , "getUnitList(Colony,UnitType)" : 112 , "trainForTurns(Colony,int)" : 18}},{ "className" : "net::sf::freecol::client::gui::action::PreferencesAction" , "selectors" : { "PreferencesAction(FreeColClient)" : 1}},{ "className" : "net::sf::freecol::client::gui::panel::LabourData::LocationData::Getter" , "selectors" : { "getLocationData(UnitData)" : 6}},{ "className" : "net::sf::freecol::common::model::FreeColGameObjectListener" , "selectors" : { "ownerChanged(FreeColGameObject,Player,Player)" : 2 , "removeFreeColGameObject(String)" : 2 , "setFreeColGameObject(String,FreeColGameObject)" : 1}},{ "className" : "net::sf::freecol::common::networking::ChangeWorkTypeMessage" , "selectors" : { "ChangeWorkTypeMessage(Game,Element)" : 1 , "ChangeWorkTypeMessage(Unit,GoodsType)" : 2 , "getXMLElementTagName()" : 2 , "handle(FreeColServer,Player,Connection)" : 1}},{ "className" : "net::sf::freecol::server::model::ServerBuilding" , "selectors" : { "ServerBuilding(Game,Colony,BuildingType)" : 25 , "csAssignStudent(Unit,ChangeSet)" : 2 , "repairUnits(ChangeSet)" : 1 , "teach(ChangeSet,ServerPlayer)" : 1}},{ "className" : "net::sf::freecol::server::ai::ColonyProfile" , "selectors" : { "ColonyProfile(ProfileType,List<GoodsType>)" : 1 , "getPreferredProduction()" : 2 , "getType()" : 10}},{ "className" : "net::sf::freecol::client::gui::panel::EventPanel" , "selectors" : { "EventPanel(Canvas,EventType)" : 1 , "EventPanel(Canvas,EventType)::MigLayout" : 1}},{ "className" : "net::sf::freecol::client::gui::panel::FreeColProgressBar" , "selectors" : { "FreeColProgressBar(Canvas,GoodsType)" : 2 , "FreeColProgressBar(Canvas,GoodsType,int,int,int,int)" : 4 , "update(int,int,int,int)" : 3}},{ "className" : "net::sf::freecol::common::resources::ResourceFactory" , "selectors" : { "createResource(URI)" : 4 , "getResource(URI)" : 1}},{ "className" : "net::sf::freecol::client::gui::plaf::FreeColMenuItemUI" , "selectors" : { "FreeColMenuItemUI()" : 1}},{ "className" : "net::sf::freecol::server::control::ChangeSet::See" , "selectors" : { "See(int)" : 3 , "all()" : 19 , "always(ServerPlayer)" : 39 , "check(ServerPlayer,boolean)" : 1 , "except(ServerPlayer)" : 10 , "only(ServerPlayer)" : 317 , "perhaps()" : 72 , "perhaps(ServerPlayer)" : 11}},{ "className" : "net::sf::freecol::client::gui::panel::DropListener" , "selectors" : { "DropListener()" : 3}},{ "className" : "net::sf::freecol::common::model::Tension" , "selectors" : { "Tension(int)" : 24 , "getKey()" : 4 , "getLevel()" : 25 , "getValue()" : 50 , "modify(int)" : 2 , "setValue(int)" : 5 , "toString()" : 1}},{ "className" : "net::sf::freecol::client::gui::plaf::FreeColListUI" , "selectors" : { "FreeColListUI()" : 1 , "createRenderer()" : 1}},{ "className" : "net::sf::freecol::client::AllTests" , "selectors" : { "suite()::TestSuite" : 1}},{ "className" : "net::sf::freecol::common::model::Tension::Level" , "selectors" : { "getLimit()" : 19 , "values()" : 1}},{ "className" : "net::sf::freecol::client::control::InGameInputHandler::ShowInformationMessageSwingTask" , "selectors" : { "ShowInformationMessageSwingTask(StringTemplate)" : 3}},{ "className" : "net::sf::freecol::server::ai::mission::AllTests" , "selectors" : { "suite()::TestSuite" : 1 , "suite(???)" : 1}},{ "className" : "net::sf::freecol::server::control::FreeColServerHolder" , "selectors" : { "FreeColServerHolder(FreeColServer)" : 2 , "getFreeColServer()" : 47 , "getGame()" : 89}},{ "className" : "net::sf::freecol::client::gui::panel::RiverStylePanel" , "selectors" : { "RiverStylePanel(Canvas)" : 1}},{ "className" : "net::sf::freecol::common::model::GoodsTest" , "selectors" : { "dutch()" : 6}},{ "className" : "java::awt::BorderLayout" , "selectors" : { "BorderLayout()" : 1842 , "BorderLayout(int,int)" : 352 , "getLayoutComponent(Container,Object)" : 1 , "java" : 227 , "setHgap(int)" : 29 , "setVgap(int)" : 31}},{ "className" : "net::sf::freecol::client::gui::panel::DefaultTransferHandler::FreeColDragGestureRecognizer" , "selectors" : { "FreeColDragGestureRecognizer(DragGestureListener)" : 1 , "gestured(JComponent,MouseEvent,int,int)" : 1}},{ "className" : "net::sf::freecol::common::model::Colony::Occupation" , "selectors" : { "Occupation(WorkLocation,GoodsType)" : 7}},{ "className" : "net::sf::freecol::common::model::AbstractGoods" , "selectors" : { "AbstractGoods()" : 3 , "AbstractGoods(AbstractGoods)" : 7 , "AbstractGoods(GoodsType,int)" : 27 , "getAmount()" : 243 , "getNameKey()" : 19 , "getType()" : 259 , "getXMLElementTagName()" : 3 , "setAmount(int)" : 33 , "setType(GoodsType)" : 3 , "toString()" : 2}},{ "className" : "net::sf::freecol::client::gui::panel::EuropePanel::DestinationPanel" , "selectors" : { "DestinationPanel()" : 2 , "add(Component,boolean)" : 2 , "cleanup()" : 2 , "initialize(Location)" : 2 , "update()" : 1}},{ "className" : "net::sf::freecol::server::model::DiplomacySession" , "selectors" : { "DiplomacySession(Unit,Settlement)" : 1 , "complete(ChangeSet)" : 2 , "getAgreement()" : 2 , "setAgreement(DiplomaticTrade)" : 1}},{ "className" : "net::sf::freecol::server::ai::CacheEntryComparator" , "selectors" : { "CacheEntryComparator()" : 1 , "compareProduction(Entry,Entry)" : 1}},{ "className" : "net::sf::freecol::client::gui::plaf::FreeColSelectedPanelUI" , "selectors" : { "FreeColSelectedPanelUI()" : 1 , "createUI(JComponent)" : 3}},{ "className" : "javax::swing::JComboBox" , "selectors" : { "JComboBox()" : 393 , "JComboBox(ComboBoxModel)" : 26 , "JComboBox(Object[])" : 210 , "JComboBox(Vector<?>)" : 37 , "actionPerformed(ActionEvent)" : 3 , "addActionListener(ActionListener)" : 326 , "addItem(Object)" : 1505 , "addItemListener(ItemListener)" : 179 , "addPopupMenuListener(PopupMenuListener)" : 7 , "configureEditor(ComboBoxEditor,Object)" : 1 , "firePopupMenuWillBecomeInvisible()" : 1 , "getActionListeners()" : 3 , "getEditor()" : 86 , "getItemAt(int)" : 86 , "getItemCount()" : 156 , "getItemListeners()" : 1 , "getMaximumRowCount()" : 4 , "getModel()" : 103 , "getRenderer()" : 11 , "getSelectedIndex()" : 408 , "getSelectedItem()" : 1077 , "getSelectedObjects()" : 1 , "getUI()" : 10 , "hidePopup()" : 4 , "insertItemAt(Object,int)" : 23 , "isEditable()" : 16 , "isPopupVisible()" : 4 , "javax" : 120 , "removeActionListener(ActionListener)" : 20 , "removeAllItems()" : 121 , "removeItem(Object)" : 12 , "removeItemAt(int)" : 15 , "removeItemListener(ItemListener)" : 8 , "removePopupMenuListener(PopupMenuListener)" : 1 , "setActionCommand(String)" : 11 , "setEditable(boolean)" : 218 , "setEditor(ComboBoxEditor)" : 8 , "setEnabled(boolean)" : 272 , "setKeySelectionManager(KeySelectionManager)" : 1 , "setLightWeightPopupEnabled(boolean)" : 5 , "setMaximumRowCount(int)" : 12 , "setModel(ComboBoxModel)" : 157 , "setPopupVisible(boolean)" : 3 , "setRenderer(ListCellRenderer)" : 109 , "setSelectedIndex(int)" : 558 , "setSelectedItem(Object)" : 517 , "setUI(ComboBoxUI)" : 2 , "showPopup()" : 6 , "updateUI()" : 10}},{ "className" : "net::sf::freecol::client::gui::action::MapboardAction" , "selectors" : { "MapboardAction(FreeColClient,String)" : 19 , "shouldBeEnabled()" : 7}},{ "className" : "net::sf::freecol::client::gui::panel::ColonyPanel::TilePanel" , "selectors" : { "TilePanel(ColonyPanel)" : 1 , "cleanup()" : 1 , "initialize()" : 2 , "removePropertyChangeListeners()" : 2}},{ "className" : "net::sf::freecol::server::control::ChangeSet::ChangePriority" , "selectors" : { "getPriority()" : 11}},{ "className" : "net::sf::freecol::common::model::Operand" , "selectors" : { "Operand()" : 3 , "calculateGameValue(Game)" : 1 , "count(List<FreeColObject>)" : 3 , "getOperandType()" : 10 , "getScopeLevel()" : 12 , "getValue()" : 9 , "getValue(Game)" : 8 , "getValue(Player)" : 14 , "getValue(Settlement)" : 2 , "toString()" : 2}},{ "className" : "net::sf::freecol::client::gui::animation::Animations" , "selectors" : { "getAnimationSpeed(Canvas,Unit)" : 4 , "unitAttack(Canvas,Unit,Unit,boolean)" : 1 , "unitMove(Canvas,Unit,Tile,Tile)" : 1}},{ "className" : "javax::swing::ComponentInputMap" , "selectors" : { "ComponentInputMap(JComponent)" : 6}},{ "className" : "net::sf::freecol::client::gui::video::Video" , "selectors" : { "Video(URL)" : 1 , "getURL()" : 1}},{ "className" : "net::sf::freecol::client::gui::action::ColopediaAction" , "selectors" : { "ColopediaAction(FreeColClient,PanelType)" : 1}},{ "className" : "net::sf::freecol::common::FreeColException" , "selectors" : { "FreeColException(String)" : 12}},{ "className" : "net::sf::freecol::common::io::FreeColModFile::ModInfo" , "selectors" : { "ModInfo(String)" : 1 , "getId()" : 8 , "getName()" : 4}},{ "className" : "net::sf::freecol::client::gui::panel::ImageSelection" , "selectors" : { "ImageSelection(JLabel)" : 4 , "isDataFlavorSupported(DataFlavor)" : 1}},{ "className" : "net::sf::freecol::client::gui::panel::EuropePanel::EuropeButton" , "selectors" : { "EuropeButton(String,int,String,ActionListener)" : 6}},{ "className" : "javax::sound::sampled::Mixer::Info" , "selectors" : { "getName()" : 5}},{ "className" : "net::sf::freecol::common::model::Ownable" , "selectors" : { "getOwner()" : 15}},{ "className" : "java::awt::geom::RoundRectangle2D::Float" , "selectors" : { "RoundRectangle2D" : 20}},{ "className" : "net::sf::freecol::server::ai::ColonyPlan::Buildable" , "selectors" : { "Buildable(BuildableType,int)" : 15}},{ "className" : "net::sf::freecol::client::gui::option::PercentageOptionUI" , "selectors" : { "PercentageOptionUI(PercentageOption,boolean)" : 1}},{ "className" : "net::sf::freecol::common::model::Unit::MoveType" , "selectors" : { "isAttack()" : 5 , "isLegal()" : 4 , "isProgress()" : 7 , "whyIllegal()" : 8}},{ "className" : "net::sf::freecol::client::gui::panel::EndTurnDialog::UnitCellRenderer" , "selectors" : { "UnitCellRenderer()" : 1 , "UnitCellRenderer()::MigLayout" : 2}},{ "className" : "net::sf::freecol::client::control::InGameInputHandler::ShowConfirmDialogSwingTask" , "selectors" : { "ShowConfirmDialogSwingTask(Tile,StringTemplate,String,String)" : 6 , "confirm()" : 6}},{ "className" : "net::sf::freecol::client::gui::panel::ColonyPanel::InPortPanel" , "selectors" : { "InPortPanel()" : 1 , "InPortPanel()::MigLayout" : 1 , "initialize()" : 2}},{ "className" : "net::sf::freecol::client::gui::panel::EuropePanel::TransactionLog" , "selectors" : { "TransactionLog()" : 1 , "add(String)" : 2 , "cleanup()" : 1 , "initialize()" : 1}},{ "className" : "net::sf::freecol::client::gui::panel::ReportProductionPanel" , "selectors" : { "ReportProductionPanel(Canvas)" : 1 , "ReportProductionPanel(Canvas)::MigLayout" : 1 , "update()" : 2}},{ "className" : "net::sf::freecol::common::model::TypeCountMap" , "selectors" : { "clear()" : 3 , "containsKey(T)" : 4 , "getCount(T)" : 36 , "getValues()" : 3 , "incrementCount(T,int)" : 34 , "isEmpty()" : 12 , "keySet()" : 22 , "putAll(TypeCountMap<T>)" : 2 , "size()" : 5 , "values()" : 1}},{ "className" : "net::sf::freecol::common::model::Region::RegionType" , "selectors" : { "getNameIndexKey()" : 4 , "values()" : 2}},{ "className" : "net::sf::freecol::server::ai::Transportable" , "selectors" : { "abortWish(Wish)" : 1 , "getId()" : 5 , "getTransport()" : 2 , "getTransportDestination()" : 20 , "getTransportLocatable()" : 11 , "getTransportPriority()" : 2 , "getTransportSource()" : 12 , "increaseTransportPriority()" : 1 , "setTransport(AIUnit)" : 3}},{ "className" : "javax::sound::sampled::AudioInputStream" , "selectors" : { "close()" : 4 , "getFormat()" : 6 , "read(byte[],int,int)" : 3}},{ "className" : "net::sf::freecol::common::model::TileTest" , "selectors" : { "hasBonusFromSource(Set<Modifier>,FreeColGameObjectType)" : 7}},{ "className" : "net::sf::freecol::client::gui::plaf::FreeColCheckBoxUI" , "selectors" : { "FreeColCheckBoxUI()" : 1}},{ "className" : "net::sf::freecol::server::control::InGameControllerTest" , "selectors" : { "getWorkLeftForPioneerWork(UnitType,TileType,TileImprovementType)" : 52 , "setPlayersAt(Stance,Tension)" : 4 , "verifyTreatyResults(Player,Player,Stance,int)" : 6}},{ "className" : "net::sf::freecol::client::gui::panel::InfoPanel::EndTurnPanel" , "selectors" : { "EndTurnPanel()" : 1 , "EndTurnPanel()::MigLayout" : 1}},{ "className" : "net::sf::freecol::client::control::InGameController::ColonyWas" , "selectors" : { "ColonyWas(Colony)" : 7 , "fireChanges()" : 7}},{ "className" : "net::sf::freecol::client::gui::CanvasMouseListener" , "selectors" : { "CanvasMouseListener(Canvas,GUI)" : 1}},{ "className" : "net::sf::freecol::server::ai::mission::PrivateerMission::PrivateerMissionState" , "selectors" : { "valueOf(String)" : 1}},{ "className" : "net::sf::freecol::common::model::Map::CircleIterator" , "selectors" : { "CircleIterator(Position,boolean,int)" : 2 , "determineNextPosition()" : 2}},{ "className" : "net::sf::freecol::common::model::PathNode" , "selectors" : { "PathNode(Tile,int,int,Direction,int,int)" : 6 , "getCost()" : 6 , "getDirection()" : 10 , "getF()" : 4 , "getLastNode()" : 17 , "getMovesLeft()" : 3 , "getTile()" : 55 , "getTotalTurns()" : 19 , "getTransportDropNode()" : 7 , "getTurns()" : 19 , "isOnCarrier()" : 6 , "setOnCarrier(boolean)" : 4}},{ "className" : "net::sf::freecol::client::gui::panel::DefaultTransferHandler::FreeColDragHandler" , "selectors" : { "FreeColDragHandler()" : 1 , "updatePartialChosen(JComponent,boolean)" : 1}},{ "className" : "net::sf::freecol::server::generator::SimpleMapGenerator::Territory" , "selectors" : { "Territory(Player,Position)" : 3 , "Territory(Player,ServerRegion)" : 2 , "getCenter()" : 3}},{ "className" : "net::sf::freecol::client::gui::action::ReportTurnAction" , "selectors" : { "ReportTurnAction(FreeColClient)" : 1}},{ "className" : "net::sf::freecol::client::gui::ViewMode" , "selectors" : { "ViewMode(GUI)" : 1 , "changeViewMode(int)" : 3 , "displayTileCursor(Tile)" : 1 , "displayUnitCursor(Unit)" : 1 , "getView()" : 6 , "toggleViewMode()" : 1}},{ "className" : "net::sf::freecol::client::gui::action::SaveAndQuitAction" , "selectors" : { "SaveAndQuitAction(FreeColClient)" : 1}},{ "className" : "net::sf::freecol::common::util::XMLStream" , "selectors" : { "XMLStream(InputStream)" : 2 , "close()" : 8 , "createXMLStreamReader(InputStream)" : 1 , "getXMLStreamReader()" : 5}},{ "className" : "net::sf::freecol::server::model::ServerIndianSettlement" , "selectors" : { "ServerIndianSettlement(Game,Player,String,Tile,boolean,UnitType,Set<Player>,Unit)" : 4 , "consumeGoods(GoodsType,int)" : 3}},{ "className" : "net::sf::freecol::common::model::FreeColGameObjectType" , "selectors" : { "FreeColGameObjectType(Specification)" : 1 , "FreeColGameObjectType(String)" : 13 , "FreeColGameObjectType(String,Specification)" : 12 , "addAbility(Ability)" : 6 , "addModifier(Modifier)" : 9 , "applyDifficultyLevel(OptionGroup)" : 1 , "getDescriptionKey()" : 14 , "getFeatureContainer()" : 57 , "getIndex()" : 6 , "getModifierIndex()" : 1 , "getModifierIndex(Modifier)" : 1 , "getModifierSet(String)" : 38 , "getNameKey()" : 172 , "getSpecification()" : 43 , "hasAbility(String)" : 110 , "hasAbility(String,FreeColGameObjectType)" : 4 , "isAbstractType()" : 5 , "readAttributes(XMLStreamReader)" : 13 , "readChild(XMLStreamReader)" : 9 , "readChildren(XMLStreamReader)" : 2 , "setAbstractType(boolean)" : 1 , "setIndex(int)" : 1 , "setModifierIndex(int)" : 5 , "toString()" : 28 , "toXMLImpl(XMLStreamWriter,String)" : 1 , "writeChildren(XMLStreamWriter)" : 9}},{ "className" : "net::sf::freecol::client::control::InGameInputHandler::RefreshCanvasSwingTask" , "selectors" : { "RefreshCanvasSwingTask()" : 2 , "RefreshCanvasSwingTask(boolean)" : 2}},{ "className" : "net::sf::freecol::client::gui::panel::GameOptionsDialog" , "selectors" : { "GameOptionsDialog(Canvas,boolean,boolean)" : 2}},{ "className" : "net::sf::freecol::common::model::MapTest" , "selectors" : { "getShortLongPathMap(Game)" : 1 , "getSingleLandPathMap(Game)" : 3 , "testSearchForColony()::anonymous(GoalDecider)" : 2}},{ "className" : "net::sf::freecol::common::option::FileOption" , "selectors" : { "FileOption(XMLStreamReader)" : 1 , "getValue()" : 7 , "getXMLElementTagName()" : 3 , "setValue(File)" : 13}},{ "className" : "net::sf::freecol::server::model::TransactionSession" , "selectors" : { "TransactionSession(String)" : 6 , "clearAll()" : 2 , "complete(ChangeSet)" : 7 , "completeAll(ChangeSet)" : 1 , "lookup(Class<T>,FreeColGameObject,FreeColGameObject)" : 11 , "lookup(Class<T>,String,String)" : 2 , "makeSessionKey(Class,FreeColGameObject,FreeColGameObject)" : 6 , "makeSessionKey(Class,String,String)" : 2}},{ "className" : "javax::sound::sampled::FloatControl" , "selectors" : { "getMaximum()" : 1 , "getMinimum()" : 1 , "setValue(float)" : 1}},{ "className" : "net::sf::freecol::client::gui::action::UnitAction" , "selectors" : { "UnitAction(FreeColClient,String)" : 14 , "shouldBeEnabled()" : 7}},{ "className" : "net::sf::freecol::common::model::Unit::Role" , "selectors" : { "getId()" : 4 , "isCompatibleWith(Role)" : 12 , "newRole(Role)" : 10}},{ "className" : "net::sf::freecol::client::gui::panel::ChoiceItem<T>" , "selectors" : { "ChoiceItem(String,T)" : 24 , "ChoiceItem(String,T,boolean)" : 8}},{ "className" : "net::sf::freecol::common::model::FoundingFather::FoundingFatherType" , "selectors" : { "values()" : 6}},{ "className" : "net::sf::freecol::server::ai::mission::IndianBringGiftMission" , "selectors" : { "IndianBringGiftMission(AIMain,AIUnit,Colony)" : 2 , "IndianBringGiftMission(AIMain,XMLStreamReader)" : 1 , "getXMLElementTagName()" : 2 , "hasGift()" : 2 , "isValid()" : 1 , "isValidMission(Player,Player)" : 3}},{ "className" : "net::sf::freecol::client::gui::panel::StatusPanel" , "selectors" : { "StatusPanel(Canvas)" : 1 , "setStatusMessage(String)" : 1}},{ "className" : "net::sf::freecol::client::gui::plaf::FreeColComboBoxUI" , "selectors" : { "FreeColComboBoxUI()" : 1}},{ "className" : "net::sf::freecol::server::networking::Server" , "selectors" : { "Server(FreeColServer,int)" : 2 , "addConnection(Connection)" : 2 , "addDummyConnection(Connection)" : 2 , "getConnectionIterator()" : 3 , "getPort()" : 3 , "removeConnection(Connection)" : 1 , "sendToAll(Element)" : 2 , "sendToAll(Element,Connection)" : 10 , "setMessageHandlerToAllConnections(MessageHandler)" : 1 , "shutdown()" : 4}},{ "className" : "net::sf::freecol::client::gui::sound::SoundPlayer" , "selectors" : { "SoundPlayer(AudioMixerOption,PercentageOption)" : 2 , "getMixer()" : 2 , "playOnce(File)" : 2 , "setMixer(MixerWrapper)" : 2 , "setVolume(int)" : 2 , "stop()" : 2}},{ "className" : "net::sf::freecol::client::gui::panel::InfoPanel::TileInfoPanel" , "selectors" : { "TileInfoPanel()" : 1 , "TileInfoPanel()::MigLayout" : 1 , "getTile()" : 1 , "update(Tile)" : 1}},{ "className" : "net::sf::freecol::tools::TranslationReport" , "selectors" : { "prettyPrint(int)" : 5 , "shortenName(String)" : 1 , "sort(ArrayList<String>)" : 5}},{ "className" : "net::sf::freecol::server::ai::mission::UnitWanderMission" , "selectors" : { "UnitWanderMission(AIMain,XMLStreamReader)" : 1 , "getXMLElementTagName()" : 2}},{ "className" : "net::sf::freecol::client::gui::action::DetermineHighSeasAction" , "selectors" : { "DetermineHighSeasAction(FreeColClient)" : 1 , "showParametersDialog()" : 1}},{ "className" : "java::lang::Enum" , "selectors" : { "compareTo(E)" : 24 , "equals(Object)" : 375 , "getDeclaringClass()" : 4 , "hashCode()" : 27 , "name()" : 341 , "ordinal()" : 416 , "toString()" : 347 , "valueOf(???)" : 2 , "valueOf(Class<T>,String)" : 88}},{ "className" : "net::sf::freecol::client::gui::GUI::TextSpecification" , "selectors" : { "TextSpecification(String,Font)" : 3}},{ "className" : "net::sf::freecol::common::model::Resource" , "selectors" : { "Resource(Game,Tile,ResourceType)" : 8 , "Resource(Game,Tile,ResourceType,int)" : 6 , "Resource(Game,XMLStreamReader)" : 2 , "getBestGoodsType()" : 1 , "getBonus(GoodsType,UnitType,int)" : 3 , "getNameKey()" : 1 , "getQuantity()" : 2 , "getType()" : 12 , "getXMLElementTagName()" : 3 , "useQuantity(GoodsType,UnitType,int)" : 1 , "useQuantity(int)" : 1}},{ "className" : "net::sf::freecol::common::model::ColonyTest" , "selectors" : { "createTeaPartyModifier(Turn)" : 4}},{ "className" : "net::sf::freecol::server::generator::RiverSection" , "selectors" : { "RiverSection(Position,Direction)" : 8 , "RiverSection(int)" : 2 , "decodeStyle(int)" : 1 , "encodeStyle()" : 3 , "getPosition()" : 7 , "getSize()" : 9 , "grow()" : 2 , "setBranch(Direction,int)" : 11}},{ "className" : "net::sf::freecol::client::gui::action::ReportMilitaryAction" , "selectors" : { "ReportMilitaryAction(FreeColClient)" : 1}},{ "className" : "net::sf::freecol::client::gui::sound::SoundTest" , "selectors" : { "getSoundPlayer()" : 1 , "playSound(String)" : 21}},{ "className" : "net::sf::freecol::server::control::ChangeSet::MoveChange" , "selectors" : { "MoveChange(See,Unit,Location,Tile)" : 1 , "seeNew(ServerPlayer)" : 2 , "seeOld(ServerPlayer)" : 3}},{ "className" : "net::sf::freecol::common::networking::MoveMessage" , "selectors" : { "MoveMessage(Game,Element)" : 1 , "MoveMessage(Unit,Direction)" : 2 , "getXMLElementTagName()" : 2 , "handle(FreeColServer,Player,Connection)" : 1}},{ "className" : "net::sf::freecol::server::control::ChangeSet::RemoveChange" , "selectors" : { "RemoveChange(See,Location,List<FreeColGameObject>)" : 3}},{ "className" : "net::sf::freecol::client::gui::i18n::MessageMerge" , "selectors" : { "loadLinesFromFile(String)" : 2 , "main(String[])::anonymous(WindowAdapter)" : 1 , "saveLinesToFile(List<String>,String)" : 1}},{ "className" : "net::sf::freecol::server::control::ChangeSet::AttributeChange" , "selectors" : { "AttributeChange(See,String,String)" : 1}},{ "className" : "net::sf::freecol::common::networking::MissionaryMessage" , "selectors" : { "MissionaryMessage(Game,Element)" : 1 , "MissionaryMessage(Unit,Direction,boolean)" : 2 , "getXMLElementTagName()" : 2 , "handle(FreeColServer,Player,Connection)" : 1}},{ "className" : "net::sf::freecol::common::networking::StreamedMessageHandler" , "selectors" : { "accepts(String)" : 1 , "handle(Connection,XMLStreamReader,XMLStreamWriter)" : 1}},{ "className" : "net::sf::freecol::client::gui::panel::CaptureGoodsDialog::GoodsItem" , "selectors" : { "GoodsItem(Goods)" : 1 , "getGoods()" : 1 , "toString()" : 1}},{ "className" : "net::sf::freecol::server::model::ServerGame" , "selectors" : { "ServerGame(FreeColGameObjectListener,XMLStreamReader,List<String>,Specification)" : 3 , "ServerGame(Specification)" : 11 , "checkForWinner()" : 2 , "csNewTurn(Random,ChangeSet)" : 2 , "csSpanishSuccession(ChangeSet,Event)" : 1 , "getNextID()" : 1 , "isNextPlayerInNewTurn()" : 1 , "makeServerObject(String,String)" : 1}},{ "className" : "net::sf::freecol::server::ai::AIObject" , "selectors" : { "AIObject(AIMain)" : 3 , "AIObject(AIMain,String)" : 13 , "dispose()" : 9 , "getAIMain()" : 161 , "getAIRandom()" : 22 , "getGame()" : 45 , "isUninitialized()" : 2 , "readFromXML(XMLStreamReader)" : 25}},{ "className" : "net::sf::freecol::client::gui::panel::ChooseFoundingFatherDialog::FoundingFatherPanel" , "selectors" : { "FoundingFatherPanel(FoundingFatherType)" : 1 , "createContentPanel(FoundingFatherType)" : 1 , "initialize(FoundingFather)" : 1 , "isEnabled()" : 1}},{ "className" : "net::sf::freecol::client::gui::action::ExecuteGotoOrdersAction" , "selectors" : { "ExecuteGotoOrdersAction(FreeColClient)" : 1}},{ "className" : "javax::swing::JSeparator" , "selectors" : { "JSeparator()" : 102 , "JSeparator(int)" : 30 , "javax" : 106 , "setOrientation(int)" : 4 , "setUI(SeparatorUI)" : 3}},{ "className" : "net::sf::freecol::common::networking::ReceivingThread::FreeColNetworkInputStream" , "selectors" : { "FreeColNetworkInputStream(InputStream)" : 1 , "enable()" : 1 , "fill()" : 3}},{ "className" : "net::sf::freecol::client::gui::panel::SelectDestinationDialog::LocationRenderer" , "selectors" : { "LocationRenderer()" : 1}},{ "className" : "net::sf::freecol::common::model::pathfinding::CostDeciders" , "selectors" : { "avoidIllegal()" : 9 , "avoidSettlements()" : 7 , "avoidSettlementsAndBlockingUnits()" : 6 , "defaultCostDeciderFor(Unit)" : 7 , "serverAvoidIllegal()" : 1}},{ "className" : "net::sf::freecol::common::networking::AttackMessage" , "selectors" : { "AttackMessage(Game,Element)" : 1 , "AttackMessage(Unit,Direction)" : 2 , "getXMLElementTagName()" : 2 , "handle(FreeColServer,Player,Connection)" : 1}},{ "className" : "net::sf::freecol::common::model::RandomRange" , "selectors" : { "RandomRange()" : 2 , "RandomRange(int,int,int,int)" : 6 , "getAmount(String,Random,boolean)" : 4 , "getAmount(int)" : 1 , "getFactor()" : 2 , "getRange()" : 3 , "getScopes()" : 2 , "readFromXML(XMLStreamReader)" : 3 , "toXML(XMLStreamWriter,String)" : 2}},{ "className" : "net::sf::freecol::client::gui::i18n::DefaultNumberRule" , "selectors" : { "DefaultNumberRule()" : 2 , "addRule(Category,Rule)" : 1 , "addRule(Category,String)" : 5 , "countRules()" : 1 , "getCategory(double)" : 9 , "getRule(Category)" : 3}},{ "className" : "net::sf::freecol::server::control::ChangeSet::ObjectChange" , "selectors" : { "ObjectChange(See,FreeColGameObject)" : 5}},{ "className" : "net::sf::freecol::client::gui::panel::EuropePanel::MarketPanel" , "selectors" : { "MarketPanel(EuropePanel)" : 1 , "add(Component,boolean)" : 1 , "cleanup()" : 1 , "initialize()" : 1}},{ "className" : "net::sf::freecol::server::ai::AIColonyTest" , "selectors" : { "buildMap(boolean)" : 2}},{ "className" : "net::sf::freecol::common::model::CombatModel" , "selectors" : { "calculateCombatOdds(FreeColGameObject,FreeColGameObject)" : 2 , "combatIsAmphibious(FreeColGameObject,FreeColGameObject)" : 2 , "combatIsAttack(FreeColGameObject,FreeColGameObject)" : 8 , "combatIsBombard(FreeColGameObject,FreeColGameObject)" : 6 , "combatIsMeasurement(FreeColGameObject,FreeColGameObject)" : 3 , "combatIsSettlementAttack(FreeColGameObject,FreeColGameObject)" : 6 , "generateAttackResult(Random,FreeColGameObject,FreeColGameObject)" : 2 , "getDefencePower(FreeColGameObject,FreeColGameObject)" : 14 , "getDefensiveModifiers(FreeColGameObject,FreeColGameObject)" : 5 , "getOffencePower(FreeColGameObject,FreeColGameObject)" : 12 , "getOffensiveModifiers(FreeColGameObject,FreeColGameObject)" : 5}},{ "className" : "net::sf::freecol::common::AllTests" , "selectors" : { "suite()::TestSuite" : 1 , "suite(???)" : 1}},{ "className" : "net::sf::freecol::common::networking::MonarchActionMessage" , "selectors" : { "MonarchActionMessage(Game,Element)" : 2 , "MonarchActionMessage(MonarchAction,StringTemplate)" : 9 , "getAction()" : 1 , "getTemplate()" : 1 , "getXMLElementTagName()" : 2 , "handle(FreeColServer,Player,Connection)" : 1 , "setTax(int)" : 1}},{ "className" : "net::sf::freecol::common::model::Map::MapIterator" , "selectors" : { "next()" : 1 , "nextPosition()" : 1 , "remove()" : 1}},{ "className" : "net::sf::freecol::client::gui::panel::LabourData::ProductionData" , "selectors" : { "ProductionData()" : 2 , "add(ProductionData)" : 2 , "addProduction(int)" : 2 , "getColonists()" : 6 , "getProduction()" : 5}},{ "className" : "net::sf::freecol::common::option::AudioMixerOption::MixerWrapper" , "selectors" : { "MixerWrapper(String,Info)" : 2 , "equals(Object)" : 4 , "getKey()" : 4 , "getMixerInfo()" : 3}},{ "className" : "net::sf::freecol::client::gui::option::IntegerOptionUI" , "selectors" : { "IntegerOptionUI(IntegerOption,boolean)" : 1 , "getLabel()" : 1}},{ "className" : "javax::swing::plaf::basic::BasicTableUI" , "selectors" : { "installUI(JComponent)" : 1 , "paint(Graphics,JComponent)" : 2}},{ "className" : "net::sf::freecol::client::gui::panel::WarehouseDialog" , "selectors" : { "WarehouseDialog(Canvas,Colony)" : 1 , "WarehouseDialog(Canvas,Colony)::MigLayout" : 2}},{ "className" : "net::sf::freecol::client::gui::action::SelectableAction" , "selectors" : { "SelectableAction(FreeColClient,String,String)" : 5 , "isSelected()" : 3 , "setSelected(boolean)" : 2 , "shouldBeSelected()" : 2 , "update()" : 1 , "updateOption(boolean)" : 3}},{ "className" : "net::sf::freecol::common::model::mission::CompoundMission" , "selectors" : { "doMission()" : 1 , "getXMLElementTagName()" : 2}},{ "className" : "net::sf::freecol::common::model::TypeCountMap<T>" , "selectors" : { "TypeCountMap()" : 22}},{ "className" : "net::sf::freecol::common::model::NationOptions" , "selectors" : { "NationOptions(Specification,Advantages)" : 10 , "getNationState(Nation)" : 3 , "getNationalAdvantages()" : 3 , "getNations()" : 11 , "getXMLElementTagName()" : 2 , "setNationState(Nation,NationState)" : 3 , "setNationalAdvantages(Advantages)" : 1 , "setNations(Map<Nation,NationState>)" : 1}},{ "className" : "net::sf::freecol::client::gui::panel::DeclarationDialog::SignaturePanel" , "selectors" : { "SignaturePanel()" : 1 , "addActionListener(ActionListener)" : 1 , "getAbbreviatedName(String)" : 1 , "initialize(String)" : 1 , "isTooLarge(String)" : 6 , "notifyStopped()" : 2 , "startAnimation()" : 1}},{ "className" : "net::sf::freecol::client::gui::panel::BuildQueuePanel::BuildQueueTransferHandler" , "selectors" : { "BuildQueueTransferHandler()" : 1 , "canImport(JComponent,DataFlavor[])" : 1}},{ "className" : "net::sf::freecol::common::networking::MessageHandler" , "selectors" : { "handle(Connection,Element)" : 5}},{ "className" : "net::sf::freecol::client::gui::option::OptionUpdater" , "selectors" : { "reset()" : 1 , "rollback()" : 1 , "unregister()" : 1 , "updateOption()" : 1}},{ "className" : "net::sf::freecol::client::gui::panel::NewPanel::AdvantageRenderer" , "selectors" : { "AdvantageRenderer()" : 1}},{ "className" : "net::sf::freecol::client::gui::panel::ReportExplorationPanel" , "selectors" : { "ReportExplorationPanel(Canvas)" : 1 , "ReportExplorationPanel(Canvas)::MigLayout" : 1}},{ "className" : "net::sf::freecol::client::gui::GUI::GrayLayer" , "selectors" : { "GrayLayer(ImageLibrary)" : 1 , "setPlayer(Player)" : 1}},{ "className" : "java::util::jar::JarEntry" , "selectors" : { "JarEntry(String)" : 18 , "getCertificates()" : 3 , "java" : 1}},{ "className" : "net::sf::freecol::client::gui::panel::ChoiceItem" , "selectors" : { "ChoiceItem(String,T,boolean)" : 2 , "getObject()" : 4 , "isEnabled()" : 2 , "toString()" : 1}},{ "className" : "net::sf::freecol::client::control::InGameInputHandler::ShowMessageSwingTask" , "selectors" : { "show()" : 2}},{ "className" : "net::sf::freecol::common::resources::ResourceMapping" , "selectors" : { "ResourceMapping()" : 7 , "add(String,Resource)" : 10 , "addAll(ResourceMapping)" : 9 , "containsKey(String)" : 1 , "get(String)" : 2 , "getResources()" : 3}},{ "className" : "net::sf::freecol::client::gui::action::TilePopupAction" , "selectors" : { "TilePopupAction(FreeColClient)" : 1}},{ "className" : "net::sf::freecol::server::model::LootSession" , "selectors" : { "LootSession(Unit,Unit)" : 1 , "complete(ChangeSet)" : 1 , "getCapture()" : 1 , "setCapture(List<Goods>)" : 1}},{ "className" : "net::sf::freecol::client::gui::panel::FreeColImageBorder" , "selectors" : { "FreeColImageBorder(Image,Image,Image,Image,Image,Image,Image,Image)" : 1 , "createBufferedImage(Image)" : 8 , "fillTexture(Graphics2D,BufferedImage,int,int,int,int)" : 8 , "getBorderInsets(Component)" : 1 , "getBorderInsets(Component,Insets)" : 1 , "getHeight(Image)" : 14 , "getWidth(Image)" : 14}},{ "className" : "net::sf::freecol::common::model::Goods" , "selectors" : { "Goods(Game,Element)" : 13 , "Goods(Game,Location,GoodsType,int)" : 39 , "Goods(Game,XMLStreamReader)" : 2 , "adjustAmount()" : 3 , "getGame()" : 8 , "getLabel(boolean)" : 7 , "getLocation()" : 47 , "getSpaceTaken()" : 3 , "getTile()" : 2 , "getXMLElementTagName()" : 11 , "setLocation(Location)" : 13 , "setOwner(Player)" : 1 , "toString()" : 5 , "toString(Goods)" : 1 , "toString(GoodsType,int)" : 1}},{ "className" : "net::sf::freecol::client::gui::panel::RecruitDialog" , "selectors" : { "RecruitDialog(Canvas)" : 1 , "initialize()" : 1 , "initialize()::MigLayout" : 1}},{ "className" : "net::sf::freecol::metaserver::MetaItem" , "selectors" : { "MetaItem(String,String,int,int,int,boolean,String,int)" : 1 , "getLastUpdated()" : 1 , "update(String,String,int,int,int,boolean,String,int)" : 2}},{ "className" : "net::sf::freecol::common::model::Modifier" , "selectors" : { "Modifier(Modifier)" : 2 , "Modifier(String,FreeColGameObjectType,float,Type)" : 18 , "Modifier(String,float,Type)" : 27 , "Modifier(XMLStreamReader,Specification)" : 3 , "applyTo(float)" : 8 , "equals(Object)" : 5 , "getIncrement()" : 8 , "getIncrementType()" : 4 , "getIndex()" : 1 , "getType()" : 18 , "getValue()" : 31 , "getXMLElementTagName()" : 3 , "hasIncrement()" : 5 , "hashCode()" : 24 , "makeTimedModifier(String,Modifier,Turn)" : 2 , "setIncrement(float,Type,Turn,Turn)" : 4 , "setIncrementType(Type)" : 1 , "setIndex(int)" : 2 , "setType(Type)" : 4 , "setValue(float)" : 4 , "toString()" : 1 , "toXMLImpl(XMLStreamWriter)" : 1}},{ "className" : "net::sf::freecol::server::model::ServerRegion" , "selectors" : { "ServerRegion(Game,String,RegionType)" : 15 , "ServerRegion(Game,String,RegionType,Region)" : 7 , "addTile(Tile)" : 8 , "getBounds()" : 1 , "getCenter()" : 2 , "getSize()" : 7 , "setBounds(Rectangle)" : 9 , "setSize(int)" : 1}},{ "className" : "net::sf::freecol::common::model::Player::UnitPredicate" , "selectors" : { "obtains(Unit)" : 3}},{ "className" : "net::sf::freecol::client::gui::panel::ReportPanel" , "selectors" : { "ReportPanel(Canvas,String)" : 19 , "ReportPanel(Canvas,String)::MigLayout" : 1 , "actionPerformed(ActionEvent)" : 2 , "createBorder()" : 1 , "createUnitTypeLabel(AbstractUnit)" : 5 , "createUnitTypeLabel(UnitType,Role,int)" : 1 , "getLocationNameFor(Unit)" : 3 , "getUnitTypeComparator()" : 5 , "setMainComponent(Component)" : 1}},{ "className" : "net::sf::freecol::client::gui::panel::CargoPanel" , "selectors" : { "CargoPanel(Canvas,boolean)" : 2 , "add(Component,boolean)" : 3 , "addPropertyChangeListeners()" : 1 , "cleanup()" : 1 , "initialize()" : 6 , "removePropertyChangeListeners()" : 2 , "setCarrier(Unit)" : 6 , "setParentPanel(JPanel)" : 2 , "update()" : 10 , "updateTitle()" : 1}},{ "className" : "javax::swing::JRadioButtonMenuItem" , "selectors" : { "JRadioButtonMenuItem()" : 6 , "JRadioButtonMenuItem(Action)" : 60 , "JRadioButtonMenuItem(Icon)" : 1 , "JRadioButtonMenuItem(String)" : 47 , "JRadioButtonMenuItem(String,Icon,boolean)" : 1 , "JRadioButtonMenuItem(String,boolean)" : 30 , "javax" : 34}},{ "className" : "net::sf::freecol::client::gui::action::ShowMainAction" , "selectors" : { "ShowMainAction(FreeColClient)" : 1}},{ "className" : "net::sf::freecol::common::resources::ColorResource" , "selectors" : { "ColorResource(URI)" : 1 , "getColor()" : 1 , "getColor(String)" : 3}},{ "className" : "net::sf::freecol::client::gui::panel::WarehouseDialog::WarehouseGoodsPanel" , "selectors" : { "WarehouseGoodsPanel(Colony,GoodsType)" : 1 , "WarehouseGoodsPanel(Colony,GoodsType)::MigLayout" : 1 , "saveSettings()" : 1}},{ "className" : "net::sf::freecol::client::control::InputHandler" , "selectors" : { "InputHandler(FreeColClient)" : 2 , "disconnect(Element)" : 2 , "getFreeColClient()" : 57 , "getGame()" : 29}},{ "className" : "net::sf::freecol::server::ai::mission::IndianDemandMission" , "selectors" : { "IndianDemandMission(AIMain,AIUnit,Colony)" : 2 , "IndianDemandMission(AIMain,XMLStreamReader)" : 1 , "capAmount(int,int)" : 7 , "getXMLElementTagName()" : 2 , "hasTribute()" : 3 , "isValid()" : 1 , "selectGoods(Colony)" : 1}},{ "className" : "net::sf::freecol::common::networking::SellGoodsMessage" , "selectors" : { "SellGoodsMessage(Game,Element)" : 1 , "SellGoodsMessage(Goods,Unit)" : 2 , "getXMLElementTagName()" : 2 , "handle(FreeColServer,Player,Connection)" : 1}},{ "className" : "net::sf::freecol::client::gui::panel::MarketLabel" , "selectors" : { "MarketLabel(GoodsType,Market,Canvas)" : 2 , "setAmount(int)" : 2}},{ "className" : "net::sf::freecol::common::networking::LootCargoMessage" , "selectors" : { "LootCargoMessage(Game,Element)" : 3 , "LootCargoMessage(Unit,String,List<Goods>)" : 4 , "getDefenderId()" : 2 , "getGoods()" : 2 , "getUnit(Game)" : 2 , "getXMLElementTagName()" : 2 , "handle(FreeColServer,Player,Connection)" : 1}},{ "className" : "net::sf::freecol::client::gui::option::LanguageOptionUI" , "selectors" : { "LanguageOptionUI(LanguageOption,boolean)" : 1 , "getLabel()" : 1 , "reset()" : 1}},{ "className" : "net::sf::freecol::client::gui::panel::PlayersTable::PlayersTableModel" , "selectors" : { "PlayersTableModel(PreGameController,NationOptions,Player)" : 1 , "getColumnCount()" : 2 , "getRowCount()" : 2 , "update()" : 3}},{ "className" : "net::sf::freecol::client::gui::CanvasMapEditorMouseListener::ScrollThread" , "selectors" : { "ScrollThread(GUI)" : 1 , "setDirection(Direction)" : 2 , "stopScrolling()" : 3}},{ "className" : "net::sf::freecol::server::model::ServerModelObject" , "selectors" : { "csNewTurn(Random,ChangeSet)" : 4 , "getServerXMLElementTagName()" : 1}},{ "className" : "net::sf::freecol::common::model::Specification::TypeReader<T>" , "selectors" : { "TypeReader(Class<T>,List<T>)" : 12}},{ "className" : "net::sf::freecol::server::ai::mission::WorkInsideColonyMission" , "selectors" : { "WorkInsideColonyMission(AIMain,AIUnit,AIColony)" : 3 , "WorkInsideColonyMission(AIMain,XMLStreamReader)" : 1 , "getXMLElementTagName()" : 2}},{ "className" : "net::sf::freecol::util::test::FreeColTestCase" , "selectors" : { "fakeAttackResult(CombatResult,FreeColGameObject,FreeColGameObject)" : 37 , "getCoastTestMap(TileType)" : 14 , "getCoastTestMap(TileType,boolean)" : 3 , "getGame()" : 123 , "getSpecification(String)" : 3 , "getStandardColony()" : 37 , "getStandardColony(int)" : 52 , "getStandardColony(int,int,int)" : 18 , "getStandardGame()" : 73 , "getStandardGame(String)" : 2 , "getTestMap()" : 84 , "getTestMap(TileType)" : 55 , "getTestMap(TileType,boolean)" : 12 , "getTestMap(boolean)" : 69 , "nonServerBuildColony(Unit,Colony)" : 4 , "nonServerJoinColony(Unit,Colony)" : 9 , "setGame(Game)" : 2 , "setProductionBonus(Colony,int)" : 2 , "spec()" : 758 , "tearDown()" : 16}},{ "className" : "javax::xml::validation::Validator" , "selectors" : { "setErrorHandler(ErrorHandler)" : 6 , "setFeature(String,boolean)" : 8 , "validate(Source)" : 17}},{ "className" : "net::sf::freecol::client::gui::i18n::OtherNumberRule" , "selectors" : { "OtherNumberRule()" : 1}},{ "className" : "net::sf::freecol::common::io::FreeColModFile::ModDescriptor" , "selectors" : { "ModDescriptor(XMLStreamReader)" : 1 , "getParent()" : 2}},{ "className" : "net::sf::freecol::common::model::Consumer" , "selectors" : { "getConsumedGoods()" : 1 , "getModifierSet(String)" : 1 , "getPriority()" : 2}},{ "className" : "net::sf::freecol::client::gui::panel::ReportHighScoresPanel" , "selectors" : { "ReportHighScoresPanel(Canvas,String)" : 1 , "ReportHighScoresPanel(Canvas,String)::MigLayout" : 1}},{ "className" : "net::sf::freecol::server::ai::AIGoods" , "selectors" : { "AIGoods(AIMain,Location,GoodsType,int,Location)" : 7 , "AIGoods(AIMain,String)" : 3 , "AIGoods(AIMain,XMLStreamReader)" : 1 , "dispose()" : 3 , "getGoods()" : 20 , "getTransport()" : 4 , "getTransportDestination()" : 4 , "getTransportPriority()" : 4 , "getXMLElementTagName()" : 5 , "setGoods(Goods)" : 1 , "setTransport(AIUnit)" : 1 , "setTransportPriority(int)" : 4 , "toString()" : 1}},{ "className" : "net::sf::freecol::common::option::UnitListOption" , "selectors" : { "getXMLElementTagName()" : 2}},{ "className" : "net::sf::freecol::client::gui::plaf::FreeColBrightPanelUI" , "selectors" : { "FreeColBrightPanelUI()" : 1}},{ "className" : "net::sf::freecol::common::resources::Resource" , "selectors" : { "Resource(URI)" : 8 , "getResourceLocator()" : 5 , "preload()" : 1}},{ "className" : "net::sf::freecol::client::control::InGameInputHandler::NewLandNameSwingTask" , "selectors" : { "NewLandNameSwingTask(Unit,String,Player,String)" : 1}},{ "className" : "net::sf::freecol::client::gui::panel::EuropePanel::EuropeAction" , "selectors" : { "valueOf(String)" : 1}},{ "className" : "net::sf::freecol::common::networking::GetNationSummaryMessage" , "selectors" : { "GetNationSummaryMessage(Game,Element)" : 2 , "GetNationSummaryMessage(Player)" : 1 , "getNationSummary()" : 1 , "getXMLElementTagName()" : 3 , "handle(FreeColServer,Connection)" : 1 , "toXMLElement()" : 1}},{ "className" : "net::sf::freecol::client::WorkerCheck" , "selectors" : { "WorkerCheck()" : 1 , "WorkerCheck()::anonymous(WindowAdapter)" : 1}},{ "className" : "net::sf::freecol::common::model::NationType" , "selectors" : { "NationType(String,Specification)" : 2 , "getAggression()" : 1 , "getCapitalType()" : 8 , "getNumberOfSettlements()" : 3 , "getSettlementType(String)" : 2 , "getSettlementType(boolean)" : 11 , "getSettlementTypes()" : 3 , "isEuropean()" : 25 , "isIndian()" : 1 , "isREF()" : 24 , "readAttributes(XMLStreamReader)" : 2 , "readChild(XMLStreamReader)" : 2 , "writeAttributes(XMLStreamWriter)" : 1 , "writeChildren(XMLStreamWriter)" : 2}},{ "className" : "net::sf::freecol::util::test::FreeColTestCase::MapBuilder" , "selectors" : { "MapBuilder(Game)" : 16 , "build()" : 16 , "completeWorkingGrid()" : 1 , "setBaseTileType(TileType)" : 6 , "setDimensions(int,int)" : 8 , "setExploredByAll(boolean)" : 3 , "setStartingParams()" : 2 , "setTile(int,int,TileType)" : 20}},{ "className" : "net::sf::freecol::client::gui::action::DebugAction" , "selectors" : { "DebugAction(FreeColClient)" : 1 , "shouldBeEnabled()" : 1}},{ "className" : "net::sf::freecol::common::networking::SellMessage" , "selectors" : { "SellMessage(Game,Element)" : 1 , "SellMessage(Unit,Settlement,Goods,int)" : 1 , "getXMLElementTagName()" : 2 , "handle(FreeColServer,Player,Connection)" : 1}},{ "className" : "net::sf::freecol::client::gui::panel::InformationDialog" , "selectors" : { "InformationDialog(Canvas,String,ImageIcon)" : 2 , "InformationDialog(Canvas,String[],ImageIcon[])" : 2 , "InformationDialog(Canvas,String[],ImageIcon[])::MigLayout" : 2}},{ "className" : "net::sf::freecol::server::ai::TileImprovementPlan" , "selectors" : { "TileImprovementPlan(AIMain,String)" : 2 , "TileImprovementPlan(AIMain,Tile,TileImprovementType,int)" : 3 , "TileImprovementPlan(AIMain,XMLStreamReader)" : 1 , "dispose()" : 4 , "getPioneer()" : 2 , "getTarget()" : 17 , "getType()" : 5 , "getXMLElementTagName()" : 5 , "setPioneer(AIUnit)" : 3 , "setType(TileImprovementType)" : 2 , "toString()" : 1}},{ "className" : "net::sf::freecol::client::control::InGameController::EuropeWas" , "selectors" : { "EuropeWas(Europe)" : 2 , "fireChanges()" : 2}},{ "className" : "javax::swing::BorderFactory" , "selectors" : { "createBevelBorder(int)" : 35 , "createBevelBorder(int,Color,Color)" : 2 , "createBevelBorder(int,Color,Color,Color,Color)" : 2 , "createCompoundBorder(Border,Border)" : 111 , "createEmptyBorder()" : 52 , "createEmptyBorder(int,int,int,int)" : 645 , "createEtchedBorder()" : 219 , "createEtchedBorder(Color,Color)" : 25 , "createEtchedBorder(int)" : 14 , "createLineBorder(Color)" : 43 , "createLineBorder(Color,int)" : 25 , "createLoweredBevelBorder()" : 55 , "createMatteBorder(int,int,int,int,Color)" : 30 , "createMatteBorder(int,int,int,int,Icon)" : 1 , "createRaisedBevelBorder()" : 37 , "createTitledBorder(Border,String)" : 157 , "createTitledBorder(Border,String,int,int)" : 6 , "createTitledBorder(Border,String,int,int,Font)" : 1 , "createTitledBorder(Border,String,int,int,Font,Color)" : 1 , "createTitledBorder(String)" : 288}},{ "className" : "net::sf::freecol::common::model::Unit" , "selectors" : { "Unit(Game)" : 1 , "Unit(Game,Element)" : 4 , "Unit(Game,String)" : 2 , "add(Locatable)" : 9 , "allowContact(Settlement)" : 3 , "allowMoveFrom(Tile)" : 6 , "canAdd(Locatable)" : 16 , "canBeEquippedWith(EquipmentType)" : 18 , "canBeStudent(Unit)" : 12 , "canBeStudent(UnitType,UnitType)" : 1 , "canBuildColony()" : 12 , "canCaptureEquipment(EquipmentType,Unit)" : 3 , "canCaptureGoods()" : 1 , "canCarryGoods()" : 16 , "canCarryTreasure()" : 12 , "canCarryUnits()" : 11 , "canCashInTreasureTrain()" : 11 , "canCashInTreasureTrain(Location)" : 2 , "canMoveToEurope()" : 4 , "changeEquipment(EquipmentType,int)" : 29 , "checkSetState(UnitState)" : 9 , "clearEquipment()" : 2 , "couldMove()" : 1 , "dispose()" : 5 , "disposeList()" : 3 , "findPath(Tile)" : 25 , "findPath(Tile,Tile)" : 6 , "findPathToEurope()" : 9 , "getApparentOwnerName()" : 19 , "getAttrition()" : 1 , "getAutomaticEquipment()" : 9 , "getBestCombatEquipmentType(TypeCountMap<EquipmentType>)" : 7 , "getBurnProbability()" : 1 , "getColony()" : 64 , "getConvertProbability()" : 1 , "getDestination()" : 45 , "getEntryLocation()" : 1 , "getEquipment()" : 38 , "getEquipmentCount(EquipmentType)" : 57 , "getEquipmentLabel()" : 1 , "getExperience()" : 23 , "getExperienceType()" : 2 , "getFirstUnit()" : 3 , "getFullEntryLocation()" : 14 , "getGoodsContainer()" : 27 , "getGoodsCount()" : 25 , "getGoodsIterator()" : 6 , "getGoodsList()" : 19 , "getHitpoints()" : 2 , "getIndianSettlement()" : 20 , "getInitialMovesLeft()" : 25 , "getLabel()" : 74 , "getLandMoveType(Tile,Tile)" : 1 , "getLearnMoveType(Tile,Settlement)" : 1 , "getLineOfSight()" : 16 , "getLoadableAmount(GoodsType)" : 4 , "getLocation()" : 236 , "getLocationName()" : 1 , "getMissionaryMoveType(Tile,Settlement)" : 1 , "getModifierSet(String)" : 12 , "getModifierSet(String,Ownable)" : 1 , "getMoveCost(Tile)" : 13 , "getMoveCost(Tile,Tile,int)" : 4 , "getMoveType(Direction)" : 21 , "getMoveType(Tile)" : 26 , "getMoveType(Tile,Tile,int)" : 6 , "getMovesAsString()" : 3 , "getMovesLeft()" : 84 , "getName()" : 4 , "getNavalMoveType(Tile,Tile)" : 1 , "getNeededTurnsOfTraining()" : 31 , "getNeededTurnsOfTraining(UnitType,UnitType)" : 1 , "getOwner()" : 349 , "getProductionInfo(List<AbstractGoods>)" : 1 , "getProductionOf(GoodsType,int)" : 2 , "getRepairLocation(List<Colony>)" : 8 , "getRole()" : 30 , "getSailTurns()" : 12 , "getScoutMoveType(Tile,Settlement)" : 1 , "getSettlement()" : 16 , "getSimpleMoveType(Tile)" : 1 , "getSimpleMoveType(Tile,Tile)" : 8 , "getSkillLevel()" : 19 , "getSkillLevel(UnitType)" : 1 , "getSkillLevelComparator()" : 2 , "getSpaceLeft()" : 35 , "getSpaceTaken()" : 12 , "getState()" : 68 , "getStop()" : 3 , "getStudent()" : 62 , "getTeacher()" : 30 , "getTile()" : 356 , "getTradeMoveType(Settlement)" : 2 , "getTradeRoute()" : 26 , "getTransportFee()" : 13 , "getTreasureAmount()" : 8 , "getTurnsForRepair()" : 2 , "getTurnsOfTraining()" : 27 , "getTurnsToReach(Location)" : 2 , "getTurnsToReach(Tile,Tile)" : 2 , "getType()" : 267 , "getTypeChange(ChangeType,Player)" : 7 , "getUnitCount()" : 11 , "getUnitIterator()" : 5 , "getUnitList()" : 16 , "getUnitTypeTeaching(UnitType,UnitType)" : 8 , "getVisibleGoodsCount()" : 3 , "getWorkImprovement()" : 10 , "getWorkLeft()" : 25 , "getWorkLocation()" : 3 , "getWorkLocation2()" : 2 , "getWorkTile()" : 5 , "getWorkTurnsLeft()" : 3 , "getWorkType()" : 63 , "getXMLElementTagName()" : 8 , "hasAbility(String)" : 132 , "hasNativeEthnicity()" : 4 , "isArmed()" : 45 , "isAtSea()" : 12 , "isCarrier()" : 33 , "isColonist()" : 17 , "isDefensiveUnit()" : 12 , "isInEurope()" : 57 , "isInMission()" : 1 , "isMounted()" : 42 , "isNaval()" : 85 , "isOffensiveUnit()" : 30 , "isOnCarrier()" : 34 , "isTradingUnit()" : 2 , "isUndead()" : 3 , "isUnderRepair()" : 16 , "isVisibleTo(Player)" : 7 , "losingEquipmentKillsUnit(EquipmentType)" : 2 , "modifyExperience(int)" : 8 , "setAttrition(int)" : 2 , "setCurrentStop(int)" : 2 , "setDestination(Location)" : 28 , "setEntryLocation(Location)" : 1 , "setEquipment(TypeCountMap<EquipmentType>)" : 1 , "setExperience(int)" : 2 , "setHitpoints(int)" : 2 , "setIndianSettlement(IndianSettlement)" : 10 , "setLocation(Location)" : 171 , "setLocationNoUpdate(Location)" : 1 , "setMovesLeft(int)" : 61 , "setName(String)" : 1 , "setNationality(String)" : 1 , "setOwner(Player)" : 16 , "setRole()" : 3 , "setState(UnitState)" : 50 , "setStateToAllChildren(UnitState)" : 2 , "setStateUnchecked(UnitState)" : 7 , "setStudent(Unit)" : 15 , "setTeacher(Unit)" : 15 , "setTradeRoute(TradeRoute)" : 5 , "setTreasureAmount(int)" : 6 , "setTurnsOfTraining(int)" : 4 , "setType(UnitType)" : 117 , "setWorkImprovement(TileImprovement)" : 5 , "setWorkLeft(int)" : 21 , "setWorkType(GoodsType)" : 26 , "spendAllMoves()" : 4 , "toString()" : 31 , "unitsToXML(XMLStreamWriter,Player,boolean,boolean)" : 1 , "validateCurrentStop()" : 4}},{ "className" : "net::sf::freecol::client::gui::panel::BuildQueuePanel::DefaultBuildQueueCellRenderer" , "selectors" : { "DefaultBuildQueueCellRenderer()" : 1 , "DefaultBuildQueueCellRenderer()::MigLayout" : 2}},{ "className" : "net::sf::freecol::client::gui::action::NewEmptyMapAction" , "selectors" : { "NewEmptyMapAction(FreeColClient)" : 1}},{ "className" : "net::sf::freecol::client::gui::panel::FindSettlementDialog::SettlementRenderer" , "selectors" : { "SettlementRenderer()" : 1}},{ "className" : "net::sf::freecol::client::gui::option::FreeColActionUI::BlinkingLabel" , "selectors" : { "BlinkingLabel()" : 1 , "getMinimumSize()" : 1 , "startBlinking()" : 2 , "stopBlinking()" : 3}},{ "className" : "net::sf::freecol::client::gui::panel::BuildQueuePanel::SimpleBuildQueueCellRenderer" , "selectors" : { "SimpleBuildQueueCellRenderer()" : 1}},{ "className" : "net::sf::freecol::common::networking::ChangeWorkImprovementTypeMessage" , "selectors" : { "ChangeWorkImprovementTypeMessage(Game,Element)" : 1 , "ChangeWorkImprovementTypeMessage(Unit,TileImprovementType)" : 2 , "getXMLElementTagName()" : 2 , "handle(FreeColServer,Player,Connection)" : 1}},{ "className" : "net::sf::freecol::client::gui::action::ReportEducationAction" , "selectors" : { "ReportEducationAction(FreeColClient)" : 1}},{ "className" : "net::sf::freecol::client::gui::panel::NationCellRenderer" , "selectors" : { "getPlayer(int)" : 1}},{ "className" : "net::sf::freecol::client::gui::panel::MapEditorTransformPanel" , "selectors" : { "MapEditorTransformPanel(Canvas)" : 1 , "buildButton(Image,String,MapTransform)" : 6 , "buildList()" : 1 , "setNativePlayer(Player)" : 1}},{ "className" : "net::sf::freecol::server::ai::ValuedAIObject" , "selectors" : { "ValuedAIObject(AIMain)" : 2 , "ValuedAIObject(AIMain,String)" : 7 , "getValue()" : 15 , "setValue(int)" : 12}},{ "className" : "net::sf::freecol::client::gui::i18n::Number::Category" , "selectors" : { "valueOf(String)" : 1 , "values()" : 1}},{ "className" : "net::sf::freecol::client::gui::AllTests" , "selectors" : { "suite()::TestSuite" : 1 , "suite(???)" : 2}},{ "className" : "net::sf::freecol::client::gui::panel::NegotiationDialog::ColonyTradeItemPanel" , "selectors" : { "ColonyTradeItemPanel(NegotiationDialog,Player)" : 2 , "ColonyTradeItemPanel(NegotiationDialog,Player)::MigLayout" : 1 , "updateColonyBox()" : 3}},{ "className" : "net::sf::freecol::common::model::Turn" , "selectors" : { "Turn(int)" : 42 , "getAge()" : 3 , "getAge(int)" : 5 , "getLabel()" : 3 , "getLabel(int)" : 3 , "getNumber()" : 46 , "getSeason()" : 1 , "getSeason(int)" : 9 , "getYear()" : 5 , "getYear(int)" : 9 , "isFirstSeasonTurn()" : 1 , "next()" : 1 , "setSeasonYear(int)" : 1 , "setStartingYear(int)" : 1 , "toString()" : 2 , "toString(int)" : 1 , "yearToTurn(int,Season)" : 8}},{ "className" : "net::sf::freecol::client::gui::panel::PlayersTable::NationStateRenderer" , "selectors" : { "NationStateRenderer()" : 3}},{ "className" : "net::sf::freecol::common::model::GoodsTradeItem" , "selectors" : { "GoodsTradeItem(Game,Player,Player,Goods,Settlement)" : 1 , "GoodsTradeItem(Game,XMLStreamReader)" : 1 , "getGoods()" : 5 , "getXMLElementTagName()" : 2 , "readFromXMLImpl(XMLStreamReader)" : 1}},{ "className" : "net::sf::freecol::client::gui::action::OpenAction" , "selectors" : { "OpenAction(FreeColClient)" : 1}},{ "className" : "net::sf::freecol::common::model::TileImprovementType" , "selectors" : { "changeContainsTarget(TileType)" : 1 , "getAddWorkTurns()" : 5 , "getBonus(GoodsType)" : 4 , "getChange(TileType)" : 5 , "getDeliverAmount()" : 1 , "getDeliverGoodsType()" : 1 , "getExpendedAmount()" : 1 , "getExpendedEquipmentType()" : 2 , "getExposeResourcePercent()" : 1 , "getMagnitude()" : 1 , "getMovementCost(int)" : 2 , "getProductionModifier(GoodsType)" : 4 , "getShortId()" : 5 , "getXMLElementTagName()" : 1 , "getZIndex()" : 7 , "isNatural()" : 10 , "isTileAllowed(Tile)" : 8 , "isTileTypeAllowed(TileType)" : 10 , "isWorkerAllowed(Unit)" : 4 , "isWorkerTypeAllowed(UnitType)" : 1}},{ "className" : "net::sf::freecol::common::util::RandomChoice" , "selectors" : { "RandomChoice(T,int)" : 10 , "getObject()" : 17 , "getProbability()" : 9 , "getTotalProbability(Collection<RandomChoice<T>>)" : 1 , "getWeightedRandom(Logger,String,Random,Collection<RandomChoice<T>>)" : 12 , "select(Collection<RandomChoice<T>>,int)" : 1}},{ "className" : "net::sf::freecol::common::model::Feature" , "selectors" : { "appliesTo(FreeColGameObjectType)" : 8 , "appliesTo(FreeColGameObjectType,Turn)" : 11 , "copy(Feature)" : 2 , "equals(Object)" : 2 , "getFirstTurn()" : 5 , "getLastTurn()" : 3 , "getNameKey()" : 1 , "getScopes()" : 8 , "getSource()" : 38 , "hasScope()" : 4 , "hasTimeLimit()" : 2 , "hashCode()" : 2 , "isOutOfDate(Turn)" : 2 , "readAttributes(XMLStreamReader,Specification)" : 2 , "setFirstTurn(Turn)" : 4 , "setLastTurn(Turn)" : 4 , "setScopes(List<Scope>)" : 9 , "setSource(FreeColGameObjectType)" : 11 , "writeAttributes(XMLStreamWriter)" : 2}},{ "className" : "net::sf::freecol::client::control::InGameInputHandler::LootCargoSwingTask" , "selectors" : { "LootCargoSwingTask(Unit,String,List<Goods>)" : 1}},{ "className" : "net::sf::freecol::client::gui::panel::AbstractGoodsLabel" , "selectors" : { "AbstractGoodsLabel(AbstractGoods,Canvas)" : 3 , "getAmount()" : 20 , "getCanvas()" : 3 , "getGoods()" : 4 , "getType()" : 14 , "isPartialChosen()" : 2 , "isToEquip()" : 2 , "setPartialChosen(boolean)" : 4 , "toEquip(boolean)" : 2}},{ "className" : "net::sf::freecol::common::option::SelectOption" , "selectors" : { "SelectOption(XMLStreamReader)" : 2 , "getItemValues()" : 5 , "getXMLElementTagName()" : 3 , "getXMLItemElementTagName()" : 2 , "localizeLabels()" : 2 , "toXMLImpl(XMLStreamWriter,String)" : 2}},{ "className" : "net::sf::freecol::client::gui::action::LoadAction" , "selectors" : { "LoadAction(FreeColClient)" : 1}},{ "className" : "net::sf::freecol::common::networking::UpdateTradeRouteMessage" , "selectors" : { "UpdateTradeRouteMessage(Game,Element)" : 1 , "UpdateTradeRouteMessage(TradeRoute)" : 1 , "getXMLElementTagName()" : 2 , "handle(FreeColServer,Connection)" : 1}},{ "className" : "net::sf::freecol::common::model::Map::Layer" , "selectors" : { "valueOf(String)" : 1}},{ "className" : "net::sf::freecol::client::gui::panel::PlayersTable::PlayerCellEditor" , "selectors" : { "PlayerCellEditor()" : 1}},{ "className" : "javax::swing::plaf::basic::BasicRadioButtonUI" , "selectors" : { "paint(Graphics,JComponent)" : 2}},{ "className" : "net::sf::freecol::client::gui::panel::ServerListPanel" , "selectors" : { "ServerListPanel(Canvas,ConnectController)" : 1 , "ServerListPanel(Canvas,ConnectController)::MigLayout" : 1 , "initialize(String,ArrayList<ServerInfo>)" : 1 , "setEnabled(boolean)" : 1}},{ "className" : "net::sf::freecol::common::model::FreeColObject" , "selectors" : { "addPropertyChangeListener(PropertyChangeListener)" : 23 , "addPropertyChangeListener(String,PropertyChangeListener)" : 4 , "dumpObject()" : 3 , "firePropertyChange(String,Object,Object)" : 14 , "firePropertyChange(String,boolean,boolean)" : 2 , "firePropertyChange(String,int,int)" : 8 , "getAttribute(XMLStreamReader,String,Class<T>,T)" : 1 , "getAttribute(XMLStreamReader,String,String)" : 27 , "getAttribute(XMLStreamReader,String,boolean)" : 47 , "getAttribute(XMLStreamReader,String,int)" : 114 , "getId()" : 888 , "getSpecification()" : 2 , "getXMLElementTagName()" : 2 , "hasAbility(String)" : 8 , "hasAttribute(XMLStreamReader,String)" : 1 , "readAttributes(XMLStreamReader)" : 9 , "readAttributes(XMLStreamReader,Specification)" : 3 , "readChild(XMLStreamReader)" : 1 , "readChild(XMLStreamReader,Specification)" : 2 , "readChildren(XMLStreamReader)" : 2 , "readChildren(XMLStreamReader,Specification)" : 2 , "readFromArrayElement(String,XMLStreamReader,String[])" : 4 , "readFromArrayElement(String,XMLStreamReader,int[])" : 1 , "readFromListElement(String,XMLStreamReader,Class<T>)" : 2 , "readFromXML(XMLStreamReader)" : 29 , "readFromXMLElement(Element)" : 74 , "readFromXMLImpl(XMLStreamReader)" : 6 , "readFromXMLImpl(XMLStreamReader,Specification)" : 2 , "readFromXMLPartialImpl(XMLStreamReader)" : 1 , "removePropertyChangeListener(PropertyChangeListener)" : 21 , "removePropertyChangeListener(String,PropertyChangeListener)" : 4 , "save(File)" : 2 , "save(OutputStream)" : 3 , "setId(String)" : 39 , "toXML(XMLStreamWriter)" : 22 , "toXML(XMLStreamWriter,Player,boolean,boolean)" : 3 , "toXML(XMLStreamWriter,String)" : 58 , "toXMLElement(Document)" : 6 , "toXMLElement(Player,Document)" : 20 , "toXMLElement(Player,Document,boolean,boolean)" : 11 , "toXMLElement(Player,Document,boolean,boolean,String[])" : 3 , "toXMLElementPartial(Document,String[])" : 2 , "toXMLImpl(XMLStreamWriter)" : 3 , "toXMLPartialImpl(XMLStreamWriter,String[])" : 1 , "writeAttribute(XMLStreamWriter,String,FreeColObject)" : 14 , "writeAttributes(XMLStreamWriter)" : 29 , "writeChildren(XMLStreamWriter)" : 10}},{ "className" : "net::sf::freecol::client::gui::FAFile::CREatingInputStream" , "selectors" : { "CREatingInputStream(InputStream)" : 1}},{ "className" : "net::sf::freecol::client::gui::panel::EndTurnDialog::UnitWrapper" , "selectors" : { "UnitWrapper(Unit)" : 1 , "getUnit()" : 2}},{ "className" : "net::sf::freecol::common::model::TradeItem" , "selectors" : { "TradeItem(Game,String,Player,Player)" : 5 , "TradeItem(Game,XMLStreamReader)" : 5 , "getColony()" : 1 , "getDestination()" : 4 , "getGold()" : 1 , "getGoods()" : 1 , "getSource()" : 16 , "getStance()" : 1 , "getUnit()" : 1 , "isUnique()" : 1 , "isValid()" : 1 , "readFromXMLImpl(XMLStreamReader)" : 5 , "writeAttributes(XMLStreamWriter)" : 5}},{ "className" : "net::sf::freecol::client::gui::action::DisplayTileTextAction" , "selectors" : { "DisplayTileTextAction(FreeColClient,DisplayText)" : 1}},{ "className" : "net::sf::freecol::client::gui::action::ShowGameOptionsAction" , "selectors" : { "ShowGameOptionsAction(FreeColClient)" : 1}},{ "className" : "net::sf::freecol::client::gui::panel::ServerListTableModel" , "selectors" : { "ServerListTableModel(List<ServerInfo>)" : 1 , "getColumnCount()" : 1 , "getItem(int)" : 1 , "getRowCount()" : 1 , "setItems(List<ServerInfo>)" : 1}},{ "className" : "net::sf::freecol::common::model::ModelMessage" , "selectors" : { "ModelMessage()" : 3 , "ModelMessage(MessageType,String,FreeColGameObject)" : 79 , "ModelMessage(MessageType,String,FreeColGameObject,FreeColObject)" : 57 , "ModelMessage(String,FreeColGameObject,FreeColObject)" : 2 , "add(String,String)" : 36 , "addAmount(String,int)" : 34 , "addName(String,String)" : 77 , "addStringTemplate(String,StringTemplate)" : 161 , "divert(FreeColGameObject)" : 1 , "getDefaultDisplay(MessageType,FreeColGameObject)" : 2 , "getDisplayId()" : 1 , "getMessageType()" : 11 , "getMessageTypeName()" : 2 , "getOwnerId()" : 1 , "getSourceId()" : 7 , "getXMLElementTagName()" : 4 , "hasBeenDisplayed()" : 2 , "hashCode()" : 7 , "readFromXMLImpl(XMLStreamReader)" : 1 , "setBeenDisplayed(boolean)" : 2 , "setDefaultId(String)" : 9 , "setOwnerId(String)" : 1}},{ "className" : "net::sf::freecol::common::model::FreeColGameObject" , "selectors" : { "FreeColGameObject(Game)" : 15 , "FreeColGameObject(Game,Element)" : 11 , "FreeColGameObject(Game,String)" : 10 , "FreeColGameObject(Game,XMLStreamReader)" : 16 , "dispose()" : 6 , "disposeList()" : 6 , "equals(FreeColGameObject)" : 6 , "fundamentalDispose()" : 2 , "getFreeColGameObject(XMLStreamReader,String,Class<T>)" : 17 , "getFreeColGameObject(XMLStreamReader,String,Class<T>,T)" : 5 , "getGame()" : 270 , "getIntegerID()" : 2 , "getRealXMLElementTagName()" : 2 , "getSpecification()" : 180 , "isDisposed()" : 45 , "isUninitialized()" : 3 , "newLocation(String)" : 5 , "readFromXML(XMLStreamReader)" : 35 , "readFromXMLPartialByClass(XMLStreamReader,Class<?>)" : 10 , "setDefaultId(Game)" : 2 , "setGame(Game)" : 3 , "setId(String)" : 20 , "toString()" : 6 , "toXML(XMLStreamWriter,Player,boolean,boolean)" : 31 , "toXMLImpl(XMLStreamWriter,Player,boolean,boolean)" : 2 , "toXMLPartialByClass(XMLStreamWriter,Class<?>,String[])" : 10 , "updateFreeColGameObject(XMLStreamReader,Class<T>)" : 19}},{ "className" : "net::sf::freecol::client::gui::panel::ClientOptionsDialog" , "selectors" : { "ClientOptionsDialog(Canvas)" : 1 , "getDefaultFileName()" : 1}},{ "className" : "net::sf::freecol::client::WorkerCheck::TestJob" , "selectors" : { "TestJob(String,boolean)" : 3}},{ "className" : "net::sf::freecol::client::gui::option::ListOptionUI::ListOptionElement<T>" , "selectors" : { "ListOptionElement(T,String)" : 2}},{ "className" : "net::sf::freecol::common::model::Monarch" , "selectors" : { "Monarch(Game,Player,String)" : 1 , "actionIsValid(MonarchAction)" : 3 , "addIfValid(List<RandomChoice<MonarchAction>>,MonarchAction,int)" : 10 , "addToREF(List<AbstractUnit>)" : 1 , "chooseForREF(Random)" : 1 , "collectPotentialEnemies()" : 2 , "getActionChoices()" : 6 , "getDispleasure()" : 2 , "getMercenaries(Random)" : 1 , "getNameKey()" : 1 , "getREF()" : 2 , "getREFLandUnits()" : 1 , "getREFNavalUnits()" : 1 , "getSupport(Random,boolean)" : 1 , "getSupportSea()" : 1 , "getXMLElementTagName()" : 4 , "lowerTax(Random)" : 1 , "raiseTax(Random)" : 1 , "setDispleasure(boolean)" : 1 , "setSupportSea(boolean)" : 1 , "taxMaximum()" : 2 , "updateSpaceAndCapacity()" : 3}},{ "className" : "net::sf::freecol::util::test::FreeColTestUtils::ColonyBuilder" , "selectors" : { "ColonyBuilder(Game)" : 1 , "addColonist(UnitType)" : 4 , "build()" : 12 , "colonyTile(Tile)" : 8 , "initialColonists(int)" : 4 , "player(Player)" : 5 , "reset()" : 2 , "setGame(Game)" : 1 , "setStartingParams()" : 2}},{ "className" : "net::sf::freecol::server::control::PreGameController" , "selectors" : { "PreGameController(FreeColServer)" : 2 , "startGame()" : 4}},{ "className" : "net::sf::freecol::server::ai::GoodsWish" , "selectors" : { "GoodsWish(AIMain,Location,int,int,GoodsType)" : 2 , "GoodsWish(AIMain,String)" : 2 , "GoodsWish(AIMain,XMLStreamReader)" : 1 , "getGoodsType()" : 2 , "getXMLElementTagName()" : 6}},{ "className" : "net::sf::freecol::common::model::ColonyTile" , "selectors" : { "ColonyTile(Game,Colony,Tile)" : 1 , "ColonyTile(Game,String)" : 2 , "add(Locatable)" : 1 , "getLabel()" : 3 , "getNoAddReason(Locatable)" : 5 , "getNoWorkReason()" : 2 , "getOccupyingUnit()" : 1 , "getPrimaryProduction()" : 2 , "getProduction()" : 9 , "getProductionModifiers(GoodsType,UnitType)" : 1 , "getProductionOf(GoodsType)" : 3 , "getProductionOf(Unit,GoodsType)" : 24 , "getSecondaryProduction()" : 2 , "getUnit()" : 10 , "getWorkTile()" : 42 , "getWorkType(Unit)" : 1 , "getXMLElementTagName()" : 3 , "isColonyCenterTile()" : 14 , "relocateWorkers()" : 1 , "toString()" : 2}},{ "className" : "net::sf::freecol::client::gui::panel::VictoryPanel" , "selectors" : { "VictoryPanel(Canvas)" : 2 , "VictoryPanel(Canvas)::MigLayout" : 1}},{ "className" : "net::sf::freecol::client::gui::i18n::DualNumberRule" , "selectors" : { "DualNumberRule()" : 1}},{ "className" : "net::sf::freecol::common::networking::DisembarkMessage" , "selectors" : { "DisembarkMessage(Game,Element)" : 1 , "DisembarkMessage(Unit)" : 2 , "getXMLElementTagName()" : 2 , "handle(FreeColServer,Player,Connection)" : 1}},{ "className" : "net::sf::freecol::client::gui::panel::TradeRouteDialog" , "selectors" : { "TradeRouteDialog(Canvas,TradeRoute)" : 2 , "TradeRouteDialog(Canvas,TradeRoute)::MigLayout" : 1 , "updateButtons()" : 2}},{ "className" : "net::sf::freecol::common::option::PercentageOption" , "selectors" : { "PercentageOption(XMLStreamReader)" : 1 , "getXMLElementTagName()" : 2}},{ "className" : "net::sf::freecol::common::io::FreeColTcFile" , "selectors" : { "FreeColTcFile(File)" : 1 , "FreeColTcFile(String)" : 18 , "createRiverMapping()" : 1 , "getResourceMapping()" : 2 , "getRulesDirectory()" : 2}},{ "className" : "net::sf::freecol::common::networking::ServerAPI::TrivialMessage" , "selectors" : { "TrivialMessage(String,String[])" : 11}},{ "className" : "net::sf::freecol::client::gui::action::ReportHistoryAction" , "selectors" : { "ReportHistoryAction(FreeColClient)" : 1}},{ "className" : "net::sf::freecol::common::model::Map::Position" , "selectors" : { "Position(int,int)" : 49 , "equals(Object)" : 2 , "getAdjacent(Direction)" : 26 , "getDistance(Position)" : 4 , "getX()" : 27 , "getY()" : 23 , "toString()" : 5}},{ "className" : "net::sf::freecol::common::model::Map::AdjacentIterator" , "selectors" : { "AdjacentIterator(Position)" : 1}},{ "className" : "net::sf::freecol::client::gui::action::MapControlsAction" , "selectors" : { "MapControlsAction(FreeColClient)" : 1 , "getMapControls()" : 12 , "showMapControls(boolean)" : 2}},{ "className" : "net::sf::freecol::common::networking::LearnSkillMessage" , "selectors" : { "LearnSkillMessage(Game,Element)" : 1 , "LearnSkillMessage(Unit,Direction)" : 1 , "getXMLElementTagName()" : 2 , "handle(FreeColServer,Player,Connection)" : 1}},{ "className" : "net::sf::freecol::util::test::FreeColTestUtils" , "selectors" : { "getColonyBuilder()" : 12}},{ "className" : "net::sf::freecol::server::generator::River::DirectionChange" , "selectors" : { "getNewDirection(Direction)" : 5 , "values()" : 4}},{ "className" : "net::sf::freecol::client::gui::panel::ChoiceItem<net::sf::freecol::client::gui::Canvas" , "selectors" : { "showSimpleChoiceDialog(Tile,String,String,List<T>)::T>" : 2}},{ "className" : "net::sf::freecol::common::resources::ResourceManager" , "selectors" : { "addGameMapping(ResourceMapping)" : 1 , "addGameMapping(String,Resource)" : 4 , "createMergedContainer()" : 1 , "getAudio(String)" : 2 , "getChip(String,double)" : 5 , "getColor(String)" : 32 , "getFAFile(String)" : 1 , "getFont(String)" : 4 , "getFont(String,float)" : 11 , "getFont(String,int)" : 1 , "getFont(String,int,float)" : 8 , "getGrayscaleImage(String,double)" : 2 , "getImage(String)" : 42 , "getImage(String,Dimension)" : 2 , "getImage(String,double)" : 30 , "getImageIcon(String)" : 8 , "getProductionColor(int)" : 1 , "getResource(String,Class<T>)" : 14 , "getResources()" : 1 , "getSimpleZippedAnimation(String,double)" : 2 , "getVideo(String)" : 1 , "hasResource(String)" : 3 , "preload(Dimension)" : 3 , "setBaseMapping(ResourceMapping)" : 3 , "setCampaignMapping(ResourceMapping)" : 2 , "setModMappings(List<ResourceMapping>)" : 1 , "setScenarioMapping(ResourceMapping)" : 3 , "setTcMapping(ResourceMapping)" : 1 , "startBackgroundPreloading(Dimension)" : 2 , "updateIfDirty()" : 15}},{ "className" : "javax::sound::sampled::SourceDataLine" , "selectors" : { "open(AudioFormat)" : 3 , "write(byte[],int,int)" : 3}},{ "className" : "net::sf::freecol::client::control::InGameController" , "selectors" : { "InGameController(FreeColClient)" : 1 , "abandonColony(Colony)" : 1 , "askServer()" : 66 , "assignTeacher(Unit,Unit)" : 1 , "assignTradeRoute(Unit)" : 2 , "assignTradeRoute(Unit,TradeRoute)" : 2 , "attack(Unit,Direction)" : 2 , "attemptBuyFromSettlement(Unit,Settlement)" : 1 , "attemptGiftToSettlement(Unit,Settlement)" : 1 , "attemptSellToSettlement(Unit,Settlement)" : 1 , "autosave_game()" : 1 , "boardShip(Unit,Unit)" : 3 , "buildColony()" : 1 , "buyGoods(GoodsType,int,Unit)" : 2 , "changeState(Unit,UnitState)" : 6 , "changeWorkImprovementType(Unit,TileImprovementType)" : 1 , "changeWorkType(Unit,GoodsType)" : 2 , "checkCashInTreasureTrain(Unit)" : 5 , "claimLand(Tile,Colony,int)" : 2 , "claimTile(Player,Tile,Colony,int,int)" : 3 , "clearGotoOrders(Unit)" : 14 , "clearOrders(Unit)" : 7 , "clearSpeciality(Unit)" : 1 , "confirmHostileAction(Unit,Tile)" : 2 , "confirmPreCombat(Unit,Tile)" : 2 , "declareIndependence()" : 1 , "disbandActiveUnit()" : 1 , "displayModelMessages(boolean)" : 2 , "displayModelMessages(boolean,boolean)" : 3 , "doEndTurn()" : 1 , "doExecuteGotoOrders()" : 4 , "emigrate(Player,int)" : 3 , "endTurn()" : 3 , "equipUnit(Unit,EquipmentType,int)" : 7 , "executeGotoOrders()" : 1 , "getClientStatistics()" : 1 , "getHighScores()" : 1 , "getLastSaveGameFile()" : 2 , "getLoadGoodsMessage(Unit,GoodsType,int,int,int,int)" : 4 , "getNationAt(Tile,Direction)" : 6 , "getNationSummary(Player)" : 4 , "getNewTradeRoute(Player)" : 1 , "getREFUnits()" : 2 , "getSaveGameString(Turn)" : 2 , "getServerStatistics()" : 1 , "getSettlementAt(Tile,Direction)" : 6 , "getSpecification()" : 5 , "getTurnForMessageIgnored(String)" : 1 , "getUnloadGoodsMessage(Unit,GoodsType,int,int,int,int)" : 1 , "ignoreMessage(ModelMessage,boolean)" : 1 , "leaveShip(Unit)" : 4 , "loadCargo(Goods,Unit)" : 3 , "loadGame()" : 1 , "loadGoods(Goods,Unit)" : 3 , "loadUnitAtStop(Unit,List<ModelMessage>)" : 1 , "move(Unit,Direction)" : 3 , "moveActiveUnit(Direction)" : 2 , "moveAttack(Unit,Direction)" : 2 , "moveDirection(Unit,Direction,boolean)" : 4 , "moveDisembark(Unit,Direction)" : 1 , "moveEmbark(Unit,Direction)" : 1 , "moveExplore(Unit,Direction)" : 1 , "moveHighSeas(Unit,Direction)" : 1 , "moveLearnSkill(Unit,Direction)" : 1 , "moveMove(Unit,Direction)" : 3 , "movePath(Unit,PathNode)" : 2 , "moveScoutColony(Unit,Direction)" : 1 , "moveScoutIndianSettlement(Unit,Direction)" : 1 , "moveSpy(Unit,Direction)" : 1 , "moveTo(Unit,Location)" : 6 , "moveToDestination(Unit)" : 7 , "moveToEurope(Unit)" : 1 , "moveTrade(Unit,Direction)" : 1 , "moveTradeColony(Unit,Direction)" : 2 , "moveTradeIndianSettlement(Unit,Direction)" : 1 , "moveTradeRoute(Unit)" : 1 , "moveTribute(Unit,Direction)" : 2 , "moveUseMissionary(Unit,Direction)" : 1 , "nextActiveUnit()" : 26 , "nextActiveUnit(Tile)" : 6 , "nextModelMessage()" : 15 , "payArrears(Goods)" : 3 , "payArrears(GoodsType)" : 4 , "payForBuilding(Colony)" : 1 , "putOutsideColony(Unit)" : 2 , "recruitUnitInEurope(int)" : 1 , "rename(Nameable)" : 2 , "requireOurTurn()" : 35 , "saveGame()" : 2 , "saveGame(File)" : 4 , "selectDestination(Unit)" : 1 , "sellGoods(Goods)" : 3 , "sendChat(String)" : 1 , "setBuildQueue(Colony,List<BuildableType>)" : 1 , "setCurrentPlayer(Player)" : 2 , "setDestination(Unit,Location)" : 5 , "setGameConnected()" : 1 , "setGoodsLevels(Colony,GoodsType)" : 1 , "setInDebugMode(boolean)" : 1 , "setTradeRoutes(List<TradeRoute>)" : 2 , "shouldAllowMessage(ModelMessage)" : 1 , "showColonyWarnings(Tile,Unit)" : 1 , "skipActiveUnit()" : 1 , "startIgnoringMessage(String,int)" : 2 , "stopIgnoringMessage(String)" : 2 , "trainUnitInEurope(UnitType)" : 1 , "unload(Unit)" : 1 , "unloadCargo(Goods,boolean)" : 8 , "unloadGoods(Goods,Unit,Colony)" : 2 , "unloadUnitAtStop(Unit,List<ModelMessage>)" : 1 , "updateTradeRoute(TradeRoute)" : 1 , "waitActiveUnit()" : 1 , "work(Unit,WorkLocation)" : 4}},{ "className" : "net::sf::freecol::client::gui::panel::ProductionLabel" , "selectors" : { "ProductionLabel(AbstractGoods,AbstractGoods,Canvas)" : 3 , "ProductionLabel(AbstractGoods,Canvas)" : 1 , "ProductionLabel(AbstractGoods,int,Canvas)" : 3 , "ProductionLabel(GoodsType,int,Canvas)" : 4 , "getPreferredWidth()" : 1 , "getStringImage()" : 4 , "paintComponent(Graphics)" : 1 , "setGoodsIcon(ImageIcon)" : 1 , "setMaxGoodsIcons(int)" : 1 , "setMaximumProduction(int)" : 1 , "setStockNumber(int)" : 1 , "updateToolTipText()" : 3}},{ "className" : "net::sf::freecol::common::resources::AudioResource" , "selectors" : { "AudioResource(URI)" : 1 , "getAudio()" : 1}},{ "className" : "net::sf::freecol::client::gui::panel::AdvantageCellRenderer" , "selectors" : { "AdvantageCellRenderer(Advantages)" : 1}},{ "className" : "javax::swing::border::CompoundBorder" , "selectors" : { "CompoundBorder(Border,Border)" : 56}},{ "className" : "net::sf::freecol::server::model::ServerColonyTile" , "selectors" : { "ServerColonyTile(Game,Colony,Tile)" : 2}},{ "className" : "net::sf::freecol::common::model::Nation" , "selectors" : { "getPreferredLatitude()" : 1 , "getRefNation()" : 5 , "getRulerNameKey()" : 7 , "getType()" : 37 , "getXMLElementTagName()" : 1 , "isSelectable()" : 1 , "startsOnEastCoast()" : 1}},{ "className" : "net::sf::freecol::client::gui::panel::ReportReligiousPanel" , "selectors" : { "ReportReligiousPanel(Canvas)" : 1 , "ReportReligiousPanel(Canvas)::MigLayout" : 1}},{ "className" : "net::sf::freecol::common::networking::DOMMessage" , "selectors" : { "DOMMessage(InputSource)" : 2 , "DOMMessage(InputStream)" : 2 , "clientError(String)" : 296 , "createError(String,String)" : 9 , "createError(XMLStreamWriter,String,String)" : 6 , "createNewDocument()" : 4 , "createNewRootElement(String)" : 104 , "getChildElement(Element,String)" : 7 , "getDocument()" : 3 , "getFreeColProtocolVersion()" : 1 , "getType()" : 2 , "toXMLElement()" : 4}},{ "className" : "net::sf::freecol::common::model::Event" , "selectors" : { "Event(String,Specification)" : 2 , "getLimit(String)" : 9 , "getLimits()" : 4 , "getValue()" : 3 , "getXMLElementTagName()" : 2 , "setValue(String)" : 1 , "toXMLImpl(XMLStreamWriter)" : 1}},{ "className" : "net::sf::freecol::client::gui::panel::FreeColDialog" , "selectors" : { "FreeColDialog(Canvas)" : 4 , "FreeColDialog<Boolean>(Canvas)" : 11 , "FreeColDialog<DiplomaticTrade>(Canvas)" : 1 , "FreeColDialog<FoundingFather>(Canvas)" : 1 , "FreeColDialog<IndianSettlement>(Canvas)" : 1 , "FreeColDialog<Integer>(Canvas)" : 5 , "FreeColDialog<List<Goods>>(Canvas)" : 2 , "FreeColDialog<List<String>>(Canvas)" : 1 , "FreeColDialog<Location>(Canvas)" : 1 , "FreeColDialog<OptionGroup>(Canvas)" : 1 , "FreeColDialog<T>(Canvas)" : 2 , "FreeColDialog<TradeRoute>(Canvas)" : 1 , "actionPerformed(ActionEvent)" : 6 , "createChoiceDialog(String,String,List<ChoiceItem<T>>)" : 1 , "createChoiceDialog(String,String,List<ChoiceItem<T>>)::MigLayout" : 1 , "createConfirmDialog(String,String,String)" : 2 , "createConfirmDialog(String[],ImageIcon[],String,String)" : 3 , "createConfirmDialog(String[],ImageIcon[],String,String)::MigLayout" : 1 , "createInputDialog(String,String,String,String)" : 1 , "createInputDialog(String,String,String,String)::MigLayout" : 1 , "createLoadDialog(File,FileFilter[])" : 1 , "createLoadDialog(File,FileFilter[])::MigLayout" : 1 , "createMapSizeDialog(Canvas)" : 1 , "createMapSizeDialog(Canvas)::MigLayout" : 1 , "createSaveDialog(File,String,FileFilter[],String)" : 1 , "getFSGFileFilter()" : 2 , "getResponse()" : 3 , "initialize()" : 2 , "resetResponse()" : 1 , "setResponse(T)" : 63}},{ "className" : "java::io::FileFilter" , "selectors" : { "accept(File)" : 16}},{ "className" : "net::sf::freecol::common::option::RangeOption" , "selectors" : { "RangeOption(XMLStreamReader)" : 1 , "getValueRank()" : 3 , "getXMLElementTagName()" : 2 , "setValueRank(int)" : 2}},{ "className" : "net::sf::freecol::client::gui::action::MiniMapZoomOutAction" , "selectors" : { "MiniMapZoomOutAction(FreeColClient)" : 1 , "MiniMapZoomOutAction(FreeColClient,boolean)" : 1}},{ "className" : "net::sf::freecol::client::gui::panel::ConfirmDeclarationDialog" , "selectors" : { "ConfirmDeclarationDialog(Canvas)" : 1 , "ConfirmDeclarationDialog(Canvas)::MigLayout" : 1}},{ "className" : "net::sf::freecol::client::gui::panel::ReportLabourDetailPanel" , "selectors" : { "ReportLabourDetailPanel(Canvas)" : 1 , "setDetailPanel(JPanel)" : 1}},{ "className" : "net::sf::freecol::tools::InstallerTranslations" , "selectors" : { "readFile(File)" : 2}},{ "className" : "net::sf::freecol::common::networking::SetBuildQueueMessage" , "selectors" : { "SetBuildQueueMessage(Colony,List<BuildableType>)" : 2 , "SetBuildQueueMessage(Game,Element)" : 1 , "getXMLElementTagName()" : 2 , "handle(FreeColServer,Player,Connection)" : 1}},{ "className" : "net::sf::freecol::common::model::mission::Mission" , "selectors" : { "doMission()" : 1 , "isValid()" : 1 , "toXML(XMLStreamWriter)" : 1}},{ "className" : "net::sf::freecol::client::gui::action::MiniMapZoomInAction" , "selectors" : { "MiniMapZoomInAction(FreeColClient)" : 1 , "MiniMapZoomInAction(FreeColClient,boolean)" : 1}},{ "className" : "net::sf::freecol::client::gui::panel::MapEditorTransformPanel::SettlementTransform" , "selectors" : { "SettlementTransform()" : 1}},{ "className" : "net::sf::freecol::common::model::Map" , "selectors" : { "Map(Game,String)" : 2 , "Map(Game,Tile[][])" : 8 , "calculateLatitudePerRow()" : 4 , "findPath(Unit,Tile,Tile)" : 8 , "findPath(Unit,Tile,Tile,Unit)" : 7 , "findPath(Unit,Tile,Tile,Unit,CostDecider)" : 4 , "findPathToEurope(Tile)" : 1 , "findPathToEurope(Unit,Tile)" : 4 , "findPathToEurope(Unit,Tile,CostDecider)" : 2 , "getAdjacentIterator(Position)" : 4 , "getAllTiles()" : 15 , "getCircleIterator(Position,boolean,int)" : 6 , "getClaimableTiles(Player,Tile,int)" : 3 , "getDirection(Tile,Tile)" : 2 , "getFloodFillIterator(Position)" : 4 , "getHeight()" : 65 , "getLatitude(int)" : 10 , "getLatitudePerRow()" : 3 , "getLocationName()" : 1 , "getRandomLandPosition(Random)" : 7 , "getRegion(String)" : 5 , "getRegionByName(String)" : 2 , "getRegions()" : 3 , "getRow(int)" : 10 , "getTile(Position)" : 36 , "getTile(int,int)" : 294 , "getUnitList()" : 1 , "getWholeMapIterator()" : 3 , "getWidth()" : 62 , "getXMLElementTagName()" : 3 , "isLandWithinDistance(int,int,int)" : 2 , "isPolar(Tile)" : 4 , "isValid(Position)" : 10 , "isValid(Position,int,int)" : 6 , "isValid(int,int)" : 7 , "isValid(int,int,int,int)" : 3 , "search(Tile,GoalDecider,CostDecider,int)" : 1 , "search(Unit,Tile,GoalDecider,CostDecider,int)" : 10 , "search(Unit,Tile,GoalDecider,CostDecider,int,Unit)" : 9 , "search(Unit,Tile,GoalDecider,int,Unit)" : 1 , "setLayer(Layer)" : 2 , "setMaximumLatitude(int)" : 1 , "setMinimumLatitude(int)" : 2 , "setRegion(Region)" : 10 , "setTile(Tile,int,int)" : 1 , "writeAttributes(XMLStreamWriter,Player,boolean,boolean)" : 1 , "writeChildren(XMLStreamWriter,Player,boolean,boolean)" : 1}},{ "className" : "net::sf::freecol::server::control::ChangeSet::Change" , "selectors" : { "Change(See)" : 10 , "attachToElement(Element)" : 1 , "consequences(ServerPlayer)" : 1 , "convertsToElement()" : 1 , "isNotifiable(ServerPlayer)" : 1 , "isPerhapsNotifiable(ServerPlayer)" : 1 , "sortPriority()" : 2 , "toElement(ServerPlayer,Document)" : 1}},{ "className" : "net::sf::freecol::client::gui::action::ReportReligionAction" , "selectors" : { "ReportReligionAction(FreeColClient)" : 1}},{ "className" : "net::sf::freecol::common::io::FreeColModFile" , "selectors" : { "FreeColModFile(File)" : 3 , "getId()" : 5 , "getModDescriptor()" : 2 , "getModDescriptorInputStream()" : 1 , "getModInfo()" : 6 , "getSpecification()" : 11 , "getSpecificationInputStream()" : 6}},{ "className" : "net::sf::freecol::client::gui::action::AssignTradeRouteAction" , "selectors" : { "AssignTradeRouteAction(FreeColClient)" : 1}},{ "className" : "net::sf::freecol::common::model::Market" , "selectors" : { "Market(Game,Player)" : 3 , "addGoodsToMarket(GoodsType,int)" : 4 , "addTransactionListener(TransactionListener)" : 1 , "flushPriceChange(GoodsType)" : 1 , "getAmountInMarket(GoodsType)" : 3 , "getArrears(GoodsType)" : 4 , "getBidPrice(GoodsType,int)" : 14 , "getCostToBuy(GoodsType)" : 4 , "getIncomeAfterTaxes(GoodsType)" : 1 , "getIncomeBeforeTaxes(GoodsType)" : 1 , "getInitialPrice(GoodsType)" : 1 , "getMarketData(GoodsType)" : 18 , "getOwner()" : 1 , "getPaidForSale(GoodsType)" : 6 , "getSalePrice(Goods)" : 3 , "getSalePrice(GoodsType,int)" : 21 , "getSales(GoodsType)" : 1 , "getTransactionListener()" : 2 , "getXMLElementTagName()" : 2 , "hasBeenTraded(GoodsType)" : 4 , "hasPriceChanged(GoodsType)" : 1 , "makePriceChangeMessage(GoodsType)" : 1 , "modifyIncomeAfterTaxes(GoodsType,int)" : 3 , "modifyIncomeBeforeTaxes(GoodsType,int)" : 3 , "modifySales(GoodsType,int)" : 3 , "putMarketData(GoodsType,MarketData)" : 2 , "randomizeInitialPrice(Random)" : 1 , "removeTransactionListener(TransactionListener)" : 1 , "requireMarketData(GoodsType)" : 7 , "setArrears(GoodsType,int)" : 5 , "setInitialPrice(GoodsType,int)" : 1}},{ "className" : "net::sf::freecol::client::gui::ImageLibrary" , "selectors" : { "ImageLibrary()" : 1 , "ImageLibrary(float)" : 2 , "drawTiledImage(String,Graphics,JComponent,Insets)" : 11 , "getBeachCornerImage(int)" : 1 , "getBeachEdgeImage(int)" : 1 , "getBonusImage(ResourceType)" : 3 , "getBonusImage(ResourceType,double)" : 3 , "getBonusImageIcon(ResourceType)" : 1 , "getBorderImage(TileType,Direction,int,int)" : 3 , "getCoatOfArmsImage(Nation)" : 2 , "getCoatOfArmsImage(Nation,double)" : 5 , "getCoatOfArmsImageIcon(Nation)" : 2 , "getColor(Player)" : 12 , "getCompoundTerrainImage(TileType,double)" : 3 , "getCompoundTerrainImageHeight(TileType)" : 1 , "getForestImage(TileType)" : 2 , "getForestImage(TileType,double)" : 2 , "getFoundingFatherImage(FoundingFather)" : 3 , "getGoodsImage(GoodsType)" : 1 , "getGoodsImage(GoodsType,double)" : 5 , "getGoodsImageIcon(GoodsType)" : 12 , "getImage(FreeColGameObjectType,double)" : 2 , "getMiscImage(String)" : 7 , "getMiscImage(String,double)" : 3 , "getMiscImageIcon(String)" : 1 , "getMissionChip(Ownable,boolean,double)" : 1 , "getMonarchImageIcon(Nation)" : 2 , "getOverlayImage(TileType,int,int)" : 2 , "getOverlayImage(TileType,int,int,double)" : 2 , "getPathImage(Unit)" : 2 , "getPathNextTurnImage(Unit)" : 2 , "getPathType(Unit)" : 2 , "getRiverImage(int)" : 1 , "getRiverImage(int,double)" : 4 , "getRiverMouthImage(Direction,int,int,int)" : 1 , "getScaledGoodsImageIcon(GoodsType,double)" : 11 , "getScaledImageLibrary(float)" : 1 , "getScalingFactor()" : 27 , "getSettlementImage(Settlement)" : 5 , "getSettlementImage(Settlement,double)" : 2 , "getSettlementImage(SettlementType)" : 1 , "getSettlementImage(SettlementType,double)" : 3 , "getTerrainImage(TileType,int,int)" : 7 , "getTerrainImage(TileType,int,int,double)" : 2 , "getTerrainImageHeight(TileType)" : 8 , "getTerrainImageWidth(TileType)" : 9 , "getUnitImageIcon(Unit)" : 5 , "getUnitImageIcon(Unit,boolean)" : 3 , "getUnitImageIcon(Unit,double)" : 5 , "getUnitImageIcon(UnitType)" : 1 , "getUnitImageIcon(UnitType,Role)" : 2 , "getUnitImageIcon(UnitType,Role,boolean,boolean,double)" : 13 , "getUnitImageIcon(UnitType,Role,boolean,double)" : 8 , "getUnitImageIcon(UnitType,Role,double)" : 2 , "getUnitImageIcon(UnitType,double)" : 5}},{ "className" : "net::sf::freecol::client::gui::i18n::Number" , "selectors" : { "getCategory(double)" : 1 , "getKey(double)" : 1}},{ "className" : "net::sf::freecol::client::gui::WindowedFrame" , "selectors" : { "WindowedFrame()" : 1 , "setCanvas(Canvas)" : 1}},{ "className" : "net::sf::freecol::common::model::TransactionListener" , "selectors" : { "logPurchase(GoodsType,int,int)" : 1 , "logSale(GoodsType,int,int,int)" : 1}},{ "className" : "javax::swing::DesktopManager" , "selectors" : { "beginDraggingFrame(JComponent)" : 1 , "dragFrame(JComponent,int,int)" : 1 , "endDraggingFrame(JComponent)" : 1}},{ "className" : "net::sf::freecol::common::io::sza::ImageAnimationEvent" , "selectors" : { "getDurationInMs()" : 1 , "getImage()" : 1}},{ "className" : "net::sf::freecol::server::control::ChangeSet::StanceChange" , "selectors" : { "StanceChange(See,Player,Stance,Player)" : 1}},{ "className" : "net::sf::freecol::common::networking::AbandonColonyMessage" , "selectors" : { "AbandonColonyMessage(Colony)" : 1 , "AbandonColonyMessage(Game,Element)" : 1 , "getXMLElementTagName()" : 2 , "handle(FreeColServer,Player,Connection)" : 1}},{ "className" : "net::sf::freecol::common::model::FeatureContainer" , "selectors" : { "FeatureContainer()" : 12 , "add(FeatureContainer)" : 12 , "addAbility(Ability)" : 15 , "addModifier(Modifier)" : 15 , "applyModifier(float,String)" : 13 , "applyModifier(float,String,FreeColGameObjectType)" : 1 , "applyModifier(float,String,FreeColGameObjectType,Turn)" : 15 , "applyModifierSet(float,Turn,Set<Modifier>)" : 31 , "applyModifiers(float,Turn,List<Modifier>)" : 6 , "containsModifierKey(String)" : 2 , "getAbilities()" : 5 , "getAbilitySet(String)" : 4 , "getAbilitySet(String,FreeColGameObjectType,Turn)" : 8 , "getModifierSet(String)" : 19 , "getModifierSet(String,FreeColGameObjectType)" : 8 , "getModifierSet(String,FreeColGameObjectType,Turn)" : 15 , "getModifiers()" : 9 , "hasAbility(Set<Ability>)" : 2 , "hasAbility(String)" : 6 , "hasAbility(String,FreeColGameObjectType)" : 7 , "hasAbility(String,FreeColGameObjectType,Turn)" : 3 , "remove(FeatureContainer)" : 4 , "removeAbilities(String)" : 1 , "removeAbility(Ability)" : 2 , "removeModifier(Modifier)" : 1 , "removeModifiers(String)" : 3 , "replaceSource(FreeColGameObjectType,FreeColGameObjectType)" : 3}},{ "className" : "net::sf::freecol::common::option::OptionGroup" , "selectors" : { "OptionGroup(String)" : 4 , "OptionGroup(XMLStreamReader)" : 6 , "add(Option)" : 84 , "addNewOption(XMLStreamReader)" : 1 , "addOptionGroup(OptionGroup)" : 2 , "getBoolean(String)" : 23 , "getInteger(String)" : 52 , "getName()" : 4 , "getOption(String)" : 33 , "getOptions()" : 7 , "getXMLElementTagName()" : 5 , "iterator()" : 6 , "setBoolean(String,boolean)" : 1 , "setInteger(String,int)" : 1 , "setValue(OptionGroup)" : 2 , "toString()" : 1}},{ "className" : "net::sf::freecol::common::networking::SetDestinationMessage" , "selectors" : { "SetDestinationMessage(Game,Element)" : 1 , "SetDestinationMessage(Unit,Location)" : 1 , "getXMLElementTagName()" : 2 , "handle(FreeColServer,Connection)" : 1}},{ "className" : "net::sf::freecol::common::model::Specification::OptionReader" , "selectors" : { "OptionReader()" : 1}},{ "className" : "net::sf::freecol::metaserver::NetworkHandler" , "selectors" : { "NetworkHandler(MetaServer,MetaRegister)" : 1 , "disconnect(Connection,Element)" : 1 , "getServerList(Connection,Element)" : 1 , "register(Connection,Element)" : 1 , "remove(Connection,Element)" : 1 , "update(Connection,Element)" : 1}},{ "className" : "net::sf::freecol::client::gui::panel::ReportColonyPanel" , "selectors" : { "<Initializer>()::anonymous(Comparator)" : 2 , "ReportColonyPanel(Canvas)" : 1 , "addSuggestion(HashMap<UnitType,Suggestion>,UnitType,UnitType,GoodsType,int)" : 2 , "addUnits(HashMap<UnitType,Suggestion>,List<UnitType>,Colony,int)" : 2 , "bestProduction(WorkLocation,UnitType)" : 2 , "classicColonyPanel(List<Colony>)" : 1 , "classicColonyPanel(List<Colony>)::MigLayout" : 1 , "colourButton(String,String,ImageIcon,Color,StringTemplate)" : 16 , "conciseHeaders(List<GoodsType>,boolean,Market)" : 2 , "initializeCompactColonyPanel()" : 1 , "initializeCompactColonyPanel()::MigLayout" : 1 , "newLabel(String,ImageIcon,Color,StringTemplate)" : 10 , "stpl(String)" : 32 , "updateColony(Colony)" : 1 , "updateCompactColonyPanel()" : 2 , "wantGoods(WorkLocation,GoodsType,Unit,UnitType)" : 2}},{ "className" : "net::sf::freecol::metaserver::MetaServer" , "selectors" : { "MetaServer(int)" : 1 , "getNetworkHandler()" : 1 , "removeConnection(Connection)" : 1}},{ "className" : "net::sf::freecol::client::gui::CanvasMouseMotionListener::ScrollThread" , "selectors" : { "ScrollThread(Map,GUI)" : 1 , "setDirection(Direction)" : 2 , "stopScrolling()" : 3}},{ "className" : "net::sf::freecol::client::gui::panel::BuildQueuePanel" , "selectors" : { "BuildQueuePanel(Colony,Canvas)" : 4 , "BuildQueuePanel(Colony,Canvas)::MigLayout" : 1 , "getBuildableTypes(JList)" : 2 , "getBuildableTypes(Object[])" : 1 , "getCellRenderer()" : 2 , "getMaximumIndex(BuildableType)" : 2 , "getMinimumIndex(BuildableType)" : 3 , "hasBuildingType(BuildingType)" : 2 , "updateAllLists()" : 6 , "updateBuildingList()" : 1 , "updateBuyBuildingButton()" : 1 , "updateDetailView()" : 1 , "updateUnitList()" : 1}},{ "className" : "net::sf::freecol::server::control::AllTests" , "selectors" : { "suite()::TestSuite" : 1 , "suite(???)" : 1}},{ "className" : "net::sf::freecol::common::networking::ChangeStateMessage" , "selectors" : { "ChangeStateMessage(Game,Element)" : 1 , "ChangeStateMessage(Unit,UnitState)" : 2 , "getXMLElementTagName()" : 2 , "handle(FreeColServer,Player,Connection)" : 1}},{ "className" : "net::sf::freecol::server::model::ServerEurope" , "selectors" : { "ServerEurope(Game,Player)" : 1 , "increasePrice(UnitType,int)" : 1 , "initializeMigration(Random)" : 1}},{ "className" : "net::sf::freecol::client::gui::panel::ReportColonyPanel::Suggestion" , "selectors" : { "Suggestion(UnitType,UnitType,GoodsType,int)" : 1}},{ "className" : "net::sf::freecol::server::generator::River" , "selectors" : { "River(Map,Map<Position,River>,ServerRegion,Random)" : 1 , "contains(Position)" : 2 , "createDelta(Position,Direction,RiverSection)" : 1 , "delta(Position,Direction,RiverSection,Direction)" : 2 , "drawToMap(List<RiverSection>)" : 5 , "flow(Position)" : 2 , "flowFromSource(Position)" : 1 , "getLastSection()" : 1 , "getLength()" : 3 , "getRegion()" : 1 , "getSections()" : 1 , "grow(RiverSection,Position)" : 2 , "isNextToSelf(Position)" : 1 , "isNextToWater(Position)" : 1}},{ "className" : "net::sf::freecol::client::gui::plaf::FreeColComboBoxRenderer" , "selectors" : { "FreeColComboBoxRenderer()" : 2 , "setLabelValues(JLabel,Object)" : 1}},{ "className" : "net::sf::freecol::client::gui::panel::ColonyPanel::PopulationPanel" , "selectors" : { "PopulationPanel()" : 1 , "PopulationPanel()::MigLayout" : 1 , "update()" : 3}},{ "className" : "net::sf::freecol::client::gui::action::ReportRequirementsAction" , "selectors" : { "ReportRequirementsAction(FreeColClient)" : 1}},{ "className" : "net::sf::freecol::server::control::InputHandler::DisconnectHandler" , "selectors" : { "DisconnectHandler()" : 1 , "logDisconnect(Connection,ServerPlayer)" : 1}},{ "className" : "net::sf::freecol::server::generator::TerrainGenerator" , "selectors" : { "TerrainGenerator(OptionGroup,Random)" : 1 , "createHighSeas(Map)" : 1 , "createHighSeas(Map,int,int)" : 2 , "createLandRegions(Map)" : 2 , "createMap(Game,Game,boolean[][])" : 3 , "createMountains(Map)" : 1 , "createOceanRegions(Map)" : 2 , "createResource(Tile)" : 3 , "createRivers(Map)" : 1 , "createTile(Game,int,int,boolean[][],int)" : 2 , "determineHighSeas(Map,int,int)" : 1 , "encodeStyle(Tile)" : 3 , "fillOcean(Map,Position,Region,Rectangle)" : 12 , "findLakes(Map)" : 1 , "floodFill(boolean[][],Position)" : 2 , "floodFill(boolean[][],Position,int)" : 2 , "getLand()" : 3 , "getMapGeneratorOptions()" : 15 , "getRandomLandTileType(Game,int)" : 1 , "perhapsAddBonus(Tile,boolean)" : 1}},{ "className" : "net::sf::freecol::client::gui::panel::ColopediaTreeItem" , "selectors" : { "ColopediaTreeItem(FreeColGameObjectType,String,ImageIcon)" : 3 , "ColopediaTreeItem(PanelType)" : 5 , "ColopediaTreeItem(PanelType,String)" : 2 , "getFreeColGameObjectType()" : 2 , "getIcon()" : 1 , "getPanelType()" : 2}},{ "className" : "net::sf::freecol::client::gui::FAFile" , "selectors" : { "FAFile(InputStream)" : 1 , "getDimension(String)" : 2 , "getFAName(String)" : 2 , "getLetter(char)" : 4 , "getPoints(String)" : 1 , "load(InputStream)" : 1}},{ "className" : "net::sf::freecol::client::gui::panel::ColorCellEditor::ColorChooserPanel" , "selectors" : { "ColorChooserPanel(ActionListener)" : 1 , "ColorChooserPanel(ActionListener)::MigLayout" : 1}},{ "className" : "net::sf::freecol::client::gui::option::FileOptionUI" , "selectors" : { "FileOptionUI(FileOption,boolean)" : 1 , "FileOptionUI(FileOption,boolean)::anonymous(DocumentListener)" : 3 , "setValue(File)" : 2}},{ "className" : "net::sf::freecol::server::AllTests" , "selectors" : { "suite()::TestSuite" : 1 , "suite(???)" : 1}},{ "className" : "net::sf::freecol::common::model::IndianSettlement" , "selectors" : { "IndianSettlement(Game,Player,String,Tile)" : 1 , "IndianSettlement(Game,String)" : 4 , "add(Locatable)" : 2 , "addOwnedUnit(Unit)" : 4 , "changeAlarm(Player,int)" : 2 , "changeMissionary(Unit)" : 3 , "checkForNewMissionaryConvert()" : 1 , "getAlarm(Player)" : 31 , "getAlarmLevelMessageId(Player)" : 3 , "getGoodsCapacity()" : 1 , "getLastTribute()" : 1 , "getLearnableSkill()" : 16 , "getMaximumProduction(GoodsType)" : 1 , "getMilitaryGoodsPriceToBuy(GoodsType,int)" : 1 , "getMissionary()" : 29 , "getMissionary(Player)" : 9 , "getNameFor(Player)" : 6 , "getNormalGoodsPriceToBuy(GoodsType,int)" : 2 , "getOwnedUnits()" : 1 , "getOwnedUnitsIterator()" : 11 , "getPriceToBuy(Goods)" : 2 , "getPriceToBuy(GoodsType,int)" : 30 , "getPriceToSell(Goods)" : 2 , "getPriceToSell(GoodsType,int)" : 3 , "getProductionOf(GoodsType)" : 6 , "getSellGoods(int,Unit)" : 1 , "getShortAlarmLevelMessageId(Player)" : 3 , "getWantedGoods()" : 6 , "getWantedGoodsAmount(GoodsType)" : 5 , "getXMLElementTagName()" : 4 , "goodsToMake()" : 1 , "hasContactedSettlement(Player)" : 11 , "hasSpokenToChief()" : 1 , "hasSpokenToChief(Player)" : 6 , "makeContactSettlement(Player)" : 8 , "modifyAlarm(Player,int)" : 6 , "removeAlarm(Player)" : 1 , "removeOwnedUnit(Unit)" : 1 , "setAlarm(Player,Tension)" : 3 , "setConvertProgress(int)" : 1 , "setLastTribute(int)" : 1 , "setLearnableSkill(UnitType)" : 3 , "setMissionary(Unit)" : 4 , "setSpokenToChief(Player)" : 1 , "setWantedGoods(int,GoodsType)" : 15 , "toString()" : 1 , "tradeGoodsWithSetlement(IndianSettlement)" : 2 , "updateWantedGoods()" : 5 , "willSell(GoodsType)" : 1 , "writeChildren(XMLStreamWriter,Player,boolean,boolean)" : 1}},{ "className" : "net::sf::freecol::client::gui::panel::InfoPanel::UnitInfoPanel" , "selectors" : { "UnitInfoPanel()" : 1 , "UnitInfoPanel()::MigLayout" : 1 , "getUnit()" : 2 , "update(Unit)" : 1}},{ "className" : "net::sf::freecol::common::option::Option" , "selectors" : { "addPropertyChangeListener(PropertyChangeListener)" : 1 , "getId()" : 9 , "readFromXML(XMLStreamReader)" : 2 , "toXML(XMLStreamWriter)" : 1}},{ "className" : "net::sf::freecol::client::gui::action::FreeColAction" , "selectors" : { "FreeColAction(FreeColClient,String)" : 40 , "addImageIcons(String)" : 11 , "getAccelerator()" : 5 , "getFreeColClient()" : 108 , "getId()" : 4 , "getKeyStrokeText(KeyStroke)" : 1 , "getMenuKeyListener()" : 1 , "getMnemonic()" : 1 , "getName()" : 2 , "getShortDescription()" : 1 , "getXMLElementTagName()" : 1 , "hasOrderButtons()" : 2 , "readFromXML(XMLStreamReader)" : 1 , "readFromXMLImpl(XMLStreamReader)" : 1 , "setAccelerator(KeyStroke)" : 5 , "setMnemonic(int)" : 1 , "shouldBeEnabled()" : 8 , "toXML(XMLStreamWriter)" : 1 , "toXMLImpl(XMLStreamWriter)" : 1 , "update()" : 17}},{ "className" : "net::sf::freecol::server::ai::ColonyPlanTest" , "selectors" : { "buildMap(boolean)" : 4}},{ "className" : "net::sf::freecol::client::gui::panel::ColopediaTreeCellRenderer" , "selectors" : { "ColopediaTreeCellRenderer()" : 1}},{ "className" : "net::sf::freecol::common::model::Tile" , "selectors" : { "Tile(Game,String)" : 5 , "Tile(Game,TileType,int,int)" : 19 , "add(Locatable)" : 10 , "addLostCityRumour(LostCityRumour)" : 2 , "addResource(Resource)" : 13 , "addTileItem(TileItem)" : 3 , "betterDefender(Unit,float,Unit,float)" : 2 , "canMoveToEurope()" : 10 , "changeOwnership(Player,Settlement)" : 9 , "expendResource(GoodsType,UnitType,Settlement)" : 1 , "findTileImprovementType(TileImprovementType)" : 5 , "fixup09x()" : 1 , "getAdjacentTile(Direction)" : 7 , "getColony()" : 61 , "getCompletedTileImprovements()" : 2 , "getDefendingUnit(Unit)" : 24 , "getDiscoverableRegion()" : 2 , "getDistanceTo(Tile)" : 8 , "getFirstUnit()" : 39 , "getIndianSettlement()" : 16 , "getLabel()" : 2 , "getLocationName()" : 2 , "getLocationNameFor(Player)" : 1 , "getLostCityRumour()" : 5 , "getMap()" : 11 , "getMaximumPotential(GoodsType,UnitType)" : 11 , "getMovableUnit()" : 1 , "getMoveToEurope()" : 6 , "getNameKey()" : 5 , "getNearestSettlement(Player,int)" : 1 , "getNeighbourOrNull(Direction)" : 66 , "getOccupyingUnit()" : 3 , "getOwner()" : 71 , "getOwningSettlement()" : 44 , "getPlayerExploredTile(Player)" : 8 , "getPosition()" : 45 , "getProductionBonus(GoodsType,UnitType)" : 12 , "getRegion()" : 15 , "getRiver()" : 8 , "getRoad()" : 3 , "getSafeTile(Player,Random)" : 3 , "getSettlement()" : 100 , "getSortedPotential()" : 2 , "getSortedPotential(UnitType,Player)" : 2 , "getStyle()" : 3 , "getSurroundingTiles(int)" : 59 , "getSurroundingTiles(int,int)" : 6 , "getTile()" : 2 , "getTileImprovements()" : 2 , "getTileItemContainer()" : 53 , "getTileTypePotential(TileType,GoodsType,TileItemContainer,UnitType)" : 2 , "getTotalUnitCount()" : 1 , "getType()" : 133 , "getWorkAmount(TileImprovementType)" : 4 , "getX()" : 93 , "getXMLElementTagName()" : 4 , "getY()" : 110 , "hasImprovement(TileImprovementType)" : 9 , "hasLostCityRumour()" : 9 , "hasResource()" : 9 , "hasRiver()" : 16 , "hasRoad()" : 16 , "isAdjacent(Tile)" : 6 , "isAdjacentToMapEdge()" : 1 , "isCoast()" : 1 , "isConnected()" : 8 , "isExplored()" : 20 , "isExploredBy(Player)" : 4 , "isForested()" : 1 , "isInUse()" : 4 , "isLand()" : 112 , "isOccupied()" : 2 , "isViewShared()" : 5 , "potential(GoodsType,UnitType)" : 42 , "remove(Locatable)" : 1 , "removeLostCityRumour()" : 5 , "setConnected(boolean)" : 4 , "setExploredBy(Player,boolean)" : 172 , "setMoveToEurope(Boolean)" : 2 , "setOwner(Player)" : 11 , "setOwningSettlement(Settlement)" : 8 , "setRegion(Region)" : 4 , "setSettlement(Settlement)" : 5 , "setStyle(int)" : 1 , "setTileItemContainer(TileItemContainer)" : 15 , "setType(TileType)" : 35 , "toString()" : 6 , "toXMLMinimal(XMLStreamWriter)" : 1 , "updatePlayerExploredTile(Player,boolean)" : 15 , "updatePlayerExploredTiles()" : 8 , "updatePlayerExploredTiles(Player)" : 3}},{ "className" : "java::awt::FontMetrics" , "selectors" : { "charWidth(char)" : 67 , "getAscent()" : 102 , "getDescent()" : 52 , "getFont()" : 5 , "getHeight()" : 245 , "getLeading()" : 33 , "getLineMetrics(String,Graphics)" : 2 , "getMaxAdvance()" : 2 , "getMaxAscent()" : 28 , "getMaxCharBounds(Graphics)" : 1 , "getMaxDescent()" : 47 , "getStringBounds(String,Graphics)" : 20 , "getWidths()" : 3 , "stringWidth(String)" : 325}},{ "className" : "net::sf::freecol::common::model::StanceTradeItem" , "selectors" : { "StanceTradeItem(Game,Player,Player,Stance)" : 3 , "StanceTradeItem(Game,XMLStreamReader)" : 1 , "getStance()" : 4 , "getXMLElementTagName()" : 2 , "readFromXMLImpl(XMLStreamReader)" : 1}},{ "className" : "net::sf::freecol::server::ai::AIPlayer" , "selectors" : { "AIPlayer(AIMain,String)" : 6 , "abortInvalidAndOneTimeMissions()" : 2 , "abortInvalidMissions()" : 4 , "acceptDiplomaticTrade(DiplomaticTrade)" : 1 , "buyProposition(Unit,Settlement,Goods,int)" : 2 , "clearAIUnits()" : 5 , "createAIUnits()" : 2 , "determineStance(Player)" : 1 , "determineStances()" : 2 , "doMissions()" : 4 , "getAIColony(Colony)" : 2 , "getAIColonyIterator()" : 7 , "getAIUnit(Unit)" : 28 , "getAIUnitIterator()" : 2 , "getAIUnits()" : 13 , "getConnection()" : 6 , "getId()" : 1 , "getPlayer()" : 81 , "getXMLElementTagName()" : 2 , "isTargetValidForSeekAndDestroy(Unit,Tile)" : 7 , "registerSellGoods(Goods)" : 1 , "sellProposition(Unit,Settlement,Goods,int)" : 2 , "setDebuggingConnection(Connection)" : 1 , "setPlayer(ServerPlayer)" : 3 , "startWorking()" : 3}},{ "className" : "net::sf::freecol::server::ai::mission::TransportMission::Destination" , "selectors" : { "Destination()" : 3 , "Destination(boolean,PathNode)" : 4 , "getPath()" : 8 , "isAtDestination()" : 4 , "moveToEurope()" : 6}},{ "className" : "net::sf::freecol::client::gui::action::ReportCargoAction" , "selectors" : { "ReportCargoAction(FreeColClient)" : 1}},{ "className" : "net::sf::freecol::client::gui::panel::ReportTurnPanel" , "selectors" : { "ReportTurnPanel(Canvas,ModelMessage[])" : 1 , "ReportTurnPanel(Canvas,ModelMessage[])::MigLayout" : 1 , "findReplacementData(ModelMessage,String)" : 1 , "getHeadline(Object)" : 1 , "insertLinkButton(StyledDocument,FreeColGameObject,String)" : 6 , "insertMessage(StyledDocument,ModelMessage,Player)" : 1 , "insertText(StyledDocument,String)" : 8 , "setEnabledByType(MessageType,boolean)" : 1}},{ "className" : "net::sf::freecol::common::model::BuildQueue" , "selectors" : { "BuildQueue(Colony,CompletionAction,int,T[])" : 2 , "add(T)" : 7 , "clear()" : 2 , "getCompletionAction()" : 1 , "getCurrentlyBuilding()" : 9 , "getProductionInfo(List<AbstractGoods>)" : 1 , "getValues()" : 4 , "isEmpty()" : 1 , "remove(int)" : 2 , "setCurrentlyBuilding(T)" : 1 , "setValues(List<T>)" : 1 , "size()" : 3}},{ "className" : "net::sf::freecol::common::model::Settlement" , "selectors" : { "Settlement(Game,Element)" : 2 , "Settlement(Game,Player,String,Tile)" : 2 , "Settlement(Game,String)" : 2 , "Settlement(Game,XMLStreamReader)" : 2 , "canBuildEquipment(EquipmentType)" : 10 , "changeOwner(Player)" : 3 , "disposeList()" : 2 , "getConsumptionOf(GoodsType)" : 4 , "getConsumptionOf(List<GoodsType>)" : 1 , "getDefendingUnit(Unit)" : 1 , "getFeatureContainer()" : 24 , "getFoodConsumption()" : 23 , "getImageKey()" : 1 , "getLineOfSight()" : 10 , "getModifierSet(String)" : 1 , "getName()" : 198 , "getNameFor(Player)" : 6 , "getOwnedTiles()" : 13 , "getOwner()" : 280 , "getPlunder(Unit,Random)" : 4 , "getPlunderRange(Unit)" : 1 , "getRadius()" : 11 , "getSoL()" : 1 , "getTile()" : 264 , "getType()" : 28 , "isCapital()" : 17 , "isConnected()" : 2 , "placeSettlement(boolean)" : 7 , "propagateAlarm(Player,int)" : 1 , "readAttributes(XMLStreamReader)" : 2 , "setCapital(boolean)" : 4 , "setName(String)" : 2 , "setOwner(Player)" : 5 , "setType(SettlementType)" : 3 , "writeAttributes(XMLStreamWriter)" : 2}},{ "className" : "net::sf::freecol::common::model::Game" , "selectors" : { "Game(Specification)" : 2 , "Game(XMLStreamReader,String)" : 1 , "addOldOptions(OptionGroup)" : 2 , "addPlayer(Player)" : 12 , "canAddNewPlayer()" : 3 , "checkIntegrity()" : 2 , "fixIntegrity(List<String>)" : 1 , "getCityOfCibola()" : 1 , "getCombatModel()" : 16 , "getCurrentPlayer()" : 33 , "getDifficultyLevel()" : 4 , "getFirstPlayer()" : 2 , "getFreeColGameObject(String)" : 113 , "getFreeColGameObjectIterator()" : 5 , "getFreeColGameObjectIterator()::anonymous(Iterator)" : 1 , "getFreeColGameObjectListener()" : 4 , "getFreeColGameObjectSafely(String)" : 39 , "getLiveEuropeanPlayers()" : 18 , "getMap()" : 134 , "getMapGeneratorOptions()" : 8 , "getMessageDisplay(ModelMessage)" : 4 , "getMessageSource(ModelMessage)" : 6 , "getNationOptions()" : 10 , "getNextPlayer()" : 2 , "getPlayer(String)" : 266 , "getPlayerAfter(Player)" : 1 , "getPlayerByName(String)" : 4 , "getPlayerIterator()" : 10 , "getPlayers()" : 45 , "getServerModelObjects()" : 1 , "getSettlement(String)" : 2 , "getSpanishSuccession()" : 1 , "getSpecification()" : 126 , "getStatistics(AIMain)" : 2 , "getTurn()" : 102 , "getUUID()" : 5 , "getUnknownEnemy()" : 4 , "getVacantNation()" : 2 , "getViewOwner()" : 5 , "getXMLElementTagName()" : 6 , "initializeCitiesOfCibola()" : 2 , "isAllPlayersReadyToLaunch()" : 2 , "playerNameInUse(String)" : 1 , "removeFreeColGameObject(String)" : 3 , "removePlayer(Player)" : 3 , "setCurrentPlayer(Player)" : 19 , "setFreeColGameObject(String,FreeColGameObject)" : 3 , "setFreeColGameObjectListener(FreeColGameObjectListener)" : 5 , "setMap(Map)" : 113 , "setNationOptions(NationOptions)" : 9 , "setSpanishSuccession(boolean)" : 2 , "setTurn(Turn)" : 7 , "setUnknownEnemy(Player)" : 3}},{ "className" : "net::sf::freecol::client::gui::panel::ColonyPanel::ColonyCargoPanel" , "selectors" : { "ColonyCargoPanel(Canvas)" : 1 , "ColonyCargoPanel(Canvas)::MigLayout" : 1}},{ "className" : "net::sf::freecol::client::gui::panel::StatisticsPanel" , "selectors" : { "StatisticsPanel(Canvas)" : 1 , "createStatsTable(String,Map<String,String>)" : 3 , "displayStatsMessage(String,Map<String,String>)" : 2}},{ "className" : "net::sf::freecol::common::model::PlayerExploredTile" , "selectors" : { "PlayerExploredTile(Game,Player,Tile)" : 1 , "PlayerExploredTile(Game,XMLStreamReader)" : 1 , "getAllTileItems()" : 1 , "getColonyStockadeKey()" : 2 , "getColonyUnitCount()" : 4 , "getMissionary()" : 2 , "getOwner()" : 5 , "getOwningSettlement()" : 6 , "getSkill()" : 1 , "getWantedGoods()" : 1 , "getXMLElementTagName()" : 2 , "setColonyStockadeKey(String)" : 1 , "setOwner(Player)" : 3 , "setOwningSettlement(Settlement)" : 2 , "update(boolean)" : 2}},{ "className" : "net::sf::freecol::common::model::Colony" , "selectors" : { "Colony(Game,Player,String,Tile)" : 1 , "Colony(Game,String)" : 4 , "addBuilding(Building)" : 25 , "addGoods(AbstractGoods)" : 2 , "addGoods(GoodsType,int)" : 47 , "addInsufficientProductionMessage(List<StringTemplate>,ProductionInfo)" : 2 , "addLiberty(int)" : 2 , "addUnit(Unit,WorkLocation)" : 2 , "calculateMembership(int)" : 2 , "canBePillaged(Unit)" : 11 , "canBePlundered()" : 4 , "canBombardEnemyShip()" : 1 , "canBreed(GoodsType)" : 1 , "canBuild(BuildableType)" : 27 , "canPayToFinishBuilding()" : 1 , "canPayToFinishBuilding(BuildableType)" : 2 , "canReducePopulation()" : 3 , "canTrain(Unit)" : 5 , "canTrain(UnitType)" : 5 , "changeOwner(Player)" : 4 , "checkForGovMgtChangeMessage()" : 2 , "dispose()" : 1 , "disposeList()" : 1 , "findStudent(Unit)" : 4 , "findTeacher(Unit)" : 1 , "getAdjustedNetProductionOf(GoodsType)" : 6 , "getBetterExpert(Unit)" : 1 , "getBuildQueue()" : 10 , "getBuilding(BuildingType)" : 94 , "getBuildingFor(Unit)" : 6 , "getBuildingForConsuming(GoodsType)" : 1 , "getBuildingForProducing(GoodsType)" : 25 , "getBuildingWithAbility(String)" : 1 , "getBuildings()" : 17 , "getBuildingsForConsuming(GoodsType)" : 2 , "getBuildingsForProducing(GoodsType)" : 4 , "getBurnableBuildingList()" : 3 , "getColonyTile(Tile)" : 18 , "getColonyTileTodo(List<Tile>,List<Tile>,List<Tile>,List<Tile>)" : 2 , "getColonyTiles()" : 15 , "getConsumers()" : 3 , "getConsumptionOf(GoodsType)" : 4 , "getCurrentlyBuilding()" : 22 , "getDefendingUnit(Unit)" : 4 , "getEstablished()" : 4 , "getExportAmount(GoodsType)" : 3 , "getExportData(GoodsType)" : 10 , "getFoodProduction()" : 19 , "getGoodsForBuilding(BuildableType)" : 2 , "getImmigration()" : 3 , "getImportAmount(GoodsType)" : 1 , "getLiberty()" : 4 , "getLootableGoodsList()" : 2 , "getMembers()" : 5 , "getModifierSet(String)" : 10 , "getNameFor(Player)" : 2 , "getNetProductionOf(GoodsType)" : 41 , "getNoBuildReason(BuildableType)" : 4 , "getOccupationFor(Unit)" : 2 , "getPriceForBuilding()" : 2 , "getPriceForBuilding(BuildableType)" : 2 , "getProductionBonus()" : 15 , "getProductionInfo(Object)" : 7 , "getProductionMap()" : 1 , "getProductionModifier(GoodsType)" : 4 , "getProductionOf(GoodsType)" : 19 , "getShipList()" : 4 , "getSoL()" : 12 , "getStockade()" : 6 , "getStockadeKey()" : 2 , "getTeachers()" : 2 , "getTory()" : 3 , "getTrueStockadeKey()" : 2 , "getTurnsToComplete(BuildableType)" : 2 , "getTurnsToComplete(BuildableType,AbstractGoods)" : 2 , "getUnitCount()" : 64 , "getUnitIterator()" : 31 , "getUnitList()" : 62 , "getVacantColonyTileFor(Unit,boolean,GoodsType[])" : 14 , "getVacantWorkLocationFor(Unit)" : 3 , "getWarehouse()" : 3 , "getWarnings(GoodsType,int,int)" : 1 , "getWorkLocationFor(Unit)" : 2 , "getWorkLocations()" : 14 , "getXMLElementTagName()" : 5 , "governmentChange(int)" : 3 , "hasAbility(String)" : 23 , "hasAbility(String,FreeColGameObjectType)" : 2 , "hasStockade()" : 4 , "incrementImmigration(int)" : 1 , "incrementLiberty(int)" : 3 , "invalidateCache()" : 16 , "isAutomaticBuild(BuildingType)" : 3 , "isConnected()" : 10 , "isLandLocked()" : 5 , "isProductive(WorkLocation)" : 1 , "isTileInUse(Tile)" : 4 , "isUndead()" : 1 , "isUnderSiege()" : 7 , "modifySpecialGoods(GoodsType,int)" : 3 , "priceGoodsForBuilding(HashMap<GoodsType,Integer>)" : 2 , "removeBuilding(Building)" : 1 , "removeGoods(AbstractGoods)" : 1 , "removeGoods(GoodsType)" : 3 , "removeGoods(GoodsType,int)" : 5 , "removeUnit(Unit)" : 2 , "setBuildQueue(List<BuildableType>)" : 1 , "setCurrentlyBuilding(BuildableType)" : 17 , "setExportData(ExportData)" : 10 , "toString()" : 1 , "updatePopulation(int)" : 4 , "updateProductionBonus()" : 2 , "updateSoL()" : 6}},{ "className" : "net::sf::freecol::server::ai::mission::ScoutingMission" , "selectors" : { "ScoutingMission(AIMain,AIUnit)" : 2 , "ScoutingMission(AIMain,XMLStreamReader)" : 1 , "getTransportDestination()" : 1 , "getXMLElementTagName()" : 2 , "isTarget(Tile,Unit,EquipmentType)" : 7 , "isValid()" : 1 , "isValid(AIUnit)" : 2 , "updateTransportDestination()" : 2}},{ "className" : "net::sf::freecol::common::networking::IndianDemandMessage" , "selectors" : { "IndianDemandMessage(Game,Element)" : 2 , "IndianDemandMessage(Unit,Colony,Goods,int)" : 2 , "getColony(Game)" : 1 , "getGold()" : 2 , "getGoods()" : 1 , "getUnit(Game)" : 1 , "getXMLElementTagName()" : 2 , "handle(FreeColServer,Player,Connection)" : 1 , "setResult(String)" : 1}},{ "className" : "net::sf::freecol::client::gui::panel::TrainDialog" , "selectors" : { "TrainDialog(Canvas,EuropeAction)" : 1 , "TrainDialog(Canvas,EuropeAction)::MigLayout" : 2 , "initialize()" : 1 , "initialize()::MigLayout" : 1}},{ "className" : "net::sf::freecol::client::gui::plaf::LAFUtilities" , "selectors" : { "setProperties(Graphics,JComponent)" : 12}},{ "className" : "net::sf::freecol::client::gui::action::ReconnectAction" , "selectors" : { "ReconnectAction(FreeColClient)" : 1}},{ "className" : "net::sf::freecol::common::option::StringOption" , "selectors" : { "StringOption(String)" : 1 , "StringOption(XMLStreamReader)" : 1 , "addNone()" : 3 , "generateChoices(Specification)" : 1 , "getChoices()" : 1 , "getValue()" : 10 , "getXMLElementTagName()" : 2 , "setValue(String)" : 7}},{ "className" : "net::sf::freecol::client::gui::panel::PlayersTable::AvailableCellEditor" , "selectors" : { "AvailableCellEditor()" : 1}},{ "className" : "net::sf::freecol::server::ai::mission::TransportMission" , "selectors" : { "TransportMission(AIMain,AIUnit)" : 9 , "TransportMission(AIMain,XMLStreamReader)" : 1 , "addToTransportList(Transportable)" : 16 , "attackEnemyShips(Connection)" : 3 , "attackIfEnemyShipIsBlocking(Connection,Direction)" : 1 , "buyCargo(Connection)" : 1 , "buyGoodsInEurope(Connection,GoodsType,int,Location)" : 1 , "canAttackEnemyShips()" : 2 , "canAttackPlayer(Player)" : 2 , "findNavalTarget(int)" : 1 , "findPathToEurope(Tile)" : 1 , "getAvailableSpace()" : 2 , "getAvailableSpace(Transportable)" : 2 , "getAvailableSpace(UnitType,Location,Location)" : 3 , "getCheapestUnitInEurope(Connection)" : 2 , "getDefaultDestination()" : 5 , "getDistanceTo(Transportable,Location,boolean)" : 6 , "getNextStop()" : 5 , "getPath(Transportable)" : 2 , "getPath(Transportable,Location,boolean)" : 2 , "getUnitInEurope(Connection,UnitType)" : 1 , "getXMLElementTagName()" : 2 , "hasCargo()" : 2 , "inEurope(Connection)" : 1 , "isCarrying(Transportable)" : 13 , "isOnTransportList(Transportable)" : 7 , "isValid()" : 2 , "isValid(AIUnit)" : 1 , "loadCargoAtDestination(Connection)" : 1 , "removeFromTransportList(Transportable)" : 8 , "restockCargoAtDestination(Connection)" : 5 , "toString()" : 1 , "unloadCargoAtDestination(Connection)" : 1 , "updateTransportList()" : 2}},{ "className" : "java::awt::PointerInfo" , "selectors" : { "getLocation()" : 1}},{ "className" : "net::sf::freecol::client::gui::panel::EuropePanel::EuropeCargoPanel" , "selectors" : { "EuropeCargoPanel(Canvas)" : 1}},{ "className" : "net::sf::freecol::common::model::SerializationTest" , "selectors" : { "buildSource(FreeColObject,Player,boolean,boolean)" : 2 , "buildValidator(String)" : 4 , "validateMap(String)" : 4}},{ "className" : "net::sf::freecol::client::gui::action::ReportNavalAction" , "selectors" : { "ReportNavalAction(FreeColClient)" : 1}},{ "className" : "net::sf::freecol::common::resources::ChipResource" , "selectors" : { "ChipResource(String,Color,Color)" : 2 , "ChipResource(URI)" : 1 , "colorChip(Color)" : 1 , "createAlarmChip(boolean)" : 2 , "createColorChip()" : 2 , "createMissionChip()" : 1 , "getImage()" : 2 , "getImage(double)" : 1 , "missionChip(Color,boolean)" : 2}},{ "className" : "net::sf::freecol::common::model::UnitTradeItem" , "selectors" : { "UnitTradeItem(Game,XMLStreamReader)" : 1 , "getUnit()" : 1 , "getXMLElementTagName()" : 2 , "readFromXMLImpl(XMLStreamReader)" : 1}},{ "className" : "net::sf::freecol::common::model::Specification::ChildReader" , "selectors" : { "readChildren(XMLStreamReader,Specification)" : 1}},{ "className" : "net::sf::freecol::common::model::Modifier::Type" , "selectors" : { "values()" : 2}},{ "className" : "net::sf::freecol::common::model::EuropeanNationType" , "selectors" : { "getStartingUnits()" : 3 , "getStartingUnits(String)" : 1 , "getXMLElementTagName()" : 1 , "isREF()" : 1 , "writeUnit(XMLStreamWriter,String,AbstractUnit,boolean)" : 2}},{ "className" : "net::sf::freecol::util::test::MockMapGenerator" , "selectors" : { "MockMapGenerator(Map)" : 1 , "updateGameRefs(FreeColGameObject,Game)" : 2}},{ "className" : "net::sf::freecol::util::test::FreeColTestCase::IndianSettlementBuilder" , "selectors" : { "FreeColTestCase" : 34 , "build()" : 40 , "capital(boolean)" : 7 , "getSimpleName(Player,boolean)" : 1 , "initialBravesInCamp(int)" : 6 , "isVisitedByPlayer(Player,boolean)" : 1 , "player(Player)" : 16 , "reset()" : 3 , "setStartingParams()" : 2 , "settlementTile(Tile)" : 20 , "skillToTeach(String)" : 8}},{ "className" : "net::sf::freecol::client::gui::action::ReportContinentalCongressAction" , "selectors" : { "ReportContinentalCongressAction(FreeColClient)" : 1}},{ "className" : "net::sf::freecol::client::gui::CanvasMapEditorMouseListener" , "selectors" : { "CanvasMapEditorMouseListener(Canvas,GUI)" : 1 , "auto_scroll(int,int)" : 1 , "drag_scroll(int,int)" : 1 , "drawBox(JComponent,Point,Point)" : 4 , "getMap()" : 9 , "scroll(int,int,int)" : 2}},{ "className" : "net::sf::freecol::common::networking::JoinColonyMessage" , "selectors" : { "JoinColonyMessage(Colony,Unit)" : 1 , "JoinColonyMessage(Game,Element)" : 1 , "getXMLElementTagName()" : 2 , "handle(FreeColServer,Player,Connection)" : 1}},{ "className" : "net::sf::freecol::tools::FSGConverter" , "selectors" : { "FSGConverter()" : 1 , "convertToXML(File,File)" : 1 , "convertToXML(InputStream,OutputStream)" : 1 , "getFSGConverter()" : 1 , "printUsage()" : 2}},{ "className" : "net::sf::freecol::common::model::pathfinding::CostDecider" , "selectors" : { "getCost(Unit,Tile,Tile,int)" : 14 , "getMovesLeft()" : 4 , "isNewTurn()" : 4}},{ "className" : "net::sf::freecol::server::control::InGameInputHandler" , "selectors" : { "InGameInputHandler(FreeColServer)" : 2}},{ "className" : "net::sf::freecol::common::networking::InciteMessage" , "selectors" : { "InciteMessage(Game,Element)" : 1 , "InciteMessage(Unit,Direction,Player,int)" : 1 , "getXMLElementTagName()" : 2 , "handle(FreeColServer,Player,Connection)" : 1}},{ "className" : "net::sf::freecol::common::model::Locatable" , "selectors" : { "getLocation()" : 8 , "getSpaceTaken()" : 1 , "getTile()" : 2 , "setLocation(Location)" : 1}},{ "className" : "net::sf::freecol::common::networking::BuyPropositionMessage" , "selectors" : { "BuyPropositionMessage(Game,Element)" : 1 , "BuyPropositionMessage(Unit,Settlement,Goods,int)" : 1 , "getXMLElementTagName()" : 2 , "handle(FreeColServer,Player,Connection)" : 1}},{ "className" : "net::sf::freecol::client::gui::panel::MapControls" , "selectors" : { "MapControls(FreeColClient)" : 1 , "addToComponent(Canvas)" : 2 , "canZoomIn()" : 1 , "canZoomOut()" : 1 , "getInfoPanelHeight()" : 1 , "getInfoPanelWidth()" : 1 , "isShowing()" : 3 , "removeFromComponent(Canvas)" : 2 , "update()" : 4 , "update(MapTransform)" : 1 , "zoomIn()" : 1 , "zoomOut()" : 1}},{ "className" : "net::sf::freecol::common::resources::FontResource" , "selectors" : { "FontResource(URI)" : 2 , "getEmergencyFont()" : 2 , "getFont()" : 1}},{ "className" : "net::sf::freecol::common::networking::SpySettlementMessage" , "selectors" : { "SpySettlementMessage(Game,Element)" : 1 , "SpySettlementMessage(Unit,Direction)" : 1 , "getXMLElementTagName()" : 2 , "handle(FreeColServer,Connection)" : 1}},{ "className" : "net::sf::freecol::client::gui::panel::SelectDestinationDialog" , "selectors" : { "SelectDestinationDialog(Canvas,Unit)" : 1 , "SelectDestinationDialog(Canvas,Unit)::MigLayout" : 1 , "collectDestinationsFromAmerica(Unit,List<GoodsType>)" : 1 , "collectDestinationsFromEurope(Unit,List<GoodsType>)" : 1 , "compareNames(Location,Location)" : 3 , "filterDestinations()" : 3 , "getExtras(Unit,Location,List<GoodsType>)" : 3}},{ "className" : "net::sf::freecol::server::ai::Wish" , "selectors" : { "Wish(AIMain,String)" : 8 , "dispose()" : 2 , "getDestination()" : 24 , "getTransportable()" : 7 , "setTransportable(Transportable)" : 5 , "shouldBeStored()" : 3}},{ "className" : "net::sf::freecol::client::control::InGameInputHandler::ReconnectSwingTask" , "selectors" : { "ReconnectSwingTask()" : 1}},{ "className" : "net::sf::freecol::common::model::LastSale" , "selectors" : { "LastSale()" : 2 , "LastSale(Location,GoodsType,Turn,int)" : 1 , "LastSale(String,Turn,int)" : 1 , "getPrice()" : 1 , "getXMLElementTagName()" : 4 , "makeKey(Location,GoodsType)" : 2 , "readFromXMLImpl(XMLStreamReader)" : 1 , "toXMLImpl(XMLStreamWriter)" : 1}},{ "className" : "net::sf::freecol::common::model::NationSummary" , "selectors" : { "NationSummary(Element)" : 1 , "NationSummary(Player,Player)" : 1 , "getFoundingFathers()" : 1 , "getGold()" : 2 , "getMilitaryStrength()" : 1 , "getNavalStrength()" : 1 , "getNumberOfSettlements()" : 3 , "getNumberOfUnits()" : 1 , "getSoL()" : 1 , "getStance()" : 1 , "getTax()" : 1 , "getXMLElementTagName()" : 1}},{ "className" : "net::sf::freecol::client::gui::panel::NegotiationDialog::StanceTradeItemPanel::StanceItem" , "selectors" : { "StanceItem(Stance)" : 5 , "getValue()" : 1}},{ "className" : "net::sf::freecol::client::gui::i18n::Messages" , "selectors" : { "containsKey(String)" : 14 , "findMatchingBracket(String,int)" : 2 , "getChoice(String,String)" : 2 , "getDefaultRegionName(Player,RegionType)" : 1 , "getI18nDirectory()" : 1 , "getLabel(AbstractUnit)" : 1 , "getLabel(Unit)" : 33 , "getLabel(UnitType,Role)" : 1 , "getName(FreeColObject)" : 18 , "getNewLandName(Player)" : 2 , "getSelector(String)" : 2 , "getSettlementNames(Player)" : 4 , "getShortDescription(FreeColObject)" : 11 , "getStanceAsString(Stance)" : 3 , "getTurnsText(int)" : 2 , "loadResources(File)" : 1 , "loadResources(InputStream)" : 7 , "message(String)" : 654 , "message(StringTemplate)" : 188 , "replaceChoices(String,StringTemplate)" : 4 , "setGrammaticalNumber(Number)" : 3 , "setMessageBundle(Locale)" : 13 , "setMessageBundle(String,String,String)" : 1}},{ "className" : "net::sf::freecol::client::gui::video::VideoComponent" , "selectors" : { "VideoComponent(Video,boolean)" : 1 , "VideoComponent(Video,boolean)::Cortado" : 1 , "addMouseListener(MouseListener)" : 1 , "addVideoListener(VideoListener)" : 1 , "createBorder()" : 1 , "play()" : 1 , "removeMouseListener(MouseListener)" : 1 , "removeVideoListener(VideoListener)" : 1 , "stop()" : 1}},{ "className" : "java::awt::dnd::DragSourceEvent" , "selectors" : { "getDragSourceContext()" : 7}},{ "className" : "net::sf::freecol::client::gui::option::StringOptionUI" , "selectors" : { "StringOptionUI(StringOption,boolean)" : 1 , "getLabel()" : 1}},{ "className" : "net::sf::freecol::client::gui::panel::ColonyPanel::BuildingsPanel" , "selectors" : { "BuildingsPanel(ColonyPanel)" : 1 , "BuildingsPanel(ColonyPanel)::MigLayout" : 1 , "cleanup()" : 1 , "initialize()" : 1 , "removePropertyChangeListeners()" : 2 , "update()" : 2}},{ "className" : "net::sf::freecol::client::gui::panel::DifficultyDialog::BoxRenderer" , "selectors" : { "BoxRenderer()" : 2}},{ "className" : "net::sf::freecol::common::model::BuildingType" , "selectors" : { "BuildingType(String,Specification)" : 1 , "canAdd(UnitType)" : 5 , "compareTo(BuildingType)" : 1 , "fixup09x()" : 1 , "getBasicProduction()" : 5 , "getConsumedGoodsType()" : 4 , "getFirstLevel()" : 4 , "getLevel()" : 1 , "getPriority()" : 1 , "getProducedGoodsType()" : 8 , "getProductionModifier()" : 2 , "getUpgradesFrom()" : 18 , "getUpgradesTo()" : 10 , "getWorkPlaces()" : 4 , "getXMLElementTagName()" : 1 , "isAutomaticBuild()" : 3}},{ "className" : "net::sf::freecol::client::gui::plaf::FreeColTransparentPanelUI" , "selectors" : { "FreeColTransparentPanelUI()" : 1}},{ "className" : "net::sf::freecol::client::gui::action::ReportLabourAction" , "selectors" : { "ReportLabourAction(FreeColClient)" : 1}},{ "className" : "net::sf::freecol::server::ai::mission::IdleAtColonyMission" , "selectors" : { "IdleAtColonyMission(AIMain,AIUnit)" : 2 , "IdleAtColonyMission(AIMain,XMLStreamReader)" : 1 , "getXMLElementTagName()" : 2}},{ "className" : "net::sf::freecol::client::gui::action::ReportHighScoresAction" , "selectors" : { "ReportHighScoresAction(FreeColClient)" : 1}},{ "className" : "net::sf::freecol::common::option::AbstractOption" , "selectors" : { "AbstractOption<AbstractUnit>(String)" : 2 , "AbstractOption<Boolean>(String)" : 2 , "AbstractOption<File>(String)" : 1 , "AbstractOption<Integer>(String)" : 2 , "AbstractOption<Language>(String)" : 1 , "AbstractOption<List<AbstractUnitOption>>(String)" : 2 , "AbstractOption<List<T>>(String)" : 2 , "AbstractOption<MixerWrapper>(String)" : 1 , "AbstractOption<OptionGroup>(String)" : 1 , "AbstractOption<String>(String)" : 2 , "getGroup()" : 1 , "getValue()" : 1 , "isPreviewEnabled()" : 10 , "readAttributes(XMLStreamReader)" : 5 , "readFromXMLImpl(XMLStreamReader)" : 1 , "setGroup(String)" : 7 , "setPreviewEnabled(boolean)" : 1 , "setValue(String,String)" : 1 , "setValue(T)" : 1}},{ "className" : "net::sf::freecol::common::logging::DefaultHandler" , "selectors" : { "DefaultHandler(boolean,String)" : 1 , "flush()" : 1}},{ "className" : "net::sf::freecol::client::gui::panel::MapEditorTransformPanel::ResourceTransform" , "selectors" : { "ResourceTransform()" : 1}},{ "className" : "java::awt::ActiveEvent" , "selectors" : { "dispatch()" : 1}},{ "className" : "net::sf::freecol::client::control::InGameInputHandler::UnitMoveAnimationCanvasSwingTask" , "selectors" : { "UnitMoveAnimationCanvasSwingTask(Unit,Tile,Tile,boolean)" : 1}},{ "className" : "net::sf::freecol::common::networking::CashInTreasureTrainMessage" , "selectors" : { "CashInTreasureTrainMessage(Game,Element)" : 1 , "CashInTreasureTrainMessage(Unit)" : 2 , "getXMLElementTagName()" : 2 , "handle(FreeColServer,Player,Connection)" : 1}},{ "className" : "net::sf::freecol::client::FreeColClient" , "selectors" : { "FreeColClient(File,Dimension,boolean,String,boolean,String)" : 3 , "askServer()" : 13 , "canPlaySound()" : 2 , "canSaveCurrentGame()" : 2 , "changeWindowedMode(boolean)" : 2 , "continuePlaying()" : 1 , "exitActions()" : 1 , "get()" : 2 , "getActionManager()" : 40 , "getCanvas()" : 219 , "getClient()" : 18 , "getClientOptions()" : 48 , "getConnectController()" : 21 , "getFrame()" : 5 , "getFreeColServer()" : 30 , "getGUI()" : 73 , "getGame()" : 120 , "getImageLibrary()" : 7 , "getInGameController()" : 57 , "getInGameInputHandler()" : 3 , "getMapEditorController()" : 9 , "getMyPlayer()" : 101 , "getPreGameController()" : 11 , "getPreGameInputHandler()" : 1 , "getSoundPlayer()" : 1 , "isAdmin()" : 3 , "isHeadless()" : 5 , "isInGame()" : 3 , "isLoggedIn()" : 4 , "isMapEditor()" : 15 , "isSingleplayer()" : 7 , "isWindowed()" : 3 , "loadClientOptions(File)" : 1 , "playSound(String)" : 35 , "quit()" : 8 , "setActiveUnit(String)" : 1 , "setClient(Client)" : 3 , "setFreeColServer(FreeColServer)" : 7 , "setGame(Game)" : 6 , "setHeadless(boolean)" : 1 , "setInGame(boolean)" : 4 , "setIsRetired(boolean)" : 2 , "setLoggedIn(boolean)" : 3 , "setMapEditor(boolean)" : 8 , "setMyPlayer(Player)" : 4 , "setSingleplayer(boolean)" : 5 , "skipTurns(int)" : 2 , "startGUI(Dimension,boolean,boolean,boolean)" : 1 , "updateMenuBar()" : 7}},{ "className" : "net::sf::freecol::common::model::TileType" , "selectors" : { "applyDifficultyLevel(OptionGroup)" : 5 , "canHaveImprovement(TileImprovementType)" : 21 , "canHaveResourceType(ResourceType)" : 1 , "canSettle()" : 8 , "getBasicMoveCost()" : 8 , "getBasicWorkTurns()" : 2 , "getDefenceBonus()" : 3 , "getIndex()" : 2 , "getPrimaryGoods()" : 12 , "getPrimaryGoods(String)" : 1 , "getProduction()" : 8 , "getProduction(String)" : 1 , "getProductionBonus(GoodsType)" : 1 , "getProductionOf(GoodsType,UnitType)" : 7 , "getResourceTypeList()" : 3 , "getSecondaryGoods()" : 12 , "getSecondaryGoods(String)" : 1 , "getWeightedResources()" : 2 , "getXMLElementTagName()" : 1 , "isConnected()" : 3 , "isForested()" : 7 , "isPrimaryGoodsType(GoodsType)" : 3 , "isSecondaryGoodsType(GoodsType)" : 3 , "isWater()" : 12 , "withinRange(RangeType,int)" : 2}},{ "className" : "net::sf::freecol::client::gui::panel::ReportForeignAffairPanel" , "selectors" : { "ReportForeignAffairPanel(Canvas)" : 1 , "ReportForeignAffairPanel(Canvas)::MigLayout" : 2}},{ "className" : "net::sf::freecol::common::model::mission::AbstractMission" , "selectors" : { "AbstractMission(Game)" : 3 , "AbstractMission(Game,Element)" : 3 , "AbstractMission(Game,String)" : 3 , "AbstractMission(Game,XMLStreamReader)" : 3 , "getRepeatCount()" : 2 , "getTurnCount()" : 2 , "getUnit()" : 5 , "isValid()" : 3 , "readAttributes(XMLStreamReader)" : 3 , "setRepeatCount(int)" : 1 , "setTurnCount(int)" : 1 , "writeAttributes(XMLStreamWriter)" : 3}},{ "className" : "net::sf::freecol::common::model::AbstractUnit" , "selectors" : { "AbstractUnit()" : 1 , "AbstractUnit(String,Role,int)" : 5 , "AbstractUnit(UnitType,Role,int)" : 29 , "AbstractUnit(XMLStreamReader)" : 4 , "getEquipment(Specification)" : 4 , "getLabel(Specification)" : 1 , "getNumber()" : 14 , "getRole()" : 12 , "getUnitType(Specification)" : 13 , "getXMLElementTagName()" : 2 , "setNumber(int)" : 2 , "toString()" : 1 , "toXMLImpl(XMLStreamWriter)" : 2}},{ "className" : "net::sf::freecol::common::networking::Message" , "selectors" : { "Message(InputSource)" : 2 , "createNewDocument()" : 1 , "createNewRootElement(String)" : 2 , "getType()" : 1}},{ "className" : "net::sf::freecol::client::gui::panel::EmigrationPanel" , "selectors" : { "EmigrationPanel(Canvas)" : 1 , "initialize(Europe,boolean)" : 1 , "initialize(Europe,boolean)::MigLayout" : 1}},{ "className" : "net::sf::freecol::client::gui::plaf::FreeColLabelUI" , "selectors" : { "FreeColLabelUI()" : 1}},{ "className" : "net::sf::freecol::common::model::StringTemplate" , "selectors" : { "StringTemplate()" : 1 , "StringTemplate(String,StringTemplate)" : 2 , "StringTemplate(String,TemplateType)" : 12 , "add(String)" : 18 , "add(String,String)" : 85 , "addAmount(String,Number)" : 111 , "addName(String)" : 9 , "addName(String,FreeColObject)" : 12 , "addName(String,String)" : 100 , "addStringTemplate(String,StringTemplate)" : 72 , "addStringTemplate(StringTemplate)" : 8 , "equals(Object)" : 3 , "getDefaultId()" : 3 , "getKeys()" : 6 , "getReplacement(String)" : 2 , "getReplacements()" : 8 , "getTemplateType()" : 7 , "getXMLElementTagName()" : 2 , "hashCode()" : 3 , "key(String)" : 35 , "label(String)" : 17 , "name(String)" : 9 , "readAttributes(XMLStreamReader)" : 2 , "readChildren(XMLStreamReader)" : 2 , "readOldFormat(String[])" : 2 , "setDefaultId(String)" : 1 , "template(String)" : 200 , "toString()" : 3 , "toXMLImpl(XMLStreamWriter)" : 1 , "writeAttributes(XMLStreamWriter)" : 2}},{ "className" : "net::sf::freecol::server::ai::mission::BuildColonyMission" , "selectors" : { "BuildColonyMission(AIMain,AIUnit,Tile,int)" : 2 , "BuildColonyMission(AIMain,XMLStreamReader)" : 1 , "findColonyLocation(Unit)" : 3 , "getTransportDestination()" : 1 , "getXMLElementTagName()" : 2 , "isValid()" : 1}},{ "className" : "net::sf::freecol::client::gui::Canvas::EventType" , "selectors" : { "valueOf(String)" : 1 , "values()" : 1}},{ "className" : "net::sf::freecol::client::gui::panel::ReportRequirementsPanel" , "selectors" : { "ReportRequirementsPanel(Canvas)" : 1 , "ReportRequirementsPanel(Canvas)::MigLayout" : 1 , "addBadAssignmentWarning(StyledDocument,Colony,Unit,Unit)" : 1 , "addExpertWarning(StyledDocument,Colony,GoodsType,UnitType)" : 2 , "addPlowCenterWarning(StyledDocument,Colony)" : 1 , "addProductionWarning(StyledDocument,Colony,GoodsType,GoodsType)" : 1 , "addTileWarning(StyledDocument,Colony,String,Tile)" : 4 , "checkColony(Colony,StyledDocument)" : 1 , "createColonyButton(Colony,String,boolean)" : 3 , "createColonyButton(Colony,boolean)" : 2 , "insertColonyButtons(StyledDocument,List<Colony>)" : 3}},{ "className" : "net::sf::freecol::common::util::Xml::Exception" , "selectors" : { "Exception(Throwable)" : 4}},{ "className" : "net::sf::freecol::client::control::InGameInputHandler::UpdateMenuBarSwingTask" , "selectors" : { "UpdateMenuBarSwingTask()" : 2}},{ "className" : "net::sf::freecol::common::model::SimpleCombatModel" , "selectors" : { "SimpleCombatModel()" : 9 , "addLandDefensiveModifiers(FreeColGameObject,FreeColGameObject,Set<Modifier>)" : 1 , "addLandOffensiveModifiers(FreeColGameObject,FreeColGameObject,Set<Modifier>)" : 1 , "addNavalDefensiveModifiers(FreeColGameObject,Set<Modifier>)" : 1 , "addNavalOffensiveModifiers(Unit,Set<Modifier>)" : 1 , "calculateCombatOdds(FreeColGameObject,FreeColGameObject)" : 1 , "getDefencePower(FreeColGameObject,FreeColGameObject)" : 2 , "getDefensiveModifiers(FreeColGameObject,FreeColGameObject)" : 3 , "getOffencePower(FreeColGameObject,FreeColGameObject)" : 3 , "getOffensiveModifiers(FreeColGameObject,FreeColGameObject)" : 2 , "isAmbush(FreeColGameObject,FreeColGameObject)" : 2 , "isBeached(Unit)" : 2 , "resolveAttack(Unit,Unit,boolean,float,List<CombatResult>)" : 2}},{ "className" : "net::sf::freecol::client::control::InGameController::UnitWas" , "selectors" : { "UnitWas(Unit)" : 12 , "change(FreeColGameObject)" : 2 , "fireChanges()" : 12 , "getAmount(Location,GoodsType)" : 2}},{ "className" : "net::sf::freecol::client::gui::option::OptionGroupUI" , "selectors" : { "OptionGroupUI(OptionGroup,boolean)" : 3 , "OptionGroupUI(OptionGroup,boolean)::MigLayout" : 2 , "addOptionGroupUI(OptionGroup,JPanel,boolean)" : 2 , "addOptionUI(Option,JPanel,boolean)" : 2 , "getOptionUI(String)" : 5 , "removeKeyStroke(KeyStroke)" : 1 , "reset()" : 2 , "rollback()" : 1 , "unregister()" : 2 , "updateOption()" : 2}},{ "className" : "net::sf::freecol::client::control::PreGameController" , "selectors" : { "PreGameController(FreeColClient)" : 1 , "addPlayerResources(String)" : 2 , "chat(String)" : 1 , "requestLaunch()" : 1 , "sendGameOptions()" : 1 , "sendMapGeneratorOptions()" : 1 , "setAvailable(Nation,NationState)" : 1 , "setNation(Nation)" : 1 , "setNationType(NationType)" : 2 , "setReady(boolean)" : 3 , "startGame()" : 3}},{ "className" : "net::sf::freecol::client::gui::panel::InfoPanel" , "selectors" : { "InfoPanel(FreeColClient)" : 1 , "add(JPanel,int,int)" : 4 , "getTile()" : 1 , "update(MapTransform)" : 1 , "update(Tile)" : 1 , "update(Unit)" : 1}},{ "className" : "net::sf::freecol::common::networking::DisbandUnitMessage" , "selectors" : { "DisbandUnitMessage(Game,Element)" : 1 , "DisbandUnitMessage(Unit)" : 1 , "getXMLElementTagName()" : 2 , "handle(FreeColServer,Player,Connection)" : 1}},{ "className" : "net::sf::freecol::client::gui::FAFile::FAName" , "selectors" : { "FAName()" : 1}},{ "className" : "net::sf::freecol::server::ai::AIUnit" , "selectors" : { "AIUnit(AIMain,String)" : 5 , "AIUnit(AIMain,Unit)" : 1 , "AIUnit(AIMain,XMLStreamReader)" : 1 , "doMission(Connection)" : 1 , "getAIOwner()" : 1 , "getConnection()" : 25 , "getGoal()" : 2 , "getId()" : 8 , "getMission()" : 90 , "getTransport()" : 2 , "getTransportDestination()" : 5 , "getUnit()" : 110 , "getXMLElementTagName()" : 2 , "hasMission()" : 11 , "setGoal(Goal)" : 3 , "setMission(Mission)" : 51 , "setTransport(AIUnit)" : 1}},{ "className" : "net::sf::freecol::client::gui::panel::DefaultTransferHandler" , "selectors" : { "DefaultTransferHandler(Canvas,FreeColPanel)" : 3 , "createTransferable(JComponent)" : 1 , "getAmount(GoodsType,int,int,boolean)" : 2 , "getSourceActions(JComponent)" : 1}},{ "className" : "net::sf::freecol::common::model::ProductionInfo" , "selectors" : { "ProductionInfo()" : 5 , "addConsumption(AbstractGoods)" : 1 , "addMaximumConsumption(AbstractGoods)" : 1 , "addMaximumProduction(AbstractGoods)" : 1 , "addProduction(AbstractGoods)" : 2 , "addProduction(List<AbstractGoods>)" : 1 , "append(StringBuilder,String,List<AbstractGoods>)" : 4 , "getConsumption()" : 11 , "getMaximumConsumption()" : 4 , "getMaximumProduction()" : 8 , "getProduction()" : 21 , "hasMaximumProduction()" : 2 , "setConsumption(List<AbstractGoods>)" : 2 , "setMaximumConsumption(List<AbstractGoods>)" : 1}},{ "className" : "net::sf::freecol::client::control::InGameInputHandler::FoundingFatherSwingTask" , "selectors" : { "FoundingFatherSwingTask(List<FoundingFather>)" : 1}},{ "className" : "net::sf::freecol::common::model::UnitLocation" , "selectors" : { "UnitLocation(Game)" : 5 , "UnitLocation(Game,Element)" : 5 , "UnitLocation(Game,String)" : 5 , "UnitLocation(Game,XMLStreamReader)" : 5 , "add(Locatable)" : 5 , "canAdd(Locatable)" : 38 , "contains(Locatable)" : 10 , "dispose()" : 1 , "disposeList()" : 2 , "getLocationName()" : 2 , "getLocationNameFor(Player)" : 1 , "getNoAddReason(Locatable)" : 3 , "getSpaceTaken()" : 1 , "getUnitCapacity()" : 2 , "getUnitCount()" : 63 , "getUnitIterator()" : 11 , "getUnitList()" : 102 , "isEmpty()" : 17 , "isFull()" : 3 , "readChild(XMLStreamReader)" : 5 , "readChildren(XMLStreamReader)" : 5 , "remove(Locatable)" : 3 , "writeAttributes(XMLStreamWriter)" : 3 , "writeChildren(XMLStreamWriter)" : 5 , "writeChildren(XMLStreamWriter,Player,boolean,boolean)" : 4}},{ "className" : "net::sf::freecol::client::control::InGameInputHandler::SwingTask" , "selectors" : { "doWork()" : 2 , "invokeAndWait()" : 3 , "invokeLater()" : 14 , "invokeSpecial()" : 6 , "isSynchronous()" : 1 , "markDone()" : 1 , "markStarted(boolean)" : 2 , "setResult(Object)" : 1 , "verifyNotStarted()" : 2}},{ "className" : "net::sf::freecol::common::networking::DiplomacyMessage" , "selectors" : { "DiplomacyMessage(Game,Element)" : 3 , "DiplomacyMessage(Unit,Settlement,DiplomaticTrade)" : 4 , "getAgreement()" : 2 , "getSettlement()" : 2 , "getUnit()" : 2 , "getXMLElementTagName()" : 2 , "handle(FreeColServer,Connection)" : 1 , "toXMLElement()" : 1}},{ "className" : "net::sf::freecol::client::gui::option::RangeOptionUI" , "selectors" : { "RangeOptionUI(RangeOption,boolean)" : 1}},{ "className" : "net::sf::freecol::client::gui::panel::BuildQueuePanel::BuildQueueMouseAdapter" , "selectors" : { "BuildQueueMouseAdapter(boolean)" : 2}},{ "className" : "net::sf::freecol::client::control::MapEditorController" , "selectors" : { "MapEditorController(FreeColClient)" : 1 , "getMapTransform()" : 4 , "loadGame()" : 1 , "loadGame(File)" : 1 , "loadGame(File)::ErrorJob" : 4 , "newMap()" : 1 , "reloadMainPanel()" : 4 , "saveGame()" : 2 , "saveGame(File)" : 2 , "setMapTransform(MapTransform)" : 1 , "startMapEditor()" : 1 , "transform(Tile)" : 1}},{ "className" : "net::sf::freecol::common::networking::SetTradeRoutesMessage" , "selectors" : { "SetTradeRoutesMessage(Game,Element)" : 1 , "SetTradeRoutesMessage(List<TradeRoute>)" : 1 , "getPrefix(TradeRoute)" : 1 , "getXMLElementTagName()" : 2 , "handle(FreeColServer,Connection)" : 1 , "hasPrefix(TradeRoute)" : 2 , "removePrefix(TradeRoute)" : 3 , "tradeRouteFromElement(Game,Element)" : 2}},{ "className" : "net::sf::freecol::server::generator::MapGeneratorOptions" , "selectors" : { "getXMLElementTagName()" : 2}},{ "className" : "net::sf::freecol::client::gui::panel::FindSettlementDialog" , "selectors" : { "FindSettlementDialog(Canvas)" : 1 , "FindSettlementDialog(Canvas)::MigLayout" : 1 , "selectSettlement()" : 2}},{ "className" : "net::sf::freecol::common::networking::EquipUnitMessage" , "selectors" : { "EquipUnitMessage(Game,Element)" : 1 , "EquipUnitMessage(Unit,EquipmentType,int)" : 2 , "getXMLElementTagName()" : 2 , "handle(FreeColServer,Player,Connection)" : 1}},{ "className" : "net::sf::freecol::common::util::Introspector" , "selectors" : { "Introspector(Class<?>,String)" : 3 , "getFromStringConverter(Class<?>)" : 1 , "getGetMethod()" : 2 , "getMethodReturnType(Method)" : 2 , "getSetMethod(Class<?>)" : 1 , "getToStringConverter(Class<?>)" : 1 , "getter(Object)" : 2 , "setter(Object,String)" : 1}},{ "className" : "net::sf::freecol::client::gui::action::ScaleMapAction" , "selectors" : { "ScaleMapAction(FreeColClient)" : 1 , "scaleMapTo(int,int)" : 1 , "showMapSizeDialog()" : 1}},{ "className" : "net::sf::freecol::client::gui::panel::RebelToolTip" , "selectors" : { "RebelToolTip(Colony,Canvas)" : 1 , "RebelToolTip(Colony,Canvas)::MigLayout" : 1 , "getPreferredSize()" : 1}},{ "className" : "net::sf::freecol::common::networking::BuyGoodsMessage" , "selectors" : { "BuyGoodsMessage(Game,Element)" : 1 , "BuyGoodsMessage(Unit,GoodsType,int)" : 2 , "getXMLElementTagName()" : 2 , "handle(FreeColServer,Player,Connection)" : 1}},{ "className" : "net::sf::freecol::common::model::ProductionCache" , "selectors" : { "ProductionCache(Colony)" : 1 , "getGoodsCount(GoodsType)" : 2 , "getNetProductionOf(GoodsType)" : 4 , "getProductionInfo(Object)" : 6 , "getProductionMap()" : 1 , "invalidate()" : 1 , "invalidate(GoodsType)" : 3 , "update()" : 3}},{ "className" : "net::sf::freecol::common::util::Xml::Method" , "selectors" : { "invokeOn(Node)" : 1}},{ "className" : "net::sf::freecol::common::networking::UnloadCargoMessage" , "selectors" : { "UnloadCargoMessage(Game,Element)" : 1 , "UnloadCargoMessage(Goods)" : 2 , "getXMLElementTagName()" : 2 , "handle(FreeColServer,Player,Connection)" : 1}},{ "className" : "net::sf::freecol::client::gui::panel::MapEditorTransformPanel::TileTypeTransform" , "selectors" : { "TileTypeTransform(TileType)" : 1}},{ "className" : "net::sf::freecol::common::model::Building" , "selectors" : { "Building(Game)" : 1 , "Building(Game,String)" : 2 , "add(Locatable)" : 18 , "canAdd(UnitType)" : 5 , "canAutoProduce()" : 2 , "canBeDamaged()" : 3 , "canBuildNext()" : 8 , "damage()" : 1 , "getAdditionalProductionNextTurn(Unit)" : 2 , "getExpertUnitType()" : 5 , "getGoodsInputType()" : 11 , "getGoodsOutputType()" : 27 , "getLevel()" : 5 , "getMaximumProduction()" : 10 , "getNameKey()" : 10 , "getNoAddReason(Locatable)" : 5 , "getNoWorkReason()" : 1 , "getProduction()" : 19 , "getProductionInfo()" : 6 , "getProductionInfo(AbstractGoods,List<AbstractGoods>)" : 1 , "getProductionModifiers()" : 3 , "getProductionOf(GoodsType)" : 16 , "getProductivity(Unit[])" : 1 , "getType()" : 59 , "getUnitCapacity()" : 6 , "getUnitProductivity(Unit)" : 17 , "getXMLElementTagName()" : 3 , "hasAbility(String)" : 1 , "remove(Locatable)" : 7 , "setType(BuildingType)" : 2 , "toString()" : 2 , "upgrade()" : 11}},{ "className" : "javax::sound::sampled::Line" , "selectors" : { "addLineListener(LineListener)" : 1 , "close()" : 6 , "getControl(Type)" : 1}},{ "className" : "net::sf::freecol::client::gui::panel::ColopediaPanel::PanelType" , "selectors" : { "values()" : 2}},{ "className" : "net::sf::freecol::server::ai::ProductionCache::Entry" , "selectors" : { "Entry(GoodsType,WorkLocation,Unit)" : 2 , "getGoodsType()" : 4 , "getProduction()" : 6 , "getUnit()" : 7 , "getWorkLocation()" : 5 , "isExpert()" : 3 , "isOtherExpert()" : 4 , "unitUpgrades()" : 3 , "unitUpgradesToExpert()" : 3}},{ "className" : "net::sf::freecol::common::io::Mods" , "selectors" : { "getAllMods()" : 3 , "getDirectoryMods(File)" : 2 , "getModFile(File)" : 1 , "getRuleSets()" : 2}},{ "className" : "net::sf::freecol::client::gui::Canvas::ToolBoxFrame" , "selectors" : { "ToolBoxFrame()" : 1}},{ "className" : "net::sf::freecol::client::gui::panel::NegotiationDialog::GoodsTradeItemPanel" , "selectors" : { "GoodsTradeItemPanel(NegotiationDialog,Player,List<Goods>)" : 2 , "GoodsTradeItemPanel(NegotiationDialog,Player,List<Goods>)::MigLayout" : 1 , "updateGoodsBox(List<Goods>)" : 3}},{ "className" : "net::sf::freecol::client::control::InGameInputHandler::ShowVictoryPanelSwingTask" , "selectors" : { "ShowVictoryPanelSwingTask()" : 1}},{ "className" : "net::sf::freecol::common::networking::EmbarkMessage" , "selectors" : { "EmbarkMessage(Game,Element)" : 1 , "EmbarkMessage(Unit,Unit,Direction)" : 2 , "getXMLElementTagName()" : 2 , "handle(FreeColServer,Player,Connection)" : 1}},{ "className" : "net::sf::freecol::client::gui::panel::EuropePanel::DocksPanel" , "selectors" : { "DocksPanel()" : 1 , "add(Component,boolean)" : 1 , "addPropertyChangeListeners()" : 1 , "cleanup()" : 1 , "initialize()" : 1 , "initialize()::MigLayout" : 1 , "removePropertyChangeListeners()" : 1 , "update()" : 6}},{ "className" : "net::sf::freecol::client::gui::panel::NegotiationDialog::GoldTradeItemPanel" , "selectors" : { "GoldTradeItemPanel(NegotiationDialog,Player,int)" : 2 , "GoldTradeItemPanel(NegotiationDialog,Player,int)::MigLayout" : 1 , "setAvailableGold(int)" : 2}},{ "className" : "net::sf::freecol::common::io::sza::SimpleZippedAnimation" , "selectors" : { "SimpleZippedAnimation(InputStream)" : 1 , "SimpleZippedAnimation(List<AnimationEvent>,int,int)" : 1 , "SimpleZippedAnimation(URL)" : 1 , "SimpleZippedAnimation(ZipInputStream)" : 1 , "createScaledVersion(double)" : 1}},{ "className" : "net::sf::freecol::client::gui::GUIMessage" , "selectors" : { "GUIMessage(String,Color)" : 1 , "getColor()" : 2 , "getCreationTime()" : 1 , "getMessage()" : 2}},{ "className" : "net::sf::freecol::client::gui::panel::EditSettlementDialog" , "selectors" : { "EditSettlementDialog(Canvas,IndianSettlement)" : 1 , "EditSettlementDialog(Canvas,IndianSettlement)::MigLayout" : 1}},{ "className" : "net::sf::freecol::client::gui::panel::OptionsDialog" , "selectors" : { "OptionsDialog(Canvas,boolean)" : 5 , "OptionsDialog(Canvas,boolean)::MigLayout" : 1 , "actionPerformed(ActionEvent)" : 4 , "getButtons()" : 2 , "getDefaultFileName()" : 2 , "getGroup()" : 5 , "getMinimumSize()" : 1 , "getOptionGroupId()" : 2 , "getOptionUI()" : 2 , "initialize(OptionGroup,String,Component)" : 6 , "isGroupEditable()" : 1 , "load(File)" : 3 , "loadCustomOptions()" : 3 , "updateUI(OptionGroup)" : 1}},{ "className" : "net::sf::freecol::common::logging::TextFormatter" , "selectors" : { "TextFormatter()" : 1}},{ "className" : "net::sf::freecol::common::model::CombatModel::CombatOdds" , "selectors" : { "CombatOdds(float)" : 3}},{ "className" : "net::sf::freecol::server::ai::mission::WishRealizationMission" , "selectors" : { "WishRealizationMission(AIMain,AIUnit,Wish)" : 3 , "WishRealizationMission(AIMain,XMLStreamReader)" : 1 , "getXMLElementTagName()" : 2 , "isValid()" : 1}},{ "className" : "net::sf::freecol::client::gui::panel::NewPanel" , "selectors" : { "NewPanel(Canvas)" : 2 , "NewPanel(Canvas,Specification)" : 2 , "NewPanel(Canvas,Specification)::MigLayout" : 1 , "enableComponents()" : 2 , "enableComponents(Component[],boolean)" : 12 , "getSpecification()" : 6}},{ "className" : "net::sf::freecol::server::ai::goal::GotoAdjacentGoal" , "selectors" : { "GotoAdjacentGoal(AIPlayer,Goal,float,AIUnit,Tile)" : 1}},{ "className" : "net::sf::freecol::common::model::Region" , "selectors" : { "Region(Game)" : 2 , "addChild(Region)" : 1 , "discover(Player,Turn,String)" : 2 , "getChildren()" : 1 , "getDiscoverableRegion()" : 6 , "getDiscoveredBy()" : 1 , "getDiscoveredIn()" : 4 , "getLabel()" : 3 , "getName()" : 4 , "getNameKey()" : 7 , "getParent()" : 4 , "getScoreValue()" : 5 , "getType()" : 2 , "getTypeNameKey()" : 1 , "getXMLElementTagName()" : 4 , "isDiscoverable()" : 4 , "isPacific()" : 8 , "readFromXMLImpl(XMLStreamReader)" : 1 , "setClaimable(boolean)" : 2 , "setDiscoverable(boolean)" : 5 , "setName(String)" : 1 , "setNameKey(String)" : 1 , "setParent(Region)" : 2 , "setPrediscovered(boolean)" : 4 , "setScoreValue(int)" : 4 , "setType(RegionType)" : 1 , "toString()" : 1}},{ "className" : "net::sf::freecol::client::gui::panel::PlayersTable::HeaderListener" , "selectors" : { "HeaderListener(JTableHeader,HeaderRenderer)" : 1}},{ "className" : "net::sf::freecol::client::gui::action::FindSettlementAction" , "selectors" : { "FindSettlementAction(FreeColClient)" : 1}},{ "className" : "net::sf::freecol::common::networking::ClearSpecialityMessage" , "selectors" : { "ClearSpecialityMessage(Game,Element)" : 1 , "ClearSpecialityMessage(Unit)" : 2 , "getXMLElementTagName()" : 2 , "handle(FreeColServer,Player,Connection)" : 1}},{ "className" : "net::sf::freecol::client::gui::panel::ColonyPanel::BuildingsPanel::ASingleBuildingPanel" , "selectors" : { "ASingleBuildingPanel(Building)" : 1 , "add(Component,boolean)" : 1 , "initialize()" : 1 , "tryWork(Unit)" : 1}},{ "className" : "net::sf::freecol::common::networking::ChatMessage" , "selectors" : { "ChatMessage(Game,Element)" : 3 , "ChatMessage(Player,String,boolean)" : 3 , "getMessage()" : 2 , "getPlayer()" : 2 , "getXMLElementTagName()" : 1 , "handle(FreeColServer,Connection)" : 1 , "isPrivate()" : 2 , "toXMLElement()" : 2}},{ "className" : "javax::swing::AbstractCellEditor" , "selectors" : { "AbstractCellEditor()" : 4 , "cancelCellEditing()" : 1 , "fireEditingCanceled()" : 4 , "fireEditingStopped()" : 9 , "isCellEditable(EventObject)" : 1 , "shouldSelectCell(EventObject)" : 4 , "stopCellEditing()" : 5}},{ "className" : "net::sf::freecol::server::networking::DummyConnection" , "selectors" : { "DummyConnection(String,MessageHandler)" : 4 , "ask(Element)" : 1 , "getOtherConnection()" : 3 , "setOutgoingMessageHandler(DummyConnection)" : 4 , "setOutgoingMessageHandler(MessageHandler)" : 1}},{ "className" : "net::sf::freecol::client::gui::menu::DebugMenu" , "selectors" : { "DebugMenu(FreeColClient)" : 1 , "addBuildingAction(Game,FreeColServer,Player,String)" : 1 , "addFatherAction(Game,FreeColServer,Player,String)" : 1 , "buildDebugMenu()" : 1 , "checkDesyncAction(Game,Player)" : 1 , "displayEuropeAction(Game,AIMain)" : 1}},{ "className" : "net::sf::freecol::client::gui::panel::CaptureGoodsDialog" , "selectors" : { "CaptureGoodsDialog(Canvas,Unit,List<Goods>)" : 1 , "CaptureGoodsDialog(Canvas,Unit,List<Goods>)::MigLayout" : 1 , "updateComponents()" : 3}},{ "className" : "net::sf::freecol::common::model::Limit" , "selectors" : { "Limit(Specification)" : 2 , "evaluate(Game)" : 2 , "evaluate(Integer,Integer)" : 3 , "evaluate(Player)" : 14 , "evaluate(Settlement)" : 5 , "getLeftHandSide()" : 21 , "getOperator()" : 6 , "getRightHandSide()" : 10 , "getXMLElementTagName()" : 3 , "toXMLImpl(XMLStreamWriter)" : 2}},{ "className" : "net::sf::freecol::common::model::Specification" , "selectors" : { "Specification()" : 2 , "Specification(InputStream)" : 8 , "addAbility(Ability)" : 2 , "addAbility(String)" : 3 , "addAbstractOption(AbstractOption)" : 6 , "addModifier(Modifier)" : 11 , "addOptionGroup(OptionGroup,boolean)" : 3 , "applyDifficultyLevel(OptionGroup)" : 5 , "applyDifficultyLevel(String)" : 19 , "applyDifficultyLevel(int)" : 1 , "clean()" : 2 , "getAbilities(String)" : 2 , "getBoolean(String)" : 25 , "getBooleanOption(String)" : 36 , "getBuildingType(String)" : 66 , "getBuildingTypeList()" : 12 , "getDifficultyLevel()" : 5 , "getDifficultyLevel(String)" : 8 , "getDifficultyLevel(int)" : 1 , "getDifficultyLevels()" : 4 , "getEquipmentType(String)" : 73 , "getEquipmentTypeList()" : 7 , "getEuropeanNationTypes()" : 3 , "getEuropeanNations()" : 3 , "getEvent(String)" : 5 , "getExpertForProducing(GoodsType)" : 15 , "getFarmedGoodsTypeList()" : 9 , "getFoodGoodsTypeList()" : 11 , "getFoundingFather(String)" : 26 , "getFoundingFathers()" : 8 , "getGoodsType(String)" : 206 , "getGoodsTypeList()" : 45 , "getId()" : 2 , "getIndianNationTypes()" : 4 , "getIndianNations()" : 3 , "getInteger(String)" : 16 , "getIntegerOption(String)" : 33 , "getLibertyGoodsTypeList()" : 5 , "getModifiers(String)" : 16 , "getNation(String)" : 14 , "getNationType(String)" : 34 , "getNations()" : 10 , "getNewWorldGoodsTypeList()" : 2 , "getOption(String)" : 14 , "getOptionGroup(String)" : 17 , "getPrimaryFoodType()" : 26 , "getREFNationTypes()" : 2 , "getREFNations()" : 1 , "getRangeOption(String)" : 2 , "getResourceType(String)" : 9 , "getResourceTypeList()" : 2 , "getStringOption(String)" : 2 , "getTileImprovementType(String)" : 42 , "getTileImprovementTypeList()" : 8 , "getTileType(String)" : 130 , "getTileTypeList()" : 10 , "getType(String)" : 8 , "getType(String,Class<T>)" : 20 , "getType(XMLStreamReader,String,Class<T>,T)" : 16 , "getTypes(TypeSelector)" : 2 , "getTypesProviding(String,boolean)" : 3 , "getTypesWithAbility(Class<T>,String[])" : 1 , "getUnitType(String)" : 248 , "getUnitTypeList()" : 29 , "getUnitTypesPurchasedInEurope()" : 1 , "getUnitTypesTrainedInEurope()" : 3 , "getUnitTypesWithAbility(String[])" : 12 , "getXMLElementTagName()" : 2 , "hasOption(String)" : 8 , "load(InputStream)" : 3 , "loadFragment(InputStream)" : 2 , "mangle(String)" : 2 , "numberOfUnitTypes()" : 2 , "readFromXMLImpl(XMLStreamReader)" : 2 , "toXMLImpl(XMLStreamWriter)" : 4 , "writeSection(XMLStreamWriter,String,Collection<T>)" : 14}},{ "className" : "net::sf::freecol::client::gui::panel::TradeRouteInputDialog" , "selectors" : { "TradeRouteInputDialog(Canvas,TradeRoute)" : 2 , "TradeRouteInputDialog(Canvas,TradeRoute)::MigLayout" : 1 , "updateButtons()" : 2 , "verifyNewTradeRoute()" : 1}},{ "className" : "net::sf::freecol::common::networking::NetworkReplyObject" , "selectors" : { "NetworkReplyObject(int,boolean)" : 2 , "getResponse()" : 2 , "interrupt()" : 1 , "isStreamed()" : 1 , "setResponse(Object)" : 2}},{ "className" : "net::sf::freecol::client::gui::option::ListOptionUI" , "selectors" : { "ListOptionUI(ListOption<T>,boolean)" : 1 , "createElementList(List<T>)" : 5 , "createNormalList(List<ListOptionElement<T>>)" : 2 , "getValue()" : 4 , "showAddElementDialog()" : 1}},{ "className" : "net::sf::freecol::client::gui::plaf::FreeColTableUI" , "selectors" : { "FreeColTableUI()" : 1}},{ "className" : "net::sf::freecol::client::networking::Client" , "selectors" : { "Client(String,int,MessageHandler)" : 1 , "ask(Element)" : 1 , "disconnect()" : 1 , "getConnection()" : 5 , "getHost()" : 1 , "getPort()" : 1 , "send(Element)" : 7 , "sendAndWait(Element)" : 4 , "setMessageHandler(MessageHandler)" : 1}},{ "className" : "net::sf::freecol::common::model::HistoryEvent" , "selectors" : { "HistoryEvent()" : 2 , "HistoryEvent(Turn,EventType)" : 18 , "add(String,String)" : 2 , "addAmount(String,int)" : 1 , "addName(String,String)" : 8 , "addStringTemplate(String,StringTemplate)" : 13 , "getTurn()" : 1 , "getXMLElementTagName()" : 3 , "readFromXMLImpl(XMLStreamReader)" : 1}},{ "className" : "net::sf::freecol::client::gui::action::FortifyAction" , "selectors" : { "FortifyAction(FreeColClient)" : 1}},{ "className" : "net::sf::freecol::common::model::Monarch::MonarchAction" , "selectors" : { "values()" : 1}},{ "className" : "net::sf::freecol::client::control::InGameInputHandler::UnitAttackAnimationCanvasSwingTask" , "selectors" : { "UnitAttackAnimationCanvasSwingTask(Unit,Unit,boolean,boolean)" : 2}},{ "className" : "net::sf::freecol::client::gui::i18n::AllTests" , "selectors" : { "suite()::TestSuite" : 1 , "suite(???)" : 1}},{ "className" : "net::sf::freecol::client::gui::panel::WorkProductionPanel" , "selectors" : { "WorkProductionPanel(Canvas,Unit)" : 2 , "WorkProductionPanel(Canvas,Unit)::MigLayout" : 1 , "addModifier(Modifier,UnitType,float)" : 2}},{ "className" : "net::sf::freecol::client::gui::action::SkipUnitAction" , "selectors" : { "SkipUnitAction(FreeColClient)" : 1}},{ "className" : "net::sf::freecol::client::gui::action::DetermineHighSeasAction::Parameters" , "selectors" : { "Parameters(int,int)" : 1}},{ "className" : "net::sf::freecol::common::resources::ImageResource" , "selectors" : { "ImageResource(Image)" : 4 , "ImageResource(URI)" : 1 , "getCount()" : 1 , "getGrayscaleImage(Dimension)" : 2 , "getGrayscaleImage(double)" : 1 , "getImage()" : 4 , "getImage(Dimension)" : 3 , "getImage(double)" : 1 , "preload()" : 1}},{ "className" : "net::sf::freecol::client::gui::panel::FreeColPanel" , "selectors" : { "FreeColPanel(Canvas)" : 17 , "FreeColPanel(Canvas,LayoutManager)" : 7 , "actionPerformed(ActionEvent)" : 2 , "addClosingCallback(Runnable)" : 2 , "createColonyButton(Colony)" : 2 , "createEventForwardingMouseListener(Component)" : 1 , "createEventForwardingMouseListener(Component)::anonymous(MouseListener)" : 5 , "createEventForwardingMouseMotionListener(Component)" : 1 , "createEventForwardingMouseMotionListener(Component)::anonymous(MouseMotionListener)" : 2 , "enterPressesWhenFocused(JButton)" : 29 , "getCanvas()" : 137 , "getClientOptions()" : 8 , "getController()" : 48 , "getDefaultHeader(String)" : 9 , "getDefaultTextArea(String)" : 14 , "getDefaultTextArea(String,int)" : 14 , "getDefaultTextPane()" : 5 , "getDefaultTextPane(String)" : 1 , "getFreeColClient()" : 41 , "getGame()" : 24 , "getInteger(String)" : 4 , "getLibrary()" : 70 , "getLinkButton(String,Icon,String)" : 20 , "getModifierFormat()" : 6 , "getMyPlayer()" : 69 , "getSavedPosition()" : 1 , "getSavedSize()" : 1 , "getSortedColonies()" : 13 , "getSpecification()" : 79 , "isEditable()" : 20 , "localizedLabel(String)" : 99 , "localizedLabel(StringTemplate)" : 16 , "notifyClose()" : 2 , "requestFocus()" : 8 , "restoreSavedSize(Dimension)" : 5 , "restoreSavedSize(int,int)" : 4 , "saveInteger(String,int)" : 4 , "saveSize()" : 1 , "saveSize(Dimension)" : 2 , "setCancelComponent(AbstractButton)" : 13 , "sortModifiers(Set<Modifier>)" : 2}},{ "className" : "net::sf::freecol::common::model::mission::MissionManager" , "selectors" : { "getMission(Game,XMLStreamReader)" : 1}},{ "className" : "net::sf::freecol::server::control::ChangeSet::MessageChange" , "selectors" : { "MessageChange(See,ChangePriority,DOMMessage)" : 1}},{ "className" : "net::sf::freecol::client::gui::panel::SelectDestinationDialog::Destination" , "selectors" : { "Destination(Location,int,String)" : 4}},{ "className" : "net::sf::freecol::tools::FlagTest" , "selectors" : { "FlagTest()" : 1}},{ "className" : "net::sf::freecol::common::model::Player::GoingToPredicate" , "selectors" : { "GoingToPredicate(Player)" : 1}},{ "className" : "net::sf::freecol::client::gui::panel::EditSettlementDialog::SkillRenderer" , "selectors" : { "SkillRenderer()" : 1}},{ "className" : "net::sf::freecol::client::gui::action::ContinueAction" , "selectors" : { "ContinueAction(FreeColClient)" : 1}},{ "className" : "net::sf::freecol::common::model::Specification::ModifierReader" , "selectors" : { "ModifierReader()" : 1}},{ "className" : "java::awt::geom::GeneralPath" , "selectors" : { "GeneralPath()" : 160 , "GeneralPath(Shape)" : 39 , "GeneralPath(int)" : 18 , "GeneralPath(int,int)" : 7 , "java" : 2 , "transform(???)" : 1}},{ "className" : "net::sf::freecol::client::gui::plaf::FreeColRadioButtonUI" , "selectors" : { "FreeColRadioButtonUI()" : 1}},{ "className" : "java::io::OutputStreamWriter" , "selectors" : { "OutputStreamWriter(OutputStream)" : 288 , "OutputStreamWriter(OutputStream,Charset)" : 6 , "OutputStreamWriter(OutputStream,CharsetEncoder)" : 2 , "OutputStreamWriter(OutputStream,String)" : 328 , "close()" : 280 , "flush()" : 97 , "getEncoding()" : 9 , "java" : 5 , "write(???)" : 1 , "write(String,int,int)" : 32 , "write(char[],int,int)" : 9 , "write(int)" : 47}},{ "className" : "net::sf::freecol::client::gui::action::MoveAction" , "selectors" : { "MoveAction(FreeColClient,Direction)" : 1 , "MoveAction(FreeColClient,Direction,boolean)" : 1}},{ "className" : "net::sf::freecol::common::model::TileItem" , "selectors" : { "TileItem(Game,Element)" : 3 , "TileItem(Game,String)" : 1 , "TileItem(Game,Tile)" : 4 , "TileItem(Game,XMLStreamReader)" : 3 , "getTile()" : 7 , "getZIndex()" : 6 , "isTileTypeAllowed(TileType)" : 1}},{ "className" : "net::sf::freecol::client::gui::i18n::Selector" , "selectors" : { "getKey(String,String)" : 2}},{ "className" : "net::sf::freecol::server::control::Controller" , "selectors" : { "Controller(FreeColServer)" : 2 , "shutdown()" : 6}},{ "className" : "net::sf::freecol::common::option::ListOption" , "selectors" : { "ListOption(ListOptionSelector<T>,String,OptionGroup,T[])" : 2 , "getListOptionSelector()" : 3 , "getValue()" : 5 , "getValueIds()" : 2 , "getXMLElementTagName()" : 2 , "setValue(List<T>)" : 5 , "setValueIds(List<String>)" : 1 , "toString()" : 1}},{ "className" : "net::sf::freecol::common::model::pathfinding::CostDeciders::ServerBaseCostDecider" , "selectors" : { "ServerBaseCostDecider()" : 1}},{ "className" : "net::sf::freecol::client::gui::panel::EndTurnDialog" , "selectors" : { "EndTurnDialog(Canvas,List<Unit>)" : 1 , "EndTurnDialog(Canvas,List<Unit>)::MigLayout" : 1 , "selectUnit()" : 2}},{ "className" : "net::sf::freecol::client::gui::panel::BuildQueuePanel::BuildQueueTransferHandler::BuildQueueTransferable" , "selectors" : { "BuildQueueTransferable(List<BuildableType>)" : 1 , "isDataFlavorSupported(DataFlavor)" : 1}},{ "className" : "net::sf::freecol::common::networking::RenameMessage" , "selectors" : { "RenameMessage(FreeColGameObject,String)" : 1 , "RenameMessage(Game,Element)" : 1 , "getXMLElementTagName()" : 2 , "handle(FreeColServer,Player,Connection)" : 1}},{ "className" : "net::sf::freecol::common::model::ProductionMap::ProductionTree" , "selectors" : { "ProductionTree(AbstractGoods,AbstractGoods[])" : 1 , "add(AbstractGoods)" : 2 , "get(GoodsType)" : 1 , "remove(AbstractGoods)" : 1}},{ "className" : "net::sf::freecol::common::networking::ClaimLandMessage" , "selectors" : { "ClaimLandMessage(Game,Element)" : 1 , "ClaimLandMessage(Tile,Settlement,int)" : 2 , "getXMLElementTagName()" : 2 , "handle(FreeColServer,Player,Connection)" : 1}},{ "className" : "net::sf::freecol::common::model::TradeRoute::Stop" , "selectors" : { "Stop(Location)" : 2 , "Stop(Stop)" : 3 , "addCargo(GoodsType)" : 3 , "getCargo()" : 7 , "getLocation()" : 13 , "isValid()" : 2 , "setCargo(List<GoodsType>)" : 2 , "setModified(boolean)" : 2}},{ "className" : "net::sf::freecol::common::networking::NewLandNameMessage" , "selectors" : { "NewLandNameMessage(Game,Element)" : 3 , "NewLandNameMessage(Unit,String,Player,int,boolean)" : 2 , "getCamps()" : 1 , "getNewLandName()" : 1 , "getUnit(Game)" : 1 , "getWelcomer(Game)" : 1 , "getXMLElementTagName()" : 2 , "handle(FreeColServer,Player,Connection)" : 1 , "setAccept(boolean)" : 1 , "toXMLElement()" : 1}},{ "className" : "net::sf::freecol::common::model::TradeRouteStop" , "selectors" : { "getXMLElementTagName()" : 1 , "readFromXMLImpl(XMLStreamReader,Game)" : 1}},{ "className" : "net::sf::freecol::client::gui::action::ToggleViewModeAction" , "selectors" : { "ToggleViewModeAction(FreeColClient)" : 1}},{ "className" : "net::sf::freecol::client::gui::FullScreenFrame" , "selectors" : { "FullScreenFrame(GraphicsDevice)" : 2 , "setCanvas(Canvas)" : 1}},{ "className" : "net::sf::freecol::common::model::FoundingFather" , "selectors" : { "FoundingFather(String,Specification)" : 10 , "fixup09x()" : 1 , "getEvents()" : 2 , "getScopes()" : 2 , "getType()" : 7 , "getTypeKey()" : 2 , "getTypeKey(FoundingFatherType)" : 3 , "getUnits()" : 2 , "getUpgrades()" : 2 , "getWeight(int)" : 12 , "getXMLElementTagName()" : 2 , "isAvailableTo(Player)" : 3 , "readChild(XMLStreamReader)" : 1 , "setEvents(List<Event>)" : 1 , "setType(FoundingFatherType)" : 9 , "setUnits(List<AbstractUnit>)" : 1 , "setUpgrades(Map<UnitType,UnitType>)" : 1}},{ "className" : "net::sf::freecol::common::model::ResourceType" , "selectors" : { "getBestGoodsType()" : 1 , "getMaxValue()" : 5 , "getMinValue()" : 2 , "getProductionModifier(GoodsType,UnitType)" : 3 , "getXMLElementTagName()" : 1}},{ "className" : "net::sf::freecol::common::model::Map::BorderAdjacentIterator" , "selectors" : { "BorderAdjacentIterator(Position)" : 1}},{ "className" : "net::sf::freecol::common::model::Player::Stance" , "selectors" : { "badStance()" : 5 , "badTransition(Stance)" : 5 , "getStanceFromTension(Tension)" : 1 , "getTensionModifier(Stance)" : 2}},{ "className" : "net::sf::freecol::server::generator::LandGenerator" , "selectors" : { "LandGenerator(OptionGroup,Random)" : 1 , "addLandmass(int,int)" : 3 , "addLandmass(int,int,int,int)" : 2 , "addPolarRegions()" : 4 , "cleanMap()" : 3 , "createClassicLandMap()" : 1 , "createLandMap()" : 1 , "growLand(int,int)" : 1 , "importLandMap(Game)" : 1 , "isSingleTile(int,int)" : 4 , "setLand(int,int)" : 2}},{ "className" : "net::sf::freecol::client::gui::plaf::FreeColTextAreaUI" , "selectors" : { "FreeColTextAreaUI(JComponent)" : 1}},{ "className" : "net::sf::freecol::client::gui::menu::FreeColMenuBar" , "selectors" : { "FreeColMenuBar(FreeColClient)" : 2 , "buildColopediaMenu()" : 2 , "getCheckBoxMenuItem(String)" : 7 , "getMenuItem(String)" : 70 , "getRadioButtonMenuItem(String,ButtonGroup)" : 2 , "paintComponent(Graphics)" : 1 , "reset()" : 1 , "update()" : 5}},{ "className" : "net::sf::freecol::client::gui::panel::UnitLabel" , "selectors" : { "UnitLabel(Unit,Canvas)" : 9 , "UnitLabel(Unit,Canvas,boolean)" : 8 , "UnitLabel(Unit,Canvas,boolean,boolean)" : 8 , "canUnitBeEquipedWith(JLabel)" : 1 , "getCanvas()" : 5 , "getDescriptionLabel()" : 1 , "getUnit()" : 36 , "setDescriptionLabel(String)" : 4 , "setIgnoreLocation(boolean)" : 4 , "setSelected(boolean)" : 6 , "setSmall(boolean)" : 7 , "updateIcon()" : 8}},{ "className" : "net::sf::freecol::common::networking::AssignTradeRouteMessage" , "selectors" : { "AssignTradeRouteMessage(Game,Element)" : 1 , "AssignTradeRouteMessage(Unit,TradeRoute)" : 1 , "getXMLElementTagName()" : 2 , "handle(FreeColServer,Connection)" : 1}},{ "className" : "net::sf::freecol::client::gui::option::StringOptionUI::ChoiceRenderer" , "selectors" : { "ChoiceRenderer()" : 1}},{ "className" : "net::sf::freecol::common::model::UnitType" , "selectors" : { "UnitType(String,Specification)" : 3 , "canBeUpgraded(UnitType,ChangeType)" : 13 , "canCarryGoods()" : 9 , "canCarryUnits()" : 5 , "compareTo(UnitType)" : 1 , "getConsumedGoods()" : 4 , "getConsumptionOf(GoodsType)" : 7 , "getDefaultEquipment()" : 7 , "getDefaultEquipmentType()" : 7 , "getDefence()" : 11 , "getEducationTurns(UnitType)" : 2 , "getEducationUnit(int)" : 2 , "getExpertProduction()" : 29 , "getHitPoints()" : 5 , "getLineOfSight()" : 3 , "getMaximumAttrition()" : 1 , "getMaximumExperience()" : 3 , "getMovement()" : 7 , "getOffence()" : 11 , "getPrice()" : 4 , "getPriority()" : 1 , "getRecruitProbability()" : 1 , "getScoreValue()" : 11 , "getSkill()" : 9 , "getSkillTaught()" : 3 , "getSpace()" : 12 , "getSpaceTaken()" : 6 , "getTargetType(ChangeType,Player)" : 22 , "getTypeChanges()" : 6 , "getUnitTypeChange(ChangeType,Player)" : 4 , "getUnitTypeChange(UnitType)" : 2 , "getUnitTypesLearntInLostCity()" : 3 , "getWorkingAsKey()" : 1 , "getXMLElementTagName()" : 1 , "hasPrice()" : 4 , "hasSkill()" : 10 , "isAvailableTo(Player)" : 27 , "isNaval()" : 1 , "isRecruitable()" : 9 , "setSkill(int)" : 1 , "setSpace(int)" : 2 , "setSpaceTaken(int)" : 7 , "toString()" : 4}},{ "className" : "net::sf::freecol::common::networking::LoadCargoMessage" , "selectors" : { "LoadCargoMessage(Game,Element)" : 1 , "LoadCargoMessage(Goods,Unit)" : 2 , "getXMLElementTagName()" : 2 , "handle(FreeColServer,Player,Connection)" : 1}},{ "className" : "net::sf::freecol::client::gui::action::ShowDifficultyAction" , "selectors" : { "ShowDifficultyAction(FreeColClient)" : 1}},{ "className" : "net::sf::freecol::client::gui::panel::DifficultyDialog" , "selectors" : { "DifficultyDialog(Canvas,OptionGroup)" : 1 , "DifficultyDialog(Canvas,Specification)" : 2 , "getSpecification()" : 1}},{ "className" : "net::sf::freecol::util::test::MockPseudoRandom" , "selectors" : { "MockPseudoRandom()" : 1 , "MockPseudoRandom(List<Integer>,boolean)" : 3 , "getNext()" : 2 , "setNextNumbers(List<Integer>,boolean)" : 1}},{ "className" : "net::sf::freecol::client::gui::plaf::FreeColComboBoxRenderer::SelectedComponent" , "selectors" : { "SelectedComponent()" : 1}},{ "className" : "net::sf::freecol::common::option::BooleanOption" , "selectors" : { "BooleanOption(String)" : 2 , "BooleanOption(XMLStreamReader)" : 1 , "getValue()" : 21 , "getXMLElementTagName()" : 2 , "setValue(Boolean)" : 37}},{ "className" : "net::sf::freecol::server::ai::mission::Mission" , "selectors" : { "Mission(AIMain)" : 30 , "Mission(AIMain,AIUnit)" : 17 , "dispose()" : 7 , "doMission(Connection)" : 2 , "findNearestColony(Unit)" : 3 , "findTarget(int)" : 2 , "getAIUnit()" : 38 , "getDebuggingInfo()" : 1 , "getTransportDestination()" : 2 , "getTransportPriority()" : 1 , "getUnit()" : 225 , "isOneTime()" : 1 , "isValid()" : 26 , "isValid(AIUnit)" : 3 , "moveButDontAttack(Direction)" : 11 , "moveRandomly(Connection)" : 6 , "moveTowards(PathNode)" : 12 , "moveTowards(Tile)" : 7 , "moveUnitToAmerica()" : 2 , "moveUnitToEurope()" : 3 , "readAttributes(XMLStreamReader)" : 9 , "sellCargoInEurope(Goods)" : 2 , "setAIUnit(AIUnit)" : 1 , "unitLeavesShip(AIUnit)" : 3 , "unloadCargoInColony(Goods)" : 2 , "writeAttributes(XMLStreamWriter)" : 9}},{ "className" : "net::sf::freecol::server::FreeColServer" , "selectors" : { "FreeColServer(FreeColSavegameFile,int,String)" : 4 , "FreeColServer(FreeColSavegameFile,int,String,Specification)" : 2 , "FreeColServer(Specification,boolean,boolean,int,String)" : 3 , "FreeColServer(Specification,boolean,boolean,int,String,Advantages)" : 3 , "addAIPlayer(Nation)" : 3 , "addBooleanOption(String,String,boolean)" : 5 , "addIntegerOption(String,String,int)" : 4 , "addStringOption(String,String,String)" : 1 , "createXMLStreamReader(FreeColSavegameFile)" : 4 , "fixGameOptions()" : 2 , "getAIMain()" : 46 , "getAIPlayer(Player)" : 6 , "getActiveUnit()" : 4 , "getAdjacentIndianSettlementSafely(String,Unit)" : 5 , "getAdjacentSettlementSafely(String,Unit)" : 5 , "getController()" : 10 , "getGame()" : 62 , "getGameState()" : 10 , "getHighScores()" : 2 , "getInGameController()" : 80 , "getInGameInputHandler()" : 4 , "getIntegrity()" : 1 , "getMapGenerator()" : 8 , "getNumberOfLivingHumanPlayers()" : 1 , "getOwner()" : 2 , "getPlayer(Connection)" : 81 , "getPreGameInputHandler()" : 1 , "getRandomState(Random)" : 1 , "getSavegameVersion(XMLStreamReader)" : 2 , "getServer()" : 19 , "getServerRandom()" : 2 , "getSlotsAvailable()" : 1 , "getSpecification()" : 9 , "getUnitSafely(String,ServerPlayer)" : 45 , "getUserConnectionHandler()" : 1 , "isSingleplayer()" : 8 , "loadGame(FreeColSavegameFile)" : 1 , "loadGame(FreeColSavegameFile,Specification)" : 2 , "loadHighScores()" : 1 , "newHighScore(Player)" : 1 , "removeAutosaves(String)" : 1 , "removeFromMetaServer()" : 1 , "restoreRandomState(String)" : 1 , "revealMapForAllPlayers()" : 1 , "saveGame(File,String,OptionGroup)" : 3 , "saveGame(File,String,OptionGroup,BufferedImage)" : 3 , "saveHighScores()" : 1 , "setAIMain(AIMain)" : 2 , "setActiveUnit(Unit)" : 2 , "setGameState(GameState)" : 1 , "setMapGenerator(MapGenerator)" : 1 , "shutdown()" : 1 , "startMetaServerUpdateThread()" : 2 , "updateMetaServer()" : 6 , "updateMetaServer(boolean)" : 3 , "v11FixServerObjects(List<String>,FreeColSavegameFile)" : 1}},{ "className" : "net::sf::freecol::client::gui::action::ReportIndianAction" , "selectors" : { "ReportIndianAction(FreeColClient)" : 1}},{ "className" : "net::sf::freecol::client::gui::action::ChatAction" , "selectors" : { "ChatAction(FreeColClient)" : 1}},{ "className" : "net::sf::freecol::client::gui::panel::ColonyPanel::TilePanel::ASingleTilePanel" , "selectors" : { "ASingleTilePanel(ColonyTile,int,int)" : 1 , "add(Component,boolean)" : 1 , "addPropertyChangeListeners()" : 1 , "initialize()" : 2 , "initializeAsCenterTile()" : 1 , "removePropertyChangeListeners()" : 1 , "tryWork(Unit)" : 1 , "updateDescriptionLabel(UnitLabel,boolean)" : 1}},{ "className" : "net::sf::freecol::server::ai::WorkLocationPlan" , "selectors" : { "WorkLocationPlan(AIMain,WorkLocation,GoodsType)" : 9 , "createTileImprovementPlan()" : 1 , "findBestTileImprovementType(Tile,GoodsType)" : 27 , "getGoodsType()" : 23 , "getImprovementValue(Tile,GoodsType,TileImprovementType)" : 2 , "getProductionOf(GoodsType)" : 6 , "getWorkLocation()" : 33 , "getXMLElementTagName()" : 1 , "readFromXMLElement(Element)" : 1 , "setGoodsType(GoodsType)" : 4 , "updateTileImprovementPlan(TileImprovementPlan)" : 2}},{ "className" : "net::sf::freecol::common::networking::DeclareIndependenceMessage" , "selectors" : { "DeclareIndependenceMessage(Game,Element)" : 1 , "DeclareIndependenceMessage(String,String)" : 1 , "getXMLElementTagName()" : 2 , "handle(FreeColServer,Player,Connection)" : 1}},{ "className" : "net::sf::freecol::server::model::ServerPlayerTest" , "selectors" : { "buyUntilPriceRise(Game,ServerPlayer,GoodsType)" : 2 , "sellUntilPriceDrop(Game,ServerPlayer,GoodsType)" : 2}},{ "className" : "net::sf::freecol::common::model::MarketData" , "selectors" : { "MarketData(Game,GoodsType)" : 2 , "MarketData(Game,XMLStreamReader)" : 1 , "getAmountInMarket()" : 2 , "getArrears()" : 1 , "getCostToBuy()" : 5 , "getGoodsType()" : 1 , "getIncomeAfterTaxes()" : 2 , "getIncomeBeforeTaxes()" : 2 , "getInitialPrice()" : 1 , "getOldPrice()" : 3 , "getPaidForSale()" : 3 , "getSales()" : 2 , "getTraded()" : 1 , "getXMLElementTagName()" : 2 , "price()" : 2 , "setAmountInMarket(int)" : 1 , "setArrears(int)" : 1 , "setIncomeAfterTaxes(int)" : 1 , "setIncomeBeforeTaxes(int)" : 1 , "setInitialPrice(int)" : 1 , "setOldPrice(int)" : 1 , "setSales(int)" : 1 , "setTraded(boolean)" : 2}},{ "className" : "net::sf::freecol::client::gui::panel::TradeRouteInputDialog::StopHandler" , "selectors" : { "StopHandler()" : 1 , "canImport(JComponent,DataFlavor[])" : 1}},{ "className" : "net::sf::freecol::common::networking::CloseTransactionMessage" , "selectors" : { "CloseTransactionMessage(Game,Element)" : 1 , "CloseTransactionMessage(Unit,Settlement)" : 2 , "getXMLElementTagName()" : 2 , "handle(FreeColServer,Player,Connection)" : 1}},{ "className" : "net::sf::freecol::common::networking::MoveToMessage" , "selectors" : { "MoveToMessage(Game,Element)" : 1 , "MoveToMessage(Unit,Location)" : 2 , "getXMLElementTagName()" : 2 , "handle(FreeColServer,Player,Connection)" : 1}},{ "className" : "net::sf::freecol::client::gui::FAFile::FALetter" , "selectors" : { "FALetter()" : 1}},{ "className" : "net::sf::freecol::client::gui::panel::ChoiceDialog<T>" , "selectors" : { "ChoiceDialog(Canvas,String,String,List<ChoiceItem<T>>)" : 2 , "ChoiceDialog(Canvas,String,String,List<ChoiceItem<T>>)::MigLayout" : 1}},{ "className" : "net::sf::freecol::client::control::InGameInputHandler::ShowMonarchPanelSwingTask" , "selectors" : { "ShowMonarchPanelSwingTask(MonarchAction,StringTemplate)" : 1 , "confirm()" : 1}},{ "className" : "javax::swing::JSpinner" , "selectors" : { "JSpinner()" : 8 , "JSpinner(SpinnerModel)" : 28 , "addChangeListener(ChangeListener)" : 19 , "getEditor()" : 2 , "getModel()" : 68 , "getValue()" : 57 , "javax" : 42 , "setEditor(JComponent)" : 5 , "setModel(SpinnerModel)" : 45 , "setValue(Object)" : 52}},{ "className" : "net::sf::freecol::client::gui::panel::ReportEducationPanel" , "selectors" : { "ReportEducationPanel(Canvas)" : 1 , "ReportEducationPanel(Canvas)::MigLayout" : 1 , "getPanel(String)" : 2}},{ "className" : "net::sf::freecol::server::model::TradeSession" , "selectors" : { "TradeSession(Unit,Settlement)" : 1 , "complete(ChangeSet)" : 1 , "getActionTaken()" : 1 , "getBuy()" : 3 , "getGift()" : 2 , "getMovesLeft()" : 1 , "getSell()" : 3 , "setBuy()" : 1 , "setGift()" : 1 , "setSell()" : 1}},{ "className" : "net::sf::freecol::server::control::PreGameInputHandler" , "selectors" : { "PreGameInputHandler(FreeColServer)" : 2 , "available(Connection,Element)" : 1 , "nation(Connection,Element)" : 1 , "nationType(Connection,Element)" : 1 , "ready(Connection,Element)" : 1 , "requestLaunch(Connection,Element)" : 1 , "updateGameOptions(Connection,Element)" : 1 , "updateMapGeneratorOptions(Connection,Element)" : 1}},{ "className" : "net::sf::freecol::client::gui::action::ShowMapGeneratorOptionsAction" , "selectors" : { "ShowMapGeneratorOptionsAction(FreeColClient)" : 1}},{ "className" : "net::sf::freecol::server::ai::EuropeanAIPlayer" , "selectors" : { "EuropeanAIPlayer(AIMain,Element)" : 1 , "EuropeanAIPlayer(AIMain,ServerPlayer)" : 2 , "EuropeanAIPlayer(AIMain,XMLStreamReader)" : 3 , "acceptIndianDemand(Unit,Colony,Goods,int)" : 1 , "acceptMercenaryOffer()" : 1 , "acceptTax(int)" : 1 , "bringGifts()" : 1 , "cheat()" : 1 , "cheatEquipmentGoods(Colony,EquipmentType,int)" : 2 , "chooseMilitaryTarget(AIUnit)" : 1 , "chooseMilitaryTarget(AIUnit)::anonymous(GoalDecider)" : 2 , "createAIGoodsInColonies()" : 1 , "createTransportLists()" : 1 , "demandTribute()" : 1 , "ensureColonyMissions()" : 2 , "equipSoldiersOutsideColony(Colony)" : 2 , "getBestTreasureTrain(Tile)" : 3 , "getColonyDefenders(Colony)" : 2 , "getDefendColonyMissionValue(Unit,Colony,int)" : 5 , "getScaledTurns(Map<Location,Integer>,Location)" : 2 , "getTileImprovementPlanIterator()" : 2 , "getTurns(Transportable,TransportMission)" : 1 , "getUnitSeekAndDestroyMissionValue(Unit,Tile,int)" : 8 , "getWishIterator()" : 1 , "giveColonistMission(AIUnit,boolean,Map<UnitType,ArrayList<Wish>>)" : 1 , "giveMilitaryMission(AIUnit)" : 7 , "giveNormalMissions()" : 3 , "hasFewColonies()" : 2 , "reOrganizeSoldiersOfColony(Colony)" : 3 , "rearrangeWorkersInColonies()" : 3 , "recruitAIUnitInEurope(int)" : 2 , "removeAllEquipment(Unit)" : 2 , "removeTileImprovementPlan(TileImprovementPlan)" : 3 , "secureSettlements()" : 1 , "selectFoundingFather(List<FoundingFather>)" : 1 , "startWorking()" : 1 , "switchEquipmentWith(Unit,Unit)" : 8 , "trainAIUnitInEurope(UnitType)" : 4}},{ "className" : "net::sf::freecol::common::model::Europe" , "selectors" : { "Europe(Game,Player)" : 1 , "Europe(Game,String)" : 3 , "add(Locatable)" : 1 , "canBuildEquipment(EquipmentType)" : 1 , "getFeatureContainer()" : 2 , "getNameKey()" : 17 , "getOwner()" : 8 , "getRecruitPrice()" : 4 , "getRecruitable(int)" : 6 , "getUnitPrice(UnitType)" : 16 , "getXMLElementTagName()" : 4 , "hasAbility(String)" : 1 , "hasCarrierWithSpace(int)" : 1 , "increaseRecruitmentDifficulty()" : 1 , "recruitablesDiffer()" : 1 , "setFeatureContainer(FeatureContainer)" : 1 , "setRecruitable(int,UnitType)" : 5 , "toString()" : 1}},{ "className" : "java::util::PriorityQueue<T>" , "selectors" : { "PriorityQueue()" : 2 , "PriorityQueue(int,Comparator<? super E>)" : 8}},{ "className" : "net::sf::freecol::tools::FlagTest::Flag" , "selectors" : { "Flag(int,int)" : 1 , "getCircleOfStars(int)" : 1 , "getGrid(int)" : 1 , "getImage()" : 1 , "getPentagram()" : 5}},{ "className" : "java::util::jar::JarOutputStream" , "selectors" : { "JarOutputStream(OutputStream)" : 15 , "JarOutputStream(OutputStream,Manifest)" : 13 , "java" : 2 , "putNextEntry(ZipEntry)" : 27}},{ "className" : "net::sf::freecol::common::option::AudioMixerOption" , "selectors" : { "AudioMixerOption(XMLStreamReader)" : 1 , "findAudioMixers()" : 2 , "getOptions()" : 1 , "getValue()" : 5 , "getXMLElementTagName()" : 2 , "setValue(MixerWrapper)" : 6 , "tryGetDefaultMixer()" : 1}},{ "className" : "net::sf::freecol::server::ai::REFAIPlayer" , "selectors" : { "REFAIPlayer(AIMain,ServerPlayer)" : 1 , "REFAIPlayer(AIMain,XMLStreamReader)" : 1 , "alreadySeeking(Unit)" : 1 , "getUnitSeekAndDestroyMissionValue(Unit,Tile,int)" : 1 , "initialize(boolean)" : 1}},{ "className" : "net::sf::freecol::client::gui::action::SaveAction" , "selectors" : { "SaveAction(FreeColClient)" : 1}},{ "className" : "net::sf::freecol::tools::TranslationReport::LanguageStatsRecord" , "selectors" : { "LanguageStatsRecord()" : 1}},{ "className" : "net::sf::freecol::server::model::ServerUnit" , "selectors" : { "ServerUnit(Game,Location,Player,UnitType)" : 219 , "ServerUnit(Game,Location,Player,UnitType,EquipmentType[])" : 51 , "collectNewTiles(Tile)" : 2 , "csActivateSentries(Tile,ChangeSet)" : 2 , "csCompleteWork(Random,ChangeSet)" : 1 , "csExploreLostCityRumour(Random,ChangeSet)" : 1 , "csImproveTile(Random,ChangeSet)" : 1 , "csMove(Tile,Random,ChangeSet)" : 4 , "csNativeBurialGround(ChangeSet)" : 2 , "csRemoveEquipment(Settlement,Collection<EquipmentType>,int,Random,ChangeSet)" : 4 , "csRepairUnit(ChangeSet)" : 2 , "getSlowedBy(Tile,Random)" : 1 , "hasWorkAtStop(Stop)" : 1}},{ "className" : "net::sf::freecol::common::model::pathfinding::BaseCostDecider" , "selectors" : { "BaseCostDecider()" : 1 , "getCost(Unit,Tile,Tile,int)" : 3}},{ "className" : "net::sf::freecol::server::control::InputHandler::CurrentPlayerNetworkRequestHandler" , "selectors" : { "handle(Player,Connection,Element)" : 1 , "isCurrentPlayer(Player)" : 1}},{ "className" : "net::sf::freecol::common::model::Player" , "selectors" : { "Player(Game)" : 1 , "Player(Game,Element)" : 3 , "Player(Game,String)" : 6 , "Player(Game,XMLStreamReader)" : 1 , "addFather(FoundingFather)" : 25 , "addHistory(HistoryEvent)" : 1 , "addModelMessage(ModelMessage)" : 7 , "addSettlement(Settlement)" : 6 , "atWarWith(Player)" : 15 , "canAcquireForImprovement(Tile)" : 1 , "canBuildColonies()" : 6 , "canClaimForImprovement(Tile)" : 2 , "canClaimForSettlement(Tile)" : 4 , "canClaimForSettlementReason(Tile)" : 14 , "canClaimFreeCenterTile(Tile)" : 1 , "canClaimToFoundSettlement(Tile)" : 5 , "canClaimToFoundSettlementReason(Tile)" : 11 , "canHaveFoundingFathers()" : 5 , "canMoveToEurope()" : 8 , "canOwnTile(Tile)" : 7 , "canOwnTileReason(Tile)" : 2 , "canRecruitUnits()" : 11 , "canSee(Tile)" : 14 , "canTrade(Goods)" : 8 , "canTrade(Goods,Access)" : 2 , "canTrade(GoodsType)" : 9 , "canTrade(GoodsType,Access)" : 14 , "checkEmigrate()" : 3 , "checkGold(int)" : 41 , "clearModelMessages()" : 2 , "clearOfferedFathers()" : 2 , "divertModelMessages(FreeColGameObject,FreeColGameObject)" : 1 , "equals(Player)" : 10 , "getArrears(Goods)" : 1 , "getArrears(GoodsType)" : 4 , "getAttackedByPrivateers()" : 2 , "getCapitalName()" : 2 , "getColonies()" : 34 , "getColoniesPopulation()" : 1 , "getColony(String)" : 3 , "getColonyValue(Tile)" : 7 , "getCurrentFather()" : 4 , "getDisplayName()" : 2 , "getEntryLocation()" : 10 , "getEurope()" : 98 , "getEuropeNameKey()" : 1 , "getFatherCount()" : 4 , "getFathers()" : 2 , "getFeatureContainer()" : 37 , "getGold()" : 25 , "getHighSeas()" : 12 , "getHistory()" : 3 , "getImmigration()" : 5 , "getImmigrationRequired()" : 4 , "getIncomeAfterTaxes(GoodsType)" : 3 , "getIncomeBeforeTaxes(GoodsType)" : 1 , "getIndependentNationName()" : 1 , "getIndianSettlement(String)" : 1 , "getIndianSettlements()" : 15 , "getIndianSettlementsWithMission(Player)" : 1 , "getLandPrice(Tile)" : 15 , "getLastSale(Location,GoodsType)" : 1 , "getLastSaleString(Location,GoodsType)" : 5 , "getLiberty()" : 3 , "getMarket()" : 58 , "getMarketName()" : 2 , "getMaximumFoodConsumption()" : 6 , "getModelMessages()" : 1 , "getModifierSet(String)" : 2 , "getMonarch()" : 16 , "getMostValuableGoods()" : 2 , "getName()" : 60 , "getNameIndex(String)" : 2 , "getNation()" : 27 , "getNationID()" : 27 , "getNationName()" : 93 , "getNationNameKey()" : 1 , "getNationType()" : 32 , "getNewLandName()" : 7 , "getNewModelMessages()" : 2 , "getNextActiveUnit()" : 1 , "getNextGoingToUnit()" : 1 , "getNumberOfSettlements()" : 4 , "getOfferedFathers()" : 2 , "getOutpostValue(Tile)" : 1 , "getPlayerType()" : 22 , "getPrice(AbstractUnit)" : 4 , "getREFPlayer()" : 20 , "getRebels()" : 7 , "getRecruitPrice()" : 6 , "getRemainingFoundingFatherCost()" : 1 , "getRulerNameKey()" : 2 , "getSales(GoodsType)" : 1 , "getScore()" : 7 , "getSettlement(String)" : 2 , "getSettlementName()" : 8 , "getSettlements()" : 19 , "getSoL()" : 1 , "getSortedColonies(Comparator<Colony>)" : 1 , "getStance(Player)" : 56 , "getTax()" : 12 , "getTension(Player)" : 51 , "getTotalFoundingFatherCost()" : 3 , "getTradeRoutes()" : 10 , "getUnit(String)" : 9 , "getUnitIterator()" : 4 , "getUnits()" : 56 , "getXMLElementTagName()" : 7 , "hasAbility(String)" : 20 , "hasContacted(Player)" : 53 , "hasContactedEuropeans()" : 1 , "hasContactedIndians()" : 1 , "hasExplored(Tile)" : 5 , "hasFather(FoundingFather)" : 3 , "hasNextActiveUnit()" : 2 , "hasNextGoingToUnit()" : 1 , "hasSettlement(Settlement)" : 4 , "hasTraded(GoodsType)" : 1 , "hasVisited(IndianSettlement)" : 2 , "hasZeroSettlements()" : 2 , "incrementImmigration(int)" : 3 , "incrementLiberty(int)" : 3 , "initializeHighSeas()" : 2 , "installSettlementNames(List<String>,Random)" : 4 , "invalidateCanSeeTiles()" : 19 , "isAI()" : 28 , "isAdmin()" : 9 , "isAtWar()" : 4 , "isDead()" : 13 , "isEuropean()" : 67 , "isIndian()" : 57 , "isNewLandNamed()" : 2 , "isREF()" : 17 , "isReady()" : 5 , "isUndead()" : 2 , "isUnknownEnemy()" : 6 , "isWorkForREF()" : 1 , "makeCanSeeTiles(Map)" : 1 , "makeContact(Player,Player)" : 8 , "modifyGold(int)" : 46 , "modifyScore(int)" : 14 , "modifyTension(Player,int)" : 12 , "modifyTension(Player,int,Settlement)" : 3 , "recalculateBellsBonus()" : 6 , "reduceImmigration()" : 1 , "reinitialiseMarket()" : 1 , "removeModelMessages()" : 1 , "removeSettlement(Settlement)" : 4 , "removeTension(Player)" : 1 , "removeUnit(Unit)" : 3 , "resetCanSeeTiles()" : 1 , "resetIterators()" : 2 , "saveSale(LastSale)" : 3 , "setAI(boolean)" : 8 , "setAttackedByPrivateers(boolean)" : 1 , "setCurrentFather(FoundingFather)" : 2 , "setDead(boolean)" : 2 , "setEntryLocation(Location)" : 5 , "setEurope(Europe)" : 1 , "setExplored(Tile)" : 1 , "setExplored(Unit)" : 2 , "setGold(int)" : 3 , "setIndependentNationName(String)" : 2 , "setLiberty(int)" : 2 , "setMonarch(Monarch)" : 1 , "setNameIndex(String,int)" : 2 , "setNation(Nation)" : 3 , "setNationType(NationType)" : 3 , "setNewLandName(String)" : 3 , "setNextActiveUnit(Unit)" : 1 , "setOfferedFathers(List<FoundingFather>)" : 2 , "setPlayerType(PlayerType)" : 5 , "setReady(boolean)" : 5 , "setStance(Player,Stance)" : 40 , "setTax(int)" : 7 , "setTension(Player,Tension)" : 14 , "setTradeRoutes(List<TradeRoute>)" : 2 , "setUnit(Unit)" : 5 , "toString()" : 1 , "updateImmigrationRequired()" : 1 , "writeAttributes(XMLStreamWriter,Player,boolean,boolean)" : 1 , "writeChildren(XMLStreamWriter,Player,boolean,boolean)" : 1}},{ "className" : "net::sf::freecol::common::networking::DemandTributeMessage" , "selectors" : { "DemandTributeMessage(Game,Element)" : 1 , "DemandTributeMessage(Unit,Direction)" : 1 , "getXMLElementTagName()" : 2 , "handle(FreeColServer,Player,Connection)" : 1}},{ "className" : "net::sf::freecol::client::gui::panel::CompactLabourReport" , "selectors" : { "CompactLabourReport(Canvas)" : 1 , "CompactLabourReport(Canvas,UnitData)" : 2 , "addHeader()" : 1 , "addLocationData(LocationData,Colony,int)" : 6 , "addLocationSummary(LocationData,int)" : 1 , "addLocations()" : 1 , "addNonLinkedLocation(LocationData,String,int)" : 2 , "addRow(LocationData,String,String,JLabel,int,int)" : 5 , "addRow(LocationData,String,String,int,int,int)" : 4 , "addUnitTypes()" : 1 , "createButton(String,ActionListener)" : 3 , "createColonyButton(Colony)" : 1 , "createEmptyLabel()" : 6 , "createNonCountedLabel(int)" : 2 , "createNumberLabel(int,String)" : 8 , "createUnitNameButton(String,UnitData)" : 2 , "getGoodsType()" : 1 , "getUnitIcon(UnitType)" : 2 , "initialize()" : 2 , "initialize()::MigLayout" : 2 , "isOverview()" : 7 , "isSummary()" : 2}},{ "className" : "net::sf::freecol::server::ai::goal::CreateMissionAtSettlementGoal" , "selectors" : { "CreateMissionAtSettlementGoal(AIPlayer,Goal,float,AIUnit,IndianSettlement)" : 1}},{ "className" : "net::sf::freecol::common::model::TileItemContainer" , "selectors" : { "TileItemContainer(Game,Tile)" : 16 , "TileItemContainer(Game,Tile,XMLStreamReader)" : 1 , "addRiver(int,int)" : 2 , "addTileItem(TileItem)" : 25 , "contains(TileItem)" : 1 , "copyFrom(TileItemContainer)" : 1 , "copyFrom(TileItemContainer,boolean,boolean)" : 5 , "dispose()" : 1 , "findTileImprovementType(TileImprovementType)" : 2 , "getImprovement(TileImprovementType)" : 2 , "getImprovements()" : 3 , "getImprovements(boolean)" : 2 , "getLabel()" : 1 , "getLostCityRumour()" : 10 , "getMoveCost(int,Tile)" : 1 , "getProductionBonus(GoodsType,UnitType)" : 1 , "getResource()" : 14 , "getRiver()" : 8 , "getRoad()" : 8 , "getTileItems()" : 4 , "getTotalBonusPotential(GoodsType,UnitType,int,boolean)" : 3 , "getXMLElementTagName()" : 2 , "hasImprovement(TileImprovementType)" : 1 , "invalidateCache()" : 8 , "removeAll(Class<T>)" : 1 , "removeIncompatibleImprovements()" : 1 , "removeTileItem(TileItem)" : 5}},{ "className" : "net::sf::freecol::client::gui::panel::SelectAmountDialog" , "selectors" : { "SelectAmountDialog(Canvas,GoodsType,int,int,boolean)" : 1 , "SelectAmountDialog(Canvas,GoodsType,int,int,boolean)::MigLayout" : 1}},{ "className" : "net::sf::freecol::client::gui::WindowedFrameListener" , "selectors" : { "WindowedFrameListener(Canvas)" : 2}},{ "className" : "net::sf::freecol::client::gui::plaf::FreeColComboBoxRenderer::NormalComponent" , "selectors" : { "NormalComponent()" : 1}},{ "className" : "net::sf::freecol::common::networking::TrainUnitInEuropeMessage" , "selectors" : { "TrainUnitInEuropeMessage(Game,Element)" : 1 , "TrainUnitInEuropeMessage(UnitType)" : 2 , "getXMLElementTagName()" : 2 , "handle(FreeColServer,Player,Connection)" : 1}},{ "className" : "net::sf::freecol::client::gui::action::GotoTileAction" , "selectors" : { "GotoTileAction(FreeColClient)" : 1}},{ "className" : "net::sf::freecol::common::model::HighScore::Level" , "selectors" : { "getMinimumScore()" : 1 , "values()" : 1}},{ "className" : "java::awt::dnd::DragSourceContext" , "selectors" : { "getComponent()" : 3 , "getTransferable()" : 3 , "setCursor(Cursor)" : 5}},{ "className" : "net::sf::freecol::server::ai::NativeAIPlayer" , "selectors" : { "NativeAIPlayer(AIMain,ServerPlayer)" : 1 , "NativeAIPlayer(AIMain,XMLStreamReader)" : 1 , "bringGifts()" : 1 , "demandTribute()" : 1 , "equipBraves(IndianSettlement)" : 3 , "getBraveForSeekAndDestroy(IndianSettlement)" : 1 , "getMissionaryTradeBonuses(Unit,boolean)" : 2 , "getShipTradePenalties(boolean)" : 2 , "giveMilitaryMission(AIUnit)" : 3 , "giveNormalMissions()" : 2 , "secureIndianSettlement(IndianSettlement)" : 4 , "secureSettlements()" : 1}},{ "className" : "net::sf::freecol::client::gui::plaf::FreeColPopupMenuUI" , "selectors" : { "FreeColPopupMenuUI()" : 1}},{ "className" : "net::sf::freecol::server::ai::AIMessage" , "selectors" : { "askAttack(AIUnit,Direction)" : 7 , "askBuildColony(AIUnit,String)" : 1 , "askBuyGoods(AIUnit,GoodsType,int)" : 3 , "askCashInTreasureTrain(AIUnit)" : 1 , "askChangeState(AIUnit,UnitState)" : 1 , "askChangeWorkImprovementType(AIUnit,TileImprovementType)" : 1 , "askChangeWorkType(AIUnit,GoodsType)" : 7 , "askChooseFoundingFather(Connection,FoundingFather)" : 1 , "askClaimLand(Connection,Tile,Colony,int)" : 3 , "askCloseTransaction(AIUnit,Settlement)" : 1 , "askDeliverGift(AIUnit,Settlement,Goods)" : 1 , "askDisembark(AIUnit)" : 1 , "askEmbark(AIUnit,Unit)" : 1 , "askEmigrate(Connection,int)" : 2 , "askEndTurn(Connection)" : 1 , "askEquipUnit(AIUnit,EquipmentType,int)" : 14 , "askEstablishMission(AIUnit,Direction,boolean)" : 1 , "askGetTransaction(AIUnit,Settlement)" : 1 , "askIndianDemand(AIUnit,Colony,Goods,int)" : 1 , "askLoadCargo(AIUnit,Goods)" : 2 , "askLoot(AIUnit,String,List<Goods>)" : 1 , "askMove(AIUnit,Direction)" : 5 , "askMoveTo(AIUnit,Location)" : 2 , "askScoutIndianSettlement(AIUnit,Direction)" : 1 , "askSellGoods(AIUnit,Goods)" : 1 , "askSetBuildQueue(AIColony,List<BuildableType>)" : 1 , "askTrainUnitInEurope(Connection,UnitType)" : 1 , "askUnloadCargo(AIUnit,Goods)" : 1 , "askWork(AIUnit,WorkLocation)" : 8 , "makeTrivial(String,String[])" : 1 , "sendMessage(Connection,DOMMessage)" : 29 , "sendMessage(Connection,Element)" : 2 , "sendTrivial(Connection,String,String[])" : 2}},{ "className" : "net::sf::freecol::server::control::InputHandler::NetworkRequestHandler" , "selectors" : { "handle(Connection,Element)" : 1}},{ "className" : "net::sf::freecol::client::gui::action::ReportExplorationAction" , "selectors" : { "ReportExplorationAction(FreeColClient)" : 1}},{ "className" : "net::sf::freecol::common::model::Player::ActivePredicate" , "selectors" : { "ActivePredicate(Player)" : 1}},{ "className" : "net::sf::freecol::common::networking::SellPropositionMessage" , "selectors" : { "SellPropositionMessage(Game,Element)" : 1 , "SellPropositionMessage(Unit,Settlement,Goods,int)" : 1 , "getXMLElementTagName()" : 2 , "handle(FreeColServer,Player,Connection)" : 1}},{ "className" : "net::sf::freecol::common::model::TradeRoute" , "selectors" : { "TradeRoute(Game,Element)" : 2 , "TradeRoute(Game,String,Player)" : 1 , "addStop(Stop)" : 2 , "clone()" : 1 , "findLocation(Game,String)" : 1 , "getAssignedUnits()" : 1 , "getCount()" : 3 , "getName()" : 16 , "getOwner()" : 4 , "getStopXMLElementTagName()" : 2 , "getStops()" : 8 , "getXMLElementTagName()" : 3 , "isStopValid(Player,Stop)" : 2 , "isStopValid(Unit,Stop)" : 1 , "replaceStops(List<Stop>)" : 1 , "setCount(int)" : 3 , "setName(String)" : 4 , "setStops(List<Stop>)" : 1 , "updateFrom(TradeRoute)" : 2}},{ "className" : "net::sf::freecol::client::ClientOptions" , "selectors" : { "<Initializer>()::anonymous(Comparator)" : 2 , "ClientOptions()" : 2 , "addBooleanOption(String,String,boolean)" : 4 , "addDefaultOptions()" : 1 , "addDefaultOptions()::anonymous(ListOptionSelector)" : 2 , "addIntegerOption(String,String,int)" : 1 , "fixClientOptions()" : 1 , "getActiveMods()" : 2 , "getBooleanOption(ModelMessage)" : 2 , "getColonyComparator()" : 2 , "getColonyComparator(int)" : 1 , "getDisplayTileText()" : 1 , "getModelMessageComparator()" : 1 , "getSortedColonies(Player)" : 2 , "getXMLElementTagName()" : 2 , "loadOptions(File)" : 1 , "loadOptions(InputStream)" : 2 , "updateFromXML(XMLStreamReader)" : 1 , "updateOptions(File)" : 1 , "updateOptions(InputStream)" : 2}},{ "className" : "net::sf::freecol::client::gui::panel::FreeColDialog::FreeColFileFilter" , "selectors" : { "FreeColFileFilter(String,String)" : 2 , "FreeColFileFilter(String,String,String)" : 1}},{ "className" : "net::sf::freecol::client::gui::panel::BuildingToolTip" , "selectors" : { "BuildingToolTip(Building,Canvas)" : 1 , "BuildingToolTip(Building,Canvas)::MigLayout" : 1}},{ "className" : "net::sf::freecol::common::ServerInfo" , "selectors" : { "ServerInfo()" : 1 , "ServerInfo(Element)" : 1 , "getAddress()" : 3 , "getCurrentlyPlaying()" : 2 , "getGameState()" : 1 , "getName()" : 1 , "getPort()" : 3 , "getSlotsAvailable()" : 1 , "getVersion()" : 1 , "getXMLElementTagName()" : 1 , "readFromXMLElement(Element)" : 1 , "toString()" : 1 , "toXMLElement(Document)" : 1 , "update(String,String,int,int,int,boolean,String,int)" : 3}},{ "className" : "net::sf::freecol::common::model::WorkLocation" , "selectors" : { "WorkLocation(Game)" : 2 , "WorkLocation(Game,Element)" : 2 , "WorkLocation(Game,String)" : 2 , "WorkLocation(Game,XMLStreamReader)" : 2 , "add(Locatable)" : 3 , "canBeWorked()" : 7 , "canTeach()" : 14 , "getColony()" : 44 , "getNoAddReason(Locatable)" : 3 , "getNoWorkReason()" : 1 , "getOwner()" : 4 , "getPotentialProduction(UnitType,GoodsType)" : 4 , "getProductionOf(GoodsType)" : 1 , "getProductionOf(Unit,GoodsType)" : 4 , "getTile()" : 11 , "readAttributes(XMLStreamReader)" : 2 , "remove(Locatable)" : 3 , "setColony(Colony)" : 2 , "writeAttributes(XMLStreamWriter)" : 2}},{ "className" : "net::sf::freecol::client::gui::panel::ErrorPanel" , "selectors" : { "ErrorPanel(Canvas)" : 1 , "ErrorPanel(Canvas)::MigLayout" : 1 , "ErrorPanel(Canvas,String)" : 1 , "ErrorPanel(Canvas,String)::MigLayout" : 1}},{ "className" : "net::sf::freecol::client::gui::action::ReportProductionAction" , "selectors" : { "ReportProductionAction(FreeColClient)" : 1}},{ "className" : "net::sf::freecol::common::option::ListOptionSelector" , "selectors" : { "getId(T)" : 1 , "getObject(String)" : 2 , "getOptions()" : 1 , "toString(T)" : 2}},{ "className" : "net::sf::freecol::client::gui::panel::ReportLabourPanel" , "selectors" : { "ReportLabourPanel(Canvas)" : 1 , "createUnitDetails(UnitType,ReportLabourDetailPanel)" : 1 , "createUnitDetails(UnitType,ReportLabourDetailPanel)::MigLayout" : 1 , "displayData()" : 1 , "displayData()::MigLayout" : 1 , "gatherData()" : 1}},{ "className" : "net::sf::freecol::client::gui::panel::TradeRouteInputDialog::StopRenderer" , "selectors" : { "StopRenderer()" : 1 , "StopRenderer()::MigLayout" : 2}},{ "className" : "net::sf::freecol::common::util::EmptyIterator" , "selectors" : { "getInstance()" : 1}},{ "className" : "net::sf::freecol::server::ai::AIMain" , "selectors" : { "AIMain(FreeColServer)" : 7 , "AIMain(FreeColServer,XMLStreamReader)" : 1 , "addAIObject(String,AIObject)" : 1 , "checkIntegrity()" : 1 , "findNewObjects()" : 1 , "findNewObjects(boolean)" : 2 , "getAIColony(Colony)" : 18 , "getAIObject(FreeColGameObject)" : 2 , "getAIObject(String)" : 22 , "getAIPlayer(Player)" : 28 , "getAIRandom()" : 1 , "getAIStatistics()" : 1 , "getAIUnit(Unit)" : 34 , "getFreeColGameObject(String)" : 10 , "getFreeColServer()" : 3 , "getGame()" : 39 , "getNextID()" : 4 , "getXMLElementTagName()" : 6 , "removeAIObject(String)" : 2 , "setFreeColGameObject(String,FreeColGameObject)" : 2}},{ "className" : "net::sf::freecol::common::model::UnitTypeChange" , "selectors" : { "UnitTypeChange()" : 4 , "UnitTypeChange(XMLStreamReader,Specification)" : 1 , "appliesTo(Player)" : 8 , "asResultOf(ChangeType)" : 6 , "canBeTaught()" : 1 , "getChangeTypes()" : 5 , "getNewUnitType()" : 12 , "getProbability(ChangeType)" : 4 , "getScopes()" : 2 , "getTurnsToLearn()" : 1 , "getXMLElementTagName()" : 1 , "readAttributes(XMLStreamReader,Specification)" : 1 , "readChildren(XMLStreamReader,Specification)" : 1 , "setNewUnitType(UnitType)" : 3 , "toXMLImpl(XMLStreamWriter)" : 1}},{ "className" : "net::sf::freecol::server::control::UserConnectionHandler" , "selectors" : { "UserConnectionHandler(FreeColServer)" : 2 , "disconnect(Connection,Element)" : 1 , "getVacantPlayers(Connection,Element)" : 1 , "login(Connection,XMLStreamReader,XMLStreamWriter)" : 1}},{ "className" : "net::sf::freecol::common::networking::WorkMessage" , "selectors" : { "WorkMessage(Game,Element)" : 1 , "WorkMessage(Unit,WorkLocation)" : 2 , "getXMLElementTagName()" : 2 , "handle(FreeColServer,Player,Connection)" : 1}},{ "className" : "net::sf::freecol::client::gui::panel::DragListener" , "selectors" : { "DragListener(FreeColPanel)" : 4 , "addCarrierItems(UnitLabel,JPopupMenu)" : 1 , "addCommandItems(UnitLabel,JPopupMenu)" : 2 , "addEducationItems(UnitLabel,JPopupMenu)" : 1 , "addEquipmentItems(UnitLabel,JPopupMenu)" : 1 , "addWorkItems(UnitLabel,JPopupMenu)" : 1 , "getGoodsMenu(GoodsLabel)" : 1 , "getUnitMenu(UnitLabel)" : 1}},{ "className" : "net::sf::freecol::client::gui::panel::ChatPanel" , "selectors" : { "ChatPanel(Canvas)" : 1 , "getChatText()" : 1}},{ "className" : "net::sf::freecol::client::gui::GUI" , "selectors" : { "GUI(FreeColClient,Dimension,ImageLibrary)" : 2 , "addMessage(GUIMessage)" : 1 , "centerActiveUnit()" : 1 , "centerImage(Graphics2D,Image)" : 9 , "centerString(Graphics2D,String)" : 3 , "convertToMapTile(int,int)" : 11 , "createCapitalLabel(int,int,Color)" : 1 , "createChip(String,Color,Color,Color)" : 4 , "createLabel(Graphics2D,String,Font,Color)" : 2 , "createLabel(Graphics2D,TextSpecification[],Color)" : 2 , "createReligiousMissionLabel(int,int,Color,boolean)" : 1 , "createStringImage(Graphics,String,Color,Font)" : 8 , "display(Graphics2D)" : 1 , "displayBaseTile(Graphics2D,Tile,boolean)" : 3 , "displayColonyTile(Graphics2D,Tile,Colony)" : 3 , "displayFogOfWar(Graphics2D,Tile)" : 1 , "displayGotoPath(Graphics2D,PathNode)" : 2 , "displayMap(Graphics2D)" : 1 , "displayOptionalValues(Graphics2D,Tile)" : 1 , "displaySettlement(Graphics2D,Tile,boolean)" : 1 , "displayTerrain(Graphics2D,Tile)" : 1 , "displayTileItems(Graphics2D,Tile)" : 2 , "displayTileOverlays(Graphics2D,Tile,boolean,boolean)" : 2 , "displayUnit(Graphics2D,Unit)" : 1 , "drawCursor(Graphics2D)" : 2 , "drawItem(Graphics2D,Tile,TileItem)" : 3 , "drawRoad(Graphics2D,Tile)" : 1 , "enterUnitOutForAnimation(Unit,Tile)" : 1 , "executeWithUnitOutForAnimation(Unit,Tile,OutForAnimationCallback)" : 2 , "forceReposition()" : 6 , "getActiveUnit()" : 49 , "getBreakingPoint(String)" : 3 , "getCursor()" : 4 , "getFocus()" : 36 , "getForegroundColor(Color)" : 4 , "getGotoPath()" : 3 , "getHeight()" : 13 , "getLeftColumns()" : 2 , "getLeftColumns(int)" : 2 , "getMapScale()" : 4 , "getMessage(int)" : 3 , "getMessageCount()" : 5 , "getOccupationIndicatorImage(Graphics,Unit)" : 3 , "getRightColumns()" : 2 , "getRightColumns(int)" : 2 , "getSelectedTile()" : 4 , "getStringBorderColor(Color)" : 1 , "getTileBounds(Tile)" : 4 , "getTileHeight()" : 2 , "getTilePosition(Tile)" : 5 , "getTileWidth()" : 2 , "getUnitImagePositionInTile(Image)" : 1 , "getUnitInFront(Tile)" : 2 , "getUnitLabel(Unit)" : 1 , "getUnitLabelPositionInTile(JLabel,Point)" : 3 , "getViewMode()" : 6 , "getWidth()" : 13 , "isGotoStarted()" : 6 , "isMapNearBottom(int)" : 6 , "isMapNearLeft(int,int)" : 6 , "isMapNearRight(int,int)" : 6 , "isMapNearTop(int)" : 6 , "isOutForAnimation(Unit)" : 1 , "isTileVisible(Tile)" : 3 , "moveTileCursor(Direction)" : 1 , "noActiveUnitIsAt(Tile)" : 1 , "onScreen(Tile)" : 4 , "paintBorders(Graphics2D,Tile,BorderType,boolean)" : 3 , "positionMap()" : 1 , "positionMap(Tile)" : 2 , "redrawMapControls()" : 2 , "releaseUnitOutForAnimation(Unit)" : 1 , "removeOldMessages()" : 1 , "repositionMapIfNeeded()" : 3 , "restartBlinking()" : 1 , "scaleMap(float)" : 3 , "setActiveUnit(Unit)" : 26 , "setFocus(Tile)" : 17 , "setFocusImmediately(Tile)" : 2 , "setGotoPath(PathNode)" : 8 , "setImageLibrary(ImageLibrary)" : 3 , "setOffsetFocus(Tile)" : 1 , "setSelectedTile(Tile,boolean)" : 13 , "setSize(Dimension)" : 1 , "startCursorBlinking()" : 1 , "startGoto()" : 3 , "stopBlinking()" : 1 , "stopGoto()" : 7 , "updateGotoPathForActiveUnit()" : 5 , "updateMapDisplayVariables()" : 2}},{ "className" : "net::sf::freecol::client::gui::panel::PreCombatDialog" , "selectors" : { "PreCombatDialog(Canvas,FreeColGameObject,FreeColGameObject)" : 1 , "PreCombatDialog(Canvas,FreeColGameObject,FreeColGameObject)::MigLayout" : 1 , "addModifier(Modifier,boolean,int)" : 2}},{ "className" : "net::sf::freecol::client::gui::panel::FileList" , "selectors" : { "getDefaultFileFilter()" : 1 , "getEntries(File,FileFilter)" : 2}},{ "className" : "net::sf::freecol::client::gui::action::DeclareIndependenceAction" , "selectors" : { "DeclareIndependenceAction(FreeColClient)" : 1}},{ "className" : "net::sf::freecol::client::gui::animation::UnitMoveAnimation" , "selectors" : { "UnitMoveAnimation(Canvas,Unit,Tile,Tile)" : 1 , "animate()" : 1}},{ "className" : "net::sf::freecol::client::gui::panel::ReportNavalPanel" , "selectors" : { "ReportNavalPanel(Canvas)" : 1 , "ReportNavalPanel(Canvas)::MigLayout" : 1 , "gatherData()" : 1 , "getMinimumSize()" : 1 , "handleLocation(String,boolean)" : 3}},{ "className" : "net::sf::freecol::client::gui::i18n::Relation" , "selectors" : { "Relation(List<String>)" : 2 , "matches(double)" : 1 , "parse(List<String>)" : 1 , "toString()" : 1}},{ "className" : "net::sf::freecol::client::gui::action::ImprovementAction" , "selectors" : { "ImprovementAction(FreeColClient,TileImprovementType)" : 1}},{ "className" : "net::sf::freecol::common::model::DiplomaticTrade" , "selectors" : { "DiplomaticTrade(Game,Element)" : 1 , "DiplomaticTrade(Game,Player,Player)" : 1 , "DiplomaticTrade(Game,Player,Player,List<TradeItem>)" : 1 , "add(TradeItem)" : 5 , "getColoniesGivenBy(Player)" : 1 , "getGoodsGivenBy(Player)" : 2 , "getRecipient()" : 4 , "getSender()" : 6 , "getStance()" : 1 , "getStatus()" : 2 , "getTradeItems()" : 2 , "getXMLElementTagName()" : 1 , "iterator()" : 2 , "remove(int)" : 1 , "removeType(TradeItem)" : 1 , "setStatus(TradeStatus)" : 7}},{ "className" : "net::sf::freecol::server::ai::WorkerWish" , "selectors" : { "WorkerWish(AIMain,Location,int,UnitType,boolean)" : 3 , "WorkerWish(AIMain,String)" : 2 , "WorkerWish(AIMain,XMLStreamReader)" : 1 , "getUnitType()" : 3 , "getXMLElementTagName()" : 6}},{ "className" : "net::sf::freecol::client::gui::panel::NegotiationDialog::StanceTradeItemPanel" , "selectors" : { "StanceTradeItemPanel(NegotiationDialog,Player,Player)" : 1 , "StanceTradeItemPanel(NegotiationDialog,Player,Player)::MigLayout" : 1 , "updateStanceBox()" : 2}},{ "className" : "net::sf::freecol::client::gui::panel::ColorCellRenderer" , "selectors" : { "ColorCellRenderer(boolean)" : 1}},{ "className" : "net::sf::freecol::server::ai::mission::CashInTreasureTrainMission" , "selectors" : { "CashInTreasureTrainMission(AIMain,AIUnit)" : 1 , "CashInTreasureTrainMission(AIMain,XMLStreamReader)" : 1 , "getTransportDestination()" : 1 , "getXMLElementTagName()" : 2}},{ "className" : "net::sf::freecol::common::model::AllTests" , "selectors" : { "suite()::TestSuite" : 1 , "suite(???)" : 1}},{ "className" : "net::sf::freecol::common::model::mission::GoToMission" , "selectors" : { "getXMLElementTagName()" : 1}},{ "className" : "net::sf::freecol::common::networking::GoodsForSaleMessage" , "selectors" : { "GoodsForSaleMessage(Game,Element)" : 1 , "GoodsForSaleMessage(Unit,Settlement,List<Goods>)" : 2 , "getXMLElementTagName()" : 3 , "handle(FreeColServer,Player,Connection)" : 1 , "toXMLElement()" : 1}},{ "className" : "net::sf::freecol::server::ai::mission::PrivateerMission" , "selectors" : { "PrivateerMission(AIMain,AIUnit)" : 1 , "PrivateerMission(AIMain,XMLStreamReader)" : 1 , "dumpCargoInPort(Connection)" : 1 , "findNearestPort()" : 1 , "getModifierValueForTarget(CombatModel,Unit,Unit)" : 1 , "getValidPathForNearestPort()" : 2 , "getXMLElementTagName()" : 2 , "gotoNearestPort(Connection)" : 1 , "hunt4Target(Connection)" : 1 , "isUnitInPort()" : 1 , "isValid()" : 1 , "isValid(AIUnit)" : 3}},{ "className" : "net::sf::freecol::client::gui::panel::LabourData" , "selectors" : { "LabourData(FreeColClient)" : 1 , "gatherData(Player)" : 1 , "getLabourTypes(Player)" : 2 , "getSummary()" : 3 , "getUnitData(UnitType)" : 8 , "incrementColonyCount(Colony,Unit,UnitData)" : 2 , "incrementOutsideWorker(UnitData,Unit,Getter)" : 4 , "incrementOutsideWorker(UnitData,Unit,UnitData,Getter)" : 4 , "summarize()" : 1 , "summarize(UnitData,Getter)" : 4}},{ "className" : "net::sf::freecol::server::model::TaxSession" , "selectors" : { "TaxSession(Monarch,ServerPlayer)" : 1 , "complete(ChangeSet)" : 1 , "setAccepted(boolean)" : 1 , "setGoods(Goods)" : 1 , "setTax(int)" : 1}},{ "className" : "net::sf::freecol::client::gui::panel::DeclarationDialog" , "selectors" : { "DeclarationDialog(Canvas)" : 1 , "initialize()" : 1}},{ "className" : "net::sf::freecol::client::gui::i18n::Rule" , "selectors" : { "Rule(String)" : 3 , "matches(double)" : 7 , "parse(String)" : 1 , "parseCondition(List<String>)" : 2 , "toString()" : 4}},{ "className" : "net::sf::freecol::tools::MergeTranslations" , "selectors" : { "readFile(File)" : 2}},{ "className" : "net::sf::freecol::client::gui::panel::ReportMilitaryPanel" , "selectors" : { "ReportMilitaryPanel(Canvas)" : 1 , "ReportMilitaryPanel(Canvas)::MigLayout" : 1 , "gatherData()" : 1 , "getMinimumSize()" : 1 , "handleLocation(String,boolean)" : 3}},{ "className" : "net::sf::freecol::client::gui::panel::PlayersTable::HeaderRenderer" , "selectors" : { "HeaderRenderer(Component[])" : 1 , "setPressedColumn(int)" : 2}},{ "className" : "java::awt::dnd::DragSourceDropEvent" , "selectors" : { "getDropAction()" : 3 , "getDropSuccess()" : 4}},{ "className" : "net::sf::freecol::server::ai::goal::Goal" , "selectors" : { "Goal(AIPlayer,Goal,float)" : 2 , "Goal(AIPlayer,Goal,float,AIUnit)" : 2 , "addUnit(AIUnit)" : 2 , "addUnitToParent(AIUnit)" : 5 , "canYieldUnit(UnitType,AIObject)" : 1 , "cancelGoal()" : 3 , "doPlanning()" : 1 , "getAbsoluteWeight()" : 3 , "getDebugDescription()" : 6 , "getGoalDescription()" : 7 , "getOwnedAIUnitsIterator()" : 5 , "getParentWeight()" : 1 , "getSubGoalIterator()" : 9 , "getWeight()" : 2 , "getYieldedUnitWeight(UnitType,AIObject)" : 2 , "isFinished()" : 2 , "needsPlanning()" : 2 , "normalizeSubGoalWeights()" : 1 , "plan()" : 1 , "removeUnit(AIUnit)" : 2 , "setNeedsPlanningRecursive(boolean)" : 1 , "setWeight(float)" : 2 , "validateOwnedUnits()" : 3 , "yieldUnit(UnitType,AIObject)" : 1}},{ "className" : "net::sf::freecol::common::model::Specification::TypeSelector" , "selectors" : { "valueOf(String)" : 1}},{ "className" : "java::awt::MenuComponent" , "selectors" : { "dispatchEvent(AWTEvent)" : 2 , "getName()" : 1 , "setFont(Font)" : 1}},{ "className" : "net::sf::freecol::client::gui::action::FreeColAction::InnerMenuKeyListener" , "selectors" : { "InnerMenuKeyListener()" : 1}},{ "className" : "net::sf::freecol::common::networking::PayArrearsMessage" , "selectors" : { "PayArrearsMessage(Game,Element)" : 1 , "PayArrearsMessage(GoodsType)" : 1 , "getXMLElementTagName()" : 2 , "handle(FreeColServer,Player,Connection)" : 1}},{ "className" : "net::sf::freecol::common::model::ProductionMap" , "selectors" : { "ProductionMap()" : 2 , "add(AbstractGoods)" : 4 , "add(List<AbstractGoods>)" : 2 , "get(GoodsType)" : 9 , "remove(AbstractGoods)" : 3 , "remove(List<AbstractGoods>)" : 1}},{ "className" : "net::sf::freecol::common::model::Player::UnitIterator" , "selectors" : { "UnitIterator(Player,UnitPredicate)" : 2 , "hasNext()" : 3 , "next()" : 2 , "reset()" : 5 , "setNext(Unit)" : 1}},{ "className" : "net::sf::freecol::client::gui::panel::LoadingSavegameDialog" , "selectors" : { "LoadingSavegameDialog(Canvas)" : 1 , "getName()" : 1 , "getPort()" : 1 , "initialize(boolean,boolean)" : 1 , "isSingleplayer()" : 1}},{ "className" : "net::sf::freecol::common::model::UnitTypeChange::ChangeType" , "selectors" : { "values()" : 1}},{ "className" : "net::sf::freecol::client::gui::TilePopup" , "selectors" : { "TilePopup(Tile,FreeColClient,Canvas,GUI)" : 1 , "addColony(Colony)" : 1 , "addIndianSettlement(IndianSettlement)" : 1 , "addTile(Tile)" : 1 , "addUnit(Container,Unit,boolean,boolean)" : 2 , "debugAddNewUnitToTile(Game,Tile)" : 1 , "debugSetRumourType(Game,Tile)" : 1 , "debugSummarizeSettlement(Game,IndianSettlement)" : 1 , "hasItem()" : 2}},{ "className" : "net::sf::freecol::common::networking::NewRegionNameMessage" , "selectors" : { "NewRegionNameMessage(Game,Element)" : 3 , "NewRegionNameMessage(Region,Unit,String)" : 2 , "getNewRegionName()" : 2 , "getRegion(Game)" : 1 , "getUnit(Game)" : 1 , "getXMLElementTagName()" : 2 , "handle(FreeColServer,Player,Connection)" : 1 , "toXMLElement()" : 1}},{ "className" : "net::sf::freecol::server::ai::goal::ManageMissionariesGoal" , "selectors" : { "findSettlement(Tile)" : 1}},{ "className" : "net::sf::freecol::common::model::GoodsLocation" , "selectors" : { "GoodsLocation(Game)" : 1 , "GoodsLocation(Game,Element)" : 1 , "GoodsLocation(Game,String)" : 1 , "GoodsLocation(Game,XMLStreamReader)" : 1 , "add(Locatable)" : 3 , "addGoods(AbstractGoods)" : 4 , "addGoods(GoodsType,int)" : 32 , "dispose()" : 6 , "disposeList()" : 2 , "getCompactGoods()" : 3 , "getGoodsCapacity()" : 3 , "getGoodsContainer()" : 29 , "getGoodsCount(GoodsType)" : 146 , "getWarehouseCapacity()" : 26 , "readChild(XMLStreamReader)" : 2 , "remove(Locatable)" : 1 , "removeGoods(AbstractGoods)" : 2 , "removeGoods(GoodsType)" : 1 , "removeGoods(GoodsType,int)" : 4 , "setGoodsContainer(GoodsContainer)" : 2 , "writeChildren(XMLStreamWriter,Player,boolean,boolean)" : 1}},{ "className" : "net::sf::freecol::client::gui::action::MapEditorAction" , "selectors" : { "MapEditorAction(FreeColClient)" : 1}},{ "className" : "net::sf::freecol::server::ai::mission::PrivateerMissionTest" , "selectors" : { "setupPrivateerTestGame()" : 1 , "setupPrivateerTestMap(Game)" : 1}},{ "className" : "net::sf::freecol::common::networking::BuyMessage" , "selectors" : { "BuyMessage(Game,Element)" : 1 , "BuyMessage(Unit,Settlement,Goods,int)" : 1 , "getXMLElementTagName()" : 2 , "handle(FreeColServer,Player,Connection)" : 1}},{ "className" : "net::sf::freecol::client::gui::option::AudioMixerOptionUI" , "selectors" : { "AudioMixerOptionUI(AudioMixerOption,boolean)" : 1 , "getLabel()" : 1 , "reset()" : 1 , "updateMixerLabel()" : 2}},{ "className" : "net::sf::freecol::common::resources::SZAResource" , "selectors" : { "SZAResource(URI)" : 1 , "getSimpleZippedAnimation()" : 2 , "getSimpleZippedAnimation(double)" : 1 , "preload()" : 1}},{ "className" : "net::sf::freecol::client::control::InGameInputHandler::ShowErrorMessageSwingTask" , "selectors" : { "ShowErrorMessageSwingTask(String,String)" : 1}},{ "className" : "net::sf::freecol::client::gui::panel::LabourData::UnitData" , "selectors" : { "UnitData(UnitType)" : 2 , "getDetails()" : 1 , "getExpertProduction()" : 2 , "getLocationData(Colony)" : 6 , "getTotal()" : 7 , "getUnitName()" : 6 , "getUnitSummaryRowCount()" : 2 , "getUnitType()" : 8 , "getUnitsAtSea()" : 1 , "getUnitsInEurope()" : 1 , "getUnitsOnLand()" : 1 , "hasDetails()" : 1 , "isSummary()" : 10 , "showNetProduction()" : 2 , "showProduction()" : 5}},{ "className" : "javax::swing::JSpinner::DefaultEditor" , "selectors" : { "getTextField()" : 2}},{ "className" : "net::sf::freecol::server::control::InGameController" , "selectors" : { "InGameController(FreeColServer,Random)" : 2 , "abandonSettlement(ServerPlayer,Settlement)" : 1 , "abstractUnitTemplate(String,List<AbstractUnit>)" : 3 , "addFoundingFather(ServerPlayer,FoundingFather)" : 7 , "askLearnSkill(ServerPlayer,Unit,IndianSettlement)" : 1 , "assignTeacher(ServerPlayer,Unit,Unit)" : 1 , "assignTradeRoute(ServerPlayer,Unit,TradeRoute)" : 1 , "buildSettlement(ServerPlayer,Unit,String)" : 1 , "buyFromSettlement(ServerPlayer,Unit,IndianSettlement,Goods,int)" : 1 , "buyGoods(ServerPlayer,Unit,GoodsType,int)" : 1 , "buyProposition(ServerPlayer,Unit,Settlement,Goods,int)" : 1 , "cashInTreasureTrain(ServerPlayer,Unit)" : 2 , "changeStance(Player,Stance,Player,boolean)" : 8 , "changeState(ServerPlayer,Unit,UnitState)" : 1 , "changeWorkImprovementType(ServerPlayer,Unit,TileImprovementType)" : 8 , "changeWorkType(ServerPlayer,Unit,GoodsType)" : 2 , "chat(ServerPlayer,String,boolean)" : 1 , "checkHighScore(ServerPlayer)" : 1 , "chooseFoundingFather(ServerPlayer,String)" : 1 , "claimLand(ServerPlayer,Tile,Settlement,int)" : 2 , "clearSpeciality(ServerPlayer,Unit)" : 3 , "closeTransaction(ServerPlayer,Unit,Settlement)" : 1 , "combat(ServerPlayer,FreeColGameObject,FreeColGameObject,List<CombatResult>)" : 38 , "continuePlaying(ServerPlayer)" : 1 , "createREFPlayer(ServerPlayer)" : 2 , "csAcceptTrade(Unit,Settlement,DiplomaticTrade,ChangeSet)" : 1 , "csGiveIndependence(ServerPlayer,ServerPlayer,ChangeSet)" : 1 , "csMonarchAction(ServerPlayer,MonarchAction,ChangeSet)" : 1 , "csSpeakToChief(ServerPlayer,IndianSettlement,boolean,ChangeSet)" : 10 , "declareIndependence(ServerPlayer,String,String)" : 1 , "declineMounds(ServerPlayer,Tile)" : 1 , "deliverGiftToSettlement(ServerPlayer,Unit,Settlement,Goods)" : 1 , "demandTribute(ServerPlayer,Unit,IndianSettlement)" : 1 , "denounceMission(ServerPlayer,Unit,IndianSettlement)" : 1 , "diplomaticTrade(ServerPlayer,Unit,Settlement,DiplomaticTrade)" : 1 , "disbandUnit(ServerPlayer,Unit)" : 1 , "disembarkUnit(ServerPlayer,Unit)" : 1 , "embarkUnit(ServerPlayer,Unit,Unit)" : 6 , "emigrate(ServerPlayer,int,MigrationType)" : 1 , "endTurn(ServerPlayer)" : 3 , "enterRevengeMode(ServerPlayer)" : 1 , "equipUnit(ServerPlayer,Unit,EquipmentType,int)" : 5 , "establishMission(ServerPlayer,Unit,IndianSettlement)" : 4 , "getGoodsForSale(ServerPlayer,Unit,Settlement)" : 1 , "getHighScores(ServerPlayer)" : 1 , "getNationSummary(ServerPlayer,Player)" : 1 , "getNewTradeRoute(ServerPlayer)" : 1 , "getNonPlayerNation()" : 2 , "getOtherPlayers(ServerPlayer[])" : 3 , "getREFUnits(ServerPlayer)" : 1 , "getSkippedTurns()" : 2 , "getStatistics(ServerPlayer)" : 1 , "getTransaction(ServerPlayer,Unit,Settlement)" : 1 , "incite(ServerPlayer,Unit,IndianSettlement,Player,int)" : 1 , "indianDemand(ServerPlayer,Unit,Colony,Goods,int,String)" : 1 , "joinColony(ServerPlayer,Unit,Colony)" : 1 , "learnFromIndianSettlement(ServerPlayer,Unit,IndianSettlement)" : 1 , "loadCargo(ServerPlayer,Unit,Goods)" : 1 , "lootCargo(ServerPlayer,Unit,String,List<Goods>)" : 1 , "monarchOfferMercenaries(ServerPlayer,boolean)" : 1 , "monarchRaiseTax(ServerPlayer,boolean)" : 1 , "move(ServerPlayer,Unit,Tile)" : 10 , "moveGoods(Goods,Location)" : 25 , "moveTo(ServerPlayer,Unit,Location)" : 11 , "payArrears(ServerPlayer,GoodsType)" : 1 , "payForBuilding(ServerPlayer,Colony)" : 1 , "putOutsideColony(ServerPlayer,Unit)" : 1 , "renameObject(ServerPlayer,Nameable,String)" : 1 , "retire(ServerPlayer)" : 1 , "scoutIndianSettlement(ServerPlayer,Unit,IndianSettlement)" : 1 , "sellGoods(ServerPlayer,Unit,GoodsType,int)" : 1 , "sellProposition(ServerPlayer,Unit,Settlement,Goods,int)" : 1 , "sellToSettlement(ServerPlayer,Unit,IndianSettlement,Goods,int)" : 1 , "sendElement(ServerPlayer,ChangeSet)" : 6 , "sendElement(ServerPlayer,Element)" : 2 , "sendToAll(ChangeSet)" : 3 , "sendToList(List<ServerPlayer>,ChangeSet)" : 2 , "sendToList(List<ServerPlayer>,Element)" : 1 , "sendToOthers(ServerPlayer,ChangeSet)" : 34 , "sendToOthers(ServerPlayer,Element)" : 1 , "setBuildQueue(ServerPlayer,Colony,List<BuildableType>)" : 1 , "setDestination(ServerPlayer,Unit,Location)" : 1 , "setGoodsLevels(ServerPlayer,Colony,ExportData)" : 1 , "setMonarchAction(Player,MonarchAction)" : 1 , "setNewLandName(ServerPlayer,Unit,String,ServerPlayer,int,boolean)" : 1 , "setNewRegionName(ServerPlayer,Unit,Region,String)" : 1 , "setSkippedTurns(int)" : 2 , "setTradeRoutes(ServerPlayer,List<TradeRoute>)" : 1 , "spySettlement(ServerPlayer,Unit,Settlement)" : 1 , "stepRandom()" : 1 , "trainUnitInEurope(ServerPlayer,UnitType)" : 1 , "unitTemplate(String,List<Unit>)" : 1 , "unloadCargo(ServerPlayer,Unit,Goods)" : 1 , "updateCurrentStop(ServerPlayer,Unit)" : 1 , "work(ServerPlayer,Unit,WorkLocation)" : 2 , "yearlyGoodsAdjust(ServerPlayer)" : 2}},{ "className" : "net::sf::freecol::client::gui::panel::TradeRouteInputDialog::CargoPanel" , "selectors" : { "CargoPanel()" : 1 , "initialize(Stop)" : 2}},{ "className" : "net::sf::freecol::server::ai::AIColony" , "selectors" : { "AIColony(AIMain,Colony)" : 2 , "AIColony(AIMain,String)" : 1 , "AIColony(AIMain,XMLStreamReader)" : 1 , "bestUnitForWorkLocation(Collection<Unit>,WorkLocation,GoodsType)" : 27 , "canBuildEquipment(EquipmentType)" : 1 , "checkConditionsForHorseBreed()" : 2 , "checkForUnarmedExpertSoldier()" : 1 , "checkForUnequippedExpertPioneer()" : 1 , "colonyCouldProduce(GoodsType)" : 2 , "createAIGoods()" : 1 , "createGoodsWishes()" : 1 , "createTileImprovementPlans()" : 1 , "createWishes()" : 1 , "createWorkerWishes()" : 1 , "decideBuildable(Connection)" : 1 , "getAIGoodsIterator()" : 2 , "getAIOwner()" : 1 , "getAIUnit(Unit)" : 20 , "getAvailableGoods(GoodsType)" : 2 , "getBestDefender(Colony)" : 2 , "getBestVacantTile(Unit,GoodsType)" : 3 , "getColony()" : 10 , "getColonyPlan()" : 1 , "getConnection()" : 2 , "getExperienceUpgrade(Unit,UnitType)" : 2 , "getHammersRequired(BuildableType)" : 1 , "getNextExpert(boolean)" : 1 , "getTileImprovementPlanIterator()" : 2 , "getToolsRequired(BuildableType)" : 1 , "getWishIterator()" : 4 , "getWorkerWishes()" : 1 , "getXMLElementTagName()" : 3 , "isBadlyDefended()" : 3 , "placeExpertsInWorkPlaces(List<Unit>,List<WorkLocationPlan>)" : 1 , "propertyChange(PropertyChangeEvent)" : 8 , "rearrangeWorkers(Connection)" : 8 , "removeAIGoods(AIGoods)" : 1 , "removeTileImprovementPlan(TileImprovementPlan)" : 1 , "removeWish(Wish)" : 1 , "tryUseTile(Tile)" : 2}},{ "className" : "net::sf::freecol::common::model::TileItemContainerTest" , "selectors" : { "getSample(Game,Tile,boolean,boolean,boolean)" : 2}},{ "className" : "net::sf::freecol::common::io::FreeColDataFile" , "selectors" : { "FreeColDataFile(File)" : 5 , "findJarDirectory(String,File)" : 1 , "getFileEndings()" : 2 , "getFileNames(String,String,String,String,String)" : 2 , "getInputStream(String)" : 11 , "getResourceMapping()" : 6 , "getURI(String)" : 5}},{ "className" : "javax::swing::plaf::basic::BasicScrollPaneUI" , "selectors" : { "installUI(JComponent)" : 1 , "paint(Graphics,JComponent)" : 1}},{ "className" : "net::sf::freecol::server::control::InputHandler" , "selectors" : { "InputHandler(FreeColServer)" : 2 , "createErrorReply(String)" : 1 , "logException(Exception)" : 2 , "logout(Connection,Element)" : 2 , "register(String,NetworkRequestHandler)" : 79 , "sendReconnectSafely(Connection)" : 2}},{ "className" : "net::sf::freecol::client::gui::panel::PlayersTable::AvailableCellRenderer" , "selectors" : { "AvailableCellRenderer()" : 1}},{ "className" : "net::sf::freecol::client::gui::panel::BuildingPanel" , "selectors" : { "BuildingPanel(Building,Canvas)" : 4 , "BuildingPanel(Building,Canvas)::MigLayout" : 1 , "addPropertyChangeListeners()" : 1 , "fadeImage(Image,float,float)" : 1 , "getBuilding()" : 1 , "getUnitLabels()" : 1 , "initialize()" : 4 , "removePropertyChangeListeners()" : 1}},{ "className" : "net::sf::freecol::client::gui::panel::ReportTradePanel" , "selectors" : { "ReportTradePanel(Canvas)" : 1 , "ReportTradePanel(Canvas)::MigLayout" : 2 , "createColonyButton(Colony,int)" : 1 , "createLeftLabel(String)" : 6 , "createNumberLabel(int)" : 5 , "createNumberLabel(int,boolean)" : 3 , "getMinimumSize()" : 1}},{ "className" : "net::sf::freecol::common::model::HighScore" , "selectors" : { "HighScore(Element)" : 1 , "HighScore(Player,Date)" : 1 , "HighScore(XMLStreamReader)" : 1 , "getColonies()" : 1 , "getDate()" : 1 , "getDifficulty()" : 1 , "getIndependenceTurn()" : 3 , "getNationName()" : 1 , "getNationTypeID()" : 1 , "getNewLandName()" : 1 , "getOldNationNameKey()" : 1 , "getPlayerName()" : 1 , "getRetirementTurn()" : 1 , "getScore()" : 5 , "getUnits()" : 1 , "getXMLElementTagName()" : 1 , "readFromXMLImpl(XMLStreamReader)" : 1}},{ "className" : "net::sf::freecol::client::gui::action::DisplayBordersAction" , "selectors" : { "DisplayBordersAction(FreeColClient)" : 1}},{ "className" : "net::sf::freecol::common::networking::AssignTeacherMessage" , "selectors" : { "AssignTeacherMessage(Game,Element)" : 1 , "AssignTeacherMessage(Unit,Unit)" : 1 , "getXMLElementTagName()" : 2 , "handle(FreeColServer,Player,Connection)" : 1}},{ "className" : "net::sf::freecol::common::networking::SetGoodsLevelsMessage" , "selectors" : { "SetGoodsLevelsMessage(Colony,ExportData)" : 1 , "SetGoodsLevelsMessage(Game,Element)" : 1 , "getXMLElementTagName()" : 2 , "handle(FreeColServer,Player,Connection)" : 1}},{ "className" : "net::sf::freecol::client::gui::i18n::ZeroOneNumberRule" , "selectors" : { "ZeroOneNumberRule()" : 1}},{ "className" : "net::sf::freecol::client::gui::action::UnloadAction" , "selectors" : { "UnloadAction(FreeColClient)" : 1 , "UnloadAction(FreeColClient,Unit)" : 2 , "getUnit()" : 2}},{ "className" : "net::sf::freecol::FreeCol" , "selectors" : { "<Initializer>()::Options" : 1 , "checkJavaVersion()" : 1 , "completeDebugRun()" : 1 , "createAndSetDirectories()" : 1 , "getAutosaveDirectory()" : 7 , "getClientOptionsFile()" : 2 , "getDataDirectory()" : 13 , "getDebugRunSaveName()" : 2 , "getDebugRunTurns()" : 3 , "getDefaultPort()" : 7 , "getFreeColClient()" : 8 , "getFreeColSeed()" : 2 , "getLocale()" : 1 , "getLogFile()" : 1 , "getOptionsDirectory()" : 5 , "getRevision()" : 4 , "getSaveDirectory()" : 8 , "getStandardModsDirectory()" : 1 , "getUserModsDirectory()" : 1 , "getVersion()" : 8 , "handleArgs(String[])" : 1 , "handleArgs(String[])::PosixParser" : 1 , "incrementFreeColSeed()" : 1 , "initLogging()" : 1 , "insistDirectory(File)" : 5 , "isDebugRunComplete()" : 1 , "isInDebugMode()" : 20 , "isInFullDebugMode()" : 2 , "printUsage()" : 4 , "printUsage()::HelpFormatter" : 1 , "setInDebugMode(boolean)" : 1 , "setSaveDirectory(File)" : 2 , "setSavegame(String)" : 2 , "startServer()" : 1}},{ "className" : "net::sf::freecol::client::gui::animation::UnitAttackAnimation" , "selectors" : { "UnitAttackAnimation(Canvas,Unit,Unit,boolean)" : 1 , "animate()" : 1 , "getAnimation(Canvas,Unit,Direction)" : 2}},{ "className" : "net::sf::freecol::common::networking::ReceivingThread" , "selectors" : { "ReceivingThread(Connection,InputStream,String)" : 1 , "askToStop()" : 3 , "disconnect()" : 3 , "getNextNetworkReplyId()" : 2 , "getRealLevel(Logger)" : 1 , "listen()" : 1 , "shouldRun()" : 2 , "unlock()" : 2 , "waitForNetworkReply(int)" : 1 , "waitForStreamedNetworkReply(int)" : 1}},{ "className" : "net::sf::freecol::client::gui::panel::ColonyPanel::WarehousePanel" , "selectors" : { "WarehousePanel(ColonyPanel)" : 1 , "WarehousePanel(ColonyPanel)::MigLayout" : 1 , "add(Component,boolean)" : 2 , "addPropertyChangeListeners()" : 1 , "cleanup()" : 1 , "initialize()" : 1 , "removePropertyChangeListeners()" : 1 , "update()" : 3}},{ "className" : "net::sf::freecol::client::gui::plaf::FreeColButtonUI" , "selectors" : { "FreeColButtonUI()" : 1 , "paintButtonPressed(Graphics,AbstractButton)" : 1}},{ "className" : "net::sf::freecol::client::gui::Canvas::FrameMotionListener" , "selectors" : { "FrameMotionListener(JInternalFrame)" : 1}},{ "className" : "net::sf::freecol::common::util::Utils" , "selectors" : { "equals(Object,Object)" : 1 , "getRandomMember(Logger,String,List<T>,Random)" : 25 , "join(String,List<String>)" : 10 , "join(String,String[])" : 5 , "randomDouble(Logger,String,Random)" : 1 , "randomInt(Logger,String,Random,int)" : 24}},{ "className" : "net::sf::freecol::client::gui::i18n::MergeTableCellRenderer" , "selectors" : { "MergeTableCellRenderer()" : 1 , "propertyOn(String)" : 2}},{ "className" : "net::sf::freecol::common::resources::FAFileResource" , "selectors" : { "FAFileResource(URI)" : 1 , "getFAFile()" : 1}},{ "className" : "net::sf::freecol::common::networking::ScoutIndianSettlementMessage" , "selectors" : { "ScoutIndianSettlementMessage(Game,Element)" : 1 , "ScoutIndianSettlementMessage(Unit,Direction)" : 2 , "getXMLElementTagName()" : 2 , "handle(FreeColServer,Player,Connection)" : 1}},{ "className" : "net::sf::freecol::server::generator::SimpleMapGenerator" , "selectors" : { "SimpleMapGenerator(Random,Specification)" : 8 , "createDebugUnits(Map,Player,Tile)" : 1 , "createEuropeanUnits(Map,List<Player>)" : 1 , "createIndianSettlements(Map,List<Player>)" : 1 , "createLostCityRumours(Map,Game)" : 1 , "findFreeNeighbouringTile(IndianSettlement,List<Tile>,Random)" : 1 , "findTileFor(Map,int,int,boolean)" : 1 , "generateSkillForLocation(Map,Tile,NationType)" : 1 , "generateStartingPositions(Map,List<Player>)" : 1 , "getClosestTerritory(Tile,List<Territory>)" : 1 , "getClosestTile(Position,List<Tile>)" : 1 , "getLand()" : 1 , "getMapGeneratorOptions()" : 3 , "loadSaveGame(File)" : 1 , "placeIndianSettlement(Player,boolean,Position,Map)" : 2 , "suitableForNativeSettlement(Tile)" : 1}},{ "className" : "net::sf::freecol::server::control::ChangeSet::SpyChange" , "selectors" : { "SpyChange(See,Settlement)" : 1}},{ "className" : "net::sf::freecol::client::gui::panel::MapEditorTransformPanel::LostCityRumourTransform" , "selectors" : { "LostCityRumourTransform()" : 1}},{ "className" : "net::sf::freecol::common::model::Location" , "selectors" : { "add(Locatable)" : 3 , "canAdd(Locatable)" : 1 , "getColony()" : 9 , "getGoodsContainer()" : 7 , "getId()" : 26 , "getLocationName()" : 3 , "getLocationNameFor(Player)" : 27 , "getSettlement()" : 5 , "getTile()" : 106 , "getUnitList()" : 2 , "remove(Locatable)" : 4}},{ "className" : "net::sf::freecol::client::gui::menu::InGameMenuBar" , "selectors" : { "InGameMenuBar(FreeColClient)" : 2 , "buildGameMenu()" : 1 , "buildOrdersMenu()" : 1 , "buildReportMenu()" : 1 , "buildViewMenu()" : 1 , "reset()" : 1}},{ "className" : "net::sf::freecol::client::gui::panel::MapEditorTransformPanel::MapTransform" , "selectors" : { "getDescriptionPanel()" : 1 , "setDescriptionPanel(JPanel)" : 1 , "transform(Tile)" : 1}},{ "className" : "net::sf::freecol::client::gui::option::SelectOptionUI" , "selectors" : { "SelectOptionUI(SelectOption,boolean)" : 1 , "getLabel()" : 1}},{ "className" : "net::sf::freecol::client::gui::panel::TradeRouteInputDialog::CargoLabel" , "selectors" : { "CargoLabel(GoodsType)" : 3 , "getType()" : 4}},{ "className" : "net::sf::freecol::server::control::ChangeSet::PartialObjectChange" , "selectors" : { "PartialObjectChange(See,FreeColGameObject,String[])" : 1}},{ "className" : "net::sf::freecol::client::gui::plaf::FreeColLookAndFeel" , "selectors" : { "FreeColLookAndFeel(File,Dimension)" : 1 , "install(FreeColLookAndFeel,Font)" : 1}},{ "className" : "net::sf::freecol::server::ai::mission::PioneeringMission" , "selectors" : { "PioneeringMission(AIMain,AIUnit)" : 4 , "PioneeringMission(AIMain,XMLStreamReader)" : 1 , "equipUnitWithTools(Connection)" : 1 , "findColonyWithTools(AIUnit)" : 3 , "getPlayerPioneers(AIPlayer)" : 2 , "getTools(Connection)" : 1 , "getTransportDestination()" : 1 , "getXMLElementTagName()" : 2 , "isValid()" : 1 , "isValid(AIUnit)" : 3 , "makeImprovement(Connection)" : 1 , "processImprovementPlan(Connection)" : 1 , "setTileImprovementPlan(TileImprovementPlan)" : 2 , "updateTileImprovementPlan()" : 2 , "validateColonyWithTools()" : 1}},{ "className" : "net::sf::freecol::common::model::GoodsContainer" , "selectors" : { "GoodsContainer(Game,Location)" : 8 , "GoodsContainer(Game,Location,XMLStreamReader)" : 2 , "addGoods(AbstractGoods)" : 1 , "addGoods(GoodsType,int)" : 17 , "contains(Goods)" : 2 , "disposeList()" : 3 , "fireChanges()" : 2 , "getCompactGoods()" : 8 , "getGoods()" : 7 , "getGoods(GoodsType)" : 2 , "getGoodsCount()" : 2 , "getGoodsCount(GoodsType)" : 60 , "getGoodsIterator()" : 2 , "getOldGoodsCount(GoodsType)" : 3 , "getOwner()" : 1 , "getXMLElementTagName()" : 3 , "hasReachedCapacity(int)" : 1 , "removeAbove(int)" : 2 , "removeAll()" : 3 , "removeGoods(AbstractGoods)" : 2 , "removeGoods(GoodsType)" : 2 , "removeGoods(GoodsType,int)" : 12 , "saveState()" : 11 , "setAmount(GoodsType,int)" : 3 , "writeStorage(XMLStreamWriter,String,Map<GoodsType,Integer>)" : 2}},{ "className" : "net::sf::freecol::client::gui::panel::MapEditorTransformPanel::RiverTransform" , "selectors" : { "RiverTransform(int)" : 2}},{ "className" : "net::sf::freecol::client::gui::action::QuitAction" , "selectors" : { "QuitAction(FreeColClient)" : 1}},{ "className" : "net::sf::freecol::AllTests" , "selectors" : { "suite()::TestSuite" : 1}},{ "className" : "net::sf::freecol::client::gui::action::ReportColonyAction" , "selectors" : { "ReportColonyAction(FreeColClient)" : 1}},{ "className" : "net::sf::freecol::client::gui::action::ZoomOutAction" , "selectors" : { "ZoomOutAction(FreeColClient)" : 1}},{ "className" : "net::sf::freecol::server::control::ChangeSet::TrivialChange" , "selectors" : { "TrivialChange(See,String,int,String[])" : 1}},{ "className" : "net::sf::freecol::common::networking::GetTransactionMessage" , "selectors" : { "GetTransactionMessage(Game,Element)" : 1 , "GetTransactionMessage(Unit,Settlement)" : 2 , "getXMLElementTagName()" : 2 , "handle(FreeColServer,Player,Connection)" : 1}},{ "className" : "net::sf::freecol::common::util::Xml" , "selectors" : { "arrayAttribute(Node,String,String)" : 4 , "attribute(Node,String)" : 6 , "booleanAttribute(Node,String)" : 1 , "charAttribute(Node,String)" : 1 , "documentFrom(InputSource)" : 2 , "floatArrayAttribute(Node,String,String)" : 2 , "floatAttribute(Node,String)" : 1 , "hasAttribute(Node,String)" : 8 , "intArrayAttribute(Node,String,String)" : 2 , "intAttribute(Node,String)" : 1 , "parseTruth(String)" : 1}},{ "className" : "net::sf::freecol::common::networking::BuildColonyMessage" , "selectors" : { "BuildColonyMessage(Game,Element)" : 1 , "BuildColonyMessage(String,Unit)" : 2 , "getXMLElementTagName()" : 2 , "handle(FreeColServer,Player,Connection)" : 1}},{ "className" : "net::sf::freecol::client::gui::panel::AdvantageCellEditor::AdvantageRenderer" , "selectors" : { "AdvantageRenderer()" : 1}},{ "className" : "javax::sound::sampled::Mixer" , "selectors" : { "getLine(Info)" : 1 , "getMixerInfo()" : 2}},{ "className" : "net::sf::freecol::client::gui::Canvas" , "selectors" : { "Canvas(FreeColClient,Dimension,GUI)" : 1 , "add(Component)" : 2 , "add(Component,Integer)" : 3 , "add(Component,Integer,boolean)" : 7 , "addAsFrame(JComponent)" : 5 , "addAsFrame(JComponent,boolean)" : 1 , "addAsFrame(JComponent,boolean,PopupPosition)" : 4 , "addAsToolBox(JComponent)" : 1 , "addCentered(Component)" : 1 , "addCentered(Component,Integer)" : 4 , "askToQuit()" : 2 , "closeMainPanel()" : 7 , "closeMenus()" : 12 , "closeStatusPanel()" : 5 , "containsInGameComponents()" : 1 , "createKeyBindings()" : 1 , "debugForeignColony(Settlement)" : 2 , "displayChat(String,String,boolean)" : 1 , "displayChatMessage(Player,String,boolean)" : 2 , "displayChatMessage(String)" : 1 , "errorMessage(String)" : 36 , "errorMessage(String,String)" : 7 , "filterEventPanels(ModelMessage[])" : 1 , "getColonyPanel(Colony)" : 1 , "getColonyTileGUI()" : 1 , "getFreeColClient()" : 39 , "getGUI()" : 25 , "getImageIcon(Object,boolean)" : 11 , "getImageLibrary()" : 18 , "getInternalFrame(Component)" : 1 , "getLoadingSavegameDialog()" : 1 , "getMapControls()" : 1 , "getPopupPosition(Tile)" : 4 , "getShowingSubPanel()" : 2 , "getSpecification()" : 9 , "isClientOptionsDialogShowing()" : 1 , "isMapboardActionsEnabled()" : 3 , "isShowingSubPanel()" : 13 , "newGame()" : 2 , "refresh()" : 23 , "refreshPlayersTable()" : 7 , "refreshTile(Tile)" : 5 , "remove(Component)" : 41 , "remove(Component,boolean)" : 9 , "removeInGameComponents()" : 7 , "retire()" : 1 , "returnToTitle()" : 2 , "showArmedUnitIndianSettlementDialog(IndianSettlement)" : 1 , "showBoycottedGoodsDialog(Goods,Europe)" : 1 , "showBuyDialog(Unit,Settlement,Goods,int,boolean)" : 1 , "showCaptureGoodsDialog(Unit,List<Goods>)" : 1 , "showChatPanel()" : 1 , "showChoiceDialog(Tile,String,String,List<ChoiceItem<T>>)" : 17 , "showChoiceDialog(Tile,StringTemplate,String,List<ChoiceItem<T>>)" : 1 , "showClaimDialog(Tile,Player,int,Player,boolean)" : 1 , "showClientOptionsDialog()" : 1 , "showColonyPanel(Colony)" : 13 , "showColonyPanel(Tile)" : 2 , "showConfirmDeclarationDialog()" : 1 , "showConfirmDialog(String,String,String)" : 11 , "showConfirmDialog(Tile,ModelMessage[],String,String)" : 1 , "showConfirmDialog(Tile,StringTemplate,String,String)" : 19 , "showDeclarationDialog()" : 1 , "showDumpCargoDialog(Unit)" : 1 , "showEmigrationPanel(boolean)" : 2 , "showEuropeDialog(EuropeAction)" : 1 , "showEuropePanel()" : 5 , "showEventPanel(EventType)" : 2 , "showEventPanel(Tile,EventType)" : 1 , "showFreeColDialog(FreeColDialog<T>)" : 28 , "showFreeColDialog(FreeColDialog<T>,Tile)" : 14 , "showFreeColPanel(FreeColPanel)" : 3 , "showFreeColPanel(FreeColPanel,Tile)" : 4 , "showHighScoresPanel(String)" : 3 , "showIndianSettlementPanel(IndianSettlement)" : 3 , "showIndianSettlementTradeDialog(Settlement,boolean,boolean,boolean)" : 1 , "showInformationMessage(FreeColObject,String)" : 8 , "showInformationMessage(FreeColObject,StringTemplate)" : 27 , "showInformationMessage(ModelMessage)" : 1 , "showInformationMessage(String)" : 12 , "showInformationMessage(StringTemplate)" : 6 , "showInputDialog(Tile,StringTemplate,String,String,String,boolean)" : 11 , "showLoadDialog(File)" : 4 , "showLoadDialog(File,FileFilter[])" : 3 , "showLoadingSavegameDialog(boolean,boolean)" : 1 , "showMainPanel()" : 9 , "showModelMessages(ModelMessage[])" : 2 , "showNegotiationDialog(Unit,Settlement,DiplomaticTrade)" : 2 , "showOpeningVideoPanel()" : 1 , "showOpeningVideoPanel()::AbortListener" : 4 , "showPanel(FreeColPanel)" : 38 , "showPanel(FreeColPanel,boolean)" : 2 , "showPopup(JPopupMenu,int,int)" : 1 , "showPreCombatDialog(FreeColGameObject,FreeColGameObject,Tile)" : 1 , "showReportTurnPanel(ModelMessage[])" : 1 , "showSaveDialog(File,String)" : 2 , "showSaveDialog(File,String,FileFilter[],String)" : 2 , "showScoutForeignColonyDialog(Colony,Unit,boolean)" : 1 , "showScoutIndianSettlementDialog(IndianSettlement,String)" : 1 , "showSelectDestinationDialog(Unit)" : 2 , "showSellDialog(Unit,Settlement,Goods,int)" : 1 , "showServerListPanel(String,ArrayList<ServerInfo>)" : 1 , "showSettlement(Settlement)" : 1 , "showSimpleChoiceDialog(Tile,String,String,List<T>)" : 5 , "showStartGamePanel(Game,Player,boolean)" : 2 , "showStatusPanel(String)" : 5 , "showSubPanel(FreeColPanel)" : 11 , "showSubPanel(FreeColPanel,PopupPosition)" : 4 , "showTilePopup(Tile,int,int)" : 2 , "showTradeRouteDialog(Unit)" : 1 , "showUseMissionaryDialog(Unit,IndianSettlement,boolean,boolean)" : 1 , "takeFocus()" : 1 , "updateGameOptions()" : 1 , "updateGoldLabel()" : 14 , "updateMapGeneratorOptions()" : 1 , "updateSizes()" : 2}},{ "className" : "net::sf::freecol::client::gui::panel::SelectDestinationDialog::DestinationComparator" , "selectors" : { "DestinationComparator(Player)" : 3}},{ "className" : "net::sf::freecol::common::networking::ServerAPI" , "selectors" : { "ServerAPI(FreeColClient)" : 1 , "abandonColony(Colony)" : 1 , "answerMonarch(MonarchAction,boolean)" : 2 , "askExpecting(DOMMessage,String,HashMap<String,String>)" : 7 , "askHandling(DOMMessage,String,HashMap<String,String>)" : 60 , "askSkill(Unit,Direction)" : 1 , "assignTeacher(Unit,Unit)" : 1 , "assignTradeRoute(Unit,TradeRoute)" : 1 , "attack(Unit,Direction)" : 1 , "buildColony(String,Unit)" : 1 , "buyFromSettlement(Unit,Settlement,Goods,int)" : 1 , "buyGoods(Unit,GoodsType,int)" : 1 , "buyProposition(Unit,Settlement,Goods,int)" : 1 , "cashInTreasureTrain(Unit)" : 1 , "changeState(Unit,UnitState)" : 2 , "changeWorkImprovementType(Unit,TileImprovementType)" : 1 , "changeWorkType(Unit,GoodsType)" : 1 , "chat(String)" : 1 , "checkHighScore()" : 1 , "chooseFoundingFather(FoundingFather)" : 1 , "claimLand(Tile,Colony,int)" : 1 , "clearSpeciality(Unit)" : 1 , "closeTransactionSession(Unit,Settlement)" : 1 , "declareIndependence(String,String)" : 1 , "declineMounds(Unit,Direction)" : 1 , "deliverGiftToSettlement(Unit,Settlement,Goods)" : 2 , "demandTribute(Unit,Direction)" : 1 , "diplomacy(Unit,Settlement,DiplomaticTrade)" : 2 , "disbandUnit(Unit)" : 1 , "disembark(Unit)" : 1 , "embark(Unit,Unit,Direction)" : 2 , "emigrate(int)" : 2 , "endTurn()" : 1 , "enterRevengeMode()" : 1 , "equipUnit(Unit,EquipmentType,int)" : 1 , "getGoodsForSaleInSettlement(Unit,Settlement)" : 1 , "getHighScores()" : 1 , "getNationSummary(Player)" : 1 , "getNewTradeRoute()" : 1 , "getREFUnits()" : 1 , "getStatistics()" : 1 , "incite(Unit,Direction,Player,int)" : 2 , "joinColony(Unit,Colony)" : 1 , "learnSkill(Unit,Direction)" : 1 , "loadCargo(Goods,Unit)" : 1 , "loadMap(String[])" : 7 , "loot(Unit,String,List<Goods>)" : 1 , "missionary(Unit,Direction,boolean)" : 2 , "move(Unit,Direction)" : 1 , "moveTo(Unit,Location)" : 2 , "newLandName(Unit,String,Player,boolean)" : 1 , "newRegionName(Region,Unit,String)" : 1 , "openTransactionSession(Unit,Settlement)" : 1 , "payArrears(GoodsType)" : 1 , "payForBuilding(Colony)" : 1 , "putOutsideColony(Unit)" : 1 , "rename(FreeColGameObject,String)" : 1 , "retire()" : 1 , "scoutSpeak(Unit,Direction)" : 1 , "sellGoods(Goods,Unit)" : 1 , "sellProposition(Unit,Settlement,Goods,int)" : 1 , "sellToSettlement(Unit,Settlement,Goods,int)" : 1 , "send(DOMMessage)" : 3 , "setBuildQueue(Colony,List<BuildableType>)" : 1 , "setDestination(Unit,Location)" : 1 , "setGoodsLevels(Colony,ExportData)" : 1 , "setTradeRoutes(List<TradeRoute>)" : 1 , "spy(Unit,Direction)" : 1 , "startSkipping()" : 1 , "trainUnitInEurope(UnitType)" : 1 , "unloadCargo(Goods)" : 1 , "updateCurrentStop(Unit)" : 1 , "updateTradeRoute(TradeRoute)" : 1 , "work(Unit,WorkLocation)" : 1}},{ "className" : "javax::swing::JToolTip" , "selectors" : { "getComponent()" : 2 , "getTipText()" : 4}},{ "className" : "net::sf::freecol::client::gui::panel::ColonyPanel::OutsideColonyPanel" , "selectors" : { "OutsideColonyPanel()" : 1 , "OutsideColonyPanel()::MigLayout" : 1 , "add(Component,boolean)" : 2 , "addPropertyChangeListeners()" : 1 , "cleanup()" : 1 , "getColony()" : 7 , "initialize()" : 5 , "removePropertyChangeListeners()" : 2 , "setColony(Colony)" : 1}},{ "className" : "net::sf::freecol::client::gui::panel::EuropePanel::InPortPanel" , "selectors" : { "InPortPanel()" : 1 , "addPropertyChangeListeners()" : 1 , "cleanup()" : 1 , "initialize()" : 1 , "removePropertyChangeListeners()" : 1 , "update()" : 3}},{ "className" : "net::sf::freecol::client::gui::panel::TradeRouteInputDialog::CargoHandler" , "selectors" : { "CargoHandler()" : 1 , "canImport(JComponent,DataFlavor[])" : 1}},{ "className" : "net::sf::freecol::client::gui::menu::MapEditorMenuBar" , "selectors" : { "MapEditorMenuBar(FreeColClient)" : 1 , "buildGameMenu()" : 1 , "buildToolsMenu()" : 1 , "buildViewMenu()" : 1 , "reset()" : 1}},{ "className" : "net::sf::freecol::common::model::ModelMessage::MessageType" , "selectors" : { "getOptionName()" : 1}},{ "className" : "net::sf::freecol::server::ServerTestHelper" , "selectors" : { "createRandomSaveGame()" : 3 , "getInGameController()" : 62 , "getServer()" : 38 , "newTurn()" : 62 , "setRandom(Random)" : 2 , "startServer(File,boolean,boolean)" : 1 , "startServer(File,boolean,boolean,int,String)" : 1 , "startServer(boolean,boolean)" : 3 , "startServer(boolean,boolean,int,String)" : 2 , "startServerGame(Map)" : 136 , "stopServer(FreeColServer)" : 8 , "stopServerGame()" : 17}},{ "className" : "net::sf::freecol::client::gui::panel::DumpCargoDialog" , "selectors" : { "DumpCargoDialog(Canvas,Unit)" : 1 , "DumpCargoDialog(Canvas,Unit)::MigLayout" : 1}},{ "className" : "net::sf::freecol::client::control::InGameInputHandler::DiplomacySwingTask" , "selectors" : { "DiplomacySwingTask(Unit,Settlement,DiplomaticTrade)" : 1}},{ "className" : "net::sf::freecol::client::gui::sound::SoundPlayer::SoundPlayerThread" , "selectors" : { "SoundPlayerThread()" : 1 , "add(File)" : 1 , "awaken()" : 2 , "goToSleep()" : 1 , "keepPlaying()" : 1 , "openLine(AudioFormat)" : 1 , "playSound(File)" : 1 , "rawplay(AudioInputStream,SourceDataLine)" : 1 , "setVolume(SourceDataLine,int)" : 1 , "sleep(int)" : 1 , "startPlaying()" : 1 , "stopPlaying()" : 2}},{ "className" : "net::sf::freecol::common::io::sza::SimpleZippedAnimation::ImageAnimationEventImpl" , "selectors" : { "ImageAnimationEventImpl(Image,int)" : 2 , "createScaledVersion(double)" : 1}},{ "className" : "net::sf::freecol::client::gui::panel::CaptureGoodsDialog::CheckBoxRenderer" , "selectors" : { "CheckBoxRenderer()" : 1}},{ "className" : "net::sf::freecol::common::model::GoldTradeItem" , "selectors" : { "GoldTradeItem(Game,Player,Player,int)" : 1 , "GoldTradeItem(Game,XMLStreamReader)" : 1 , "getGold()" : 3 , "getXMLElementTagName()" : 2 , "readFromXMLImpl(XMLStreamReader)" : 1}},{ "className" : "net::sf::freecol::client::gui::action::ClearOrdersAction" , "selectors" : { "ClearOrdersAction(FreeColClient)" : 1}},{ "className" : "net::sf::freecol::client::control::PreGameInputHandler" , "selectors" : { "PreGameInputHandler(FreeColClient)" : 1 , "addPlayer(Element)" : 1 , "chat(Element)" : 1 , "error(Element)" : 1 , "handle(Connection,Element)" : 1 , "logout(Element)" : 1 , "multiple(Connection,Element)" : 1 , "playerReady(Element)" : 1 , "removePlayer(Element)" : 1 , "setAvailable(Element)" : 1 , "startGame(Element)" : 1 , "updateGame(Connection,XMLStreamReader,XMLStreamWriter)" : 1 , "updateGameOptions(Element)" : 1 , "updateMapGeneratorOptions(Element)" : 1 , "updateNation(Element)" : 1 , "updateNationType(Element)" : 1}},{ "className" : "net::sf::freecol::client::gui::animation::UnitImageAnimation" , "selectors" : { "UnitImageAnimation(Canvas,Unit,SimpleZippedAnimation)" : 2 , "animate()" : 2 , "getDirtyAnimationArea()" : 1}},{ "className" : "net::sf::freecol::client::gui::plaf::FreeColToolTipUI" , "selectors" : { "FreeColToolTipUI()" : 1}},{ "className" : "net::sf::freecol::common::model::IndianNationType" , "selectors" : { "generateSkillsForTile(Tile)" : 2 , "getRegionNames()" : 3 , "getSettlementTypeKey(boolean)" : 2 , "getSkills()" : 9 , "getXMLElementTagName()" : 1}},{ "className" : "net::sf::freecol::common::model::Map::Direction" , "selectors" : { "getEvenDX()" : 2 , "getEvenDY()" : 2 , "getNameKey()" : 1 , "getNextDirection()" : 3 , "getOddDX()" : 2 , "getOddDY()" : 2 , "getPreviousDirection()" : 3 , "getRandomDirection(Random)" : 1 , "getRandomDirectionArray(Random)" : 4 , "getReverseDirection()" : 18 , "values()" : 26}},{ "className" : "net::sf::freecol::client::control::AllTests" , "selectors" : { "suite()::TestSuite" : 1 , "suite(???)" : 1}},{ "className" : "net::sf::freecol::server::ai::ProductionCache" , "selectors" : { "createEntries(GoodsType)" : 1 , "getEntries(GoodsType)" : 1 , "getEntries(List<GoodsType>,boolean)" : 1 , "removeEntries(Unit,WorkLocation,List<Entry>)" : 3}},{ "className" : "net::sf::freecol::client::gui::panel::StartGamePanel" , "selectors" : { "StartGamePanel(Canvas)" : 1 , "checkVictoryConditions()" : 1 , "displayChat(String,String,boolean)" : 2 , "initialize(boolean)" : 1 , "initialize(boolean)::MigLayout" : 1 , "refreshPlayersTable()" : 3 , "setEnabled(boolean)" : 1 , "updateGameOptions()" : 1 , "updateMapGeneratorOptions()" : 1}},{ "className" : "net::sf::freecol::common::model::pathfinding::GoalDecider" , "selectors" : { "check(Unit,PathNode)" : 1 , "getGoal()" : 1 , "hasSubGoals()" : 1}},{ "className" : "net::sf::freecol::server::ai::ColonyPlan" , "selectors" : { "ColonyPlan(AIMain,Colony)" : 8 , "adjustProductionAndManufacture()" : 3 , "adjustProductionAndManufactureFor(GoodsType,GoodsType)" : 1 , "create()" : 8 , "getAIMain()" : 10 , "getBestGoodsToProduce(Tile)" : 1 , "getBestTileToProduce(GoodsType)" : 1 , "getBuildable()" : 2 , "getBuildingReqGoods()" : 2 , "getFoodConsumption()" : 1 , "getFoodProduction()" : 7 , "getGame()" : 2 , "getNextFoodConsumption()" : 5 , "getPrimaryRawMaterial()" : 1 , "getProductionOf(GoodsType)" : 22 , "getSecondaryRawMaterial()" : 1 , "getSortedWorkLocationPlans()" : 3 , "getWorkLocationPlans()" : 4 , "getXMLElementTagName()" : 1 , "needsFood()" : 9 , "readFromXMLElement(Element)" : 1 , "selectProfile()" : 2 , "toString()" : 1}},{ "className" : "net::sf::freecol::common::option::AbstractUnitOption" , "selectors" : { "AbstractUnitOption(XMLStreamReader)" : 1 , "getXMLElementTagName()" : 3 , "setValidTypes(TypeSelector)" : 1}},{ "className" : "net::sf::freecol::common::option::AllTests" , "selectors" : { "suite()::TestSuite" : 1 , "suite(???)" : 1}},{ "className" : "java::beans::PropertyChangeSupport" , "selectors" : { "PropertyChangeSupport(Object)" : 152 , "addPropertyChangeListener(PropertyChangeListener)" : 135 , "addPropertyChangeListener(String,PropertyChangeListener)" : 9 , "fireIndexedPropertyChange(String,int,Object,Object)" : 3 , "fireIndexedPropertyChange(String,int,boolean,boolean)" : 1 , "fireIndexedPropertyChange(String,int,int,int)" : 1 , "firePropertyChange(PropertyChangeEvent)" : 6 , "firePropertyChange(String,Object,Object)" : 1580 , "firePropertyChange(String,boolean,boolean)" : 84 , "firePropertyChange(String,int,int)" : 36 , "getPropertyChangeListeners()" : 3 , "getPropertyChangeListeners(String)" : 2 , "hasListeners(String)" : 2 , "removePropertyChangeListener(PropertyChangeListener)" : 134 , "removePropertyChangeListener(String,PropertyChangeListener)" : 9}},{ "className" : "net::sf::freecol::common::networking::NoRouteToServerException" , "selectors" : { "NoRouteToServerException()" : 1}},{ "className" : "net::sf::freecol::client::gui::i18n::PluralNumberRule" , "selectors" : { "PluralNumberRule()" : 1}},{ "className" : "net::sf::freecol::client::gui::panel::PlayersTable::NationCellRenderer" , "selectors" : { "NationCellRenderer()" : 1}},{ "className" : "net::sf::freecol::client::gui::action::EuropeAction" , "selectors" : { "EuropeAction(FreeColClient)" : 1}},{ "className" : "net::sf::freecol::common::model::mission::ImprovementMission" , "selectors" : { "getXMLElementTagName()" : 1}},{ "className" : "net::sf::freecol::client::gui::panel::GoodsLabel" , "selectors" : { "GoodsLabel(Goods,Canvas)" : 6 , "getGoods()" : 14 , "initializeDisplay()" : 1 , "setPartialChosen(boolean)" : 4}},{ "className" : "net::sf::freecol::client::gui::action::ReportTradeAction" , "selectors" : { "ReportTradeAction(FreeColClient)" : 1}},{ "className" : "net::sf::freecol::client::gui::panel::LabourData::LocationData" , "selectors" : { "LocationData(UnitData)" : 4 , "LocationData(UnitData,boolean)" : 2 , "add(LocationData)" : 3 , "addOtherStudent(String)" : 1 , "getNetProduction()" : 1 , "getNotWorking()" : 2 , "getOtherStudents()" : 1 , "getOtherStudentsName()" : 1 , "getOtherWorkingAmateurs()" : 2 , "getRowCount()" : 9 , "getStudents()" : 1 , "getTeachers()" : 1 , "getTotalColonists()" : 1 , "getTotalProduction()" : 2 , "getUnitData()" : 13 , "getWorkingAmateurs()" : 1 , "getWorkingProfessionals()" : 3 , "isTotal()" : 2 , "isTraining()" : 2}},{ "className" : "net::sf::freecol::common::model::GoodsType" , "selectors" : { "getBreedingNumber()" : 9 , "getInitialAmount()" : 6 , "getInitialBuyPrice()" : 3 , "getInitialSellPrice()" : 7 , "getLabel(boolean)" : 2 , "getPrice()" : 1 , "getPriceDifference()" : 1 , "getProducedMaterial()" : 10 , "getProductionChain()" : 2 , "getRawMaterial()" : 14 , "getStoredAs()" : 12 , "getWorkingAsKey()" : 4 , "getXMLElementTagName()" : 1 , "isBreedable()" : 5 , "isBuildingMaterial()" : 20 , "isFarmed()" : 24 , "isFoodType()" : 24 , "isImmigrationGoodsType()" : 1 , "isImmigrationType()" : 1 , "isLibertyGoodsType()" : 1 , "isLibertyType()" : 2 , "isMilitaryGoods()" : 17 , "isNewWorldGoodsType()" : 11 , "isNewWorldLuxuryType()" : 3 , "isRawBuildingMaterial()" : 15 , "isRawMaterial()" : 3 , "isRefined()" : 7 , "isStorable()" : 38 , "isStoredAs()" : 2 , "isTradeGoods()" : 10 , "limitIgnored()" : 5 , "setBuildingMaterial(boolean)" : 1 , "setMilitaryGoods(boolean)" : 1}},{ "className" : "net::sf::freecol::metaserver::MetaRegister" , "selectors" : { "MetaRegister()" : 1 , "addServer(String,String,int,int,int,boolean,String,int)" : 2 , "createServerList()" : 1 , "getItem(String,int)" : 2 , "indexOf(String,int)" : 2 , "removeDeadServers()" : 1 , "removeServer(String,int)" : 1 , "updateServer(MetaItem,String,String,int,int,int,boolean,String,int)" : 2 , "updateServer(String,String,int,int,int,boolean,String,int)" : 1}},{ "className" : "net::sf::freecol::client::gui::action::NewAction" , "selectors" : { "NewAction(FreeColClient)" : 1}},{ "className" : "net::sf::freecol::client::gui::panel::AdvantageCellEditor" , "selectors" : { "AdvantageCellEditor(List<EuropeanNationType>)" : 1}},{ "className" : "net::sf::freecol::client::gui::panel::ReportCargoPanel" , "selectors" : { "ReportCargoPanel(Canvas)" : 1 , "ReportCargoPanel(Canvas)::MigLayout" : 1 , "gatherData()" : 1 , "getMinimumSize()" : 1 , "handleLocation(String,boolean)" : 3}},{ "className" : "net::sf::freecol::client::control::InGameInputHandler::NewRegionNameSwingTask" , "selectors" : { "NewRegionNameSwingTask(Unit,Region,String)" : 1}},{ "className" : "net::sf::freecol::server::ai::mission::DefendSettlementMission" , "selectors" : { "DefendSettlementMission(AIMain,AIUnit,Settlement)" : 1 , "DefendSettlementMission(AIMain,XMLStreamReader)" : 1 , "getSettlement()" : 1 , "getTransportDestination()" : 1 , "getXMLElementTagName()" : 2 , "isValid()" : 1}},{ "className" : "net::sf::freecol::server::ai::mission::UnitSeekAndDestroyMission" , "selectors" : { "UnitSeekAndDestroyMission(AIMain,AIUnit,Location)" : 5 , "UnitSeekAndDestroyMission(AIMain,XMLStreamReader)" : 1 , "getDisembarkPath(Unit,Tile,Tile,Unit)" : 2 , "getTarget()" : 5 , "getTransportDestination()" : 1 , "getXMLElementTagName()" : 2 , "isValid()" : 1 , "setTarget(Location)" : 1}},{ "className" : "net::sf::freecol::client::gui::action::ReportForeignAction" , "selectors" : { "ReportForeignAction(FreeColClient)" : 1}},{ "className" : "net::sf::freecol::client::gui::OutForAnimationCallback" , "selectors" : { "executeWithUnitOutForAnimation(JLabel)" : 1}},{ "className" : "net::sf::freecol::common::model::Scope" , "selectors" : { "Scope()" : 19 , "Scope(XMLStreamReader)" : 5 , "appliesTo(FreeColObject)" : 41 , "equals(Object)" : 25 , "getAbilityID()" : 4 , "getMethodName()" : 10 , "getMethodValue()" : 2 , "getType()" : 9 , "getXMLElementTagName()" : 2 , "hashCode()" : 7 , "isAbilityValue()" : 1 , "isMatchNegated()" : 1 , "readAttributes(XMLStreamReader)" : 1 , "setAbilityID(String)" : 13 , "setAbilityValue(boolean)" : 4 , "setMatchNegated(boolean)" : 9 , "setMatchesNull(boolean)" : 5 , "setMethodName(String)" : 9 , "setMethodValue(String)" : 11 , "setType(String)" : 17 , "toXMLImpl(XMLStreamWriter)" : 3 , "writeAttributes(XMLStreamWriter)" : 2}},{ "className" : "net::sf::freecol::common::model::HighSeas" , "selectors" : { "HighSeas(Game)" : 1 , "HighSeas(Game,String)" : 1 , "addDestination(Location)" : 4 , "getDestinations()" : 3 , "getXMLElementTagName()" : 3 , "readChild(XMLStreamReader)" : 1 , "removeDestination(Location)" : 1 , "toXMLImpl(XMLStreamWriter,Player,boolean,boolean)" : 1}},{ "className" : "net::sf::freecol::common::networking::PutOutsideColonyMessage" , "selectors" : { "PutOutsideColonyMessage(Game,Element)" : 1 , "PutOutsideColonyMessage(Unit)" : 2 , "getXMLElementTagName()" : 2 , "handle(FreeColServer,Player,Connection)" : 1}},{ "className" : "java::lang::Math" , "selectors" : { "IEEEremainder(double,double)" : 22 , "abs(double)" : 1536 , "abs(float)" : 131 , "abs(int)" : 680 , "abs(long)" : 102 , "acos(double)" : 108 , "asin(double)" : 64 , "atan(double)" : 88 , "atan2(double,double)" : 155 , "cbrt(double)" : 1 , "ceil(double)" : 565 , "cos(double)" : 643 , "exp(double)" : 309 , "floor(double)" : 507 , "hypot(double,double)" : 24 , "log(double)" : 693 , "log10(double)" : 17 , "log1p(double)" : 1 , "max(double,double)" : 709 , "max(float,float)" : 176 , "max(int,int)" : 1964 , "max(long,long)" : 172 , "min(double,double)" : 592 , "min(float,float)" : 160 , "min(int,int)" : 1737 , "min(long,long)" : 210 , "pow(double,double)" : 914 , "random()" : 461 , "rint(double)" : 87 , "round(double)" : 851 , "round(float)" : 346 , "signum(double)" : 9 , "signum(float)" : 4 , "sin(double)" : 628 , "sinh(double)" : 1 , "sqrt(double)" : 1124 , "tan(double)" : 123 , "tanh(double)" : 2 , "toDegrees(double)" : 135 , "toRadians(double)" : 193 , "ulp(float)" : 6}},{ "className" : "net::sf::freecol::client::control::InGameInputHandler" , "selectors" : { "InGameInputHandler(FreeColClient)" : 1 , "addObject(Element)" : 1 , "addPlayer(Element)" : 1 , "animateAttack(Element)" : 1 , "animateMove(Element)" : 1 , "chat(Element)" : 1 , "chooseFoundingFather(Element)" : 1 , "diplomacy(Element)" : 1 , "error(Element)" : 1 , "fountainOfYouth(Element)" : 1 , "gameEnded(Element)" : 1 , "handle(Connection,Element)" : 3 , "indianDemand(Element)" : 1 , "lootCargo(Element)" : 1 , "monarchAction(Element)" : 1 , "multiple(Connection,Element)" : 1 , "newLandName(Element)" : 1 , "newRegionName(Element)" : 1 , "newTurn(Element)" : 1 , "reconnect(Element)" : 1 , "remove(Element)" : 1 , "selectUnitFromElement(Game,Element,String)" : 3 , "setAI(Element)" : 1 , "setCurrentPlayer(Element)" : 1 , "setDead(Element)" : 1 , "setStance(Element)" : 1 , "spyResult(Element)" : 1 , "update(Element)" : 1 , "updateGameObjects(NodeList)" : 1}},{ "className" : "java::awt::GridLayout" , "selectors" : { "GridLayout()" : 17 , "GridLayout(int,int)" : 365 , "GridLayout(int,int,int,int)" : 141 , "getColumns()" : 2 , "java" : 14 , "setColumns(int)" : 15 , "setHgap(int)" : 15 , "setRows(int)" : 12 , "setVgap(int)" : 8}},{ "className" : "net::sf::freecol::client::gui::panel::PlayersTable" , "selectors" : { "PlayersTable(Canvas,NationOptions,Player)" : 1 , "update()" : 1}},{ "className" : "net::sf::freecol::client::gui::option::BooleanOptionUI" , "selectors" : { "BooleanOptionUI(BooleanOption,boolean)" : 1 , "setValue(boolean)" : 4}},{ "className" : "net::sf::freecol::client::gui::action::WaitAction" , "selectors" : { "WaitAction(FreeColClient)" : 1}},{ "className" : "net::sf::freecol::server::model::DemandSession" , "selectors" : { "DemandSession(Unit,Colony)" : 1 , "complete(ChangeSet)" : 1 , "getGold()" : 1 , "getGoods()" : 1 , "setGold(int)" : 1 , "setGoods(Goods)" : 1 , "setTension(int)" : 2}},{ "className" : "net::sf::freecol::client::gui::action::ScaleMapAction::MapSize" , "selectors" : { "MapSize(int,int)" : 1}},{ "className" : "net::sf::freecol::client::gui::panel::UnitButton::UnitButtonActionPropertyChangeListener" , "selectors" : { "UnitButtonActionPropertyChangeListener(AbstractButton)" : 1}},{ "className" : "net::sf::freecol::client::gui::panel::IndianSettlementPanel" , "selectors" : { "IndianSettlementPanel(Canvas,IndianSettlement)" : 1 , "IndianSettlementPanel(Canvas,IndianSettlement)::MigLayout" : 1}},{ "className" : "net::sf::freecol::server::ai::AllTests" , "selectors" : { "suite()::TestSuite" : 1 , "suite(???)" : 1}},{ "className" : "net::sf::freecol::client::control::ConnectController" , "selectors" : { "ConnectController(FreeColClient)" : 1 , "getServerList()" : 1 , "getVacantPlayers(String,int)" : 1 , "joinMultiplayerGame(String,String,int)" : 3 , "loadGame(File)" : 5 , "loadGame(File)::ErrorJob" : 8 , "loadModFragments(Specification)" : 1 , "login(String,String,int)" : 5 , "logout(boolean)" : 5 , "quitGame(boolean)" : 8 , "quitGame(boolean,boolean)" : 1 , "reconnect()" : 7 , "startMultiplayerGame(Specification,boolean,String,int,Advantages,OptionGroup)" : 1 , "startSingleplayerGame(Specification,String,Advantages)" : 1}},{ "className" : "javax::swing::text::StyleContext" , "selectors" : { "StyleContext()" : 5 , "addStyle(String,Style)" : 6 , "getDefaultStyleContext()" : 5 , "getStyle(String)" : 9}},{ "className" : "net::sf::freecol::server::control::ChangeSet::AttackChange" , "selectors" : { "AttackChange(See,Unit,Unit,boolean)" : 1}},{ "className" : "net::sf::freecol::client::gui::TerrainCursor" , "selectors" : { "addActionListener(ActionListener)" : 1 , "fireActionEvent(ActionEvent)" : 1 , "getCanvasX()" : 1 , "getCanvasY()" : 1 , "isActive()" : 1 , "net" : 1 , "setTile(Tile)" : 2 , "startBlinking()" : 1}},{ "className" : "net::sf::freecol::client::gui::action::ActionManager" , "selectors" : { "ActionManager(FreeColClient)" : 1 , "addSpecificationActions(Specification)" : 1 , "getFreeColAction(String)" : 30 , "initializeActions()" : 1 , "update()" : 17}},{ "className" : "net::sf::freecol::server::ai::AIInGameInputHandler" , "selectors" : { "AIInGameInputHandler(FreeColServer,ServerPlayer,AIMain)" : 2 , "chooseFoundingFather(DummyConnection,Element)" : 1 , "diplomaticTrade(DummyConnection,Element)" : 1 , "fountainOfYouth(DummyConnection,Element)" : 1 , "getAIPlayer()" : 6 , "getAIUnit(Unit)" : 1 , "handle(Connection,Element)" : 1 , "indianDemand(DummyConnection,Element)" : 1 , "lootCargo(Connection,Element)" : 1 , "monarchAction(DummyConnection,Element)" : 1 , "multiple(Connection,Element)" : 1 , "newLandName(DummyConnection,Element)" : 1 , "newRegionName(DummyConnection,Element)" : 1 , "setCurrentPlayer(DummyConnection,Element)" : 1}},{ "className" : "net::sf::freecol::client::gui::action::ZoomInAction" , "selectors" : { "ZoomInAction(FreeColClient)" : 1}},{ "className" : "net::sf::freecol::client::gui::action::DisbandUnitAction" , "selectors" : { "DisbandUnitAction(FreeColClient)" : 1}},{ "className" : "net::sf::freecol::server::model::ServerPlayer" , "selectors" : { "ServerPlayer(Game,String,boolean,Nation,Socket,Connection)" : 11 , "addHistory(HistoryEvent)" : 1 , "addStanceChange(ServerPlayer)" : 2 , "buy(GoodsContainer,GoodsType,int,Random)" : 5 , "canRecruitFoundingFather()" : 1 , "checkForDeath()" : 12 , "checkForREFDefeat()" : 1 , "checkFoundingFather()" : 1 , "createUnits(List<AbstractUnit>)" : 5 , "csAddFoundingFather(FoundingFather,Random,ChangeSet)" : 2 , "csAutoequipUnit(Unit,Settlement,ChangeSet)" : 1 , "csBombardEnemyShips(Random,ChangeSet)" : 1 , "csBurnMissions(Unit,IndianSettlement,ChangeSet)" : 1 , "csCaptureAutoEquip(Unit,Unit,ChangeSet)" : 1 , "csCaptureColony(Unit,Colony,Random,ChangeSet)" : 1 , "csCaptureConvert(Unit,IndianSettlement,Random,ChangeSet)" : 1 , "csCaptureEquip(Unit,Unit,ChangeSet)" : 2 , "csCaptureEquipment(Unit,Unit,EquipmentType,ChangeSet)" : 3 , "csCaptureUnit(Unit,Unit,ChangeSet)" : 2 , "csChangeStance(Stance,Player,boolean,ChangeSet)" : 12 , "csClaimLand(Tile,Settlement,int,ChangeSet)" : 2 , "csCombat(FreeColGameObject,FreeColGameObject,List<CombatResult>,Random,ChangeSet)" : 2 , "csContact(ServerPlayer,Tile,ChangeSet)" : 2 , "csDamageColonyShips(Unit,Colony,ChangeSet)" : 1 , "csDamageShip(Unit,Location,ChangeSet)" : 2 , "csDamageShipAttack(Unit,Unit,ChangeSet)" : 4 , "csDamageShipBombard(Settlement,Unit,ChangeSet)" : 1 , "csDemoteUnit(Unit,Unit,ChangeSet)" : 2 , "csDestroyColony(Unit,Colony,Random,ChangeSet)" : 1 , "csDestroySettlement(Unit,IndianSettlement,Random,ChangeSet)" : 1 , "csDisposeSettlement(Settlement,ChangeSet)" : 2 , "csEmigrate(int,MigrationType,Random,ChangeSet)" : 2 , "csEvadeAttack(Unit,Unit,ChangeSet)" : 1 , "csEvadeBombard(Settlement,Unit,ChangeSet)" : 1 , "csFlushMarket(GoodsType,ChangeSet)" : 6 , "csKill(ChangeSet)" : 2 , "csKillMissionary(IndianSettlement,ChangeSet)" : 2 , "csLootShip(Unit,Unit,ChangeSet)" : 2 , "csLoseAutoEquip(Unit,Unit,ChangeSet)" : 2 , "csLoseEquip(Unit,Unit,ChangeSet)" : 3 , "csNewTurn(Random,ChangeSet)" : 1 , "csPillageColony(Unit,Colony,Random,ChangeSet)" : 1 , "csPromoteUnit(Unit,Unit,ChangeSet)" : 2 , "csRaiseTax(int,Goods,boolean,ChangeSet)" : 1 , "csSeeNewTiles(List<Tile>,ChangeSet)" : 2 , "csSetTax(int,ChangeSet)" : 3 , "csSinkColonyShips(Unit,Colony,ChangeSet)" : 1 , "csSinkShip(Unit,ServerPlayer,ChangeSet)" : 2 , "csSinkShipAttack(Unit,Unit,ChangeSet)" : 4 , "csSinkShipBombard(Settlement,Unit,ChangeSet)" : 1 , "csSlaughterUnit(Unit,Unit,ChangeSet)" : 2 , "csStartTurn(Random,ChangeSet)" : 1 , "csWithdraw(ChangeSet)" : 3 , "csYearlyGoodsAdjust(Random,ChangeSet)" : 2 , "generateRecruitablesList()" : 4 , "getConnection()" : 16 , "getContactKey(ServerPlayer)" : 2 , "getRandomFoundingFathers(Random)" : 1 , "getRemainingEmigrants()" : 2 , "getSlaughterTension(Unit)" : 2 , "hasExplored(Tile)" : 8 , "isConnected()" : 11 , "priceMercenaries(List<AbstractUnit>)" : 1 , "propagateToEuropeanMarkets(GoodsType,int,Random)" : 2 , "resetExploredTiles(Map)" : 1 , "revealMap()" : 1 , "sell(GoodsContainer,GoodsType,int,Random)" : 7 , "setConnected(boolean)" : 4 , "setConnection(Connection)" : 2 , "setExplored(Tile)" : 7 , "setRemainingEmigrants(int)" : 2 , "startGame(Random)" : 1}},{ "className" : "net::sf::freecol::common::networking::AskSkillMessage" , "selectors" : { "AskSkillMessage(Game,Element)" : 1 , "AskSkillMessage(Unit,Direction)" : 1 , "getXMLElementTagName()" : 2 , "handle(FreeColServer,Player,Connection)" : 1}},{ "className" : "net::sf::freecol::common::model::SchoolTest" , "selectors" : { "addSchoolToColony(Game,Colony,SchoolLevel)" : 1 , "getUnitList(Colony,UnitType)" : 2}},{ "className" : "net::sf::freecol::client::gui::panel::TilePanel" , "selectors" : { "TilePanel(Canvas,Tile)" : 2 , "TilePanel(Canvas,Tile)::MigLayout" : 1}},{ "className" : "net::sf::freecol::client::gui::i18n::Merge" , "selectors" : { "Merge()" : 1}},{ "className" : "net::sf::freecol::client::gui::action::GotoAction" , "selectors" : { "GotoAction(FreeColClient)" : 1}},{ "className" : "net::sf::freecol::common::model::Ability" , "selectors" : { "Ability(Ability)" : 1 , "Ability(String)" : 16 , "Ability(String,FreeColGameObjectType,boolean)" : 2 , "Ability(String,boolean)" : 1 , "Ability(XMLStreamReader,Specification)" : 1 , "equals(Object)" : 1 , "getValue()" : 5 , "getXMLElementTagName()" : 2 , "hashCode()" : 2 , "toString()" : 1 , "toXMLImpl(XMLStreamWriter)" : 1}},{ "className" : "net::sf::freecol::common::model::ColonyTradeItem" , "selectors" : { "ColonyTradeItem(Game,Player,Player,Colony)" : 1 , "ColonyTradeItem(Game,XMLStreamReader)" : 1 , "getColony()" : 1 , "getColonyName()" : 1 , "getXMLElementTagName()" : 2 , "readFromXMLImpl(XMLStreamReader)" : 1}},{ "className" : "net::sf::freecol::client::gui::panel::ColonyPanel" , "selectors" : { "ColonyPanel(Canvas,Colony)" : 2 , "ColonyPanel(Canvas,Colony)::MigLayout" : 1 , "addPropertyChangeListeners()" : 1 , "closeColonyPanel()" : 2 , "debugSetGoods(Canvas,Colony)" : 1 , "fill()" : 1 , "getCargoPanel()" : 1 , "getColony()" : 37 , "getSelectedUnit()" : 6 , "getSelectedUnitLabel()" : 1 , "initialize(Colony)" : 2 , "removePropertyChangeListeners()" : 2 , "setColony(Colony)" : 1 , "setSelectedUnit(Unit)" : 3 , "setSelectedUnitLabel(UnitLabel)" : 3 , "sortBuildings(List<Building>)" : 1 , "unload()" : 1 , "updateCarrierButtons()" : 2 , "updateConstructionPanel()" : 3 , "updateInPortPanel()" : 3 , "updateOutsideColonyPanel()" : 1 , "updateProductionPanel()" : 5 , "updateTilePanel()" : 2 , "updateWarehousePanel()" : 3}},{ "className" : "net::sf::freecol::server::generator::MapGenerator" , "selectors" : { "createEmptyMap(Game,boolean[][])" : 1 , "createMap(Game)" : 8 , "getMapGeneratorOptions()" : 13}},{ "className" : "net::sf::freecol::server::model::ServerColony" , "selectors" : { "ServerColony(Game,Player,String,Tile)" : 8 , "csBuildBuilding(BuildQueue,ChangeSet)" : 1 , "csBuildUnit(BuildQueue,Random,ChangeSet)" : 1 , "csCheckMissingInput(Building,ProductionInfo,ChangeSet)" : 1 , "csEvictUser(Unit,ChangeSet)" : 1 , "csNextBuildable(BuildQueue,Random,ChangeSet)" : 2}},{ "className" : "net::sf::freecol::client::gui::action::CenterAction" , "selectors" : { "CenterAction(FreeColClient)" : 1}},{ "className" : "net::sf::freecol::common::model::Map::WholeMapIterator" , "selectors" : { "WholeMapIterator()" : 1 , "hasNext()" : 1}},{ "className" : "net::sf::freecol::client::gui::action::ChangeAction" , "selectors" : { "ChangeAction(FreeColClient)" : 1 , "update()" : 1}},{ "className" : "net::sf::freecol::client::gui::panel::MiniMap" , "selectors" : { "MiniMap(FreeColClient)" : 2 , "canZoomIn()" : 1 , "canZoomOut()" : 1 , "focus(MouseEvent)" : 2 , "focus(int,int)" : 1 , "getMinimapColor(TileType)" : 1 , "paintMap(Graphics,int,int)" : 3 , "setBackgroundColor(Color)" : 2 , "setTileSize(int)" : 1 , "setZoomOption(int)" : 3 , "zoomIn()" : 1 , "zoomOut()" : 1}},{ "className" : "net::sf::freecol::client::gui::action::AboutAction" , "selectors" : { "AboutAction(FreeColClient)" : 1}},{ "className" : "net::sf::freecol::server::generator::AllTests" , "selectors" : { "suite()::TestSuite" : 1 , "suite(???)" : 1}},{ "className" : "net::sf::freecol::client::gui::panel::ReportHistoryPanel" , "selectors" : { "ReportHistoryPanel(Canvas)" : 1 , "ReportHistoryPanel(Canvas)::MigLayout" : 1}},{ "className" : "net::sf::freecol::client::gui::action::SentryAction" , "selectors" : { "SentryAction(FreeColClient)" : 1}},{ "className" : "net::sf::freecol::client::gui::panel::FileList::FileListEntry" , "selectors" : { "FileListEntry(File)" : 1}},{ "className" : "net::sf::freecol::common::model::LostCityRumour::RumourType" , "selectors" : { "values()" : 1}},{ "className" : "net::sf::freecol::client::gui::panel::StatisticsPanel::StatisticsModel" , "selectors" : { "StatisticsModel()" : 1 , "getColumnCount()" : 1 , "getRowCount()" : 1 , "setData(Map<String,String>)" : 1}},{ "className" : "net::sf::freecol::client::gui::panel::TradeRouteInputDialog::StopTransferable" , "selectors" : { "StopTransferable(List<Stop>)" : 1}},{ "className" : "net::sf::freecol::client::gui::action::DisplayGridAction" , "selectors" : { "DisplayGridAction(FreeColClient)" : 1}},{ "className" : "net::sf::freecol::client::ClientTestHelper" , "selectors" : { "startClient(FreeColServer)" : 1 , "stopClient(FreeColClient)" : 1}},{ "className" : "net::sf::freecol::client::gui::panel::AboutPanel" , "selectors" : { "AboutPanel(Canvas)" : 1 , "AboutPanel(Canvas)::MigLayout" : 1}},{ "className" : "net::sf::freecol::client::gui::plaf::FreeColScrollPaneUI" , "selectors" : { "FreeColScrollPaneUI()" : 1}},{ "className" : "net::sf::freecol::client::gui::menu::FreeColMenuTest" , "selectors" : { "FreeColMenuTest()" : 1 , "createAndShowGUI()" : 1 , "createContentPane()" : 1 , "createMenuBar()" : 1 , "getClassName(Object)" : 2}},{ "className" : "net::sf::freecol::client::gui::panel::EuropePanel" , "selectors" : { "EuropePanel(Canvas)" : 1 , "EuropePanel(Canvas)::MigLayout" : 1 , "cleanup()" : 1 , "exitAction()" : 1 , "getCargoPanel()" : 1 , "getSelectedUnit()" : 3 , "getSelectedUnitLabel()" : 2 , "initialize(Europe,Game)" : 1 , "refresh()" : 3 , "requestFocus()" : 3 , "sailAction()" : 1 , "setSelectedUnit(Unit)" : 2 , "setSelectedUnitLabel(UnitLabel)" : 4 , "unloadAction()" : 1}},{ "className" : "net::sf::freecol::server::model::AllTests" , "selectors" : { "suite()::TestSuite" : 1 , "suite(???)" : 1}},{ "className" : "net::sf::freecol::common::model::TileImprovement" , "selectors" : { "TileImprovement(Game,Tile,TileImprovementType)" : 28 , "TileImprovement(Game,XMLStreamReader)" : 2 , "getBase(Direction[],int)" : 1 , "getBonus(GoodsType)" : 2 , "getChange(TileType)" : 1 , "getDeliverAmount()" : 1 , "getDeliverGoodsType()" : 1 , "getExpendedAmount()" : 1 , "getExpendedEquipmentType()" : 1 , "getMagnitude()" : 9 , "getMovementCost(int,Tile)" : 1 , "getProductionModifier(GoodsType)" : 1 , "getStyle()" : 6 , "getStyleBreakdown(Direction[],int)" : 1 , "getStyleBreakdown(int[])" : 1 , "getTurnsToComplete()" : 5 , "getType()" : 28 , "getXMLElementTagName()" : 4 , "isComplete()" : 24 , "isRiver()" : 4 , "isRoad()" : 3 , "isVirtual()" : 1 , "isWorkerAllowed(Unit)" : 2 , "setMagnitude(int)" : 3 , "setStyle(int)" : 5 , "setTurnsToComplete(int)" : 16 , "setVirtual(boolean)" : 1}},{ "className" : "net::sf::freecol::common::model::pathfinding::CostDeciders::AvoidSettlementsCostDecider" , "selectors" : { "AvoidSettlementsCostDecider()" : 1}},{ "className" : "net::sf::freecol::client::gui::option::FreeColActionUI" , "selectors" : { "FreeColActionUI(FreeColAction,OptionGroupUI)" : 1 , "getHumanKeyStrokeText(KeyStroke)" : 4 , "getRecordImage()" : 1 , "getRemoveImage()" : 1 , "removeKeyStroke(KeyStroke)" : 1}},{ "className" : "javax::swing::plaf::basic::BasicInternalFrameUI" , "selectors" : { "BasicInternalFrameUI(JInternalFrame)" : 1 , "getNorthPane()" : 6 , "setEastPane(JComponent)" : 1 , "setNorthPane(JComponent)" : 2 , "setSouthPane(JComponent)" : 1 , "setWestPane(JComponent)" : 1}},{ "className" : "net::sf::freecol::client::gui::panel::ReportContinentalCongressPanel" , "selectors" : { "ReportContinentalCongressPanel(Canvas)" : 1 , "ReportContinentalCongressPanel(Canvas)::MigLayout" : 2}},{ "className" : "net::sf::freecol::client::gui::panel::ColopediaPanel" , "selectors" : { "ColopediaPanel(Canvas,PanelType,FreeColGameObjectType)" : 9 , "ColopediaPanel(Canvas,PanelType,FreeColGameObjectType)::MigLayout" : 1 , "appendRequiredAbilities(StyledDocument,BuildableType)" : 2 , "buildBuildingDetail(BuildingType)" : 1 , "buildBuildingDetail(BuildingType)::MigLayout" : 1 , "buildBuildingSubtree(DefaultMutableTreeNode)" : 1 , "buildEuropeanNationTypeDetail(EuropeanNationType)" : 1 , "buildEuropeanNationTypeDetail(EuropeanNationType)::MigLayout" : 1 , "buildFatherDetail(FoundingFather)" : 1 , "buildFatherDetail(FoundingFather)::MigLayout" : 1 , "buildFathersSubtree(DefaultMutableTreeNode)" : 1 , "buildGoodsDetail(GoodsType)" : 1 , "buildGoodsDetail(GoodsType)::MigLayout" : 1 , "buildIndianNationTypeDetail(IndianNationType)" : 1 , "buildIndianNationTypeDetail(IndianNationType)::MigLayout" : 1 , "buildItem(FreeColGameObjectType,ImageIcon)" : 4 , "buildNationDetail(Nation)" : 1 , "buildNationDetail(Nation)::MigLayout" : 1 , "buildNationTypesSubtree(DefaultMutableTreeNode)" : 1 , "buildResourceDetail(ResourceType)" : 1 , "buildResourceDetail(ResourceType)::MigLayout" : 1 , "buildSubTree(PanelType,List<T>,double)" : 5 , "buildTerrainDetail(TileType)" : 1 , "buildTerrainDetail(TileType)::MigLayout" : 1 , "buildTerrainSubtree(DefaultMutableTreeNode)" : 1 , "buildTree()" : 1 , "buildUnitDetail(UnitType)" : 1 , "buildUnitDetail(UnitType)::MigLayout" : 1 , "filterBuildables(List<T>,List<T>,GoodsType)" : 3 , "getAbilityComponent(Ability)" : 2 , "getButton(FreeColGameObjectType)" : 10 , "getButton(FreeColGameObjectType,String,ImageIcon)" : 4 , "getFeatureAsString(Feature)" : 2 , "getFeatureName(Feature)" : 1 , "getGoodsButton(GoodsType)" : 5 , "getGoodsButton(GoodsType,String)" : 5 , "getGoodsButton(GoodsType,int)" : 9 , "getModifierAsString(Modifier)" : 6 , "getModifierComponent(Modifier)" : 2 , "getPanelType(FreeColGameObjectType)" : 2 , "getResourceButton(ResourceType)" : 3 , "getUnitButton(AbstractUnit)" : 3 , "getUnitButton(UnitType)" : 2 , "getUnitButton(UnitType,Role)" : 2 , "initialize(FreeColGameObjectType)" : 1 , "initialize(PanelType,FreeColGameObjectType)" : 2 , "selectDetail(PanelType,FreeColGameObjectType)" : 2}},{ "className" : "net::sf::freecol::common::networking::DeclineMoundsMessage" , "selectors" : { "DeclineMoundsMessage(Game,Element)" : 1 , "DeclineMoundsMessage(Unit,Direction)" : 1 , "getXMLElementTagName()" : 2 , "handle(FreeColServer,Player,Connection)" : 1}},{ "className" : "net::sf::freecol::client::gui::CanvasMouseMotionListener" , "selectors" : { "CanvasMouseMotionListener(Canvas,GUI,Map)" : 1 , "auto_scroll(int,int)" : 1 , "drag_scroll(int,int)" : 1 , "scroll(int,int,int)" : 2}},{ "className" : "net::sf::freecol::common::option::IntegerOption" , "selectors" : { "IntegerOption(String)" : 5 , "IntegerOption(XMLStreamReader)" : 2 , "getMaximumValue()" : 2 , "getMinimumValue()" : 2 , "getStringValue()" : 1 , "getValue()" : 55 , "getXMLElementTagName()" : 2 , "readAttributes(XMLStreamReader)" : 2 , "setMaximumValue(int)" : 1 , "setMinimumValue(int)" : 1 , "setValue(Integer)" : 24}},{ "className" : "java::awt::dnd::DragGestureRecognizer" , "selectors" : { "DragGestureRecognizer(DragSource,Component,int,DragGestureListener)" : 2 , "appendEvent(InputEvent)" : 2 , "fireDragGestureRecognized(int,Point)" : 2 , "getSourceActions()" : 1 , "resetRecognizer()" : 3 , "setComponent(Component)" : 2 , "setSourceActions(int)" : 3}},{ "className" : "net::sf::freecol::common::networking::Connection" , "selectors" : { "Connection()" : 1 , "Connection(Socket,MessageHandler,String)" : 3 , "Connection(String,int,MessageHandler,String)" : 6 , "ask()" : 1 , "ask(Element)" : 6 , "close()" : 9 , "createSocket(String,int)" : 1 , "endTransmission(XMLStreamReader)" : 6 , "getMessageHandler()" : 3 , "getReply()" : 1 , "getSocket()" : 9 , "handleAndSendReply(BufferedInputStream)" : 1 , "reallyClose()" : 4 , "releaseQuestionId()" : 3 , "send()" : 2 , "send(Element)" : 9 , "sendAndWait(Element)" : 3 , "setMessageHandler(MessageHandler)" : 5 , "toString()" : 6 , "waitForAndSetNewQuestionId()" : 2}},{ "className" : "net::sf::freecol::common::option::LanguageOption::Language" , "selectors" : { "Language(String,Locale)" : 2 , "equals(Object)" : 1 , "getKey()" : 7 , "getLocale()" : 1 , "toString()" : 2}},{ "className" : "net::sf::freecol::client::gui::i18n::NumberRules" , "selectors" : { "NumberRules(InputStream)" : 1 , "getNumberForLanguage(String)" : 25 , "isInitialized()" : 1 , "load(InputStream)" : 2 , "readChild(XMLStreamReader)" : 1 , "readFromXML(XMLStreamReader)" : 1}},{ "className" : "net::sf::freecol::client::gui::action::TradeRouteAction" , "selectors" : { "TradeRouteAction(FreeColClient)" : 1}},{ "className" : "net::sf::freecol::client::gui::i18n::MergeTableModel" , "selectors" : { "MergeTableModel()" : 1 , "deleteFromRight(int,int)" : 1 , "insertInRight(int,int)" : 1 , "leftLineAtRow(int)" : 3 , "mergeChanged()" : 2 , "rightLineAtRow(int)" : 2}},{ "className" : "net::sf::freecol::common::model::pathfinding::CostDeciders::AvoidSettlementsAndBlockingUnitsCostDecider" , "selectors" : { "AvoidSettlementsAndBlockingUnitsCostDecider()" : 1}},{ "className" : "net::sf::freecol::client::gui::action::ChangeWindowedModeAction" , "selectors" : { "ChangeWindowedModeAction(FreeColClient)" : 1}},{ "className" : "net::sf::freecol::client::gui::panel::MapGeneratorOptionsDialog" , "selectors" : { "MapGeneratorOptionsDialog(Canvas,OptionGroup,boolean,boolean)" : 3 , "setFile(File)" : 1}},{ "className" : "net::sf::freecol::common::resources::VideoResource" , "selectors" : { "VideoResource(URI)" : 1 , "getVideo()" : 1}},{ "className" : "net::sf::freecol::client::control::InGameInputHandler::SpyColonySwingTask" , "selectors" : { "SpyColonySwingTask(Colony,Element)" : 1}},{ "className" : "java::awt::MouseInfo" , "selectors" : { "getPointerInfo()" : 1}},{ "className" : "net::sf::freecol::common::option::LanguageOption" , "selectors" : { "LanguageOption(XMLStreamReader)" : 1 , "findLanguages()" : 2 , "getLocale(String)" : 5 , "getOptions()" : 1 , "getValue()" : 4 , "getXMLElementTagName()" : 2 , "prepareLanguages()" : 1 , "setValue(Language)" : 4}},{ "className" : "net::sf::freecol::client::gui::panel::ConstructionPanel" , "selectors" : { "ConstructionPanel(Canvas,Colony,boolean)" : 2 , "ConstructionPanel(Canvas,Colony,boolean)::MigLayout" : 1 , "getDefaultLabel()" : 1 , "initialize(BuildableType)" : 4 , "propertyChange(PropertyChangeEvent)" : 1 , "removePropertyChangeListeners()" : 1 , "setColony(Colony)" : 2 , "setDefaultLabel(StringTemplate)" : 1 , "update()" : 1}},{ "className" : "net::sf::freecol::common::util::EmptyIterator<net::sf::freecol::common::util::EmptyIterator" , "selectors" : { "getInstance()::T>" : 1}},{ "className" : "net::sf::freecol::client::gui::panel::NegotiationDialog" , "selectors" : { "NegotiationDialog(Canvas,Unit,Settlement,DiplomaticTrade)" : 2 , "addColonyTradeItem(Player,Colony)" : 1 , "addGoldTradeItem(Player,int)" : 1 , "addGoodsTradeItem(Player,Goods)" : 1 , "getStance()" : 2 , "hasPeaceOffer()" : 2 , "initialize()" : 1 , "initialize()::MigLayout" : 1 , "insertDemands()" : 1 , "insertOffers()" : 1 , "insertText(String)" : 5 , "insertTradeItemDescriptions(Player)" : 2 , "setStance(Stance)" : 1 , "updateDemandItems()" : 1 , "updateDialog()" : 5 , "updateOfferItems()" : 1 , "updateSummary()" : 2}},{ "className" : "net::sf::freecol::server::control::ChangeSet" , "selectors" : { "ChangeSet()" : 72 , "add(See,ChangePriority,DOMMessage)" : 17 , "add(See,FreeColGameObject[])" : 141 , "add(See,List<FreeColGameObject>)" : 19 , "addAttack(See,Unit,Unit,boolean)" : 2 , "addAttribute(See,String,String)" : 16 , "addDead(ServerPlayer)" : 1 , "addDisappear(ServerPlayer,Tile,FreeColGameObject)" : 3 , "addDispose(See,Location,FreeColGameObject)" : 22 , "addFather(ServerPlayer,FoundingFather)" : 1 , "addGlobalHistory(Game,HistoryEvent)" : 8 , "addHistory(ServerPlayer,HistoryEvent)" : 10 , "addMessage(See,ModelMessage)" : 107 , "addMove(See,Unit,Location,Tile)" : 2 , "addPartial(See,FreeColGameObject,String[])" : 59 , "addRegion(ServerPlayer,Region,String)" : 2 , "addSale(ServerPlayer,Settlement,GoodsType,int)" : 1 , "addSpy(See,Settlement)" : 1 , "addStance(See,Player,Stance,Player)" : 5 , "addTradeRoute(ServerPlayer,TradeRoute)" : 1 , "addTrivial(See,String,ChangePriority,String[])" : 9 , "build(ServerPlayer)" : 69 , "collapseElementList(List<Element>)" : 1 , "collapseElements(Element,Element)" : 1 , "collapseOK(Element,Element)" : 1}},{ "className" : "net::sf::freecol::client::gui::action::RenameAction" , "selectors" : { "RenameAction(FreeColClient)" : 1}},{ "className" : "net::sf::freecol::common::networking::EmigrateUnitMessage" , "selectors" : { "EmigrateUnitMessage(Game,Element)" : 1 , "EmigrateUnitMessage(int)" : 2 , "getXMLElementTagName()" : 2 , "handle(FreeColServer,Player,Connection)" : 1}},{ "className" : "net::sf::freecol::client::gui::action::BuildColonyAction" , "selectors" : { "BuildColonyAction(FreeColClient)" : 1}},{ "className" : "net::sf::freecol::common::networking::UpdateCurrentStopMessage" , "selectors" : { "UpdateCurrentStopMessage(Game,Element)" : 1 , "UpdateCurrentStopMessage(Unit)" : 1 , "getXMLElementTagName()" : 2 , "handle(FreeColServer,Connection)" : 1}},{ "className" : "org::apache::jasper::compiler::TestParser" , "selectors" : { "assertEcho(String,String)" : 34}},{ "className" : "org::apache::catalina::startup::SetAuthConstraintRule" , "selectors" : { "SetAuthConstraintRule()" : 1}},{ "className" : "org::apache::tomcat::util::digester::SetPropertyRule" , "selectors" : { "SetPropertyRule(String,String)" : 2}},{ "className" : "org::apache::tomcat::jni::Status" , "selectors" : { "APR_STATUS_IS_EINVAL(int)" : 1 , "is(int,int)" : 53}},{ "className" : "org::apache::el::parser::ArithmeticNode" , "selectors" : { "ArithmeticNode(int)" : 5}},{ "className" : "org::apache::jasper::compiler::JspUtil::ValidAttribute" , "selectors" : { "ValidAttribute(String)" : 73 , "ValidAttribute(String,boolean)" : 15 , "ValidAttribute(String,boolean,boolean)" : 8}},{ "className" : "org::apache::tomcat::util::res::StringManager" , "selectors" : { "StringManager(String)" : 1 , "getManager(String)" : 98 , "getString(String)" : 605 , "getString(String,Object[])" : 758}},{ "className" : "javax::naming::StringRefAddr" , "selectors" : { "StringRefAddr(String,String)" : 121 , "getContent()" : 9}},{ "className" : "org::apache::catalina::ant::DeployTask" , "selectors" : { "execute()::BuildException" : 5}},{ "className" : "org::apache::catalina::filters::RequestDumperFilter" , "selectors" : { "doLog(String,String)" : 48 , "getTimestamp()" : 2}},{ "className" : "org::apache::jasper::el::ELContextImpl" , "selectors" : { "ELContextImpl()" : 11 , "ELContextImpl(ELResolver)" : 5 , "setFunctionMapper(FunctionMapper)" : 8}},{ "className" : "org::apache::catalina::core::TestStandardContextResources" , "selectors" : { "assertPageContains(String,String)" : 15}},{ "className" : "org::apache::catalina::ha::session::BackupManager" , "selectors" : { "BackupManager()" : 1 , "getActiveSessionsFull()" : 1 , "getMapName()" : 1 , "getName()" : 1 , "getSessionIdsFull()" : 1}},{ "className" : "filters::SetCharacterEncodingFilter" , "selectors" : { "selectEncoding(ServletRequest)" : 1}},{ "className" : "org::apache::catalina::servlets::WebdavServlet::LockInfo" , "selectors" : { "LockInfo()" : 1 , "hasExpired()" : 4 , "isExclusive()" : 8 , "toXML(XMLWriter)" : 3}},{ "className" : "org::apache::el::TestELInJsp" , "selectors" : { "assertEcho(String,String)" : 151}},{ "className" : "org::apache::jasper::compiler::Generator::FragmentHelperClass::Fragment" , "selectors" : { "Fragment(int,Node)" : 1 , "getGenBuffer()" : 6 , "getId()" : 2}},{ "className" : "javax::servlet::jsp::tagext::VariableInfo" , "selectors" : { "VariableInfo(String,String,boolean,int)" : 3 , "getClassName()" : 3 , "getDeclare()" : 2 , "getScope()" : 4 , "getVarName()" : 9}},{ "className" : "org::apache::el::util::MessageFactory" , "selectors" : { "get(String)" : 8 , "get(String,Object)" : 16 , "get(String,Object,Object)" : 7 , "get(String,Object,Object,Object)" : 21 , "getArray(String,Object[])" : 5}},{ "className" : "org::apache::jasper::compiler::ELParser::Token" , "selectors" : { "toChar()" : 5 , "toString()" : 4}},{ "className" : "org::apache::catalina::valves::RemoteAddrValve" , "selectors" : { "RemoteAddrValve()" : 1}},{ "className" : "org::apache::catalina::core::ApplicationDispatcher::PrivilegedInclude" , "selectors" : { "PrivilegedInclude(ServletRequest,ServletResponse)" : 1}},{ "className" : "org::apache::el::parser::TestELParser" , "selectors" : { "testExpression(String,String)" : 21}},{ "className" : "org::apache::jasper::tagplugins::jstl::Util" , "selectors" : { "getScope(String)" : 4 , "isAbsoluteUrl(String)" : 1}},{ "className" : "org::apache::catalina::Lifecycle" , "selectors" : { "addLifecycleListener(LifecycleListener)" : 17 , "destroy()" : 12 , "getState()" : 10 , "init()" : 5 , "removeLifecycleListener(LifecycleListener)" : 2 , "start()" : 41 , "stop()" : 44}},{ "className" : "java::util::concurrent::atomic::AtomicReference" , "selectors" : { "compareAndSet(V,V)" : 19 , "get()" : 50 , "set(V)" : 24}},{ "className" : "org::apache::tomcat::util::bcel::classfile::ConstantDouble" , "selectors" : { "ConstantDouble(DataInput)" : 1 , "ConstantDouble(double)" : 1 , "getBytes()" : 3}},{ "className" : "org::apache::catalina::LifecycleEvent" , "selectors" : { "LifecycleEvent(Lifecycle,String,Object)" : 2 , "getData()" : 1 , "getLifecycle()" : 15 , "getType()" : 38}},{ "className" : "org::apache::tomcat::util::http::fileupload::ProgressListener" , "selectors" : { "update(long,long,int)" : 1}},{ "className" : "org::apache::jasper::compiler::Node::Scriptlet" , "selectors" : { "Node" : 5}},{ "className" : "org::apache::catalina::valves::AccessLogValve::RequestURIElement" , "selectors" : { "RequestURIElement()" : 2}},{ "className" : "org::apache::jasper::security::SecurityUtil" , "selectors" : { "filter(String)" : 1 , "isPackageProtectionEnabled()" : 18}},{ "className" : "org::apache::catalina::tribes::group::AbsoluteOrder" , "selectors" : { "absoluteOrder(Member[])" : 8}},{ "className" : "java::io::CharConversionException" , "selectors" : { "CharConversionException()" : 19 , "CharConversionException(String)" : 7}},{ "className" : "org::apache::catalina::Loader" , "selectors" : { "backgroundProcess()" : 1 , "getClassLoader()" : 33 , "getContainer()" : 1 , "setContainer(Container)" : 1}},{ "className" : "org::apache::catalina::startup::ClusterRuleSetFactory::DefaultClusterRuleSet" , "selectors" : { "DefaultClusterRuleSet(String)" : 2}},{ "className" : "org::apache::catalina::connector::ResponseFacade" , "selectors" : { "ResponseFacade(Response)" : 1 , "clear()" : 1 , "finish()" : 1 , "isCommitted()" : 18 , "isFinished()" : 3}},{ "className" : "javax::servlet::Servlet" , "selectors" : { "destroy()" : 3 , "getServletConfig()" : 1 , "init(ServletConfig)" : 3 , "service(ServletRequest,ServletResponse)" : 5}},{ "className" : "org::apache::jasper::compiler::AntCompiler::SystemLogHandler" , "selectors" : { "SystemLogHandler(PrintStream)" : 1 , "findStream()" : 25 , "setThread()" : 1 , "unsetThread()" : 1}},{ "className" : "org::apache::catalina::tribes::membership::McastServiceImpl::RecoveryThread" , "selectors" : { "RecoveryThread(McastServiceImpl)" : 2 , "init(RecoveryThread)" : 1 , "startService()" : 1 , "stopService()" : 1}},{ "className" : "org::apache::catalina::tribes::transport::RxTaskPool::TaskCreator" , "selectors" : { "createRxTask()" : 1}},{ "className" : "org::apache::el::TesterBeanBB" , "selectors" : { "TesterBeanBB()" : 1}},{ "className" : "org::apache::tomcat::util::digester::ArrayStack" , "selectors" : { "empty()" : 4 , "peek()" : 4 , "peek(int)" : 2 , "pop()" : 9 , "push(E)" : 9}},{ "className" : "java::io::BufferedWriter" , "selectors" : { "BufferedWriter(Writer)" : 447 , "BufferedWriter(Writer,int)" : 33 , "close()" : 234 , "flush()" : 131 , "java" : 1 , "newLine()" : 312 , "write(String,int,int)" : 37 , "write(char[],int,int)" : 12 , "write(int)" : 31}},{ "className" : "org::apache::catalina::tribes::util::ExecutorFactory" , "selectors" : { "newThreadPool(int,int,long,TimeUnit)" : 1 , "newThreadPool(int,int,long,TimeUnit,ThreadFactory)" : 1}},{ "className" : "org::apache::catalina::startup::DigesterFactory" , "selectors" : { "newDigester(boolean,boolean,RuleSet)" : 15 , "register(String,String,SchemaResolver)" : 26 , "registerLocalSchema(SchemaResolver)" : 1}},{ "className" : "org::apache::catalina::ContainerEvent" , "selectors" : { "ContainerEvent(Container,String,Object)" : 1 , "getContainer()" : 3 , "getData()" : 25 , "getType()" : 12}},{ "className" : "javax::net::ssl::SSLSessionContext" , "selectors" : { "setSessionCacheSize(int)" : 2 , "setSessionTimeout(int)" : 2}},{ "className" : "org::apache::catalina::servlets::CGIServlet" , "selectors" : { "doGet(HttpServletRequest,HttpServletResponse)" : 1 , "printServletEnvironment(ServletOutputStream,HttpServletRequest,HttpServletResponse)" : 1}},{ "className" : "javax::el::VariableMapper" , "selectors" : { "VariableMapper()" : 1 , "resolveVariable(String)" : 7 , "setVariable(String,ValueExpression)" : 14}},{ "className" : "org::apache::catalina::tribes::MembershipListener" , "selectors" : { "memberAdded(Member)" : 4 , "memberDisappeared(Member)" : 5}},{ "className" : "org::apache::catalina::session::PersistentManagerBase::PrivilegedStoreSave" , "selectors" : { "PrivilegedStoreSave(Session)" : 1}},{ "className" : "org::apache::catalina::filters::ExpiresFilter::ExpiresConfiguration" , "selectors" : { "ExpiresConfiguration(StartingPoint,List<Duration>)" : 2 , "getDurations()" : 19 , "getStartingPoint()" : 9}},{ "className" : "org::apache::catalina::ssi::ByteArrayServletOutputStream" , "selectors" : { "ByteArrayServletOutputStream()" : 2 , "toByteArray()" : 2}},{ "className" : "org::apache::catalina::mbeans::MemoryUserDatabaseMBean" , "selectors" : { "findGroup(String)" : 2 , "findRole(String)" : 2 , "findUser(String)" : 2}},{ "className" : "org::apache::catalina::startup::SetAllPropertiesRule" , "selectors" : { "SetAllPropertiesRule()" : 6 , "SetAllPropertiesRule(String[])" : 1}},{ "className" : "org::apache::tomcat::util::ExceptionUtils" , "selectors" : { "handleThrowable(Throwable)" : 53}},{ "className" : "org::apache::catalina::util::URLEncoder" , "selectors" : { "URLEncoder()" : 5 , "addSafeCharacter(char)" : 32 , "encode(String)" : 11}},{ "className" : "org::apache::tomcat::util::bcel::classfile::RuntimeVisibleParameterAnnotations" , "selectors" : { "RuntimeVisibleParameterAnnotations(int,int,DataInputStream,ConstantPool)" : 1}},{ "className" : "org::apache::catalina::core::ApplicationDispatcher::State" , "selectors" : { "State(ServletRequest,ServletResponse,boolean)" : 2}},{ "className" : "org::apache::tomcat::jni::Pool" , "selectors" : { "create(long)" : 4 , "destroy(long)" : 6}},{ "className" : "java::util::logging::ErrorManager" , "selectors" : { "ErrorManager()" : 1}},{ "className" : "org::apache::catalina::startup::XmlErrorHandler" , "selectors" : { "XmlErrorHandler()" : 3 , "getErrors()" : 3 , "getWarnings()" : 3 , "logFindings(Log,String)" : 6}},{ "className" : "org::apache::tomcat::util::bcel::classfile::ClassFormatException" , "selectors" : { "ClassFormatException(String)" : 11 , "ClassFormatException(String,Throwable)" : 3}},{ "className" : "org::apache::jasper::compiler::Node::TaglibDirective" , "selectors" : { "Node" : 1}},{ "className" : "org::apache::jasper::xmlparser::XMLString" , "selectors" : { "XMLString()" : 1 , "clear()" : 1 , "setValues(XMLString)" : 3 , "setValues(char[],int,int)" : 4 , "toString()" : 5}},{ "className" : "org::apache::catalina::startup::TaglibLocationRule" , "selectors" : { "TaglibLocationRule(boolean)" : 2}},{ "className" : "org::apache::coyote::ActionCode" , "selectors" : { "ActionCode(int)" : 29}},{ "className" : "org::apache::tomcat::util::net::SSLSupport::CipherData" , "selectors" : { "CipherData(String,int)" : 10}},{ "className" : "javax::el::MethodExpression" , "selectors" : { "MethodExpression()" : 3 , "getMethodInfo(ELContext)" : 2 , "invoke(ELContext,Object[])" : 31 , "isParmetersProvided()" : 2}},{ "className" : "org::apache::catalina::tribes::demos::ChannelCreator" , "selectors" : { "createChannel(String[])" : 4 , "usage()" : 4}},{ "className" : "org::apache::jasper::compiler::Node::ParamsAction" , "selectors" : { "Node" : 3}},{ "className" : "util::HTMLFilter" , "selectors" : { "filter(String)" : 12}},{ "className" : "org::apache::catalina::ssi::ExpressionParseTree::NotNode" , "selectors" : { "NotNode()" : 4}},{ "className" : "org::apache::tomcat::util::net::SecureNioChannel::ApplicationBufferHandler" , "selectors" : { "expand(ByteBuffer,int)" : 2 , "getReadBuffer()" : 12 , "getWriteBuffer()" : 18}},{ "className" : "javax::servlet::jsp::tagext::BodyContent" , "selectors" : { "BodyContent(JspWriter)" : 1 , "clearBody()" : 1 , "getEnclosingWriter()" : 3 , "getString()" : 1 , "writeOut(Writer)" : 2}},{ "className" : "listeners::SessionListener" , "selectors" : { "log(String)" : 7}},{ "className" : "org::apache::jasper::compiler::TagFileProcessor::TagFileDirectiveVisitor::NameEntry" , "selectors" : { "NameEntry(String,Node,TagAttributeInfo)" : 1 , "getNode()" : 3 , "getTagAttributeInfo()" : 1 , "getType()" : 2}},{ "className" : "org::apache::jasper::compiler::Node::ScriptingElement" , "selectors" : { "ScriptingElement(String,String,Attributes,Attributes,Mark,Node)" : 3 , "ScriptingElement(String,String,String,Mark,Node)" : 3 , "getStart()" : 3 , "getText()" : 6}},{ "className" : "org::apache::tomcat::util::bcel::classfile::Constant" , "selectors" : { "Constant(byte)" : 9 , "getTag()" : 6 , "readConstant(DataInputStream)" : 1 , "toString()" : 12}},{ "className" : "org::apache::catalina::valves::ExtendedAccessLogValve::ServletContextElement" , "selectors" : { "ServletContextElement(String)" : 1}},{ "className" : "javax::naming::NameNotFoundException" , "selectors" : { "NameNotFoundException()" : 4 , "NameNotFoundException(String)" : 26}},{ "className" : "org::apache::catalina::tribes::group::interceptors::DomainFilterInterceptor" , "selectors" : { "DomainFilterInterceptor()" : 2 , "setDomain(byte[])" : 4 , "setupMembership()" : 5}},{ "className" : "org::apache::tomcat::util::bcel::classfile::ConstantLong" , "selectors" : { "ConstantLong(DataInput)" : 1 , "ConstantLong(long)" : 1 , "getBytes()" : 3}},{ "className" : "javax::servlet::jsp::el::VariableResolver" , "selectors" : { "resolveVariable(String)" : 2}},{ "className" : "org::apache::tomcat::util::digester::RulesBase" , "selectors" : { "RulesBase()" : 1 , "lookup(String,String)" : 2}},{ "className" : "org::apache::jasper::compiler::Node::ForwardAction" , "selectors" : { "Node" : 3 , "getPage()" : 3 , "setPage(JspAttribute)" : 1}},{ "className" : "org::apache::tomcat::jni::Address" , "selectors" : { "get(int,long)" : 6 , "getInfo(long)" : 3 , "getip(long)" : 2 , "getnameinfo(long,int)" : 2 , "info(String,int,int,int,long)" : 1}},{ "className" : "org::apache::el::parser::AstFunction" , "selectors" : { "AstFunction(int)" : 1 , "getLocalName()" : 1 , "getOutputName()" : 8 , "getPrefix()" : 1 , "setLocalName(String)" : 2 , "setPrefix(String)" : 1}},{ "className" : "javax::servlet::ServletException" , "selectors" : { "ServletException()" : 4 , "ServletException(String)" : 18 , "ServletException(String,Throwable)" : 27 , "ServletException(Throwable)" : 23 , "getRootCause()" : 6}},{ "className" : "org::apache::catalina::tribes::UniqueId" , "selectors" : { "UniqueId(byte[])" : 17 , "UniqueId(byte[],int,int)" : 2 , "equals(Object)" : 2 , "getBytes()" : 4}},{ "className" : "org::apache::catalina::connector::TestRequest::LoginLogoutServlet" , "selectors" : { "LoginLogoutServlet()" : 1}},{ "className" : "org::apache::catalina::filters::TestAddCharSetFilter" , "selectors" : { "doTest(String,String)" : 6 , "doTest(String,String,int)" : 3}},{ "className" : "javax::servlet::jsp::tagext::JspFragment" , "selectors" : { "invoke(Writer)" : 19}},{ "className" : "org::apache::jasper::compiler::TagPluginManager::TagPluginContextImpl" , "selectors" : { "TagPluginContextImpl(CustomTag,PageInfo)" : 1 , "getNodeAttribute(String)" : 3}},{ "className" : "org::apache::tomcat::util::bcel::classfile::SimpleElementValue" , "selectors" : { "SimpleElementValue(int,int,ConstantPool)" : 9 , "getIndex()" : 10 , "stringifyValue()" : 1}},{ "className" : "org::apache::tomcat::util::http::TestCookiesAllowEquals::SimpleServlet" , "selectors" : { "SimpleServlet()" : 1}},{ "className" : "org::apache::jasper::compiler::Node::IncludeDirective" , "selectors" : { "Node" : 5}},{ "className" : "java::io::FilePermission" , "selectors" : { "FilePermission(String,String)" : 34}},{ "className" : "org::apache::jasper::compiler::ServletWriter" , "selectors" : { "ServletWriter(PrintWriter)" : 2 , "close()" : 5 , "getJavaLine()" : 44 , "popIndent()" : 61 , "print(String)" : 255 , "print(char)" : 2 , "print(int)" : 2 , "printMultiLn(String)" : 7 , "printil(String)" : 243 , "printin()" : 2 , "printin(String)" : 111 , "println()" : 27 , "println(String)" : 115 , "pushIndent()" : 64}},{ "className" : "javax::servlet::jsp::el::FunctionMapper" , "selectors" : { "resolveFunction(String,String)" : 1}},{ "className" : "org::apache::tomcat::util::digester::ObjectCreateRule" , "selectors" : { "ObjectCreateRule(Class<?>)" : 1 , "ObjectCreateRule(String)" : 1 , "ObjectCreateRule(String,Class<?>)" : 1 , "ObjectCreateRule(String,String)" : 4}},{ "className" : "org::apache::naming::NamingEntry" , "selectors" : { "NamingEntry(String,Object,int)" : 8}},{ "className" : "javax::el::ELException" , "selectors" : { "ELException()" : 3 , "ELException(String)" : 34 , "ELException(String,Throwable)" : 19 , "ELException(Throwable)" : 17}},{ "className" : "org::apache::catalina::servlets::WebdavStatus" , "selectors" : { "addStatusCodeMap(int,String)" : 26 , "getStatusText(int)" : 7}},{ "className" : "javax::security::auth::callback::TextInputCallback" , "selectors" : { "TextInputCallback(String)" : 8 , "getDefaultText()" : 2 , "getPrompt()" : 7 , "getText()" : 8 , "setText(String)" : 8}},{ "className" : "org::apache::catalina::valves::AccessLogValve::StringElement" , "selectors" : { "StringElement(String)" : 9}},{ "className" : "org::apache::tomcat::util::net::JIoEndpoint::PrivilegedSetTccl" , "selectors" : { "PrivilegedSetTccl(ClassLoader)" : 2}},{ "className" : "javax::servlet::GenericServlet" , "selectors" : { "getInitParameter(String)" : 6 , "getServletConfig()" : 52 , "getServletContext()" : 31 , "getServletName()" : 2 , "init()" : 1 , "init(ServletConfig)" : 3 , "log(String)" : 87 , "log(String,Throwable)" : 19}},{ "className" : "org::apache::catalina::util::MD5Encoder" , "selectors" : { "MD5Encoder()" : 3 , "encode(byte[])" : 6}},{ "className" : "org::apache::tomcat::util::bcel::classfile::Unknown" , "selectors" : { "Unknown(int,int,DataInputStream,ConstantPool)" : 1 , "Unknown(int,int,byte[],ConstantPool)" : 1}},{ "className" : "org::apache::catalina::Contained" , "selectors" : { "getContainer()" : 1 , "setContainer(Container)" : 6}},{ "className" : "org::apache::catalina::filters::ExpiresFilter::Duration" , "selectors" : { "Duration(int,DurationUnit)" : 3 , "getAmount()" : 10 , "getUnit()" : 10}},{ "className" : "org::apache::catalina::tribes::group::RpcChannel" , "selectors" : { "RpcChannel(byte[],Channel,RpcCallback)" : 2 , "breakdown()" : 3 , "send(Member[],Serializable,int,int,long)" : 5}},{ "className" : "org::apache::catalina::tribes::util::ExecutorFactory::TaskQueue" , "selectors" : { "TaskQueue()" : 2 , "setParent(ThreadPoolExecutor)" : 2}},{ "className" : "org::apache::jasper::compiler::TextOptimizer" , "selectors" : { "concatenate(Compiler,Nodes)" : 1}},{ "className" : "org::apache::catalina::core::StandardThreadExecutor" , "selectors" : { "getMaxThreads()" : 1 , "getMinSpareThreads()" : 1 , "getName()" : 1 , "getThreadPriority()" : 1}},{ "className" : "org::apache::catalina::valves::Benchmarks::GetDateBenchmarkTest_LocalStruct" , "selectors" : { "GetDateBenchmarkTest_LocalStruct()" : 1 , "getCurrentDate()" : 1}},{ "className" : "org::apache::catalina::ssi::SSIServletExternalResolver::ServletContextAndPath" , "selectors" : { "ServletContextAndPath(ServletContext,String)" : 5 , "getPath()" : 2 , "getServletContext()" : 2}},{ "className" : "javax::servlet::jsp::tagext::TagSupport" , "selectors" : { "TagSupport()" : 1 , "doEndTag()" : 3 , "doStartTag()" : 2 , "release()" : 1}},{ "className" : "org::apache::catalina::filters::TestRemoteIpFilter::MockHttpServletRequest" , "selectors" : { "MockHttpServletRequest()" : 10 , "setHeader(String,String)" : 10 , "setScheme(String)" : 2}},{ "className" : "org::apache::jasper::runtime::InstanceManagerFactory" , "selectors" : { "getInstanceManager(ServletConfig)" : 3}},{ "className" : "org::apache::el::MethodExpressionImpl" , "selectors" : { "MethodExpressionImpl(String,Node,FunctionMapper,VariableMapper,Class<?>,Class<?>[])" : 1 , "getNode()" : 3 , "hashCode()" : 1}},{ "className" : "org::apache::catalina::LifecycleState" , "selectors" : { "getLifecycleEvent()" : 1 , "isAvailable()" : 41}},{ "className" : "org::apache::catalina::tribes::util::StringManager" , "selectors" : { "StringManager(String)" : 1 , "getManager(String)" : 4 , "getString(String)" : 1 , "getString(String,Object[])" : 8}},{ "className" : "org::apache::el::ExpressionFactoryImpl" , "selectors" : { "ExpressionFactoryImpl()" : 2 , "createValueExpression(ELContext,String,Class<?>)" : 2}},{ "className" : "org::apache::tomcat::util::http::fileupload::util::Streams" , "selectors" : { "checkFileName(String)" : 2 , "copy(InputStream,OutputStream,boolean)" : 4 , "copy(InputStream,OutputStream,boolean,byte[])" : 1}},{ "className" : "org::apache::catalina::realm::CombinedRealm" , "selectors" : { "authenticate(String,String)" : 1 , "authenticate(String,String,String,String,String,String,String,String)" : 1 , "authenticate(X509Certificate[])" : 1 , "startInternal()" : 1}},{ "className" : "org::apache::catalina::connector::TestCoyoteAdapter" , "selectors" : { "pathParamTest(String,String)" : 8 , "testPath(String,String)" : 7}},{ "className" : "java::util::concurrent::locks::ReentrantReadWriteLock::WriteLock" , "selectors" : { "lock()" : 59 , "tryLock()" : 2 , "tryLock(long,TimeUnit)" : 1 , "unlock()" : 60}},{ "className" : "org::apache::jasper::JasperException" , "selectors" : { "JasperException(String)" : 21 , "JasperException(String,Throwable)" : 13 , "JasperException(Throwable)" : 31}},{ "className" : "org::apache::el::parser::JJTELParserState" , "selectors" : { "JJTELParserState()" : 1 , "clearNodeScope(Node)" : 24 , "closeNodeScope(Node,boolean)" : 26 , "closeNodeScope(Node,int)" : 14 , "nodeArity()" : 2 , "openNodeScope(Node)" : 33 , "popNode()" : 27 , "pushNode(Node)" : 2 , "reset()" : 3}},{ "className" : "org::apache::jasper::compiler::TestGenerator" , "selectors" : { "assertEcho(String,String)" : 11 , "testBug48701(String)" : 4}},{ "className" : "org::apache::tomcat::util::buf::ByteChunk::ByteOutputChannel" , "selectors" : { "realWriteBytes(byte[],int,int)" : 3}},{ "className" : "org::apache::catalina::tribes::io::BufferPool" , "selectors" : { "BufferPool(BufferPoolAPI)" : 1 , "getBuffer(int,boolean)" : 3 , "getBufferPool()" : 6 , "returnBuffer(XByteBuffer)" : 3}},{ "className" : "org::apache::catalina::tribes::group::InterceptorPayload" , "selectors" : { "InterceptorPayload()" : 1 , "getErrorHandler()" : 1 , "setErrorHandler(ErrorHandler)" : 1}},{ "className" : "org::apache::catalina::valves::AccessLogValve::AccessLogElement" , "selectors" : { "addElement(StringBuilder,Date,Request,Response,long)" : 1}},{ "className" : "org::apache::catalina::ssi::ExpressionParseTree" , "selectors" : { "ExpressionParseTree(String,SSIMediator)" : 1 , "evaluateTree()" : 1 , "parseExpression(String)" : 1 , "pushOpp(OppNode)" : 11 , "resolveGroup()" : 2}},{ "className" : "javax::naming::OperationNotSupportedException" , "selectors" : { "OperationNotSupportedException()" : 137 , "OperationNotSupportedException(String)" : 74}},{ "className" : "org::apache::catalina::connector::CometEventImpl" , "selectors" : { "CometEventImpl(Request,Response)" : 1 , "clear()" : 1 , "close()" : 2 , "setEventSubType(EventSubType)" : 14 , "setEventType(EventType)" : 14}},{ "className" : "org::apache::catalina::ssi::ExpressionParseTree::LessThanNode" , "selectors" : { "LessThanNode()" : 2}},{ "className" : "javax::servlet::ServletRequestListener" , "selectors" : { "requestDestroyed(ServletRequestEvent)" : 1 , "requestInitialized(ServletRequestEvent)" : 1}},{ "className" : "javax::management::RuntimeOperationsException" , "selectors" : { "RuntimeOperationsException(RuntimeException)" : 130 , "RuntimeOperationsException(RuntimeException,String)" : 65 , "getTargetException()" : 19}},{ "className" : "org::apache::juli::FileHandler" , "selectors" : { "FileHandler(String,String,String)" : 2 , "close()" : 1 , "closeWriter()" : 2 , "configure()" : 1 , "getProperty(String,String)" : 8 , "open()" : 1 , "openWriter()" : 3 , "publish(LogRecord)" : 1}},{ "className" : "javax::servlet::FilterChain" , "selectors" : { "doFilter(ServletRequest,ServletResponse)" : 24}},{ "className" : "org::apache::tomcat::util::buf::B2CConverter" , "selectors" : { "B2CConverter(String)" : 3 , "convert(ByteChunk,CharChunk,int)" : 2 , "recycle()" : 1 , "reset()" : 2}},{ "className" : "org::apache::catalina::tribes::group::Response" , "selectors" : { "Response(Member,Serializable)" : 1 , "getMessage()" : 4 , "getSource()" : 5}},{ "className" : "org::apache::catalina::users::AbstractUser" , "selectors" : { "AbstractUser()" : 1 , "getUsername()" : 2 , "setFullName(String)" : 1 , "setPassword(String)" : 1 , "setUsername(String)" : 1}},{ "className" : "org::apache::catalina::session::FileStore" , "selectors" : { "directory()" : 3 , "file(String)" : 3 , "getStoreName()" : 3 , "keys()" : 1 , "remove(String)" : 1}},{ "className" : "org::apache::el::parser::AstOr" , "selectors" : { "AstOr(int)" : 1}},{ "className" : "org::apache::tomcat::util::modeler::FeatureInfo" , "selectors" : { "FeatureInfo()" : 2 , "getDescription()" : 5 , "getName()" : 10 , "getType()" : 3 , "setDescription(String)" : 5 , "setName(String)" : 5 , "setType(String)" : 4}},{ "className" : "sessions::DummyCart" , "selectors" : { "addItem(String)" : 1 , "removeItem(String)" : 1 , "reset()" : 1}},{ "className" : "org::apache::tomcat::util::bcel::classfile::Signature" , "selectors" : { "Signature(int,int,DataInput,ConstantPool)" : 1 , "Signature(int,int,int,ConstantPool)" : 1 , "getSignature()" : 1}},{ "className" : "org::apache::catalina::util::HexUtils" , "selectors" : { "convert(byte[])" : 3 , "convertDigit(int)" : 4}},{ "className" : "org::apache::catalina::Executor" , "selectors" : { "getName()" : 1}},{ "className" : "org::apache::tomcat::util::buf::CharChunk::CharOutputChannel" , "selectors" : { "realWriteChars(char[],int,int)" : 3}},{ "className" : "org::apache::catalina::Role" , "selectors" : { "getDescription()" : 2 , "getRolename()" : 6 , "getUserDatabase()" : 1}},{ "className" : "org::apache::naming::ResourceEnvRef" , "selectors" : { "ResourceEnvRef(String)" : 1}},{ "className" : "org::apache::catalina::tribes::tipis::AbstractReplicatedMap::MapOwner" , "selectors" : { "objectMadePrimay(Object,Object)" : 1}},{ "className" : "org::apache::catalina::tribes::group::interceptors::MessageDispatch15Interceptor" , "selectors" : { "MessageDispatch15Interceptor()" : 9 , "setAndGetCurrentSize(long)" : 1}},{ "className" : "org::apache::catalina::connector::TestRequest::Bug37794Client" , "selectors" : { "Bug37794Client()" : 1 , "doRequest(int,boolean)" : 8 , "init()" : 1 , "isResponseBodyOK()" : 6}},{ "className" : "javax::servlet::http::HttpSessionEvent" , "selectors" : { "HttpSessionEvent(HttpSession)" : 6 , "getSession()" : 4}},{ "className" : "org::apache::catalina::mbeans::JmxRemoteLifecycleListener" , "selectors" : { "createServer(String,int,int,HashMap<String,Object>,MBeanServer)" : 1 , "destroyServer(String,JMXConnectorServer)" : 1 , "init()" : 1}},{ "className" : "org::apache::catalina::filters::CsrfPreventionFilter::CsrfResponseWrapper" , "selectors" : { "CsrfResponseWrapper(HttpServletResponse,String)" : 1 , "addNonce(String)" : 2 , "encodeRedirectURL(String)" : 1 , "encodeURL(String)" : 1}},{ "className" : "org::apache::jasper::compiler::Node::ParamAction" , "selectors" : { "Node" : 3 , "getValue()" : 5 , "setValue(JspAttribute)" : 1}},{ "className" : "org::apache::jasper::compiler::Node::Comment" , "selectors" : { "Node" : 2}},{ "className" : "org::apache::tomcat::util::bcel::classfile::LocalVariableTypeTable" , "selectors" : { "LocalVariableTypeTable(int,int,DataInputStream,ConstantPool)" : 1 , "LocalVariableTypeTable(int,int,LocalVariable[],ConstantPool)" : 1 , "setLocalVariableTable(LocalVariable[])" : 1}},{ "className" : "org::apache::jasper::compiler::TestAttributeParser" , "selectors" : { "evalAttr(String,char)" : 59 , "parseScriptExpression(String,char)" : 2}},{ "className" : "org::apache::catalina::security::SecurityConfig" , "selectors" : { "SecurityConfig()" : 1 , "newInstance()" : 2 , "setPackageAccess()" : 2 , "setPackageDefinition()" : 2 , "setSecurityProperty(String,String)" : 4}},{ "className" : "javax::servlet::jsp::tagext::ValidationMessage" , "selectors" : { "ValidationMessage(String,String)" : 1 , "getId()" : 3 , "getMessage()" : 2}},{ "className" : "org::apache::catalina::ssi::SSIConditional" , "selectors" : { "SSIConditional()" : 1 , "evaluateArguments(String[],String[],SSIMediator)" : 2 , "getExpression(String[],String[])" : 1}},{ "className" : "org::apache::juli::logging::LogFactory" , "selectors" : { "LogFactory()" : 1 , "getFactory()" : 2 , "getInstance(Class<?>)" : 1 , "getInstance(String)" : 2 , "getLog(Class<?>)" : 191 , "getLog(String)" : 9 , "release()" : 1 , "release(ClassLoader)" : 2}},{ "className" : "org::apache::el::lang::FunctionMapperImpl::Function" , "selectors" : { "Function(String,String,Method)" : 1 , "getMethod()" : 2 , "hashCode()" : 1}},{ "className" : "org::apache::catalina::tribes::transport::bio::util::FastQueue" , "selectors" : { "FastQueue()" : 1 , "add(ChannelMessage,Member[],InterceptorPayload)" : 1 , "remove()" : 1 , "setEnabled(boolean)" : 4}},{ "className" : "org::apache::catalina::startup::RealmRuleSet" , "selectors" : { "RealmRuleSet(String)" : 4}},{ "className" : "org::apache::catalina::core::StandardHost::MemoryLeakTrackingListener" , "selectors" : { "MemoryLeakTrackingListener()" : 1}},{ "className" : "org::apache::jasper::compiler::Node::FallBackAction" , "selectors" : { "Node" : 3}},{ "className" : "javax::servlet::jsp::tagext::FunctionInfo" , "selectors" : { "FunctionInfo(String,String,String)" : 1 , "getFunctionClass()" : 3 , "getFunctionSignature()" : 2 , "getName()" : 2}},{ "className" : "org::apache::jasper::servlet::JasperLoader" , "selectors" : { "JasperLoader(URL[],ClassLoader,PermissionCollection)" : 1 , "loadClass(String,boolean)" : 1}},{ "className" : "org::apache::catalina::filters::ExpiresFilter::XServletOutputStream" , "selectors" : { "XServletOutputStream(ServletOutputStream,HttpServletRequest,XHttpServletResponse)" : 1 , "fireOnBeforeWriteResponseBodyEvent()" : 20}},{ "className" : "java::io::BufferedOutputStream" , "selectors" : { "BufferedOutputStream(OutputStream)" : 338 , "BufferedOutputStream(OutputStream,int)" : 70 , "flush()" : 89 , "java" : 1 , "showMessageDialog(???)" : 1 , "write(byte[],int,int)" : 68 , "write(int)" : 22}},{ "className" : "org::apache::tomcat::util::http::MimeHeaderField" , "selectors" : { "MimeHeaderField()" : 1 , "getName()" : 11 , "getValue()" : 8 , "recycle()" : 2}},{ "className" : "org::apache::jasper::compiler::Generator::TagHandlerInfo" , "selectors" : { "TagHandlerInfo(Node,Class<?>,ErrorDispatcher)" : 1 , "getPropertyEditorClass(String)" : 2 , "getSetterMethod(String)" : 2 , "getTagHandlerClass()" : 2}},{ "className" : "org::apache::tomcat::util::net::JIoEndpoint::SocketProcessor" , "selectors" : { "SocketProcessor(SocketWrapper<Socket>)" : 3 , "SocketProcessor(SocketWrapper<Socket>,SocketStatus)" : 1}},{ "className" : "org::apache::tomcat::buildutil::Txt2Html" , "selectors" : { "<Initializer>()::LinkedList" : 18 , "convert(File,File)" : 1 , "execute()::BuildException" : 1}},{ "className" : "javax::servlet::ServletContainerInitializer" , "selectors" : { "onStartup(Set<Class<?>>,ServletContext)" : 1}},{ "className" : "org::apache::naming::resources::VirtualDirContext" , "selectors" : { "getVirtualNamingEntries()" : 1 , "scanForTlds(File)" : 2}},{ "className" : "org::apache::el::parser::TokenMgrError" , "selectors" : { "LexicalError(boolean,int,int,int,String,char)" : 1 , "TokenMgrError(String,int)" : 2 , "TokenMgrError(boolean,int,int,int,String,char,int)" : 1 , "addEscapes(String)" : 2}},{ "className" : "org::apache::jasper::compiler::PageDataImpl::FirstPassVisitor" , "selectors" : { "FirstPassVisitor(Root,PageInfo)" : 1 , "addAttributes(Attributes)" : 3 , "getJspIdPrefix()" : 1}},{ "className" : "org::apache::jasper::compiler::Node::DoBodyAction" , "selectors" : { "Node" : 3}},{ "className" : "org::apache::catalina::connector::RequestFacade::GetAttributePrivilegedAction" , "selectors" : { "GetAttributePrivilegedAction()" : 1}},{ "className" : "javax::naming::RefAddr" , "selectors" : { "RefAddr(String)" : 1 , "getContent()" : 78 , "getType()" : 24}},{ "className" : "org::apache::catalina::LifecycleException" , "selectors" : { "LifecycleException()" : 3 , "LifecycleException(String)" : 9 , "LifecycleException(String,Throwable)" : 9 , "LifecycleException(Throwable)" : 2}},{ "className" : "org::apache::catalina::core::AsyncContextImpl::PrivilegedGetTccl" , "selectors" : { "PrivilegedGetTccl()" : 2}},{ "className" : "java::net::SocketTimeoutException" , "selectors" : { "SocketTimeoutException()" : 4 , "SocketTimeoutException(String)" : 9}},{ "className" : "org::apache::tomcat::util::http::fileupload::util::LimitedInputStream" , "selectors" : { "checkLimit()" : 2 , "raiseError(long,long)" : 1}},{ "className" : "org::apache::catalina::tribes::test::membership::TestTcpFailureDetector::TestMbrListener" , "selectors" : { "TestMbrListener(String)" : 2}},{ "className" : "org::apache::tomcat::util::bcel::classfile::ConstantNameAndType" , "selectors" : { "ConstantNameAndType(DataInput)" : 1 , "ConstantNameAndType(int,int)" : 1 , "getNameIndex()" : 1 , "getSignatureIndex()" : 1}},{ "className" : "javax::el::MethodNotFoundException" , "selectors" : { "MethodNotFoundException(String)" : 5 , "MethodNotFoundException(String,Throwable)" : 1 , "MethodNotFoundException(Throwable)" : 1}},{ "className" : "org::apache::tomcat::util::http::fileupload::FileDeleteStrategy" , "selectors" : { "FileDeleteStrategy(String)" : 2 , "deleteQuietly(File)" : 1 , "doDelete(File)" : 2}},{ "className" : "java::util::AbstractCollection" , "selectors" : { "AbstractCollection()" : 3 , "add(E)" : 20 , "addAll(Collection<? extends E>)" : 166 , "clear()" : 1 , "contains(Object)" : 52 , "containsAll(Collection<?>)" : 43 , "isEmpty()" : 251 , "remove(Object)" : 50 , "removeAll(Collection<?>)" : 6 , "retainAll(Collection<?>)" : 16 , "size()" : 5 , "toArray()" : 16 , "toArray(T[])" : 78 , "toString()" : 91}},{ "className" : "org::apache::tomcat::util::bcel::classfile::ConstantCP" , "selectors" : { "ConstantCP(byte,DataInput)" : 3 , "ConstantCP(byte,int,int)" : 1 , "getClassIndex()" : 1 , "getNameAndTypeIndex()" : 1}},{ "className" : "org::apache::catalina::deploy::SessionConfig" , "selectors" : { "SessionConfig()" : 1 , "getCookieComment()" : 7 , "getCookieDomain()" : 7 , "getCookieHttpOnly()" : 9 , "getCookieMaxAge()" : 9 , "getCookieName()" : 7 , "getCookiePath()" : 7 , "getCookieSecure()" : 9 , "getSessionTimeout()" : 9 , "getSessionTrackingModes()" : 10 , "setCookieComment(String)" : 2 , "setCookieDomain(String)" : 2 , "setCookieHttpOnly(String)" : 2 , "setCookieMaxAge(String)" : 2 , "setCookieName(String)" : 2 , "setCookiePath(String)" : 2 , "setCookieSecure(String)" : 2 , "setSessionTimeout(String)" : 2}},{ "className" : "org::apache::naming::resources::FileDirContext::FileResource" , "selectors" : { "FileResource(File)" : 5}},{ "className" : "org::apache::tomcat::util::net::SSLSupport" , "selectors" : { "getCipherSuite()" : 2 , "getKeySize()" : 2 , "getPeerCertificateChain(boolean)" : 4 , "getSessionId()" : 2}},{ "className" : "org::apache::catalina::tribes::demos::LoadTest::LoadMessage" , "selectors" : { "LoadMessage()" : 3 , "getMessage()" : 7 , "getMessageSize(LoadMessage)" : 1 , "setMessage(byte[])" : 1}},{ "className" : "javax::servlet::jsp::el::ImplicitObjectELResolver::ScopeMap::ScopeEntry" , "selectors" : { "ScopeEntry(String)" : 1 , "hashCode()" : 1}},{ "className" : "org::apache::tomcat::util::net::AprEndpoint::SocketProcessor" , "selectors" : { "SocketProcessor(long)" : 1}},{ "className" : "org::apache::catalina::tribes::transport::bio::BioReplicationTask" , "selectors" : { "BioReplicationTask(ListenCallback)" : 1 , "drainSocket()" : 1 , "execute(ObjectReader)" : 1 , "sendAck(byte[])" : 3 , "serviceSocket(Socket,ObjectReader)" : 2}},{ "className" : "org::apache::jasper::xmlparser::TreeNode" , "selectors" : { "TreeNode(String,TreeNode)" : 2 , "addAttribute(String,String)" : 1 , "addChild(TreeNode)" : 1 , "findAttribute(String)" : 5 , "findAttributes()" : 1 , "findChild(String)" : 11 , "findChildren()" : 11 , "findChildren(String)" : 3 , "getBody()" : 56 , "getName()" : 15 , "setBody(String)" : 1 , "toString(StringBuilder,int,TreeNode)" : 2}},{ "className" : "org::apache::jasper::compiler::JspConfig" , "selectors" : { "JspConfig(ServletContext)" : 2 , "findJspProperty(String)" : 3 , "getVersion(TreeNode)" : 2 , "init()" : 2 , "isJspPage(String)" : 1 , "processWebDotXml()" : 1 , "selectProperty(JspPropertyGroup,JspPropertyGroup)" : 9}},{ "className" : "org::apache::catalina::ant::JKStatusUpdateTask" , "selectors" : { "checkParameter()" : 1 , "checkParameter()::BuildException" : 14 , "createLink()" : 1 , "createLink()::BuildException" : 1}},{ "className" : "org::apache::catalina::startup::HostConfig::DeployedApplication" , "selectors" : { "DeployedApplication(String)" : 4}},{ "className" : "javax::el::ExpressionFactory" , "selectors" : { "ExpressionFactory()" : 1 , "coerceToType(Object,Class<?>)" : 5 , "createMethodExpression(ELContext,String,Class<?>,Class<?>[])" : 28 , "createValueExpression(ELContext,String,Class<?>)" : 12 , "createValueExpression(Object,Class<?>)" : 13 , "getClassNameJreDir()" : 2 , "getClassNameServices(ClassLoader)" : 1 , "getClassNameSysProp()" : 2 , "newInstance()" : 10 , "newInstance(Properties)" : 1}},{ "className" : "javax::servlet::RequestDispatcher" , "selectors" : { "forward(ServletRequest,ServletResponse)" : 5 , "include(ServletRequest,ServletResponse)" : 6}},{ "className" : "org::apache::catalina::tribes::group::interceptors::NonBlockingCoordinator::CoordinationEvent" , "selectors" : { "CoordinationEvent(int,ChannelInterceptor,String)" : 21}},{ "className" : "org::apache::catalina::ha::backend::CollectedInfo" , "selectors" : { "CollectedInfo(String,int)" : 1 , "init(String,int)" : 1 , "refresh()" : 1}},{ "className" : "org::apache::jasper::compiler::ELParser::Id" , "selectors" : { "Id(String)" : 1}},{ "className" : "org::apache::tomcat::util::buf::C2BConverter" , "selectors" : { "C2BConverter(ByteChunk,String)" : 4 , "convert(String)" : 2 , "convert(String,int,int)" : 1 , "convert(char)" : 3 , "convert(char[],int,int)" : 2 , "flushBuffer()" : 6 , "recycle()" : 1 , "setByteChunk(ByteChunk)" : 2}},{ "className" : "org::apache::catalina::tribes::ChannelInterceptor::InterceptorEvent" , "selectors" : { "getEventType()" : 1 , "getEventTypeDesc()" : 1}},{ "className" : "org::apache::catalina::util::XMLWriter" , "selectors" : { "XMLWriter()" : 3 , "XMLWriter(Writer)" : 2 , "sendData()" : 3 , "toString()" : 3 , "writeData(String)" : 4 , "writeElement(String,String,String,int)" : 3 , "writeElement(String,String,int)" : 158 , "writeProperty(String,String,String)" : 24 , "writeText(String)" : 23 , "writeXMLHeader()" : 5}},{ "className" : "org::apache::catalina::filters::TestExpiresFilter" , "selectors" : { "validate(HttpServlet,Integer)" : 9 , "validate(HttpServlet,Integer,int)" : 2}},{ "className" : "org::apache::catalina::tribes::demos::EchoRpcTest" , "selectors" : { "EchoRpcTest(Channel,String,int,String,long,int,long)" : 1 , "run()" : 1 , "usage()" : 2}},{ "className" : "org::apache::catalina::servlets::DefaultServlet::Range" , "selectors" : { "Range()" : 2 , "validate()" : 2}},{ "className" : "org::apache::catalina::tribes::group::ChannelInterceptorBase" , "selectors" : { "ChannelInterceptorBase()" : 2 , "accept(ChannelMessage)" : 1 , "getLocalMember(boolean)" : 31 , "getMember(Member)" : 1 , "getMembers()" : 12 , "getNext()" : 20 , "getOptionFlag()" : 3 , "getPrevious()" : 7 , "hasMembers()" : 1 , "heartbeat()" : 7 , "memberAdded(Member)" : 10 , "memberDisappeared(Member)" : 8 , "messageReceived(ChannelMessage)" : 13 , "okToProcess(int)" : 7 , "sendMessage(Member[],ChannelMessage,InterceptorPayload)" : 17 , "setOptionFlag(int)" : 1 , "setPrevious(ChannelInterceptor)" : 2 , "start(int)" : 8 , "stop(int)" : 5}},{ "className" : "org::apache::tomcat::util::http::CookieSupport" , "selectors" : { "alreadyQuoted(String)" : 3 , "isHttpSeparator(char)" : 4 , "isHttpToken(String)" : 4 , "isV0Separator(char)" : 4 , "isV0Token(String)" : 4}},{ "className" : "javax::el::CompositeELResolver" , "selectors" : { "CompositeELResolver()" : 3 , "add(ELResolver)" : 18}},{ "className" : "org::apache::catalina::startup::ContextRuleSet" , "selectors" : { "ContextRuleSet(String)" : 2 , "ContextRuleSet(String,boolean)" : 1}},{ "className" : "org::apache::tomcat::InstanceManager" , "selectors" : { "destroyInstance(Object)" : 9 , "newInstance(Object)" : 2 , "newInstance(String)" : 7 , "newInstance(String,ClassLoader)" : 2}},{ "className" : "org::apache::catalina::tribes::transport::DataSender" , "selectors" : { "connect()" : 1 , "disconnect()" : 5 , "keepalive()" : 4 , "setKeepAliveCount(int)" : 1 , "setKeepAliveTime(long)" : 1 , "setTimeout(long)" : 1}},{ "className" : "org::apache::catalina::tribes::tipis::LazyReplicatedMap" , "selectors" : { "LazyReplicatedMap(MapOwner,Channel,long,String,ClassLoader[])" : 2}},{ "className" : "org::apache::catalina::ant::StartTask" , "selectors" : { "execute()::BuildException" : 2}},{ "className" : "org::apache::catalina::deploy::FilterMap" , "selectors" : { "FilterMap()" : 10 , "addServletName(String)" : 3 , "addURLPattern(String)" : 9 , "getDispatcherMapping()" : 5 , "getDispatcherNames()" : 4 , "getFilterName()" : 9 , "getMatchAllServletNames()" : 3 , "getMatchAllUrlPatterns()" : 3 , "getServletNames()" : 4 , "getURLPatterns()" : 7 , "setDispatcher(String)" : 4 , "setFilterName(String)" : 10}},{ "className" : "org::apache::jasper::compiler::ELFunctionMapper" , "selectors" : { "ELFunctionMapper()" : 1 , "map(Nodes)" : 1}},{ "className" : "org::apache::catalina::core::TestStandardContextResources::GetResourceServlet" , "selectors" : { "GetResourceServlet()" : 3}},{ "className" : "javax::mail::Session" , "selectors" : { "getInstance(Properties)" : 1 , "getInstance(Properties,Authenticator)" : 1}},{ "className" : "org::apache::jasper::compiler::SmapGenerator" , "selectors" : { "SmapGenerator()" : 4 , "addSmap(String,String)" : 1 , "addStratum(SmapStratum,boolean)" : 4 , "getString()" : 5 , "setOutputFileName(String)" : 4 , "toString()" : 1}},{ "className" : "javax::servlet::jsp::JspException" , "selectors" : { "JspException()" : 2 , "JspException(String)" : 2 , "JspException(String,Throwable)" : 4 , "JspException(Throwable)" : 3}},{ "className" : "org::apache::el::parser::ELParser::JJCalls" , "selectors" : { "JJCalls()" : 7}},{ "className" : "org::apache::jasper::runtime::JspFactoryImpl::PrivilegedGetPageContext" , "selectors" : { "PrivilegedGetPageContext(JspFactoryImpl,Servlet,ServletRequest,ServletResponse,String,boolean,int,boolean)" : 1}},{ "className" : "java::security::cert::CollectionCertStoreParameters" , "selectors" : { "CollectionCertStoreParameters(Collection<?>)" : 1 , "getCollection()" : 2}},{ "className" : "org::apache::jasper::runtime::JspFactoryImpl" , "selectors" : { "JspFactoryImpl()" : 1 , "internalGetPageContext(Servlet,ServletRequest,ServletResponse,String,boolean,int,boolean)" : 2 , "internalReleasePageContext(PageContext)" : 2}},{ "className" : "org::apache::catalina::ssi::ExpressionParseTree::GreaterThanNode" , "selectors" : { "GreaterThanNode()" : 2}},{ "className" : "org::apache::catalina::util::LifecycleMBeanBase" , "selectors" : { "LifecycleMBeanBase()" : 2 , "destroyInternal()" : 5 , "getDomain()" : 9 , "getDomainInternal()" : 1 , "getObjectName()" : 46 , "getObjectNameKeyProperties()" : 1 , "initInternal()" : 7 , "register(Object,String)" : 8 , "setDomain(String)" : 2 , "unregister(ObjectName)" : 8}},{ "className" : "org::apache::jasper::runtime::ProtectedFunctionMapper" , "selectors" : { "ProtectedFunctionMapper()" : 4}},{ "className" : "org::apache::catalina::tribes::ChannelMessage" , "selectors" : { "clone()" : 2 , "deepclone()" : 6 , "getAddress()" : 6 , "getMessage()" : 56 , "getOptions()" : 20 , "getUniqueId()" : 19 , "setMessage(XByteBuffer)" : 3}},{ "className" : "org::apache::tomcat::util::http::ValuesEnumerator" , "selectors" : { "ValuesEnumerator(MimeHeaders,String)" : 1 , "findNext()" : 2}},{ "className" : "org::apache::catalina::ant::jmx::JMXAccessorGetTask" , "selectors" : { "jmxExecute(MBeanServerConnection)::BuildException" : 2 , "jmxGet(MBeanServerConnection,String)" : 1}},{ "className" : "org::apache::catalina::session::JDBCStore" , "selectors" : { "close(Connection)" : 7 , "getConnection()" : 7 , "getName()" : 6 , "getStoreName()" : 17 , "open()" : 1 , "release(Connection)" : 6 , "remove(String)" : 1}},{ "className" : "org::apache::catalina::connector::TestKeepAliveCount::SimpleServlet" , "selectors" : { "SimpleServlet()" : 1}},{ "className" : "org::apache::catalina::deploy::MessageDestination" , "selectors" : { "getDisplayName()" : 1}},{ "className" : "org::apache::juli::ClassLoaderLogManager::RootLogger" , "selectors" : { "RootLogger()" : 1}},{ "className" : "org::apache::jasper::compiler::Node::JspBody" , "selectors" : { "Node" : 3 , "getChildInfo()" : 2}},{ "className" : "org::apache::tomcat::util::bcel::classfile::ElementValue" , "selectors" : { "ElementValue(int,ConstantPool)" : 5 , "dump(DataOutputStream)" : 3 , "readElementValue(DataInputStream,ConstantPool)" : 3 , "stringifyValue()" : 19 , "toString()" : 1}},{ "className" : "org::apache::tomcat::util::net::NioEndpoint::PollerEvent" , "selectors" : { "PollerEvent(NioChannel,KeyAttachment,int)" : 2 , "reset()" : 2 , "reset(NioChannel,KeyAttachment,int)" : 4}},{ "className" : "java::io::ObjectInput" , "selectors" : { "available()" : 2 , "close()" : 335 , "read()" : 11 , "read(byte[])" : 7 , "read(byte[],int,int)" : 5 , "readObject()" : 586}},{ "className" : "org::apache::tomcat::util::bcel::classfile::ClassElementValue" , "selectors" : { "ClassElementValue(int,int,ConstantPool)" : 1}},{ "className" : "javax::el::ELResolver" , "selectors" : { "ELResolver()" : 3 , "getCommonPropertyType(ELContext,Object)" : 2 , "getFeatureDescriptors(ELContext,Object)" : 2 , "getType(ELContext,Object,Object)" : 5 , "getValue(ELContext,Object,Object)" : 8 , "invoke(ELContext,Object,Object,Class<?>[],Object[])" : 2 , "isReadOnly(ELContext,Object,Object)" : 4 , "message(ELContext,String,Object[])" : 11 , "setValue(ELContext,Object,Object,Object)" : 5}},{ "className" : "org::apache::catalina::realm::GenericPrincipal" , "selectors" : { "GenericPrincipal(String,String)" : 1 , "GenericPrincipal(String,String,List<String>)" : 12 , "GenericPrincipal(String,String,List<String>,Principal)" : 5 , "GenericPrincipal(String,String,List<String>,Principal,LoginContext)" : 2 , "getName()" : 4 , "getPassword()" : 9 , "getRoles()" : 9 , "getUserPrincipal()" : 10 , "hasRole(String)" : 1 , "logout()" : 1}},{ "className" : "org::apache::jasper::compiler::Node::UninterpretedTag" , "selectors" : { "Node" : 2 , "getJspAttributes()" : 2 , "setJspAttributes(JspAttribute[])" : 1}},{ "className" : "org::apache::jasper::compiler::ELNode::Root" , "selectors" : { "Root(Nodes,char)" : 1 , "getExpression()" : 1 , "getType()" : 4}},{ "className" : "org::apache::catalina::tribes::ChannelException" , "selectors" : { "ChannelException(String)" : 13 , "ChannelException(String,Throwable)" : 5 , "ChannelException(Throwable)" : 13 , "addFaultyMember(FaultyMember)" : 2 , "addFaultyMember(FaultyMember[])" : 2 , "addFaultyMember(Member,Exception)" : 12 , "getFaultyMembers()" : 8 , "getMessage()" : 6}},{ "className" : "org::apache::tomcat::util::http::CookiesBaseTest::CookieServlet" , "selectors" : { "CookieServlet(String,String)" : 7}},{ "className" : "org::apache::catalina::tribes::test::channel::TestChannelOptionFlag::TestInterceptor" , "selectors" : { "TestInterceptor()" : 5}},{ "className" : "org::apache::jasper::compiler::ScriptingVariabler::CustomTagCounter" , "selectors" : { "CustomTagCounter()" : 1}},{ "className" : "org::apache::catalina::mbeans::GlobalResourcesLifecycleListener" , "selectors" : { "createMBeans()" : 1 , "createMBeans(String,Context)" : 2 , "createMBeans(String,UserDatabase)" : 1 , "destroyMBeans()" : 1}},{ "className" : "javax::servlet::jsp::tagext::TagFileInfo" , "selectors" : { "TagFileInfo(String,String,TagInfo)" : 2 , "getName()" : 1 , "getPath()" : 2 , "getTagInfo()" : 4}},{ "className" : "org::apache::tomcat::util::buf::IntermediateInputStream" , "selectors" : { "IntermediateInputStream()" : 1 , "setByteChunk(ByteChunk)" : 1}},{ "className" : "org::apache::tomcat::util::bcel::classfile::RuntimeInvisibleParameterAnnotations" , "selectors" : { "RuntimeInvisibleParameterAnnotations(int,int,DataInputStream,ConstantPool)" : 1}},{ "className" : "javax::el::BeanELResolver::BeanProperties" , "selectors" : { "BeanProperties(Class<?>)" : 1 , "get(ELContext,String)" : 2 , "getType()" : 1}},{ "className" : "org::apache::catalina::ssi::ExpressionParseTree::OppNode" , "selectors" : { "getPrecedence()" : 2 , "popValues(List<Node>)" : 2}},{ "className" : "org::apache::catalina::deploy::ApplicationParameter" , "selectors" : { "getName()" : 6 , "getOverride()" : 2 , "getValue()" : 2}},{ "className" : "org::apache::jasper::el::JspMethodNotFoundException" , "selectors" : { "JspMethodNotFoundException(String,MethodNotFoundException)" : 2}},{ "className" : "org::apache::naming::resources::FileDirContext::FileResourceAttributes" , "selectors" : { "FileResourceAttributes(File)" : 4 , "getCreation()" : 2 , "getLastModified()" : 3}},{ "className" : "org::apache::catalina::ha::session::SessionMessage" , "selectors" : { "getContextName()" : 1 , "getEventType()" : 3 , "getEventTypeString()" : 3 , "getSession()" : 3 , "getSessionID()" : 10}},{ "className" : "javax::servlet::ServletContextAttributeEvent" , "selectors" : { "ServletContextAttributeEvent(ServletContext,String,Object)" : 3 , "getName()" : 3 , "getValue()" : 3}},{ "className" : "org::apache::el::TesterBeanB" , "selectors" : { "TesterBeanB()" : 5 , "getName()" : 4 , "setName(String)" : 7}},{ "className" : "org::apache::catalina::tribes::Member" , "selectors" : { "getCommand()" : 2 , "getDomain()" : 2 , "getHost()" : 5 , "getMemberAliveTime()" : 2 , "getName()" : 27 , "getPayload()" : 8 , "getPort()" : 5 , "getUdpPort()" : 1 , "getUniqueId()" : 2}},{ "className" : "java::lang::RuntimePermission" , "selectors" : { "RuntimePermission(String)" : 67 , "java" : 1}},{ "className" : "org::apache::naming::NamingService" , "selectors" : { "destroy()" : 2 , "getState()" : 1 , "stop()" : 1}},{ "className" : "org::apache::jasper::compiler::Validator::TagExtraInfoVisitor" , "selectors" : { "TagExtraInfoVisitor(Compiler)" : 1}},{ "className" : "org::apache::jasper::compiler::Node::Declaration" , "selectors" : { "Node" : 7}},{ "className" : "org::apache::el::parser::BooleanNode" , "selectors" : { "BooleanNode(int)" : 10}},{ "className" : "org::apache::jasper::compiler::Node::AttributeDirective" , "selectors" : { "Node" : 3}},{ "className" : "org::apache::jasper::el::JspPropertyNotFoundException" , "selectors" : { "JspPropertyNotFoundException(String,PropertyNotFoundException)" : 6}},{ "className" : "org::apache::catalina::util::MIME2Java" , "selectors" : { "convert(String)" : 1 , "reverse(String)" : 1}},{ "className" : "org::apache::el::parser::AstChoice" , "selectors" : { "AstChoice(int)" : 1 , "getValue(EvaluationContext)" : 1}},{ "className" : "org::apache::catalina::valves::AccessLogValve::UserElement" , "selectors" : { "UserElement()" : 1}},{ "className" : "org::apache::tomcat::util::bcel::classfile::ConstantUtf8" , "selectors" : { "ConstantUtf8(DataInput)" : 1 , "getBytes()" : 24}},{ "className" : "org::apache::tomcat::util::bcel::util::BCELComparator" , "selectors" : { "equals(Object,Object)" : 4 , "hashCode(Object)" : 4}},{ "className" : "org::apache::tomcat::util::http::fileupload::InvalidFileNameException" , "selectors" : { "InvalidFileNameException(String,String)" : 1}},{ "className" : "examples::FooTag" , "selectors" : { "setAtt(int,String)" : 3}},{ "className" : "org::apache::tomcat::util::digester::SetNextRule" , "selectors" : { "SetNextRule(String)" : 2 , "SetNextRule(String,String)" : 4}},{ "className" : "org::apache::jasper::xmlparser::ParserUtils" , "selectors" : { "ParserUtils()" : 6 , "convert(TreeNode,Node)" : 2 , "parseXMLDocument(String,InputSource)" : 3 , "parseXMLDocument(String,InputStream)" : 4}},{ "className" : "org::apache::catalina::mbeans::MBeanFactory" , "selectors" : { "MBeanFactory()" : 3 , "createConnector(String,String,int,boolean,boolean)" : 3 , "createStandardContext(String,String,String,boolean,boolean,boolean,boolean)" : 1 , "getConfigFile(String)" : 1 , "getParentContainerFromChild(ObjectName)" : 4 , "getParentContainerFromParent(ObjectName)" : 11 , "getPathStr(String)" : 4 , "getService(ObjectName)" : 9 , "setContainer(Object)" : 2}},{ "className" : "javax::el::MethodInfo" , "selectors" : { "MethodInfo(String,Class<?>,Class<?>[])" : 2}},{ "className" : "javax::servlet::jsp::JspApplicationContext" , "selectors" : { "getExpressionFactory()" : 1}},{ "className" : "org::apache::el::lang::ELArithmetic::BigIntegerDelegate" , "selectors" : { "BigIntegerDelegate()" : 1 , "matches(Object,Object)" : 5}},{ "className" : "org::apache::tomcat::util::bcel::classfile::Synthetic" , "selectors" : { "Synthetic(int,int,DataInputStream,ConstantPool)" : 1 , "Synthetic(int,int,byte[],ConstantPool)" : 1}},{ "className" : "org::apache::catalina::deploy::ContextEjb" , "selectors" : { "getHome()" : 2 , "getLink()" : 2 , "getRemote()" : 2}},{ "className" : "javax::servlet::jsp::el::ScopedAttributeELResolver" , "selectors" : { "ScopedAttributeELResolver()" : 1}},{ "className" : "java::lang::CloneNotSupportedException" , "selectors" : { "CloneNotSupportedException()" : 11 , "CloneNotSupportedException(String)" : 15}},{ "className" : "org::apache::catalina::realm::RealmBase::AllRolesMode" , "selectors" : { "AllRolesMode(String)" : 3 , "toMode(String)" : 1 , "toString()" : 1}},{ "className" : "org::apache::tomcat::util::http::fileupload::FileUploadBase::FileItemIteratorImpl" , "selectors" : { "FileItemIteratorImpl(RequestContext)" : 1 , "findNextItem()" : 2 , "getContentLength(FileItemHeaders)" : 2 , "hasNext()" : 1}},{ "className" : "org::apache::catalina::authenticator::BasicAuthenticator" , "selectors" : { "BasicAuthenticator()" : 1}},{ "className" : "org::apache::catalina::connector::CoyoteOutputStream" , "selectors" : { "CoyoteOutputStream(OutputBuffer)" : 4 , "clear()" : 1 , "write(byte[],int,int)" : 1}},{ "className" : "javax::servlet::AsyncListener" , "selectors" : { "onComplete(AsyncEvent)" : 1 , "onError(AsyncEvent)" : 1 , "onTimeout(AsyncEvent)" : 1}},{ "className" : "org::apache::coyote::http11::InternalInputBuffer::InputStreamInputBuffer" , "selectors" : { "InputStreamInputBuffer()" : 1}},{ "className" : "org::apache::tomcat::util::buf::HexUtils" , "selectors" : { "getDec(int)" : 7 , "getHex(int)" : 3 , "load()" : 5}},{ "className" : "org::apache::catalina::core::AsyncContextImpl::DebugException" , "selectors" : { "DebugException()" : 4}},{ "className" : "org::apache::catalina::valves::AccessLogValve::RemoteAddrElement" , "selectors" : { "RemoteAddrElement()" : 2}},{ "className" : "org::apache::jasper::compiler::TagFileProcessor::TagFileDirectiveVisitor" , "selectors" : { "TagFileDirectiveVisitor(Compiler,TagLibraryInfo,String,String)" : 1 , "checkConflict(Node,String,String)" : 7 , "checkUniqueName(String,String,Node)" : 4 , "checkUniqueName(String,String,Node,TagAttributeInfo)" : 2 , "getTagInfo()" : 1 , "postCheck()" : 1}},{ "className" : "org::apache::catalina::startup::ConnectorCreateRule" , "selectors" : { "ConnectorCreateRule()" : 1 , "_setExecutor(Connector,Executor)" : 1}},{ "className" : "javax::naming::NameAlreadyBoundException" , "selectors" : { "NameAlreadyBoundException(String)" : 6}},{ "className" : "org::apache::el::lang::EvaluationContext" , "selectors" : { "EvaluationContext(ELContext,FunctionMapper,VariableMapper)" : 7 , "getELContext()" : 6 , "getELResolver()" : 10 , "getFunctionMapper()" : 2 , "getVariableMapper()" : 5 , "isPropertyResolved()" : 8 , "setPropertyResolved(boolean)" : 10}},{ "className" : "org::apache::catalina::ssi::ExpressionParseTree::CompareNode" , "selectors" : { "compareBranches()" : 3}},{ "className" : "org::apache::catalina::session::StandardManager" , "selectors" : { "StandardManager()" : 3 , "doLoad()" : 2 , "doUnload()" : 2 , "file()" : 2 , "load()" : 1 , "unload()" : 1}},{ "className" : "org::apache::catalina::tribes::group::interceptors::ThroughputInterceptor" , "selectors" : { "ThroughputInterceptor()" : 5 , "report(double)" : 2 , "setInterval(int)" : 4}},{ "className" : "org::apache::naming::EjbRef" , "selectors" : { "EjbRef(String,String,String,String)" : 1 , "EjbRef(String,String,String,String,String,String)" : 1}},{ "className" : "filters::ExampleFilter" , "selectors" : { "toString()" : 1}},{ "className" : "org::apache::catalina::valves::TestRemoteIpValve::RemoteAddrAndHostTrackerValve" , "selectors" : { "RemoteAddrAndHostTrackerValve()" : 11 , "getRemoteAddr()" : 11 , "getRemoteHost()" : 11 , "getScheme()" : 4 , "getServerPort()" : 4 , "isSecure()" : 4}},{ "className" : "org::apache::coyote::http11::TestInternalInputBuffer::Bug48839Client" , "selectors" : { "Bug48839Client()" : 2 , "doRequest(boolean)" : 2 , "isResponseBodyOK()" : 2}},{ "className" : "org::apache::catalina::startup::TldRuleSet" , "selectors" : { "TldRuleSet()" : 4 , "TldRuleSet(String)" : 1}},{ "className" : "org::apache::catalina::startup::CallMethodMultiRule" , "selectors" : { "CallMethodMultiRule(String,int,int)" : 2}},{ "className" : "java::util::concurrent::ConcurrentLinkedQueue" , "selectors" : { "ConcurrentLinkedQueue<T>()" : 2 , "add(E)" : 9 , "contains(Object)" : 5 , "isEmpty()" : 2 , "iterator()" : 2 , "offer(E)" : 35 , "poll()" : 31 , "remove(Object)" : 4 , "size()" : 18}},{ "className" : "org::apache::catalina::tribes::group::interceptors::OrderInterceptor::MessageOrder" , "selectors" : { "MessageOrder(int,ChannelMessage)" : 1 , "add(MessageOrder,MessageOrder)" : 1 , "getCount()" : 1 , "getMessage()" : 3 , "getMsgNr()" : 13 , "isExpired(long)" : 1 , "setMessage(ChannelMessage)" : 2}},{ "className" : "org::apache::tomcat::util::net::AprEndpoint::Handler" , "selectors" : { "asyncDispatch(long,SocketStatus)" : 3 , "event(long,SocketStatus)" : 1 , "process(long)" : 2}},{ "className" : "org::apache::catalina::connector::RequestFacade::GetHeaderNamesPrivilegedAction" , "selectors" : { "GetHeaderNamesPrivilegedAction()" : 1}},{ "className" : "org::apache::catalina::valves::AccessLogValve::LocalAddrElement" , "selectors" : { "LocalAddrElement()" : 2}},{ "className" : "org::apache::catalina::ha::ClusterDeployer" , "selectors" : { "backgroundProcess()" : 1 , "setCluster(CatalinaCluster)" : 2 , "start()" : 1 , "stop()" : 1}},{ "className" : "org::apache::tomcat::util::IntrospectionUtils::PropertySource" , "selectors" : { "getProperty(String)" : 1}},{ "className" : "org::apache::tomcat::util::bcel::classfile::ConstantMethodref" , "selectors" : { "ConstantMethodref(DataInputStream)" : 1}},{ "className" : "org::apache::jasper::compiler::TestAttributeParser::FMapper" , "selectors" : { "FMapper()" : 1}},{ "className" : "org::apache::catalina::tribes::membership::MemberImpl" , "selectors" : { "MemberImpl()" : 3 , "MemberImpl(String,int,long)" : 11 , "MemberImpl(String,int,long,byte[])" : 4 , "bToS(byte[])" : 1 , "bToS(byte[],int)" : 4 , "equals(Object)" : 17 , "getCommand()" : 2 , "getData()" : 4 , "getData(boolean)" : 4 , "getData(boolean,boolean)" : 18 , "getDataLength()" : 3 , "getHost()" : 8 , "getHostname()" : 2 , "getMember(byte[])" : 12 , "getMember(byte[],MemberImpl)" : 2 , "getMember(byte[],int,int)" : 1 , "getMember(byte[],int,int,MemberImpl)" : 2 , "getMemberAliveTime()" : 3 , "getName()" : 2 , "getPayload()" : 3 , "getPort()" : 5 , "getServiceStartTime()" : 3 , "getUdpPort()" : 4 , "getUniqueId()" : 4 , "inc()" : 1 , "setCommand(byte[])" : 5 , "setDomain(byte[])" : 7 , "setHost(byte[])" : 2 , "setHostname(String)" : 4 , "setMemberAliveTime(long)" : 4 , "setPayload(byte[])" : 5 , "setPort(int)" : 3 , "setSecurePort(int)" : 3 , "setServiceStartTime(long)" : 2 , "setUdpPort(int)" : 5 , "setUniqueId(byte[])" : 4 , "toString()" : 1}},{ "className" : "org::apache::tomcat::util::MutableInteger" , "selectors" : { "MutableInteger(int)" : 1 , "get()" : 1 , "set(int)" : 4}},{ "className" : "org::apache::el::parser::AstCompositeExpression" , "selectors" : { "AstCompositeExpression(int)" : 1}},{ "className" : "org::apache::jasper::compiler::Generator::GenBuffer" , "selectors" : { "GenBuffer()" : 2 , "GenBuffer(Node,Nodes)" : 3 , "adjustJavaLine(Node,int)" : 2 , "adjustJavaLines(int)" : 3 , "getOut()" : 8 , "toString()" : 4}},{ "className" : "org::apache::tomcat::util::modeler::modules::ModelerSource" , "selectors" : { "getInputStream()" : 1 , "loadDescriptors(Registry,String,String,Object)" : 1}},{ "className" : "java::util::AbstractSet" , "selectors" : { "AbstractSet()" : 8 , "equals(Object)" : 19 , "hashCode()" : 13 , "removeAll(Collection<?>)" : 28}},{ "className" : "org::apache::catalina::Service" , "selectors" : { "addConnector(Connector)" : 4 , "findConnectors()" : 4 , "getContainer()" : 26 , "getExecutor(String)" : 1 , "getName()" : 4 , "getServer()" : 4 , "removeConnector(Connector)" : 3 , "setContainer(Container)" : 2 , "setName(String)" : 2 , "setServer(Server)" : 1}},{ "className" : "org::apache::catalina::valves::Benchmarks::BenchmarkTest" , "selectors" : { "BenchmarkTest()" : 2 , "doTest(int,Runnable[])" : 2 , "doTestInternal(int,int,Runnable)" : 1}},{ "className" : "javax::servlet::jsp::tagext::SimpleTagSupport" , "selectors" : { "getJspBody()" : 1 , "getJspContext()" : 5}},{ "className" : "org::apache::jasper::compiler::Node::AttributeGenerator" , "selectors" : { "Node" : 1 , "getName()" : 1 , "getTag()" : 1}},{ "className" : "org::apache::coyote::http11::filters::IdentityInputFilter" , "selectors" : { "IdentityInputFilter()" : 1}},{ "className" : "org::apache::naming::StringManager" , "selectors" : { "StringManager(String)" : 1 , "getManager(String)" : 5 , "getString(String)" : 25 , "getString(String,Object[])" : 44}},{ "className" : "javax::servlet::jsp::tagext::TagExtraInfo" , "selectors" : { "getVariableInfo(TagData)" : 3 , "isValid(TagData)" : 2 , "setTagInfo(TagInfo)" : 3 , "validate(TagData)" : 1}},{ "className" : "org::apache::el::TesterBeanAAA" , "selectors" : { "TesterBeanAAA()" : 1}},{ "className" : "org::apache::naming::NameParserImpl" , "selectors" : { "NameParserImpl()" : 4}},{ "className" : "org::apache::catalina::tribes::test::channel::TestDataIntegrity::Data" , "selectors" : { "Data()" : 1 , "createRandomData()" : 5 , "verify(Data)" : 1}},{ "className" : "org::apache::catalina::tribes::Channel" , "selectors" : { "addChannelListener(ChannelListener)" : 6 , "addInterceptor(ChannelInterceptor)" : 13 , "addMembershipListener(MembershipListener)" : 9 , "getLocalMember(boolean)" : 19 , "getMembers()" : 11 , "hasMembers()" : 2 , "heartbeat()" : 1 , "removeChannelListener(ChannelListener)" : 4 , "removeMembershipListener(MembershipListener)" : 3 , "send(Member[],Serializable,int)" : 15 , "start(int)" : 17 , "stop(int)" : 20}},{ "className" : "javax::management::MalformedObjectNameException" , "selectors" : { "MalformedObjectNameException()" : 1 , "MalformedObjectNameException(String)" : 40}},{ "className" : "org::apache::el::parser::SimpleNode" , "selectors" : { "SimpleNode(int)" : 20 , "dump(String)" : 1 , "getImage()" : 1 , "jjtGetChild(int)" : 6 , "jjtGetNumChildren()" : 5 , "setImage(String)" : 2 , "toString()" : 1 , "toString(String)" : 1}},{ "className" : "org::apache::catalina::valves::ExtendedAccessLogValve::RequestParameterElement" , "selectors" : { "RequestParameterElement(String)" : 1 , "urlEncode(String)" : 1}},{ "className" : "org::apache::catalina::ha::ClusterValve" , "selectors" : { "setCluster(CatalinaCluster)" : 2}},{ "className" : "javax::servlet::http::HttpServletRequest" , "selectors" : { "authenticate(HttpServletResponse)" : 1 , "getAuthType()" : 6 , "getContextPath()" : 42 , "getCookies()" : 9 , "getDateHeader(String)" : 5 , "getHeader(String)" : 47 , "getHeaderNames()" : 10 , "getHeaders(String)" : 9 , "getIntHeader(String)" : 1 , "getMethod()" : 19 , "getPart(String)" : 1 , "getParts()" : 2 , "getPathInfo()" : 28 , "getPathTranslated()" : 3 , "getQueryString()" : 11 , "getRemoteUser()" : 8 , "getRequestURI()" : 31 , "getRequestURL()" : 4 , "getRequestedSessionId()" : 5 , "getServletPath()" : 21 , "getSession()" : 7 , "getSession(boolean)" : 16 , "getUserPrincipal()" : 9 , "isRequestedSessionIdFromCookie()" : 2 , "isRequestedSessionIdFromURL()" : 2 , "isRequestedSessionIdFromUrl()" : 1 , "isRequestedSessionIdValid()" : 2 , "isUserInRole(String)" : 1 , "login(String,String)" : 2 , "logout()" : 2}},{ "className" : "org::apache::el::parser::AstIdentifier" , "selectors" : { "AstIdentifier(int)" : 1 , "getMethodExpression(EvaluationContext)" : 2 , "setImage(String)" : 1}},{ "className" : "org::apache::catalina::comet::CometFilter" , "selectors" : { "doFilterEvent(CometEvent,CometFilterChain)" : 1}},{ "className" : "org::apache::jasper::compiler::TldLocationsCache::TldJarScannerCallback" , "selectors" : { "TldJarScannerCallback()" : 1}},{ "className" : "org::apache::jasper::compiler::ELFunctionMapper::PrivilegedGetTccl" , "selectors" : { "PrivilegedGetTccl()" : 1}},{ "className" : "org::apache::catalina::tribes::test::channel::TestRemoteProcessException::Data" , "selectors" : { "Data()" : 1 , "createRandomData(boolean)" : 1 , "verify(Data)" : 1}},{ "className" : "org::apache::catalina::startup::Tool" , "selectors" : { "usage()" : 2}},{ "className" : "org::apache::tomcat::util::buf::ByteChunk::ByteInputChannel" , "selectors" : { "realReadBytes(byte[],int,int)" : 3}},{ "className" : "org::apache::catalina::util::ParameterMap<T>" , "selectors" : { "ParameterMap()" : 4}},{ "className" : "org::apache::catalina::startup::TestTomcatSSL" , "selectors" : { "initSsl(Tomcat)" : 3}},{ "className" : "org::apache::catalina::valves::AccessLogValve::RequestAttributeElement" , "selectors" : { "RequestAttributeElement(String)" : 1}},{ "className" : "org::apache::catalina::ssi::SSIExternalResolver" , "selectors" : { "addVariableNames(Collection<String>)" : 1 , "getFileLastModified(String,boolean)" : 1 , "getFileSize(String,boolean)" : 1 , "getFileText(String,boolean)" : 1 , "getVariableValue(String)" : 3 , "log(String,Throwable)" : 4 , "setVariableValue(String,String)" : 5}},{ "className" : "org::apache::catalina::tribes::membership::Membership::MbrEntry" , "selectors" : { "MbrEntry(MemberImpl)" : 1 , "accessed()" : 1 , "getMember()" : 2 , "hasExpired(long)" : 1}},{ "className" : "org::apache::tomcat::util::net::jsse::JSSEImplementation" , "selectors" : { "JSSEImplementation()" : 2}},{ "className" : "org::apache::catalina::ha::ClusterRuleSet" , "selectors" : { "ClusterRuleSet(String)" : 1}},{ "className" : "org::apache::catalina::startup::SetLoginConfig" , "selectors" : { "SetLoginConfig()" : 1}},{ "className" : "javax::naming::NotContextException" , "selectors" : { "NotContextException(String)" : 6}},{ "className" : "org::apache::catalina::core::ApplicationServletRegistration" , "selectors" : { "ApplicationServletRegistration(Wrapper,Context)" : 3 , "getInitParameter(String)" : 2 , "getMappings()" : 1 , "getName()" : 2 , "setInitParameter(String,String)" : 1}},{ "className" : "org::apache::tomcat::util::bcel::classfile::ConstantInteger" , "selectors" : { "ConstantInteger(DataInput)" : 1 , "ConstantInteger(int)" : 1 , "getBytes()" : 8}},{ "className" : "org::apache::tomcat::util::bcel::classfile::Field" , "selectors" : { "Field(DataInputStream,ConstantPool)" : 1 , "getConstantValue()" : 1}},{ "className" : "org::apache::jasper::compiler::TextOptimizer::TextCatVisitor" , "selectors" : { "TextCatVisitor(Compiler)" : 1 , "collectText()" : 3}},{ "className" : "org::apache::catalina::session::StandardSession::PrivilegedSetTccl" , "selectors" : { "PrivilegedSetTccl(ClassLoader)" : 2}},{ "className" : "javax::el::ELContextEvent" , "selectors" : { "ELContextEvent(ELContext)" : 1}},{ "className" : "javax::servlet::ServletRequestWrapper" , "selectors" : { "ServletRequestWrapper(ServletRequest)" : 2 , "getCharacterEncoding()" : 1 , "getRequest()" : 15 , "getScheme()" : 1 , "getServerName()" : 1 , "getServerPort()" : 1 , "isWrapperFor(Class)" : 1 , "isWrapperFor(ServletRequest)" : 1 , "setRequest(ServletRequest)" : 4}},{ "className" : "org::apache::tomcat::util::log::SystemLogHandler" , "selectors" : { "SystemLogHandler(PrintStream)" : 2 , "findStream()" : 25 , "startCapture()" : 5 , "stopCapture()" : 5}},{ "className" : "javax::management::ReflectionException" , "selectors" : { "ReflectionException(Exception)" : 45 , "ReflectionException(Exception,String)" : 51 , "getCause()" : 2 , "getTargetException()" : 22}},{ "className" : "javax::management::NotificationFilter" , "selectors" : { "isNotificationEnabled(Notification)" : 10}},{ "className" : "org::apache::catalina::valves::AccessLogValve::MethodElement" , "selectors" : { "MethodElement()" : 2}},{ "className" : "org::apache::catalina::ha::deploy::WarWatcher" , "selectors" : { "WarWatcher(FileChangeListener,File)" : 1 , "addWarInfo(File)" : 1 , "check()" : 1 , "clear()" : 1}},{ "className" : "org::apache::catalina::tribes::test::channel::TestMulticastPackages::Data" , "selectors" : { "Data()" : 1 , "createRandomData(int)" : 5 , "createRandomData(int,int)" : 2 , "getNumber()" : 1 , "verify(Data)" : 1}},{ "className" : "org::apache::catalina::Pipeline" , "selectors" : { "addValve(Valve)" : 8 , "getBasic()" : 1 , "getFirst()" : 16 , "getValves()" : 8 , "isAsyncSupported()" : 4 , "removeValve(Valve)" : 1 , "setBasic(Valve)" : 4 , "setContainer(Container)" : 1}},{ "className" : "org::apache::catalina::deploy::ContextEnvironment" , "selectors" : { "ContextEnvironment()" : 5 , "getOverride()" : 2 , "getValue()" : 18 , "setValue(String)" : 5}},{ "className" : "org::apache::tomcat::util::digester::RuleSetBase" , "selectors" : { "RuleSetBase()" : 11}},{ "className" : "org::apache::jasper::compiler::Localizer" , "selectors" : { "getMessage(String)" : 79 , "getMessage(String,Object[])" : 7 , "getMessage(String,String)" : 50 , "getMessage(String,String,String)" : 14 , "getMessage(String,String,String,String)" : 3 , "getMessage(String,String,String,String,String)" : 2}},{ "className" : "org::apache::catalina::filters::CsrfPreventionFilter::LruCache" , "selectors" : { "add(T)" : 1 , "contains(T)" : 1}},{ "className" : "org::apache::tomcat::util::bcel::util::ByteSequence" , "selectors" : { "ByteSequence(byte[])" : 1 , "getIndex()" : 6}},{ "className" : "org::apache::coyote::ActionHook" , "selectors" : { "action(ActionCode,Object)" : 4}},{ "className" : "org::apache::catalina::ssi::SSIFlastmod" , "selectors" : { "SSIFlastmod()" : 1 , "formatDate(Date,String)" : 1}},{ "className" : "org::apache::jasper::compiler::SmapUtil" , "selectors" : { "evaluateNodes(Nodes,SmapStratum,HashMap<String,SmapStratum>,boolean)" : 1 , "generateSmap(JspCompilationContext,Nodes)" : 1 , "installSmap(String[])" : 2 , "unqualify(String)" : 4}},{ "className" : "org::apache::tomcat::util::buf::WriteConvertor" , "selectors" : { "WriteConvertor(IntermediateOutputStream,String)" : 1 , "flush()" : 2 , "recycle()" : 1 , "write(char[],int,int)" : 1}},{ "className" : "org::apache::el::parser::AstDeferredExpression" , "selectors" : { "AstDeferredExpression(int)" : 1}},{ "className" : "org::apache::catalina::util::CharsetMapper" , "selectors" : { "CharsetMapper()" : 1 , "CharsetMapper(String)" : 1 , "addCharsetMappingFromDeploymentDescriptor(String,String)" : 1 , "getCharset(Locale)" : 1}},{ "className" : "org::apache::tomcat::util::http::fileupload::IOUtils" , "selectors" : { "closeQuietly(InputStream)" : 1 , "copy(InputStream,OutputStream)" : 3 , "copyLarge(InputStream,OutputStream)" : 1}},{ "className" : "org::apache::catalina::SessionEvent" , "selectors" : { "SessionEvent(Session,String,Object)" : 1 , "getSession()" : 2 , "getType()" : 4}},{ "className" : "org::apache::jasper::compiler::SmapUtil::SmapGenVisitor" , "selectors" : { "SmapGenVisitor(SmapStratum,boolean,HashMap<String,SmapStratum>)" : 1 , "doSmap(Node)" : 14 , "doSmap(Node,int,int,int)" : 2 , "doSmapText(Node)" : 3 , "visitBody(Node)" : 14}},{ "className" : "org::apache::catalina::realm::LockOutRealm::LockRecord" , "selectors" : { "LockRecord()" : 1 , "getFailures()" : 2 , "getLastFailureTime()" : 3 , "registerFailure()" : 1 , "setFailures(int)" : 1}},{ "className" : "javax::servlet::http::HttpUtils" , "selectors" : { "parseName(String,StringBuilder)" : 2 , "parseQueryString(String)" : 1}},{ "className" : "org::apache::catalina::startup::ServletDefCreateRule" , "selectors" : { "ServletDefCreateRule()" : 1}},{ "className" : "org::apache::coyote::http11::InternalAprInputBuffer::SocketInputBuffer" , "selectors" : { "SocketInputBuffer()" : 1}},{ "className" : "org::apache::catalina::tribes::io::ChannelData" , "selectors" : { "ChannelData()" : 3 , "ChannelData(boolean)" : 9 , "bToS(byte[])" : 1 , "generateUUID()" : 1 , "getAddress()" : 2 , "getDataFromPackage(XByteBuffer)" : 1 , "getDataFromPackage(byte[])" : 1 , "getDataPackage()" : 1 , "getDataPackage(byte[],int)" : 2 , "getDataPackageLength()" : 4 , "getTimestamp()" : 1 , "getUniqueId()" : 7 , "sendAckAsync(int)" : 2 , "sendAckSync(int)" : 5 , "setAddress(Member)" : 10 , "setMessage(XByteBuffer)" : 7 , "setOptions(int)" : 8 , "setTimestamp(long)" : 6 , "setUniqueId(byte[])" : 1}},{ "className" : "org::apache::catalina::valves::AccessLogValve::ThreadNameElement" , "selectors" : { "ThreadNameElement()" : 1}},{ "className" : "org::apache::catalina::core::ContainerBase::NoopAccessLog" , "selectors" : { "NoopAccessLog()" : 1}},{ "className" : "org::apache::el::parser::AstNot" , "selectors" : { "AstNot(int)" : 1}},{ "className" : "org::apache::catalina::tribes::RemoteProcessException" , "selectors" : { "RemoteProcessException(String)" : 2 , "RemoteProcessException(String,Throwable)" : 1}},{ "className" : "org::apache::catalina::ha::deploy::FileChangeListener" , "selectors" : { "fileModified(File)" : 1 , "fileRemoved(File)" : 1}},{ "className" : "javax::el::PropertyNotFoundException" , "selectors" : { "PropertyNotFoundException(String)" : 20 , "PropertyNotFoundException(String,Throwable)" : 1 , "PropertyNotFoundException(Throwable)" : 1}},{ "className" : "org::apache::tomcat::util::digester::AbstractRulesImpl" , "selectors" : { "registerRule(String,Rule)" : 1}},{ "className" : "org::apache::catalina::tribes::group::GroupChannel::HeartbeatThread" , "selectors" : { "HeartbeatThread(GroupChannel,long)" : 1 , "inc()" : 1 , "stopHeartbeat()" : 1}},{ "className" : "org::apache::catalina::valves::AccessLogValve::HttpStatusCodeElement" , "selectors" : { "HttpStatusCodeElement()" : 2}},{ "className" : "java::net::JarURLConnection" , "selectors" : { "getJarEntry()" : 7 , "getJarFile()" : 33 , "getJarFileURL()" : 7 , "getMainAttributes()" : 1}},{ "className" : "org::apache::tomcat::util::digester::SetRootRule" , "selectors" : { "SetRootRule(String)" : 2 , "SetRootRule(String,String)" : 3}},{ "className" : "org::apache::catalina::valves::SSLValve" , "selectors" : { "mygetHeader(Request,String)" : 4}},{ "className" : "org::apache::catalina::valves::AccessLogValve::HeaderElement" , "selectors" : { "HeaderElement(String)" : 1}},{ "className" : "org::apache::catalina::tribes::test::io::TestSenderConnections" , "selectors" : { "sendMessages(long,long)" : 3}},{ "className" : "org::apache::jasper::util::Enumerator" , "selectors" : { "Enumerator(Iterator<T>)" : 4 , "Enumerator(Iterator<T>,boolean)" : 2}},{ "className" : "org::apache::coyote::http11::AbstractOutputBuffer" , "selectors" : { "addActiveFilter(OutputFilter)" : 23 , "addFilter(OutputFilter)" : 5 , "endHeaders()" : 3 , "endRequest()" : 2 , "flush()" : 3 , "getFilters()" : 3 , "nextRequest()" : 6 , "recycle()" : 3 , "reset()" : 3 , "sendHeader(MessageBytes,MessageBytes)" : 3 , "sendStatus()" : 3 , "write(ByteChunk)" : 3 , "write(CharChunk)" : 1 , "write(MessageBytes)" : 2 , "write(String)" : 6 , "write(byte[])" : 7 , "write(int)" : 1}},{ "className" : "org::apache::el::TestELEvaluation" , "selectors" : { "compareBoth(String,int,Object,Object)" : 6 , "evaluateExpression(String)" : 52}},{ "className" : "java::lang::StringBuilder" , "selectors" : { "StringBuilder()" : 2222 , "StringBuilder(CharSequence)" : 1 , "StringBuilder(String)" : 976 , "StringBuilder(int)" : 399 , "append(???)" : 151 , "append(CharSequence)" : 86 , "append(CharSequence,int,int)" : 1 , "append(Object)" : 1409 , "append(String)" : 13652 , "append(StringBuffer)" : 2 , "append(boolean)" : 148 , "append(char)" : 2630 , "append(char[])" : 71 , "append(char[],int,int)" : 76 , "append(double)" : 96 , "append(float)" : 18 , "append(int)" : 819 , "append(long)" : 219 , "appendCodePoint(int)" : 3 , "createWriterInstance(???)" : 1 , "delete(int,int)" : 76 , "deleteCharAt(int)" : 36 , "indexOf(String)" : 27 , "indexOf(String,int)" : 26 , "initialize(???)" : 1 , "insert(int,Object)" : 1 , "insert(int,String)" : 49 , "insert(int,char)" : 9 , "insert(int,int)" : 1 , "insert(int,long)" : 1 , "lastIndexOf(String)" : 9 , "lastIndexOf(String,int)" : 5 , "replace(int,int,String)" : 30 , "reverse()" : 4 , "run(???)" : 2 , "setLayoutData(???)" : 1 , "toString()" : 3645 , "toString(???)" : 14}},{ "className" : "org::apache::tomcat::util::bcel::classfile::ExceptionTable" , "selectors" : { "ExceptionTable(int,int,DataInputStream,ConstantPool)" : 1 , "ExceptionTable(int,int,int[],ConstantPool)" : 1 , "setExceptionIndexTable(int[])" : 1 , "toString()" : 1}},{ "className" : "org::apache::tomcat::util::http::fileupload::FileItemIterator" , "selectors" : { "hasNext()" : 1 , "next()" : 1}},{ "className" : "javax::el::ValueExpression" , "selectors" : { "ValueExpression()" : 3 , "getExpectedType()" : 1 , "getType(ELContext)" : 2 , "getValue(ELContext)" : 13 , "getValueReference(ELContext)" : 2 , "isReadOnly(ELContext)" : 2 , "setValue(ELContext,Object)" : 2}},{ "className" : "org::apache::jasper::compiler::Node::TemplateText" , "selectors" : { "Node" : 7 , "addSmap(int)" : 2 , "getExtraSmap()" : 1 , "isAllSpace()" : 2 , "ltrim()" : 1 , "rtrim()" : 2 , "setText(String)" : 3}},{ "className" : "org::apache::el::TesterBeanBBB" , "selectors" : { "TesterBeanBBB()" : 1}},{ "className" : "org::apache::catalina::ssi::ExpressionParseTree::StringNode" , "selectors" : { "StringNode(String)" : 1 , "getValue()" : 3}},{ "className" : "org::apache::catalina::valves::ExtendedAccessLogValve::PatternTokenizer" , "selectors" : { "PatternTokenizer(String)" : 1 , "getParameter()" : 4 , "getRemains()" : 2 , "getToken()" : 10 , "getWhiteSpaces()" : 2 , "hasParameter()" : 4 , "hasSubToken()" : 6 , "isEnded()" : 3}},{ "className" : "org::apache::tomcat::util::http::TestCookiesAllowHttpSeps::TestCookieHttpSepClient" , "selectors" : { "TestCookieHttpSepClient()" : 1 , "doRequest()" : 1}},{ "className" : "org::apache::tomcat::util::bcel::classfile::Utility" , "selectors" : { "accessToString(int)" : 2 , "accessToString(int,boolean)" : 3 , "byteToShort(byte)" : 1 , "classOrInterface(int)" : 1 , "codeToString(ByteSequence,ConstantPool,boolean)" : 2 , "codeToString(byte[],ConstantPool,int,int,boolean)" : 1 , "compactClassName(String)" : 2 , "compactClassName(String,String,boolean)" : 1 , "compactClassName(String,boolean)" : 11 , "convertString(String)" : 1 , "fillup(String,int,boolean,char)" : 1 , "methodSignatureToString(String,String,String,boolean,LocalVariableTable)" : 1 , "pow2(int)" : 1 , "replace(String,String,String)" : 1 , "signatureToString(String)" : 2 , "signatureToString(String,boolean)" : 4 , "toHexString(byte[])" : 3 , "unwrap(ThreadLocal)" : 2 , "wrap(ThreadLocal,int)" : 3}},{ "className" : "javax::el::ELContext" , "selectors" : { "getContext(Class)" : 6 , "getELResolver()" : 4 , "getFunctionMapper()" : 2 , "getLocale()" : 3 , "getVariableMapper()" : 15 , "isPropertyResolved()" : 10 , "putContext(Class,Object)" : 3 , "setLocale(Locale)" : 2 , "setPropertyResolved(boolean)" : 40}},{ "className" : "javax::mail::PasswordAuthentication" , "selectors" : { "PasswordAuthentication(String,String)" : 1}},{ "className" : "org::apache::jasper::servlet::JspServlet" , "selectors" : { "handleMissingResource(HttpServletRequest,HttpServletResponse,String)" : 2 , "preCompile(HttpServletRequest)" : 1 , "serviceJspFile(HttpServletRequest,HttpServletResponse,String,Throwable,boolean)" : 1}},{ "className" : "org::apache::catalina::core::ApplicationHttpRequest" , "selectors" : { "ApplicationHttpRequest(HttpServletRequest,Context,boolean)" : 1 , "copyMap(Map<String,String[]>)" : 1 , "getAttribute(String)" : 3 , "getPathInfo()" : 1 , "getRequestURI()" : 1 , "getServletPath()" : 1 , "getSession(boolean)" : 1 , "getSpecial(String)" : 1 , "isSpecial(String)" : 1 , "mergeParameters()" : 1 , "mergeValues(Object,Object)" : 1 , "parseParameters()" : 4 , "recycle()" : 1 , "removeSpecial(String)" : 1 , "setAttribute(String,Object)" : 15 , "setContextPath(String)" : 2 , "setPathInfo(String)" : 2 , "setQueryParams(String)" : 2 , "setQueryString(String)" : 2 , "setRequest(HttpServletRequest)" : 1 , "setRequestURI(String)" : 2 , "setServletPath(String)" : 3 , "setSpecial(String,Object)" : 1}},{ "className" : "org::apache::jasper::compiler::ELNode::Visitor" , "selectors" : { "visit(ELText)" : 1 , "visit(Function)" : 1 , "visit(Root)" : 1 , "visit(Text)" : 1}},{ "className" : "javax::servlet::AsyncContext" , "selectors" : { "addListener(AsyncListener)" : 1 , "complete()" : 9 , "dispatch()" : 1 , "dispatch(String)" : 2 , "getResponse()" : 2 , "setTimeout(long)" : 5 , "start(Runnable)" : 2}},{ "className" : "org::apache::catalina::core::StandardWrapperValve" , "selectors" : { "StandardWrapperValve()" : 1 , "exception(Request,Response,Throwable)" : 18 , "getErrorCount()" : 2 , "getMaxTime()" : 1 , "getMinTime()" : 1 , "getProcessingTime()" : 1 , "getRequestCount()" : 1 , "setErrorCount(int)" : 2 , "setMaxTime(long)" : 1 , "setMinTime(long)" : 1 , "setProcessingTime(long)" : 1 , "setRequestCount(int)" : 1}},{ "className" : "org::apache::catalina::session::StoreBase" , "selectors" : { "getStoreName()" : 2 , "processExpires()" : 1 , "startInternal()" : 1 , "stopInternal()" : 1}},{ "className" : "org::apache::catalina::InstanceListener" , "selectors" : { "instanceEvent(InstanceEvent)" : 8}},{ "className" : "org::apache::jasper::compiler::Node::VariableDirective" , "selectors" : { "Node" : 3}},{ "className" : "org::apache::jasper::runtime::JspFactoryImpl::PageContextPool" , "selectors" : { "PageContextPool()" : 1 , "get()" : 1 , "put(PageContext)" : 1}},{ "className" : "org::apache::jasper::compiler::Node::Expression" , "selectors" : { "Node" : 4}},{ "className" : "org::apache::catalina::filters::RemoteIpFilter::XForwardedRequest" , "selectors" : { "RemoteIpFilter" : 2 , "getHeader(String)" : 5 , "getHeaderEntry(String)" : 4 , "getRemoteAddr()" : 1 , "getRemoteHost()" : 1 , "getScheme()" : 1 , "isSecure()" : 1 , "removeHeader(String)" : 2 , "setHeader(String,String)" : 5 , "setRemoteAddr(String)" : 1 , "setRemoteHost(String)" : 1 , "setScheme(String)" : 2 , "setSecure(boolean)" : 2 , "setServerPort(int)" : 2}},{ "className" : "org::apache::naming::ContextAccessController" , "selectors" : { "checkSecurityToken(Object,Object)" : 8 , "isWritable(Object)" : 1 , "setReadOnly(Object)" : 3 , "setSecurityToken(Object,Object)" : 1 , "setWritable(Object,Object)" : 4 , "unsetSecurityToken(Object,Object)" : 1}},{ "className" : "org::apache::catalina::ant::jmx::Arg" , "selectors" : { "getType()" : 6 , "getValue()" : 4}},{ "className" : "org::apache::catalina::deploy::ResourceBase" , "selectors" : { "getDescription()" : 25 , "getInjectionTargets()" : 10 , "getName()" : 126 , "getNamingResources()" : 6 , "getProperty(String)" : 9 , "getType()" : 44 , "listProperties()" : 8 , "setDescription(String)" : 7 , "setName(String)" : 14 , "setNamingResources(NamingResources)" : 16 , "setProperty(String,Object)" : 6 , "setType(String)" : 13}},{ "className" : "org::apache::tomcat::util::http::mapper::Mapper::Context" , "selectors" : { "Context()" : 2}},{ "className" : "javax::servlet::jsp::el::ImplicitObjectELResolver::ScopeManager" , "selectors" : { "ScopeManager(PageContext)" : 1 , "get(PageContext)" : 11 , "getApplicationScope()" : 1 , "getCookie()" : 1 , "getHeader()" : 1 , "getHeaderValues()" : 1 , "getInitParam()" : 1 , "getPageContext()" : 1 , "getPageScope()" : 1 , "getParam()" : 1 , "getParamValues()" : 1 , "getRequestScope()" : 1 , "getSessionScope()" : 1}},{ "className" : "org::apache::tomcat::JarScannerCallback" , "selectors" : { "scan(File)" : 1 , "scan(JarURLConnection)" : 3}},{ "className" : "org::apache::tomcat::util::http::AcceptLanguage" , "selectors" : { "extractLocales(Hashtable<String,Vector<String>>,Vector<Double>,Vector<Locale>)" : 2 , "processAcceptLanguage(String,Hashtable<String,Vector<String>>,Vector<Double>)" : 2}},{ "className" : "org::apache::catalina::tribes::ChannelSender" , "selectors" : { "heartbeat()" : 1 , "sendMessage(ChannelMessage,Member[])" : 1 , "start()" : 1 , "stop()" : 1}},{ "className" : "org::apache::tomcat::JarScanner" , "selectors" : { "scan(ServletContext,ClassLoader,JarScannerCallback,Set<String>)" : 3}},{ "className" : "org::apache::catalina::valves::Benchmarks::TimeDateElementBenchmarkTest_LocalStruct::Struct" , "selectors" : { "Struct()" : 1}},{ "className" : "org::apache::catalina::Valve" , "selectors" : { "backgroundProcess()" : 1 , "event(Request,Response,CometEvent)" : 10 , "getInfo()" : 1 , "getNext()" : 14 , "invoke(Request,Response)" : 27 , "isAsyncSupported()" : 1 , "setNext(Valve)" : 5}},{ "className" : "org::apache::catalina::ha::ClusterListener" , "selectors" : { "accept(ClusterMessage)" : 1 , "equals(Object)" : 1 , "getCluster()" : 3 , "hashCode()" : 1 , "messageReceived(ClusterMessage)" : 2 , "setCluster(CatalinaCluster)" : 2}},{ "className" : "org::apache::catalina::valves::Benchmarks::TimeDateElementBenchmarkTestBase" , "selectors" : { "lookup(String)" : 4}},{ "className" : "org::apache::tomcat::util::buf::CharChunk::CharInputChannel" , "selectors" : { "realReadChars(char[],int,int)" : 3}},{ "className" : "org::apache::tomcat::util::digester::Rules" , "selectors" : { "add(String,Rule)" : 2 , "clear()" : 1 , "getDigester()" : 3 , "getNamespaceURI()" : 4 , "match(String,String)" : 2 , "rules()" : 1 , "setDigester(Digester)" : 3 , "setNamespaceURI(String)" : 2}},{ "className" : "org::apache::tomcat::util::http::fileupload::RequestContext" , "selectors" : { "getCharacterEncoding()" : 1 , "getContentLength()" : 2 , "getContentType()" : 2 , "getInputStream()" : 1}},{ "className" : "org::apache::jasper::compiler::JspRuntimeContext::SecurityHolder" , "selectors" : { "SecurityHolder(CodeSource,PermissionCollection)" : 1}},{ "className" : "org::apache::catalina::realm::UserDatabaseRealm" , "selectors" : { "UserDatabaseRealm()" : 1 , "setResourceName(String)" : 1}},{ "className" : "org::apache::el::lang::ELArithmetic::DoubleDelegate" , "selectors" : { "DoubleDelegate()" : 1 , "matches(Object,Object)" : 4}},{ "className" : "org::apache::jasper::compiler::tagplugin::TagPlugin" , "selectors" : { "doTag(TagPluginContext)" : 1}},{ "className" : "org::apache::catalina::valves::ExtendedAccessLogValve::DateElement" , "selectors" : { "DateElement()" : 1}},{ "className" : "org::apache::catalina::filters::RequestFilter" , "selectors" : { "isAllowed(String)" : 2 , "precalculate(String)" : 2 , "process(String,ServletRequest,ServletResponse,FilterChain)" : 2 , "processCometEvent(String,CometEvent,CometFilterChain)" : 2 , "sendErrorWhenNotHttp(ServletResponse)" : 1}},{ "className" : "org::apache::catalina::deploy::FilterDef" , "selectors" : { "FilterDef()" : 17 , "addInitParameter(String,String)" : 49 , "getAsyncSupported()" : 10 , "getDescription()" : 3 , "getDisplayName()" : 3 , "getFilter()" : 2 , "getFilterClass()" : 12 , "getFilterName()" : 17 , "getLargeIcon()" : 2 , "getParameterMap()" : 13 , "getSmallIcon()" : 2 , "setAsyncSupported(String)" : 5 , "setDescription(String)" : 2 , "setDisplayName(String)" : 2 , "setFilter(Filter)" : 4 , "setFilterClass(String)" : 11 , "setFilterName(String)" : 9 , "setLargeIcon(String)" : 2 , "setSmallIcon(String)" : 2}},{ "className" : "org::apache::coyote::http11::filters::BufferedInputFilter" , "selectors" : { "BufferedInputFilter()" : 1 , "setLimit(int)" : 3}},{ "className" : "org::apache::jasper::compiler::ELFunctionMapper::ELFunctionVisitor" , "selectors" : { "ELFunctionVisitor()" : 1 , "doMap(JspAttribute)" : 11 , "doMap(Nodes)" : 2 , "doMap(Nodes)::Fvisitor" : 1 , "getCanonicalName(String)" : 1 , "getMapName()" : 1 , "matchMap(ArrayList<Function>)" : 1}},{ "className" : "org::apache::el::parser::TesterBeanA" , "selectors" : { "TesterBeanA()" : 2 , "setInt(String)" : 2}},{ "className" : "org::apache::catalina::core::TestAsyncContextImpl::Bug49567Servlet" , "selectors" : { "Bug49567Servlet()" : 1 , "getResult()" : 1 , "isDone()" : 1}},{ "className" : "org::apache::catalina::ssi::SSIFsize" , "selectors" : { "SSIFsize()" : 1 , "formatSize(long,String)" : 1 , "padLeft(String,int)" : 1 , "repeat(char,int)" : 1}},{ "className" : "org::apache::catalina::valves::Benchmarks::GetDateBenchmarkTest_LocalMutableLong::MutableLong" , "selectors" : { "MutableLong()" : 1}},{ "className" : "org::apache::tomcat::util::http::fileupload::servlet::ServletFileUpload" , "selectors" : { "ServletFileUpload()" : 1 , "parseRequest(HttpServletRequest)" : 1}},{ "className" : "org::apache::catalina::ha::authenticator::SingleSignOnMessage" , "selectors" : { "SingleSignOnMessage(Member,String,String)" : 6 , "getAction()" : 9 , "getAuthType()" : 2 , "getContextName()" : 3 , "getPassword()" : 2 , "getSessionId()" : 4 , "getSsoId()" : 8 , "getUsername()" : 3 , "setAction(int)" : 6 , "setAuthType(String)" : 2 , "setContextName(String)" : 3 , "setPassword(String)" : 2 , "setUsername(String)" : 2}},{ "className" : "org::apache::tomcat::util::threads::TaskQueue" , "selectors" : { "TaskQueue()" : 1 , "TaskQueue(int)" : 1 , "force(Runnable)" : 1 , "force(Runnable,long,TimeUnit)" : 1 , "setParent(ThreadPoolExecutor)" : 3}},{ "className" : "org::apache::catalina::ha::session::ClusterManagerBase" , "selectors" : { "ClusterManagerBase()" : 2 , "getClassLoaders()" : 5 , "getClassLoaders(Container)" : 3 , "getReplicationStream(byte[])" : 3 , "getReplicationStream(byte[],int,int)" : 1}},{ "className" : "org::apache::tomcat::util::bcel::util::ByteSequence::ByteArrayStream" , "selectors" : { "ByteArrayStream(byte[])" : 1 , "getPosition()" : 1}},{ "className" : "javax::el::Expression" , "selectors" : { "equals(Object)" : 2 , "getExpressionString()" : 2 , "hashCode()" : 2 , "isLiteralText()" : 2}},{ "className" : "org::apache::catalina::tribes::test::channel::TestRemoteProcessException::Listener" , "selectors" : { "Listener()" : 1 , "printStats(PrintStream)" : 3}},{ "className" : "org::apache::catalina::valves::Benchmarks::GetDateBenchmarkTest_Local" , "selectors" : { "GetDateBenchmarkTest_Local()" : 1 , "getCurrentDate()" : 1}},{ "className" : "org::apache::catalina::tribes::MembershipService" , "selectors" : { "broadcast(ChannelMessage)" : 1 , "getLocalMember(boolean)" : 1 , "getMember(Member)" : 1 , "getMembers()" : 2 , "hasMembers()" : 1 , "setLocalMemberProperties(String,int,int,int)" : 1 , "setMembershipListener(MembershipListener)" : 3 , "setPayload(byte[])" : 6 , "start(int)" : 2 , "stop(int)" : 2}},{ "className" : "org::apache::catalina::ha::backend::TcpSender" , "selectors" : { "TcpSender()" : 1 , "close(int)" : 5}},{ "className" : "org::apache::catalina::manager::util::SessionUtils" , "selectors" : { "getInactiveTimeForSession(Session)" : 2 , "getTTLForSession(Session)" : 2 , "getUsedTimeForSession(Session)" : 2 , "guessLocaleFromSession(HttpSession)" : 1 , "guessLocaleFromSession(Session)" : 1 , "guessUserFromSession(Session)" : 1}},{ "className" : "javax::servlet::jsp::tagext::TagAttributeInfo" , "selectors" : { "TagAttributeInfo(String,boolean,String,boolean)" : 1 , "TagAttributeInfo(String,boolean,String,boolean,boolean)" : 1 , "TagAttributeInfo(String,boolean,String,boolean,boolean,String,boolean,boolean,String,String)" : 2 , "canBeRequestTime()" : 6 , "getExpectedTypeName()" : 2 , "getMethodSignature()" : 3 , "getName()" : 27 , "getTypeName()" : 6 , "isDeferredMethod()" : 7 , "isDeferredValue()" : 6 , "isFragment()" : 5 , "isRequired()" : 2}},{ "className" : "org::apache::catalina::ha::session::DeltaRequest::AttributeInfo" , "selectors" : { "AttributeInfo(int,int,String,Object)" : 4 , "getAction()" : 4 , "getName()" : 8 , "getType()" : 3 , "getValue()" : 11 , "init(int,int,String,Object)" : 2 , "readExternal(ObjectInput)" : 1 , "recycle()" : 1 , "writeExternal(ObjectOutput)" : 1}},{ "className" : "async::AsyncStockServlet" , "selectors" : { "writeStock(AsyncContext,Stock)" : 1}},{ "className" : "org::apache::catalina::tribes::transport::SenderState" , "selectors" : { "SenderState()" : 1 , "SenderState(int)" : 1 , "getSenderState(Member)" : 11 , "getSenderState(Member,boolean)" : 1 , "isFailing()" : 1 , "isReady()" : 3 , "isSuspect()" : 2 , "removeSenderState(Member)" : 1 , "setFailing()" : 2 , "setReady()" : 2 , "setSuspect()" : 4}},{ "className" : "org::apache::el::lang::FunctionMapperImpl" , "selectors" : { "FunctionMapperImpl()" : 1 , "addFunction(String,String,Method)" : 1}},{ "className" : "org::apache::jasper::util::ExceptionUtils" , "selectors" : { "handleThrowable(Throwable)" : 2}},{ "className" : "org::apache::catalina::session::StandardSession" , "selectors" : { "StandardSession(Manager)" : 2 , "access()" : 6 , "activate()" : 3 , "endAccess()" : 1 , "exclude(String)" : 2 , "expire()" : 7 , "expire(boolean)" : 4 , "fireContainerEvent(Context,String,Object)" : 15 , "fireSessionEvent(String,Object)" : 4 , "getAttribute(String)" : 1 , "getCreationTime()" : 1 , "getId()" : 3 , "getIdInternal()" : 11 , "getManager()" : 4 , "getMaxInactiveInterval()" : 1 , "getPrincipal()" : 2 , "getSession()" : 10 , "getThisAccessedTime()" : 4 , "isValid()" : 3 , "isValidInternal()" : 11 , "keys()" : 6 , "passivate()" : 2 , "readObject(ObjectInputStream)" : 1 , "readObjectData(ObjectInputStream)" : 3 , "recycle()" : 3 , "removeAttribute(String)" : 3 , "removeAttribute(String,boolean)" : 1 , "removeAttributeInternal(String,boolean)" : 4 , "setAttribute(String,Object)" : 1 , "setAttribute(String,Object,boolean)" : 2 , "setAuthType(String)" : 1 , "setCreationTime(long)" : 1 , "setId(String)" : 1 , "setManager(Manager)" : 6 , "setNew(boolean)" : 1 , "setPrincipal(Principal)" : 2 , "setValid(boolean)" : 5 , "tellNew()" : 3 , "writeObject(ObjectOutputStream)" : 1 , "writeObjectData(ObjectOutputStream)" : 3}},{ "className" : "org::apache::catalina::connector::ClientAbortException" , "selectors" : { "ClientAbortException(String,Throwable)" : 3 , "ClientAbortException(Throwable)" : 2}},{ "className" : "org::apache::catalina::ha::deploy::WarWatcher::WarFilter" , "selectors" : { "WarFilter()" : 1}},{ "className" : "javax::servlet::ServletRequestAttributeEvent" , "selectors" : { "ServletRequestAttributeEvent(ServletContext,ServletRequest,String,Object)" : 3}},{ "className" : "org::apache::catalina::session::PersistentManagerBase::PrivilegedStoreRemove" , "selectors" : { "PrivilegedStoreRemove(String)" : 1}},{ "className" : "java::nio::channels::SelectionKey" , "selectors" : { "attach(Object)" : 11 , "attachment()" : 57 , "cancel()" : 33 , "channel()" : 45 , "interestOps()" : 41 , "interestOps(int)" : 40 , "isAcceptable()" : 7 , "isConnectable()" : 1 , "isReadable()" : 11 , "isValid()" : 31 , "isWritable()" : 7 , "readyOps()" : 16 , "selector()" : 3}},{ "className" : "javax::servlet::http::HttpSession" , "selectors" : { "getAttribute(String)" : 31 , "getAttributeNames()" : 9 , "getCreationTime()" : 3 , "getId()" : 15 , "getLastAccessedTime()" : 3 , "getMaxInactiveInterval()" : 3 , "getServletContext()" : 1 , "getSessionContext()" : 1 , "getValueNames()" : 1 , "invalidate()" : 5 , "isNew()" : 2 , "removeAttribute(String)" : 7 , "setAttribute(String,Object)" : 12 , "setMaxInactiveInterval(int)" : 2}},{ "className" : "org::apache::coyote::Adapter" , "selectors" : { "asyncDispatch(Request,Response,SocketStatus)" : 5 , "event(Request,Response,SocketStatus)" : 2 , "log(Request,Response,long)" : 49 , "service(Request,Response)" : 5}},{ "className" : "org::apache::catalina::util::Enumerator<T>" , "selectors" : { "Enumerator(Collection<T>)" : 10 , "Enumerator(Collection<T>,boolean)" : 4}},{ "className" : "org::apache::catalina::startup::TestContextConfigAnnotation" , "selectors" : { "paramClassResource(String)" : 10}},{ "className" : "org::apache::jasper::compiler::Node::PageDirective" , "selectors" : { "Node" : 3 , "addImport(String)" : 3 , "getImports()" : 3}},{ "className" : "javax::net::ssl::SSLContext" , "selectors" : { "createSSLEngine()" : 1 , "getInstance(String)" : 33 , "getInstance(String,Provider)" : 1 , "getInstance(String,String)" : 1 , "getProvider()" : 2 , "getServerSessionContext()" : 3 , "getServerSocketFactory()" : 8 , "getSocketFactory()" : 39 , "init(KeyManager[],TrustManager[],SecureRandom)" : 35}},{ "className" : "org::apache::tomcat::jni::Error" , "selectors" : { "getError()" : 1 , "strerror(int)" : 5}},{ "className" : "org::apache::tomcat::util::http::HttpMessages" , "selectors" : { "filter(String)" : 1 , "getMessage(int)" : 7 , "isSafeInHttpHeader(String)" : 3}},{ "className" : "org::apache::jasper::compiler::Node::TagDirective" , "selectors" : { "Node" : 3 , "addImport(String)" : 2 , "getImports()" : 1}},{ "className" : "org::apache::catalina::tribes::test::channel::TestMulticastPackages::Listener" , "selectors" : { "Listener()" : 1}},{ "className" : "org::apache::tomcat::util::digester::PathCallParamRule" , "selectors" : { "PathCallParamRule(int)" : 1}},{ "className" : "org::apache::tomcat::util::bcel::classfile::LocalVariableTable" , "selectors" : { "LocalVariableTable(int,int,DataInputStream,ConstantPool)" : 1 , "LocalVariableTable(int,int,LocalVariable[],ConstantPool)" : 1 , "getLocalVariable(int)" : 1 , "setLocalVariableTable(LocalVariable[])" : 1}},{ "className" : "javax::servlet::FilterConfig" , "selectors" : { "getInitParameter(String)" : 32 , "getInitParameterNames()" : 2 , "getServletContext()" : 4}},{ "className" : "org::apache::jasper::compiler::JarResource" , "selectors" : { "getEntry(String)" : 6 , "getJarFile()" : 1 , "getUrl()" : 3}},{ "className" : "org::apache::catalina::tribes::Heartbeat" , "selectors" : { "heartbeat()" : 2}},{ "className" : "org::apache::tomcat::util::bcel::classfile::ElementValuePair" , "selectors" : { "ElementValuePair(int,ElementValue,ConstantPool)" : 1 , "dump(DataOutputStream)" : 1 , "getNameString()" : 6 , "getValue()" : 21}},{ "className" : "org::apache::catalina::ssi::ExpressionParseTree::EqualNode" , "selectors" : { "EqualNode()" : 2}},{ "className" : "org::apache::jasper::xmlparser::UTF8Reader" , "selectors" : { "UTF8Reader(InputStream,int)" : 1 , "expectedByte(int,int)" : 12 , "invalidByte(int,int)" : 14 , "invalidSurrogate(int)" : 2 , "read(char[],int,int)" : 1}},{ "className" : "async::Stockticker" , "selectors" : { "Stockticker()" : 1 , "addTickListener(TickListener)" : 1 , "removeTickListener(TickListener)" : 1 , "start()" : 1 , "stop()" : 1}},{ "className" : "org::apache::tomcat::util::http::fileupload::FileItemStream::ItemSkippedException" , "selectors" : { "FileItemStream" : 4}},{ "className" : "javax::management::MBeanException" , "selectors" : { "MBeanException(Exception)" : 91 , "MBeanException(Exception,String)" : 68 , "getCause()" : 1 , "getTargetException()" : 65}},{ "className" : "org::apache::coyote::http11::InternalAprInputBuffer" , "selectors" : { "InternalAprInputBuffer(Request,int)" : 1 , "available()" : 1 , "fill()" : 14 , "parseHeader()" : 1 , "parseHeaders()" : 1 , "parseRequestLine(boolean)" : 1 , "recycle()" : 1 , "setSocket(long)" : 2}},{ "className" : "org::apache::catalina::connector::RequestFacade::GetCookiesPrivilegedAction" , "selectors" : { "GetCookiesPrivilegedAction()" : 1}},{ "className" : "org::apache::catalina::startup::SimpleHttpClient" , "selectors" : { "connect()" : 13 , "disconnect()" : 7 , "getResponseBody()" : 10 , "getResponseLine()" : 7 , "isResponse200()" : 9 , "isResponse404()" : 1 , "isResponse500()" : 2 , "isResponse501()" : 4 , "processRequest()" : 8 , "processRequest(boolean)" : 6 , "readLine()" : 7 , "reset()" : 13 , "setPort(int)" : 12 , "setRequest(String[])" : 13}},{ "className" : "java::lang::ArrayIndexOutOfBoundsException" , "selectors" : { "ArrayIndexOutOfBoundsException()" : 58 , "ArrayIndexOutOfBoundsException(String)" : 82 , "ArrayIndexOutOfBoundsException(int)" : 50}},{ "className" : "org::apache::el::util::ConcurrentCache" , "selectors" : { "ConcurrentCache(int)" : 1 , "get(K)" : 1 , "put(K,V)" : 1}},{ "className" : "org::apache::catalina::Authenticator" , "selectors" : { "authenticate(Request,HttpServletResponse,LoginConfig)" : 1 , "register(Request,HttpServletResponse,Principal,String,String,String)" : 2}},{ "className" : "javax::management::RuntimeErrorException" , "selectors" : { "RuntimeErrorException(Error)" : 15 , "RuntimeErrorException(Error,String)" : 11 , "getTargetError()" : 11}},{ "className" : "org::apache::catalina::core::ApplicationContextFacade" , "selectors" : { "ApplicationContextFacade(ApplicationContext)" : 1 , "doPrivileged(String,Class<?>[],Object[])" : 4 , "doPrivileged(String,Object[])" : 40 , "executeMethod(Method,ApplicationContext,Object[])" : 2 , "handleException(Exception)" : 2 , "initClassCache()" : 1 , "invokeMethod(ApplicationContext,String,Object[])" : 6}},{ "className" : "org::apache::catalina::startup::TomcatBaseTest" , "selectors" : { "getBuildDirectory()" : 6 , "getNextPort()" : 1 , "getPort()" : 106 , "getTemporaryDirectory()" : 2 , "getTomcatInstance()" : 97 , "getUrl(String)" : 86 , "getUrl(String,ByteChunk,Map<String,List<String>>)" : 7 , "setUp()" : 3}},{ "className" : "org::apache::tomcat::util::bcel::classfile::Attribute" , "selectors" : { "Attribute(byte,int,int,ConstantPool)" : 19 , "clone()" : 19 , "copy(ConstantPool)" : 1 , "dump(DataOutputStream)" : 20 , "getTag()" : 1 , "readAttribute(DataInputStream,ConstantPool)" : 3 , "toString()" : 3}},{ "className" : "org::apache::catalina::connector::CoyoteReader" , "selectors" : { "CoyoteReader(InputBuffer)" : 2 , "clear()" : 1 , "mark(int)" : 1 , "read()" : 1 , "read(char[],int,int)" : 1 , "reset()" : 1 , "skip(long)" : 1}},{ "className" : "org::apache::catalina::tribes::demos::EchoRpcTest::SystemExit" , "selectors" : { "SystemExit(long)" : 1}},{ "className" : "org::apache::catalina::Server" , "selectors" : { "addService(Service)" : 2 , "await()" : 1 , "findServices()" : 3 , "getAddress()" : 1 , "getGlobalNamingResources()" : 5 , "getPort()" : 2 , "getShutdown()" : 1 , "removeService(Service)" : 1 , "setPort(int)" : 1}},{ "className" : "java::util::concurrent::locks::ReadWriteLock" , "selectors" : { "readLock()" : 109 , "writeLock()" : 90}},{ "className" : "org::apache::catalina::startup::SetNextNamingRule" , "selectors" : { "SetNextNamingRule(String,String)" : 8}},{ "className" : "javax::el::FunctionMapper" , "selectors" : { "resolveFunction(String,String)" : 4}},{ "className" : "javax::servlet::HttpConstraintElement" , "selectors" : { "HttpConstraintElement()" : 2 , "HttpConstraintElement(EmptyRoleSemantic)" : 2 , "HttpConstraintElement(EmptyRoleSemantic,TransportGuarantee,String[])" : 4 , "HttpConstraintElement(TransportGuarantee,String[])" : 6 , "getEmptyRoleSemantic()" : 3 , "getRolesAllowed()" : 4 , "getTransportGuarantee()" : 4}},{ "className" : "org::apache::catalina::valves::PersistentValve" , "selectors" : { "isSessionStale(Session,long)" : 3}},{ "className" : "org::apache::naming::resources::WARDirContext::WARResource" , "selectors" : { "WARResource(ZipEntry)" : 2}},{ "className" : "org::apache::tomcat::util::http::fileupload::DeferredFileOutputStream" , "selectors" : { "DeferredFileOutputStream(int,File)" : 2 , "getData()" : 3 , "getFile()" : 6 , "isInMemory()" : 4}},{ "className" : "org::apache::el::lang::ELArithmetic::BigDecimalDelegate" , "selectors" : { "BigDecimalDelegate()" : 1 , "matches(Object,Object)" : 5}},{ "className" : "org::apache::naming::ResourceLinkRef" , "selectors" : { "ResourceLinkRef(String,String,String,String)" : 2}},{ "className" : "javax::management::AttributeList" , "selectors" : { "AttributeList()" : 59 , "AttributeList(int)" : 9 , "add(Attribute)" : 206 , "add(int,Attribute)" : 1}},{ "className" : "org::apache::catalina::util::Extension" , "selectors" : { "Extension()" : 2 , "getExtensionName()" : 2 , "getImplementationVendorId()" : 2 , "getImplementationVersion()" : 2 , "getSpecificationVersion()" : 2 , "isCompatibleWith(Extension)" : 2 , "isFulfilled()" : 1 , "isNewer(String,String)" : 2 , "setExtensionName(String)" : 2 , "setFulfilled(boolean)" : 2 , "setImplementationURL(String)" : 2 , "setImplementationVendor(String)" : 1 , "setImplementationVendorId(String)" : 2 , "setImplementationVersion(String)" : 2 , "setSpecificationVersion(String)" : 2}},{ "className" : "org::apache::jasper::compiler::TldLocation" , "selectors" : { "TldLocation(String)" : 3 , "TldLocation(String,JarResource)" : 2 , "TldLocation(String,String)" : 3 , "getJarResource()" : 3 , "getJarResource(String)" : 1 , "getName()" : 2}},{ "className" : "org::apache::tomcat::util::digester::ArrayStack<T>" , "selectors" : { "ArrayStack()" : 7 , "ArrayStack(int)" : 1}},{ "className" : "org::apache::catalina::valves::AccessLogValve::SessionAttributeElement" , "selectors" : { "SessionAttributeElement(String)" : 1}},{ "className" : "org::apache::tomcat::util::bcel::classfile::LineNumber" , "selectors" : { "LineNumber(DataInput)" : 1 , "LineNumber(int,int)" : 1 , "copy()" : 1 , "dump(DataOutputStream)" : 1 , "toString()" : 1}},{ "className" : "org::apache::coyote::OutputBuffer" , "selectors" : { "doWrite(ByteChunk,Response)" : 10}},{ "className" : "org::apache::catalina::tribes::test::transport::SocketValidateReceive::MyDataReader" , "selectors" : { "MyDataReader(int)" : 1 , "append(byte[],int,int)" : 1}},{ "className" : "org::apache::jasper::compiler::ELNode::Function" , "selectors" : { "Function(String,String)" : 1 , "getFunctionInfo()" : 5 , "getMethodName()" : 3 , "getName()" : 12 , "getParameters()" : 2 , "getPrefix()" : 11 , "getUri()" : 2 , "setFunctionInfo(FunctionInfo)" : 1 , "setMethodName(String)" : 1 , "setParameters(String[])" : 1 , "setUri(String)" : 1}},{ "className" : "org::apache::tomcat::util::http::fileupload::FileUploadBase::FileItemIteratorImpl::FileItemStreamImpl" , "selectors" : { "FileItemStreamImpl(String,String,String,boolean,long)" : 2 , "close()" : 1 , "setHeaders(FileItemHeaders)" : 2}},{ "className" : "org::apache::catalina::manager::host::HostManagerServlet" , "selectors" : { "add(HttpServletRequest,PrintWriter,String,boolean)" : 2 , "add(PrintWriter,String,String,String,boolean,boolean,boolean,boolean,boolean)" : 1 , "booleanParameter(HttpServletRequest,String,boolean,boolean)" : 5 , "getConfigBase(String)" : 1 , "list(PrintWriter)" : 1 , "remove(PrintWriter,String)" : 2 , "start(PrintWriter,String)" : 2 , "stop(PrintWriter,String)" : 2}},{ "className" : "org::apache::catalina::tribes::transport::bio::BioReceiver" , "selectors" : { "bind()" : 1 , "getReplicationThread()" : 1 , "listen()" : 1}},{ "className" : "org::apache::catalina::comet::CometEvent" , "selectors" : { "close()" : 6 , "getEventSubType()" : 1 , "getEventType()" : 6 , "getHttpServletRequest()" : 5 , "getHttpServletResponse()" : 2}},{ "className" : "org::apache::catalina::ssi::ExpressionParseTree::Node" , "selectors" : { "evaluate()" : 6}},{ "className" : "org::apache::catalina::startup::ExpandWar" , "selectors" : { "copy(File,File)" : 2 , "delete(File)" : 6 , "delete(File,boolean)" : 2 , "deleteDir(File)" : 1 , "deleteDir(File,boolean)" : 3 , "expand(Host,URL,String)" : 2 , "expand(InputStream,File)" : 2 , "validate(Host,URL,String)" : 2}},{ "className" : "org::apache::catalina::startup::LifecycleListenerRule" , "selectors" : { "LifecycleListenerRule(String,String)" : 3}},{ "className" : "org::apache::catalina::tribes::io::XByteBuffer" , "selectors" : { "XByteBuffer(byte[],boolean)" : 7 , "XByteBuffer(byte[],int,boolean)" : 1 , "XByteBuffer(int,boolean)" : 11 , "append(ByteBuffer,int)" : 2 , "append(boolean)" : 2 , "append(byte)" : 2 , "append(byte[],int,int)" : 17 , "append(int)" : 7 , "clear()" : 5 , "countPackages()" : 5 , "countPackages(boolean)" : 6 , "createDataPackage(ChannelData)" : 9 , "createDataPackage(byte[])" : 2 , "createDataPackage(byte[],int,int,byte[],int)" : 1 , "deserialize(byte[])" : 1 , "deserialize(byte[],int,int)" : 3 , "deserialize(byte[],int,int,ClassLoader[])" : 3 , "doesPackageExist()" : 2 , "expand(int)" : 7 , "extractDataPackage(boolean)" : 3 , "extractPackage(boolean)" : 3 , "firstIndexOf(byte[],int,byte[])" : 7 , "getBytes()" : 8 , "getBytesDirect()" : 35 , "getCapacity()" : 4 , "getDataPackageLength(int)" : 5 , "getLength()" : 23 , "reset()" : 3 , "serialize(Serializable)" : 3 , "setDiscard(boolean)" : 1 , "setLength(int)" : 2 , "toBoolean(byte[],int)" : 1 , "toBytes(boolean,byte[],int)" : 2 , "toBytes(int,byte[],int)" : 17 , "toBytes(long,byte[],int)" : 5 , "toInt(byte[],int)" : 28 , "toLong(byte[],int)" : 3 , "trim(int)" : 7}},{ "className" : "org::apache::tomcat::util::http::fileupload::MultipartStream::MalformedStreamException" , "selectors" : { "MalformedStreamException(String)" : 5}},{ "className" : "org::apache::catalina::core::StandardHostValve" , "selectors" : { "StandardHostValve()" : 1 , "custom(Request,Response,ErrorPage)" : 2 , "findErrorPage(Context,Throwable)" : 2 , "status(Request,Response)" : 3 , "throwable(Request,Response,Throwable)" : 2}},{ "className" : "org::apache::jasper::compiler::AttributeParser" , "selectors" : { "AttributeParser(String,char,boolean,boolean,boolean)" : 2 , "getType(String)" : 1 , "getUnquoted()" : 2 , "getUnquoted(String,char,boolean,boolean)" : 1 , "getUnquoted(String,char,boolean,boolean,boolean)" : 2 , "nextChar()" : 3 , "parseEL()" : 1 , "parseLiteral()" : 1}},{ "className" : "org::apache::el::lang::VariableMapperImpl" , "selectors" : { "VariableMapperImpl()" : 1}},{ "className" : "org::apache::tomcat::util::modeler::BaseAttributeFilter" , "selectors" : { "BaseAttributeFilter(String)" : 1 , "addAttribute(String)" : 2 , "clear()" : 1 , "getNames()" : 2}},{ "className" : "org::apache::catalina::deploy::Injectable" , "selectors" : { "getInjectionTargets()" : 1 , "getName()" : 1}},{ "className" : "org::apache::catalina::valves::ExtendedAccessLogValve::ElementTimestampStruct" , "selectors" : { "ElementTimestampStruct(String)" : 2}},{ "className" : "org::apache::catalina::realm::JNDIRealm" , "selectors" : { "JNDIRealm()" : 1 , "addAttributeValues(String,Attributes,ArrayList<String>)" : 2 , "authenticate(DirContext,String,String)" : 4 , "bindAsUser(DirContext,User,String)" : 1 , "checkCredentials(DirContext,User,String)" : 2 , "close(DirContext)" : 8 , "compareCredentials(DirContext,User,String)" : 1 , "doRFC2254Encoding(String)" : 1 , "getAttributeValue(String,Attributes)" : 4 , "getDirectoryContextEnvironment()" : 2 , "getDistinguishedName(DirContext,String,SearchResult)" : 3 , "getPrincipal(DirContext,String)" : 3 , "getRoleNested()" : 1 , "getRoles(DirContext,User)" : 3 , "getUser(DirContext,String)" : 1 , "getUser(DirContext,String,String)" : 1 , "getUser(DirContext,String,String,int)" : 3 , "getUserByPattern(DirContext,String,String,String[],int)" : 1 , "getUserByPattern(DirContext,String,String[],String)" : 2 , "getUserBySearch(DirContext,String,String[])" : 1 , "open()" : 8 , "parseUserPatternString(String)" : 1 , "release(DirContext)" : 2}},{ "className" : "org::apache::catalina::users::MemoryGroupCreationFactory" , "selectors" : { "MemoryGroupCreationFactory(MemoryUserDatabase)" : 1}},{ "className" : "org::apache::coyote::http11::InternalNioInputBuffer::HeaderParseData" , "selectors" : { "HeaderParseData()" : 1 , "recycle()" : 4}},{ "className" : "org::apache::catalina::valves::ExtendedAccessLogValve::ResponseHeaderElement" , "selectors" : { "ResponseHeaderElement(String)" : 1}},{ "className" : "javax::servlet::jsp::ErrorData" , "selectors" : { "ErrorData(Throwable,int,String,String)" : 1}},{ "className" : "org::apache::tomcat::util::http::fileupload::FileUpload" , "selectors" : { "FileUpload()" : 1 , "FileUpload(FileItemFactory)" : 1 , "setFileItemFactory(FileItemFactory)" : 1}},{ "className" : "org::apache::catalina::filters::TestAddCharSetFilter::CharsetServlet" , "selectors" : { "CharsetServlet(int)" : 1}},{ "className" : "org::apache::catalina::valves::AccessLogValve::DateAndTimeElement" , "selectors" : { "DateAndTimeElement()" : 1}},{ "className" : "org::apache::tomcat::util::http::mapper::Mapper::Host" , "selectors" : { "Host()" : 3}},{ "className" : "org::apache::catalina::ContainerServlet" , "selectors" : { "setWrapper(Wrapper)" : 1}},{ "className" : "org::apache::tomcat::util::net::jsse::JSSESupport::Listener" , "selectors" : { "Listener()" : 1 , "reset()" : 1}},{ "className" : "org::apache::tomcat::util::net::NioSelectorPool" , "selectors" : { "NioSelectorPool()" : 1 , "close()" : 1 , "get()" : 2 , "getSharedSelector()" : 5 , "open()" : 1 , "put(Selector)" : 2 , "read(ByteBuffer,NioChannel,Selector,long)" : 1 , "read(ByteBuffer,NioChannel,Selector,long,boolean)" : 1 , "write(ByteBuffer,NioChannel,Selector,long,boolean,MutableInteger)" : 3}},{ "className" : "org::apache::tomcat::util::digester::ObjectCreationFactory" , "selectors" : { "createObject(Attributes)" : 2 , "setDigester(Digester)" : 2}},{ "className" : "org::apache::catalina::tribes::transport::bio::BioSender" , "selectors" : { "BioSender()" : 1 , "closeSocket()" : 3 , "connect()" : 1 , "disconnect()" : 2 , "openSocket()" : 2 , "pushMessage(byte[],boolean,boolean)" : 2 , "sendMessage(byte[],boolean)" : 1 , "waitForAck()" : 1}},{ "className" : "org::apache::catalina::core::ApplicationSessionCookieConfig" , "selectors" : { "ApplicationSessionCookieConfig()" : 1 , "createSessionCookie(Context,String,boolean)" : 2 , "getConfiguredSessionCookieName(Context)" : 2 , "getSessionCookieName(Context)" : 2 , "getSessionUriParamName(Context)" : 5}},{ "className" : "org::apache::catalina::tribes::transport::nio::NioSender" , "selectors" : { "NioSender()" : 4 , "completeConnect()" : 3 , "connect()" : 5 , "disconnect()" : 4 , "getBuffer(int)" : 4 , "getMessage()" : 1 , "getReadBuffer()" : 2 , "getSelector()" : 5 , "getWriteBuffer()" : 1 , "isComplete()" : 1 , "process(SelectionKey,boolean)" : 4 , "read(SelectionKey)" : 3 , "reset()" : 5 , "setComplete(boolean)" : 1 , "setMessage(byte[])" : 10 , "setMessage(byte[],int,int)" : 1 , "setSelector(Selector)" : 4 , "write(SelectionKey)" : 1}},{ "className" : "javax::servlet::http::HttpServletResponseWrapper" , "selectors" : { "HttpServletResponseWrapper(HttpServletResponse)" : 9 , "_getHttpServletResponse()" : 21 , "addDateHeader(String,long)" : 2 , "addHeader(String,String)" : 2 , "containsHeader(String)" : 1 , "encodeRedirectURL(String)" : 1 , "encodeURL(String)" : 1 , "getStatus()" : 5 , "setDateHeader(String,long)" : 2 , "setHeader(String,String)" : 2}},{ "className" : "org::apache::tomcat::util::http::TestCookiesAllowHttpSeps::SimpleServlet" , "selectors" : { "SimpleServlet()" : 1}},{ "className" : "javax::el::MapELResolver" , "selectors" : { "MapELResolver()" : 3}},{ "className" : "org::apache::tomcat::util::buf::StringCache::CharEntry" , "selectors" : { "CharEntry()" : 2}},{ "className" : "org::apache::naming::resources::DirContextURLStreamHandler" , "selectors" : { "DirContextURLStreamHandler()" : 1 , "DirContextURLStreamHandler(DirContext)" : 1 , "bind(ClassLoader,DirContext)" : 1 , "bind(DirContext)" : 1 , "get()" : 1 , "unbind()" : 1 , "unbind(ClassLoader)" : 1}},{ "className" : "org::apache::catalina::util::CustomObjectInputStream" , "selectors" : { "CustomObjectInputStream(InputStream,ClassLoader)" : 3}},{ "className" : "org::apache::el::parser::Token" , "selectors" : { "Token()" : 6 , "Token(int,String)" : 2 , "newToken(int,String)" : 2}},{ "className" : "org::apache::catalina::startup::SetPublicIdRule" , "selectors" : { "SetPublicIdRule(String)" : 1}},{ "className" : "org::apache::catalina::startup::Tomcat" , "selectors" : { "Tomcat()" : 1 , "addContext(Host,String,String)" : 3 , "addContext(String,String)" : 33 , "addServlet(Context,String,Servlet)" : 38 , "addServlet(Context,String,String)" : 3 , "addWebapp(Host,String,String)" : 49 , "addWebapp(String,String)" : 5 , "destroy()" : 2 , "enableNaming()" : 3 , "getConnector()" : 22 , "getEngine()" : 2 , "getHost()" : 10 , "getServer()" : 12 , "getService()" : 2 , "initBaseDir()" : 1 , "initSimpleAuth()" : 1 , "initWebappDefaults(Context)" : 2 , "setBaseDir(String)" : 1 , "setConnector(Connector)" : 2 , "silence(String)" : 2 , "start()" : 92 , "stop()" : 10}},{ "className" : "org::apache::coyote::ajp::AjpAprProcessor::SocketInputBuffer" , "selectors" : { "SocketInputBuffer()" : 1}},{ "className" : "org::apache::catalina::tribes::group::interceptors::OrderInterceptor::Counter" , "selectors" : { "Counter()" : 2 , "getCounter()" : 3 , "inc()" : 3 , "setCounter(int)" : 3}},{ "className" : "org::apache::catalina::valves::TestRemoteIpValve" , "selectors" : { "assertArrayEquals(String[],String[])" : 2}},{ "className" : "org::apache::catalina::core::ApplicationHttpRequest::AttributeNamesEnumerator" , "selectors" : { "AttributeNamesEnumerator()" : 1 , "findNext()" : 2}},{ "className" : "org::apache::catalina::util::LifecycleBase" , "selectors" : { "LifecycleBase()" : 1 , "addLifecycleListener(LifecycleListener)" : 8 , "destroy()" : 9 , "destroyInternal()" : 1 , "findLifecycleListeners()" : 2 , "fireLifecycleEvent(String,Object)" : 18 , "getState()" : 43 , "init()" : 2 , "initInternal()" : 1 , "invalidTransition(String)" : 6 , "setState(LifecycleState)" : 53 , "setState(LifecycleState,Object)" : 1 , "start()" : 5 , "startInternal()" : 1 , "stop()" : 5 , "stopInternal()" : 1}},{ "className" : "org::apache::jasper::compiler::ELNode::ELText" , "selectors" : { "ELText(String)" : 3}},{ "className" : "org::apache::tomcat::util::http::fileupload::ByteArrayOutputStream" , "selectors" : { "ByteArrayOutputStream()" : 1 , "ByteArrayOutputStream(int)" : 1 , "getBuffer(int)" : 4 , "needNewBuffer(int)" : 4 , "toByteArray()" : 3 , "writeTo(OutputStream)" : 2}},{ "className" : "org::apache::catalina::core::ApplicationJspConfigDescriptor" , "selectors" : { "ApplicationJspConfigDescriptor()" : 2}},{ "className" : "org::apache::catalina::ant::jmx::JMXAccessorCondition" , "selectors" : { "accessJMXValue()" : 1 , "eval()::BuildException" : 3 , "getHost()" : 1 , "getJMXConnection()" : 1 , "getOperation()" : 1 , "getPassword()" : 1 , "getPort()" : 1 , "getUrl()" : 1 , "getUsername()" : 1 , "testIfCondition()" : 1 , "testUnlessCondition()" : 1}},{ "className" : "java::security::AccessControlException" , "selectors" : { "AccessControlException(String)" : 3 , "getPermission()" : 1}},{ "className" : "org::apache::catalina::connector::TestKeepAliveCount::TestKeepAliveClient" , "selectors" : { "TestKeepAliveClient()" : 2 , "doHttp10Request()" : 1 , "doHttp11Request()" : 1 , "init()" : 2}},{ "className" : "org::apache::tomcat::util::bcel::classfile::LineNumberTable" , "selectors" : { "LineNumberTable(int,int,DataInputStream,ConstantPool)" : 1 , "LineNumberTable(int,int,LineNumber[],ConstantPool)" : 1 , "setLineNumberTable(LineNumber[])" : 1}},{ "className" : "org::apache::catalina::filters::TestRemoteIpFilter::MockHttpServlet" , "selectors" : { "MockHttpServlet()" : 1 , "getRequest()" : 1}},{ "className" : "org::apache::el::parser::AstMethodParameters" , "selectors" : { "AstMethodParameters(int)" : 1 , "getParameterTypes(EvaluationContext)" : 1 , "getParameters(EvaluationContext)" : 2}},{ "className" : "org::apache::catalina::connector::Connector" , "selectors" : { "Connector()" : 4 , "Connector(String)" : 8 , "createObjectNameKeyProperties(String)" : 3 , "createRequest()" : 2 , "createResponse()" : 2 , "getAllowTrace()" : 2 , "getAsyncTimeout()" : 1 , "getAttribute(String)" : 1 , "getEnableLookups()" : 1 , "getInfo()" : 1 , "getMapper()" : 1 , "getMaxPostSize()" : 3 , "getMaxSavePostSize()" : 1 , "getPort()" : 8 , "getProperty(String)" : 3 , "getProtocol()" : 2 , "getProtocolHandler()" : 4 , "getProtocolHandlerClassName()" : 7 , "getProxyName()" : 1 , "getProxyPort()" : 1 , "getRedirectPort()" : 1 , "getScheme()" : 1 , "getSecure()" : 1 , "getService()" : 19 , "getURIEncoding()" : 6 , "getUseBodyEncodingForURI()" : 2 , "getUseIPVHosts()" : 1 , "getXpoweredBy()" : 1 , "pause()" : 1 , "setAttribute(String,Object)" : 6 , "setMaxPostSize(int)" : 1 , "setPort(int)" : 4 , "setProperty(String,String)" : 22 , "setProtocol(String)" : 2 , "setProtocolHandlerClassName(String)" : 7 , "setScheme(String)" : 2 , "setSecure(boolean)" : 3 , "setService(Service)" : 3 , "setURIEncoding(String)" : 1}},{ "className" : "org::apache::jasper::compiler::SmapStratum::LineInfo" , "selectors" : { "LineInfo()" : 1 , "getString()" : 2 , "setInputLineCount(int)" : 2 , "setInputStartLine(int)" : 1 , "setLineFileID(int)" : 1 , "setOutputLineIncrement(int)" : 2 , "setOutputStartLine(int)" : 1}},{ "className" : "org::apache::tomcat::util::net::NioEndpoint::Poller" , "selectors" : { "Poller()" : 1 , "add(NioChannel)" : 2 , "add(NioChannel,int)" : 7 , "addEvent(Runnable)" : 2 , "cancelledKey(SelectionKey,SocketStatus,boolean)" : 19 , "cometInterest(NioChannel)" : 1 , "destroy()" : 1 , "events()" : 2 , "getKeyCount()" : 1 , "getSelector()" : 10 , "processKey(SelectionKey,KeyAttachment)" : 2 , "processSendfile(SelectionKey,KeyAttachment,boolean,boolean)" : 2 , "reg(SelectionKey,KeyAttachment,int)" : 5 , "register(NioChannel)" : 1 , "timeout(int,boolean)" : 3 , "unreg(SelectionKey,KeyAttachment,int)" : 1}},{ "className" : "org::apache::catalina::tribes::test::transport::SocketValidateReceive" , "selectors" : { "printStats(long,double,int,DecimalFormat,BigDecimal)" : 3}},{ "className" : "org::apache::catalina::tribes::test::transport::SocketTribesReceive" , "selectors" : { "printStats(long,double,int,DecimalFormat,BigDecimal)" : 3}},{ "className" : "org::apache::tomcat::util::IntrospectionUtils::AttributeHolder" , "selectors" : { "setAttribute(String,Object)" : 1}},{ "className" : "org::apache::jasper::runtime::PerThreadTagHandlerPool::PerThreadData" , "selectors" : { "PerThreadData()" : 1}},{ "className" : "org::apache::jasper::compiler::Node::JspOutput" , "selectors" : { "Node" : 1}},{ "className" : "org::apache::catalina::valves::Benchmarks::GetDateBenchmarkTest_LocalMutableLong" , "selectors" : { "GetDateBenchmarkTest_LocalMutableLong()" : 1 , "getCurrentDate()" : 1}},{ "className" : "org::apache::catalina::ant::SessionsTask" , "selectors" : { "execute()::BuildException" : 2}},{ "className" : "org::apache::jasper::compiler::JspReader" , "selectors" : { "JspReader(JspCompilationContext,String,String,InputStreamReader,ErrorDispatcher)" : 2 , "JspReader(JspCompilationContext,String,String,JarFile,ErrorDispatcher)" : 1 , "getFile(int)" : 3 , "getJspCompilationContext()" : 2 , "getText(Mark,Mark)" : 16 , "hasMoreInput()" : 15 , "isDelimiter()" : 2 , "isSpace()" : 2 , "mark()" : 87 , "matches(String)" : 113 , "matchesETag(String)" : 9 , "matchesETagWithoutLessThan(String)" : 4 , "matchesOptionalSpacesFollowedBy(String)" : 3 , "nextChar()" : 35 , "parseToken(boolean)" : 2 , "peekChar()" : 14 , "popFile()" : 2 , "pushChar()" : 6 , "pushFile(String,String,InputStreamReader)" : 1 , "registerSourceFile(String)" : 1 , "reset(Mark)" : 14 , "setSingleFile(boolean)" : 2 , "skipSpaces()" : 41 , "skipUntil(String)" : 23 , "skipUntilETag(String)" : 1 , "skipUntilIgnoreEsc(String)" : 1 , "unregisterSourceFile(String)" : 1}},{ "className" : "org::apache::tomcat::util::net::JIoEndpoint::Acceptor" , "selectors" : { "Acceptor()" : 1}},{ "className" : "org::apache::catalina::tribes::test::membership::TestTcpFailureDetector" , "selectors" : { "clear()" : 3}},{ "className" : "org::apache::catalina::ant::jmx::JMXAccessorEqualsCondition" , "selectors" : { "accessJMXValue()" : 1 , "eval()::BuildException" : 2 , "getHost()" : 1 , "getJMXConnection()" : 1 , "getPassword()" : 1 , "getPort()" : 1 , "getUrl()" : 1 , "getUsername()" : 1}},{ "className" : "org::apache::tomcat::util::digester::FactoryCreateRule" , "selectors" : { "FactoryCreateRule(Class<?>,String,boolean)" : 3 , "FactoryCreateRule(Class<?>,boolean)" : 2 , "FactoryCreateRule(ObjectCreationFactory,boolean)" : 2 , "FactoryCreateRule(String,String,boolean)" : 4 , "FactoryCreateRule(String,boolean)" : 2 , "getFactory(Attributes)" : 2}},{ "className" : "org::apache::coyote::http11::TestAbstractHttp11Processor::Client" , "selectors" : { "Client()" : 5}},{ "className" : "org::apache::jasper::compiler::Node::NamedAttribute" , "selectors" : { "Node" : 3 , "getChildInfo()" : 2 , "getLocalName()" : 3 , "getName()" : 5 , "getPrefix()" : 1 , "getTemporaryVariableName()" : 3 , "getText()" : 2 , "getText()::AttributeVisitor" : 2 , "isOmit()" : 1 , "isTrim()" : 3}},{ "className" : "org::apache::jasper::compiler::TagPluginManager" , "selectors" : { "TagPluginManager(ServletContext)" : 2 , "apply(Nodes,ErrorDispatcher,PageInfo)" : 1 , "init(ErrorDispatcher)" : 1 , "invokePlugin(CustomTag)" : 1}},{ "className" : "org::apache::tomcat::util::threads::ThreadPoolExecutor" , "selectors" : { "ThreadPoolExecutor(int,int,long,TimeUnit,BlockingQueue<Runnable>,ThreadFactory)" : 2 , "execute(Runnable)" : 1 , "execute(Runnable,long,TimeUnit)" : 2 , "getActiveCount()" : 2}},{ "className" : "javax::servlet::AsyncEvent" , "selectors" : { "AsyncEvent(AsyncContext,ServletRequest,ServletResponse)" : 1 , "getAsyncContext()" : 3}},{ "className" : "org::apache::catalina::Host" , "selectors" : { "findAliases()" : 4 , "getAppBase()" : 16 , "getAutoDeploy()" : 1 , "getConfigClass()" : 3 , "getCreateDirs()" : 1 , "getDeployOnStartup()" : 1 , "getName()" : 27 , "getXmlBase()" : 2 , "setAppBase(String)" : 1 , "setName(String)" : 1}},{ "className" : "org::apache::jasper::xmlparser::SymbolTable::Entry" , "selectors" : { "Entry(String,Entry)" : 1 , "Entry(char[],int,int,Entry)" : 1}},{ "className" : "org::apache::coyote::ajp::AjpAprProcessor::SocketOutputBuffer" , "selectors" : { "SocketOutputBuffer()" : 1}},{ "className" : "javax::el::PropertyNotWritableException" , "selectors" : { "PropertyNotWritableException()" : 1 , "PropertyNotWritableException(String)" : 8 , "PropertyNotWritableException(String,Throwable)" : 1 , "PropertyNotWritableException(Throwable)" : 2}},{ "className" : "org::apache::catalina::valves::Benchmarks::TestThread" , "selectors" : { "TestThread(int,Runnable)" : 1}},{ "className" : "org::apache::catalina::startup::Tomcat::FixContextListener" , "selectors" : { "FixContextListener()" : 1}},{ "className" : "org::apache::jasper::compiler::ScriptingVariabler::ScriptingVariableVisitor" , "selectors" : { "ScriptingVariableVisitor(ErrorDispatcher)" : 1 , "setScriptingVars(CustomTag,int)" : 3}},{ "className" : "org::apache::jasper::xmlparser::XMLEncodingDetector" , "selectors" : { "XMLEncodingDetector()" : 1 , "createInitialReader()" : 1 , "createReader(InputStream,String,Boolean)" : 2 , "endEntity()" : 1 , "getEncoding(InputStream,ErrorDispatcher)" : 1 , "getEncoding(String,JarFile,JspCompilationContext,ErrorDispatcher)" : 1 , "getEncodingName(byte[],int)" : 1 , "isExternal()" : 6 , "load(int,boolean)" : 23 , "peekChar()" : 6 , "reportFatalError(String,String)" : 7 , "scanChar()" : 7 , "scanData(String,XMLStringBuffer)" : 2 , "scanLiteral(int,XMLString)" : 2 , "scanName()" : 1 , "scanPIData(String,XMLString)" : 1 , "scanPseudoAttribute(boolean,XMLString)" : 1 , "scanSurrogates(XMLStringBuffer)" : 2 , "scanXMLDecl()" : 1 , "scanXMLDeclOrTextDecl(boolean)" : 1 , "scanXMLDeclOrTextDecl(boolean,String[])" : 1 , "skipChar(int)" : 4 , "skipSpaces()" : 5 , "skipString(String)" : 2}},{ "className" : "org::apache::catalina::session::StandardManager::PrivilegedDoLoad" , "selectors" : { "PrivilegedDoLoad()" : 1}},{ "className" : "org::apache::tomcat::util::bcel::classfile::StackMapTable" , "selectors" : { "StackMapTable(int,int,DataInputStream,ConstantPool)" : 1 , "StackMapTable(int,int,StackMapTableEntry[],ConstantPool)" : 1 , "setStackMapTable(StackMapTableEntry[])" : 1}},{ "className" : "org::apache::catalina::ssi::SSIServlet" , "selectors" : { "processSSI(HttpServletRequest,HttpServletResponse,URL)" : 1 , "requestHandler(HttpServletRequest,HttpServletResponse)" : 2}},{ "className" : "javax::servlet::http::Part" , "selectors" : { "delete()" : 2 , "getHeader(String)" : 1 , "getName()" : 2 , "write(String)" : 1}},{ "className" : "org::apache::catalina::ant::jmx::JMXAccessorSetTask" , "selectors" : { "getMBeanAttributeType(MBeanServerConnection,String,String)" : 1 , "isConvert()" : 1 , "jmxExecute(MBeanServerConnection)::BuildException" : 2 , "jmxSet(MBeanServerConnection,String)" : 1}},{ "className" : "org::apache::catalina::startup::Catalina::CatalinaShutdownHook" , "selectors" : { "CatalinaShutdownHook()" : 1}},{ "className" : "org::apache::catalina::ContainerListener" , "selectors" : { "containerEvent(ContainerEvent)" : 1}},{ "className" : "org::apache::catalina::startup::Tomcat::DefaultWebXmlListener" , "selectors" : { "DefaultWebXmlListener()" : 1}},{ "className" : "org::apache::catalina::ssi::SSIServletRequestUtil" , "selectors" : { "getRelativePath(HttpServletRequest)" : 2}},{ "className" : "org::apache::catalina::comet::CometProcessor" , "selectors" : { "event(CometEvent)" : 2}},{ "className" : "org::apache::tomcat::util::http::fileupload::MultipartStream::ProgressNotifier" , "selectors" : { "ProgressNotifier(ProgressListener,long)" : 1 , "noteBytesRead(int)" : 2 , "noteItem()" : 2 , "notifyListener()" : 2}},{ "className" : "org::apache::jasper::compiler::Validator::DirectiveVisitor" , "selectors" : { "DirectiveVisitor(Compiler)" : 1 , "comparePageEncodings(String,PageDirective)" : 1 , "compareTagEncodings(String,TagDirective)" : 1}},{ "className" : "org::apache::catalina::core::DummyRequest" , "selectors" : { "DummyRequest()" : 1 , "setQueryString(String)" : 1 , "setServletPath(String)" : 1}},{ "className" : "org::apache::jasper::compiler::Compiler" , "selectors" : { "Compiler()" : 1 , "compile()" : 1 , "compile(boolean)" : 2 , "compile(boolean,boolean)" : 2 , "generateClass(String[])" : 1 , "generateJava()" : 1 , "getCompilationContext()" : 8 , "getErrorDispatcher()" : 10 , "getPageInfo()" : 17 , "getPageNodes()" : 2 , "init(JspCompilationContext,JspServletWrapper)" : 1 , "isOutDated()" : 1 , "isOutDated(boolean)" : 2 , "removeGeneratedClassFiles()" : 2 , "removeGeneratedFiles()" : 1 , "setupContextWriter(String)" : 2}},{ "className" : "org::apache::tomcat::util::buf::Ascii" , "selectors" : { "isDigit(int)" : 8 , "parseInt(byte[],int,int)" : 1 , "parseInt(char[],int,int)" : 1 , "parseLong(byte[],int,int)" : 1 , "toLower(int)" : 20}},{ "className" : "javax::servlet::ServletRequest" , "selectors" : { "getAsyncContext()" : 7 , "getAttribute(String)" : 59 , "getAttributeNames()" : 9 , "getCharacterEncoding()" : 6 , "getContentLength()" : 8 , "getContentType()" : 7 , "getDispatcherType()" : 3 , "getInputStream()" : 10 , "getLocalAddr()" : 2 , "getLocalName()" : 1 , "getLocalPort()" : 1 , "getLocale()" : 3 , "getLocales()" : 2 , "getParameter(String)" : 59 , "getParameterMap()" : 2 , "getParameterNames()" : 7 , "getParameterValues(String)" : 6 , "getProtocol()" : 11 , "getReader()" : 1 , "getRealPath(String)" : 1 , "getRemoteAddr()" : 23 , "getRemoteHost()" : 22 , "getRemotePort()" : 2 , "getRequestDispatcher(String)" : 2 , "getScheme()" : 11 , "getServerName()" : 8 , "getServerPort()" : 12 , "getServletContext()" : 3 , "isAsyncStarted()" : 13 , "isAsyncSupported()" : 4 , "isSecure()" : 10 , "removeAttribute(String)" : 18 , "setAttribute(String,Object)" : 38 , "setCharacterEncoding(String)" : 2 , "startAsync()" : 10 , "startAsync(ServletRequest,ServletResponse)" : 2}},{ "className" : "org::apache::naming::resources::DirContextURLConnection" , "selectors" : { "DirContextURLConnection(DirContext,URL)" : 1 , "connect()" : 6 , "getContent()" : 1 , "getHeaderField(String)" : 2 , "getHeaderValueAsString(Object)" : 2 , "getInputStream()" : 2 , "list()" : 1}},{ "className" : "org::apache::jasper::compiler::Node::SetProperty" , "selectors" : { "Node" : 3 , "getValue()" : 5 , "setValue(JspAttribute)" : 1}},{ "className" : "org::apache::tomcat::util::net::AprEndpoint::SocketEventProcessor" , "selectors" : { "SocketEventProcessor(long,SocketStatus)" : 1}},{ "className" : "org::apache::catalina::Session" , "selectors" : { "access()" : 6 , "addSessionListener(SessionListener)" : 1 , "endAccess()" : 5 , "expire()" : 6 , "getAuthType()" : 2 , "getCreationTime()" : 9 , "getId()" : 8 , "getIdInternal()" : 19 , "getLastAccessedTime()" : 6 , "getManager()" : 7 , "getMaxInactiveInterval()" : 6 , "getNote(String)" : 9 , "getPrincipal()" : 4 , "getSession()" : 12 , "getThisAccessedTime()" : 6 , "getThisAccessedTimeInternal()" : 2 , "isValid()" : 16 , "recycle()" : 3 , "removeNote(String)" : 6 , "setAuthType(String)" : 1 , "setCreationTime(long)" : 1 , "setId(String)" : 4 , "setManager(Manager)" : 2 , "setMaxInactiveInterval(int)" : 1 , "setNew(boolean)" : 1 , "setNote(String,Object)" : 7 , "setPrincipal(Principal)" : 1 , "setValid(boolean)" : 1}},{ "className" : "org::apache::tomcat::util::bcel::classfile::ArrayElementValue" , "selectors" : { "ArrayElementValue(int,ElementValue[],ConstantPool)" : 1 , "getElementValuesArray()" : 2}},{ "className" : "org::apache::catalina::tribes::demos::LoadTest" , "selectors" : { "LoadTest(ManagedChannel,boolean,int,boolean,long,int,boolean)" : 2 , "addSendStats(long)" : 1 , "endTest()" : 1 , "printArray(byte[])" : 2 , "printSendStats(long,int)" : 2 , "run()" : 1 , "startTest()" : 1 , "usage()" : 1}},{ "className" : "org::apache::catalina::tribes::tipis::ReplicatedMap" , "selectors" : { "ReplicatedMap(MapOwner,Channel,long,String,ClassLoader[])" : 1}},{ "className" : "org::apache::coyote::http11::filters::VoidInputFilter" , "selectors" : { "VoidInputFilter()" : 1}},{ "className" : "org::apache::juli::AsyncFileHandler::LogEntry" , "selectors" : { "LogEntry(LogRecord,AsyncFileHandler)" : 1 , "flush()" : 1}},{ "className" : "org::apache::jasper::compiler::Node" , "selectors" : { "Node(Mark,Node)" : 2 , "Node(String,String,Attributes,Attributes,Attributes,Mark,Node)" : 26 , "Node(String,String,Attributes,Mark,Node)" : 1 , "Node(String,String,String,Mark,Node)" : 4 , "accept(Visitor)" : 2 , "addToParent(Node)" : 4 , "getAttributeValue(String)" : 38 , "getAttributes()" : 32 , "getBeginJavaLine()" : 7 , "getBody()" : 37 , "getEndJavaLine()" : 3 , "getInnerClassName()" : 2 , "getLocalName()" : 10 , "getNamedAttributeNode(String)" : 3 , "getNamedAttributeNodes()" : 6 , "getNonTaglibXmlnsAttributes()" : 3 , "getParent()" : 6 , "getQName()" : 20 , "getRoot()" : 16 , "getStart()" : 24 , "getTaglibAttributes()" : 3 , "getText()" : 16 , "getTextAttribute(String)" : 46 , "setAttributes(Attributes)" : 1 , "setBeginJavaLine(int)" : 21 , "setBody(Nodes)" : 1 , "setEndJavaLine(int)" : 22 , "setInnerClassName(String)" : 1}},{ "className" : "org::apache::el::parser::AstFalse" , "selectors" : { "AstFalse(int)" : 1}},{ "className" : "org::apache::jasper::compiler::JavacErrorDetail" , "selectors" : { "JavacErrorDetail(String,int,String,int,StringBuilder,JspCompilationContext)" : 2 , "JavacErrorDetail(String,int,StringBuilder)" : 2 , "getErrorMessage()" : 2 , "getJavaLineNumber()" : 1 , "getJspBeginLineNumber()" : 3 , "getJspExtract()" : 2 , "getJspFileName()" : 3 , "readFile(InputStream)" : 2}},{ "className" : "org::apache::jasper::compiler::Mark::IncludeState" , "selectors" : { "IncludeState(int,int,int,int,String,String,String,char[])" : 1}},{ "className" : "org::apache::catalina::tribes::test::TribesTestSuite" , "selectors" : { "suite()::TestSuite" : 1}},{ "className" : "org::apache::tomcat::util::http::fileupload::FileDeleteStrategy::ForceFileDeleteStrategy" , "selectors" : { "ForceFileDeleteStrategy()" : 1}},{ "className" : "org::apache::jasper::compiler::tagplugin::TagPluginContext" , "selectors" : { "dontUseTagPlugin()" : 4 , "generateAttribute(String)" : 37 , "generateBody()" : 13 , "generateDeclaration(String,String)" : 10 , "generateImport(String)" : 1 , "generateJavaSource(String)" : 425 , "getConstantAttribute(String)" : 12 , "getParentContext()" : 2 , "getPluginAttribute(String)" : 1 , "getTemporaryVariableName()" : 66 , "isAttributeSpecified(String)" : 30 , "setPluginAttribute(String,Object)" : 1}},{ "className" : "org::apache::jasper::EmbeddedServletOptions" , "selectors" : { "EmbeddedServletOptions(ServletConfig,ServletContext)" : 2 , "setProperty(String,String)" : 1}},{ "className" : "org::apache::catalina::session::StandardSessionContext" , "selectors" : { "StandardSessionContext()" : 1}},{ "className" : "org::apache::catalina::realm::JDBCRealm" , "selectors" : { "JDBCRealm()" : 1 , "authenticate(Connection,String,String)" : 1 , "close(Connection)" : 4 , "credentials(Connection,String)" : 1 , "getPassword(String)" : 2 , "getRoles(String)" : 2 , "open()" : 4 , "roles(Connection,String)" : 1 , "setConnectionName(String)" : 1 , "setConnectionPassword(String)" : 1 , "setConnectionURL(String)" : 1 , "setDriverName(String)" : 1}},{ "className" : "org::apache::el::parser::AstInteger" , "selectors" : { "AstInteger(int)" : 1 , "getInteger()" : 2}},{ "className" : "org::apache::tomcat::util::bcel::classfile::ConstantInterfaceMethodref" , "selectors" : { "ConstantInterfaceMethodref(DataInputStream)" : 1}},{ "className" : "org::apache::tomcat::util::net::JIoEndpoint" , "selectors" : { "JIoEndpoint()" : 2 , "destroy()" : 1 , "init()" : 2 , "pause()" : 1 , "processSocket(Socket)" : 1 , "processSocket(SocketWrapper<Socket>,SocketStatus)" : 5 , "resume()" : 1 , "setHandler(Handler)" : 2 , "setServerSocketFactory(ServerSocketFactory)" : 2 , "setSocketOptions(Socket)" : 1 , "start()" : 1 , "stop()" : 1}},{ "className" : "org::apache::jasper::compiler::Collector::CollectVisitor" , "selectors" : { "CollectVisitor()" : 1 , "checkSeen(ChildInfo,Node)" : 3 , "updatePageInfo(PageInfo)" : 1}},{ "className" : "javax::servlet::jsp::tagext::TagVariableInfo" , "selectors" : { "TagVariableInfo(String,String,String,boolean,int)" : 2 , "getClassName()" : 3 , "getDeclare()" : 2 , "getNameFromAttribute()" : 15 , "getNameGiven()" : 10 , "getScope()" : 5}},{ "className" : "org::apache::jasper::compiler::PageDataImpl" , "selectors" : { "PageDataImpl(Nodes,Compiler)" : 1}},{ "className" : "org::apache::jasper::el::ELResolverImpl" , "selectors" : { "ELResolverImpl(VariableResolver)" : 1 , "getDefaultResolver()" : 8}},{ "className" : "org::apache::jasper::compiler::Dumper::DumpVisitor" , "selectors" : { "DumpVisitor()" : 2 , "dumpBody(Node)" : 12 , "getAttributes(Attributes)" : 1 , "printAttributes(String,Attributes,String)" : 15 , "printIndent()" : 2 , "printString(String)" : 13 , "printString(String,String,String)" : 5}},{ "className" : "org::apache::catalina::tribes::transport::nio::NioReplicationTask" , "selectors" : { "NioReplicationTask(ListenCallback,NioReceiver)" : 1 , "cancelKey(SelectionKey)" : 3 , "drainChannel(SelectionKey,ObjectReader)" : 1 , "getRxBufSize()" : 1 , "registerForRead(SelectionKey,ObjectReader)" : 1 , "remoteEof(SelectionKey)" : 2 , "sendAck(SelectionKey,WritableByteChannel,byte[],SocketAddress)" : 4 , "serviceChannel(SelectionKey)" : 1 , "setRxBufSize(int)" : 1}},{ "className" : "org::apache::catalina::startup::ClusterRuleSetFactory" , "selectors" : { "getClusterRuleSet(String)" : 2 , "loadRuleSet(String,String,ClassLoader)" : 4}},{ "className" : "org::apache::tomcat::util::buf::ByteChunk" , "selectors" : { "ByteChunk()" : 30 , "ByteChunk(int)" : 7 , "allocate(int,int)" : 6 , "append(ByteChunk)" : 2 , "append(byte)" : 2 , "append(byte[],int,int)" : 12 , "convertToBytes(String)" : 21 , "equals(ByteChunk)" : 1 , "equals(CharChunk)" : 2 , "equals(String)" : 1 , "equals(byte[],int,int)" : 1 , "equals(char[],int,int)" : 1 , "equalsIgnoreCase(String)" : 1 , "findByte(byte[],int,int,byte)" : 6 , "findBytes(byte[],int,int,byte[])" : 7 , "findNotBytes(byte[],int,int,byte[])" : 3 , "flushBuffer()" : 7 , "getBuffer()" : 30 , "getBytes()" : 33 , "getEncoding()" : 2 , "getEnd()" : 12 , "getInt()" : 1 , "getLength()" : 80 , "getLimit()" : 5 , "getLong()" : 1 , "getOffset()" : 11 , "getStart()" : 43 , "hash()" : 1 , "hashBytes(byte[],int,int)" : 1 , "hashBytesIC(byte[],int,int)" : 1 , "indexOf(String,int,int,int)" : 15 , "indexOf(byte[],int,int,char)" : 12 , "indexOf(char,int)" : 15 , "isNull()" : 3 , "makeSpace(int)" : 2 , "recycle()" : 20 , "setByteInputChannel(ByteInputChannel)" : 1 , "setByteOutputChannel(ByteOutputChannel)" : 2 , "setBytes(byte[],int,int)" : 36 , "setEncoding(String)" : 2 , "setEnd(int)" : 9 , "setLimit(int)" : 5 , "setOffset(int)" : 6 , "startsWith(String)" : 1 , "startsWithIgnoreCase(String,int)" : 7 , "substract()" : 2 , "substract(byte[],int,int)" : 3 , "toString()" : 85 , "toStringInternal()" : 2}},{ "className" : "org::apache::catalina::startup::TaglibRule" , "selectors" : { "TaglibRule(TaglibUriRule)" : 1}},{ "className" : "org::apache::catalina::tribes::demos::LoadTest::SystemExit" , "selectors" : { "SystemExit(long)" : 1}},{ "className" : "org::apache::tomcat::util::digester::ObjectParamRule" , "selectors" : { "ObjectParamRule(int,Object)" : 1 , "ObjectParamRule(int,String,Object)" : 1}},{ "className" : "org::apache::tomcat::util::buf::CharChunk" , "selectors" : { "CharChunk()" : 4 , "CharChunk(int)" : 3 , "allocate(int,int)" : 6 , "append(CharChunk)" : 1 , "append(String)" : 1 , "append(String,int,int)" : 12 , "append(char)" : 4 , "append(char[],int,int)" : 3 , "equals(CharChunk)" : 1 , "equals(String)" : 3 , "equals(char[],int,int)" : 1 , "equalsIgnoreCase(String)" : 2 , "flushBuffer()" : 5 , "getBuffer()" : 36 , "getChars()" : 7 , "getEnd()" : 18 , "getLength()" : 30 , "getLimit()" : 1 , "getOffset()" : 9 , "getStart()" : 23 , "hash()" : 1 , "indexOf(String,int,int,int)" : 2 , "indexOf(char)" : 1 , "indexOf(char,int)" : 2 , "indexOf(char[],int,int,char)" : 3 , "isNull()" : 2 , "makeSpace(int)" : 4 , "min(int,int)" : 2 , "recycle()" : 9 , "setCharInputChannel(CharInputChannel)" : 2 , "setCharOutputChannel(CharOutputChannel)" : 2 , "setChars(char[],int,int)" : 4 , "setEnd(int)" : 19 , "setLimit(int)" : 8 , "setOffset(int)" : 19 , "setOptimizedWrite(boolean)" : 2 , "startsWith(String)" : 3 , "startsWithIgnoreCase(String,int)" : 3 , "substract()" : 1 , "substract(char[],int,int)" : 1 , "toString()" : 7 , "toStringInternal()" : 2}},{ "className" : "org::apache::tomcat::util::http::fileupload::FileUploadException" , "selectors" : { "FileUploadException(String)" : 5 , "FileUploadException(String,Throwable)" : 3}},{ "className" : "org::apache::catalina::tribes::demos::MapDemo" , "selectors" : { "MapDemo(Channel,String)" : 1 , "messageReceived(Serializable,Member)" : 1}},{ "className" : "org::apache::catalina::tribes::transport::bio::MultipointBioSender" , "selectors" : { "MultipointBioSender()" : 1 , "close()" : 1 , "disconnect()" : 1 , "setupForSend(Member[])" : 1}},{ "className" : "async::Stockticker::TickListener" , "selectors" : { "tick(Stock)" : 1}},{ "className" : "org::apache::catalina::tribes::transport::AbstractSender" , "selectors" : { "AbstractSender()" : 1 , "disconnect()" : 1 , "getAddress()" : 12 , "getAttempt()" : 5 , "getDestination()" : 16 , "getDirectBuffer()" : 2 , "getMaxRetryAttempts()" : 2 , "getOoBInline()" : 2 , "getPort()" : 8 , "getRequestCount()" : 3 , "getRxBufSize()" : 3 , "getSoKeepAlive()" : 2 , "getSoLingerOn()" : 4 , "getSoLingerTime()" : 3 , "getSoReuseAddress()" : 3 , "getSoTrafficClass()" : 3 , "getTcpNoDelay()" : 2 , "getThrowOnFailedAck()" : 2 , "getTimeout()" : 9 , "getTxBufSize()" : 3 , "getUdpPort()" : 1 , "getUdpRxBufSize()" : 1 , "getUdpTxBufSize()" : 1 , "isConnected()" : 12 , "isUdpBased()" : 6 , "keepalive()" : 5 , "setAttempt(int)" : 4 , "setConnectTime(long)" : 3 , "setConnected(boolean)" : 11 , "setDestination(Member)" : 5 , "setDirectBuffer(boolean)" : 4 , "setRequestCount(int)" : 7 , "setTimeout(long)" : 4 , "setTxBufSize(int)" : 1 , "setUdpBased(boolean)" : 3 , "transferProperties(AbstractSender,AbstractSender)" : 4}},{ "className" : "org::apache::naming::resources::WARDirContext" , "selectors" : { "WARDirContext()" : 2 , "WARDirContext(ZipFile,Entry)" : 3 , "getAttributes(Name,String[])" : 1 , "getEscapedJndiName(String)" : 7 , "list(Entry)" : 4 , "list(Name)" : 1 , "loadEntries()" : 2 , "normalize(ZipEntry)" : 1 , "treeLookup(Name)" : 7}},{ "className" : "javax::servlet::jsp::tagext::Tag" , "selectors" : { "getParent()" : 2 , "release()" : 4}},{ "className" : "org::apache::tomcat::util::http::fileupload::FileCleaningTracker::Tracker" , "selectors" : { "Tracker(String,FileDeleteStrategy,Object,ReferenceQueue)" : 1 , "delete()" : 1}},{ "className" : "javax::rmi::ssl::SslRMIClientSocketFactory" , "selectors" : { "SslRMIClientSocketFactory()" : 1}},{ "className" : "org::apache::tomcat::util::digester::RuleSet" , "selectors" : { "addRuleInstances(Digester)" : 1 , "getNamespaceURI()" : 1}},{ "className" : "org::apache::naming::NamingContextBindingsEnumeration" , "selectors" : { "NamingContextBindingsEnumeration(Iterator<NamingEntry>,Context)" : 4 , "nextElementInternal()" : 2}},{ "className" : "org::apache::tomcat::util::bcel::classfile::StackMapEntry" , "selectors" : { "StackMapEntry(DataInputStream,ConstantPool)" : 1 , "StackMapEntry(int,int,StackMapType[],int,StackMapType[])" : 1 , "copy()" : 1 , "dump(DataOutputStream)" : 1 , "toString()" : 1}},{ "className" : "org::apache::tomcat::util::modeler::modules::MbeansDescriptorsIntrospectionSource" , "selectors" : { "createManagedBean(Registry,String,Class<?>,String)" : 1 , "execute()" : 1 , "initMethods(Class<?>,Method[],Hashtable<String,Method>,Hashtable<String,Method>,Hashtable<String,Method>,Hashtable<String,Method>)" : 1 , "isBeanCompatible(Class<?>)" : 2 , "setLocation(String)" : 1 , "setRegistry(Registry)" : 1 , "setSource(Object)" : 1 , "setType(String)" : 1 , "supportedType(Class<?>)" : 3 , "unCapitalize(String)" : 3}},{ "className" : "org::apache::coyote::http11::Http11AprProtocol" , "selectors" : { "getAddress()" : 2 , "getDomain()" : 3 , "getName()" : 10 , "setMaxKeepAliveRequests(int)" : 1 , "setSecure(boolean)" : 1 , "setSoLinger(int)" : 1 , "setSoTimeout(int)" : 1 , "setTcpNoDelay(boolean)" : 1}},{ "className" : "org::apache::catalina::core::StandardEngineValve" , "selectors" : { "StandardEngineValve()" : 1}},{ "className" : "javax::servlet::ServletContextEvent" , "selectors" : { "ServletContextEvent(ServletContext)" : 3 , "getServletContext()" : 2}},{ "className" : "org::apache::catalina::valves::Benchmarks::GetDateBenchmarkTest_LocalStruct::Struct" , "selectors" : { "Struct()" : 1}},{ "className" : "org::apache::catalina::util::ParameterMap" , "selectors" : { "clear()" : 1 , "isLocked()" : 1 , "put(K,V)" : 2 , "putAll(Map<? extends K,? extends V>)" : 1 , "setLocked(boolean)" : 4}},{ "className" : "org::apache::tomcat::util::http::fileupload::FileUploadBase::FileUploadIOException" , "selectors" : { "FileUploadIOException(FileUploadException)" : 3 , "getCause()" : 2}},{ "className" : "org::apache::coyote::http11::InputFilter" , "selectors" : { "available()" : 2 , "doRead(ByteChunk,Request)" : 2 , "end()" : 1 , "getEncodingName()" : 1 , "recycle()" : 2 , "setBuffer(InputBuffer)" : 2 , "setRequest(Request)" : 4}},{ "className" : "org::apache::catalina::loader::WebappClassLoader::PrivilegedGetClassLoader" , "selectors" : { "PrivilegedGetClassLoader(Class<?>)" : 1}},{ "className" : "org::apache::catalina::ssi::SSIStopProcessingException" , "selectors" : { "SSIStopProcessingException()" : 5}},{ "className" : "org::apache::jasper::compiler::JspConfig::JspProperty" , "selectors" : { "JspProperty(String,String,String,String,Vector<String>,Vector<String>,String,String,String,String,String)" : 3 , "getBuffer()" : 4 , "getDefaultContentType()" : 4 , "getIncludeCoda()" : 4 , "getIncludePrelude()" : 4 , "getPageEncoding()" : 3 , "isDeferedSyntaxAllowedAsLiteral()" : 4 , "isELIgnored()" : 4 , "isErrorOnUndeclaredNamespace()" : 4 , "isScriptingInvalid()" : 4 , "isTrimDirectiveWhitespaces()" : 4 , "isXml()" : 4}},{ "className" : "org::apache::catalina::connector::ResponseFacade::DateHeaderPrivilegedAction" , "selectors" : { "DateHeaderPrivilegedAction(String,long,boolean)" : 2}},{ "className" : "org::apache::tomcat::util::http::fileupload::ParameterParser" , "selectors" : { "ParameterParser()" : 6 , "getToken(boolean)" : 2 , "hasChar()" : 5 , "isOneOf(char,char[])" : 2 , "parse(String,char)" : 6 , "parse(String,char[])" : 1 , "parse(char[],char)" : 1 , "parse(char[],int,int,char)" : 1 , "parseQuotedToken(char[])" : 1 , "parseToken(char[])" : 1 , "setLowerCaseNames(boolean)" : 6}},{ "className" : "chat::ChatServlet" , "selectors" : { "begin(CometEvent,HttpServletRequest,HttpServletResponse)" : 1 , "end(CometEvent,HttpServletRequest,HttpServletResponse)" : 2 , "error(CometEvent,HttpServletRequest,HttpServletResponse)" : 1 , "filter(String)" : 1 , "read(CometEvent,HttpServletRequest,HttpServletResponse)" : 1}},{ "className" : "javax::servlet::ServletOutputStream" , "selectors" : { "ServletOutputStream()" : 2 , "print(String)" : 11 , "print(boolean)" : 2 , "print(char)" : 2 , "print(double)" : 2 , "print(float)" : 2 , "print(int)" : 2 , "print(long)" : 2 , "println()" : 11 , "println(String)" : 113 , "println(boolean)" : 1 , "println(char)" : 1 , "println(double)" : 1 , "println(float)" : 1 , "println(int)" : 1 , "println(long)" : 1}},{ "className" : "org::apache::catalina::core::StandardContextValve" , "selectors" : { "StandardContextValve()" : 1 , "notFound(HttpServletResponse)" : 3}},{ "className" : "org::apache::coyote::http11::filters::SavedRequestInputFilter" , "selectors" : { "SavedRequestInputFilter(ByteChunk)" : 3}},{ "className" : "org::apache::jasper::runtime::JspSourceDependent" , "selectors" : { "getDependants()" : 2}},{ "className" : "org::apache::jasper::compiler::Node::UseBean" , "selectors" : { "Node" : 3 , "getBeanName()" : 4 , "setBeanName(JspAttribute)" : 1}},{ "className" : "org::apache::el::lang::TestELSupport" , "selectors" : { "testIsSame(Object)" : 8}},{ "className" : "org::apache::juli::logging::Log" , "selectors" : { "debug(Object)" : 757 , "debug(Object,Throwable)" : 112 , "error(Object)" : 212 , "error(Object,Throwable)" : 466 , "fatal(Object)" : 4 , "fatal(Object,Throwable)" : 5 , "info(Object)" : 173 , "info(Object,Throwable)" : 8 , "isDebugEnabled()" : 784 , "isErrorEnabled()" : 5 , "isInfoEnabled()" : 91 , "isTraceEnabled()" : 123 , "isWarnEnabled()" : 41 , "trace(Object)" : 119 , "trace(Object,Throwable)" : 6 , "warn(Object)" : 141 , "warn(Object,Throwable)" : 132}},{ "className" : "org::apache::tomcat::util::net::NioBlockingSelector::KeyReference" , "selectors" : { "KeyReference()" : 2}},{ "className" : "org::apache::el::parser::NodeVisitor" , "selectors" : { "visit(Node)" : 1}},{ "className" : "org::apache::catalina::filters::AddDefaultCharsetFilter::ResponseWrapper" , "selectors" : { "ResponseWrapper(HttpServletResponse,String)" : 1}},{ "className" : "org::apache::catalina::valves::AccessLogValve::LocalPortElement" , "selectors" : { "LocalPortElement()" : 1}},{ "className" : "org::apache::catalina::tribes::membership::McastServiceImpl::ReceiverThread" , "selectors" : { "ReceiverThread()" : 1}},{ "className" : "org::apache::catalina::valves::Benchmarks::TimeDateElementBenchmarkTest_LocalStruct_SBuilder" , "selectors" : { "TimeDateElementBenchmarkTest_LocalStruct_SBuilder()" : 1 , "getDateLocal()" : 1 , "printDate()" : 1}},{ "className" : "org::apache::tomcat::util::threads::TaskThreadFactory" , "selectors" : { "TaskThreadFactory(String,boolean,int)" : 2}},{ "className" : "org::apache::naming::resources::BaseDirContext::AliasResult" , "selectors" : { "AliasResult()" : 1}},{ "className" : "org::apache::catalina::deploy::WebXml" , "selectors" : { "WebXml()" : 28 , "addAbsoluteOrdering(String)" : 22 , "addAfterOrdering(String)" : 2 , "addAfterOrderingOthers()" : 4 , "addBeforeOrdering(String)" : 4 , "addBeforeOrderingOthers()" : 5 , "addFilter(FilterDef)" : 2 , "addFilterMapping(FilterMap)" : 3 , "addJspPropertyGroup(JspPropertyGroup)" : 1 , "addListener(String)" : 2 , "addSecurityConstraint(SecurityConstraint)" : 1 , "addSecurityRole(String)" : 1 , "addServlet(ServletDef)" : 3 , "addServletMapping(String,String)" : 5 , "addWelcomeFile(String)" : 1 , "appendElement(StringBuilder,String,String,Object)" : 15 , "appendElement(StringBuilder,String,String,String)" : 122 , "configureContext(Context)" : 2 , "escapeXml(String)" : 1 , "getAbsoluteOrdering()" : 2 , "getAfterOrdering()" : 3 , "getBeforeOrdering()" : 3 , "getContextParams()" : 3 , "getDisplayName()" : 3 , "getEjbLocalRefs()" : 3 , "getEjbRefs()" : 3 , "getEnvEntries()" : 3 , "getErrorPages()" : 3 , "getFilterMappings()" : 4 , "getFilters()" : 9 , "getJspPropertyGroups()" : 1 , "getListeners()" : 1 , "getLocalEncodingMappings()" : 3 , "getLoginConfig()" : 1 , "getMajorVersion()" : 14 , "getMessageDestinationRefs()" : 3 , "getMessageDestinations()" : 3 , "getMimeMappings()" : 3 , "getMinorVersion()" : 14 , "getName()" : 23 , "getPublicId()" : 1 , "getResourceEnvRefs()" : 3 , "getResourceRefs()" : 3 , "getSecurityConstraints()" : 1 , "getSecurityRoles()" : 1 , "getServiceRefs()" : 3 , "getServletMappings()" : 6 , "getServlets()" : 12 , "getSessionConfig()" : 49 , "getTaglibs()" : 3 , "getURL()" : 21 , "getVersion()" : 9 , "getWelcomeFiles()" : 1 , "isDistributable()" : 2 , "isMetadataComplete()" : 3 , "merge(Set<WebXml>)" : 2 , "mergeFilter(FilterDef,FilterDef,boolean)" : 2 , "mergeMap(Map<String,T>,Map<String,T>,Map<String,T>,WebXml,String)" : 5 , "mergeMultipartDef(MultipartDef,MultipartDef,boolean)" : 1 , "mergeResourceMap(Map<String,T>,Map<String,T>,Map<String,T>,Map<String,Boolean>,WebXml)" : 8 , "mergeServlet(ServletDef,ServletDef,boolean)" : 2 , "orderWebFragments(WebXml,Map<String,WebXml>)" : 11 , "setDisplayName(String)" : 1 , "setDistributable(boolean)" : 2 , "setMetadataComplete(boolean)" : 2 , "setName(String)" : 8 , "setPublicId(String)" : 5 , "setReplaceWelcomeFiles(boolean)" : 2 , "setURL(URL)" : 2 , "setVersion(String)" : 11 , "toXml()" : 1}},{ "className" : "org::apache::jasper::runtime::JspFactoryImpl::PrivilegedReleasePageContext" , "selectors" : { "PrivilegedReleasePageContext(JspFactoryImpl,PageContext)" : 1}},{ "className" : "org::apache::catalina::valves::JDBCAccessLogValve" , "selectors" : { "close()" : 2 , "getCurrentTimeMillis()" : 1 , "log(Request,Response,long)" : 1 , "open()" : 2}},{ "className" : "org::apache::catalina::core::StandardHost" , "selectors" : { "StandardHost()" : 5 , "addAlias(String)" : 1 , "findReloadedContextMemoryLeaks()" : 1 , "getName()" : 1 , "getWorkDir()" : 1 , "isCopyXML()" : 1 , "isDeployXML()" : 1 , "isUnpackWARs()" : 2 , "setAppBase(String)" : 3 , "setAutoDeploy(boolean)" : 3 , "setDeployOnStartup(boolean)" : 2 , "setDeployXML(boolean)" : 2 , "setName(String)" : 4 , "setUnpackWARs(boolean)" : 2}},{ "className" : "org::apache::tomcat::util::net::NioEndpoint::SocketProcessor" , "selectors" : { "SocketProcessor(NioChannel,SocketStatus)" : 1 , "reset(NioChannel,SocketStatus)" : 3 , "run()" : 1}},{ "className" : "org::apache::tomcat::util::modeler::ManagedBean" , "selectors" : { "ManagedBean()" : 3 , "addAttribute(AttributeInfo)" : 4 , "addNotification(NotificationInfo)" : 1 , "addOperation(OperationInfo)" : 2 , "createMBean(Object)" : 13 , "getAttributes()" : 1 , "getClassName()" : 6 , "getDescription()" : 1 , "getDomain()" : 37 , "getGetter(String,BaseModelMBean,Object)" : 1 , "getGroup()" : 2 , "getInvoke(String,Object[],String[],BaseModelMBean,Object)" : 1 , "getMBeanInfo()" : 1 , "getName()" : 4 , "getNotifications()" : 1 , "getOperations()" : 1 , "getSetter(String,BaseModelMBean,Object)" : 1 , "getType()" : 3 , "setName(String)" : 3}},{ "className" : "org::apache::catalina::users::AbstractGroup" , "selectors" : { "AbstractGroup()" : 1 , "getGroupname()" : 2 , "setDescription(String)" : 1 , "setGroupname(String)" : 1}},{ "className" : "org::apache::catalina::tribes::transport::ReceiverBase" , "selectors" : { "bind(ServerSocket,int,int)" : 3 , "bindUdp(DatagramSocket,int,int)" : 2 , "doListen()" : 6 , "getAddress()" : 2 , "getAutoBind()" : 3 , "getBind()" : 6 , "getDirect()" : 1 , "getExecutor()" : 2 , "getMaxThreads()" : 3 , "getMinThreads()" : 2 , "getOoBInline()" : 2 , "getPort()" : 3 , "getRxBufSize()" : 3 , "getSelectorTimeout()" : 3 , "getSoKeepAlive()" : 2 , "getSoLingerOn()" : 2 , "getSoLingerTime()" : 2 , "getSoReuseAddress()" : 3 , "getSoTrafficClass()" : 3 , "getTaskPool()" : 3 , "getTcpNoDelay()" : 2 , "getTimeout()" : 5 , "getTxBufSize()" : 2 , "getUdpPort()" : 2 , "getUdpRxBufSize()" : 1 , "getUdpTxBufSize()" : 1 , "getUseBufferPool()" : 2 , "getWorkerThreadOptions()" : 2 , "isListening()" : 2 , "setAddress(String)" : 3 , "setAutoBind(int)" : 2 , "setHost(String)" : 1 , "setListen(boolean)" : 4 , "setMaxThreads(int)" : 3 , "setMessageListener(MessageListener)" : 1 , "setMinThreads(int)" : 2 , "setPool(RxTaskPool)" : 2 , "setPort(int)" : 4 , "setRxBufSize(int)" : 1 , "setSelectorTimeout(long)" : 2 , "setTxBufSize(int)" : 1 , "setUdpPort(int)" : 6 , "setUdpRxBufSize(int)" : 6 , "setUdpTxBufSize(int)" : 6 , "start()" : 2 , "stop()" : 2}},{ "className" : "org::apache::catalina::tribes::group::interceptors::FragmentationInterceptor::FragCollection" , "selectors" : { "FragCollection(ChannelMessage)" : 1 , "addMessage(ChannelMessage)" : 1 , "assemble()" : 1 , "complete()" : 2}},{ "className" : "org::apache::el::parser::AstEmpty" , "selectors" : { "AstEmpty(int)" : 1}},{ "className" : "org::apache::tomcat::util::buf::StringCache" , "selectors" : { "StringCache()" : 1 , "compare(ByteChunk,byte[])" : 4 , "compare(CharChunk,char[])" : 4 , "find(ByteChunk)" : 1 , "find(CharChunk)" : 1 , "findClosest(ByteChunk,ByteEntry[],int)" : 2 , "findClosest(CharChunk,CharEntry[],int)" : 2 , "toString(ByteChunk)" : 1 , "toString(CharChunk)" : 1}},{ "className" : "org::apache::catalina::loader::TestWebappClassLoaderMemoryLeak::TaskServlet" , "selectors" : { "TaskServlet()" : 1}},{ "className" : "javax::servlet::jsp::el::ImplicitObjectELResolver::ScopeMap" , "selectors" : { "getAttribute(String)" : 2 , "getAttributeNames()" : 3 , "removeAttribute(String)" : 3 , "setAttribute(String,Object)" : 2}},{ "className" : "org::apache::jasper::compiler::ErrorDispatcher::ErrorVisitor" , "selectors" : { "ErrorVisitor(int)" : 1 , "getJspSourceNode()" : 3}},{ "className" : "org::apache::catalina::ha::ClusterManager" , "selectors" : { "cloneFromTemplate()" : 1 , "doDomainReplication()" : 2 , "getInvalidatedSessions()" : 1 , "getName()" : 8 , "getReplicationStream(byte[],int,int)" : 1 , "isNotifyListenersOnReplication()" : 1 , "messageDataReceived(ClusterMessage)" : 2 , "requestCompleted(String)" : 1 , "setCluster(CatalinaCluster)" : 3 , "setName(String)" : 2}},{ "className" : "org::apache::tomcat::util::bcel::classfile::ConstantFieldref" , "selectors" : { "ConstantFieldref(DataInputStream)" : 1}},{ "className" : "org::apache::tomcat::util::http::fileupload::MultipartStream" , "selectors" : { "MultipartStream(InputStream,byte[],ProgressNotifier)" : 1 , "MultipartStream(InputStream,byte[],int,ProgressNotifier)" : 1 , "arrayequals(byte[],byte[],int)" : 2 , "discardBodyData()" : 2 , "findByte(byte,int)" : 1 , "findSeparator()" : 1 , "newInputStream()" : 2 , "readBodyData(OutputStream)" : 1 , "readBoundary()" : 2 , "readByte()" : 3 , "readHeaders()" : 1 , "setBoundary(byte[])" : 2 , "setHeaderEncoding(String)" : 1 , "skipPreamble()" : 1}},{ "className" : "org::apache::tomcat::jni::SSLSocket" , "selectors" : { "attach(long,long)" : 1 , "getInfoB(long,int)" : 4 , "getInfoI(long,int)" : 3 , "getInfoS(long,int)" : 2 , "handshake(long)" : 1 , "renegotiate(long)" : 1 , "setVerify(long,int,int)" : 1}},{ "className" : "org::apache::tomcat::util::modeler::modules::MbeansDescriptorsDOMSource" , "selectors" : { "execute()" : 1 , "setLocation(String)" : 1 , "setRegistry(Registry)" : 1 , "setSource(Object)" : 1 , "setType(String)" : 1}},{ "className" : "org::apache::catalina::users::MemoryGroup" , "selectors" : { "MemoryGroup(MemoryUserDatabase,String,String)" : 1}},{ "className" : "org::apache::tomcat::util::bcel::classfile::InnerClass" , "selectors" : { "InnerClass(DataInput)" : 1 , "InnerClass(int,int,int,int)" : 1 , "copy()" : 1 , "dump(DataOutputStream)" : 1 , "toString(ConstantPool)" : 1}},{ "className" : "org::apache::catalina::util::IOTools" , "selectors" : { "flow(InputStream,OutputStream)" : 3 , "flow(InputStream,OutputStream,byte[])" : 1 , "flow(Reader,Writer)" : 1 , "flow(Reader,Writer,char[])" : 3}},{ "className" : "javax::management::remote::JMXConnectorServerMBean" , "selectors" : { "start()" : 13 , "stop()" : 11}},{ "className" : "org::apache::catalina::tribes::ErrorHandler" , "selectors" : { "handleCompletion(UniqueId)" : 1 , "handleError(ChannelException,UniqueId)" : 1}},{ "className" : "org::apache::catalina::deploy::ServletDef" , "selectors" : { "ServletDef()" : 4 , "addInitParameter(String,String)" : 5 , "addSecurityRoleRef(SecurityRoleRef)" : 1 , "getAsyncSupported()" : 12 , "getDescription()" : 4 , "getDisplayName()" : 4 , "getEnabled()" : 11 , "getJspFile()" : 12 , "getLargeIcon()" : 3 , "getLoadOnStartup()" : 12 , "getMultipartDef()" : 7 , "getParameterMap()" : 11 , "getRunAs()" : 3 , "getSecurityRoleRefs()" : 3 , "getServletClass()" : 10 , "getServletName()" : 2 , "getSmallIcon()" : 3 , "setAsyncSupported(String)" : 3 , "setDescription(String)" : 2 , "setDisplayName(String)" : 2 , "setEnabled(String)" : 1 , "setJspFile(String)" : 1 , "setLargeIcon(String)" : 2 , "setLoadOnStartup(String)" : 3 , "setMultipartDef(MultipartDef)" : 1 , "setServletClass(String)" : 4 , "setServletName(String)" : 3 , "setSmallIcon(String)" : 2}},{ "className" : "java::io::FileInputStream" , "selectors" : { "FileInputStream(File)" : 1242 , "FileInputStream(FileDescriptor)" : 7 , "FileInputStream(String)" : 451 , "available()" : 25 , "close()" : 401 , "getChannel()" : 46 , "getClassName(???)" : 1 , "getFD()" : 2 , "java" : 21 , "parseXMLDocument(???)" : 1 , "read()" : 61 , "read(???)" : 3 , "read(byte[])" : 102 , "read(byte[],int,int)" : 35 , "skip(long)" : 20}},{ "className" : "javax::naming::LinkRef" , "selectors" : { "LinkRef(Name)" : 2 , "LinkRef(String)" : 25 , "getLinkName()" : 6}},{ "className" : "javax::servlet::http::HttpSessionListener" , "selectors" : { "sessionCreated(HttpSessionEvent)" : 1 , "sessionDestroyed(HttpSessionEvent)" : 1}},{ "className" : "org::apache::catalina::tribes::test::membership::TestMemberSerialization" , "selectors" : { "compareMembers(MemberImpl,MemberImpl)" : 2}},{ "className" : "org::apache::catalina::tribes::group::interceptors::MessageDispatchInterceptor" , "selectors" : { "addAndGetCurrentSize(long)" : 2 , "addToQueue(ChannelMessage,Member[],InterceptorPayload)" : 1 , "getCurrentSize()" : 2 , "removeFromQueue()" : 1 , "sendAsyncData(LinkObject)" : 2 , "setAndGetCurrentSize(long)" : 1 , "setMaxQueueSize(long)" : 1 , "setOptionFlag(int)" : 1 , "startQueue()" : 1 , "stopQueue()" : 1}},{ "className" : "org::apache::catalina::ha::backend::MultiCastSender" , "selectors" : { "MultiCastSender()" : 1}},{ "className" : "org::apache::coyote::http11::InternalInputBuffer" , "selectors" : { "InternalInputBuffer(Request,int)" : 2 , "fill()" : 12 , "fill(boolean)" : 1 , "parseHeader()" : 1 , "parseHeaders()" : 1 , "parseRequestLine(boolean)" : 1}},{ "className" : "org::apache::catalina::util::Enumerator" , "selectors" : { "Enumerator(Iterator<T>)" : 2 , "Enumerator(Iterator<T>,boolean)" : 2 , "Enumerator(Map<?,T>)" : 2}},{ "className" : "org::apache::catalina::users::MemoryRoleCreationFactory" , "selectors" : { "MemoryRoleCreationFactory(MemoryUserDatabase)" : 1}},{ "className" : "org::apache::tomcat::util::net::URL" , "selectors" : { "URL(String)" : 1 , "URL(String,String,int,String)" : 1 , "URL(URL,String)" : 1 , "compare(String,String)" : 4 , "getAuthority()" : 1 , "getFile()" : 3 , "getHost()" : 3 , "getPath()" : 2 , "getPort()" : 3 , "getProtocol()" : 5 , "getRef()" : 1 , "getUserInfo()" : 1 , "isSchemeChar(char)" : 3 , "normalize()" : 1 , "parse(String,int,int)" : 1 , "sameFile(URL)" : 1}},{ "className" : "org::apache::catalina::core::DummyResponse" , "selectors" : { "DummyResponse()" : 1}},{ "className" : "org::apache::naming::NamingContextEnumeration" , "selectors" : { "NamingContextEnumeration(Iterator<NamingEntry>)" : 4 , "nextElement()" : 1}},{ "className" : "org::apache::tomcat::util::net::SecureNioChannel" , "selectors" : { "SecureNioChannel(SocketChannel,SSLEngine,ApplicationBufferHandler,NioSelectorPool)" : 1 , "close()" : 1 , "flush(ByteBuffer)" : 9 , "getEmptyBuf()" : 1 , "getSslEngine()" : 1 , "handshakeUnwrap(boolean)" : 1 , "handshakeWrap(boolean)" : 1 , "reset()" : 2 , "reset(SSLEngine)" : 1 , "tasks()" : 6}},{ "className" : "org::apache::catalina::tribes::group::interceptors::OrderInterceptor" , "selectors" : { "OrderInterceptor()" : 2 , "getForwardExpired()" : 1 , "getInCounter(Member)" : 2 , "getOutCounter(Member)" : 1 , "incCounter(Member)" : 1 , "processIncoming(MessageOrder)" : 2 , "processLeftOvers(Member,boolean)" : 2 , "setExpire(long)" : 1 , "setMaxQueue(int)" : 1}},{ "className" : "org::apache::catalina::authenticator::FormAuthenticator" , "selectors" : { "forwardToErrorPage(Request,HttpServletResponse,LoginConfig)" : 1 , "forwardToLoginPage(Request,HttpServletResponse,LoginConfig)" : 1 , "matchRequest(Request)" : 2 , "restoreRequest(Request,Session)" : 1 , "saveRequest(Request,Session)" : 1 , "savedRequestURL(Session)" : 1}},{ "className" : "org::apache::catalina::connector::TestCoyoteAdapter::PathParamServlet" , "selectors" : { "PathParamServlet()" : 2}},{ "className" : "org::apache::tomcat::util::buf::UDecoder" , "selectors" : { "UDecoder()" : 2 , "convert(ByteChunk)" : 1 , "convert(ByteChunk,boolean)" : 2 , "convert(CharChunk,boolean)" : 2 , "convert(MessageBytes,boolean)" : 2 , "convert(String,boolean)" : 2 , "isHexDigit(int)" : 4 , "x2c(byte,byte)" : 1 , "x2c(char,char)" : 1}},{ "className" : "javax::servlet::jsp::tagext::TagAdapter" , "selectors" : { "TagAdapter(SimpleTag)" : 1 , "getAdaptee()" : 1}},{ "className" : "javax::el::ResourceBundleELResolver" , "selectors" : { "ResourceBundleELResolver()" : 3}},{ "className" : "chat::ChatServlet::MessageSender" , "selectors" : { "MessageSender()" : 1 , "send(String,String)" : 2 , "stop()" : 1}},{ "className" : "org::apache::catalina::tribes::demos::IntrospectionUtils::PropertySource" , "selectors" : { "getProperty(String)" : 1}},{ "className" : "org::apache::jasper::compiler::JspDocumentParser::EnableDTDValidationException" , "selectors" : { "EnableDTDValidationException(String,Locator)" : 1}},{ "className" : "org::apache::jasper::compiler::JspConfig::JspPropertyGroup" , "selectors" : { "JspPropertyGroup(String,String,JspProperty)" : 1 , "getExtension()" : 4 , "getJspProperty()" : 10 , "getPath()" : 4}},{ "className" : "org::apache::jasper::compiler::Node::JspElement" , "selectors" : { "Node" : 3 , "getJspAttributes()" : 3 , "getNameAttribute()" : 4 , "setJspAttributes(JspAttribute[])" : 1 , "setNameAttribute(JspAttribute)" : 1}},{ "className" : "org::apache::tomcat::util::http::fileupload::FileItemHeadersSupport" , "selectors" : { "getHeaders()" : 1 , "setHeaders(FileItemHeaders)" : 1}},{ "className" : "org::apache::jasper::runtime::JspRuntimeLibrary" , "selectors" : { "convert(String,String,Class<?>,Class<?>)" : 1 , "createTypedArray(String,Object,Method,String[],Class<?>,Class<?>)" : 1 , "getContextRelativePath(ServletRequest,String)" : 1 , "getReadMethod(Class<?>,String)" : 2 , "getThrowable(ServletRequest)" : 1 , "getValueFromBeanInfoPropertyEditor(Class<?>,String,String,Class<?>)" : 2 , "getValueFromPropertyEditorManager(Class<?>,String,String)" : 2 , "getWriteMethod(Class<?>,String)" : 10 , "include(ServletRequest,ServletResponse,String,JspWriter,boolean)" : 2 , "internalIntrospecthelper(Object,String,String,ServletRequest,String,boolean)" : 2 , "introspecthelper(Object,String,String,ServletRequest,String,boolean)" : 1 , "isSafeChar(int)" : 1}},{ "className" : "javax::servlet::http::HttpSessionBindingListener" , "selectors" : { "valueBound(HttpSessionBindingEvent)" : 1 , "valueUnbound(HttpSessionBindingEvent)" : 2}},{ "className" : "org::apache::catalina::connector::RequestFacade::GetRequestDispatcherPrivilegedAction" , "selectors" : { "GetRequestDispatcherPrivilegedAction(String)" : 1}},{ "className" : "javax::servlet::jsp::JspWriter" , "selectors" : { "JspWriter(int,boolean)" : 3 , "clear()" : 2 , "clearBuffer()" : 1 , "flush()" : 1 , "print(Object)" : 1 , "print(String)" : 4 , "print(char)" : 1 , "print(double)" : 1 , "print(long)" : 1 , "println(String)" : 5}},{ "className" : "org::apache::tomcat::util::bcel::classfile::StackMapType" , "selectors" : { "StackMapType(DataInput,ConstantPool)" : 7 , "StackMapType(byte,int,ConstantPool)" : 1 , "dump(DataOutputStream)" : 7 , "getIndex()" : 1 , "hasIndex()" : 2 , "printIndex()" : 1 , "setConstantPool(ConstantPool)" : 2 , "setIndex(int)" : 2 , "setType(byte)" : 1}},{ "className" : "org::apache::catalina::core::ContainerBase::PrivilegedAddChild" , "selectors" : { "PrivilegedAddChild(Container)" : 1}},{ "className" : "org::apache::catalina::filters::ExpiresFilter::XPrintWriter" , "selectors" : { "XPrintWriter(PrintWriter,HttpServletRequest,XHttpServletResponse)" : 1 , "fireBeforeWriteResponseBodyEvent()" : 31}},{ "className" : "org::apache::tomcat::util::http::fileupload::MultipartStream::ItemInputStream" , "selectors" : { "ItemInputStream()" : 1 , "available()" : 5 , "close(boolean)" : 2 , "findSeparator()" : 2 , "makeAvailable()" : 4 , "skip(long)" : 1}},{ "className" : "org::apache::tomcat::util::http::TestCookiesAllowEquals::TestCookieEqualsClient" , "selectors" : { "TestCookieEqualsClient()" : 1 , "doRequest()" : 1}},{ "className" : "org::apache::catalina::filters::TestRemoteIpFilter" , "selectors" : { "testRemoteIpFilter(FilterDef,Request)" : 9}},{ "className" : "org::apache::catalina::ssi::SSIEcho" , "selectors" : { "SSIEcho()" : 1 , "isValidEncoding(String)" : 1}},{ "className" : "org::apache::tomcat::util::bcel::classfile::StackMapTableEntry" , "selectors" : { "StackMapTableEntry(DataInputStream,ConstantPool)" : 1 , "StackMapTableEntry(int,int,int,StackMapType[],int,StackMapType[])" : 1 , "copy()" : 1 , "dump(DataOutputStream)" : 1 , "toString()" : 1}},{ "className" : "org::apache::catalina::users::MemoryUserCreationFactory" , "selectors" : { "MemoryUserCreationFactory(MemoryUserDatabase)" : 1}},{ "className" : "javax::servlet::jsp::JspContext" , "selectors" : { "findAttribute(String)" : 1 , "getAttribute(String)" : 3 , "getAttribute(String,int)" : 8 , "getAttributeNamesInScope(int)" : 6 , "getAttributesScope(String)" : 2 , "getELContext()" : 3 , "getExpressionEvaluator()" : 1 , "getOut()" : 7 , "popBody()" : 1 , "pushBody(Writer)" : 1 , "removeAttribute(String)" : 1 , "removeAttribute(String,int)" : 6 , "setAttribute(String,Object)" : 10 , "setAttribute(String,Object,int)" : 2}},{ "className" : "async::Stockticker::Stock" , "selectors" : { "Stock(String,double)" : 4 , "clone()" : 1 , "getCnt()" : 2 , "getLastChange()" : 1 , "getLastChangeAsString()" : 2 , "getSymbol()" : 3 , "getValue()" : 3 , "getValueAsString()" : 2 , "setCnt(int)" : 2 , "setLastChange(double)" : 1 , "setValue(double)" : 2}},{ "className" : "org::apache::catalina::tribes::transport::PooledSender::SenderQueue" , "selectors" : { "SenderQueue(PooledSender,int)" : 1 , "checkIdleKeepAlive()" : 1 , "close()" : 1 , "getInPoolSize()" : 1 , "getInUsePoolSize()" : 1 , "getLimit()" : 1 , "getSender(long)" : 1 , "open()" : 1 , "returnSender(DataSender)" : 1 , "setLimit(int)" : 1}},{ "className" : "java::net::URL" , "selectors" : { "URL(String)" : 1732 , "URL(String,String,String)" : 38 , "URL(String,String,int,String)" : 32 , "URL(String,String,int,String,URLStreamHandler)" : 4 , "URL(URL,String)" : 216 , "URL(URL,String,URLStreamHandler)" : 12 , "equals(Object)" : 33 , "getAuthority()" : 16 , "getContent()" : 11 , "getDefaultPort()" : 18 , "getFile()" : 322 , "getHost()" : 197 , "getPath()" : 207 , "getPort()" : 110 , "getProtocol()" : 328 , "getQuery()" : 57 , "getRef()" : 34 , "getUserInfo()" : 8 , "hashCode()" : 7 , "java" : 18 , "openConnection()" : 345 , "openConnection(Proxy)" : 7 , "openStream()" : 570 , "sameFile(URL)" : 10 , "setURLStreamHandlerFactory(URLStreamHandlerFactory)" : 10 , "showMessageDialog(???)" : 2 , "toExternalForm()" : 647 , "toString()" : 1071 , "toURI()" : 161}},{ "className" : "org::apache::catalina::Wrapper" , "selectors" : { "addInitParameter(String,String)" : 3 , "addInstanceListener(InstanceListener)" : 1 , "addMapping(String)" : 1 , "addSecurityReference(String,String)" : 1 , "allocate()" : 1 , "deallocate(Servlet)" : 1 , "findInitParameter(String)" : 3 , "findInitParameters()" : 2 , "findMappings()" : 3 , "findSecurityReference(String)" : 2 , "findSecurityReferences()" : 1 , "getAvailable()" : 1 , "getJspFile()" : 2 , "getLoadOnStartup()" : 1 , "getMultipartConfigElement()" : 1 , "getRunAs()" : 2 , "getServlet()" : 1 , "getServletClass()" : 3 , "getServletMethods()" : 1 , "incrementErrorCount()" : 1 , "isAsyncSupported()" : 1 , "isUnavailable()" : 2 , "load()" : 1 , "removeMapping(String)" : 2 , "setAsyncSupported(boolean)" : 6 , "setEnabled(boolean)" : 1 , "setJspFile(String)" : 2 , "setLoadOnStartup(int)" : 4 , "setMultipartConfigElement(MultipartConfigElement)" : 3 , "setRunAs(String)" : 2 , "setServlet(Servlet)" : 1 , "setServletClass(String)" : 4 , "unavailable(UnavailableException)" : 1}},{ "className" : "org::apache::catalina::manager::util::ReverseComparator" , "selectors" : { "ReverseComparator(Comparator<Session>)" : 1}},{ "className" : "org::apache::catalina::InstanceEvent" , "selectors" : { "InstanceEvent(Wrapper,Filter,String)" : 1 , "InstanceEvent(Wrapper,Filter,String,ServletRequest,ServletResponse)" : 1 , "InstanceEvent(Wrapper,Filter,String,ServletRequest,ServletResponse,Throwable)" : 1 , "InstanceEvent(Wrapper,Filter,String,Throwable)" : 1 , "InstanceEvent(Wrapper,Servlet,String)" : 1 , "InstanceEvent(Wrapper,Servlet,String,ServletRequest,ServletResponse)" : 1 , "InstanceEvent(Wrapper,Servlet,String,ServletRequest,ServletResponse,Throwable)" : 1 , "InstanceEvent(Wrapper,Servlet,String,Throwable)" : 1}},{ "className" : "org::apache::catalina::users::MemoryUser" , "selectors" : { "MemoryUser(MemoryUserDatabase,String,String,String)" : 1}},{ "className" : "org::apache::catalina::startup::WebRuleSet" , "selectors" : { "WebRuleSet(String,boolean)" : 2 , "WebRuleSet(boolean)" : 2 , "configureInjectionRules(Digester,String)" : 7 , "configureNamingRules(Digester)" : 1 , "recycle()" : 2}},{ "className" : "org::apache::coyote::RequestGroupInfo" , "selectors" : { "RequestGroupInfo()" : 5 , "addRequestProcessor(RequestInfo)" : 1 , "removeRequestProcessor(RequestInfo)" : 1 , "setBytesReceived(long)" : 1 , "setBytesSent(long)" : 1 , "setErrorCount(int)" : 1 , "setMaxTime(long)" : 1 , "setProcessingTime(long)" : 1 , "setRequestCount(int)" : 1}},{ "className" : "org::apache::catalina::ha::ClusterMessage" , "selectors" : { "getAddress()" : 7 , "getTimestamp()" : 5 , "getUniqueId()" : 1 , "setAddress(Member)" : 2 , "setTimestamp(long)" : 4}},{ "className" : "org::apache::coyote::Response" , "selectors" : { "Response()" : 5 , "acknowledge()" : 1 , "action(ActionCode,Object)" : 18 , "addHeader(String,String)" : 2 , "checkSpecialHeader(String,String)" : 2 , "containsHeader(String)" : 1 , "doWrite(ByteChunk)" : 1 , "finish()" : 1 , "getBytesWritten()" : 2 , "getCharacterEncoding()" : 2 , "getContentLanguage()" : 5 , "getContentLength()" : 1 , "getContentLengthLong()" : 10 , "getContentType()" : 8 , "getErrorException()" : 4 , "getHook()" : 1 , "getLocale()" : 1 , "getMessage()" : 7 , "getMimeHeaders()" : 13 , "getNote(int)" : 4 , "getStatus()" : 15 , "isCommitted()" : 18 , "isExceptionPresent()" : 1 , "recycle()" : 5 , "reset()" : 1 , "sendHeaders()" : 1 , "setCharacterEncoding(String)" : 2 , "setCommitted(boolean)" : 5 , "setContentLength(int)" : 8 , "setContentLength(long)" : 1 , "setContentType(String)" : 2 , "setErrorException(Exception)" : 3 , "setHeader(String,String)" : 1 , "setHook(ActionHook)" : 5 , "setLocale(Locale)" : 1 , "setMessage(String)" : 7 , "setNote(int,Object)" : 2 , "setOutputBuffer(OutputBuffer)" : 5 , "setRequest(Request)" : 1 , "setStatus(int)" : 67}},{ "className" : "org::apache::catalina::tribes::demos::CoordinationDemo" , "selectors" : { "CoordinationDemo()" : 1 , "clearScreen()" : 1 , "cmdStart(String[])" : 1 , "cmdStop(String[])" : 1 , "fill(String,int,String,boolean)" : 2 , "getHeader()" : 1 , "init()" : 1 , "leftfill(String,int,String)" : 11 , "printMenuOptions()" : 1 , "printScreen()" : 3 , "rightfill(String,int,String)" : 1 , "run(String[],CoordinationDemo)" : 1 , "setEvents(String)" : 1 , "setSystemStatus(String)" : 10 , "tokenize(String)" : 2 , "usage()" : 1 , "waitForInput()" : 1}},{ "className" : "org::apache::catalina::connector::TestRequest" , "selectors" : { "getConnection()" : 2}},{ "className" : "org::apache::catalina::tribes::test::interceptors::TestOrderInterceptor" , "selectors" : { "main(String[])::TestResult" : 1 , "main(String[])::TestSuite" : 1}},{ "className" : "org::apache::tomcat::util::bcel::classfile::ConstantValue" , "selectors" : { "ConstantValue(int,int,DataInput,ConstantPool)" : 1 , "ConstantValue(int,int,int,ConstantPool)" : 1}},{ "className" : "org::apache::catalina::ha::session::DeltaRequest" , "selectors" : { "DeltaRequest(String,boolean)" : 1 , "addAction(int,int,String,Object)" : 5 , "clear()" : 1 , "execute(DeltaSession,boolean)" : 3 , "getSessionId()" : 2 , "getSize()" : 4 , "readExternal(ObjectInput)" : 2 , "removeAttribute(String)" : 1 , "reset()" : 3 , "serialize()" : 2 , "setAttribute(String,Object)" : 1 , "setMaxInactiveInterval(int)" : 1 , "setNew(boolean)" : 1 , "setPrincipal(Principal)" : 1 , "setSessionId(String)" : 2 , "writeExternal(ObjectOutput)" : 1}},{ "className" : "javax::servlet::ServletResponse" , "selectors" : { "flushBuffer()" : 7 , "getBufferSize()" : 1 , "getCharacterEncoding()" : 3 , "getContentType()" : 2 , "getLocale()" : 1 , "getOutputStream()" : 10 , "getWriter()" : 74 , "isCommitted()" : 8 , "reset()" : 3 , "resetBuffer()" : 2 , "setBufferSize(int)" : 6 , "setCharacterEncoding(String)" : 2 , "setContentLength(int)" : 8 , "setContentType(String)" : 59 , "setLocale(Locale)" : 3}},{ "className" : "org::apache::tomcat::util::http::ServerCookie" , "selectors" : { "ServerCookie()" : 1 , "appendCookieValue(StringBuffer,int,String,String,String,String,String,int,boolean,boolean)" : 2 , "escapeDoubleQuotes(String,int,int)" : 2 , "getComment()" : 1 , "getDomain()" : 3 , "getName()" : 14 , "getPath()" : 3 , "getValue()" : 19 , "getVersion()" : 4 , "maybeQuote(StringBuffer,String)" : 4 , "recycle()" : 1 , "setVersion(int)" : 1 , "toString()" : 1}},{ "className" : "org::apache::catalina::manager::host::HTMLHostManagerServlet" , "selectors" : { "add(HttpServletRequest,String)" : 1 , "doGet(HttpServletRequest,HttpServletResponse)" : 1 , "list(HttpServletRequest,HttpServletResponse,String)" : 2 , "remove(String)" : 1 , "start(String)" : 1 , "stop(String)" : 1}},{ "className" : "org::apache::tomcat::util::net::NioChannel" , "selectors" : { "NioChannel(SocketChannel,ApplicationBufferHandler)" : 2 , "close()" : 1 , "close(boolean)" : 1 , "flush(boolean,Selector,long,MutableInteger)" : 1 , "flushOutbound()" : 1 , "getAttachment(boolean)" : 17 , "getBufHandler()" : 18 , "getBufferSize()" : 4 , "getIOChannel()" : 26 , "getOutboundRemaining()" : 2 , "getPoller()" : 23 , "handshake(boolean,boolean)" : 1 , "isOpen()" : 1 , "isSendFile()" : 1 , "read(ByteBuffer)" : 3 , "reset()" : 2 , "setIOChannel(SocketChannel)" : 1 , "setPoller(Poller)" : 1 , "setSendFile(boolean)" : 2 , "write(ByteBuffer)" : 2}},{ "className" : "org::apache::tomcat::util::buf::MessageBytes" , "selectors" : { "MessageBytes()" : 1 , "duplicate(MessageBytes)" : 4 , "equals(String)" : 27 , "equalsIgnoreCase(String)" : 17 , "getByteChunk()" : 34 , "getCharChunk()" : 17 , "getLength()" : 1 , "getLong()" : 3 , "getString()" : 5 , "getType()" : 10 , "hash()" : 1 , "indexOf(String)" : 2 , "indexOf(String,int)" : 1 , "indexOf(char,int)" : 1 , "indexOfIgnoreCase(String,int)" : 3 , "isNull()" : 18 , "newInstance()" : 37 , "recycle()" : 32 , "setBytes(byte[],int,int)" : 46 , "setChars(char[],int,int)" : 25 , "setLong(long)" : 5 , "setString(String)" : 133 , "startsWithIgnoreCase(String,int)" : 2 , "toBytes()" : 4 , "toChars()" : 3 , "toString()" : 97}},{ "className" : "org::apache::jasper::runtime::HttpJspBase" , "selectors" : { "_jspDestroy()" : 1 , "_jspInit()" : 1 , "_jspService(HttpServletRequest,HttpServletResponse)" : 1 , "jspDestroy()" : 1 , "jspInit()" : 1}},{ "className" : "org::apache::coyote::http11::AbstractHttp11Protocol" , "selectors" : { "destroy()" : 1 , "getAddress()" : 2 , "getAttribute(String)" : 1 , "getCompressableMimeType()" : 1 , "getCompressableMimeTypes()" : 2 , "getCompression()" : 2 , "getCompressionMinSize()" : 2 , "getDisableUploadTimeout()" : 2 , "getDomain()" : 6 , "getKeepAliveTimeout()" : 1 , "getLog()" : 10 , "getMaxHttpHeaderSize()" : 2 , "getMaxKeepAliveRequests()" : 2 , "getMaxSavePostSize()" : 2 , "getName()" : 17 , "getNoCompressionUserAgents()" : 2 , "getProcessorCache()" : 4 , "getProperty(String)" : 1 , "getRestrictedUserAgents()" : 2 , "getServer()" : 2 , "getSoTimeout()" : 2 , "getSocketBuffer()" : 2 , "getTimeout()" : 2 , "isSSLEnabled()" : 2 , "setAttribute(String,Object)" : 12 , "setCompressableMimeType(String)" : 1 , "setMaxKeepAliveRequests(int)" : 1 , "setSecure(boolean)" : 2 , "setSoLinger(int)" : 2 , "setSoTimeout(int)" : 4 , "setTcpNoDelay(boolean)" : 2}},{ "className" : "org::apache::catalina::Store" , "selectors" : { "clear()" : 2 , "keys()" : 3 , "load(String)" : 4 , "remove(String)" : 5 , "save(Session)" : 3 , "setManager(Manager)" : 1}},{ "className" : "org::apache::catalina::ha::deploy::FileMessageFactory" , "selectors" : { "FileMessageFactory(File,boolean)" : 1 , "checkState(boolean)" : 1 , "cleanup()" : 4 , "getFile()" : 2 , "getInstance(File,boolean)" : 4 , "readMessage(FileMessage)" : 4 , "writeMessage(FileMessage)" : 2}},{ "className" : "org::apache::catalina::util::LifecycleSupport" , "selectors" : { "LifecycleSupport(Lifecycle)" : 2 , "addLifecycleListener(LifecycleListener)" : 2 , "findLifecycleListeners()" : 2 , "fireLifecycleEvent(String,Object)" : 1 , "removeLifecycleListener(LifecycleListener)" : 2}},{ "className" : "org::apache::catalina::ha::CatalinaCluster" , "selectors" : { "addClusterListener(ClusterListener)" : 4 , "getChannel()" : 2 , "getLocalMember()" : 8 , "getManager(String)" : 2 , "getManagerName(String,Manager)" : 1 , "getManagers()" : 2 , "getMembers()" : 4 , "getValves()" : 1 , "hasMembers()" : 1 , "removeClusterListener(ClusterListener)" : 3 , "send(ClusterMessage)" : 5 , "send(ClusterMessage,Member)" : 4 , "sendClusterDomain(ClusterMessage)" : 10}},{ "className" : "org::apache::jasper::xmlparser::UCSReader" , "selectors" : { "UCSReader(InputStream,int,short)" : 1 , "UCSReader(InputStream,short)" : 4}},{ "className" : "org::apache::tomcat::util::http::Parameters" , "selectors" : { "Parameters()" : 1 , "addParam(String,String)" : 1 , "addParameterValues(String,String[])" : 3 , "getEncoding()" : 1 , "getParameter(String)" : 1 , "getParameterNames()" : 1 , "getParameterValues(String)" : 2 , "handleQueryParameters()" : 3 , "processParameters(MessageBytes,String)" : 1 , "processParameters(byte[],int,int)" : 2 , "processParameters(byte[],int,int,String)" : 2 , "recycle()" : 2 , "setEncoding(String)" : 2 , "setQuery(MessageBytes)" : 1 , "setQueryStringEncoding(String)" : 5 , "setURLDecoder(UDecoder)" : 1 , "urlDecode(ByteChunk,String)" : 2}},{ "className" : "org::apache::catalina::connector::RequestFacade::GetParameterMapPrivilegedAction" , "selectors" : { "GetParameterMapPrivilegedAction()" : 1}},{ "className" : "org::apache::tomcat::util::bcel::classfile::EnumElementValue" , "selectors" : { "EnumElementValue(int,int,int,ConstantPool)" : 1}},{ "className" : "org::apache::catalina::loader::WebappClassLoader" , "selectors" : { "addJar(String,JarFile,File)" : 1 , "addPermission(Permission)" : 5 , "addPermission(String)" : 5 , "addPermission(URL)" : 3 , "addRepository(String)" : 2 , "addRepository(String,File)" : 1 , "clearReferences()" : 1 , "clearReferencesJdbc()" : 1 , "clearReferencesResourceBundles()" : 1 , "clearReferencesRmiTargets()" : 1 , "clearReferencesStaticFinal()" : 1 , "clearReferencesStopTimerThread(Thread)" : 1 , "clearReferencesThreadLocals()" : 1 , "clearReferencesThreads()" : 1 , "clearThreadLocalMap(Object,Field)" : 2 , "closeJARs(boolean)" : 1 , "deleteDir(File)" : 2 , "filter(String)" : 1 , "findClass(String)" : 1 , "findClassInternal(String)" : 1 , "findLoadedClass0(String)" : 1 , "findLoadedResource(String)" : 2 , "findResource(String)" : 2 , "findResourceInternal(File,String)" : 1 , "findResourceInternal(String,String)" : 3 , "getJarPath()" : 4 , "getResourceAsStream(String)" : 1 , "getThreads()" : 2 , "getURI(File)" : 6 , "getURL(File,boolean)" : 4 , "isPackageSealed(String,Manifest)" : 1 , "isRequestThread(Thread)" : 1 , "isStarted()" : 1 , "loadClass(String,boolean)" : 1 , "loadedByThisOrChild(Class<? extends Object>)" : 1 , "modified()" : 1 , "nullInstance(Object)" : 1 , "openJARs()" : 2 , "refreshPolicy()" : 2 , "setAntiJARLocking(boolean)" : 1 , "setClearReferencesStatic(boolean)" : 1 , "setClearReferencesStopThreads(boolean)" : 1 , "setClearReferencesStopTimerThreads(boolean)" : 1 , "setClearReferencesThreadLocals(boolean)" : 1 , "setDelegate(boolean)" : 1 , "setJarPath(String)" : 1 , "setResources(DirContext)" : 1 , "setSearchExternalFirst(boolean)" : 2 , "setWorkDir(File)" : 1 , "validate(String)" : 1 , "validateJarFile(File)" : 1}},{ "className" : "org::apache::catalina::core::StandardPipeline" , "selectors" : { "StandardPipeline()" : 1 , "StandardPipeline(Container)" : 1 , "getValves()" : 1 , "removeValve(Valve)" : 1 , "setContainer(Container)" : 1}},{ "className" : "javax::management::MBeanServerNotification" , "selectors" : { "MBeanServerNotification(String,Object,long,ObjectName)" : 6 , "getMBeanName()" : 12}},{ "className" : "org::apache::catalina::util::InstanceSupport" , "selectors" : { "InstanceSupport(Wrapper)" : 2 , "addInstanceListener(InstanceListener)" : 1 , "fireInstanceEvent(String,Filter,ServletRequest,ServletResponse)" : 2 , "fireInstanceEvent(String,Filter,ServletRequest,ServletResponse,Throwable)" : 4 , "fireInstanceEvent(String,Servlet)" : 4 , "fireInstanceEvent(String,Servlet,ServletRequest,ServletResponse)" : 9 , "fireInstanceEvent(String,Servlet,ServletRequest,ServletResponse,Throwable)" : 4 , "fireInstanceEvent(String,Servlet,Throwable)" : 4 , "getWrapper()" : 1 , "removeInstanceListener(InstanceListener)" : 1}},{ "className" : "org::apache::catalina::filters::TestRemoteIpFilter::MockFilterChain" , "selectors" : { "MockFilterChain()" : 1 , "getRequest()" : 1}},{ "className" : "org::apache::catalina::valves::ExtendedAccessLogValve::TimeElement" , "selectors" : { "TimeElement()" : 1}},{ "className" : "org::apache::catalina::core::ContainerBase::ContainerBackgroundProcessor" , "selectors" : { "ContainerBackgroundProcessor()" : 1 , "processChildren(Container,ClassLoader)" : 2}},{ "className" : "javax::servlet::http::Cookie" , "selectors" : { "Cookie(String,String)" : 5 , "getComment()" : 2 , "getDomain()" : 2 , "getMaxAge()" : 2 , "getName()" : 14 , "getPath()" : 2 , "getSecure()" : 2 , "getValue()" : 13 , "getVersion()" : 2 , "isHttpOnly()" : 2 , "isToken(String)" : 1 , "setComment(String)" : 2 , "setDomain(String)" : 4 , "setHttpOnly(boolean)" : 1 , "setMaxAge(int)" : 3 , "setPath(String)" : 3 , "setSecure(boolean)" : 2 , "setValue(String)" : 1 , "setVersion(int)" : 1}},{ "className" : "org::apache::catalina::authenticator::SavedRequest" , "selectors" : { "SavedRequest()" : 1 , "addCookie(Cookie)" : 1 , "addHeader(String,String)" : 1 , "addLocale(Locale)" : 1 , "getBody()" : 1 , "getContentType()" : 1 , "getCookies()" : 1 , "getHeaderNames()" : 1 , "getHeaderValues(String)" : 1 , "getLocales()" : 1 , "getMethod()" : 4 , "getQueryString()" : 3 , "getRequestURI()" : 3 , "setBody(ByteChunk)" : 1 , "setContentType(String)" : 1 , "setMethod(String)" : 1 , "setQueryString(String)" : 1 , "setRequestURI(String)" : 1}},{ "className" : "javax::servlet::jsp::el::ELException" , "selectors" : { "ELException()" : 1 , "ELException(String)" : 1 , "ELException(Throwable)" : 1}},{ "className" : "java::lang::AbstractStringBuilder" , "selectors" : { "capacity()" : 1 , "charAt(int)" : 121 , "ensureCapacity(int)" : 1 , "getChars(int,int,char[],int)" : 11 , "length()" : 635 , "setCharAt(int,char)" : 23 , "setLength(int)" : 240 , "subSequence(int,int)" : 1 , "substring(int)" : 11 , "substring(int,int)" : 45 , "trimToSize()" : 2}},{ "className" : "org::apache::catalina::tribes::group::RpcChannel::RpcCollectorKey" , "selectors" : { "RpcCollectorKey(byte[])" : 2 , "equals(Object)" : 1 , "hashCode()" : 1}},{ "className" : "org::apache::tomcat::util::net::NioEndpoint" , "selectors" : { "NioEndpoint()" : 1 , "checkParachute()" : 1 , "createSSLEngine()" : 2 , "getAcceptorThreadPriority()" : 1 , "getPoller0()" : 1 , "getPollerThreadCount()" : 2 , "getSelectorPool()" : 2 , "getSelectorTimeout()" : 1 , "getUseSendfile()" : 3 , "init()" : 1 , "isWorkerAvailable()" : 2 , "processSocket(NioChannel,SocketStatus,boolean)" : 12 , "reclaimParachute(boolean)" : 2 , "releaseCaches()" : 4 , "setAcceptorThreadPriority(int)" : 1 , "setHandler(Handler)" : 1 , "setOomParachute(int)" : 1 , "setPollerThreadCount(int)" : 1 , "setPollerThreadPriority(int)" : 1 , "setSelectorTimeout(long)" : 1 , "setSocketOptions(SocketChannel)" : 1 , "setUseSendfile(boolean)" : 1 , "stop()" : 1 , "wrap(KeyManager[])" : 1}},{ "className" : "org::apache::catalina::core::AprLifecycleListener" , "selectors" : { "AprLifecycleListener()" : 1 , "init()" : 2 , "initializeSSL()" : 1 , "isAprAvailable()" : 1 , "terminateAPR()" : 2}},{ "className" : "org::apache::juli::ClassLoaderLogManager" , "selectors" : { "addLogger(Logger)" : 1 , "doSetParentLogger(Logger,Logger)" : 2 , "getClassLoaderInfo(ClassLoader)" : 6 , "getProperty(String)" : 3 , "readConfiguration(ClassLoader)" : 2 , "readConfiguration(InputStream,ClassLoader)" : 2 , "replace(String)" : 4 , "reset()" : 1 , "resetLoggers(ClassLoaderLogInfo)" : 2 , "setUseShutdownHook(boolean)" : 2 , "shutdown()" : 2}},{ "className" : "javax::naming::spi::ObjectFactory" , "selectors" : { "getObjectInstance(Object,Name,Context,Hashtable<?,?>)" : 7}},{ "className" : "org::apache::catalina::util::StringParser" , "selectors" : { "StringParser()" : 1 , "StringParser(String)" : 1 , "advance()" : 1 , "extract(int,int)" : 1 , "findChar(char)" : 1 , "getIndex()" : 1 , "getLength()" : 1 , "isWhite(char)" : 4 , "reset()" : 1 , "setString(String)" : 3}},{ "className" : "org::apache::el::parser::ELParserTokenManager" , "selectors" : { "ELParserTokenManager(SimpleCharStream)" : 3 , "ReInit(SimpleCharStream)" : 3 , "ReInitRounds()" : 3 , "SwitchTo(int)" : 2 , "getNextToken()" : 5 , "jjAddStates(int,int)" : 5 , "jjCanMove_0(int,int,int,long,long)" : 8 , "jjCanMove_1(int,int,int,long,long)" : 5 , "jjCheckNAdd(int)" : 25 , "jjCheckNAddStates(int,int)" : 26 , "jjCheckNAddTwoStates(int,int)" : 18 , "jjFillToken()" : 2 , "jjMoveNfa_0(int,int)" : 2 , "jjMoveNfa_1(int,int)" : 3 , "jjMoveStringLiteralDfa0_0()" : 1 , "jjMoveStringLiteralDfa0_1()" : 1 , "jjMoveStringLiteralDfa1_0(long)" : 2 , "jjMoveStringLiteralDfa1_1(long)" : 17 , "jjMoveStringLiteralDfa2_1(long,long)" : 7 , "jjMoveStringLiteralDfa3_1(long,long)" : 4 , "jjMoveStringLiteralDfa4_1(long,long)" : 2 , "jjMoveStringLiteralDfa5_1(long,long)" : 1 , "jjMoveStringLiteralDfa6_1(long,long)" : 1 , "jjMoveStringLiteralDfa7_1(long,long)" : 1 , "jjMoveStringLiteralDfa8_1(long,long)" : 1 , "jjMoveStringLiteralDfa9_1(long,long)" : 1 , "jjStartNfaWithStates_1(int,int,int)" : 17 , "jjStartNfa_0(int,long)" : 1 , "jjStartNfa_1(int,long)" : 17 , "jjStopAtPos(int,int)" : 21 , "jjStopStringLiteralDfa_0(int,long)" : 2 , "jjStopStringLiteralDfa_1(int,long)" : 10}},{ "className" : "org::apache::tomcat::util::http::mapper::Mapper" , "selectors" : { "addContext(String,Object,String,Object,String[],Context)" : 1 , "addHost(String,String[],Object)" : 2 , "addHostAlias(String,String)" : 1 , "addWelcomeFile(String,String,String)" : 1 , "addWrapper(Context,String,Object)" : 1 , "addWrapper(Context,String,Object,boolean)" : 3 , "addWrapper(String,Object,boolean)" : 1 , "addWrapper(String,String,String,Object,boolean)" : 3 , "clearWelcomeFiles(String,String)" : 1 , "compare(CharChunk,int,int,String)" : 3 , "compareIgnoreCase(CharChunk,int,int,String)" : 3 , "find(MapElement[],CharChunk)" : 6 , "find(MapElement[],CharChunk,int,int)" : 1 , "find(MapElement[],String)" : 19 , "findIgnoreCase(MapElement[],CharChunk)" : 1 , "findIgnoreCase(MapElement[],CharChunk,int,int)" : 1 , "getWrapperNames(String,String)" : 1 , "insertMap(MapElement[],MapElement[],MapElement)" : 7 , "internalMap(CharChunk,CharChunk,MappingData)" : 1 , "internalMapExactWrapper(Wrapper[],CharChunk,MappingData)" : 2 , "internalMapExtensionWrapper(Wrapper[],CharChunk,MappingData)" : 3 , "internalMapWildcardWrapper(Wrapper[],int,CharChunk,MappingData)" : 2 , "internalMapWrapper(Context,CharChunk,MappingData)" : 2 , "lastSlash(CharChunk)" : 2 , "map(MessageBytes,MappingData)" : 1 , "map(MessageBytes,MessageBytes,MappingData)" : 1 , "nthSlash(CharChunk,int)" : 2 , "org" : 2 , "removeContext(String,String)" : 1 , "removeHost(String)" : 1 , "removeHostAlias(String)" : 1 , "removeMap(MapElement[],MapElement[],String)" : 7 , "removeWelcomeFile(String,String,String)" : 1 , "removeWrapper(Context,String)" : 2 , "removeWrapper(String)" : 2 , "removeWrapper(String,String,String)" : 2 , "setContext(String,String[],Context)" : 1 , "setDefaultHostName(String)" : 1 , "slashCount(String)" : 4}},{ "className" : "org::apache::catalina::deploy::ContextHandler" , "selectors" : { "addSoapHeaders(String,String)" : 1 , "getHandlerclass()" : 2 , "getLocalparts()" : 1 , "getNamespaceuri(String)" : 1 , "getPortName(int)" : 1 , "getPortNamesSize()" : 2 , "getSoapRole(int)" : 1 , "getSoapRolesSize()" : 2}},{ "className" : "javax::net::ssl::X509KeyManager" , "selectors" : { "chooseClientAlias(String[],Principal[],Socket)" : 2 , "chooseServerAlias(String,Principal[],Socket)" : 3 , "getCertificateChain(String)" : 3 , "getClientAliases(String,Principal[])" : 3 , "getPrivateKey(String)" : 3 , "getServerAliases(String,Principal[])" : 4}},{ "className" : "org::apache::tomcat::util::scan::StandardJarScanner" , "selectors" : { "StandardJarScanner()" : 2 , "getJarName(URL)" : 1 , "process(JarScannerCallback,URL)" : 2}},{ "className" : "org::apache::coyote::http11::AbstractInputBuffer" , "selectors" : { "addActiveFilter(InputFilter)" : 14 , "addFilter(InputFilter)" : 5 , "endRequest()" : 3 , "getFilters()" : 7 , "nextRequest()" : 6 , "recycle()" : 3 , "setInputStream(InputStream)" : 1 , "setSwallowInput(boolean)" : 9}},{ "className" : "org::apache::tomcat::util::net::AprEndpoint::SendfileData" , "selectors" : { "AprEndpoint" : 1}},{ "className" : "org::apache::tomcat::util::digester::Digester" , "selectors" : { "Digester()" : 9 , "addCallMethod(String,String)" : 3 , "addCallMethod(String,String,int)" : 127 , "addCallParam(String,int)" : 22 , "addFactoryCreate(String,Class<?>,String,boolean)" : 1 , "addFactoryCreate(String,Class<?>,boolean)" : 1 , "addFactoryCreate(String,ObjectCreationFactory)" : 3 , "addFactoryCreate(String,ObjectCreationFactory,boolean)" : 1 , "addFactoryCreate(String,String,String,boolean)" : 1 , "addFactoryCreate(String,String,boolean)" : 1 , "addObjectCreate(String,String)" : 35 , "addObjectCreate(String,String,String)" : 45 , "addRule(String,Rule)" : 75 , "addRuleSet(RuleSet)" : 15 , "addSetNext(String,String,String)" : 72 , "addSetProperties(String)" : 56 , "clear()" : 2 , "configure()" : 6 , "createSAXException(Exception)" : 5 , "createSAXException(String)" : 1 , "createSAXException(String,Exception)" : 2 , "endElement(String,String,String)" : 1 , "findNamespaceURI(String)" : 2 , "getClassLoader()" : 7 , "getCount()" : 13 , "getFactory()" : 3 , "getLogger()" : 27 , "getMatch()" : 3 , "getNamespaceAware()" : 1 , "getParser()" : 4 , "getPublicId()" : 1 , "getRuleNamespaceURI()" : 1 , "getRules()" : 5 , "getRulesValidation()" : 4 , "getXMLReader()" : 8 , "initialize()" : 1 , "isFakeAttribute(Object,String)" : 4 , "parse(File)" : 5 , "parse(InputSource)" : 6 , "parse(InputStream)" : 3 , "peek()" : 14 , "peek(int)" : 20 , "peekParams()" : 5 , "pop()" : 6 , "popParams()" : 2 , "push(Object)" : 15 , "pushParams(Object)" : 1 , "register(String,String)" : 1 , "reset()" : 10 , "setClassLoader(ClassLoader)" : 3 , "setEntityResolver(EntityResolver)" : 1 , "setErrorHandler(ErrorHandler)" : 4 , "setFakeAttributes(Map<Class<?>,List<String>>)" : 1 , "setFeature(String,boolean)" : 2 , "setNamespaceAware(boolean)" : 2 , "setPublicId(String)" : 1 , "setRuleNamespaceURI(String)" : 2 , "setRulesValidation(boolean)" : 1 , "setUseContextClassLoader(boolean)" : 2 , "setValidating(boolean)" : 7 , "updateAttributes(Attributes)" : 1 , "updateBodyText(StringBuilder)" : 1}},{ "className" : "org::apache::jasper::compiler::ErrorHandler" , "selectors" : { "javacError(JavacErrorDetail[])" : 1 , "javacError(String,Exception)" : 1 , "jspError(String,Exception)" : 1 , "jspError(String,int,int,String,Exception)" : 1}},{ "className" : "org::apache::jasper::compiler::Node::JspAttribute" , "selectors" : { "Node" : 12 , "getEL()" : 9 , "getExpectedTypeName()" : 2 , "getLocalName()" : 3 , "getName()" : 7 , "getNamedAttributeNode()" : 11 , "getParameterTypeNames()" : 1 , "getTagAttributeInfo()" : 2 , "getURI()" : 2 , "getValue()" : 4 , "isDeferredInput()" : 5 , "isDeferredMethodInput()" : 4 , "isDynamic()" : 3 , "isELInterpreterInput()" : 4 , "isExpression()" : 13 , "isLiteral()" : 3 , "isNamedAttribute()" : 11 , "validateEL(ExpressionFactory,ELContext)" : 2}},{ "className" : "java::io::PrintWriter" , "selectors" : { "PrintWriter(File)" : 12 , "PrintWriter(File,String)" : 1 , "PrintWriter(OutputStream)" : 199 , "PrintWriter(OutputStream,boolean)" : 74 , "PrintWriter(String)" : 21 , "PrintWriter(Writer)" : 738 , "PrintWriter(Writer,boolean)" : 74 , "append(CharSequence)" : 2 , "append(CharSequence,int,int)" : 1 , "append(char)" : 1 , "checkError()" : 26 , "close()" : 589 , "flush()" : 665 , "flush(???)" : 8 , "format(String,Object[])" : 2 , "java" : 45 , "print(Object)" : 41 , "print(String)" : 2823 , "print(boolean)" : 5 , "print(char)" : 428 , "print(char[])" : 31 , "print(double)" : 5 , "print(float)" : 6 , "print(int)" : 133 , "print(long)" : 44 , "printf(Locale,String,Object[])" : 1 , "printf(String,Object[])" : 67 , "println()" : 271 , "println(Object)" : 70 , "println(String)" : 5967 , "println(boolean)" : 3 , "println(char)" : 81 , "println(char[])" : 87 , "println(double)" : 20 , "println(float)" : 3 , "println(int)" : 26 , "println(long)" : 3 , "toJSON(???)" : 1 , "write(???)" : 6 , "write(String)" : 264 , "write(String,int,int)" : 5 , "write(char[])" : 20 , "write(char[],int,int)" : 10 , "write(int)" : 27}},{ "className" : "java::rmi::server::RMIClientSocketFactory" , "selectors" : { "createSocket(String,int)" : 1}},{ "className" : "org::apache::tomcat::util::DomUtil" , "selectors" : { "findChildWithAtt(Node,String,String,String)" : 1 , "getAttribute(Node,String)" : 13 , "getChild(Node,String)" : 11 , "getChild(Node,int)" : 3 , "getContent(Node)" : 4 , "getNext(Node)" : 9 , "getNext(Node,String,int)" : 4 , "readXml(InputStream)" : 2 , "removeAttribute(Node,String)" : 1 , "setAttribute(Node,String,String)" : 1 , "setAttributes(Object,Node)" : 7 , "setText(Node,String)" : 1 , "writeXml(Node,OutputStream)" : 1}},{ "className" : "org::apache::catalina::valves::ExtendedAccessLogValve" , "selectors" : { "getClientToServerElement(PatternTokenizer)" : 1 , "getLogElement(String,PatternTokenizer)" : 1 , "getProxyElement(PatternTokenizer)" : 1 , "getServerToClientElement(PatternTokenizer)" : 1 , "getServletRequestElement(String)" : 1 , "getXParameterElement(PatternTokenizer)" : 1 , "wrap(Object)" : 18}},{ "className" : "org::apache::el::parser::AstLessThanEqual" , "selectors" : { "AstLessThanEqual(int)" : 1}},{ "className" : "org::apache::jasper::xmlparser::MyEntityResolver" , "selectors" : { "MyEntityResolver()" : 1}},{ "className" : "org::apache::catalina::session::ManagerBase" , "selectors" : { "add(Session)" : 4 , "changeSessionId(Session)" : 1 , "createEmptySession()" : 1 , "createSession(String)" : 1 , "findSession(String)" : 9 , "findSessions()" : 11 , "generateSessionId()" : 6 , "getActiveSessions()" : 4 , "getContainer()" : 5 , "getDigest()" : 1 , "getEngine()" : 1 , "getEntropy()" : 1 , "getJvmRoute()" : 2 , "getMaxActiveSessions()" : 3 , "getMaxInactiveInterval()" : 2 , "getName()" : 2 , "getNewSession()" : 2 , "getRandom()" : 1 , "getRandomBytes(byte[])" : 2 , "getSessionAttribute(String,String)" : 1 , "processExpires()" : 1 , "remove(Session)" : 3 , "setDistributable(boolean)" : 1 , "setEntropy(String)" : 2 , "setMaxActive(int)" : 1 , "setMaxInactiveInterval(int)" : 2 , "setRandomFile(String)" : 1 , "toString()" : 1}},{ "className" : "org::apache::catalina::tribes::demos::IntrospectionUtils::AttributeHolder" , "selectors" : { "setAttribute(String,Object)" : 1}},{ "className" : "javax::servlet::jsp::tagext::TagInfo" , "selectors" : { "TagInfo(String,String,String,String,TagLibraryInfo,TagExtraInfo,TagAttributeInfo[],String,String,String,TagVariableInfo[])" : 1 , "TagInfo(String,String,String,String,TagLibraryInfo,TagExtraInfo,TagAttributeInfo[],String,String,String,TagVariableInfo[],boolean)" : 1 , "getAttributes()" : 8 , "getBodyContent()" : 5 , "getTagClassName()" : 9 , "getTagExtraInfo()" : 4 , "getTagLibrary()" : 4 , "getTagName()" : 1 , "getTagVariableInfos()" : 3 , "getVariableInfo(TagData)" : 1 , "hasDynamicAttributes()" : 6 , "validate(TagData)" : 1}},{ "className" : "org::apache::el::lang::ExpressionBuilder" , "selectors" : { "ExpressionBuilder(String,ELContext)" : 2 , "build()" : 2 , "createMethodExpression(Class<?>,Class<?>[])" : 1 , "createNode(String)" : 2 , "createNodeInternal(String)" : 2 , "createValueExpression(Class<?>)" : 1 , "prepare(Node)" : 1}},{ "className" : "org::apache::jasper::compiler::JDTCompiler" , "selectors" : { "generateClass(String[])::CompilationUnit" : 2 , "generateClass(String[])::CompilerOptions" : 1 , "generateClass(String[])::DefaultProblemFactory" : 1 , "generateClass(String[])::anonymous(INameEnvironment)" : 3}},{ "className" : "org::apache::catalina::ha::deploy::FarmWarDeployer" , "selectors" : { "addServiced(String)" : 3 , "check(String)" : 2 , "copy(File,File)" : 1 , "getAppBase()" : 2 , "getCluster()" : 7 , "getConfigFile(String)" : 1 , "getContextName(File)" : 2 , "getDeployDir()" : 2 , "getDocBase(String)" : 2 , "getFactory(FileMessage)" : 1 , "getTempDir()" : 1 , "getWatchDir()" : 2 , "install(String,URL)" : 1 , "isServiced(String)" : 3 , "remove(String)" : 3 , "remove(String,boolean)" : 2 , "removeFactory(FileMessage)" : 1 , "removeServiced(String)" : 3 , "undeployDir(File)" : 2}},{ "className" : "org::apache::coyote::http11::AbstractHttp11Processor" , "selectors" : { "addCompressableMimeType(String)" : 1 , "addInputFilter(InputFilter[],String)" : 6 , "addNoCompressionUserAgent(String)" : 1 , "addREArray(Pattern[],Pattern)" : 2 , "addRestrictedUserAgent(String)" : 1 , "addStringArray(String[],String)" : 1 , "findBytes(ByteChunk,byte[])" : 4 , "getInputBuffer()" : 8 , "getOutputBuffer()" : 5 , "getRequest()" : 6 , "initializeFilters()" : 3 , "isCompressable()" : 3 , "setAdapter(Adapter)" : 3 , "setCompressableMimeTypes(String)" : 3 , "setCompression(String)" : 3 , "setCompressionMinSize(int)" : 3 , "setDisableUploadTimeout(boolean)" : 3 , "setKeepAliveTimeout(int)" : 1 , "setMaxKeepAliveRequests(int)" : 3 , "setMaxSavePostSize(int)" : 3 , "setNoCompressionUserAgents(String)" : 3 , "setRestrictedUserAgents(String)" : 3 , "setServer(String)" : 3 , "setSocketBuffer(int)" : 3 , "setTimeout(int)" : 3 , "startsWithStringArray(String[],String)" : 1 , "statusDropsConnection(int)" : 4}},{ "className" : "org::apache::catalina::realm::JAASMemoryLoginModule" , "selectors" : { "load()" : 1 , "logout()" : 1}},{ "className" : "org::apache::jasper::compiler::PageDataImpl::SecondPassVisitor" , "selectors" : { "SecondPassVisitor(Root,StringBuilder,Compiler,String)" : 1 , "appendCDATA(String)" : 2 , "appendPageDirective()" : 1 , "appendPageDirective(PageDirective)" : 1 , "appendTag(Node)" : 22 , "appendTag(Node,boolean)" : 3 , "appendTagDirective()" : 1 , "appendTagDirective(TagDirective)" : 1 , "appendText(String,boolean)" : 2 , "appendXmlProlog()" : 1 , "escapeCDATA(String)" : 1 , "printAttributes(Node,boolean)" : 1}},{ "className" : "cal::TableBean" , "selectors" : { "setEmail(String)" : 1 , "setName(String)" : 1}},{ "className" : "org::apache::catalina::ant::BaseRedirectorHelperTask" , "selectors" : { "<Initializer>()::Redirector" : 1 , "addConfiguredRedirector(RedirectorElement)::BuildException" : 1 , "closeRedirector()" : 3 , "configureRedirector()" : 1 , "handleErrorFlush(String)" : 1 , "handleErrorOutput(String)" : 13 , "handleFlush(String)" : 1 , "handleOutput(String)" : 11 , "handleOutput(String,int)" : 2 , "isFailOnError()" : 5 , "openRedirector()" : 2}},{ "className" : "org::apache::catalina::core::ContainerBase" , "selectors" : { "ContainerBase()" : 4 , "addChild(Container)" : 3 , "addChildInternal(Container)" : 2 , "addPropertyChangeListener(PropertyChangeListener)" : 3 , "backgroundProcess()" : 1 , "destroyInternal()" : 1 , "findChild(String)" : 16 , "findChildren()" : 9 , "fireContainerEvent(String,Object)" : 67 , "getAccessLog()" : 2 , "getCluster()" : 6 , "getLoader()" : 10 , "getLogger()" : 25 , "getManager()" : 3 , "getMappingObject()" : 3 , "getName()" : 53 , "getParent()" : 35 , "getPipeline()" : 14 , "getRealm()" : 1 , "getResources()" : 12 , "logName()" : 2 , "removeChild(Container)" : 1 , "removePropertyChangeListener(PropertyChangeListener)" : 3 , "setLoader(Loader)" : 3 , "setManager(Manager)" : 3 , "setName(String)" : 3 , "setParent(Container)" : 1 , "setRealm(Realm)" : 8 , "startInternal()" : 3 , "stopInternal()" : 1 , "threadStart()" : 2 , "threadStop()" : 2}},{ "className" : "javax::net::ssl::X509ExtendedKeyManager" , "selectors" : { "chooseEngineServerAlias(String,Principal[],SSLEngine)" : 1}},{ "className" : "org::apache::catalina::util::SchemaResolver" , "selectors" : { "SchemaResolver(Digester)" : 1 , "register(String,String)" : 1}},{ "className" : "org::apache::juli::ClassLoaderLogManager::LogNode" , "selectors" : { "LogNode(LogNode)" : 1 , "LogNode(LogNode,Logger)" : 2 , "findNode(String)" : 1 , "findParentLogger()" : 1 , "setParentLogger(Logger)" : 2}},{ "className" : "org::apache::catalina::ssi::SSICommand" , "selectors" : { "process(SSIMediator,String,String[],String[],PrintWriter)" : 1}},{ "className" : "org::apache::catalina::deploy::ContextResource" , "selectors" : { "ContextResource()" : 2 , "getAuth()" : 3 , "getScope()" : 3 , "setAuth(String)" : 3 , "setScope(String)" : 2}},{ "className" : "org::apache::catalina::filters::RequestDumperFilter::Timestamp" , "selectors" : { "Timestamp()" : 1 , "update()" : 1}},{ "className" : "compressionFilters::CompressionResponseStream" , "selectors" : { "CompressionResponseStream(HttpServletResponse)" : 1 , "flush()" : 1 , "flushToGZip()" : 3 , "setBuffer(int)" : 1 , "setDebugLevel(int)" : 1 , "write(byte[],int,int)" : 1 , "writeToGZip(byte[],int,int)" : 2}},{ "className" : "org::apache::catalina::ha::session::JvmRouteSessionIDBinderListener" , "selectors" : { "JvmRouteSessionIDBinderListener()" : 1}},{ "className" : "org::apache::jasper::compiler::JarURLResource" , "selectors" : { "JarURLResource(String)" : 2}},{ "className" : "org::apache::catalina::startup::SetParentClassLoaderRule" , "selectors" : { "SetParentClassLoaderRule(ClassLoader)" : 1}},{ "className" : "javax::management::MBeanRegistration" , "selectors" : { "postDeregister()" : 8 , "postRegister(Boolean)" : 10 , "preDeregister()" : 7 , "preRegister(MBeanServer,ObjectName)" : 8}},{ "className" : "org::apache::tomcat::util::http::fileupload::FileItemStream" , "selectors" : { "getContentType()" : 1 , "getFieldName()" : 1 , "isFormField()" : 1 , "openStream()" : 1}},{ "className" : "java::util::logging::Handler" , "selectors" : { "Handler()" : 1 , "close()" : 1 , "flush()" : 3 , "getEncoding()" : 2 , "getFormatter()" : 17 , "getLevel()" : 8 , "isLoggable(LogRecord)" : 6 , "reportError(String,Exception,int)" : 26 , "setEncoding(String)" : 2 , "setErrorManager(ErrorManager)" : 1 , "setFilter(Filter)" : 5 , "setFormatter(Formatter)" : 43 , "setLevel(Level)" : 59}},{ "className" : "org::apache::jasper::compiler::Node::IncludeAction" , "selectors" : { "Node" : 3 , "getPage()" : 3 , "setPage(JspAttribute)" : 1}},{ "className" : "org::apache::catalina::tribes::transport::nio::PooledParallelSender" , "selectors" : { "PooledParallelSender()" : 1 , "disconnect()" : 1}},{ "className" : "org::apache::el::parser::AstNotEqual" , "selectors" : { "AstNotEqual(int)" : 1}},{ "className" : "org::apache::coyote::ProtocolHandler" , "selectors" : { "destroy()" : 1 , "getExecutor()" : 1 , "init()" : 1 , "pause()" : 1 , "resume()" : 1 , "setAdapter(Adapter)" : 1 , "start()" : 1}},{ "className" : "javax::mail::internet::MimeMessage" , "selectors" : { "MimeMessage(Session)" : 1 , "setFrom(InternetAddress)" : 1 , "setSubject(String)" : 1}},{ "className" : "org::w3c::dom::Node" , "selectors" : { "appendChild(Node)" : 1152 , "cloneNode(boolean)" : 26 , "compareDocumentPosition(Node)" : 4 , "getAttributes()" : 331 , "getBaseURI()" : 1 , "getChildNodes()" : 515 , "getFirstChild()" : 643 , "getLastChild()" : 41 , "getLocalName()" : 354 , "getNamespaceURI()" : 232 , "getNextSibling()" : 490 , "getNodeName()" : 944 , "getNodeType()" : 1008 , "getNodeValue()" : 840 , "getOwnerDocument()" : 246 , "getParentNode()" : 328 , "getPrefix()" : 78 , "getPreviousSibling()" : 77 , "getTextContent()" : 58 , "getUserData(String)" : 6 , "hasAttributes()" : 19 , "hasChildNodes()" : 53 , "insertBefore(Node,Node)" : 49 , "isEqualNode(Node)" : 1 , "isSameNode(Node)" : 2 , "isSupported(String,String)" : 4 , "lookupNamespaceURI(String)" : 3 , "lookupPrefix(String)" : 3 , "normalize()" : 23 , "removeChild(Node)" : 75 , "replaceChild(Node,Node)" : 17 , "setNodeValue(String)" : 30 , "setPrefix(String)" : 4 , "setTextContent(String)" : 28 , "setUserData(String,Object,UserDataHandler)" : 7}},{ "className" : "org::apache::jasper::xmlparser::XMLEncodingDetector::RewindableInputStream" , "selectors" : { "RewindableInputStream(InputStream)" : 1 , "read()" : 1}},{ "className" : "org::apache::catalina::ant::ReloadTask" , "selectors" : { "execute()::BuildException" : 2}},{ "className" : "org::apache::tomcat::util::bcel::classfile::RuntimeInvisibleAnnotations" , "selectors" : { "RuntimeInvisibleAnnotations(int,int,DataInputStream,ConstantPool)" : 1}},{ "className" : "org::apache::jasper::compiler::TagLibraryInfoImpl" , "selectors" : { "TagLibraryInfoImpl(JspCompilationContext,ParserController,PageInfo,String,String,TldLocation,ErrorDispatcher)" : 2 , "createAttribute(TreeNode,String)" : 1 , "createFunctionInfo(TreeNode)" : 1 , "createInitParam(TreeNode)" : 1 , "createTagFileInfo(TreeNode,JarResource)" : 1 , "createTagInfo(TreeNode,String)" : 1 , "createValidator(TreeNode)" : 1 , "createVariable(TreeNode)" : 1 , "generateTLDLocation(String,JspCompilationContext)" : 1 , "getResourceAsStream(String)" : 1 , "getTagLibraryValidator()" : 1 , "parseTLD(String,InputStream,JarResource)" : 2 , "print(String,String,PrintWriter)" : 7 , "validate(PageData)" : 1}},{ "className" : "org::apache::catalina::Container" , "selectors" : { "addChild(Container)" : 17 , "addContainerListener(ContainerListener)" : 9 , "addPropertyChangeListener(PropertyChangeListener)" : 2 , "backgroundProcess()" : 1 , "findChild(String)" : 51 , "findChildren()" : 20 , "fireContainerEvent(String,Object)" : 2 , "getAccessLog()" : 2 , "getBackgroundProcessorDelay()" : 1 , "getCluster()" : 10 , "getInfo()" : 2 , "getLoader()" : 36 , "getLogger()" : 151 , "getManager()" : 22 , "getName()" : 134 , "getObjectName()" : 2 , "getParent()" : 94 , "getParentClassLoader()" : 3 , "getPipeline()" : 20 , "getRealm()" : 21 , "getResources()" : 7 , "logAccess(Request,Response,long,boolean)" : 8 , "removeChild(Container)" : 11 , "removeContainerListener(ContainerListener)" : 4 , "removePropertyChangeListener(PropertyChangeListener)" : 2 , "setManager(Manager)" : 1 , "setName(String)" : 5 , "setParent(Container)" : 1 , "setParentClassLoader(ClassLoader)" : 2 , "setRealm(Realm)" : 2}},{ "className" : "org::apache::el::parser::AstTrue" , "selectors" : { "AstTrue(int)" : 1}},{ "className" : "org::apache::juli::AsyncFileHandler::LoggerThread" , "selectors" : { "LoggerThread()" : 1}},{ "className" : "org::apache::catalina::connector::TestRequest::Bug37794Servlet" , "selectors" : { "Bug37794Servlet()" : 3}},{ "className" : "javax::naming::Reference" , "selectors" : { "Reference(String)" : 2 , "Reference(String,RefAddr,String,String)" : 23 , "Reference(String,String,String)" : 25 , "add(RefAddr)" : 108 , "get(String)" : 69 , "get(int)" : 25 , "getAll()" : 15 , "getClassName()" : 24 , "getFactoryClassLocation()" : 3 , "getFactoryClassName()" : 10 , "size()" : 6}},{ "className" : "org::apache::coyote::http11::Http11NioProtocol::Http11ConnectionHandler" , "selectors" : { "<Initializer>()::anonymous(ConcurrentLinkedQueue)" : 2 , "Http11ConnectionHandler(Http11NioProtocol)" : 1 , "createProcessor()" : 1 , "deregister(Http11NioProcessor)" : 3 , "register(Http11NioProcessor)" : 1 , "release(NioChannel)" : 1}},{ "className" : "org::apache::tomcat::util::bcel::classfile::Deprecated" , "selectors" : { "Deprecated(int,int,DataInputStream,ConstantPool)" : 1 , "Deprecated(int,int,byte[],ConstantPool)" : 1}},{ "className" : "javax::servlet::http::NoBodyResponse" , "selectors" : { "NoBodyResponse(HttpServletResponse)" : 1 , "setContentLength()" : 1}},{ "className" : "org::apache::catalina::ant::jmx::JMXAccessorQueryTask" , "selectors" : { "bindAttributes(MBeanServerConnection,String,String,ObjectName)" : 1 , "isAttributebinding()" : 1 , "jmxExecute(MBeanServerConnection)::BuildException" : 1 , "jmxQuery(MBeanServerConnection,String)" : 1}},{ "className" : "org::apache::catalina::startup::HostRuleSet" , "selectors" : { "HostRuleSet(String)" : 2}},{ "className" : "org::apache::catalina::tribes::tipis::AbstractReplicatedMap::MapEntry" , "selectors" : { "MapEntry(Object,Object)" : 4 , "getBackupNodes()" : 20 , "getKey()" : 14 , "getPrimary()" : 8 , "getValue()" : 28 , "isActive()" : 5 , "isBackup()" : 5 , "isDiffable()" : 1 , "isKeySerializable()" : 1 , "isPrimary()" : 6 , "isProxy()" : 4 , "isSerializable()" : 3 , "isValueSerializable()" : 1 , "setBackup(boolean)" : 7 , "setBackupNodes(Member[])" : 9 , "setKey(Object)" : 1 , "setPrimary(Member)" : 10 , "setProxy(boolean)" : 7 , "setValue(Object)" : 5}},{ "className" : "org::apache::catalina::tribes::demos::EchoRpcTest::Shutdown" , "selectors" : { "Shutdown(ManagedChannel)" : 1}},{ "className" : "org::apache::jasper::el::ELContextImpl::VariableMapperImpl" , "selectors" : { "VariableMapperImpl()" : 1}},{ "className" : "org::apache::catalina::core::ApplicationDispatcher" , "selectors" : { "ApplicationDispatcher(Wrapper,String,String,String,String,String)" : 2 , "checkSameObjects(ServletRequest,ServletResponse)" : 2 , "doForward(ServletRequest,ServletResponse)" : 2 , "doInclude(ServletRequest,ServletResponse,DispatcherType)" : 2 , "getCombinedPath()" : 3 , "invoke(ServletRequest,ServletResponse,State)" : 4 , "processRequest(ServletRequest,ServletResponse,State)" : 2 , "recycleRequestWrapper(State)" : 1 , "unwrapRequest(State)" : 1 , "unwrapResponse(State)" : 1 , "wrapRequest(State)" : 4 , "wrapResponse(State)" : 2}},{ "className" : "org::apache::tomcat::util::http::FastHttpDateFormat" , "selectors" : { "formatDate(long,DateFormat)" : 8 , "getCurrentDate()" : 3 , "internalParseDate(String,DateFormat[])" : 2 , "parseDate(String,DateFormat[])" : 1 , "updateFormatCache(Long,String)" : 2 , "updateParseCache(String,Long)" : 2}},{ "className" : "org::apache::catalina::tribes::group::interceptors::GzipInterceptor" , "selectors" : { "GzipInterceptor()" : 1 , "compress(byte[])" : 2 , "decompress(byte[])" : 2}},{ "className" : "javax::servlet::SessionCookieConfig" , "selectors" : { "getComment()" : 1 , "getDomain()" : 2 , "getMaxAge()" : 1 , "getName()" : 1 , "getPath()" : 1 , "isHttpOnly()" : 1 , "isSecure()" : 1 , "setComment(String)" : 1 , "setDomain(String)" : 1 , "setHttpOnly(boolean)" : 1 , "setMaxAge(int)" : 1 , "setName(String)" : 1 , "setPath(String)" : 1 , "setSecure(boolean)" : 1}},{ "className" : "javax::management::NotificationListener" , "selectors" : { "handleNotification(Notification,Object)" : 16}},{ "className" : "org::apache::el::util::Validation" , "selectors" : { "isIdentifier(String)" : 2}},{ "className" : "org::apache::tomcat::jni::File" , "selectors" : { "open(String,int,int,long)" : 1}},{ "className" : "org::apache::tomcat::jni::SSLContext" , "selectors" : { "make(long,int,int)" : 1 , "setCACertificate(long,String,String)" : 1 , "setCARevocation(long,String,String)" : 1 , "setCertificate(long,String,String,String,int)" : 1 , "setCertificateChainFile(long,String,boolean)" : 1 , "setCipherSuite(long,String)" : 1 , "setOptions(long,int)" : 1 , "setVerify(long,int,int)" : 1}},{ "className" : "org::apache::catalina::deploy::JspPropertyGroup" , "selectors" : { "getBuffer()" : 3 , "getDefaultContentType()" : 3 , "getDeferredSyntax()" : 3 , "getElIgnored()" : 3 , "getErrorOnUndeclaredNamespace()" : 3 , "getIncludeCodas()" : 2 , "getIncludePreludes()" : 2 , "getIsXml()" : 3 , "getPageEncoding()" : 3 , "getScriptingInvalid()" : 3 , "getTrimWhitespace()" : 3 , "getUrlPattern()" : 5}},{ "className" : "javax::el::BeanELResolver::ConcurrentCache" , "selectors" : { "get(K)" : 1 , "put(K,V)" : 1}},{ "className" : "org::apache::catalina::core::ApplicationFilterChain" , "selectors" : { "ApplicationFilterChain()" : 3 , "addFilter(ApplicationFilterConfig)" : 4 , "doFilter(ServletRequest,ServletResponse)" : 3 , "doFilterEvent(CometEvent)" : 4 , "getLastServicedRequest()" : 1 , "getLastServicedResponse()" : 1 , "internalDoFilter(ServletRequest,ServletResponse)" : 2 , "internalDoFilterEvent(CometEvent)" : 2 , "release()" : 2 , "reuse()" : 2 , "setServlet(Servlet)" : 1 , "setSupport(InstanceSupport)" : 1}},{ "className" : "org::apache::jasper::compiler::Collector" , "selectors" : { "collect(Compiler,Nodes)" : 1}},{ "className" : "org::apache::tomcat::util::net::AprEndpoint::Poller" , "selectors" : { "Poller(boolean)" : 2 , "add(long)" : 11 , "destroy()" : 3 , "getKeepAliveCount()" : 1 , "init()" : 3}},{ "className" : "org::apache::catalina::startup::NamingRuleSet" , "selectors" : { "NamingRuleSet(String)" : 4}},{ "className" : "org::apache::catalina::util::DOMWriter" , "selectors" : { "DOMWriter(String,boolean)" : 1 , "DOMWriter(Writer,boolean)" : 1 , "getWriterEncoding()" : 2 , "normalize(String)" : 3 , "print(Node)" : 4 , "setQualifiedNames(boolean)" : 1 , "sortAttributes(NamedNodeMap)" : 1}},{ "className" : "org::apache::catalina::deploy::LoginConfig" , "selectors" : { "LoginConfig()" : 1 , "LoginConfig(String,String,String,String)" : 1 , "equals(Object)" : 1 , "getAuthMethod()" : 7 , "getErrorPage()" : 5 , "getLoginPage()" : 5 , "getRealmName()" : 4 , "setAuthMethod(String)" : 2 , "setErrorPage(String)" : 2 , "setLoginPage(String)" : 2 , "setRealmName(String)" : 1}},{ "className" : "org::apache::catalina::core::TestStandardContextAliases::TestServlet" , "selectors" : { "TestServlet()" : 1}},{ "className" : "org::apache::jasper::el::JspELException" , "selectors" : { "JspELException(String,ELException)" : 6}},{ "className" : "org::apache::catalina::connector::RequestFacade::GetParameterPrivilegedAction" , "selectors" : { "GetParameterPrivilegedAction(String)" : 1}},{ "className" : "org::apache::tomcat::util::modeler::modules::MbeansDescriptorsDigesterSource" , "selectors" : { "createDigester(Registry)" : 1 , "execute()" : 1 , "setLocation(String)" : 1 , "setRegistry(Registry)" : 1 , "setSource(Object)" : 1 , "setType(String)" : 1}},{ "className" : "org::apache::catalina::startup::CallParamMultiRule" , "selectors" : { "CallParamMultiRule(int)" : 2}},{ "className" : "org::apache::tomcat::util::digester::CallParamRule" , "selectors" : { "CallParamRule(int)" : 2 , "CallParamRule(int,String)" : 2 , "CallParamRule(int,boolean)" : 1 , "CallParamRule(int,int)" : 1}},{ "className" : "org::apache::catalina::core::ApplicationResponse" , "selectors" : { "ApplicationResponse(ServletResponse,boolean)" : 2 , "setIncluded(boolean)" : 1}},{ "className" : "org::apache::jasper::compiler::Node::JspRoot" , "selectors" : { "Node" : 1}},{ "className" : "org::apache::tomcat::util::http::TestCookies" , "selectors" : { "suite()::TestSuite" : 2 , "test(String,String,String)" : 4 , "test(String,String,String,String,String)" : 24 , "test(String,String,String,String,String,String,String)" : 9 , "test(String,String,String,String,String,String,String,String,String)" : 1 , "test(String,int)" : 2}},{ "className" : "org::apache::catalina::startup::TldConfig" , "selectors" : { "TldConfig()" : 1 , "addApplicationListener(String)" : 1 , "addTaglibUri(String)" : 1 , "createTldDigester(boolean,boolean)" : 1 , "execute()" : 1 , "getTldListeners()" : 1 , "init()" : 1 , "isKnownTaglibUri(String)" : 1 , "isKnownWebxmlTaglibUri(String)" : 1 , "setTldNamespaceAware(boolean)" : 1 , "setTldValidation(boolean)" : 1 , "tldScanDir(File)" : 2 , "tldScanJar(JarURLConnection)" : 1 , "tldScanResourcePaths(String)" : 2 , "tldScanStream(InputStream)" : 4 , "tldScanWebXml()" : 1}},{ "className" : "org::apache::catalina::tribes::group::interceptors::NonBlockingCoordinator::CoordinationMessage" , "selectors" : { "CoordinationMessage(MemberImpl,MemberImpl,MemberImpl[],UniqueId,byte[])" : 1 , "CoordinationMessage(XByteBuffer)" : 1 , "getBuffer()" : 1 , "getId()" : 4 , "getLeader()" : 2 , "getMembers()" : 12 , "getSource()" : 1 , "getType()" : 1 , "parse()" : 6 , "write()" : 2}},{ "className" : "org::apache::tomcat::util::bcel::classfile::ConstantFloat" , "selectors" : { "ConstantFloat(DataInput)" : 1 , "ConstantFloat(float)" : 1 , "getBytes()" : 3}},{ "className" : "org::apache::catalina::valves::ExtendedAccessLogValve::RequestAttributeElement" , "selectors" : { "RequestAttributeElement(String)" : 1}},{ "className" : "org::apache::catalina::startup::TestTomcat::HelloWorldJndi" , "selectors" : { "HelloWorldJndi()" : 2}},{ "className" : "org::apache::catalina::core::AsyncContextImpl" , "selectors" : { "AsyncContextImpl(Request)" : 1 , "complete()" : 2 , "dispatch(ServletContext,String)" : 1 , "dispatch(String)" : 1 , "doInternalComplete(boolean)" : 6 , "doInternalDispatch()" : 3 , "getRequest()" : 1 , "getResponse()" : 2 , "getServletRequest()" : 2 , "getServletResponse()" : 1 , "getState()" : 10 , "init(ServletRequest,ServletResponse)" : 1 , "isCompleted()" : 1 , "isStarted()" : 2 , "recycle()" : 3 , "setErrorState(Throwable)" : 2 , "setHasOriginalRequestAndResponse(boolean)" : 1 , "setStarted(Context)" : 1 , "setTimeout(long)" : 1 , "setTimeoutState()" : 1}},{ "className" : "org::apache::catalina::ha::context::ReplicatedContext::MultiEnumeration<T>" , "selectors" : { "MultiEnumeration(Enumeration<T>[])" : 1}},{ "className" : "org::apache::catalina::startup::Embedded" , "selectors" : { "Embedded(Realm)" : 1 , "createConnector(String,int,String)" : 2 , "createConnector(String,int,boolean)" : 1 , "initDirs()" : 1 , "initNaming()" : 1 , "setRealm(Realm)" : 1 , "setSecurityProtection()" : 1}},{ "className" : "org::apache::catalina::core::NamingContextListener" , "selectors" : { "NamingContextListener()" : 3 , "addEjb(ContextEjb)" : 3 , "addEnvironment(ContextEnvironment)" : 3 , "addLocalEjb(ContextLocalEjb)" : 2 , "addResource(ContextResource)" : 3 , "addResourceEnvRef(ContextResourceEnvRef)" : 3 , "addResourceLink(ContextResourceLink)" : 3 , "addService(ContextService)" : 3 , "createNamingContext()" : 1 , "createObjectName(ContextResource)" : 1 , "createSubcontexts(Context,String)" : 6 , "getEnvContext()" : 1 , "getName()" : 10 , "processGlobalResourcesChange(String,Object,Object)" : 1 , "removeEjb(String)" : 2 , "removeEnvironment(String)" : 2 , "removeLocalEjb(String)" : 2 , "removeResource(String)" : 2 , "removeResourceEnvRef(String)" : 2 , "removeResourceLink(String)" : 2 , "removeService(String)" : 2 , "setName(String)" : 1}},{ "className" : "org::apache::catalina::tribes::test::io::TestSenderConnections::TestMsgListener" , "selectors" : { "TestMsgListener(String)" : 1}},{ "className" : "org::apache::tomcat::util::bcel::classfile::ParameterAnnotations" , "selectors" : { "ParameterAnnotations(byte,int,int,DataInputStream,ConstantPool)" : 2 , "ParameterAnnotations(byte,int,int,ParameterAnnotationEntry[],ConstantPool)" : 1 , "setParameterAnnotationTable(ParameterAnnotationEntry[])" : 1}},{ "className" : "org::apache::tomcat::util::bcel::classfile::ConstantString" , "selectors" : { "ConstantString(DataInput)" : 1 , "ConstantString(int)" : 1 , "getStringIndex()" : 3}},{ "className" : "org::apache::catalina::tribes::demos::MapDemo::Shutdown" , "selectors" : { "Shutdown(ManagedChannel)" : 1}},{ "className" : "org::apache::catalina::filters::CsrfPreventionFilter" , "selectors" : { "generateNonce()" : 1}},{ "className" : "org::apache::jasper::compiler::Validator::ValidateVisitor" , "selectors" : { "ValidateVisitor(Compiler)" : 1 , "checkNamedAttributes(CustomTag,JspAttribute[],int,Hashtable<String,Object>)" : 1 , "checkXmlAttributes(CustomTag,JspAttribute[],Hashtable<String,Object>)" : 1 , "containsDeferredSyntax(String)" : 1 , "findUri(String,Node)" : 1 , "getBuffer()" : 1 , "getFunctionMapper(Nodes)" : 3 , "getFunctionMapper(Nodes)::MapperELVisitor" : 1 , "getFunctionMapper(Nodes)::ValidateFunctionMapper" : 2 , "getJspAttribute(TagAttributeInfo,String,String,String,String,Node,boolean)" : 12 , "getMethod(Function)" : 1 , "getParameters(Function)" : 1 , "isExpression(Node,String,boolean)" : 1 , "prepareExpression(Nodes,Node,String)" : 1 , "processSignature(Function)" : 1 , "throwErrorIfExpression(Node,String,String)" : 12 , "validateFunctions(Nodes,Node)" : 3 , "validateFunctions(Nodes,Node)::FVVisitor" : 1}},{ "className" : "org::apache::catalina::startup::HostConfig" , "selectors" : { "HostConfig()" : 2 , "addWatchedResources(DeployedApplication,String,Context)" : 8 , "appBase()" : 14 , "check()" : 1 , "checkResources(DeployedApplication)" : 2 , "configBase()" : 9 , "createDigester()" : 1 , "deployApps()" : 2 , "deployApps(String)" : 1 , "deployDescriptor(String,File,String)" : 2 , "deployDescriptors(File,String[])" : 1 , "deployDirectories(File,String[])" : 1 , "deployDirectory(String,File,String)" : 2 , "deployWAR(String,File,String)" : 2 , "deployWARs(File,String[])" : 1 , "deploymentExists(String)" : 3 , "getConfigFile(String)" : 1 , "getDocBase(String)" : 1 , "isServiced(String)" : 5 , "returnCanonicalPath(String)" : 3 , "setCopyXML(boolean)" : 1 , "setDeployXML(boolean)" : 1 , "setUnpackWARs(boolean)" : 1 , "start()" : 1 , "stop()" : 1 , "undeployApps()" : 1 , "validateContextPath(File,String)" : 1}},{ "className" : "org::apache::jasper::compiler::ELNode::Nodes" , "selectors" : { "Nodes()" : 2 , "add(ELNode)" : 6 , "containsEL()" : 1 , "getMapName()" : 6 , "isEmpty()" : 1 , "iterator()" : 2 , "setMapName(String)" : 2 , "visit(Visitor)" : 4}},{ "className" : "org::apache::catalina::valves::AccessLogValve::LocalServerNameElement" , "selectors" : { "LocalServerNameElement()" : 1}},{ "className" : "org::apache::catalina::SessionListener" , "selectors" : { "sessionEvent(SessionEvent)" : 1}},{ "className" : "org::apache::catalina::ha::ClusterSession" , "selectors" : { "isPrimarySession()" : 2}},{ "className" : "org::apache::jasper::compiler::Node::GetProperty" , "selectors" : { "Node" : 3}},{ "className" : "org::apache::catalina::valves::RemoteHostValve" , "selectors" : { "RemoteHostValve()" : 1}},{ "className" : "org::apache::catalina::tribes::test::interceptors::TestOrderInterceptor::TestListener" , "selectors" : { "TestListener(int)" : 1}},{ "className" : "org::apache::naming::JndiPermission" , "selectors" : { "JndiPermission(String)" : 2}},{ "className" : "org::apache::catalina::core::AsyncListenerWrapper" , "selectors" : { "AsyncListenerWrapper()" : 2 , "fireOnComplete(AsyncEvent)" : 1 , "fireOnError(AsyncEvent)" : 1 , "fireOnTimeout(AsyncEvent)" : 1 , "setListener(AsyncListener)" : 2}},{ "className" : "javax::management::ServiceNotFoundException" , "selectors" : { "ServiceNotFoundException(String)" : 15}},{ "className" : "org::apache::catalina::ssi::ResponseIncludeWrapper" , "selectors" : { "ResponseIncludeWrapper(ServletContext,HttpServletRequest,HttpServletResponse,ServletOutputStream)" : 2 , "flushOutputStreamOrWriter()" : 2 , "getContentType()" : 2 , "getLastModified()" : 1 , "setContentType(String)" : 2}},{ "className" : "org::apache::tomcat::util::bcel::classfile::CodeException" , "selectors" : { "CodeException(DataInput)" : 1 , "CodeException(int,int,int,int)" : 1 , "copy()" : 1 , "dump(DataOutputStream)" : 1 , "toString(ConstantPool,boolean)" : 1}},{ "className" : "org::apache::jasper::util::Entry" , "selectors" : { "Entry(T)" : 1 , "getContent()" : 1 , "getNext()" : 1 , "getPrevious()" : 5 , "setNext(Entry<T>)" : 4 , "setPrevious(Entry<T>)" : 4}},{ "className" : "org::apache::tomcat::util::net::jsse::JSSESocketFactory" , "selectors" : { "JSSESocketFactory()" : 1 , "checkConfig()" : 1 , "configureClientAuth(SSLServerSocket)" : 1 , "getCRLs(String)" : 1 , "getEnabledCiphers(String,String[])" : 1 , "getEnabledProtocols(SSLServerSocket,String)" : 1 , "getKeyManagers(String,String,String,String)" : 1 , "getKeystore(String,String,String)" : 1 , "getKeystorePassword()" : 1 , "getParameters(String,String,KeyStore)" : 1 , "getStore(String,String,String,String)" : 2 , "getTrustManagers(String,String,String)" : 1 , "getTrustStore(String,String)" : 1 , "init()" : 3 , "initServerSocket(ServerSocket)" : 4 , "setEnabledProtocols(SSLServerSocket,String[])" : 1}},{ "className" : "java::security::cert::PKIXBuilderParameters" , "selectors" : { "PKIXBuilderParameters(KeyStore,CertSelector)" : 1 , "setMaxPathLength(int)" : 1}},{ "className" : "org::apache::catalina::deploy::SecurityRoleRef" , "selectors" : { "SecurityRoleRef()" : 1 , "getLink()" : 2 , "getName()" : 2 , "setLink(String)" : 1 , "setName(String)" : 1}},{ "className" : "org::apache::tomcat::util::bcel::classfile::AnnotationDefault" , "selectors" : { "AnnotationDefault(int,int,DataInputStream,ConstantPool)" : 1 , "AnnotationDefault(int,int,ElementValue,ConstantPool)" : 1 , "setDefaultValue(ElementValue)" : 1}},{ "className" : "org::apache::jasper::compiler::ELNode" , "selectors" : { "accept(Visitor)" : 1}},{ "className" : "org::apache::coyote::ajp::AjpAprProtocol" , "selectors" : { "getAddress()" : 2 , "getDomain()" : 3 , "getName()" : 10 , "setSoLinger(int)" : 1 , "setSoTimeout(int)" : 1 , "setTcpNoDelay(boolean)" : 1}},{ "className" : "java::util::concurrent::LinkedBlockingDeque" , "selectors" : { "offer(E)" : 1 , "offer(E,long,TimeUnit)" : 1 , "poll(long,TimeUnit)" : 1 , "pollFirst()" : 1 , "pollLast()" : 1}},{ "className" : "org::apache::naming::HandlerRef" , "selectors" : { "HandlerRef(String,String)" : 1 , "HandlerRef(String,String,String,String)" : 1 , "getFactoryClassName()" : 1}},{ "className" : "org::apache::catalina::realm::LockOutRealm" , "selectors" : { "isLocked(String)" : 3 , "registerAuthFailure(String)" : 6 , "registerAuthSuccess(String)" : 4}},{ "className" : "org::apache::catalina::tribes::test::transport::SocketNioReceive::MyList" , "selectors" : { "MyList()" : 1}},{ "className" : "org::apache::jasper::compiler::Node::CustomTag" , "selectors" : { "Node" : 8 , "checkIfAttributeIsJspFragment(String)" : 2 , "getAtETag()" : 5 , "getAtSTag()" : 4 , "getChildInfo()" : 4 , "getCustomNestingLevel()" : 9 , "getCustomTagParent()" : 1 , "getJspAttributes()" : 5 , "getNumCount()" : 2 , "getPrefix()" : 5 , "getScriptingVars(int)" : 3 , "getTagData()" : 7 , "getTagFileInfo()" : 2 , "getTagHandlerClass()" : 2 , "getTagHandlerPoolName()" : 3 , "getTagInfo()" : 8 , "getTagPluginContext()" : 1 , "getTagVariableInfos()" : 8 , "getURI()" : 2 , "getVariableInfos()" : 7 , "hasEmptyBody()" : 4 , "implementsBodyTag()" : 3 , "implementsDynamicAttributes()" : 1 , "implementsIterationTag()" : 2 , "implementsJspIdConsumer()" : 5 , "implementsSimpleTag()" : 4 , "implementsTryCatchFinally()" : 8 , "isTagFile()" : 1 , "makeCustomNestingLevel()" : 2 , "setAtETag(Nodes)" : 1 , "setAtSTag(Nodes)" : 1 , "setCustomTagParent(CustomTag)" : 1 , "setJspAttributes(JspAttribute[])" : 1 , "setNumCount(Integer)" : 1 , "setScriptingVars(List<Object>,int)" : 1 , "setTagData(TagData)" : 1 , "setTagHandlerClass(Class<?>)" : 1 , "setTagHandlerPoolName(String)" : 1 , "setTagPluginContext(TagPluginContext)" : 1 , "setUseTagPlugin(boolean)" : 2 , "useTagPlugin()" : 2}},{ "className" : "org::apache::catalina::core::ApplicationJspPropertyGroupDescriptor" , "selectors" : { "ApplicationJspPropertyGroupDescriptor(JspPropertyGroup)" : 1}},{ "className" : "org::apache::catalina::tribes::transport::nio::NioReceiver" , "selectors" : { "NioReceiver()" : 2 , "addEvent(Runnable)" : 2 , "bind()" : 1 , "cancelledKey(SelectionKey)" : 4 , "closeSelector()" : 2 , "events()" : 1 , "listen()" : 1 , "readDataFromSocket(SelectionKey)" : 1 , "registerChannel(Selector,SelectableChannel,int,Object)" : 2 , "socketTimeouts()" : 1 , "start()" : 1 , "stopListening()" : 1}},{ "className" : "java::util::concurrent::RejectedExecutionException" , "selectors" : { "RejectedExecutionException()" : 1 , "RejectedExecutionException(String)" : 6 , "RejectedExecutionException(String,Throwable)" : 1 , "RejectedExecutionException(Throwable)" : 1}},{ "className" : "org::apache::catalina::tribes::ByteMessage" , "selectors" : { "ByteMessage(byte[])" : 3 , "getMessage()" : 2}},{ "className" : "org::apache::catalina::ha::authenticator::ClusterSingleSignOn" , "selectors" : { "associateLocal(String,Session)" : 2 , "deregisterLocal(String)" : 2 , "deregisterLocal(String,Session)" : 2 , "getCluster()" : 6 , "registerLocal(String,Principal,String,String,String)" : 2 , "removeSessionLocal(String,Session)" : 2 , "setCluster(CatalinaCluster)" : 2 , "updateLocal(String,Principal,String,String,String)" : 2}},{ "className" : "org::apache::catalina::tribes::io::ObjectReader" , "selectors" : { "ObjectReader(Socket)" : 2 , "ObjectReader(SocketChannel)" : 1 , "ObjectReader(int)" : 1 , "access()" : 1 , "append(ByteBuffer,int,boolean)" : 2 , "append(byte[],int,int,boolean)" : 3 , "close()" : 2 , "count()" : 2 , "execute()" : 2 , "finish()" : 3 , "getLastAccess()" : 2 , "hasPackage()" : 2 , "isAccessed()" : 1 , "isCancelled()" : 1 , "setCancelled(boolean)" : 2 , "setLastAccess(long)" : 3}},{ "className" : "org::apache::catalina::realm::DataSourceRealm" , "selectors" : { "DataSourceRealm()" : 1 , "authenticate(Connection,String,String)" : 1 , "close(Connection)" : 4 , "credentials(Connection,String)" : 1 , "getPassword(Connection,String)" : 3 , "getRoles(Connection,String)" : 3 , "open()" : 4 , "roles(Connection,String)" : 1 , "setDataSourceName(String)" : 1 , "setRoleNameCol(String)" : 1 , "setUserCredCol(String)" : 1 , "setUserNameCol(String)" : 1 , "setUserRoleTable(String)" : 1 , "setUserTable(String)" : 1}},{ "className" : "org::apache::tomcat::util::http::TestBug49158::TestBug49158Servlet" , "selectors" : { "TestBug49158Servlet()" : 1}},{ "className" : "org::apache::catalina::tribes::transport::RxTaskPool" , "selectors" : { "RxTaskPool(int,int,TaskCreator)" : 2 , "available()" : 1 , "configureTask(AbstractRxTask)" : 1 , "getRxTask()" : 2 , "returnWorker(AbstractRxTask)" : 3}},{ "className" : "org::apache::catalina::tribes::group::RpcMessage::NoRpcChannelReply" , "selectors" : { "RpcMessage" : 1}},{ "className" : "org::apache::catalina::manager::util::BaseSessionComparator" , "selectors" : { "getComparableObject(Session)" : 2}},{ "className" : "org::apache::catalina::connector::RequestFacade::GetHeadersPrivilegedAction" , "selectors" : { "GetHeadersPrivilegedAction(String)" : 1}},{ "className" : "org::apache::catalina::filters::ExpiresFilter" , "selectors" : { "ExpiresFilter()" : 3 , "commaDelimitedListToIntArray(String)" : 1 , "commaDelimitedListToStringArray(String)" : 1 , "contains(String,String)" : 3 , "getDefaultExpiresConfiguration()" : 1 , "getExcludedResponseStatusCodesAsInts()" : 1 , "getExpirationDate(ExpiresConfiguration,XHttpServletResponse)" : 4 , "getExpirationDate(XHttpServletResponse)" : 1 , "getExpiresConfigurationByContentType()" : 4 , "intsToCommaDelimitedString(int[])" : 3 , "isEligibleToExpirationHeaderGeneration(HttpServletRequest,XHttpServletResponse)" : 1 , "isEmpty(String)" : 1 , "onBeforeWriteResponseBody(HttpServletRequest,XHttpServletResponse)" : 3 , "parseExpiresConfiguration(String)" : 4 , "startsWithIgnoreCase(String,String)" : 2 , "substringBefore(String,String)" : 2 , "toString()" : 1}},{ "className" : "org::apache::tomcat::jni::SSL" , "selectors" : { "getLastError()" : 1 , "hasOp(int)" : 1 , "versionString()" : 1}},{ "className" : "org::apache::tomcat::util::threads::ResizableExecutor" , "selectors" : { "getActiveCount()" : 1 , "getMaxThreads()" : 1 , "getPoolSize()" : 1 , "resizePool(int,int)" : 2}},{ "className" : "org::apache::catalina::ssi::ExpressionParseTree::OrNode" , "selectors" : { "OrNode()" : 1}},{ "className" : "org::apache::naming::resources::BaseDirContext" , "selectors" : { "BaseDirContext()" : 2 , "BaseDirContext(Hashtable<String,Object>)" : 2 , "addAlias(String,BaseDirContext)" : 1 , "addResourcesJar(URL)" : 1 , "allocate()" : 2 , "bind(String,Object)" : 1 , "bind(String,Object,Attributes)" : 2 , "createSubcontext(String)" : 1 , "createSubcontext(String,Attributes)" : 2 , "destroySubcontext(String)" : 1 , "doGetAttributes(String,String[])" : 2 , "doGetRealPath(String)" : 2 , "doListBindings(String)" : 2 , "doLookup(String)" : 1 , "findAlias(String)" : 4 , "getAttributes(String)" : 2 , "getAttributes(String,String[])" : 3 , "getCacheMaxSize()" : 3 , "getCacheObjectMaxSize()" : 1 , "getCacheTTL()" : 1 , "getDocBase()" : 3 , "getRealPath(String)" : 2 , "getSchema(String)" : 1 , "getSchemaClassDefinition(String)" : 1 , "isCached()" : 1 , "list(String)" : 1 , "listBindings(String)" : 2 , "lookup(String)" : 5 , "lookupLink(String)" : 1 , "modifyAttributes(String,ModificationItem[])" : 1 , "modifyAttributes(String,int,Attributes)" : 1 , "rebind(String,Object)" : 1 , "rebind(String,Object,Attributes)" : 2 , "release()" : 5 , "rename(String,String)" : 1 , "search(String,Attributes)" : 1 , "search(String,Attributes,String[])" : 1 , "search(String,String,Object[],SearchControls)" : 1 , "search(String,String,SearchControls)" : 1 , "setAliases(String)" : 1 , "setCacheMaxSize(int)" : 2 , "setCacheObjectMaxSize(int)" : 1 , "setCacheTTL(int)" : 2 , "setCached(boolean)" : 2 , "setDocBase(String)" : 4 , "unbind(String)" : 1}},{ "className" : "org::apache::catalina::authenticator::AuthenticatorBase" , "selectors" : { "AuthenticatorBase()" : 1 , "associate(String,Session)" : 5 , "authenticate(Request,HttpServletResponse,LoginConfig)" : 2 , "generateSessionId()" : 1 , "getContainer()" : 1 , "getDigest()" : 1 , "getEntropy()" : 1 , "getRandom()" : 1 , "reauthenticateFromSSO(String,Request)" : 2 , "register(Request,HttpServletResponse,Principal,String,String,String)" : 5 , "setEntropy(String)" : 1}},{ "className" : "org::apache::coyote::http11::filters::IdentityOutputFilter" , "selectors" : { "IdentityOutputFilter()" : 1}},{ "className" : "org::apache::catalina::startup::Tomcat::ExistingStandardWrapper" , "selectors" : { "ExistingStandardWrapper(Servlet)" : 1}},{ "className" : "org::apache::catalina::ha::session::ClusterSessionListener" , "selectors" : { "ClusterSessionListener()" : 1}},{ "className" : "java::io::CharArrayWriter" , "selectors" : { "CharArrayWriter()" : 52 , "CharArrayWriter(int)" : 6 , "append(char)" : 1 , "close()" : 12 , "flush()" : 3 , "reset()" : 11 , "size()" : 5 , "toCharArray()" : 9 , "toString()" : 51 , "write(String,int,int)" : 2 , "write(char[],int,int)" : 5 , "write(int)" : 69 , "writeTo(Writer)" : 7}},{ "className" : "org::apache::jasper::compiler::SmapStratum" , "selectors" : { "SmapStratum(String)" : 4 , "addFile(String)" : 2 , "addFile(String,String)" : 4 , "addLineData(int,String,int,int,int)" : 8 , "getStratumName()" : 1 , "getString()" : 2 , "optimizeLineSection()" : 2}},{ "className" : "org::apache::catalina::core::ApplicationPart" , "selectors" : { "ApplicationPart(FileItem,MultipartConfigElement)" : 1 , "getFilename()" : 1 , "getHeader(String)" : 1 , "getName()" : 2 , "getString(String)" : 2}},{ "className" : "org::apache::coyote::http11::filters::GzipOutputFilter" , "selectors" : { "GzipOutputFilter()" : 1}},{ "className" : "org::apache::catalina::tribes::group::interceptors::StaticMembershipInterceptor" , "selectors" : { "StaticMembershipInterceptor()" : 1 , "addStaticMember(Member)" : 1 , "getMembers()" : 1}},{ "className" : "cal::Entry" , "selectors" : { "Entry(String)" : 1 , "setDescription(String)" : 1}},{ "className" : "org::apache::tomcat::util::http::Cookies" , "selectors" : { "Cookies(MimeHeaders)" : 7 , "addCookie()" : 1 , "equals(String,byte[],int,int)" : 5 , "getCookie(int)" : 15 , "getCookieCount()" : 10 , "getQuotedValueEndPosition(byte[],int,int)" : 1 , "getTokenEndPosition(byte[],int,int,int,boolean)" : 2 , "isWhiteSpace(byte)" : 4 , "processCookieHeader(byte[],int,int)" : 7 , "processCookies(MimeHeaders)" : 1 , "recycle()" : 1 , "unescapeDoubleQuotes(ByteChunk)" : 1}},{ "className" : "org::apache::jasper::compiler::Node::ChildInfo" , "selectors" : { "ChildInfo()" : 4 , "hasIncludeAction()" : 2 , "hasParamAction()" : 1 , "hasScriptingVars()" : 2 , "hasSetProperty()" : 1 , "hasUseBean()" : 2 , "isScriptless()" : 3 , "setHasIncludeAction(boolean)" : 1 , "setHasParamAction(boolean)" : 1 , "setHasScriptingVars(boolean)" : 1 , "setHasSetProperty(boolean)" : 1 , "setHasUseBean(boolean)" : 1 , "setScriptless(boolean)" : 1}},{ "className" : "org::apache::el::parser::AstNegative" , "selectors" : { "AstNegative(int)" : 1}},{ "className" : "org::apache::catalina::startup::Bootstrap" , "selectors" : { "Bootstrap()" : 1 , "createClassLoader(String,ClassLoader)" : 3 , "getCatalinaBase()" : 2 , "getCatalinaHome()" : 3 , "init()" : 3 , "initClassLoaders()" : 1 , "load(String[])" : 3 , "setAwait(boolean)" : 1 , "setCatalinaBase()" : 1 , "setCatalinaHome()" : 1 , "start()" : 2 , "stop()" : 1 , "stopServer(String[])" : 1}},{ "className" : "org::apache::catalina::manager::HTMLManagerServlet" , "selectors" : { "deployInternal(String,String,String)" : 1 , "displaySessionDetailPage(HttpServletRequest,HttpServletResponse,String,String)" : 1 , "displaySessionsListPage(String,HttpServletRequest,HttpServletResponse)" : 1 , "doGet(HttpServletRequest,HttpServletResponse)" : 1 , "doSessions(String,HttpServletRequest,HttpServletResponse)" : 1 , "expireSessions(String,HttpServletRequest)" : 1 , "extractFilename(String)" : 1 , "findleaks()" : 1 , "getComparator(String)" : 1 , "getSessionForPathAndId(String,String)" : 4 , "getSessionsForPath(String)" : 1 , "invalidateSessions(String,String[])" : 1 , "list(HttpServletRequest,HttpServletResponse,String)" : 2 , "reload(String)" : 1 , "removeSessionAttribute(String,String,String)" : 1 , "sessions(String,int)" : 2 , "start(String)" : 1 , "stop(String)" : 1 , "undeploy(String)" : 1 , "upload(HttpServletRequest)" : 1}},{ "className" : "org::apache::catalina::valves::AccessLogValve::ByteSentElement" , "selectors" : { "ByteSentElement(boolean)" : 3}},{ "className" : "org::apache::jasper::el::JspPropertyNotWritableException" , "selectors" : { "JspPropertyNotWritableException(String,PropertyNotWritableException)" : 1}},{ "className" : "org::apache::catalina::manager::StatusTransformer" , "selectors" : { "filter(Object)" : 10 , "formatSeconds(Object)" : 2 , "formatSize(Object,boolean)" : 11 , "formatTime(Object,boolean)" : 12 , "setContentType(HttpServletResponse,int)" : 1 , "writeBody(PrintWriter,Object[],int)" : 1 , "writeConnectorState(PrintWriter,ObjectName,String,MBeanServer,Vector<ObjectName>,Vector<ObjectName>,int)" : 1 , "writeContext(PrintWriter,ObjectName,MBeanServer,int)" : 1 , "writeDetailedState(PrintWriter,MBeanServer,int)" : 1 , "writeFooter(PrintWriter,int)" : 1 , "writeHeader(PrintWriter,int)" : 1 , "writeJspMonitor(PrintWriter,Set<ObjectName>,MBeanServer,int)" : 1 , "writeManager(PrintWriter,ObjectName,MBeanServer,int)" : 1 , "writeManager(PrintWriter,Object[],int)" : 1 , "writeOSState(PrintWriter,int)" : 1 , "writePageHeading(PrintWriter,Object[],int)" : 1 , "writeProcessorState(PrintWriter,ObjectName,MBeanServer,int)" : 2 , "writeServerInfo(PrintWriter,Object[],int)" : 1 , "writeVMState(PrintWriter,int)" : 1 , "writeWrapper(PrintWriter,ObjectName,MBeanServer,int)" : 1}},{ "className" : "org::apache::coyote::ajp::AjpAprProcessor" , "selectors" : { "AjpAprProcessor(int,AprEndpoint)" : 1 , "action(ActionCode,Object)" : 2 , "asyncDispatch(long,SocketStatus)" : 1 , "finish()" : 2 , "flush()" : 4 , "getRequest()" : 2 , "parseHost(MessageBytes)" : 1 , "prepareRequest()" : 1 , "prepareResponse()" : 4 , "process(long)" : 1 , "read(int)" : 2 , "readMessage(AjpMessage,boolean,boolean)" : 2 , "readt(int,boolean)" : 1 , "receive()" : 2 , "recycle()" : 4 , "refillReadBuffer()" : 1 , "setAdapter(Adapter)" : 1 , "setRequiredSecret(String)" : 1 , "setTomcatAuthentication(boolean)" : 1}},{ "className" : "org::apache::tomcat::util::bcel::classfile::InnerClasses" , "selectors" : { "InnerClasses(int,int,DataInputStream,ConstantPool)" : 1 , "InnerClasses(int,int,InnerClass[],ConstantPool)" : 1 , "setInnerClasses(InnerClass[])" : 1}},{ "className" : "org::apache::catalina::deploy::NamingResources" , "selectors" : { "NamingResources()" : 4 , "addEjb(ContextEjb)" : 1 , "addEnvironment(ContextEnvironment)" : 7 , "addLocalEjb(ContextLocalEjb)" : 1 , "addMessageDestinationRef(MessageDestinationRef)" : 3 , "addPropertyChangeListener(PropertyChangeListener)" : 2 , "addResource(ContextResource)" : 4 , "addResourceEnvRef(ContextResourceEnvRef)" : 2 , "addResourceLink(ContextResourceLink)" : 3 , "addService(ContextService)" : 2 , "findEjb(String)" : 1 , "findEjbs()" : 2 , "findEnvironment(String)" : 6 , "findEnvironments()" : 5 , "findLocalEjb(String)" : 1 , "findLocalEjbs()" : 1 , "findMessageDestinationRef(String)" : 1 , "findMessageDestinationRefs()" : 2 , "findResource(String)" : 3 , "findResourceEnvRef(String)" : 1 , "findResourceEnvRefs()" : 2 , "findResourceLink(String)" : 4 , "findResourceLinks()" : 4 , "findResources()" : 5 , "findService(String)" : 1 , "findServices()" : 2 , "getContainer()" : 4 , "getServer()" : 1 , "getTransaction()" : 1 , "removeEnvironment(String)" : 3 , "removeMessageDestinationRef(String)" : 1 , "removePropertyChangeListener(PropertyChangeListener)" : 2 , "removeResource(String)" : 2 , "removeResourceLink(String)" : 3 , "setContainer(Object)" : 4}},{ "className" : "org::apache::tomcat::util::http::MimeHeaders" , "selectors" : { "MimeHeaders()" : 2 , "addValue(String)" : 25 , "addValue(byte[],int,int)" : 5 , "clear()" : 3 , "createHeader()" : 4 , "findHeader(String,int)" : 1 , "getHeader(String)" : 4 , "getName(int)" : 10 , "getUniqueValue(String)" : 1 , "getValue(String)" : 29 , "getValue(int)" : 9 , "names()" : 2 , "recycle()" : 2 , "removeHeader(String)" : 2 , "removeHeader(int)" : 2 , "setValue(String)" : 39 , "size()" : 9 , "values(String)" : 2}},{ "className" : "javax::management::DynamicMBean" , "selectors" : { "getAttribute(String)" : 10 , "getAttributes(String[])" : 4 , "getMBeanInfo()" : 10 , "invoke(String,Object[],String[])" : 10 , "setAttribute(Attribute)" : 8 , "setAttributes(AttributeList)" : 4}},{ "className" : "org::apache::catalina::tribes::group::RpcCallback" , "selectors" : { "leftOver(Serializable,Member)" : 2 , "replyRequest(Serializable,Member)" : 1}},{ "className" : "org::apache::el::TesterBeanA" , "selectors" : { "TesterBeanA()" : 2 , "getName()" : 4 , "setBean(TesterBeanB)" : 1 , "setName(String)" : 3}},{ "className" : "javax::servlet::ServletRequestEvent" , "selectors" : { "ServletRequestEvent(ServletContext,ServletRequest)" : 2}},{ "className" : "org::apache::catalina::tribes::group::interceptors::TwoPhaseCommitInterceptor::MapEntry" , "selectors" : { "MapEntry(ChannelMessage,UniqueId,long)" : 1 , "expired(long,long)" : 1}},{ "className" : "org::apache::catalina::tribes::tipis::AbstractReplicatedMap::MapMessage" , "selectors" : { "MapMessage(byte[],int,boolean,Serializable,Serializable,byte[],Member,Member[])" : 13 , "deserialize(ClassLoader[])" : 4 , "getBackupNodes()" : 4 , "getDiffValue()" : 2 , "getKey()" : 6 , "getMapId()" : 1 , "getMsgType()" : 16 , "getPrimary()" : 8 , "getTypeDesc()" : 1 , "getValue()" : 14 , "isDiff()" : 1 , "key(ClassLoader[])" : 2 , "setKey(Serializable)" : 1 , "setPrimary(Member)" : 2 , "setValue(Serializable)" : 3 , "value(ClassLoader[])" : 2}},{ "className" : "org::apache::tomcat::util::net::ServerSocketFactory" , "selectors" : { "acceptSocket(ServerSocket)" : 1 , "createSocket(int,int)" : 1 , "createSocket(int,int,InetAddress)" : 1 , "getDefault()" : 1 , "handshake(Socket)" : 1 , "initSocket(Socket)" : 1 , "setAttribute(String,Object)" : 21}},{ "className" : "org::apache::jasper::compiler::PageInfo" , "selectors" : { "PageInfo(BeanRepository,String)" : 1 , "addDependant(String)" : 8 , "addImport(String)" : 1 , "addImports(List<String>)" : 2 , "addPrefix(String)" : 1 , "addPrefixMapping(String,String)" : 2 , "addTaglib(String,TagLibraryInfo)" : 3 , "containsPrefix(String)" : 1 , "getAutoFlush()" : 3 , "getBeanRepository()" : 2 , "getBuffer()" : 2 , "getBufferValue()" : 3 , "getContentType()" : 7 , "getDeferredSyntaxAllowedAsLiteral()" : 6 , "getDependants()" : 1 , "getDoctypeName()" : 2 , "getDoctypePublic()" : 2 , "getDoctypeSystem()" : 2 , "getErrorPage()" : 4 , "getExpressionFactory()" : 3 , "getExtends()" : 1 , "getExtends(boolean)" : 5 , "getImports()" : 1 , "getIncludeCoda()" : 2 , "getIncludePrelude()" : 2 , "getInfo()" : 3 , "getIsELIgnored()" : 6 , "getIsErrorPage()" : 3 , "getIsThreadSafe()" : 3 , "getJspFile()" : 1 , "getLanguage(boolean)" : 7 , "getNonCustomTagPrefix(String)" : 1 , "getOmitXmlDecl()" : 2 , "getSession()" : 3 , "getTaglib(String)" : 6 , "getTaglibs()" : 3 , "getTrimDirectiveWhitespaces()" : 6 , "getURI(String)" : 6 , "getVarInfoNames()" : 3 , "hasJspRoot()" : 1 , "hasTaglib(String)" : 1 , "isAutoFlush()" : 2 , "isDeferredSyntaxAllowedAsLiteral()" : 11 , "isELIgnored()" : 15 , "isErrorOnUndeclaredNamespace()" : 1 , "isErrorPage()" : 1 , "isJspPrefixHijacked()" : 1 , "isPluginDeclared(String)" : 1 , "isScriptingInvalid()" : 3 , "isSession()" : 4 , "isThreadSafe()" : 1 , "isTrimDirectiveWhitespaces()" : 1 , "popPrefixMapping(String)" : 1 , "pushPrefixMapping(String,String)" : 2 , "putNonCustomTagPrefix(String,Mark)" : 1 , "setAutoFlush(String,Node,ErrorDispatcher)" : 1 , "setBufferValue(String,Node,ErrorDispatcher)" : 2 , "setContentType(String)" : 4 , "setDeferredSyntaxAllowedAsLiteral(String,Node,ErrorDispatcher,boolean)" : 3 , "setDeferredSyntaxAllowedAsLiteral(boolean)" : 1 , "setDoctypeName(String)" : 1 , "setDoctypePublic(String)" : 1 , "setDoctypeSystem(String)" : 1 , "setELIgnored(boolean)" : 1 , "setErrorOnUndeclaredNamespace(boolean)" : 1 , "setErrorPage(String)" : 1 , "setExtends(String,PageDirective)" : 1 , "setHasJspRoot(boolean)" : 1 , "setIncludeCoda(Vector<String>)" : 1 , "setIncludePrelude(Vector<String>)" : 1 , "setInfo(String)" : 1 , "setIsELIgnored(String,Node,ErrorDispatcher,boolean)" : 3 , "setIsErrorPage(String,Node,ErrorDispatcher)" : 1 , "setIsJspPrefixHijacked(boolean)" : 1 , "setIsThreadSafe(String,Node,ErrorDispatcher)" : 1 , "setLanguage(String,Node,ErrorDispatcher,boolean)" : 2 , "setOmitXmlDecl(String)" : 1 , "setScriptingInvalid(boolean)" : 1 , "setScriptless(boolean)" : 1 , "setSession(String,Node,ErrorDispatcher)" : 1 , "setTrimDirectiveWhitespaces(String,Node,ErrorDispatcher,boolean)" : 2 , "setTrimDirectiveWhitespaces(boolean)" : 1}},{ "className" : "org::apache::tomcat::util::digester::NodeCreateRule::NodeBuilder" , "selectors" : { "NodeBuilder(Document,Node)" : 2}},{ "className" : "org::apache::catalina::realm::JAASCallbackHandler" , "selectors" : { "JAASCallbackHandler(JAASRealm,String,String)" : 2 , "JAASCallbackHandler(JAASRealm,String,String,String,String,String,String,String,String,String)" : 2}},{ "className" : "org::apache::catalina::ssi::ExpressionParseTree::AndNode" , "selectors" : { "AndNode()" : 1}},{ "className" : "org::apache::catalina::tribes::transport::ReceiverBase::TaskThreadFactory" , "selectors" : { "TaskThreadFactory(String)" : 1}},{ "className" : "org::apache::catalina::ha::context::ReplicatedContext::ReplApplContext" , "selectors" : { "ReplApplContext(ReplicatedContext)" : 2 , "getAttributeMap()" : 1 , "getFacade()" : 1 , "getParent()" : 1 , "setAttributeMap(AbstractMap<String,Object>)" : 1}},{ "className" : "org::apache::catalina::core::StandardContext::ContextFilterMaps" , "selectors" : { "ContextFilterMaps()" : 1 , "add(FilterMap)" : 1 , "addBefore(FilterMap)" : 1 , "asArray()" : 1 , "remove(FilterMap)" : 1}},{ "className" : "org::apache::catalina::realm::JAASRealm" , "selectors" : { "JAASRealm()" : 1 , "authenticate(String,CallbackHandler)" : 3 , "createPrincipal(String,Subject,LoginContext)" : 1 , "isUseContextClassLoader()" : 3 , "makeLegalForJAAS(String)" : 1 , "parseClassNames(String,List<String>)" : 2}},{ "className" : "org::apache::coyote::RequestInfo" , "selectors" : { "RequestInfo(Request)" : 1 , "getBytesReceived()" : 2 , "getBytesSent()" : 2 , "getErrorCount()" : 2 , "getMaxTime()" : 4 , "getProcessingTime()" : 2 , "getRequestCount()" : 2 , "getRpName()" : 5 , "getStage()" : 14 , "getWorkerThreadName()" : 1 , "setBytesReceived(long)" : 1 , "setBytesSent(long)" : 1 , "setErrorCount(int)" : 1 , "setGlobalProcessor(RequestGroupInfo)" : 10 , "setMaxTime(long)" : 1 , "setProcessingTime(long)" : 1 , "setRequestCount(int)" : 1 , "setRpName(ObjectName)" : 10 , "setStage(int)" : 44 , "setWorkerThreadName(String)" : 5 , "updateCounters()" : 1}},{ "className" : "javax::naming::Context" , "selectors" : { "addToEnvironment(String,Object)" : 24 , "bind(Name,Object)" : 7 , "bind(String,Object)" : 64 , "close()" : 105 , "composeName(Name,Name)" : 1 , "composeName(String,String)" : 2 , "createSubcontext(Name)" : 5 , "createSubcontext(String)" : 26 , "destroySubcontext(Name)" : 5 , "destroySubcontext(String)" : 12 , "getEnvironment()" : 23 , "getNameInNamespace()" : 5 , "getNameParser(Name)" : 5 , "getNameParser(String)" : 47 , "list(Name)" : 5 , "list(String)" : 24 , "listBindings(Name)" : 6 , "listBindings(String)" : 18 , "lookup(Name)" : 10 , "lookup(String)" : 676 , "lookupLink(Name)" : 4 , "lookupLink(String)" : 9 , "rebind(Name,Object)" : 11 , "rebind(String,Object)" : 22 , "removeFromEnvironment(String)" : 9 , "rename(Name,Name)" : 4 , "rename(String,String)" : 5 , "unbind(Name)" : 7 , "unbind(String)" : 31}},{ "className" : "org::apache::catalina::tribes::util::UUIDGenerator" , "selectors" : { "nextBytes(byte[],int,int,Random)" : 1 , "randomUUID(boolean)" : 7 , "randomUUID(boolean,byte[],int)" : 3}},{ "className" : "org::apache::coyote::ajp::AjpProtocol::AjpConnectionHandler" , "selectors" : { "<Initializer>()::anonymous(ConcurrentLinkedQueue)" : 2 , "AjpConnectionHandler(AjpProtocol)" : 1 , "createProcessor()" : 1 , "process(SocketWrapper<Socket>,SocketStatus)" : 1 , "register(AjpProcessor)" : 1 , "unregister(AjpProcessor)" : 2}},{ "className" : "org::apache::catalina::filters::FilterBase" , "selectors" : { "getLogger()" : 1 , "init(FilterConfig)" : 2}},{ "className" : "org::apache::tomcat::util::http::fileupload::FileUtils" , "selectors" : { "cleanDirectory(File)" : 1 , "cleanDirectoryOnExit(File)" : 1 , "deleteDirectory(File)" : 1 , "deleteDirectoryOnExit(File)" : 1 , "forceDelete(File)" : 2 , "forceDeleteOnExit(File)" : 1}},{ "className" : "org::apache::catalina::tribes::tipis::ReplicatedMapEntry" , "selectors" : { "applyDiff(byte[],int,int)" : 2 , "getDiff()" : 1 , "isDiffable()" : 2 , "isDirty()" : 1 , "lock()" : 3 , "resetDiff()" : 1 , "setOwner(Object)" : 5 , "unlock()" : 3}},{ "className" : "org::apache::tomcat::util::bcel::classfile::AttributeReader" , "selectors" : { "createAttribute(int,int,DataInputStream,ConstantPool)" : 1}},{ "className" : "org::apache::tomcat::util::net::SocketWrapper<T>" , "selectors" : { "SocketWrapper(E)" : 1}},{ "className" : "org::apache::catalina::Cluster" , "selectors" : { "backgroundProcess()" : 1 , "createManager(String)" : 1 , "getClusterName()" : 1 , "getContainer()" : 4 , "registerManager(Manager)" : 3 , "removeManager(Manager)" : 2 , "setContainer(Container)" : 1}},{ "className" : "org::apache::naming::resources::WARDirContext::Entry" , "selectors" : { "Entry(String,ZipEntry)" : 4 , "addChild(Entry)" : 2 , "getChild(String)" : 1 , "getChildren()" : 1 , "getEntry()" : 4 , "getName()" : 3}},{ "className" : "org::apache::catalina::connector::CoyotePrincipal" , "selectors" : { "CoyotePrincipal(String)" : 1}},{ "className" : "org::apache::catalina::tribes::transport::bio::util::SingleRemoveSynchronizedAddLock" , "selectors" : { "SingleRemoveSynchronizedAddLock()" : 1 , "abortRemove()" : 1 , "getAddWaitTimeout()" : 1 , "getRemoveWaitTimeout()" : 1 , "lockAdd()" : 1 , "lockRemove()" : 1 , "setAddWaitTimeout(long)" : 2 , "setRemoveWaitTimeout(long)" : 2 , "unlockAdd(boolean)" : 2 , "unlockRemove()" : 2}},{ "className" : "org::apache::tomcat::util::IntrospectionUtils" , "selectors" : { "addJarsFromClassPath(Vector<URL>,String)" : 2 , "addToClassPath(Vector<URL>,String)" : 1 , "addToolsJar(Vector<URL>)" : 1 , "callMethod1(Object,String,Object,String,ClassLoader)" : 4 , "callMethodN(Object,String,Object[],Class<?>[])" : 5 , "capitalize(String)" : 4 , "clear()" : 1 , "convert(String,Class<?>)" : 3 , "findMethod(Class<?>,String,Class<?>[])" : 8 , "findMethods(Class<?>)" : 5 , "getClassPath(Vector<URL>)" : 1 , "getFilesByExt(String,String)" : 1 , "getProperty(Object,String)" : 4 , "getURL(String,String)" : 2 , "guessInstall(String,String,String)" : 4 , "guessInstall(String,String,String,String)" : 1 , "replaceProperties(String,Hashtable<Object,Object>,PropertySource[])" : 2 , "setProperty(Object,String,String)" : 15 , "setProperty(Object,String,String,boolean)" : 2}},{ "className" : "javax::el::ListELResolver" , "selectors" : { "ListELResolver()" : 3 , "coerce(Object)" : 4}},{ "className" : "org::apache::catalina::users::MemoryRole" , "selectors" : { "MemoryRole(MemoryUserDatabase,String,String)" : 1}},{ "className" : "org::apache::tomcat::util::http::fileupload::FileUploadBase::InvalidContentTypeException" , "selectors" : { "InvalidContentTypeException(String)" : 1}},{ "className" : "org::apache::catalina::tribes::tipis::AbstractReplicatedMap" , "selectors" : { "AbstractReplicatedMap(MapOwner,Channel,long,String,int,float,int,ClassLoader[])" : 6 , "breakdown()" : 2 , "broadcast(int,boolean)" : 3 , "clear(boolean)" : 1 , "containsKey(Object)" : 1 , "excludeFromSet(Member[],Member[])" : 1 , "finalize()" : 1 , "get(Object)" : 1 , "getChannel()" : 6 , "getChannelSendOptions()" : 5 , "getExternalLoaders()" : 4 , "getInternal(Object)" : 1 , "getMapContextName()" : 6 , "getMapMembers()" : 9 , "getMapMembers(HashMap<Member,Long>)" : 2 , "getMapMembersExcl(Member[])" : 1 , "getMapOwner()" : 5 , "getNextBackupIndex()" : 2 , "getRpcChannel()" : 1 , "getRpcTimeout()" : 1 , "getStateMessageType()" : 1 , "inSet(Member,Member[])" : 1 , "init(MapOwner,Channel,String,long,int,ClassLoader[])" : 1 , "keySet()" : 1 , "keySetFull()" : 3 , "mapMemberAdded(Member)" : 5 , "memberAlive(Member)" : 2 , "memberDisappeared(Member)" : 2 , "messageReceived(Serializable,Member)" : 2 , "ping(long)" : 1 , "publishEntryInfo(Object,Object)" : 5 , "put(Object,Object)" : 4 , "put(Object,Object,boolean)" : 1 , "remove(Object)" : 3 , "remove(Object,boolean)" : 1 , "replicate(Object,boolean)" : 3 , "replicate(boolean)" : 1 , "setChannelSendOptions(int)" : 2 , "size()" : 1 , "sizeFull()" : 2 , "transferState()" : 2 , "wrap(Member)" : 1}},{ "className" : "javax::el::BeanELResolver::BeanProperty" , "selectors" : { "BeanProperty(Class<?>,PropertyDescriptor)" : 1 , "getPropertyType()" : 1 , "isReadOnly()" : 1 , "read(ELContext)" : 2 , "write(ELContext)" : 2}},{ "className" : "org::apache::coyote::http11::Http11AprProtocol::Http11ConnectionHandler" , "selectors" : { "<Initializer>()::anonymous(ConcurrentLinkedQueue)" : 2 , "Http11ConnectionHandler(Http11AprProtocol)" : 1 , "asyncDispatch(long,SocketStatus)" : 1 , "createProcessor()" : 1 , "register(Http11AprProcessor)" : 1 , "unregister(Http11AprProcessor)" : 2}},{ "className" : "org::apache::tomcat::util::net::NioBlockingSelector::BlockPoller" , "selectors" : { "BlockPoller()" : 1 , "add(KeyAttachment,int,KeyReference)" : 2 , "cancel(SelectionKey,KeyAttachment,int)" : 3 , "cancelKey(SelectionKey)" : 2 , "countDown(CountDownLatch)" : 10 , "disable()" : 1 , "events()" : 1 , "remove(KeyAttachment,int)" : 2 , "wakeup()" : 3}},{ "className" : "org::apache::catalina::valves::Benchmarks::TimeDateElementBenchmarkTest_Local" , "selectors" : { "TimeDateElementBenchmarkTest_Local()" : 1 , "getDateLocal()" : 1 , "printDate()" : 1}},{ "className" : "org::apache::juli::logging::DirectJDKLog" , "selectors" : { "DirectJDKLog(String)" : 1 , "getInstance(String)" : 1 , "log(Level,String,Throwable)" : 12 , "release()" : 1}},{ "className" : "org::apache::el::parser::AstEqual" , "selectors" : { "AstEqual(int)" : 1}},{ "className" : "org::apache::catalina::valves::AccessLogValve::HostElement" , "selectors" : { "HostElement()" : 2}},{ "className" : "org::apache::catalina::valves::ValveBase" , "selectors" : { "ValveBase(boolean)" : 17 , "getContainer()" : 8 , "getNext()" : 22 , "setContainer(Container)" : 2 , "setNext(Valve)" : 11 , "startInternal()" : 3 , "stopInternal()" : 3 , "toString()" : 1}},{ "className" : "org::apache::catalina::loader::TestWebappClassLoaderMemoryLeak" , "selectors" : { "getThreads()" : 1}},{ "className" : "org::apache::jasper::compiler::ELNode::Text" , "selectors" : { "Text(String)" : 1}},{ "className" : "org::apache::tomcat::util::modeler::BaseNotificationBroadcaster" , "selectors" : { "BaseNotificationBroadcaster()" : 5 , "addNotificationListener(NotificationListener,NotificationFilter,Object)" : 3 , "removeNotificationListener(NotificationListener)" : 4 , "sendNotification(Notification)" : 2}},{ "className" : "org::apache::catalina::core::StandardServer" , "selectors" : { "StandardServer()" : 1 , "addPropertyChangeListener(PropertyChangeListener)" : 1 , "findServices()" : 1 , "getGlobalNamingContext()" : 3 , "getPort()" : 1 , "isUseNaming()" : 1 , "removePropertyChangeListener(PropertyChangeListener)" : 1 , "setGlobalNamingContext(Context)" : 1 , "stopAwait()" : 1 , "storeConfig()" : 1 , "storeContext(Context)" : 1}},{ "className" : "org::apache::catalina::AccessLog" , "selectors" : { "log(Request,Response,long)" : 3}},{ "className" : "javax::net::ssl::SSLServerSocket" , "selectors" : { "getEnabledCipherSuites()" : 5 , "getEnabledProtocols()" : 1 , "getNeedClientAuth()" : 1 , "getSupportedCipherSuites()" : 5 , "getSupportedProtocols()" : 3 , "getUseClientMode()" : 1 , "setEnabledCipherSuites(String[])" : 4 , "setEnabledProtocols(String[])" : 2 , "setNeedClientAuth(boolean)" : 13 , "setWantClientAuth(boolean)" : 5}},{ "className" : "org::apache::jasper::compiler::Generator" , "selectors" : { "Generator(ServletWriter,Compiler)" : 1 , "compileTagHandlerPoolList(Nodes)" : 1 , "compileTagHandlerPoolList(Nodes)::TagHandlerPoolVisitor" : 2 , "createJspId()" : 2 , "declareTemporaryScriptingVars(Nodes)" : 2 , "declareTemporaryScriptingVars(Nodes)::ScriptingVarVisitor" : 1 , "escape(String)" : 3 , "genCommonPostamble()" : 2 , "genPreambleClassVariableDeclarations()" : 2 , "genPreambleImports()" : 2 , "genPreambleMethods()" : 2 , "genPreamblePackage(String)" : 2 , "genPreambleStaticInitializers()" : 2 , "generate(ServletWriter,Compiler,Nodes)" : 2 , "generateDeclarations(Nodes)" : 2 , "generateDeclarations(Nodes)::DeclarationVisitor" : 1 , "generateDestroy()" : 1 , "generateInit()" : 1 , "generateLocalVariables(ServletWriter,Node)" : 2 , "generatePageScopedVariables(JasperTagInfo)" : 1 , "generatePostamble()" : 1 , "generatePreamble(Nodes)" : 1 , "generateSetDynamicAttribute()" : 1 , "generateSetJspContext(TagInfo)" : 1 , "generateTagHandlerAttributes(TagInfo)" : 1 , "generateTagHandlerPostamble(TagInfo)" : 1 , "generateTagHandlerPreamble(JasperTagInfo,Nodes)" : 1 , "generateXmlProlog(Nodes)" : 2 , "quote(String)" : 45 , "quote(char)" : 1 , "toGetterMethod(String)" : 7 , "toSetterMethodName(String)" : 1}},{ "className" : "org::apache::catalina::ha::session::TesterPrincipal" , "selectors" : { "TesterPrincipal(String)" : 1 , "getName()" : 1}},{ "className" : "org::apache::catalina::tribes::membership::Membership" , "selectors" : { "Membership(MemberImpl)" : 3 , "Membership(MemberImpl,Comparator<Member>)" : 1 , "Membership(MemberImpl,Comparator<Member>,boolean)" : 9 , "Membership(MemberImpl,boolean)" : 2 , "addMember(MemberImpl)" : 3 , "contains(Member)" : 1 , "expire(long)" : 1 , "getMember(Member)" : 10 , "getMembers()" : 24 , "hasMembers()" : 9 , "memberAlive(MemberImpl)" : 7 , "removeMember(MemberImpl)" : 9 , "reset()" : 2}},{ "className" : "org::apache::catalina::mbeans::ServerLifecycleListener" , "selectors" : { "createMBeans(Connector)" : 2 , "createMBeans(Context)" : 2 , "createMBeans(ContextEnvironment)" : 2 , "createMBeans(ContextResource)" : 2 , "createMBeans(ContextResourceLink)" : 2 , "createMBeans(Engine)" : 3 , "createMBeans(Host)" : 2 , "createMBeans(MBeanFactory)" : 2 , "createMBeans(NamingResources)" : 3 , "createMBeans(Server)" : 1 , "createMBeans(Service)" : 4 , "destroyMBeans(Connector,Service)" : 2 , "destroyMBeans(Context)" : 2 , "destroyMBeans(ContextEnvironment)" : 2 , "destroyMBeans(ContextResource)" : 2 , "destroyMBeans(ContextResourceLink)" : 2 , "destroyMBeans(Engine)" : 2 , "destroyMBeans(Host)" : 2 , "destroyMBeans(NamingResources)" : 3 , "destroyMBeans(Server)" : 1 , "destroyMBeans(Service)" : 4 , "processContainerAddChild(Container,Container)" : 1 , "processContainerPropertyChange(Container,String,Object,Object)" : 1 , "processContainerRemoveChild(Container,Container)" : 1 , "processNamingResourcesPropertyChange(NamingResources,String,Object,Object)" : 1 , "processServerPropertyChange(Server,String,Object,Object)" : 1 , "processServicePropertyChange(Service,String,Object,Object)" : 1}},{ "className" : "org::apache::tomcat::util::http::mapper::MappingData" , "selectors" : { "MappingData()" : 2 , "recycle()" : 3}},{ "className" : "org::apache::catalina::deploy::ContextService" , "selectors" : { "ContextService()" : 1 , "getDisplayname()" : 1 , "getHandler(String)" : 2 , "getHandlers()" : 2 , "getInterface()" : 1 , "getJaxrpcmappingfile()" : 7 , "getPortlink(String)" : 1 , "getServiceendpoints()" : 4 , "getServiceqname()" : 1 , "getServiceqnameLocalpart()" : 1 , "getServiceqnameNamespaceURI()" : 1 , "getWsdlfile()" : 7 , "setJaxrpcmappingfile(String)" : 2 , "setServiceqnameLocalpart(String)" : 1 , "setServiceqnameNamespaceURI(String)" : 1 , "setWsdlfile(String)" : 3}},{ "className" : "org::apache::catalina::filters::WebdavFixFilter" , "selectors" : { "buildRedirect(HttpServletRequest)" : 2 , "log(ServletRequest,String)" : 2}},{ "className" : "org::apache::catalina::core::StandardWrapperFacade" , "selectors" : { "StandardWrapperFacade(StandardWrapper)" : 1}},{ "className" : "org::apache::catalina::valves::ErrorReportValve" , "selectors" : { "getPartialServletStackTrace(Throwable)" : 2 , "report(Request,Response,Throwable)" : 1}},{ "className" : "org::apache::naming::resources::Resource" , "selectors" : { "Resource(InputStream)" : 8 , "getContent()" : 4 , "setContent(InputStream)" : 1 , "setContent(byte[])" : 2 , "streamContent()" : 20}},{ "className" : "org::apache::catalina::tribes::membership::McastService" , "selectors" : { "McastService()" : 3 , "getAddress()" : 1 , "getBind()" : 1 , "getDomain()" : 1 , "getDropTime()" : 1 , "getFrequency()" : 1 , "getMembers()" : 2 , "getPayload()" : 1 , "getPort()" : 1 , "getProperties()" : 4 , "getSoTimeout()" : 1 , "getTtl()" : 1 , "hasProperty(Properties,String)" : 14 , "setAddress(String)" : 2 , "setBind(String)" : 1 , "setDomain(byte[])" : 3 , "setDropTime(long)" : 1 , "setFrequency(long)" : 2 , "setMcastBindAddress(String)" : 1 , "setMcastDropTime(long)" : 1 , "setMessageListener(MessageListener)" : 1 , "setPort(int)" : 2 , "setProperties(Properties)" : 1 , "setSoTimeout(int)" : 1 , "setTtl(int)" : 1 , "start()" : 1 , "start(int)" : 2}},{ "className" : "org::apache::tomcat::util::http::fileupload::servlet::ServletRequestContext" , "selectors" : { "ServletRequestContext(HttpServletRequest)" : 2 , "getContentLength()" : 1 , "getContentType()" : 1}},{ "className" : "org::apache::catalina::mbeans::MBeanUtils" , "selectors" : { "createMBean(ContextEnvironment)" : 1 , "createMBean(ContextResource)" : 1 , "createMBean(ContextResourceLink)" : 1 , "createMBean(Group)" : 2 , "createMBean(Loader)" : 1 , "createMBean(MBeanFactory)" : 1 , "createMBean(NamingResources)" : 1 , "createMBean(Role)" : 2 , "createMBean(User)" : 2 , "createMBean(UserDatabase)" : 1 , "createManagedName(Object)" : 24 , "createObjectName(String,Connector)" : 1 , "createObjectName(String,Context)" : 1 , "createObjectName(String,ContextEnvironment)" : 4 , "createObjectName(String,ContextResource)" : 4 , "createObjectName(String,ContextResourceLink)" : 4 , "createObjectName(String,Engine)" : 1 , "createObjectName(String,Group)" : 4 , "createObjectName(String,Host)" : 1 , "createObjectName(String,Loader)" : 3 , "createObjectName(String,MBeanFactory)" : 1 , "createObjectName(String,Manager)" : 1 , "createObjectName(String,NamingResources)" : 2 , "createObjectName(String,Realm)" : 1 , "createObjectName(String,Role)" : 5 , "createObjectName(String,Server)" : 1 , "createObjectName(String,Service)" : 1 , "createObjectName(String,User)" : 4 , "createObjectName(String,UserDatabase)" : 2 , "createObjectName(String,Valve)" : 1 , "createRegistry()" : 9 , "createServer()" : 8 , "destroyMBean(Connector,Service)" : 1 , "destroyMBean(Context)" : 1 , "destroyMBean(ContextEnvironment)" : 1 , "destroyMBean(ContextResource)" : 1 , "destroyMBean(ContextResourceLink)" : 1 , "destroyMBean(Engine)" : 1 , "destroyMBean(Group)" : 1 , "destroyMBean(Host)" : 1 , "destroyMBean(Loader)" : 1 , "destroyMBean(NamingResources)" : 1 , "destroyMBean(Realm)" : 1 , "destroyMBean(Role)" : 1 , "destroyMBean(Server)" : 1 , "destroyMBean(User)" : 1 , "destroyMBeanUserDatabase(String)" : 1 , "getContainerKeyProperties(Container)" : 3 , "getDomain(Container)" : 8 , "getDomain(Service)" : 3 , "getSeq(String)" : 3}},{ "className" : "org::apache::catalina::ha::authenticator::ClusterSingleSignOnListener" , "selectors" : { "ClusterSingleSignOnListener()" : 1 , "getSession(String,String)" : 3 , "setClusterSSO(ClusterSingleSignOn)" : 1}},{ "className" : "javax::servlet::jsp::tagext::PageData" , "selectors" : { "getInputStream()" : 1}},{ "className" : "org::apache::coyote::ajp::AjpProcessor::SocketOutputBuffer" , "selectors" : { "SocketOutputBuffer()" : 1}},{ "className" : "org::apache::tomcat::util::bcel::classfile::Code" , "selectors" : { "Code(int,int,DataInputStream,ConstantPool)" : 1 , "Code(int,int,int,int,byte[],CodeException[],Attribute[],ConstantPool)" : 1 , "calculateLength()" : 1 , "getInternalLength()" : 1 , "getLocalVariableTable()" : 1 , "setAttributes(Attribute[])" : 1 , "setCode(byte[])" : 1 , "setExceptionTable(CodeException[])" : 1 , "toString(boolean)" : 1}},{ "className" : "org::apache::catalina::loader::TestWebappClassLoaderMemoryLeak::LocalTask" , "selectors" : { "LocalTask()" : 1}},{ "className" : "javax::naming::directory::DirContext" , "selectors" : { "bind(Name,Object,Attributes)" : 3 , "bind(String,Object,Attributes)" : 7 , "createSubcontext(Name,Attributes)" : 5 , "createSubcontext(String,Attributes)" : 20 , "getAttributes(Name)" : 11 , "getAttributes(Name,String[])" : 4 , "getAttributes(String)" : 15 , "getAttributes(String,String[])" : 12 , "getSchema(Name)" : 2 , "getSchema(String)" : 1 , "getSchemaClassDefinition(Name)" : 2 , "getSchemaClassDefinition(String)" : 1 , "modifyAttributes(Name,ModificationItem[])" : 5 , "modifyAttributes(Name,int,Attributes)" : 2 , "modifyAttributes(String,ModificationItem[])" : 10 , "modifyAttributes(String,int,Attributes)" : 1 , "rebind(Name,Object,Attributes)" : 3 , "rebind(String,Object,Attributes)" : 1 , "search(Name,Attributes)" : 2 , "search(Name,Attributes,String[])" : 2 , "search(Name,String,Object[],SearchControls)" : 1 , "search(Name,String,SearchControls)" : 4 , "search(String,Attributes)" : 1 , "search(String,Attributes,String[])" : 1 , "search(String,String,Object[],SearchControls)" : 6 , "search(String,String,SearchControls)" : 24}},{ "className" : "org::apache::el::lang::ELArithmetic" , "selectors" : { "add(Number,Number)" : 1 , "add(Object,Object)" : 1 , "coerce(Number)" : 3 , "coerce(Object)" : 10 , "coerce(String)" : 1 , "divide(Number,Number)" : 1 , "divide(Object,Object)" : 1 , "isNumber(Object)" : 3 , "isNumberType(Class<?>)" : 2 , "mod(Number,Number)" : 1 , "mod(Object,Object)" : 1 , "multiply(Number,Number)" : 1 , "multiply(Object,Object)" : 1 , "subtract(Number,Number)" : 1 , "subtract(Object,Object)" : 1}},{ "className" : "javax::naming::Referenceable" , "selectors" : { "getReference()" : 7}},{ "className" : "org::apache::catalina::tribes::test::channel::TestDataIntegrity::Listener" , "selectors" : { "Listener()" : 1}},{ "className" : "org::apache::catalina::tribes::group::interceptors::NonBlockingCoordinator" , "selectors" : { "NonBlockingCoordinator()" : 1 , "alive(Member)" : 1 , "createData(CoordinationMessage,MemberImpl)" : 2 , "createElectionMsg(MemberImpl,MemberImpl[],MemberImpl)" : 2 , "fireInterceptorEvent(InterceptorEvent)" : 21 , "getCoordinator()" : 10 , "getLocalMember(boolean)" : 7 , "getMembers()" : 1 , "getView()" : 1 , "getViewId()" : 2 , "halt()" : 1 , "handleMyToken(MemberImpl,CoordinationMessage,Member,Membership)" : 1 , "handleOtherToken(MemberImpl,CoordinationMessage,Member,Membership)" : 1 , "handleToken(CoordinationMessage,Member,Membership)" : 1 , "handleViewConf(CoordinationMessage,Member,Membership)" : 3 , "hasHigherPriority(Member[],Member[])" : 1 , "isCoordinator()" : 1 , "isHighest()" : 2 , "isViewConf(CoordinationMessage)" : 1 , "memberAdded(Member,boolean)" : 2 , "mergeOnArrive(CoordinationMessage,Member)" : 1 , "processCoordMessage(CoordinationMessage,Member)" : 1 , "release()" : 1 , "sendElectionMsg(MemberImpl,MemberImpl,CoordinationMessage)" : 2 , "sendElectionMsgToNextInline(MemberImpl,CoordinationMessage)" : 3 , "setupMembership()" : 3 , "startElection(boolean)" : 5 , "viewChange(UniqueId,Member[])" : 1 , "waitForRelease()" : 1}},{ "className" : "org::apache::coyote::http11::Http11Protocol::Http11ConnectionHandler" , "selectors" : { "<Initializer>()::anonymous(ConcurrentLinkedQueue)" : 2 , "Http11ConnectionHandler(Http11Protocol)" : 1 , "createProcessor()" : 1 , "process(SocketWrapper<Socket>,SocketStatus)" : 1 , "register(Http11Processor)" : 1 , "unregister(Http11Processor)" : 2}},{ "className" : "org::apache::catalina::startup::SetDistributableRule" , "selectors" : { "SetDistributableRule()" : 1}},{ "className" : "org::apache::coyote::ajp::AjpProtocol" , "selectors" : { "getAddress()" : 2 , "getDomain()" : 3 , "getName()" : 10 , "setSoLinger(int)" : 1 , "setSoTimeout(int)" : 1 , "setTcpNoDelay(boolean)" : 1}},{ "className" : "java::io::PrintStream" , "selectors" : { "PrintStream(File)" : 4 , "PrintStream(OutputStream)" : 329 , "PrintStream(OutputStream,boolean)" : 46 , "PrintStream(OutputStream,boolean,String)" : 5 , "PrintStream(String)" : 1 , "append(char)" : 3 , "checkError()" : 7 , "close()" : 109 , "flush()" : 281 , "java" : 17 , "print(Object)" : 68 , "print(String)" : 2678 , "print(boolean)" : 6 , "print(char)" : 155 , "print(char[])" : 37 , "print(double)" : 18 , "print(float)" : 5 , "print(int)" : 134 , "print(long)" : 19 , "printf(String,Object[])" : 140 , "println()" : 745 , "println(Object)" : 963 , "println(String)" : 31429 , "println(boolean)" : 29 , "println(char)" : 22 , "println(char[])" : 1117 , "println(double)" : 82 , "println(float)" : 10 , "println(int)" : 190 , "println(long)" : 74 , "write(byte[],int,int)" : 21 , "write(int)" : 13}},{ "className" : "org::apache::catalina::tribes::ManagedChannel" , "selectors" : { "getChannelSender()" : 2 , "getMembershipService()" : 7 , "setChannelReceiver(ChannelReceiver)" : 1 , "setChannelSender(ChannelSender)" : 1 , "setMembershipService(MembershipService)" : 1}},{ "className" : "org::apache::el::parser::AstMod" , "selectors" : { "AstMod(int)" : 1}},{ "className" : "org::apache::catalina::startup::UserDatabase" , "selectors" : { "getHome(String)" : 1 , "getUsers()" : 1 , "setUserConfig(UserConfig)" : 1}},{ "className" : "org::apache::catalina::ssi::SSIServletExternalResolver" , "selectors" : { "SSIServletExternalResolver(ServletContext,HttpServletRequest,HttpServletResponse,boolean,int,String)" : 2 , "getAbsolutePath(String)" : 2 , "getCGIVariable(String)" : 1 , "getPathWithoutContext(String,String)" : 1 , "getPathWithoutFileName(String)" : 1 , "getReqAttributeIgnoreCase(String)" : 1 , "getServletContextAndPath(String,boolean)" : 2 , "getServletContextAndPathFromNonVirtualPath(String)" : 1 , "getServletContextAndPathFromVirtualPath(String)" : 1 , "getURLConnection(String,boolean)" : 2 , "getVariableValue(String)" : 1 , "isNameReserved(String)" : 4 , "isRootContext(ServletContext)" : 1 , "log(String,Throwable)" : 1 , "nullToEmptyString(String)" : 1}},{ "className" : "org::apache::catalina::core::StandardWrapper" , "selectors" : { "StandardWrapper()" : 1 , "allocate()" : 2 , "deallocate(Servlet)" : 2 , "findInitParameter(String)" : 1 , "getAllDeclaredMethods(Class<?>)" : 2 , "getAvailable()" : 5 , "getInstanceSupport()" : 2 , "getJspFile()" : 2 , "getLoadOnStartup()" : 1 , "getProcessingTime()" : 1 , "getRootCause(ServletException)" : 7 , "getServlet()" : 3 , "getServletClass()" : 3 , "getServletContext()" : 7 , "getWebModuleKeyProperties()" : 2 , "initServlet(Servlet)" : 2 , "isContainerProvidedServlet(String)" : 1 , "isEnabled()" : 1 , "isUnavailable()" : 2 , "loadServlet()" : 5 , "setAvailable(long)" : 5 , "setLoadOnStartup(int)" : 2 , "setRunAs(String)" : 1 , "unavailable(UnavailableException)" : 5 , "unload()" : 3}},{ "className" : "org::apache::el::parser::AstDynamicExpression" , "selectors" : { "AstDynamicExpression(int)" : 1}},{ "className" : "javax::servlet::ServletContextAttributeListener" , "selectors" : { "attributeAdded(ServletContextAttributeEvent)" : 1 , "attributeRemoved(ServletContextAttributeEvent)" : 1 , "attributeReplaced(ServletContextAttributeEvent)" : 1}},{ "className" : "org::apache::tomcat::util::buf::IntermediateOutputStream" , "selectors" : { "IntermediateOutputStream(ByteChunk)" : 1 , "disable()" : 1 , "enable()" : 1 , "setByteChunk(ByteChunk)" : 1}},{ "className" : "javax::el::BeanELResolver::ConcurrentCache<T>" , "selectors" : { "ConcurrentCache(int)" : 1}},{ "className" : "javax::servlet::http::HttpServletResponse" , "selectors" : { "addCookie(Cookie)" : 5 , "addDateHeader(String,long)" : 4 , "addHeader(String,String)" : 19 , "addIntHeader(String,int)" : 2 , "containsHeader(String)" : 2 , "encodeRedirectURL(String)" : 3 , "encodeRedirectUrl(String)" : 1 , "encodeURL(String)" : 31 , "encodeUrl(String)" : 1 , "getHeader(String)" : 2 , "getHeaderNames()" : 2 , "getHeaders(String)" : 2 , "getStatus()" : 2 , "sendError(int)" : 63 , "sendError(int,String)" : 31 , "sendRedirect(String)" : 9 , "setDateHeader(String,long)" : 12 , "setHeader(String,String)" : 19 , "setIntHeader(String,int)" : 2 , "setStatus(int)" : 31 , "setStatus(int,String)" : 2}},{ "className" : "org::apache::catalina::ha::jmx::ClusterJmxHelper" , "selectors" : { "getDefaultClusterName(SimpleTcpCluster)" : 2 , "getMBeanServer()" : 5 , "getManagedBean(Object)" : 1 , "getRegistry()" : 2 , "initDefaultCluster()" : 1 , "initMetaData(Class<?>)" : 4 , "registerDefaultCluster(SimpleTcpCluster)" : 1 , "unregisterDefaultCluster(SimpleTcpCluster)" : 1}},{ "className" : "javax::net::ssl::CertPathTrustManagerParameters" , "selectors" : { "CertPathTrustManagerParameters(CertPathParameters)" : 1}},{ "className" : "org::apache::naming::resources::RecyclableNamingEnumeration" , "selectors" : { "nextElement()" : 1 , "recycle()" : 1}},{ "className" : "org::apache::tomcat::util::net::NioEndpoint::SendfileData" , "selectors" : { "NioEndpoint" : 1}},{ "className" : "org::apache::catalina::users::MemoryUserDatabase" , "selectors" : { "MemoryUserDatabase(String)" : 1 , "createGroup(String,String)" : 2 , "createRole(String,String)" : 3 , "createUser(String,String,String)" : 1 , "findGroup(String)" : 1 , "findRole(String)" : 2 , "getGroups()" : 2 , "getReadonly()" : 2 , "getRoles()" : 1 , "getUsers()" : 4 , "isWriteable()" : 1 , "open()" : 1 , "save()" : 2 , "setPathname(String)" : 1 , "setReadonly(boolean)" : 1}},{ "className" : "org::apache::catalina::tribes::test::transport::SocketReceive" , "selectors" : { "printStats(long,double,int,DecimalFormat,BigDecimal)" : 3}},{ "className" : "org::apache::jasper::xmlparser::XMLStringBuffer" , "selectors" : { "XMLStringBuffer()" : 2 , "XMLStringBuffer(int)" : 5 , "append(String)" : 2 , "append(XMLString)" : 3 , "append(char)" : 5 , "append(char[],int,int)" : 6 , "clear()" : 3}},{ "className" : "org::apache::catalina::core::ApplicationRequest" , "selectors" : { "ApplicationRequest(ServletRequest)" : 1 , "isSpecial(String)" : 2 , "setRequest(ServletRequest)" : 1}},{ "className" : "org::apache::jasper::compiler::Generator::GenerateVisitor" , "selectors" : { "GenerateVisitor(boolean,ServletWriter,ArrayList<GenBuffer>,FragmentHelperClass)" : 2 , "attributeValue(JspAttribute,boolean,Class<?>)" : 13 , "convertString(Class<?>,String,String,Class<?>,boolean)" : 2 , "createTagVarName(String,String,String)" : 1 , "declareScriptingVars(CustomTag,int)" : 5 , "evaluateAttribute(TagHandlerInfo,JspAttribute,CustomTag,String)" : 2 , "findJspBody(Node)" : 4 , "generateAliasMap(CustomTag,String)" : 1 , "generateCustomDoTag(CustomTag,TagHandlerInfo,String)" : 1 , "generateCustomEnd(CustomTag,String,String,String)" : 1 , "generateCustomStart(CustomTag,TagHandlerInfo,String,String,String)" : 1 , "generateJspFragment(Node,String)" : 3 , "generateNamedAttributeJspFragment(NamedAttribute,String)" : 1 , "generateNamedAttributeValue(NamedAttribute)" : 9 , "generateSetters(CustomTag,String,TagHandlerInfo,boolean)" : 2 , "generateTagPlugin(CustomTag)" : 1 , "getExpressionFactoryVar()" : 2 , "getJspContextVar()" : 2 , "getScopeConstant(String)" : 2 , "getTagHandlerInfo(CustomTag)" : 2 , "makeAttr(String,String)" : 19 , "prepareParams(Node)" : 5 , "printParams(Node,String,boolean)" : 2 , "printParams(Node,String,boolean)::ParamVisitor" : 1 , "restoreScriptingVars(CustomTag,int)" : 3 , "saveScriptingVars(CustomTag,int)" : 3 , "syncScriptingVars(CustomTag,int)" : 10 , "visit(PlugIn)::ParamVisitor" : 2 , "writeDestroyInstance(String)" : 3 , "writeNewInstance(String,String)" : 2}},{ "className" : "javax::servlet::jsp::JspFactory" , "selectors" : { "getDefaultFactory()" : 1 , "getJspApplicationContext(ServletContext)" : 1 , "setDefaultFactory(JspFactory)" : 1}},{ "className" : "org::apache::jasper::JspCompilationContext" , "selectors" : { "JspCompilationContext(String,TagInfo,Options,ServletContext,JspServletWrapper,JspRuntimeContext,JarResource)" : 1 , "JspCompilationContext(String,boolean,Options,ServletContext,JspServletWrapper,JspRuntimeContext)" : 3 , "canonicalURI(String)" : 5 , "checkOutputDir()" : 1 , "compile()" : 3 , "createCompiler()" : 3 , "createCompiler(String)" : 5 , "createOutputDir()" : 2 , "getClassFileName()" : 8 , "getClassLoader()" : 9 , "getClassPath()" : 2 , "getCompiler()" : 3 , "getDerivedPackageName()" : 2 , "getFQCN()" : 2 , "getJavaPath()" : 2 , "getJspFile()" : 5 , "getJspLoader()" : 3 , "getOptions()" : 43 , "getOutputDir()" : 2 , "getRealPath(String)" : 2 , "getResource(String)" : 4 , "getResourceAsStream(String)" : 5 , "getResourcePaths(String)" : 1 , "getRuntimeContext()" : 7 , "getServletClassName()" : 7 , "getServletContext()" : 3 , "getServletJavaFileName()" : 12 , "getServletPackageName()" : 6 , "getTagFileJarResource()" : 3 , "getTagFileJarResource(String)" : 2 , "getTagInfo()" : 2 , "getTldLocation(String)" : 4 , "getWriter()" : 2 , "incrementRemoved()" : 2 , "isPathSeparator(char)" : 4 , "isPrototypeMode()" : 6 , "isRemoved()" : 3 , "isTagFile()" : 17 , "keepGenerated()" : 2 , "load()" : 2 , "makeOutputDir()" : 2 , "resolveRelativeUri(String)" : 1 , "setClassLoader(ClassLoader)" : 2 , "setClassPath(String)" : 2 , "setPrototypeMode(boolean)" : 2 , "setServletClassName(String)" : 1 , "setServletPackageName(String)" : 1 , "setTagFileJarResource(String,JarResource)" : 2 , "setTagInfo(TagInfo)" : 1 , "setWriter(ServletWriter)" : 3}},{ "className" : "org::apache::jasper::el::FunctionMapperImpl" , "selectors" : { "FunctionMapperImpl(FunctionMapper)" : 3}},{ "className" : "org::apache::catalina::tribes::group::AbsoluteOrder::AbsoluteComparator" , "selectors" : { "AbsoluteComparator()" : 1 , "compare(Member,Member)" : 4 , "compareBytes(byte,byte)" : 1 , "compareBytes(byte[],byte[])" : 2 , "compareIds(Member,Member)" : 1 , "compareInts(int,int)" : 2 , "compareIps(Member,Member)" : 1 , "comparePorts(Member,Member)" : 1}},{ "className" : "org::apache::el::parser::ELParser::LookaheadSuccess" , "selectors" : { "LookaheadSuccess()" : 1}},{ "className" : "javax::servlet::http::HttpServlet" , "selectors" : { "doDelete(HttpServletRequest,HttpServletResponse)" : 1 , "doGet(HttpServletRequest,HttpServletResponse)" : 3 , "doHead(HttpServletRequest,HttpServletResponse)" : 1 , "doOptions(HttpServletRequest,HttpServletResponse)" : 1 , "doPost(HttpServletRequest,HttpServletResponse)" : 1 , "doPut(HttpServletRequest,HttpServletResponse)" : 1 , "doTrace(HttpServletRequest,HttpServletResponse)" : 1 , "getAllDeclaredMethods(Class<?>)" : 2 , "getLastModified(HttpServletRequest)" : 2 , "maybeSetLastModified(HttpServletResponse,long)" : 2 , "service(HttpServletRequest,HttpServletResponse)" : 2}},{ "className" : "org::apache::catalina::tribes::test::channel::TestUdpPackages::Data" , "selectors" : { "Data()" : 1 , "createRandomData(int)" : 5 , "createRandomData(int,int)" : 3 , "getNumber()" : 1 , "verify(Data)" : 1}},{ "className" : "org::apache::catalina::tribes::demos::MembersWithProperties::Shutdown" , "selectors" : { "Shutdown(ManagedChannel)" : 1}},{ "className" : "javax::el::ELContextListener" , "selectors" : { "contextCreated(ELContextEvent)" : 1}},{ "className" : "org::apache::jasper::el::VariableResolverImpl" , "selectors" : { "VariableResolverImpl(ELContext)" : 1}},{ "className" : "org::apache::catalina::security::SecurityClassLoad" , "selectors" : { "loadConnectorPackage(ClassLoader)" : 1 , "loadCorePackage(ClassLoader)" : 1 , "loadJavaxPackage(ClassLoader)" : 1 , "loadLoaderPackage(ClassLoader)" : 1 , "loadSessionPackage(ClassLoader)" : 1 , "loadTomcatPackage(ClassLoader)" : 1 , "loadUtilPackage(ClassLoader)" : 1 , "securityClassLoad(ClassLoader)" : 1}},{ "className" : "org::apache::catalina::connector::ResponseFacade::SetContentTypePrivilegedAction" , "selectors" : { "SetContentTypePrivilegedAction(String)" : 1}},{ "className" : "org::apache::jasper::compiler::JasperTagInfo" , "selectors" : { "JasperTagInfo(String,String,String,String,TagLibraryInfo,TagExtraInfo,TagAttributeInfo[],String,String,String,TagVariableInfo[],String)" : 1 , "getDynamicAttributesMapName()" : 1 , "hasDynamicAttributes()" : 3}},{ "className" : "org::apache::tomcat::util::http::fileupload::FileUploadBase::FileSizeLimitExceededException" , "selectors" : { "FileSizeLimitExceededException(String,long,long)" : 2 , "setFieldName(String)" : 2 , "setFileName(String)" : 2}},{ "className" : "org::apache::jasper::runtime::JspContextWrapper" , "selectors" : { "copyTagToPageScope(int)" : 4 , "findAlias(String)" : 3 , "getAttribute(String)" : 1 , "getELContext()" : 1 , "getSession()" : 2 , "handlePageException(Throwable)" : 1 , "removeAttribute(String,int)" : 2 , "restoreNestedVariables()" : 1 , "saveNestedVariables()" : 1 , "syncBeginTagFile()" : 1}},{ "className" : "org::apache::juli::ClassLoaderLogManager::Cleaner" , "selectors" : { "Cleaner()" : 1}},{ "className" : "javax::net::ServerSocketFactory" , "selectors" : { "createServerSocket()" : 2 , "createServerSocket(int)" : 6 , "createServerSocket(int,int)" : 5 , "createServerSocket(int,int,InetAddress)" : 17 , "getDefault()" : 4}},{ "className" : "org::apache::tomcat::util::net::NioEndpoint::Handler" , "selectors" : { "event(NioChannel,SocketStatus)" : 1 , "process(NioChannel)" : 1 , "release(NioChannel)" : 1 , "release(SocketChannel)" : 1 , "releaseCaches()" : 1}},{ "className" : "org::apache::tomcat::util::modeler::OperationInfo" , "selectors" : { "OperationInfo()" : 2 , "addParameter(ParameterInfo)" : 2 , "createOperationInfo()" : 1 , "getImpact()" : 3 , "getMBeanParameterInfo()" : 2 , "getReturnType()" : 1 , "getSignature()" : 1 , "setReturnType(String)" : 1}},{ "className" : "org::apache::jasper::xmlparser::SymbolTable" , "selectors" : { "SymbolTable()" : 1 , "SymbolTable(int)" : 1 , "addSymbol(char[],int,int)" : 3 , "hash(String)" : 2 , "hash(char[],int,int)" : 2}},{ "className" : "org::apache::el::lang::ELSupport" , "selectors" : { "coerceToBoolean(Object)" : 9 , "coerceToCharacter(Object)" : 1 , "coerceToEnum(Object,Class)" : 6 , "coerceToNumber(Number,Class<?>)" : 3 , "coerceToNumber(Object,Class<?>)" : 19 , "coerceToNumber(String,Class<?>)" : 1 , "coerceToString(Object)" : 7 , "coerceToType(Object,Class<?>)" : 8 , "compare(Object,Object)" : 6 , "equals(Object,Object)" : 3 , "isBigDecimalOp(Object,Object)" : 2 , "isBigIntegerOp(Object,Object)" : 2 , "isDoubleOp(Object,Object)" : 3 , "isLongOp(Object,Object)" : 2 , "isStringFloat(String)" : 6 , "toFloat(String)" : 1 , "toNumber(String)" : 1}},{ "className" : "org::apache::catalina::startup::TldConfig::TldJarScannerCallback" , "selectors" : { "TldJarScannerCallback()" : 1}},{ "className" : "org::apache::jasper::compiler::Parser" , "selectors" : { "Parser(ParserController,JspReader,boolean,boolean,JarResource)" : 2 , "addInclude(Node,List<String>)" : 2 , "checkUnbalancedEndTag()" : 3 , "getAttributeBodyType(Node,String)" : 1 , "parse(ParserController,JspReader,Node,boolean,boolean,JarResource,String,String,boolean,boolean)" : 1 , "parseAttribute(AttributesImpl)" : 1 , "parseAttributeDirective(Node)" : 2 , "parseAttributeValue(String)" : 1 , "parseAttributes()" : 19 , "parseAttributes(ParserController,JspReader)" : 1 , "parseBody(Node,String,String)" : 3 , "parseComment(Node)" : 3 , "parseCustomTag(Node)" : 3 , "parseDeclaration(Node)" : 1 , "parseDirective(Node)" : 4 , "parseDoBody(Node)" : 1 , "parseELExpression(Node,char)" : 5 , "parseElement(Node)" : 1 , "parseElements(Node)" : 2 , "parseElementsScriptless(Node)" : 2 , "parseElementsTemplateText(Node)" : 1 , "parseEmptyBody(Node,String)" : 3 , "parseExpression(Node)" : 1 , "parseFallBack(Node)" : 1 , "parseFileDirectives(Node)" : 1 , "parseForward(Node)" : 1 , "parseGetProperty(Node)" : 1 , "parseInclude(Node)" : 1 , "parseIncludeDirective(Node)" : 2 , "parseInvoke(Node)" : 1 , "parseJspAttributeAndBody(Node,String,String)" : 1 , "parseJspBody(Node,String)" : 1 , "parseJspParams(Node)" : 1 , "parseName()" : 1 , "parseNamedAttributes(Node)" : 2 , "parseOptionalBody(Node,String,String)" : 10 , "parsePageDirective(Node)" : 2 , "parseParam(Node)" : 1 , "parsePlugin(Node)" : 1 , "parsePluginTags(Node)" : 1 , "parseScriptText(String)" : 9 , "parseScriptlet(Node)" : 1 , "parseSetProperty(Node)" : 1 , "parseStandardAction(Node)" : 2 , "parseTagDependentBody(Node,String)" : 1 , "parseTagDirective(Node)" : 2 , "parseTaglibDirective(Node)" : 1 , "parseTemplateText(Node)" : 3 , "parseUseBean(Node)" : 1 , "parseVariableDirective(Node)" : 2 , "parseXMLDeclaration(Node)" : 1 , "parseXMLDirective(Node)" : 4 , "parseXMLExpression(Node)" : 1 , "parseXMLScriptlet(Node)" : 1 , "parseXMLTemplateText(Node)" : 2 , "processIncludeDirective(String,Node)" : 2}},{ "className" : "org::apache::catalina::tribes::demos::MembersWithProperties" , "selectors" : { "MembersWithProperties(Channel,Properties)" : 1 , "getPayload(Properties)" : 1 , "getProperties(byte[])" : 2 , "usage()" : 1}},{ "className" : "org::apache::catalina::security::SecurityUtil" , "selectors" : { "createMethodAndCacheIt(Method[],String,Object,Class<?>[])" : 4 , "doAsPrivilege(String,Filter)" : 2 , "doAsPrivilege(String,Filter,Class<?>[],Object[])" : 1 , "doAsPrivilege(String,Filter,Class<?>[],Object[],Principal)" : 3 , "doAsPrivilege(String,Servlet)" : 2 , "doAsPrivilege(String,Servlet,Class<?>[],Object[])" : 2 , "doAsPrivilege(String,Servlet,Class<?>[],Object[],Principal)" : 4 , "execute(Method,Object,Object[],Principal)" : 2 , "findMethod(Method[],String)" : 2 , "isPackageProtectionEnabled()" : 72 , "remove(Object)" : 4}},{ "className" : "org::apache::coyote::ajp::AjpProcessor" , "selectors" : { "AjpProcessor(int,JIoEndpoint)" : 1 , "action(ActionCode,Object)" : 2 , "asyncDispatch(SocketStatus)" : 1 , "finish()" : 2 , "flush()" : 1 , "getRequest()" : 2 , "parseHost(MessageBytes)" : 1 , "prepareRequest()" : 1 , "prepareResponse()" : 4 , "process(SocketWrapper<Socket>)" : 1 , "read(byte[],int,int)" : 2 , "readMessage(AjpMessage)" : 2 , "receive()" : 2 , "recycle()" : 4 , "refillReadBuffer()" : 1 , "setAdapter(Adapter)" : 1 , "setKeepAliveTimeout(int)" : 1 , "setRequiredSecret(String)" : 1 , "setTomcatAuthentication(boolean)" : 1}},{ "className" : "org::apache::catalina::valves::AccessLogValve::CookieElement" , "selectors" : { "CookieElement(String)" : 1}},{ "className" : "org::apache::catalina::core::ApplicationFilterFactory" , "selectors" : { "ApplicationFilterFactory()" : 1 , "createFilterChain(ServletRequest,Wrapper,Servlet)" : 2 , "getInstance()" : 2 , "matchDispatcher(FilterMap,DispatcherType)" : 2 , "matchFiltersServlet(FilterMap,String)" : 1 , "matchFiltersURL(FilterMap,String)" : 1 , "matchFiltersURL(String,String)" : 1}},{ "className" : "org::apache::el::parser::AstValue::Target" , "selectors" : { "Target()" : 1}},{ "className" : "javax::mail::internet::MimePartDataSource" , "selectors" : { "MimePartDataSource(MimePart)" : 1}},{ "className" : "org::apache::catalina::tribes::io::ReplicationStream" , "selectors" : { "ReplicationStream(InputStream,ClassLoader[])" : 2 , "close()" : 2 , "findExternalClass(String)" : 2 , "findReplicationClass(String)" : 2 , "resolveClass(String)" : 2}},{ "className" : "java::util::concurrent::LinkedBlockingDeque<T>" , "selectors" : { "LinkedBlockingDeque(int)" : 1}},{ "className" : "org::apache::catalina::ha::deploy::FileMessage" , "selectors" : { "FileMessage(Member,String,String)" : 2 , "getContextPath()" : 4 , "getData()" : 4 , "getDataLength()" : 4 , "getFileName()" : 8 , "getMessageNumber()" : 4 , "getTotalNrOfMsgs()" : 2 , "setData(byte[],int)" : 1 , "setMessageNumber(int)" : 1 , "setTotalLength(long)" : 1 , "setTotalNrOfMsgs(long)" : 1}},{ "className" : "org::apache::el::parser::AstMult" , "selectors" : { "AstMult(int)" : 1}},{ "className" : "javax::el::BeanELResolver" , "selectors" : { "BeanELResolver()" : 3 , "getMethod(Class<?>,Method)" : 5 , "property(ELContext,Object,Object)" : 4}},{ "className" : "org::apache::catalina::startup::RelativeOrderingRule" , "selectors" : { "RelativeOrderingRule()" : 1}},{ "className" : "org::apache::catalina::realm::JNDIRealm::User" , "selectors" : { "User(String,String,String,List<String>)" : 2 , "getDN()" : 2 , "getPassword()" : 2 , "getRoles()" : 1 , "getUserName()" : 4}},{ "className" : "org::apache::catalina::core::StandardContext" , "selectors" : { "StandardContext()" : 4 , "addApplicationEventListener(Object)" : 1 , "addApplicationLifecycleListener(Object)" : 1 , "addChild(Container)" : 1 , "addFilterDef(FilterDef)" : 1 , "addInjectionTarget(Injectable,Map<String,Map<String,String>>)" : 7 , "addSecurityRole(String)" : 1 , "addServletMapping(String,String)" : 5 , "addServletMapping(String,String,boolean)" : 1 , "adjustURLPattern(String)" : 2 , "bindThread()" : 4 , "buildInjectionMap(NamingResources)" : 1 , "checkUnusualURLPattern(String)" : 2 , "createWrapper()" : 1 , "engineBase()" : 4 , "filterStart()" : 1 , "filterStop()" : 1 , "findApplicationListeners()" : 1 , "findApplicationParameters()" : 1 , "findFilterConfig(String)" : 2 , "findFilterDef(String)" : 3 , "findFilterDefs()" : 1 , "findFilterMaps()" : 1 , "findMimeMapping(String)" : 1 , "findParameter(String)" : 1 , "findParameters()" : 1 , "findWelcomeFiles()" : 1 , "getAliases()" : 1 , "getAltDDName()" : 4 , "getAntiJARLocking()" : 1 , "getAntiResourceLocking()" : 1 , "getApplicationEventListeners()" : 4 , "getApplicationLifecycleListeners()" : 2 , "getBasePath()" : 2 , "getCacheMaxSize()" : 2 , "getCacheObjectMaxSize()" : 1 , "getCacheTTL()" : 2 , "getCharsetMapper()" : 2 , "getClearReferencesStatic()" : 1 , "getClearReferencesStopThreads()" : 1 , "getClearReferencesStopTimerThreads()" : 1 , "getClearReferencesThreadLocals()" : 1 , "getCompilerClasspath()" : 1 , "getConfigured()" : 1 , "getCookies()" : 1 , "getCrossContext()" : 3 , "getDefaultContextXml()" : 1 , "getDefaultWebXml()" : 1 , "getDelegate()" : 1 , "getDisplayName()" : 1 , "getDocBase()" : 3 , "getEffectiveMajorVersion()" : 1 , "getEffectiveMinorVersion()" : 1 , "getHostname()" : 2 , "getIgnoreAnnotations()" : 1 , "getInstanceManager()" : 12 , "getJ2EEApplication()" : 3 , "getJ2EEServer()" : 3 , "getJarScanner()" : 1 , "getJspConfigDescriptor()" : 1 , "getMapper()" : 1 , "getNamingContextName()" : 1 , "getNamingResources()" : 1 , "getObjectKeyPropertiesNameOnly()" : 2 , "getObjectNameKeyProperties()" : 1 , "getParentClassLoader()" : 1 , "getPath()" : 16 , "getPaused()" : 1 , "getPrivileged()" : 2 , "getRealPath(String)" : 1 , "getServletContext()" : 19 , "getStartupTime()" : 1 , "getSwallowOutput()" : 1 , "getUnloadDelay()" : 1 , "getUnpackWAR()" : 1 , "getWorkDir()" : 4 , "getWorkPath()" : 1 , "isAllowLinking()" : 2 , "isCachingAllowed()" : 4 , "isServlet22()" : 5 , "isUseNaming()" : 4 , "listenerStart()" : 1 , "listenerStop()" : 1 , "loadOnStartup(Container[])" : 1 , "postWelcomeFiles()" : 3 , "postWorkDirectory()" : 2 , "reload()" : 1 , "removeChild(Container)" : 1 , "resetContext()" : 1 , "resourcesStart()" : 2 , "resourcesStop()" : 1 , "setAliases(String)" : 2 , "setApplicationEventListeners(Object[])" : 2 , "setApplicationLifecycleListeners(Object[])" : 2 , "setCacheTTL(int)" : 1 , "setCachingAllowed(boolean)" : 2 , "setCharsetMapper(CharsetMapper)" : 1 , "setClearReferencesStopTimerThreads(boolean)" : 1 , "setConfigFile(URL)" : 1 , "setConfigured(boolean)" : 1 , "setDocBase(String)" : 2 , "setLoader(Loader)" : 3 , "setName(String)" : 1 , "setNamingResources(NamingResources)" : 1 , "setOriginalDocBase(String)" : 2 , "setPath(String)" : 2 , "setPaused(boolean)" : 2 , "setReplaceWelcomeFiles(boolean)" : 1 , "setResources(DirContext)" : 3 , "setStartupTime(long)" : 1 , "setTldNamespaceAware(boolean)" : 1 , "setTldScanTime(long)" : 1 , "setTldValidation(boolean)" : 1 , "setWorkDir(String)" : 1 , "setXmlNamespaceAware(boolean)" : 1 , "setXmlValidation(boolean)" : 1 , "startInternal()" : 1 , "stopInternal()" : 1 , "unbindThread(ClassLoader)" : 4 , "validateFilterMap(FilterMap)" : 2 , "validateURLPattern(String)" : 3}},{ "className" : "org::apache::tomcat::util::net::NioEndpoint::NioBufferHandler" , "selectors" : { "NioBufferHandler(int,int,boolean)" : 2}},{ "className" : "org::apache::coyote::http11::InternalNioOutputBuffer" , "selectors" : { "InternalNioOutputBuffer(Response,int)" : 2 , "addToBB(byte[],int,int)" : 2 , "commit()" : 1 , "endRequest()" : 2 , "flush()" : 1 , "flushBuffer()" : 3 , "getSelectorPool()" : 3 , "recycle()" : 1 , "sendAck()" : 1 , "setSelectorPool(NioSelectorPool)" : 1 , "setSocket(NioChannel)" : 1 , "writeToSocket(ByteBuffer,boolean,boolean)" : 2}},{ "className" : "org::apache::tomcat::util::net::JIoEndpoint::Handler" , "selectors" : { "process(SocketWrapper<Socket>)" : 1 , "process(SocketWrapper<Socket>,SocketStatus)" : 1}},{ "className" : "org::apache::tomcat::util::net::jsse::JSSESupport" , "selectors" : { "JSSESupport(SSLSession)" : 1 , "JSSESupport(SSLSocket)" : 1 , "getPeerCertificateChain(boolean)" : 1 , "getX509Certificates(SSLSession)" : 1 , "handShake()" : 1}},{ "className" : "javax::naming::InvalidNameException" , "selectors" : { "InvalidNameException(String)" : 10}},{ "className" : "org::apache::catalina::realm::MemoryUserRule" , "selectors" : { "MemoryUserRule()" : 1}},{ "className" : "java::io::DataOutputStream" , "selectors" : { "DataOutputStream(OutputStream)" : 251 , "flush()" : 175 , "size()" : 19 , "write(byte[],int,int)" : 159 , "write(int)" : 69 , "writeBoolean(boolean)" : 190 , "writeByte(int)" : 349 , "writeBytes(String)" : 146 , "writeChar(int)" : 21 , "writeChars(String)" : 6 , "writeDouble(double)" : 216 , "writeFloat(float)" : 51 , "writeInt(int)" : 656 , "writeLong(long)" : 231 , "writeShort(int)" : 485 , "writeUTF(String)" : 201}},{ "className" : "org::apache::catalina::session::PersistentManagerBase::PrivilegedStoreKeys" , "selectors" : { "PrivilegedStoreKeys()" : 1}},{ "className" : "org::apache::catalina::ant::jmx::JMXAccessorCreateTask" , "selectors" : { "jmxCreate(MBeanServerConnection,String)" : 1 , "jmxExecute(MBeanServerConnection)::BuildException" : 2}},{ "className" : "org::apache::catalina::Manager" , "selectors" : { "add(Session)" : 2 , "backgroundProcess()" : 1 , "changeSessionId(Session)" : 1 , "createEmptySession()" : 2 , "createSession(String)" : 3 , "findSession(String)" : 12 , "findSessions()" : 3 , "getActiveSessions()" : 1 , "getContainer()" : 71 , "getDistributable()" : 1 , "getExpiredSessions()" : 1 , "getMaxInactiveInterval()" : 2 , "getSessionAverageAliveTime()" : 1 , "getSessionMaxAliveTime()" : 1 , "remove(Session)" : 2 , "setContainer(Container)" : 1 , "setDistributable(boolean)" : 2 , "setExpiredSessions(long)" : 1 , "setSessionAverageAliveTime(int)" : 1 , "setSessionMaxAliveTime(int)" : 1}},{ "className" : "org::apache::catalina::valves::Benchmarks::TimeDateElementBenchmarkTest_LocalStruct_SBuilder::Struct" , "selectors" : { "Struct()" : 1}},{ "className" : "javax::servlet::SessionTrackingMode" , "selectors" : { "valueOf(String)" : 1}},{ "className" : "org::apache::catalina::startup::UserConfig" , "selectors" : { "deploy()" : 1 , "deploy(String,String)" : 1 , "getHomeBase()" : 1 , "start()" : 1 , "stop()" : 1}},{ "className" : "javax::naming::spi::NamingManager" , "selectors" : { "getObjectInstance(Object,Name,Context,Hashtable<?,?>)" : 1 , "getStateToBind(Object,Name,Context,Hashtable<?,?>)" : 1 , "hasInitialContextFactoryBuilder()" : 1 , "setInitialContextFactoryBuilder(InitialContextFactoryBuilder)" : 2}},{ "className" : "org::apache::el::TesterBeanC" , "selectors" : { "TesterBeanC()" : 1}},{ "className" : "org::apache::tomcat::util::http::fileupload::FileItemHeaders" , "selectors" : { "getHeader(String)" : 7 , "getHeaderNames()" : 1 , "getHeaders(String)" : 1}},{ "className" : "org::apache::catalina::startup::ClassLoaderFactory" , "selectors" : { "createClassLoader(File[],File[],ClassLoader)" : 1 , "createClassLoader(String[],Integer[],ClassLoader)" : 1}},{ "className" : "org::apache::tomcat::util::net::SSLImplementation" , "selectors" : { "getInstance()" : 1 , "getInstance(String)" : 2 , "getSSLSupport(SSLSession)" : 1 , "getSSLSupport(Socket)" : 1 , "getServerSocketFactory()" : 1}},{ "className" : "org::apache::catalina::ant::JMXGetTask" , "selectors" : { "execute()::BuildException" : 1}},{ "className" : "org::apache::tomcat::util::http::CookiesBaseTest" , "selectors" : { "addServlets(Tomcat)" : 4}},{ "className" : "org::apache::tomcat::util::http::fileupload::MultipartStream::IllegalBoundaryException" , "selectors" : { "IllegalBoundaryException(String)" : 1}},{ "className" : "org::apache::naming::resources::FileDirContext" , "selectors" : { "FileDirContext()" : 3 , "FileDirContext(Hashtable<String,Object>)" : 2 , "doLookup(String)" : 1 , "file(String)" : 6 , "getAllowLinking()" : 2 , "list(File)" : 3 , "normalize(String)" : 2 , "rebind(String,Object,Attributes)" : 1 , "release()" : 1 , "setAllowLinking(boolean)" : 4 , "setDocBase(String)" : 2 , "unbind(String)" : 1}},{ "className" : "compressionFilters::CompressionFilter" , "selectors" : { "init(FilterConfig)" : 1}},{ "className" : "org::apache::catalina::ant::ValidatorTask" , "selectors" : { "execute()::BuildException" : 3}},{ "className" : "org::apache::catalina::realm::MemoryRealm" , "selectors" : { "MemoryRealm()" : 1 , "addUser(String,String,String)" : 1 , "authenticate(String,String)" : 1 , "getDigester()" : 1 , "getPrincipal(String)" : 1}},{ "className" : "org::apache::tomcat::util::modeler::BaseNotificationBroadcasterEntry" , "selectors" : { "BaseNotificationBroadcasterEntry(NotificationListener,NotificationFilter,Object)" : 1}},{ "className" : "org::apache::jasper::compiler::ELParser" , "selectors" : { "ELParser(String,boolean)" : 1 , "getIndex()" : 1 , "hasNext()" : 4 , "hasNextChar()" : 6 , "isELReserved(String)" : 1 , "nextChar()" : 5 , "nextToken()" : 4 , "parse(String,boolean)" : 4 , "parseEL()" : 1 , "parseFunction()" : 1 , "parseQuotedChars(char)" : 1 , "peekChar()" : 1 , "setIndex(int)" : 1 , "skipSpaces()" : 2 , "skipUntilEL()" : 1}},{ "className" : "org::apache::tomcat::util::buf::ReadConvertor" , "selectors" : { "ReadConvertor(IntermediateInputStream,String)" : 1 , "read(char[],int,int)" : 1 , "recycle()" : 1}},{ "className" : "org::apache::tomcat::jni::Socket" , "selectors" : { "accept(long)" : 1 , "bind(long,long)" : 1 , "close(long)" : 1 , "create(int,int,int,long)" : 1 , "destroy(long)" : 20 , "listen(long,int)" : 1 , "optSet(long,int,int)" : 6 , "pool(long)" : 1 , "recvbb(long,int,int)" : 4 , "send(long,byte[],int,int)" : 1 , "sendb(long,ByteBuffer,int,int)" : 3 , "sendbb(long,int,int)" : 2 , "sendfilen(long,long,long,long,int)" : 2 , "setrbb(long,ByteBuffer)" : 2 , "setsbb(long,ByteBuffer)" : 2 , "timeoutSet(long,long)" : 8}},{ "className" : "org::apache::catalina::authenticator::DigestAuthenticator" , "selectors" : { "findPrincipal(Request,String,Realm)" : 1 , "generateNOnce(Request)" : 1 , "parseUsername(String)" : 1 , "removeQuotes(String)" : 8 , "removeQuotes(String,boolean)" : 2 , "setAuthenticateHeader(HttpServletRequest,HttpServletResponse,LoginConfig,String)" : 1}},{ "className" : "org::apache::catalina::startup::TaglibUriRule" , "selectors" : { "TaglibUriRule()" : 1 , "isDuplicateUri()" : 1 , "setDuplicateUri(boolean)" : 1}},{ "className" : "org::apache::jasper::runtime::JspApplicationContextImpl" , "selectors" : { "JspApplicationContextImpl()" : 1 , "createELContext(JspContext)" : 1 , "createELResolver()" : 1 , "getExpressionFactory()" : 1 , "getInstance(ServletContext)" : 3}},{ "className" : "org::apache::tomcat::util::bcel::classfile::AnnotationElementValue" , "selectors" : { "AnnotationElementValue(int,AnnotationEntry,ConstantPool)" : 1 , "getAnnotationEntry()" : 1 , "stringifyValue()" : 1}},{ "className" : "org::apache::catalina::valves::RequestFilterValve" , "selectors" : { "precalculate(String)" : 2 , "process(String,Request,Response)" : 2}},{ "className" : "org::apache::catalina::core::StandardService" , "selectors" : { "StandardService()" : 3 , "addConnector(Connector)" : 1 , "addPropertyChangeListener(PropertyChangeListener)" : 1 , "findExecutors()" : 2 , "getContainer()" : 1 , "getName()" : 1 , "removeConnector(Connector)" : 1 , "removePropertyChangeListener(PropertyChangeListener)" : 1}},{ "className" : "org::apache::el::ValueExpressionImpl" , "selectors" : { "ValueExpressionImpl(String,Node,FunctionMapper,VariableMapper,Class<?>)" : 1 , "getNode()" : 7 , "hashCode()" : 1}},{ "className" : "org::apache::catalina::UserDatabase" , "selectors" : { "createGroup(String,String)" : 1 , "createRole(String,String)" : 1 , "createUser(String,String,String)" : 1 , "findGroup(String)" : 4 , "findRole(String)" : 7 , "findUser(String)" : 4 , "getGroups()" : 2 , "getId()" : 4 , "getRoles()" : 3 , "getUsers()" : 2 , "removeGroup(Group)" : 1 , "removeRole(Role)" : 1 , "removeUser(User)" : 1}},{ "className" : "org::apache::el::parser::AstDiv" , "selectors" : { "AstDiv(int)" : 1}},{ "className" : "org::apache::naming::resources::DirContextURLStreamHandlerFactory" , "selectors" : { "DirContextURLStreamHandlerFactory()" : 1}},{ "className" : "org::apache::el::parser::AstAnd" , "selectors" : { "AstAnd(int)" : 1}},{ "className" : "org::apache::tomcat::util::modeler::AttributeInfo" , "selectors" : { "AttributeInfo()" : 4 , "createAttributeInfo()" : 1 , "getGetMethod()" : 1 , "getMethodName(String,boolean,boolean)" : 2 , "getSetMethod()" : 1 , "isIs()" : 1 , "isReadable()" : 1 , "isWriteable()" : 1 , "setGetMethod(String)" : 1 , "setReadable(boolean)" : 1 , "setSetMethod(String)" : 1 , "setWriteable(boolean)" : 2}},{ "className" : "org::apache::tomcat::util::net::AbstractEndpoint" , "selectors" : { "adjustRelativePath(String,String)" : 2 , "createExecutor()" : 3 , "destroy()" : 1 , "getAddress()" : 16 , "getAlgorithm()" : 4 , "getAllowUnsafeLegacyRenegotiation()" : 2 , "getBacklog()" : 8 , "getCiphers()" : 2 , "getCiphersArray()" : 2 , "getClientAuth()" : 6 , "getCrlFile()" : 2 , "getDaemon()" : 3 , "getExecutor()" : 15 , "getKeepAliveTimeout()" : 7 , "getKeyAlias()" : 4 , "getKeyPass()" : 2 , "getKeystoreFile()" : 3 , "getKeystorePass()" : 3 , "getKeystoreProvider()" : 2 , "getKeystoreType()" : 4 , "getMaxKeepAliveRequests()" : 5 , "getMaxThreads()" : 6 , "getMinSpareThreads()" : 1 , "getName()" : 9 , "getPort()" : 25 , "getSessionCacheSize()" : 4 , "getSessionTimeout()" : 4 , "getSoLinger()" : 4 , "getSoTimeout()" : 9 , "getSocketProperties()" : 10 , "getSslEnabledProtocolsArray()" : 2 , "getSslProtocol()" : 3 , "getTcpNoDelay()" : 4 , "getThreadPriority()" : 6 , "getTrustMaxCertLength()" : 2 , "getTruststoreAlgorithm()" : 2 , "getTruststoreFile()" : 4 , "getTruststorePass()" : 4 , "getTruststoreProvider()" : 2 , "getTruststoreType()" : 4 , "init()" : 2 , "isSSLEnabled()" : 8 , "pause()" : 1 , "resume()" : 1 , "setAddress(InetAddress)" : 4 , "setAlgorithm(String)" : 1 , "setAllowUnsafeLegacyRenegotiation(String)" : 1 , "setBacklog(int)" : 4 , "setCiphers(String)" : 1 , "setClientAuth(String)" : 1 , "setCrlFile(String)" : 1 , "setExecutor(Executor)" : 4 , "setKeepAliveTimeout(int)" : 3 , "setKeyAlias(String)" : 1 , "setKeyPass(String)" : 1 , "setKeystoreFile(String)" : 1 , "setKeystorePass(String)" : 1 , "setKeystoreProvider(String)" : 1 , "setKeystoreType(String)" : 1 , "setMaxKeepAliveRequests(int)" : 1 , "setMaxThreads(int)" : 4 , "setName(String)" : 5 , "setPort(int)" : 4 , "setProperty(String,String)" : 4 , "setSSLEnabled(boolean)" : 2 , "setSessionCacheSize(String)" : 1 , "setSessionTimeout(String)" : 1 , "setSoLinger(int)" : 4 , "setSoTimeout(int)" : 4 , "setSslProtocol(String)" : 1 , "setTcpNoDelay(boolean)" : 4 , "setThreadPriority(int)" : 4 , "setTrustMaxCertLength(String)" : 1 , "setTruststoreAlgorithm(String)" : 1 , "setTruststoreFile(String)" : 1 , "setTruststorePass(String)" : 1 , "setTruststoreProvider(String)" : 1 , "setTruststoreType(String)" : 1 , "shutdownExecutor()" : 3 , "start()" : 2 , "unlockAccept()" : 4}},{ "className" : "org::apache::jasper::compiler::Node::Root" , "selectors" : { "Node" : 2 , "getJspConfigPageEncoding()" : 1 , "getPageEncoding()" : 3 , "isBomPresent()" : 2 , "isDefaultPageEncoding()" : 1 , "isEncodingSpecifiedInProlog()" : 2 , "isXmlSyntax()" : 15 , "nextTemporaryVariableName()" : 3 , "setIsBomPresent(boolean)" : 2 , "setIsDefaultPageEncoding(boolean)" : 1 , "setIsEncodingSpecifiedInProlog(boolean)" : 1 , "setJspConfigPageEncoding(String)" : 2 , "setPageEncoding(String)" : 4}},{ "className" : "org::apache::catalina::tribes::test::membership::TestMemberArrival::TestMbrListener" , "selectors" : { "TestMbrListener(String)" : 1}},{ "className" : "org::apache::jasper::compiler::Node::ELExpression" , "selectors" : { "Node" : 2 , "getEL()" : 3 , "getType()" : 4 , "setEL(Nodes)" : 1}},{ "className" : "org::apache::catalina::manager::ManagerServlet" , "selectors" : { "addServiced(String)" : 5 , "check(String)" : 5 , "copy(File,File)" : 6 , "copyInternal(File,File,byte[])" : 2 , "deploy(PrintWriter,String,String)" : 1 , "deploy(PrintWriter,String,String,String,boolean)" : 2 , "deploy(PrintWriter,String,String,boolean,HttpServletRequest)" : 1 , "expireSessions(PrintWriter,String,HttpServletRequest)" : 2 , "findleaks(PrintWriter)" : 2 , "getAppBase()" : 7 , "getConfigFile(String)" : 2 , "getDocBase(String)" : 7 , "init()" : 1 , "isDeployed(String)" : 3 , "isServiced(String)" : 5 , "list(PrintWriter)" : 1 , "printResources(PrintWriter,String,Context,String,Class<?>)" : 2 , "reload(PrintWriter,String)" : 2 , "removeServiced(String)" : 5 , "resources(PrintWriter,String)" : 1 , "roles(PrintWriter)" : 1 , "save(PrintWriter,String)" : 1 , "serverinfo(PrintWriter)" : 1 , "sessions(PrintWriter,String,int)" : 3 , "start(PrintWriter,String)" : 2 , "stop(PrintWriter,String)" : 2 , "undeploy(PrintWriter,String)" : 5 , "undeployDir(File)" : 2 , "uploadWar(HttpServletRequest,File)" : 1}},{ "className" : "org::apache::tomcat::util::net::NioBlockingSelector" , "selectors" : { "NioBlockingSelector()" : 1 , "close()" : 1 , "open(Selector)" : 1 , "read(ByteBuffer,NioChannel,long)" : 1 , "write(ByteBuffer,NioChannel,long,MutableInteger)" : 1}},{ "className" : "javax::servlet::http::HttpServletRequestWrapper" , "selectors" : { "HttpServletRequestWrapper(HttpServletRequest)" : 2 , "_getHttpServletRequest()" : 30 , "getRequestedSessionId()" : 1 , "getSession(boolean)" : 3 , "isRequestedSessionIdValid()" : 1}},{ "className" : "org::apache::tomcat::util::bcel::classfile::Method" , "selectors" : { "Method(DataInputStream,ConstantPool)" : 1 , "getCode()" : 1 , "getExceptionTable()" : 1 , "getLocalVariableTable()" : 1}},{ "className" : "org::apache::catalina::core::ApplicationFilterRegistration" , "selectors" : { "ApplicationFilterRegistration(FilterDef,Context)" : 3 , "getInitParameter(String)" : 2 , "setInitParameter(String,String)" : 1}},{ "className" : "java::lang::UnsupportedClassVersionError" , "selectors" : { "UnsupportedClassVersionError(String)" : 2}},{ "className" : "javax::servlet::http::HttpSessionActivationListener" , "selectors" : { "sessionDidActivate(HttpSessionEvent)" : 1 , "sessionWillPassivate(HttpSessionEvent)" : 1}},{ "className" : "org::apache::jasper::compiler::JspDocumentParser" , "selectors" : { "JspDocumentParser(ParserController,String,boolean,boolean)" : 1 , "addInclude(Node,List<String>)" : 2 , "checkPrefix(String,String)" : 2 , "checkPrefixes(String,String,Attributes)" : 1 , "checkScriptingBody(ScriptingElement)" : 1 , "fatalError(SAXParseException)" : 1 , "getBodyType(CustomTag)" : 3 , "getPrefix(String)" : 3 , "getSAXParser(boolean,JspDocumentParser)" : 2 , "getTaglibInfo(String,String)" : 1 , "isTagDependent(Node)" : 1 , "parse(ParserController,String,JarFile,Node,boolean,boolean,String,String,boolean,boolean)" : 1 , "parseCustomAction(String,String,String,Attributes,Attributes,Attributes,Mark,Node)" : 1 , "parseStandardAction(String,String,Attributes,Attributes,Attributes,Mark)" : 3 , "processChars()" : 5 , "processIncludeDirective(String,Node)" : 2}},{ "className" : "org::apache::catalina::ant::AbstractCatalinaTask" , "selectors" : { "AbstractCatalinaTask()" : 1 , "execute()::BuildException" : 1 , "execute(???)" : 14 , "execute(String,InputStream,String,int)::BuildException" : 2 , "getCharset()" : 17 , "setUrl(String)" : 1}},{ "className" : "org::apache::naming::factory::webservices::ServiceRefFactory" , "selectors" : { "getObjectInstance(Object,Name,Context,Hashtable<?,?>)::HandlerInfo" : 1}},{ "className" : "org::apache::tomcat::util::http::fileupload::FileCleaningTracker::Reaper" , "selectors" : { "Reaper()" : 1}},{ "className" : "javax::el::CompositeELResolver::FeatureIterator" , "selectors" : { "FeatureIterator(ELContext,Object,ELResolver[],int)" : 1 , "guaranteeIterator()" : 2 , "hasNext()" : 2}},{ "className" : "org::apache::catalina::ha::tcp::SimpleTcpCluster" , "selectors" : { "addClusterListener(ClusterListener)" : 2 , "addValve(Valve)" : 2 , "checkDefaults()" : 1 , "getContainer()" : 10 , "getLocalMember()" : 2 , "getManagerClassName()" : 1 , "getManagerName(String,Manager)" : 2 , "getProperty(String)" : 1 , "getPropertyNames()" : 1 , "isHeartbeatBackgroundEnabled()" : 1 , "messageReceived(ClusterMessage)" : 1 , "registerClusterValve()" : 1 , "send(ClusterMessage,Member)" : 2 , "setProperty(String,Object)" : 1 , "unregisterClusterValve()" : 1}},{ "className" : "org::apache::el::TestELEvaluation::FMapper" , "selectors" : { "FMapper()" : 1}}]
